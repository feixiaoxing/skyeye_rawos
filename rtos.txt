
rtos:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007cb8  30000000  30000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000008  30007cb8  30007cb8  0000fcb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata.str1.4 0000013c  30007cc0  30007cc0  0000fcc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000004  30007e00  30007e00  0000fe00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000c514  30007e20  30007e20  0000fe04  2**2
                  ALLOC
  5 .ARM.attributes 00000026  00000000  00000000  0000fe04  2**0
                  CONTENTS, READONLY
  6 .comment      00000018  00000000  00000000  0000fe2a  2**0
                  CONTENTS, READONLY
  7 .debug_line   000032aa  00000000  00000000  0000fe42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001195a  00000000  00000000  000130ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003286  00000000  00000000  00024a46  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000460  00000000  00000000  00027cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001bac  00000000  00000000  00028130  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005079  00000000  00000000  00029cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 0000198d  00000000  00000000  0002ed55  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002b46  00000000  00000000  000306e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000690  00000000  00000000  00033228  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

30000000 <_start>:
.extern	__vector_irq
.extern	__vector_fiq

_start:
	
	ldr	pc,_vector_reset
30000000:	e59ff018 	ldr	pc, [pc, #24]	; 30000020 <_vector_reset>
	ldr pc,_vector_undefined
30000004:	e59ff018 	ldr	pc, [pc, #24]	; 30000024 <_vector_undefined>
	ldr pc,_vector_swi
30000008:	e59ff018 	ldr	pc, [pc, #24]	; 30000028 <_vector_swi>
	ldr pc,_vector_prefetch_abort
3000000c:	e59ff018 	ldr	pc, [pc, #24]	; 3000002c <_vector_prefetch_abort>
	ldr pc,_vector_data_abort
30000010:	e59ff018 	ldr	pc, [pc, #24]	; 30000030 <_vector_data_abort>
	ldr pc,_vector_reserved
30000014:	e59ff018 	ldr	pc, [pc, #24]	; 30000034 <_vector_reserved>
	ldr pc,_vector_irq
30000018:	e59ff018 	ldr	pc, [pc, #24]	; 30000038 <_vector_irq>
	ldr pc,_vector_fiq
3000001c:	e59ff018 	ldr	pc, [pc, #24]	; 3000003c <_vector_fiq>

30000020 <_vector_reset>:
30000020:	30000040 	andcc	r0, r0, r0, asr #32

30000024 <_vector_undefined>:
30000024:	300001d4 	ldrdcc	r0, [r0], -r4

30000028 <_vector_swi>:
30000028:	300001d8 	ldrdcc	r0, [r0], -r8

3000002c <_vector_prefetch_abort>:
3000002c:	300001dc 	ldrdcc	r0, [r0], -ip

30000030 <_vector_data_abort>:
30000030:	300001e0 	andcc	r0, r0, r0, ror #3

30000034 <_vector_reserved>:
30000034:	300001e4 	andcc	r0, r0, r4, ror #3

30000038 <_vector_irq>:
30000038:	300001e8 	andcc	r0, r0, r8, ror #3

3000003c <_vector_fiq>:
3000003c:	30000258 	andcc	r0, r0, r8, asr r2

30000040 <__vector_reset>:
.extern plat_boot
.extern __bss_start__
.extern __bss_end__

__vector_reset:
        msr cpsr_c,#(DISABLE_IRQ|DISABLE_FIQ|IRQ_MOD)
30000040:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
	ldr	sp,=_IRQ_STACK
30000044:	e59fd04c 	ldr	sp, [pc, #76]	; 30000098 <_bss_end_+0x4>
	msr cpsr_c,#(DISABLE_IRQ|DISABLE_FIQ|FIQ_MOD)
30000048:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
	ldr	sp,=_FIQ_STACK
3000004c:	e59fd048 	ldr	sp, [pc, #72]	; 3000009c <_bss_end_+0x8>
	msr cpsr_c,#(DISABLE_IRQ|DISABLE_FIQ|ABT_MOD)
30000050:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
	ldr	sp,=_ABT_STACK
30000054:	e59fd044 	ldr	sp, [pc, #68]	; 300000a0 <_bss_end_+0xc>
	msr cpsr_c,#(DISABLE_IRQ|DISABLE_FIQ|UND_MOD)
30000058:	e321f0db 	msr	CPSR_c, #219	; 0xdb
	ldr	sp,=_UND_STACK
3000005c:	e59fd040 	ldr	sp, [pc, #64]	; 300000a4 <_bss_end_+0x10>
	msr cpsr_c,#(DISABLE_IRQ|DISABLE_FIQ|SYS_MOD)
30000060:	e321f0df 	msr	CPSR_c, #223	; 0xdf
	ldr	sp,=_SYS_STACK
30000064:	e59fd03c 	ldr	sp, [pc, #60]	; 300000a8 <_bss_end_+0x14>
        msr cpsr_c,#(DISABLE_IRQ|DISABLE_FIQ|SVC_MOD)
30000068:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
	ldr	sp,=_SVC_STACK
3000006c:	e59fd038 	ldr	sp, [pc, #56]	; 300000ac <_bss_end_+0x18>

30000070 <_clear_bss>:
	
_clear_bss:
	ldr r1,_bss_start_
30000070:	e59f1018 	ldr	r1, [pc, #24]	; 30000090 <_bss_start_>
	ldr r3,_bss_end_
30000074:	e59f3018 	ldr	r3, [pc, #24]	; 30000094 <_bss_end_>
	mov r2,#0x0
30000078:	e3a02000 	mov	r2, #0
1:
	cmp r1,r3
3000007c:	e1510003 	cmp	r1, r3
	beq _main
30000080:	0a000001 	beq	3000008c <_main>
	str r2,[r1],#0x4
30000084:	e4812004 	str	r2, [r1], #4
	b	1b
30000088:	eafffffb 	b	3000007c <_clear_bss+0xc>

3000008c <_main>:

_main:
	b plat_boot
3000008c:	ea000035 	b	30000168 <plat_boot>

30000090 <_bss_start_>:
30000090:	30007e20 	andcc	r7, r0, r0, lsr #28

30000094 <_bss_end_>:
30000094:	30014334 	andcc	r4, r1, r4, lsr r3
30000098:	307feffc 	ldrshtcc	lr, [pc, #-252]	; 2fffffa4 <MEM_SIZE+0x2f7fffa4>
3000009c:	307fdffc 	ldrshtcc	sp, [pc, #-252]	; 2fffffa8 <MEM_SIZE+0x2f7fffa8>
300000a0:	307fcffc 	ldrshtcc	ip, [pc, #-252]	; 2fffffac <MEM_SIZE+0x2f7fffac>
300000a4:	307fbffc 	ldrshtcc	fp, [pc, #-252]	; 2fffffb0 <MEM_SIZE+0x2f7fffb0>
300000a8:	307faffc 	ldrshtcc	sl, [pc, #-252]	; 2fffffb4 <MEM_SIZE+0x2f7fffb4>
300000ac:	307ffffc 	ldrshtcc	pc, [pc, #-252]	; 2fffffb8 <MEM_SIZE+0x2f7fffb8>

300000b0 <helloworld>:

typedef void (*init_func)(void);

#define UFCON0	((volatile unsigned int *)(0x50000020))

void helloworld(void){
300000b0:	e59f2018 	ldr	r2, [pc, #24]	; 300000d0 <helloworld+0x20>
300000b4:	e3a03068 	mov	r3, #104	; 0x68
	const char *p="helloworld\n";
	while(*p){
		*UFCON0=*p++;
300000b8:	e3a01205 	mov	r1, #1342177280	; 0x50000000
300000bc:	e5813020 	str	r3, [r1, #32]

#define UFCON0	((volatile unsigned int *)(0x50000020))

void helloworld(void){
	const char *p="helloworld\n";
	while(*p){
300000c0:	e5f23001 	ldrb	r3, [r2, #1]!
300000c4:	e3530000 	cmp	r3, #0
300000c8:	1afffffb 	bne	300000bc <helloworld+0xc>
		*UFCON0=*p++;
	};
}
300000cc:	e12fff1e 	bx	lr
300000d0:	30007cc0 	andcc	r7, r0, r0, asr #25

300000d4 <test_mmu>:

void test_mmu(void){
300000d4:	e59f2018 	ldr	r2, [pc, #24]	; 300000f4 <test_mmu+0x20>
300000d8:	e3a03074 	mov	r3, #116	; 0x74
	const char *p="test_mmu\n";
	while(*p){
		*(volatile unsigned int *)0xd0000020=*p++;
300000dc:	e3a0120d 	mov	r1, #-805306368	; 0xd0000000
300000e0:	e5813020 	str	r3, [r1, #32]
	};
}

void test_mmu(void){
	const char *p="test_mmu\n";
	while(*p){
300000e4:	e5f23001 	ldrb	r3, [r2, #1]!
300000e8:	e3530000 	cmp	r3, #0
300000ec:	1afffffb 	bne	300000e0 <test_mmu+0xc>
		*(volatile unsigned int *)0xd0000020=*p++;
	};
}
300000f0:	e12fff1e 	bx	lr
300000f4:	30007ccc 	andcc	r7, r0, ip, asr #25

300000f8 <timer_init>:
#define TIMER_BASE  (0xd1000000)
#define TCFG0   ((volatile unsigned int *)(TIMER_BASE+0x0))
#define TCFG1   ((volatile unsigned int *)(TIMER_BASE+0x4))
#define TCON    ((volatile unsigned int *)(TIMER_BASE+0x8))
#define TCONB4  ((volatile unsigned int *)(TIMER_BASE+0x3c))
	*TCFG0|=0x800;
300000f8:	e3a034d1 	mov	r3, #-788529152	; 0xd1000000
300000fc:	e5932000 	ldr	r2, [r3]
static init_func init[]={
	helloworld,
	0,
};

void timer_init(void){
30000100:	e92d4010 	push	{r4, lr}
#define TIMER_BASE  (0xd1000000)
#define TCFG0   ((volatile unsigned int *)(TIMER_BASE+0x0))
#define TCFG1   ((volatile unsigned int *)(TIMER_BASE+0x4))
#define TCON    ((volatile unsigned int *)(TIMER_BASE+0x8))
#define TCONB4  ((volatile unsigned int *)(TIMER_BASE+0x3c))
	*TCFG0|=0x800;
30000104:	e3822b02 	orr	r2, r2, #2048	; 0x800
30000108:	e5832000 	str	r2, [r3]
	*TCON&=(~(7<<20));
3000010c:	e5932008 	ldr	r2, [r3, #8]
	*TCONB4=10000;

	*TCON|=(1<<20);
	*TCON&=~(1<<21);

	umask_int(14);
30000110:	e3a0000e 	mov	r0, #14
#define TCFG0   ((volatile unsigned int *)(TIMER_BASE+0x0))
#define TCFG1   ((volatile unsigned int *)(TIMER_BASE+0x4))
#define TCON    ((volatile unsigned int *)(TIMER_BASE+0x8))
#define TCONB4  ((volatile unsigned int *)(TIMER_BASE+0x3c))
	*TCFG0|=0x800;
	*TCON&=(~(7<<20));
30000114:	e3c22607 	bic	r2, r2, #7340032	; 0x700000
30000118:	e5832008 	str	r2, [r3, #8]
	*TCON|=(1<<22);
3000011c:	e5932008 	ldr	r2, [r3, #8]
30000120:	e3822501 	orr	r2, r2, #4194304	; 0x400000
30000124:	e5832008 	str	r2, [r3, #8]
	*TCON|=(1<<21);
30000128:	e5932008 	ldr	r2, [r3, #8]
3000012c:	e3822602 	orr	r2, r2, #2097152	; 0x200000
30000130:	e5832008 	str	r2, [r3, #8]

	*TCONB4=10000;
30000134:	e59f2028 	ldr	r2, [pc, #40]	; 30000164 <timer_init+0x6c>
30000138:	e583203c 	str	r2, [r3, #60]	; 0x3c

	*TCON|=(1<<20);
3000013c:	e5932008 	ldr	r2, [r3, #8]
30000140:	e3822601 	orr	r2, r2, #1048576	; 0x100000
30000144:	e5832008 	str	r2, [r3, #8]
	*TCON&=~(1<<21);
30000148:	e5932008 	ldr	r2, [r3, #8]
3000014c:	e3c22602 	bic	r2, r2, #2097152	; 0x200000
30000150:	e5832008 	str	r2, [r3, #8]

	umask_int(14);
30000154:	eb0001b5 	bl	30000830 <umask_int>
	disable_irq();
30000158:	eb0001ae 	bl	30000818 <disable_irq>
//	enable_irq();
}
3000015c:	e8bd4010 	pop	{r4, lr}
30000160:	e12fff1e 	bx	lr
30000164:	00002710 	andeq	r2, r0, r0, lsl r7

30000168 <plat_boot>:

int test_switch = 0;

void plat_boot(void){
30000168:	e92d4010 	push	{r4, lr}
	int i;
	for(i=0;init[i];i++){
3000016c:	e59f3054 	ldr	r3, [pc, #84]	; 300001c8 <plat_boot+0x60>
30000170:	e59f4054 	ldr	r4, [pc, #84]	; 300001cc <plat_boot+0x64>
		init[i]();
30000174:	e1a0e00f 	mov	lr, pc
30000178:	e12fff13 	bx	r3

int test_switch = 0;

void plat_boot(void){
	int i;
	for(i=0;init[i];i++){
3000017c:	e5b43004 	ldr	r3, [r4, #4]!
30000180:	e3530000 	cmp	r3, #0
30000184:	1afffffa 	bne	30000174 <plat_boot+0xc>
		init[i]();
	}
	init_sys_mmu();
30000188:	eb00004a 	bl	300002b8 <init_sys_mmu>
	start_mmu();
3000018c:	eb000034 	bl	30000264 <start_mmu>
30000190:	e59f2038 	ldr	r2, [pc, #56]	; 300001d0 <plat_boot+0x68>
30000194:	e3a03074 	mov	r3, #116	; 0x74
}

void test_mmu(void){
	const char *p="test_mmu\n";
	while(*p){
		*(volatile unsigned int *)0xd0000020=*p++;
30000198:	e3a0120d 	mov	r1, #-805306368	; 0xd0000000
3000019c:	e5813020 	str	r3, [r1, #32]
	};
}

void test_mmu(void){
	const char *p="test_mmu\n";
	while(*p){
300001a0:	e5f23001 	ldrb	r3, [r2, #1]!
300001a4:	e3530000 	cmp	r3, #0
300001a8:	1afffffb 	bne	3000019c <plat_boot+0x34>
		init[i]();
	}
	init_sys_mmu();
	start_mmu();
	test_mmu();
	test_printk();
300001ac:	eb00017d 	bl	300007a8 <test_printk>
	timer_init();
300001b0:	ebffffd0 	bl	300000f8 <timer_init>

	raw_os_init();
300001b4:	eb00108c 	bl	300043ec <raw_os_init>

	test_task();
300001b8:	eb001c30 	bl	30007280 <test_task>
	//test_timer();

	//test_block();
	//test_byte();

	raw_os_start();	
300001bc:	eb001073 	bl	30004390 <raw_os_start>
}
300001c0:	e8bd4010 	pop	{r4, lr}
300001c4:	e12fff1e 	bx	lr
300001c8:	300000b0 	strhcc	r0, [r0], -r0
300001cc:	30007cb8 	undefined instruction 0x30007cb8
300001d0:	30007ccc 	andcc	r7, r0, ip, asr #25

300001d4 <__vector_undefined>:
.extern common_irq_handler
.extern raw_finish_int


__vector_undefined:
	nop
300001d4:	e1a00000 	nop			; (mov r0, r0)

300001d8 <__vector_swi>:

__vector_swi:
	nop
300001d8:	e1a00000 	nop			; (mov r0, r0)

300001dc <__vector_prefetch_abort>:

__vector_prefetch_abort:	
	nop
300001dc:	e1a00000 	nop			; (mov r0, r0)

300001e0 <__vector_data_abort>:

__vector_data_abort:
	nop
300001e0:	e1a00000 	nop			; (mov r0, r0)

300001e4 <__vector_reserved>:

__vector_reserved:
	nop
300001e4:	e1a00000 	nop			; (mov r0, r0)

300001e8 <__vector_irq>:

__vector_irq:

       STMFD   SP!, {R1-R3}                    @ We will use R1-R3 as temporary registers
300001e8:	e92d000e 	push	{r1, r2, r3}
@----------------------------------------------------------------------------
@   R1--SP
@       R2--PC
@   R3--SPSR
@------------------------------------------------------------------------
        MOV     R1, SP
300001ec:	e1a0100d 	mov	r1, sp
        ADD     SP, SP, #12             @Adjust IRQ stack pointer
300001f0:	e28dd00c 	add	sp, sp, #12
        SUB     R2, LR, #4             @Adjust PC for return address to task
300001f4:	e24e2004 	sub	r2, lr, #4

        MRS     R3, SPSR                                @ Copy SPSR (Task CPSR)
300001f8:	e14f3000 	mrs	r3, SPSR



        MSR     CPSR_cxsf, #0x13|0xc0   @Change to SVC mode
300001fc:	e32ff0d3 	msr	CPSR_fsxc, #211	; 0xd3

                                                                        @ SAVE TASK''S CONTEXT ONTO OLD TASK''S STACK

        STMFD   SP!, {R2}                               @ Push task''s PC
30000200:	e92d0004 	push	{r2}
        STMFD   SP!, {R4-R12, LR}               @ Push task''s LR,R12-R4
30000204:	e92d5ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

        LDMFD   R1!, {R4-R6}                    @Load Task''s R1-R3 from IRQ stack
30000208:	e8b10070 	ldm	r1!, {r4, r5, r6}
        STMFD   SP!, {R4-R6}                    @ Push Task''s R1-R3 to SVC stack
3000020c:	e92d0070 	push	{r4, r5, r6}
        STMFD   SP!, {R0}                           @ Push Task''s R0 to SVC stack
30000210:	e92d0001 	push	{r0}

        STMFD   SP!, {R3}                               @ Push task''s CPSR
30000214:	e92d0008 	push	{r3}

        LDR     R0,=raw_int_nesting        @raw_int_nesting++
30000218:	e59f003c 	ldr	r0, [pc, #60]	; 3000025c <__vector_fiq+0x4>
        LDRB    R1,[R0]
3000021c:	e5d01000 	ldrb	r1, [r0]
        ADD     R1,R1,#1
30000220:	e2811001 	add	r1, r1, #1
        STRB    R1,[R0]
30000224:	e5c01000 	strb	r1, [r0]

        CMP     R1,#1                   @if(raw_int_nesting==1){
30000228:	e3510001 	cmp	r1, #1
        BNE     1f
3000022c:	1a000002 	bne	3000023c <__vector_irq+0x54>
        LDR     R4,=raw_task_active            @high_ready_obj->task_stack=SP;
30000230:	e59f4028 	ldr	r4, [pc, #40]	; 30000260 <__vector_fiq+0x8>
        LDR     R5,[R4]
30000234:	e5945000 	ldr	r5, [r4]
        STR     SP,[R5]                 @}
30000238:	e585d000 	str	sp, [r5]

1:
        MSR    CPSR_c,#0x12|0xc0    @Change to IRQ mode to use IRQ stack to handle interrupt
3000023c:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
	
	bl common_irq_handler
30000240:	eb000180 	bl	30000848 <common_irq_handler>

    	MSR         CPSR_c,#0x13|0xc0   @Change to SVC mode
30000244:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
    	BL          raw_finish_int           @Call raw_finish_int
30000248:	eb001325 	bl	30004ee4 <raw_finish_int>

    	LDMFD   SP!,{R4}               @POP the task''s CPSR
3000024c:	e8bd0010 	pop	{r4}
    	MSR         SPSR_cxsf,R4
30000250:	e16ff004 	msr	SPSR_fsxc, r4
    	LDMFD   SP!,{R0-R12,LR,PC}^    @POP new Task''s context
30000254:	e8fddfff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}^

30000258 <__vector_fiq>:


__vector_fiq:
	nop
30000258:	e1a00000 	nop			; (mov r0, r0)
3000025c:	30013e61 	andcc	r3, r1, r1, ror #28
30000260:	30013838 	andcc	r3, r1, r8, lsr r8

30000264 <start_mmu>:
#define PHYSICAL_VECTOR_ADDR		0x30000000

void start_mmu(void){
	unsigned int ttb=L1_PTR_BASE_ADDR;

	asm (
30000264:	e59f3020 	ldr	r3, [pc, #32]	; 3000028c <start_mmu+0x28>
30000268:	ee023f10 	mcr	15, 0, r3, cr2, cr0, {0}
3000026c:	e3e00000 	mvn	r0, #0
30000270:	ee030f10 	mcr	15, 0, r0, cr3, cr0, {0}
30000274:	e3a00001 	mov	r0, #1
30000278:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
3000027c:	e1a00000 	nop			; (mov r0, r0)
30000280:	e1a00000 	nop			; (mov r0, r0)
30000284:	e1a00000 	nop			; (mov r0, r0)
		"mov r0,r0\n"
		:
		: "r" (ttb)
		:"r0"
	);
}
30000288:	e12fff1e 	bx	lr
3000028c:	30700000 	rsbscc	r0, r0, r0

30000290 <gen_l1_pte>:

unsigned int gen_l1_pte(unsigned int paddr){
30000290:	e1a00a20 	lsr	r0, r0, #20
30000294:	e1a00a00 	lsl	r0, r0, #20
	return (paddr&PTE_L1_SECTION_PADDR_BASE_MASK)|\
										PTE_BITS_L1_SECTION;
}
30000298:	e3800002 	orr	r0, r0, #2
3000029c:	e12fff1e 	bx	lr

300002a0 <gen_l1_pte_addr>:

unsigned int gen_l1_pte_addr(unsigned int baddr,\
										unsigned int vaddr){
300002a0:	e3c00dff 	bic	r0, r0, #16320	; 0x3fc0
300002a4:	e1a01a21 	lsr	r1, r1, #20
300002a8:	e1a01a01 	lsl	r1, r1, #20
300002ac:	e3c0003f 	bic	r0, r0, #63	; 0x3f
	return (baddr&PAGE_TABLE_L1_BASE_ADDR_MASK)|\
								VIRT_TO_PTE_L1_INDEX(vaddr);
}
300002b0:	e1800921 	orr	r0, r0, r1, lsr #18
300002b4:	e12fff1e 	bx	lr

300002b8 <init_sys_mmu>:

void init_sys_mmu(void){
300002b8:	e3a03000 	mov	r3, #0
	unsigned int pte;
	unsigned int pte_addr;
	int j;

	for(j=0;j<MEM_MAP_SIZE>>20;j++){
		pte=gen_l1_pte(PHYSICAL_VECTOR_ADDR+(j<<20));
300002bc:	e1a01a03 	lsl	r1, r3, #20
		pte|=PTE_ALL_AP_L1_SECTION_DEFAULT;
		pte|=PTE_L1_SECTION_NO_CACHE_AND_WB;
		pte|=PTE_L1_SECTION_DOMAIN_DEFAULT;
		pte_addr=gen_l1_pte_addr(L1_PTR_BASE_ADDR,\
								VIRTUAL_VECTOR_ADDR+(j<<20));
		*(volatile unsigned int *)pte_addr=pte;
300002c0:	e1a02921 	lsr	r2, r1, #18
	unsigned int pte_addr;
	int j;

	for(j=0;j<MEM_MAP_SIZE>>20;j++){
		pte=gen_l1_pte(PHYSICAL_VECTOR_ADDR+(j<<20));
		pte|=PTE_ALL_AP_L1_SECTION_DEFAULT;
300002c4:	e2811203 	add	r1, r1, #805306368	; 0x30000000
300002c8:	e3811b01 	orr	r1, r1, #1024	; 0x400
		pte|=PTE_L1_SECTION_NO_CACHE_AND_WB;
		pte|=PTE_L1_SECTION_DOMAIN_DEFAULT;
		pte_addr=gen_l1_pte_addr(L1_PTR_BASE_ADDR,\
								VIRTUAL_VECTOR_ADDR+(j<<20));
		*(volatile unsigned int *)pte_addr=pte;
300002cc:	e38225c1 	orr	r2, r2, #809500672	; 0x30400000
void init_sys_mmu(void){
	unsigned int pte;
	unsigned int pte_addr;
	int j;

	for(j=0;j<MEM_MAP_SIZE>>20;j++){
300002d0:	e2833001 	add	r3, r3, #1
		pte=gen_l1_pte(PHYSICAL_VECTOR_ADDR+(j<<20));
		pte|=PTE_ALL_AP_L1_SECTION_DEFAULT;
300002d4:	e3811002 	orr	r1, r1, #2
		pte|=PTE_L1_SECTION_NO_CACHE_AND_WB;
		pte|=PTE_L1_SECTION_DOMAIN_DEFAULT;
		pte_addr=gen_l1_pte_addr(L1_PTR_BASE_ADDR,\
								VIRTUAL_VECTOR_ADDR+(j<<20));
		*(volatile unsigned int *)pte_addr=pte;
300002d8:	e3822603 	orr	r2, r2, #3145728	; 0x300000
void init_sys_mmu(void){
	unsigned int pte;
	unsigned int pte_addr;
	int j;

	for(j=0;j<MEM_MAP_SIZE>>20;j++){
300002dc:	e3530008 	cmp	r3, #8
		pte|=PTE_ALL_AP_L1_SECTION_DEFAULT;
		pte|=PTE_L1_SECTION_NO_CACHE_AND_WB;
		pte|=PTE_L1_SECTION_DOMAIN_DEFAULT;
		pte_addr=gen_l1_pte_addr(L1_PTR_BASE_ADDR,\
								VIRTUAL_VECTOR_ADDR+(j<<20));
		*(volatile unsigned int *)pte_addr=pte;
300002e0:	e5821000 	str	r1, [r2]
void init_sys_mmu(void){
	unsigned int pte;
	unsigned int pte_addr;
	int j;

	for(j=0;j<MEM_MAP_SIZE>>20;j++){
300002e4:	1afffff4 	bne	300002bc <init_sys_mmu+0x4>
300002e8:	e3a03000 	mov	r3, #0
		:"r0"
	);
}

unsigned int gen_l1_pte(unsigned int paddr){
	return (paddr&PTE_L1_SECTION_PADDR_BASE_MASK)|\
300002ec:	e1a01a03 	lsl	r1, r3, #20
300002f0:	e2811203 	add	r1, r1, #805306368	; 0x30000000
		pte|=PTE_ALL_AP_L1_SECTION_DEFAULT;
		pte|=PTE_L1_SECTION_NO_CACHE_AND_WB;
		pte|=PTE_L1_SECTION_DOMAIN_DEFAULT;
		pte_addr=gen_l1_pte_addr(L1_PTR_BASE_ADDR,\
								VIRTUAL_MEM_ADDR+(j<<20));
		*(volatile unsigned int *)pte_addr=pte;
300002f4:	e1a02921 	lsr	r2, r1, #18
300002f8:	e38225c1 	orr	r2, r2, #809500672	; 0x30400000
		pte|=PTE_L1_SECTION_DOMAIN_DEFAULT;
		pte_addr=gen_l1_pte_addr(L1_PTR_BASE_ADDR,\
								VIRTUAL_VECTOR_ADDR+(j<<20));
		*(volatile unsigned int *)pte_addr=pte;
	}
	for(j=0;j<MEM_MAP_SIZE>>20;j++){
300002fc:	e2833001 	add	r3, r3, #1
		pte=gen_l1_pte(PHYSICAL_MEM_ADDR+(j<<20));
		pte|=PTE_ALL_AP_L1_SECTION_DEFAULT;
30000300:	e3811b01 	orr	r1, r1, #1024	; 0x400
30000304:	e3811002 	orr	r1, r1, #2
		pte|=PTE_L1_SECTION_NO_CACHE_AND_WB;
		pte|=PTE_L1_SECTION_DOMAIN_DEFAULT;
		pte_addr=gen_l1_pte_addr(L1_PTR_BASE_ADDR,\
								VIRTUAL_MEM_ADDR+(j<<20));
		*(volatile unsigned int *)pte_addr=pte;
30000308:	e3822603 	orr	r2, r2, #3145728	; 0x300000
		pte|=PTE_L1_SECTION_DOMAIN_DEFAULT;
		pte_addr=gen_l1_pte_addr(L1_PTR_BASE_ADDR,\
								VIRTUAL_VECTOR_ADDR+(j<<20));
		*(volatile unsigned int *)pte_addr=pte;
	}
	for(j=0;j<MEM_MAP_SIZE>>20;j++){
3000030c:	e3530008 	cmp	r3, #8
		pte|=PTE_ALL_AP_L1_SECTION_DEFAULT;
		pte|=PTE_L1_SECTION_NO_CACHE_AND_WB;
		pte|=PTE_L1_SECTION_DOMAIN_DEFAULT;
		pte_addr=gen_l1_pte_addr(L1_PTR_BASE_ADDR,\
								VIRTUAL_MEM_ADDR+(j<<20));
		*(volatile unsigned int *)pte_addr=pte;
30000310:	e5821000 	str	r1, [r2]
		pte|=PTE_L1_SECTION_DOMAIN_DEFAULT;
		pte_addr=gen_l1_pte_addr(L1_PTR_BASE_ADDR,\
								VIRTUAL_VECTOR_ADDR+(j<<20));
		*(volatile unsigned int *)pte_addr=pte;
	}
	for(j=0;j<MEM_MAP_SIZE>>20;j++){
30000314:	1afffff4 	bne	300002ec <init_sys_mmu+0x34>
30000318:	e3a03000 	mov	r3, #0
		pte_addr=gen_l1_pte_addr(L1_PTR_BASE_ADDR,\
								VIRTUAL_MEM_ADDR+(j<<20));
		*(volatile unsigned int *)pte_addr=pte;
	}
	for(j=0;j<IO_MAP_SIZE>>20;j++){
		pte=gen_l1_pte(PHYSICAL_IO_ADDR+(j<<20));
3000031c:	e1a01a03 	lsl	r1, r3, #20
		pte|=PTE_ALL_AP_L1_SECTION_DEFAULT;
		pte|=PTE_L1_SECTION_NO_CACHE_AND_WB;
		pte|=PTE_L1_SECTION_DOMAIN_DEFAULT;
		pte_addr=gen_l1_pte_addr(L1_PTR_BASE_ADDR,\
								VIRTUAL_IO_ADDR+(j<<20));
		*(volatile unsigned int *)pte_addr=pte;
30000320:	e2812332 	add	r2, r1, #-939524096	; 0xc8000000
30000324:	e1a02922 	lsr	r2, r2, #18
								VIRTUAL_MEM_ADDR+(j<<20));
		*(volatile unsigned int *)pte_addr=pte;
	}
	for(j=0;j<IO_MAP_SIZE>>20;j++){
		pte=gen_l1_pte(PHYSICAL_IO_ADDR+(j<<20));
		pte|=PTE_ALL_AP_L1_SECTION_DEFAULT;
30000328:	e2811312 	add	r1, r1, #1207959552	; 0x48000000
3000032c:	e3811b01 	orr	r1, r1, #1024	; 0x400
		pte|=PTE_L1_SECTION_NO_CACHE_AND_WB;
		pte|=PTE_L1_SECTION_DOMAIN_DEFAULT;
		pte_addr=gen_l1_pte_addr(L1_PTR_BASE_ADDR,\
								VIRTUAL_IO_ADDR+(j<<20));
		*(volatile unsigned int *)pte_addr=pte;
30000330:	e38225c1 	orr	r2, r2, #809500672	; 0x30400000
		pte|=PTE_L1_SECTION_DOMAIN_DEFAULT;
		pte_addr=gen_l1_pte_addr(L1_PTR_BASE_ADDR,\
								VIRTUAL_MEM_ADDR+(j<<20));
		*(volatile unsigned int *)pte_addr=pte;
	}
	for(j=0;j<IO_MAP_SIZE>>20;j++){
30000334:	e2833001 	add	r3, r3, #1
		pte=gen_l1_pte(PHYSICAL_IO_ADDR+(j<<20));
		pte|=PTE_ALL_AP_L1_SECTION_DEFAULT;
30000338:	e3811002 	orr	r1, r1, #2
		pte|=PTE_L1_SECTION_NO_CACHE_AND_WB;
		pte|=PTE_L1_SECTION_DOMAIN_DEFAULT;
		pte_addr=gen_l1_pte_addr(L1_PTR_BASE_ADDR,\
								VIRTUAL_IO_ADDR+(j<<20));
		*(volatile unsigned int *)pte_addr=pte;
3000033c:	e3822603 	orr	r2, r2, #3145728	; 0x300000
		pte|=PTE_L1_SECTION_DOMAIN_DEFAULT;
		pte_addr=gen_l1_pte_addr(L1_PTR_BASE_ADDR,\
								VIRTUAL_MEM_ADDR+(j<<20));
		*(volatile unsigned int *)pte_addr=pte;
	}
	for(j=0;j<IO_MAP_SIZE>>20;j++){
30000340:	e3530d06 	cmp	r3, #384	; 0x180
		pte|=PTE_ALL_AP_L1_SECTION_DEFAULT;
		pte|=PTE_L1_SECTION_NO_CACHE_AND_WB;
		pte|=PTE_L1_SECTION_DOMAIN_DEFAULT;
		pte_addr=gen_l1_pte_addr(L1_PTR_BASE_ADDR,\
								VIRTUAL_IO_ADDR+(j<<20));
		*(volatile unsigned int *)pte_addr=pte;
30000344:	e5821000 	str	r1, [r2]
		pte|=PTE_L1_SECTION_DOMAIN_DEFAULT;
		pte_addr=gen_l1_pte_addr(L1_PTR_BASE_ADDR,\
								VIRTUAL_MEM_ADDR+(j<<20));
		*(volatile unsigned int *)pte_addr=pte;
	}
	for(j=0;j<IO_MAP_SIZE>>20;j++){
30000348:	1afffff3 	bne	3000031c <init_sys_mmu+0x64>
		pte|=PTE_L1_SECTION_DOMAIN_DEFAULT;
		pte_addr=gen_l1_pte_addr(L1_PTR_BASE_ADDR,\
								VIRTUAL_IO_ADDR+(j<<20));
		*(volatile unsigned int *)pte_addr=pte;
	}
}
3000034c:	e12fff1e 	bx	lr

30000350 <memcpy>:
}

void * memcpy(void * dest,const void *src,unsigned int count)
{
	char *tmp = (char *) dest, *s = (char *) src;
	while (count--)
30000350:	e3520000 	cmp	r2, #0
30000354:	012fff1e 	bxeq	lr
30000358:	e3a03000 	mov	r3, #0
		*tmp++ = *s++;
3000035c:	e7d1c003 	ldrb	ip, [r1, r3]
30000360:	e7c0c003 	strb	ip, [r0, r3]
30000364:	e2833001 	add	r3, r3, #1
}

void * memcpy(void * dest,const void *src,unsigned int count)
{
	char *tmp = (char *) dest, *s = (char *) src;
	while (count--)
30000368:	e1530002 	cmp	r3, r2
3000036c:	1afffffa 	bne	3000035c <memcpy+0xc>
		*tmp++ = *s++;
	return dest;
}
30000370:	e12fff1e 	bx	lr

30000374 <number>:

char *number(char *str, int num,int base,unsigned int flags){
	int i=0;
	int sign=0;

	if(FORMAT_SIGNED(flags)&&(signed int)num<0){
30000374:	e1a02fa1 	lsr	r2, r1, #31
30000378:	e0122423 	ands	r2, r2, r3, lsr #8
3000037c:	0a00000c 	beq	300003b4 <number+0x40>
		sign=1;
		num=~num+1;
	}

	do{
		numbers[i++]=digits[do_div(num,base)];
30000380:	e59f30c0 	ldr	r3, [pc, #192]	; 30000448 <number+0xd4>
30000384:	e59f20c0 	ldr	r2, [pc, #192]	; 3000044c <number+0xd8>
30000388:	e593c000 	ldr	ip, [r3]
3000038c:	e5dc3000 	ldrb	r3, [ip]
30000390:	e5c23000 	strb	r3, [r2]
	}while(num!=0);
30000394:	e3a03001 	mov	r3, #1
		sign=1;
		num=~num+1;
	}

	do{
		numbers[i++]=digits[do_div(num,base)];
30000398:	e5dc1000 	ldrb	r1, [ip]
3000039c:	e7c21003 	strb	r1, [r2, r3]
300003a0:	e5dc1000 	ldrb	r1, [ip]
300003a4:	e2833001 	add	r3, r3, #1
300003a8:	e7c21003 	strb	r1, [r2, r3]
300003ac:	e2833001 	add	r3, r3, #1
300003b0:	eafffff8 	b	30000398 <number+0x24>
300003b4:	e59fc08c 	ldr	ip, [pc, #140]	; 30000448 <number+0xd4>
300003b8:	e59f208c 	ldr	r2, [pc, #140]	; 3000044c <number+0xd8>
300003bc:	e59cc000 	ldr	ip, [ip]
	}while(num!=0);
300003c0:	e3510000 	cmp	r1, #0
		sign=1;
		num=~num+1;
	}

	do{
		numbers[i++]=digits[do_div(num,base)];
300003c4:	e5dc1000 	ldrb	r1, [ip]
300003c8:	e5c21000 	strb	r1, [r2]
	}while(num!=0);
300003cc:	1afffff0 	bne	30000394 <number+0x20>
	

	if(FORMAT_BASE(flags)==FORMAT_BASE_O){
300003d0:	e20330ff 	and	r3, r3, #255	; 0xff
300003d4:	e3530008 	cmp	r3, #8
		numbers[i++]='0';
300003d8:	03a03030 	moveq	r3, #48	; 0x30
300003dc:	05c23001 	strbeq	r3, [r2, #1]
300003e0:	03a0c002 	moveq	ip, #2
	do{
		numbers[i++]=digits[do_div(num,base)];
	}while(num!=0);
	

	if(FORMAT_BASE(flags)==FORMAT_BASE_O){
300003e4:	0a000008 	beq	3000040c <number+0x98>
		numbers[i++]='0';
	}else if(FORMAT_BASE(flags)==FORMAT_BASE_X){
300003e8:	e3530010 	cmp	r3, #16
300003ec:	0a00000f 	beq	30000430 <number+0xbc>
		numbers[i++]='x';
		numbers[i++]='0';
	}else if(FORMAT_BASE(flags)==FORMAT_BASE_B){
300003f0:	e3530002 	cmp	r3, #2
		numbers[i++]='b';
300003f4:	03a03062 	moveq	r3, #98	; 0x62
300003f8:	05c23001 	strbeq	r3, [r2, #1]
		numbers[i++]='0';
300003fc:	03a03030 	moveq	r3, #48	; 0x30
	if(FORMAT_BASE(flags)==FORMAT_BASE_O){
		numbers[i++]='0';
	}else if(FORMAT_BASE(flags)==FORMAT_BASE_X){
		numbers[i++]='x';
		numbers[i++]='0';
	}else if(FORMAT_BASE(flags)==FORMAT_BASE_B){
30000400:	13a0c001 	movne	ip, #1
		numbers[i++]='b';
		numbers[i++]='0';
30000404:	05c23002 	strbeq	r3, [r2, #2]
30000408:	03a0c003 	moveq	ip, #3
3000040c:	e082200c 	add	r2, r2, ip
	while (count--)
		*tmp++ = *s++;
	return dest;
}

char *number(char *str, int num,int base,unsigned int flags){
30000410:	e3a03000 	mov	r3, #0
	}
	if(sign)
		numbers[i++]='-';

	while (i-- > 0)
			*str++ = numbers[i];
30000414:	e5721001 	ldrb	r1, [r2, #-1]!
30000418:	e7c01003 	strb	r1, [r0, r3]
3000041c:	e2833001 	add	r3, r3, #1
		numbers[i++]='0';
	}
	if(sign)
		numbers[i++]='-';

	while (i-- > 0)
30000420:	e153000c 	cmp	r3, ip
30000424:	1afffffa 	bne	30000414 <number+0xa0>
			*str++ = numbers[i];
	return str;
}
30000428:	e0800003 	add	r0, r0, r3
3000042c:	e12fff1e 	bx	lr
	

	if(FORMAT_BASE(flags)==FORMAT_BASE_O){
		numbers[i++]='0';
	}else if(FORMAT_BASE(flags)==FORMAT_BASE_X){
		numbers[i++]='x';
30000430:	e3a03078 	mov	r3, #120	; 0x78
30000434:	e5c23001 	strb	r3, [r2, #1]
		numbers[i++]='0';
30000438:	e3a03030 	mov	r3, #48	; 0x30
3000043c:	e5c23002 	strb	r3, [r2, #2]
30000440:	e3a0c003 	mov	ip, #3
30000444:	eafffff0 	b	3000040c <number+0x98>
30000448:	30007e00 	andcc	r7, r0, r0, lsl #28
3000044c:	30012b08 	andcc	r2, r1, r8, lsl #22

30000450 <format_decode>:
}

int format_decode(const char *fmt,unsigned int *flags){
	const char *start = fmt;

	*flags &= ~FORMAT_TYPE_MASK;
30000450:	e5913000 	ldr	r3, [r1]
30000454:	e3c33cff 	bic	r3, r3, #65280	; 0xff00
	*flags |= FORMAT_TYPE_NONE;
30000458:	e5813000 	str	r3, [r1]
	for (; *fmt ; ++fmt) {
3000045c:	e5d02000 	ldrb	r2, [r0]
30000460:	e3520000 	cmp	r2, #0
30000464:	0a00003b 	beq	30000558 <format_decode+0x108>
		if (*fmt == '%')
30000468:	e3520025 	cmp	r2, #37	; 0x25
3000046c:	11a0c000 	movne	ip, r0
30000470:	1a000002 	bne	30000480 <format_decode+0x30>
30000474:	ea000008 	b	3000049c <format_decode+0x4c>
30000478:	e3520025 	cmp	r2, #37	; 0x25
3000047c:	0a000002 	beq	3000048c <format_decode+0x3c>
int format_decode(const char *fmt,unsigned int *flags){
	const char *start = fmt;

	*flags &= ~FORMAT_TYPE_MASK;
	*flags |= FORMAT_TYPE_NONE;
	for (; *fmt ; ++fmt) {
30000480:	e5fc2001 	ldrb	r2, [ip, #1]!
30000484:	e3520000 	cmp	r2, #0
30000488:	1afffffa 	bne	30000478 <format_decode+0x28>
		if (*fmt == '%')
		break;
	}

	if (fmt != start || !*fmt)
3000048c:	e15c0000 	cmp	ip, r0
30000490:	0a000001 	beq	3000049c <format_decode+0x4c>
		return fmt - start;
30000494:	e060000c 	rsb	r0, r0, ip
30000498:	e12fff1e 	bx	lr
	for (; *fmt ; ++fmt) {
		if (*fmt == '%')
		break;
	}

	if (fmt != start || !*fmt)
3000049c:	e3520000 	cmp	r2, #0
300004a0:	0a00002c 	beq	30000558 <format_decode+0x108>
		return fmt - start;

	do{
		fmt++;
		switch(*fmt){
300004a4:	e5d02001 	ldrb	r2, [r0, #1]
300004a8:	e352006c 	cmp	r2, #108	; 0x6c
			case 'l':
				SET_FORMAT_FLAG(*flags,FORMAT_FLAG_WIDTH);
300004ac:	03833601 	orreq	r3, r3, #1048576	; 0x100000
300004b0:	05813000 	streq	r3, [r1]
			default:
				break;
		}
	}while(0);
	
	SET_FORMAT_BASE(*flags,FORMAT_BASE_D);
300004b4:	e3c330ff 	bic	r3, r3, #255	; 0xff
300004b8:	e383200a 	orr	r2, r3, #10
300004bc:	e5812000 	str	r2, [r1]
	switch (*fmt) {
300004c0:	e5d03001 	ldrb	r3, [r0, #1]
300004c4:	e2433058 	sub	r3, r3, #88	; 0x58
300004c8:	e3530020 	cmp	r3, #32
300004cc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
300004d0:	ea000025 	b	3000056c <format_decode+0x11c>
300004d4:	300005dc 	ldrdcc	r0, [r0], -ip
300004d8:	3000056c 	andcc	r0, r0, ip, ror #10
300004dc:	3000056c 	andcc	r0, r0, ip, ror #10
300004e0:	3000056c 	andcc	r0, r0, ip, ror #10
300004e4:	3000056c 	andcc	r0, r0, ip, ror #10
300004e8:	3000056c 	andcc	r0, r0, ip, ror #10
300004ec:	3000056c 	andcc	r0, r0, ip, ror #10
300004f0:	3000056c 	andcc	r0, r0, ip, ror #10
300004f4:	3000056c 	andcc	r0, r0, ip, ror #10
300004f8:	3000056c 	andcc	r0, r0, ip, ror #10
300004fc:	3000056c 	andcc	r0, r0, ip, ror #10
30000500:	30000560 	andcc	r0, r0, r0, ror #10
30000504:	300005c0 	andcc	r0, r0, r0, asr #11
30000508:	3000056c 	andcc	r0, r0, ip, ror #10
3000050c:	3000056c 	andcc	r0, r0, ip, ror #10
30000510:	3000056c 	andcc	r0, r0, ip, ror #10
30000514:	3000056c 	andcc	r0, r0, ip, ror #10
30000518:	300005c0 	andcc	r0, r0, r0, asr #11
3000051c:	3000056c 	andcc	r0, r0, ip, ror #10
30000520:	3000056c 	andcc	r0, r0, ip, ror #10
30000524:	3000056c 	andcc	r0, r0, ip, ror #10
30000528:	3000056c 	andcc	r0, r0, ip, ror #10
3000052c:	3000056c 	andcc	r0, r0, ip, ror #10
30000530:	300005a4 	andcc	r0, r0, r4, lsr #11
30000534:	3000056c 	andcc	r0, r0, ip, ror #10
30000538:	3000056c 	andcc	r0, r0, ip, ror #10
3000053c:	3000056c 	andcc	r0, r0, ip, ror #10
30000540:	30000590 	mulcc	r0, r0, r5
30000544:	3000056c 	andcc	r0, r0, ip, ror #10
30000548:	30000574 	andcc	r0, r0, r4, ror r5
3000054c:	3000056c 	andcc	r0, r0, ip, ror #10
30000550:	3000056c 	andcc	r0, r0, ip, ror #10
30000554:	300005dc 	ldrdcc	r0, [r0], -ip
	for (; *fmt ; ++fmt) {
		if (*fmt == '%')
		break;
	}

	if (fmt != start || !*fmt)
30000558:	e1a0c000 	mov	ip, r0
3000055c:	eaffffcc 	b	30000494 <format_decode+0x44>
	}while(0);
	
	SET_FORMAT_BASE(*flags,FORMAT_BASE_D);
	switch (*fmt) {
		case 'c':
			SET_FORMAT_TYPE(*flags,FORMAT_TYPE_CHAR);
30000560:	e3c23cff 	bic	r3, r2, #65280	; 0xff00
30000564:	e3833c01 	orr	r3, r3, #256	; 0x100
30000568:	e5813000 	str	r3, [r1]
3000056c:	e3a00002 	mov	r0, #2
			break;
30000570:	e12fff1e 	bx	lr
			SET_FORMAT_TYPE(*flags,FORMAT_TYPE_INT);
			SET_FORMAT_BASE(*flags,FORMAT_BASE_D);
			break;
		case 'u':
			SET_FORMAT_TYPE(*flags,FORMAT_TYPE_UINT);
			SET_FORMAT_BASE(*flags,FORMAT_BASE_D);
30000574:	e3c23cff 	bic	r3, r2, #65280	; 0xff00
30000578:	e3833c06 	orr	r3, r3, #1536	; 0x600
3000057c:	e3c330ff 	bic	r3, r3, #255	; 0xff
30000580:	e383300a 	orr	r3, r3, #10
30000584:	e5813000 	str	r3, [r1]
30000588:	e3a00002 	mov	r0, #2

	default:
		break;
	}
	return ++fmt-start;
}
3000058c:	e12fff1e 	bx	lr
		case 'c':
			SET_FORMAT_TYPE(*flags,FORMAT_TYPE_CHAR);
			break;

		case 's':
			SET_FORMAT_TYPE(*flags,FORMAT_TYPE_STR);
30000590:	e3c23cff 	bic	r3, r2, #65280	; 0xff00
30000594:	e3833c0d 	orr	r3, r3, #3328	; 0xd00
30000598:	e5813000 	str	r3, [r1]
3000059c:	e3a00002 	mov	r0, #2
			break;
300005a0:	e12fff1e 	bx	lr

		case 'o':
			SET_FORMAT_BASE(*flags,FORMAT_BASE_O);
			SET_FORMAT_TYPE(*flags,FORMAT_TYPE_UINT);
300005a4:	e3c230ff 	bic	r3, r2, #255	; 0xff
300005a8:	e3833008 	orr	r3, r3, #8
300005ac:	e3c33cff 	bic	r3, r3, #65280	; 0xff00
300005b0:	e3833c06 	orr	r3, r3, #1536	; 0x600
300005b4:	e5813000 	str	r3, [r1]
300005b8:	e3a00002 	mov	r0, #2
			break;
300005bc:	e12fff1e 	bx	lr
			break;

		case 'd':
		case 'i':
			SET_FORMAT_TYPE(*flags,FORMAT_TYPE_INT);
			SET_FORMAT_BASE(*flags,FORMAT_BASE_D);
300005c0:	e3c23cff 	bic	r3, r2, #65280	; 0xff00
300005c4:	e3833c05 	orr	r3, r3, #1280	; 0x500
300005c8:	e3c330ff 	bic	r3, r3, #255	; 0xff
300005cc:	e383300a 	orr	r3, r3, #10
300005d0:	e5813000 	str	r3, [r1]
300005d4:	e3a00002 	mov	r0, #2
			break;
300005d8:	e12fff1e 	bx	lr
			break;

		case 'x':
		case 'X':
			SET_FORMAT_BASE(*flags,FORMAT_BASE_X);
			SET_FORMAT_TYPE(*flags,FORMAT_TYPE_UINT);
300005dc:	e3c230ff 	bic	r3, r2, #255	; 0xff
300005e0:	e3833010 	orr	r3, r3, #16
300005e4:	e3c33cff 	bic	r3, r3, #65280	; 0xff00
300005e8:	e3833c06 	orr	r3, r3, #1536	; 0x600
300005ec:	e5813000 	str	r3, [r1]
300005f0:	e3a00002 	mov	r0, #2
			break;
300005f4:	e12fff1e 	bx	lr

300005f8 <vsnprintf>:
	char *str, *end, c,*s;
	int read;
	unsigned int spec=0;

	str = buf;
	end = buf + size;
300005f8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
300005fc:	e24dd00c 	sub	sp, sp, #12
30000600:	e1a08003 	mov	r8, r3

int vsnprintf(char *buf, int size, const char *fmt, va_list args){
	int num;
	char *str, *end, c,*s;
	int read;
	unsigned int spec=0;
30000604:	e28d7008 	add	r7, sp, #8
30000608:	e3a03000 	mov	r3, #0

	str = buf;
	end = buf + size;
3000060c:	e1a04002 	mov	r4, r2

int vsnprintf(char *buf, int size, const char *fmt, va_list args){
	int num;
	char *str, *end, c,*s;
	int read;
	unsigned int spec=0;
30000610:	e5273004 	str	r3, [r7, #-4]!
	if (end < buf) {
		end = ((void *)-1);
		size = end - buf;
	}

	while (*fmt) {
30000614:	e5d43000 	ldrb	r3, [r4]
	unsigned int spec=0;

	str = buf;
	end = buf + size;

	if (end < buf) {
30000618:	e0906001 	adds	r6, r0, r1
	char *str, *end, c,*s;
	int read;
	unsigned int spec=0;

	str = buf;
	end = buf + size;
3000061c:	e1a0b001 	mov	fp, r1

	if (end < buf) {
		end = ((void *)-1);
		size = end - buf;
30000620:	23e06000 	mvncs	r6, #0
30000624:	21e0b000 	mvncs	fp, r0
	}

	while (*fmt) {
30000628:	e3530000 	cmp	r3, #0
	char *str, *end, c,*s;
	int read;
	unsigned int spec=0;

	str = buf;
	end = buf + size;
3000062c:	e1a0a000 	mov	sl, r0

int vsnprintf(char *buf, int size, const char *fmt, va_list args){
	int num;
	char *str, *end, c,*s;
	int read;
	unsigned int spec=0;
30000630:	e1a09000 	mov	r9, r0
	if (end < buf) {
		end = ((void *)-1);
		size = end - buf;
	}

	while (*fmt) {
30000634:	0a000019 	beq	300006a0 <vsnprintf+0xa8>
		const char *old_fmt = fmt;

		read = format_decode(fmt, &spec);
30000638:	e1a00004 	mov	r0, r4
3000063c:	e1a01007 	mov	r1, r7
30000640:	ebffff82 	bl	30000450 <format_decode>
		fmt += read;

		if((FORMAT_TYPE(spec))==FORMAT_TYPE_NONE){
30000644:	e59d3004 	ldr	r3, [sp, #4]
	}

	while (*fmt) {
		const char *old_fmt = fmt;

		read = format_decode(fmt, &spec);
30000648:	e1a05000 	mov	r5, r0
		fmt += read;

		if((FORMAT_TYPE(spec))==FORMAT_TYPE_NONE){
3000064c:	e2132cff 	ands	r2, r3, #65280	; 0xff00
30000650:	1a00001b 	bne	300006c4 <vsnprintf+0xcc>
			int copy = read;
			if (str < end) {
30000654:	e1590006 	cmp	r9, r6
30000658:	2a00000b 	bcs	3000068c <vsnprintf+0x94>
				if (copy > end - str)
					copy = end - str;
					memcpy(str, old_fmt, copy);
3000065c:	e0691006 	rsb	r1, r9, r6
30000660:	e1500001 	cmp	r0, r1
30000664:	b1a01000 	movlt	r1, r0
30000668:	a1a01001 	movge	r1, r1
}

void * memcpy(void * dest,const void *src,unsigned int count)
{
	char *tmp = (char *) dest, *s = (char *) src;
	while (count--)
3000066c:	e3510000 	cmp	r1, #0
30000670:	0a000005 	beq	3000068c <vsnprintf+0x94>
30000674:	e1a03002 	mov	r3, r2
		*tmp++ = *s++;
30000678:	e7d42003 	ldrb	r2, [r4, r3]
3000067c:	e7c92003 	strb	r2, [r9, r3]
30000680:	e2833001 	add	r3, r3, #1
}

void * memcpy(void * dest,const void *src,unsigned int count)
{
	char *tmp = (char *) dest, *s = (char *) src;
	while (count--)
30000684:	e1510003 	cmp	r1, r3
30000688:	1afffffa 	bne	30000678 <vsnprintf+0x80>
			if (str < end) {
				if (copy > end - str)
					copy = end - str;
					memcpy(str, old_fmt, copy);
			}
			str += read;
3000068c:	e0899005 	add	r9, r9, r5

	while (*fmt) {
		const char *old_fmt = fmt;

		read = format_decode(fmt, &spec);
		fmt += read;
30000690:	e0844005 	add	r4, r4, r5
	if (end < buf) {
		end = ((void *)-1);
		size = end - buf;
	}

	while (*fmt) {
30000694:	e5d43000 	ldrb	r3, [r4]
30000698:	e3530000 	cmp	r3, #0
3000069c:	1affffe5 	bne	30000638 <vsnprintf+0x40>
				num = va_arg(args, unsigned int);
			}
				str=number(str,num,spec&FORMAT_BASE_MASK,spec);
		}
	}
	if (size > 0) {
300006a0:	e35b0000 	cmp	fp, #0
300006a4:	da000002 	ble	300006b4 <vsnprintf+0xbc>
		if (str < end)
300006a8:	e1590006 	cmp	r9, r6
			*str = '\0';
300006ac:	35c93000 	strbcc	r3, [r9]
		else
			end[-1] = '\0';
300006b0:	25463001 	strbcs	r3, [r6, #-1]
	}
	return str-buf;
}
300006b4:	e06a0009 	rsb	r0, sl, r9
300006b8:	e28dd00c 	add	sp, sp, #12
300006bc:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
300006c0:	e12fff1e 	bx	lr
					copy = end - str;
					memcpy(str, old_fmt, copy);
			}
			str += read;

		}else if(spec&FORMAT_FLAG_WIDTH){
300006c4:	e3130601 	tst	r3, #1048576	; 0x100000
300006c8:	1afffff0 	bne	30000690 <vsnprintf+0x98>
			//do nothing
		}else if(FORMAT_TYPE(spec)==FORMAT_TYPE_CHAR){
300006cc:	e3520c01 	cmp	r2, #256	; 0x100
300006d0:	0a000014 	beq	30000728 <vsnprintf+0x130>
			c = (unsigned char) va_arg(args, int);
			if (str < end)
				*str = c;
			++str;
		}else if(FORMAT_TYPE(spec)==FORMAT_TYPE_STR){
300006d4:	e3520c0d 	cmp	r2, #3328	; 0xd00
300006d8:	0a000018 	beq	30000740 <vsnprintf+0x148>
			s = (char *) va_arg(args, char *);
			while(str<end&&*s!='\0'){
				*str++=*s++;
			}
		}else{
			if(FORMAT_TYPE(spec)==FORMAT_TYPE_INT){
300006dc:	e3520c05 	cmp	r2, #1280	; 0x500
300006e0:	0a000009 	beq	3000070c <vsnprintf+0x114>
				num = va_arg(args, int);
			}else if(FORMAT_TYPE(spec)==FORMAT_TYPE_ULONG){
300006e4:	e3520b02 	cmp	r2, #2048	; 0x800
300006e8:	0a000007 	beq	3000070c <vsnprintf+0x114>
				num = va_arg(args, unsigned long);
			}else if(FORMAT_TYPE(spec)==FORMAT_TYPE_LONG){
300006ec:	e3520c07 	cmp	r2, #1792	; 0x700
300006f0:	0a000005 	beq	3000070c <vsnprintf+0x114>
				num = va_arg(args, long);
			}else if(FORMAT_TYPE(spec)==FORMAT_TYPE_SIZE_T){
300006f4:	e3520c0b 	cmp	r2, #2816	; 0xb00
300006f8:	0a000003 	beq	3000070c <vsnprintf+0x114>
				num = va_arg(args, int);
			}else if(FORMAT_TYPE(spec)==FORMAT_TYPE_USHORT){
300006fc:	e3520b01 	cmp	r2, #1024	; 0x400
30000700:	0a000021 	beq	3000078c <vsnprintf+0x194>
				num = (unsigned short) va_arg(args, int);
			}else if(FORMAT_TYPE(spec)==FORMAT_TYPE_SHORT){
30000704:	e3520c03 	cmp	r2, #768	; 0x300
30000708:	0a00001b 	beq	3000077c <vsnprintf+0x184>
				num = (short) va_arg(args, int);
			}else{
				num = va_arg(args, unsigned int);
3000070c:	e4981004 	ldr	r1, [r8], #4
			}
				str=number(str,num,spec&FORMAT_BASE_MASK,spec);
30000710:	e1a00009 	mov	r0, r9
30000714:	e20320ff 	and	r2, r3, #255	; 0xff
30000718:	ebffff15 	bl	30000374 <number>

	while (*fmt) {
		const char *old_fmt = fmt;

		read = format_decode(fmt, &spec);
		fmt += read;
3000071c:	e0844005 	add	r4, r4, r5
			}else if(FORMAT_TYPE(spec)==FORMAT_TYPE_SHORT){
				num = (short) va_arg(args, int);
			}else{
				num = va_arg(args, unsigned int);
			}
				str=number(str,num,spec&FORMAT_BASE_MASK,spec);
30000720:	e1a09000 	mov	r9, r0
30000724:	eaffffda 	b	30000694 <vsnprintf+0x9c>
			str += read;

		}else if(spec&FORMAT_FLAG_WIDTH){
			//do nothing
		}else if(FORMAT_TYPE(spec)==FORMAT_TYPE_CHAR){
			c = (unsigned char) va_arg(args, int);
30000728:	e4983004 	ldr	r3, [r8], #4
			if (str < end)
3000072c:	e1590006 	cmp	r9, r6
				*str = c;
30000730:	35c93000 	strbcc	r3, [r9]

	while (*fmt) {
		const char *old_fmt = fmt;

		read = format_decode(fmt, &spec);
		fmt += read;
30000734:	e0844005 	add	r4, r4, r5
			//do nothing
		}else if(FORMAT_TYPE(spec)==FORMAT_TYPE_CHAR){
			c = (unsigned char) va_arg(args, int);
			if (str < end)
				*str = c;
			++str;
30000738:	e2899001 	add	r9, r9, #1
3000073c:	eaffffd4 	b	30000694 <vsnprintf+0x9c>
		}else if(FORMAT_TYPE(spec)==FORMAT_TYPE_STR){
			s = (char *) va_arg(args, char *);
			while(str<end&&*s!='\0'){
30000740:	e1590006 	cmp	r9, r6
			c = (unsigned char) va_arg(args, int);
			if (str < end)
				*str = c;
			++str;
		}else if(FORMAT_TYPE(spec)==FORMAT_TYPE_STR){
			s = (char *) va_arg(args, char *);
30000744:	e4982004 	ldr	r2, [r8], #4
			while(str<end&&*s!='\0'){
30000748:	2affffd0 	bcs	30000690 <vsnprintf+0x98>
3000074c:	e5d23000 	ldrb	r3, [r2]
30000750:	e3530000 	cmp	r3, #0
30000754:	1a000003 	bne	30000768 <vsnprintf+0x170>
30000758:	eaffffcc 	b	30000690 <vsnprintf+0x98>
3000075c:	e5f23001 	ldrb	r3, [r2, #1]!
30000760:	e3530000 	cmp	r3, #0
30000764:	0affffc9 	beq	30000690 <vsnprintf+0x98>
				*str++=*s++;
30000768:	e4c93001 	strb	r3, [r9], #1
			if (str < end)
				*str = c;
			++str;
		}else if(FORMAT_TYPE(spec)==FORMAT_TYPE_STR){
			s = (char *) va_arg(args, char *);
			while(str<end&&*s!='\0'){
3000076c:	e1590006 	cmp	r9, r6
30000770:	3afffff9 	bcc	3000075c <vsnprintf+0x164>

	while (*fmt) {
		const char *old_fmt = fmt;

		read = format_decode(fmt, &spec);
		fmt += read;
30000774:	e0844005 	add	r4, r4, r5
30000778:	eaffffc5 	b	30000694 <vsnprintf+0x9c>
			}else if(FORMAT_TYPE(spec)==FORMAT_TYPE_SIZE_T){
				num = va_arg(args, int);
			}else if(FORMAT_TYPE(spec)==FORMAT_TYPE_USHORT){
				num = (unsigned short) va_arg(args, int);
			}else if(FORMAT_TYPE(spec)==FORMAT_TYPE_SHORT){
				num = (short) va_arg(args, int);
3000077c:	e4981004 	ldr	r1, [r8], #4
30000780:	e1a01801 	lsl	r1, r1, #16
30000784:	e1a01841 	asr	r1, r1, #16
30000788:	eaffffe0 	b	30000710 <vsnprintf+0x118>
			}else if(FORMAT_TYPE(spec)==FORMAT_TYPE_LONG){
				num = va_arg(args, long);
			}else if(FORMAT_TYPE(spec)==FORMAT_TYPE_SIZE_T){
				num = va_arg(args, int);
			}else if(FORMAT_TYPE(spec)==FORMAT_TYPE_USHORT){
				num = (unsigned short) va_arg(args, int);
3000078c:	e4981004 	ldr	r1, [r8], #4
30000790:	e1a01801 	lsl	r1, r1, #16
30000794:	e1a01821 	lsr	r1, r1, #16
30000798:	eaffffdc 	b	30000710 <vsnprintf+0x118>

3000079c <printk>:
	}
	return str-buf;
}

void printk(const char *fmt, ...)
{
3000079c:	e92d000f 	push	{r0, r1, r2, r3}
	va_end (args);

	__put_char (print_buf,i);
#endif

}
300007a0:	e28dd010 	add	sp, sp, #16
300007a4:	e12fff1e 	bx	lr

300007a8 <test_printk>:
	char c='H';
	int d=-256;
	int k=0;
	printk("testing printk\n");
	printk("test string :::	%s\ntest char ::: %c\ntest digit ::: %d\ntest X ::: %x\ntest unsigned ::: %u\ntest zero ::: %d\n",p,c,d,d,d,k);
}
300007a8:	e12fff1e 	bx	lr

300007ac <__put_char>:
	__res; })
#endif

#define do_div(n, base) (0)

void __put_char(char *p,int num){
300007ac:	e92d4070 	push	{r4, r5, r6, lr}
300007b0:	e1a04000 	mov	r4, r0
300007b4:	e1a05001 	mov	r5, r1

	RAW_SR_ALLOC();

	RAW_CPU_DISABLE();
300007b8:	eb001d0e 	bl	30007bf8 <OS_CPU_SR_Save>

	while(*p&&num--){
300007bc:	e5d43000 	ldrb	r3, [r4]
300007c0:	e3530000 	cmp	r3, #0
300007c4:	0a00000a 	beq	300007f4 <__put_char+0x48>
300007c8:	e3550000 	cmp	r5, #0
300007cc:	0a000008 	beq	300007f4 <__put_char+0x48>
		*(volatile unsigned int *)0xd0000020=*p++;
300007d0:	e3a0220d 	mov	r2, #-805306368	; 0xd0000000
300007d4:	ea000001 	b	300007e0 <__put_char+0x34>

	RAW_SR_ALLOC();

	RAW_CPU_DISABLE();

	while(*p&&num--){
300007d8:	e2555001 	subs	r5, r5, #1
300007dc:	0a000004 	beq	300007f4 <__put_char+0x48>
		*(volatile unsigned int *)0xd0000020=*p++;
300007e0:	e5823020 	str	r3, [r2, #32]

	RAW_SR_ALLOC();

	RAW_CPU_DISABLE();

	while(*p&&num--){
300007e4:	e5d43001 	ldrb	r3, [r4, #1]
300007e8:	e2844001 	add	r4, r4, #1
300007ec:	e3530000 	cmp	r3, #0
300007f0:	1afffff8 	bne	300007d8 <__put_char+0x2c>
		*(volatile unsigned int *)0xd0000020=*p++;
	};

	RAW_CPU_ENABLE();
300007f4:	eb001d07 	bl	30007c18 <OS_CPU_SR_Restore>
}
300007f8:	e8bd4070 	pop	{r4, r5, r6, lr}
300007fc:	e12fff1e 	bx	lr

30000800 <enable_irq>:
#define INTMSK		(INT_BASE+0x8)
#define INTOFFSET	(INT_BASE+0x14)
#define INTPND		(INT_BASE+0x10)
#define SRCPND		(INT_BASE+0x0)

void enable_irq(void){
30000800:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	asm volatile (
30000804:	e10f4000 	mrs	r4, CPSR
30000808:	e3c440c0 	bic	r4, r4, #192	; 0xc0
3000080c:	e129f004 	msr	CPSR_fc, r4
		"mrs r4,cpsr\n\t"
		"bic r4,r4,#0xc0\n\t"
		"msr cpsr,r4\n\t"
		:::"r4"
	);
}
30000810:	e8bd0010 	pop	{r4}
30000814:	e12fff1e 	bx	lr

30000818 <disable_irq>:

void disable_irq(void){
30000818:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	asm volatile (
3000081c:	e10f4000 	mrs	r4, CPSR
30000820:	e38440c0 	orr	r4, r4, #192	; 0xc0
30000824:	e129f004 	msr	CPSR_fc, r4
		"mrs r4,cpsr\n\t"
		"orr r4,r4,#0xc0\n\t"
		"msr cpsr,r4\n\t"
		:::"r4"
	);
}
30000828:	e8bd0010 	pop	{r4}
3000082c:	e12fff1e 	bx	lr

30000830 <umask_int>:

void umask_int(unsigned int offset){
	*(volatile unsigned int *)INTMSK&=~(1<<offset);
30000830:	e3a034ca 	mov	r3, #-905969664	; 0xca000000
30000834:	e5932008 	ldr	r2, [r3, #8]
30000838:	e3a01001 	mov	r1, #1
3000083c:	e1c22011 	bic	r2, r2, r1, lsl r0
30000840:	e5832008 	str	r2, [r3, #8]
}
30000844:	e12fff1e 	bx	lr

30000848 <common_irq_handler>:

void common_irq_handler(void){
	unsigned int tmp=(1<<(*(volatile unsigned int *)INTOFFSET));
30000848:	e3a034ca 	mov	r3, #-905969664	; 0xca000000
3000084c:	e5932014 	ldr	r2, [r3, #20]
30000850:	e3a01001 	mov	r1, #1
30000854:	e1a02211 	lsl	r2, r1, r2
	*(volatile unsigned int *)SRCPND|=tmp;
30000858:	e5931000 	ldr	r1, [r3]

void umask_int(unsigned int offset){
	*(volatile unsigned int *)INTMSK&=~(1<<offset);
}

void common_irq_handler(void){
3000085c:	e92d4010 	push	{r4, lr}
	unsigned int tmp=(1<<(*(volatile unsigned int *)INTOFFSET));
	*(volatile unsigned int *)SRCPND|=tmp;
30000860:	e1821001 	orr	r1, r2, r1
30000864:	e5831000 	str	r1, [r3]
	*(volatile unsigned int *)INTPND|=tmp;
30000868:	e5931010 	ldr	r1, [r3, #16]
3000086c:	e1822001 	orr	r2, r2, r1
30000870:	e5832010 	str	r2, [r3, #16]

	task_0_tick_post();
30000874:	eb0017df 	bl	300067f8 <task_0_tick_post>
}
30000878:	e8bd4010 	pop	{r4, lr}
3000087c:	e12fff1e 	bx	lr

30000880 <raw_block_release>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_block_release(MEM_POOL *pool_ptr, RAW_VOID *block_ptr)
{
30000880:	e92d4070 	push	{r4, r5, r6, lr}
	
	RAW_SR_ALLOC();

	#if (RAW_BLOCK_FUNCTION_CHECK > 0)
	 
	if (block_ptr == 0) {
30000884:	e2515000 	subs	r5, r1, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_block_release(MEM_POOL *pool_ptr, RAW_VOID *block_ptr)
{
30000888:	e1a04000 	mov	r4, r0
	
	RAW_SR_ALLOC();

	#if (RAW_BLOCK_FUNCTION_CHECK > 0)
	 
	if (block_ptr == 0) {
3000088c:	0a000011 	beq	300008d8 <raw_block_release+0x58>
		return RAW_NULL_OBJECT;
	}
	
	if (pool_ptr == 0) {
30000890:	e3500000 	cmp	r0, #0
30000894:	0a00000f 	beq	300008d8 <raw_block_release+0x58>
		return RAW_NULL_OBJECT;
	}
	
	#endif

	if (pool_ptr->common_block_obj.object_type != RAW_BLOCK_OBJ_TYPE) {
30000898:	e5d0300d 	ldrb	r3, [r0, #13]
3000089c:	e3530017 	cmp	r3, #23
300008a0:	13a00036 	movne	r0, #54	; 0x36
300008a4:	0a000001 	beq	300008b0 <raw_block_release+0x30>
	RAW_CPU_ENABLE();

	/* Return completion status.  */
	return RAW_SUCCESS;
	
}
300008a8:	e8bd4070 	pop	{r4, r5, r6, lr}
300008ac:	e12fff1e 	bx	lr
	if (pool_ptr->common_block_obj.object_type != RAW_BLOCK_OBJ_TYPE) {

		return RAW_ERROR_OBJECT_TYPE;
	}

	RAW_CPU_DISABLE();
300008b0:	eb001cd0 	bl	30007bf8 <OS_CPU_SR_Save>

	/* Adjust the head pointer.  */
	pool_ptr->raw_block_pool_available_list = work_ptr;        

	/* Increment the count of available blocks.  */
	pool_ptr->raw_block_pool_available++;
300008b4:	e5942010 	ldr	r2, [r4, #16]
	RAW_CPU_DISABLE();
	
	work_ptr = ((RAW_U8 *) block_ptr);

	/* Put the block back in the available list.  */
	*((RAW_U8 **)work_ptr) = pool_ptr->raw_block_pool_available_list;
300008b8:	e5943018 	ldr	r3, [r4, #24]

	/* Adjust the head pointer.  */
	pool_ptr->raw_block_pool_available_list = work_ptr;        

	/* Increment the count of available blocks.  */
	pool_ptr->raw_block_pool_available++;
300008bc:	e2822001 	add	r2, r2, #1
	RAW_CPU_DISABLE();
	
	work_ptr = ((RAW_U8 *) block_ptr);

	/* Put the block back in the available list.  */
	*((RAW_U8 **)work_ptr) = pool_ptr->raw_block_pool_available_list;
300008c0:	e5853000 	str	r3, [r5]

	/* Adjust the head pointer.  */
	pool_ptr->raw_block_pool_available_list = work_ptr;        

	/* Increment the count of available blocks.  */
	pool_ptr->raw_block_pool_available++;
300008c4:	e5842010 	str	r2, [r4, #16]

	/* Put the block back in the available list.  */
	*((RAW_U8 **)work_ptr) = pool_ptr->raw_block_pool_available_list;

	/* Adjust the head pointer.  */
	pool_ptr->raw_block_pool_available_list = work_ptr;        
300008c8:	e5845018 	str	r5, [r4, #24]

	/* Increment the count of available blocks.  */
	pool_ptr->raw_block_pool_available++;
	
	RAW_CPU_ENABLE();
300008cc:	eb001cd1 	bl	30007c18 <OS_CPU_SR_Restore>
300008d0:	e3a00000 	mov	r0, #0

	/* Return completion status.  */
	return RAW_SUCCESS;
300008d4:	eafffff3 	b	300008a8 <raw_block_release+0x28>
300008d8:	e3a00025 	mov	r0, #37	; 0x25
300008dc:	eafffff1 	b	300008a8 <raw_block_release+0x28>

300008e0 <raw_block_allocate>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_block_allocate(MEM_POOL *pool_ptr, RAW_VOID **block_ptr)
{
300008e0:	e92d4030 	push	{r4, r5, lr}

	RAW_SR_ALLOC();

	#if (RAW_BLOCK_FUNCTION_CHECK > 0)
	 
	if (pool_ptr == 0) {
300008e4:	e2504000 	subs	r4, r0, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_block_allocate(MEM_POOL *pool_ptr, RAW_VOID **block_ptr)
{
300008e8:	e24dd00c 	sub	sp, sp, #12

	RAW_SR_ALLOC();

	#if (RAW_BLOCK_FUNCTION_CHECK > 0)
	 
	if (pool_ptr == 0) {
300008ec:	03a04025 	moveq	r4, #37	; 0x25
300008f0:	0a000006 	beq	30000910 <raw_block_allocate+0x30>
		return RAW_NULL_OBJECT;
	}
	
	if (block_ptr == 0) {
300008f4:	e3510000 	cmp	r1, #0
300008f8:	03a04023 	moveq	r4, #35	; 0x23
300008fc:	0a000003 	beq	30000910 <raw_block_allocate+0x30>
		return RAW_NULL_POINTER;
	}
	
	#endif

	if (pool_ptr->common_block_obj.object_type != RAW_BLOCK_OBJ_TYPE) {
30000900:	e5d4300d 	ldrb	r3, [r4, #13]
30000904:	e3530017 	cmp	r3, #23
30000908:	13a04036 	movne	r4, #54	; 0x36
3000090c:	0a000003 	beq	30000920 <raw_block_allocate+0x40>

	RAW_CPU_ENABLE();
	
	return status;

}
30000910:	e1a00004 	mov	r0, r4
30000914:	e28dd00c 	add	sp, sp, #12
30000918:	e8bd4030 	pop	{r4, r5, lr}
3000091c:	e12fff1e 	bx	lr
	if (pool_ptr->common_block_obj.object_type != RAW_BLOCK_OBJ_TYPE) {

		return RAW_ERROR_OBJECT_TYPE;
	}

	RAW_CPU_DISABLE();
30000920:	e58d1004 	str	r1, [sp, #4]
30000924:	eb001cb3 	bl	30007bf8 <OS_CPU_SR_Save>

	/* Determine if there is an available block.  */
	if (pool_ptr->raw_block_pool_available) {
30000928:	e5943010 	ldr	r3, [r4, #16]
	if (pool_ptr->common_block_obj.object_type != RAW_BLOCK_OBJ_TYPE) {

		return RAW_ERROR_OBJECT_TYPE;
	}

	RAW_CPU_DISABLE();
3000092c:	e1a05000 	mov	r5, r0

	/* Determine if there is an available block.  */
	if (pool_ptr->raw_block_pool_available) {
30000930:	e3530000 	cmp	r3, #0
30000934:	e59d1004 	ldr	r1, [sp, #4]
30000938:	0a000009 	beq	30000964 <raw_block_allocate+0x84>

		/* Yes, a block is available.  Decrement the available count.  */
		pool_ptr->raw_block_pool_available--;

		/* Pickup the current block pointer.  */
		work_ptr = pool_ptr->raw_block_pool_available_list;
3000093c:	e5942018 	ldr	r2, [r4, #24]

	/* Determine if there is an available block.  */
	if (pool_ptr->raw_block_pool_available) {

		/* Yes, a block is available.  Decrement the available count.  */
		pool_ptr->raw_block_pool_available--;
30000940:	e2433001 	sub	r3, r3, #1

		/* Pickup the current block pointer.  */
		work_ptr = pool_ptr->raw_block_pool_available_list;

		/* Return the first available block to the caller.  */
		*((RAW_U8 **)block_ptr) = work_ptr;
30000944:	e5812000 	str	r2, [r1]

		/* Modify the available list to point at the next block in the pool. */
		pool_ptr->raw_block_pool_available_list = *((RAW_U8 **)work_ptr);
30000948:	e5922000 	ldr	r2, [r2]

	/* Determine if there is an available block.  */
	if (pool_ptr->raw_block_pool_available) {

		/* Yes, a block is available.  Decrement the available count.  */
		pool_ptr->raw_block_pool_available--;
3000094c:	e5843010 	str	r3, [r4, #16]

		/* Return the first available block to the caller.  */
		*((RAW_U8 **)block_ptr) = work_ptr;

		/* Modify the available list to point at the next block in the pool. */
		pool_ptr->raw_block_pool_available_list = *((RAW_U8 **)work_ptr);
30000950:	e5842018 	str	r2, [r4, #24]
30000954:	e3a04000 	mov	r4, #0
		*((RAW_U8 **)block_ptr) = 0;
		status = RAW_NO_MEMORY;
		TRACE_BLOCK_NO_MEMORY(raw_task_active, pool_ptr);
	}

	RAW_CPU_ENABLE();
30000958:	e1a00005 	mov	r0, r5
3000095c:	eb001cad 	bl	30007c18 <OS_CPU_SR_Restore>
	
	return status;
30000960:	eaffffea 	b	30000910 <raw_block_allocate+0x30>
	}

	/*if no block memory is available then just return*/
	else {

		*((RAW_U8 **)block_ptr) = 0;
30000964:	e5813000 	str	r3, [r1]
		status = RAW_NO_MEMORY;
		TRACE_BLOCK_NO_MEMORY(raw_task_active, pool_ptr);
30000968:	e59f3010 	ldr	r3, [pc, #16]	; 30000980 <raw_block_allocate+0xa0>
3000096c:	e1a01004 	mov	r1, r4
30000970:	e5930000 	ldr	r0, [r3]
30000974:	eb001c8a 	bl	30007ba4 <_trace_block_no_memory>
30000978:	e3a0401d 	mov	r4, #29
3000097c:	eafffff5 	b	30000958 <raw_block_allocate+0x78>
30000980:	30013838 	andcc	r3, r1, r8, lsr r8

30000984 <raw_block_pool_create>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_block_pool_create(MEM_POOL *pool_ptr, RAW_U8 *name_ptr, RAW_U32 block_size, RAW_VOID *pool_start, RAW_U32 pool_size)
{
30000984:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
30000988:	e59dc018 	ldr	ip, [sp, #24]
3000098c:	e1a04000 	mov	r4, r0
	RAW_U8 			block_align_mask;
	
	#if (RAW_BLOCK_FUNCTION_CHECK > 0)
	/* Check for invalid pool size.  */

	if (pool_size < (block_size +  block_size) ) {
30000990:	e15c0082 	cmp	ip, r2, lsl #1
30000994:	33a00030 	movcc	r0, #48	; 0x30
30000998:	3a00002f 	bcc	30000a5c <raw_block_pool_create+0xd8>

		return RAW_BLOCK_SIZE_ERROR;
	}

	if (pool_ptr == 0) {
3000099c:	e3540000 	cmp	r4, #0
300009a0:	03a00025 	moveq	r0, #37	; 0x25
300009a4:	0a00002c 	beq	30000a5c <raw_block_pool_create+0xd8>

		return RAW_NULL_OBJECT;
	}

	if (pool_start == 0) {
300009a8:	e3530000 	cmp	r3, #0
300009ac:	03a00023 	moveq	r0, #35	; 0x23
300009b0:	0a000029 	beq	30000a5c <raw_block_pool_create+0xd8>

	#endif

	block_align_mask = sizeof(void *) - 1u;

	if (((RAW_U32)pool_start & block_align_mask)){                             
300009b4:	e3130003 	tst	r3, #3
300009b8:	1a000029 	bne	30000a64 <raw_block_pool_create+0xe0>
	if ((pool_size & block_align_mask)) {   

		return RAW_INVALID_ALIGN;
	}

	if ((block_size & block_align_mask)) {   
300009bc:	e18c0002 	orr	r0, ip, r2
300009c0:	e2100003 	ands	r0, r0, #3
300009c4:	1a000026 	bne	30000a64 <raw_block_pool_create+0xe0>
	end_of_pool = (RAW_U8  *)pool_start + pool_size;

	/* Walk through the pool area, setting up the available block list.  */
	blocks = 0u;
	block_ptr = (RAW_U8  *)pool_start;
	next_block_ptr = block_ptr + block_size;
300009c8:	e083e002 	add	lr, r3, r2
	
	/* Setup the basic block pool fields.  */
	pool_ptr->common_block_obj.name = name_ptr;
	
	/* Calculate the end of the pool's memory area.  */
	end_of_pool = (RAW_U8  *)pool_start + pool_size;
300009cc:	e083c00c 	add	ip, r3, ip
	/* Walk through the pool area, setting up the available block list.  */
	blocks = 0u;
	block_ptr = (RAW_U8  *)pool_start;
	next_block_ptr = block_ptr + block_size;
	
	while (next_block_ptr <= end_of_pool) {
300009d0:	e15c000e 	cmp	ip, lr

		return RAW_INVALID_ALIGN;
	}
	
	/* Setup the basic block pool fields.  */
	pool_ptr->common_block_obj.name = name_ptr;
300009d4:	e5841008 	str	r1, [r4, #8]
	/* Walk through the pool area, setting up the available block list.  */
	blocks = 0u;
	block_ptr = (RAW_U8  *)pool_start;
	next_block_ptr = block_ptr + block_size;
	
	while (next_block_ptr <= end_of_pool) {
300009d8:	31a0e003 	movcc	lr, r3
300009dc:	3a000012 	bcc	30000a2c <raw_block_pool_create+0xa8>

		blocks++;

		if (next_block_ptr == end_of_pool) {
300009e0:	01a0e003 	moveq	lr, r3
300009e4:	03a00001 	moveq	r0, #1
300009e8:	0a00000f 	beq	30000a2c <raw_block_pool_create+0xa8>
300009ec:	e08e5002 	add	r5, lr, r2
300009f0:	e1a01005 	mov	r1, r5
300009f4:	e1a06003 	mov	r6, r3
300009f8:	e3a00001 	mov	r0, #1
300009fc:	ea000005 	b	30000a18 <raw_block_pool_create+0x94>
30000a00:	e15c0007 	cmp	ip, r7
	block_ptr = (RAW_U8  *)pool_start;
	next_block_ptr = block_ptr + block_size;
	
	while (next_block_ptr <= end_of_pool) {

		blocks++;
30000a04:	e2800001 	add	r0, r0, #1
30000a08:	e1a0600e 	mov	r6, lr

		if (next_block_ptr == end_of_pool) {
30000a0c:	0a000006 	beq	30000a2c <raw_block_pool_create+0xa8>
30000a10:	e1a0e005 	mov	lr, r5
30000a14:	e0855002 	add	r5, r5, r2
	/* Walk through the pool area, setting up the available block list.  */
	blocks = 0u;
	block_ptr = (RAW_U8  *)pool_start;
	next_block_ptr = block_ptr + block_size;
	
	while (next_block_ptr <= end_of_pool) {
30000a18:	e15c0001 	cmp	ip, r1

		blocks++;
30000a1c:	e0811002 	add	r1, r1, r2

		if (next_block_ptr == end_of_pool) {
30000a20:	e0627001 	rsb	r7, r2, r1

			break;
		}

		/* Setup the link to the next block.  */
		*((RAW_U8 * *) block_ptr) = next_block_ptr;
30000a24:	e586e000 	str	lr, [r6]
	/* Walk through the pool area, setting up the available block list.  */
	blocks = 0u;
	block_ptr = (RAW_U8  *)pool_start;
	next_block_ptr = block_ptr + block_size;
	
	while (next_block_ptr <= end_of_pool) {
30000a28:	2afffff4 	bcs	30000a00 <raw_block_pool_create+0x7c>
		/* Update the next block pointer.  */
		next_block_ptr = block_ptr + block_size;
	}

	/* Set the last block's forward pointer to NULL.  */
	*((RAW_U8 * *)block_ptr) = 0;
30000a2c:	e3a05000 	mov	r5, #0
30000a30:	e58e5000 	str	r5, [lr]

	pool_ptr->block_size = block_size;
	
	pool_ptr ->raw_block_pool_available_list = (RAW_U8  *)pool_start;

	pool_ptr ->common_block_obj.object_type = RAW_BLOCK_OBJ_TYPE;
30000a34:	e3a01017 	mov	r1, #23
	/* Save the remaining information in the pool control block.  */
	pool_ptr->raw_block_pool_available = blocks;

	pool_ptr->block_size = block_size;
	
	pool_ptr ->raw_block_pool_available_list = (RAW_U8  *)pool_start;
30000a38:	e5843018 	str	r3, [r4, #24]

	pool_ptr ->common_block_obj.object_type = RAW_BLOCK_OBJ_TYPE;

	TRACE_BLOCK_POOL_CREATE(raw_task_active, pool_ptr);
30000a3c:	e59f3028 	ldr	r3, [pc, #40]	; 30000a6c <raw_block_pool_create+0xe8>

	pool_ptr->block_size = block_size;
	
	pool_ptr ->raw_block_pool_available_list = (RAW_U8  *)pool_start;

	pool_ptr ->common_block_obj.object_type = RAW_BLOCK_OBJ_TYPE;
30000a40:	e5c4100d 	strb	r1, [r4, #13]

	/* Set the last block's forward pointer to NULL.  */
	*((RAW_U8 * *)block_ptr) = 0;

	/* Save the remaining information in the pool control block.  */
	pool_ptr->raw_block_pool_available = blocks;
30000a44:	e5840010 	str	r0, [r4, #16]

	pool_ptr->block_size = block_size;
30000a48:	e5842014 	str	r2, [r4, #20]
	
	pool_ptr ->raw_block_pool_available_list = (RAW_U8  *)pool_start;

	pool_ptr ->common_block_obj.object_type = RAW_BLOCK_OBJ_TYPE;

	TRACE_BLOCK_POOL_CREATE(raw_task_active, pool_ptr);
30000a4c:	e5930000 	ldr	r0, [r3]
30000a50:	e1a01004 	mov	r1, r4
30000a54:	eb001c53 	bl	30007ba8 <_trace_block_pool_create>
30000a58:	e1a00005 	mov	r0, r5
	
	return RAW_SUCCESS;
	
}
30000a5c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
30000a60:	e12fff1e 	bx	lr

	pool_ptr ->common_block_obj.object_type = RAW_BLOCK_OBJ_TYPE;

	TRACE_BLOCK_POOL_CREATE(raw_task_active, pool_ptr);
	
	return RAW_SUCCESS;
30000a64:	e3a00033 	mov	r0, #51	; 0x33
30000a68:	eafffffb 	b	30000a5c <raw_block_pool_create+0xd8>
30000a6c:	30013838 	andcc	r3, r1, r8, lsr r8

30000a70 <raw_byte_pool_create>:
	RAW_U8  *block_ptr;                  /* Working block pointer       */
	RAW_U8   byte_align_mask;

	#if (RAW_BYTE_FUNCTION_CHECK > 0)

	if (pool_ptr == 0) {
30000a70:	e3500000 	cmp	r0, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_byte_pool_create(RAW_BYTE_POOL_STRUCT *pool_ptr, RAW_U8 *name_ptr, RAW_VOID *pool_start, RAW_U32 pool_size)
{
30000a74:	e92d0070 	push	{r4, r5, r6}
	RAW_U8  *block_ptr;                  /* Working block pointer       */
	RAW_U8   byte_align_mask;

	#if (RAW_BYTE_FUNCTION_CHECK > 0)

	if (pool_ptr == 0) {
30000a78:	0a00001f 	beq	30000afc <raw_byte_pool_create+0x8c>

		return RAW_NULL_POINTER;
	}

	if (pool_start == 0) {
30000a7c:	e3520000 	cmp	r2, #0
30000a80:	0a00001d 	beq	30000afc <raw_byte_pool_create+0x8c>

		return RAW_NULL_POINTER;
	}

	/* Check for invalid pool size.  */
	if (pool_size < RAW_BYTE_POOL_MIN) {
30000a84:	e3530063 	cmp	r3, #99	; 0x63
30000a88:	93a00031 	movls	r0, #49	; 0x31
30000a8c:	9a000016 	bls	30000aec <raw_byte_pool_create+0x7c>
	#endif

	byte_align_mask = sizeof(void *) - 1u;

	/*pool_start needs 4 bytes aligned*/
	if (((RAW_U32)pool_start & byte_align_mask)){                             
30000a90:	e3120003 	tst	r2, #3
30000a94:	1a000016 	bne	30000af4 <raw_byte_pool_create+0x84>
		return RAW_INVALID_ALIGN;

	}

	/*pool_size needs 4 bytes aligned*/
	if ((pool_size & byte_align_mask)) {   
30000a98:	e213c003 	ands	ip, r3, #3
30000a9c:	1a000014 	bne	30000af4 <raw_byte_pool_create+0x84>
	   the available block's header in the available bytes count.  */
	pool_ptr->raw_byte_pool_available = pool_size - sizeof(RAW_U8 *) - sizeof(RAW_U32);
	pool_ptr->raw_byte_pool_fragments = 2u;

	/* Calculate the end of the pool's memory area.  */
	block_ptr = ((RAW_U8 *)pool_start) + (RAW_U32) pool_size;
30000aa0:	e0825003 	add	r5, r2, r3

	/*Initially, the pool will have two blocks.  One large block at the 
	   beginning that is available and a small allocated block at the end
	   of the pool that is there just for the algorithm.  Be sure to count
	   the available block's header in the available bytes count.  */
	pool_ptr->raw_byte_pool_available = pool_size - sizeof(RAW_U8 *) - sizeof(RAW_U32);
30000aa4:	e2433008 	sub	r3, r3, #8
30000aa8:	e5803010 	str	r3, [r0, #16]
	pool_ptr->raw_byte_pool_fragments = 2u;
30000aac:	e3a03002 	mov	r3, #2
30000ab0:	e5803014 	str	r3, [r0, #20]
	/* Calculate the end of the pool's memory area.  */
	block_ptr = ((RAW_U8 *)pool_start) + (RAW_U32) pool_size;

	/* Backup the end of the pool pointer and build the pre-allocated block.  */
	block_ptr = block_ptr - sizeof(RAW_U32);
	*((RAW_U32 *)block_ptr) = RAW_BYTE_BLOCK_ALLOC;
30000ab4:	e59f3048 	ldr	r3, [pc, #72]	; 30000b04 <raw_byte_pool_create+0x94>

	/* Calculate the end of the pool's memory area.  */
	block_ptr = ((RAW_U8 *)pool_start) + (RAW_U32) pool_size;

	/* Backup the end of the pool pointer and build the pre-allocated block.  */
	block_ptr = block_ptr - sizeof(RAW_U32);
30000ab8:	e2454004 	sub	r4, r5, #4
	*((RAW_U32 *)block_ptr) = RAW_BYTE_BLOCK_ALLOC;
30000abc:	e5053004 	str	r3, [r5, #-4]

	/* Now setup the large available block in the pool.  */
	*((RAW_U8  * *) pool_start) = block_ptr;
	block_ptr = (RAW_U8  *)pool_start;
	block_ptr = block_ptr + sizeof(RAW_U8 *);
	*((RAW_U32 *) block_ptr) = RAW_BYTE_BLOCK_FREE;
30000ac0:	e59f3040 	ldr	r3, [pc, #64]	; 30000b08 <raw_byte_pool_create+0x98>
	block_ptr = ((RAW_U8 *)pool_start) + (RAW_U32) pool_size;

	/* Backup the end of the pool pointer and build the pre-allocated block.  */
	block_ptr = block_ptr - sizeof(RAW_U32);
	*((RAW_U32 *)block_ptr) = RAW_BYTE_BLOCK_ALLOC;
	block_ptr = block_ptr - sizeof(RAW_U8 *);
30000ac4:	e2446004 	sub	r6, r4, #4

	/* Now setup the large available block in the pool.  */
	*((RAW_U8  * *) pool_start) = block_ptr;
	block_ptr = (RAW_U8  *)pool_start;
	block_ptr = block_ptr + sizeof(RAW_U8 *);
	*((RAW_U32 *) block_ptr) = RAW_BYTE_BLOCK_FREE;
30000ac8:	e5823004 	str	r3, [r2, #4]

 	pool_ptr->common_block_obj.object_type = RAW_BYTE_OBJ_TYPE;
30000acc:	e3a03016 	mov	r3, #22
		
		return RAW_INVALID_ALIGN;
	}
	
	/* Setup the basic byte pool fields.  */
	pool_ptr->common_block_obj.name = name_ptr;
30000ad0:	e5801008 	str	r1, [r0, #8]
	pool_ptr->raw_byte_pool_search = (RAW_U8 *)pool_start;
30000ad4:	e5802018 	str	r2, [r0, #24]
	pool_ptr->raw_byte_pool_owner = 0;
30000ad8:	e580c01c 	str	ip, [r0, #28]

	/* Backup the end of the pool pointer and build the pre-allocated block.  */
	block_ptr = block_ptr - sizeof(RAW_U32);
	*((RAW_U32 *)block_ptr) = RAW_BYTE_BLOCK_ALLOC;
	block_ptr = block_ptr - sizeof(RAW_U8 *);
	*((RAW_U8 * *)block_ptr) = pool_start;
30000adc:	e5042004 	str	r2, [r4, #-4]

	/* Now setup the large available block in the pool.  */
	*((RAW_U8  * *) pool_start) = block_ptr;
30000ae0:	e5826000 	str	r6, [r2]
	block_ptr = (RAW_U8  *)pool_start;
	block_ptr = block_ptr + sizeof(RAW_U8 *);
	*((RAW_U32 *) block_ptr) = RAW_BYTE_BLOCK_FREE;

 	pool_ptr->common_block_obj.object_type = RAW_BYTE_OBJ_TYPE;
30000ae4:	e5c0300d 	strb	r3, [r0, #13]
30000ae8:	e1a0000c 	mov	r0, ip

	return RAW_SUCCESS;
	
}
30000aec:	e8bd0070 	pop	{r4, r5, r6}
30000af0:	e12fff1e 	bx	lr
	block_ptr = block_ptr + sizeof(RAW_U8 *);
	*((RAW_U32 *) block_ptr) = RAW_BYTE_BLOCK_FREE;

 	pool_ptr->common_block_obj.object_type = RAW_BYTE_OBJ_TYPE;

	return RAW_SUCCESS;
30000af4:	e3a00033 	mov	r0, #51	; 0x33
30000af8:	eafffffb 	b	30000aec <raw_byte_pool_create+0x7c>
30000afc:	e3a00023 	mov	r0, #35	; 0x23
30000b00:	eafffff9 	b	30000aec <raw_byte_pool_create+0x7c>
30000b04:	abcddcab 	blge	2f377db8 <MEM_SIZE+0x2eb77db8>
30000b08:	fefdecdb 	mrc2	12, 7, lr, cr13, cr11, {6}

30000b0c <raw_byte_release>:
*
*             
************************************************************************************************************************
*/
RAW_U16  raw_byte_release(RAW_BYTE_POOL_STRUCT *pool_ptr, void *memory_ptr)
{
30000b0c:	e92d4010 	push	{r4, lr}
	RAW_SR_ALLOC();


	#if (RAW_BYTE_FUNCTION_CHECK > 0)

	if (pool_ptr == 0) {
30000b10:	e2504000 	subs	r4, r0, #0
*
*             
************************************************************************************************************************
*/
RAW_U16  raw_byte_release(RAW_BYTE_POOL_STRUCT *pool_ptr, void *memory_ptr)
{
30000b14:	e24dd008 	sub	sp, sp, #8
	RAW_SR_ALLOC();


	#if (RAW_BYTE_FUNCTION_CHECK > 0)

	if (pool_ptr == 0) {
30000b18:	0a00001a 	beq	30000b88 <raw_byte_release+0x7c>

		return RAW_NULL_POINTER;
	}

	if (memory_ptr == 0) {
30000b1c:	e3510000 	cmp	r1, #0
30000b20:	0a000018 	beq	30000b88 <raw_byte_release+0x7c>
		return RAW_NULL_POINTER;
	}
		
	#endif

	if (pool_ptr ->common_block_obj.object_type != RAW_BYTE_OBJ_TYPE) {
30000b24:	e5d4300d 	ldrb	r3, [r4, #13]
30000b28:	e3530016 	cmp	r3, #22
30000b2c:	13a00036 	movne	r0, #54	; 0x36
30000b30:	0a000002 	beq	30000b40 <raw_byte_release+0x34>

	RAW_CPU_ENABLE();

	return RAW_SUCCESS;
		
}
30000b34:	e28dd008 	add	sp, sp, #8
30000b38:	e8bd4010 	pop	{r4, lr}
30000b3c:	e12fff1e 	bx	lr
	
	/* Back off the memory pointer to pickup its header.  */
	work_ptr = (RAW_U8 *)memory_ptr - sizeof(RAW_U8 *) - sizeof(RAW_U32);

	/* Disable interrupts.  */
	RAW_CPU_DISABLE();
30000b40:	e58d1004 	str	r1, [sp, #4]
30000b44:	eb001c2b 	bl	30007bf8 <OS_CPU_SR_Save>

		return RAW_ERROR_OBJECT_TYPE;
	}
	
	/* Back off the memory pointer to pickup its header.  */
	work_ptr = (RAW_U8 *)memory_ptr - sizeof(RAW_U8 *) - sizeof(RAW_U32);
30000b48:	e59d1004 	ldr	r1, [sp, #4]

	/* Indicate that this thread is the current owner.  */
	pool_ptr->raw_byte_pool_owner = raw_task_active;

	/* Release the memory.*/
	*((RAW_U32 *)(work_ptr + sizeof(RAW_U8 *))) = RAW_BYTE_BLOCK_FREE;
30000b4c:	e59f203c 	ldr	r2, [pc, #60]	; 30000b90 <raw_byte_release+0x84>

		return RAW_ERROR_OBJECT_TYPE;
	}
	
	/* Back off the memory pointer to pickup its header.  */
	work_ptr = (RAW_U8 *)memory_ptr - sizeof(RAW_U8 *) - sizeof(RAW_U32);
30000b50:	e2413008 	sub	r3, r1, #8

	/* Indicate that this thread is the current owner.  */
	pool_ptr->raw_byte_pool_owner = raw_task_active;

	/* Release the memory.*/
	*((RAW_U32 *)(work_ptr + sizeof(RAW_U8 *))) = RAW_BYTE_BLOCK_FREE;
30000b54:	e5832004 	str	r2, [r3, #4]

	/* Update the number of available bytes in the pool. */
	pool_ptr->raw_byte_pool_available =  
30000b58:	e5112008 	ldr	r2, [r1, #-8]

	/* Disable interrupts.  */
	RAW_CPU_DISABLE();

	/* Indicate that this thread is the current owner.  */
	pool_ptr->raw_byte_pool_owner = raw_task_active;
30000b5c:	e59f1030 	ldr	r1, [pc, #48]	; 30000b94 <raw_byte_release+0x88>

	/* Release the memory.*/
	*((RAW_U32 *)(work_ptr + sizeof(RAW_U8 *))) = RAW_BYTE_BLOCK_FREE;

	/* Update the number of available bytes in the pool. */
	pool_ptr->raw_byte_pool_available =  
30000b60:	e594c010 	ldr	ip, [r4, #16]

	/* Disable interrupts.  */
	RAW_CPU_DISABLE();

	/* Indicate that this thread is the current owner.  */
	pool_ptr->raw_byte_pool_owner = raw_task_active;
30000b64:	e5911000 	ldr	r1, [r1]

	/* Release the memory.*/
	*((RAW_U32 *)(work_ptr + sizeof(RAW_U8 *))) = RAW_BYTE_BLOCK_FREE;

	/* Update the number of available bytes in the pool. */
	pool_ptr->raw_byte_pool_available =  
30000b68:	e0632002 	rsb	r2, r3, r2
30000b6c:	e08c2002 	add	r2, ip, r2
	pool_ptr->raw_byte_pool_available + (*((RAW_U8 * *)(work_ptr)) - work_ptr);

	/* Set the pool search value appropriately. */
	pool_ptr->raw_byte_pool_search = work_ptr;
30000b70:	e5843018 	str	r3, [r4, #24]

	/* Disable interrupts.  */
	RAW_CPU_DISABLE();

	/* Indicate that this thread is the current owner.  */
	pool_ptr->raw_byte_pool_owner = raw_task_active;
30000b74:	e584101c 	str	r1, [r4, #28]

	/* Release the memory.*/
	*((RAW_U32 *)(work_ptr + sizeof(RAW_U8 *))) = RAW_BYTE_BLOCK_FREE;

	/* Update the number of available bytes in the pool. */
	pool_ptr->raw_byte_pool_available =  
30000b78:	e5842010 	str	r2, [r4, #16]
	pool_ptr->raw_byte_pool_available + (*((RAW_U8 * *)(work_ptr)) - work_ptr);

	/* Set the pool search value appropriately. */
	pool_ptr->raw_byte_pool_search = work_ptr;

	RAW_CPU_ENABLE();
30000b7c:	eb001c25 	bl	30007c18 <OS_CPU_SR_Restore>
30000b80:	e3a00000 	mov	r0, #0

	return RAW_SUCCESS;
30000b84:	eaffffea 	b	30000b34 <raw_byte_release+0x28>
30000b88:	e3a00023 	mov	r0, #35	; 0x23
30000b8c:	eaffffe8 	b	30000b34 <raw_byte_release+0x28>
30000b90:	fefdecdb 	mrc2	12, 7, lr, cr13, cr11, {6}
30000b94:	30013838 	andcc	r3, r1, r8, lsr r8

30000b98 <raw_byte_allocate>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_byte_allocate(RAW_BYTE_POOL_STRUCT *pool_ptr, RAW_VOID **memory_ptr, RAW_U32 memory_size)
{
30000b98:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}

	RAW_SR_ALLOC();

	#if (RAW_BYTE_FUNCTION_CHECK > 0)

	if (pool_ptr == 0) {
30000b9c:	e2504000 	subs	r4, r0, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_byte_allocate(RAW_BYTE_POOL_STRUCT *pool_ptr, RAW_VOID **memory_ptr, RAW_U32 memory_size)
{
30000ba0:	e24dd00c 	sub	sp, sp, #12
30000ba4:	e1a06001 	mov	r6, r1

	RAW_SR_ALLOC();

	#if (RAW_BYTE_FUNCTION_CHECK > 0)

	if (pool_ptr == 0) {
30000ba8:	0a000058 	beq	30000d10 <raw_byte_allocate+0x178>
			
		return RAW_NULL_POINTER;
	}

	if (memory_ptr == 0) {
30000bac:	e3510000 	cmp	r1, #0
30000bb0:	0a000056 	beq	30000d10 <raw_byte_allocate+0x178>
		return RAW_NULL_POINTER;
	}
	 
	#endif

	if (pool_ptr->common_block_obj.object_type != RAW_BYTE_OBJ_TYPE) {
30000bb4:	e5d4300d 	ldrb	r3, [r4, #13]
30000bb8:	e3530016 	cmp	r3, #22
30000bbc:	13a04036 	movne	r4, #54	; 0x36
30000bc0:	0a000003 	beq	30000bd4 <raw_byte_allocate+0x3c>
	}

	RAW_CPU_ENABLE();

	return status;
}
30000bc4:	e1a00004 	mov	r0, r4
30000bc8:	e28dd00c 	add	sp, sp, #12
30000bcc:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
30000bd0:	e12fff1e 	bx	lr
		return RAW_ERROR_OBJECT_TYPE;
	}

	/* align the memory size to 4 byte*/

	memory_size = ((memory_size & (~3u)) + 4u);
30000bd4:	e3c22003 	bic	r2, r2, #3

	current_work_task = raw_task_active;
30000bd8:	e59f81b4 	ldr	r8, [pc, #436]	; 30000d94 <raw_byte_allocate+0x1fc>

		/* Do we need to split this block if this is big enough.*/
		if ((available_bytes - memory_size) >= ((RAW_U32) RAW_BYTE_BLOCK_MIN)) {

			/* Split the block.  */
			next_ptr = current_ptr + memory_size + sizeof(RAW_U8 *) + sizeof(RAW_U32);
30000bdc:	e282100c 	add	r1, r2, #12
30000be0:	e58d1004 	str	r1, [sp, #4]

	/* align the memory size to 4 byte*/

	memory_size = ((memory_size & (~3u)) + 4u);

	current_work_task = raw_task_active;
30000be4:	e5989000 	ldr	r9, [r8]
		return RAW_ERROR_OBJECT_TYPE;
	}

	/* align the memory size to 4 byte*/

	memory_size = ((memory_size & (~3u)) + 4u);
30000be8:	e282a004 	add	sl, r2, #4

	current_work_task = raw_task_active;

	/* Disable interrupts.  */
	RAW_CPU_DISABLE();
30000bec:	eb001c01 	bl	30007bf8 <OS_CPU_SR_Save>
	available_bytes = 0u;
		
	do {
		
		/* Check to see if this block is free.  */
		if (*((RAW_U32 *)(current_ptr + sizeof(RAW_U8  *))) == RAW_BYTE_BLOCK_FREE) {
30000bf0:	e59f71a0 	ldr	r7, [pc, #416]	; 30000d98 <raw_byte_allocate+0x200>
			/* Set available equal to memory size for subsequent calculation.  */
			available_bytes = memory_size;
		}

			/* In any case, mark the current block as allocated.  */
			*((RAW_U32 *)(current_ptr + sizeof(RAW_U8  *))) = RAW_BYTE_BLOCK_ALLOC;
30000bf4:	e59fb1a0 	ldr	fp, [pc, #416]	; 30000d9c <raw_byte_allocate+0x204>
	memory_size = ((memory_size & (~3u)) + 4u);

	current_work_task = raw_task_active;

	/* Disable interrupts.  */
	RAW_CPU_DISABLE();
30000bf8:	e1a05000 	mov	r5, r0

	/* Loop to handle cases where the owner of the pool changed.  */
	do {

		/* Indicate that this thread is the current owner.  */
		pool_ptr->raw_byte_pool_owner = current_work_task;
30000bfc:	e584901c 	str	r9, [r4, #28]

		/* Restore interrupts.  */
		RAW_CPU_ENABLE();
30000c00:	e1a00005 	mov	r0, r5
30000c04:	eb001c03 	bl	30007c18 <OS_CPU_SR_Restore>
	RAW_U32 examine_blocks;             /* Blocks to be examined      */

	RAW_SR_ALLOC();

	/* Disable interrupts.  */
	RAW_CPU_DISABLE();
30000c08:	eb001bfa 	bl	30007bf8 <OS_CPU_SR_Save>

	/* First, determine if there are enough bytes in the pool.  */
	if (memory_size >= pool_ptr->raw_byte_pool_available) {
30000c0c:	e5943010 	ldr	r3, [r4, #16]
	RAW_U32 examine_blocks;             /* Blocks to be examined      */

	RAW_SR_ALLOC();

	/* Disable interrupts.  */
	RAW_CPU_DISABLE();
30000c10:	e1a02000 	mov	r2, r0

	/* First, determine if there are enough bytes in the pool.  */
	if (memory_size >= pool_ptr->raw_byte_pool_available) {
30000c14:	e15a0003 	cmp	sl, r3
30000c18:	2a000027 	bcs	30000cbc <raw_byte_allocate+0x124>
		return 0;
	}

	/* Walk through the memory pool in search for a large enough block.  */
	current_ptr = pool_ptr->raw_byte_pool_search;
	examine_blocks = pool_ptr->raw_byte_pool_fragments + 1u;
30000c1c:	e5943014 	ldr	r3, [r4, #20]
		/* Not enough memory, return a NULL pointer.  */
		return 0;
	}

	/* Walk through the memory pool in search for a large enough block.  */
	current_ptr = pool_ptr->raw_byte_pool_search;
30000c20:	e5945018 	ldr	r5, [r4, #24]
	examine_blocks = pool_ptr->raw_byte_pool_fragments + 1u;
30000c24:	e2833001 	add	r3, r3, #1
30000c28:	ea000010 	b	30000c70 <raw_byte_allocate+0xd8>
			/* Block is not free, move to next block.  */
			current_ptr = *((RAW_U8 * *)current_ptr);
		}

		/* finish one block search*/
		if (examine_blocks) {
30000c2c:	e3530000 	cmp	r3, #0
			examine_blocks--;
30000c30:	12433001 	subne	r3, r3, #1
		}

		/* Restore interrupts temporarily.  */
		RAW_CPU_ENABLE();
30000c34:	e1a00002 	mov	r0, r2
30000c38:	e58d3000 	str	r3, [sp]
30000c3c:	eb001bf5 	bl	30007c18 <OS_CPU_SR_Restore>

		/* Disable interrupts.  */
		RAW_CPU_DISABLE();
30000c40:	eb001bec 	bl	30007bf8 <OS_CPU_SR_Save>

		/* Determine if anything has changed in terms of pool ownership.  */
		if (pool_ptr ->raw_byte_pool_owner != raw_task_active) {
30000c44:	e5981000 	ldr	r1, [r8]

		/* Restore interrupts temporarily.  */
		RAW_CPU_ENABLE();

		/* Disable interrupts.  */
		RAW_CPU_DISABLE();
30000c48:	e1a02000 	mov	r2, r0

		/* Determine if anything has changed in terms of pool ownership.  */
		if (pool_ptr ->raw_byte_pool_owner != raw_task_active) {
30000c4c:	e594001c 	ldr	r0, [r4, #28]
30000c50:	e59d3000 	ldr	r3, [sp]
30000c54:	e1500001 	cmp	r0, r1

			/* Pool changed ownership during interrupts.so we reset the search*/

			current_ptr = pool_ptr ->raw_byte_pool_search;
			examine_blocks = pool_ptr ->raw_byte_pool_fragments + 1u;
30000c58:	15943014 	ldrne	r3, [r4, #20]
		/* Determine if anything has changed in terms of pool ownership.  */
		if (pool_ptr ->raw_byte_pool_owner != raw_task_active) {

			/* Pool changed ownership during interrupts.so we reset the search*/

			current_ptr = pool_ptr ->raw_byte_pool_search;
30000c5c:	15945018 	ldrne	r5, [r4, #24]
			examine_blocks = pool_ptr ->raw_byte_pool_fragments + 1u;
30000c60:	12833001 	addne	r3, r3, #1

			/* Setup our ownership again.  */
			pool_ptr ->raw_byte_pool_owner = raw_task_active;
30000c64:	1584101c 	strne	r1, [r4, #28]
		}

	} while (examine_blocks);
30000c68:	e3530000 	cmp	r3, #0
30000c6c:	0a000011 	beq	30000cb8 <raw_byte_allocate+0x120>
	available_bytes = 0u;
		
	do {
		
		/* Check to see if this block is free.  */
		if (*((RAW_U32 *)(current_ptr + sizeof(RAW_U8  *))) == RAW_BYTE_BLOCK_FREE) {
30000c70:	e5951004 	ldr	r1, [r5, #4]
30000c74:	e2850004 	add	r0, r5, #4
30000c78:	e1510007 	cmp	r1, r7
		}
		
		else {

			/* Block is not free, move to next block.  */
			current_ptr = *((RAW_U8 * *)current_ptr);
30000c7c:	15955000 	ldrne	r5, [r5]
	available_bytes = 0u;
		
	do {
		
		/* Check to see if this block is free.  */
		if (*((RAW_U32 *)(current_ptr + sizeof(RAW_U8  *))) == RAW_BYTE_BLOCK_FREE) {
30000c80:	1affffe9 	bne	30000c2c <raw_byte_allocate+0x94>

			/* Block is free, see if it is large enough.  */

			/* Pickup the next block's pointer.  */
			next_ptr = *((RAW_U8 * *) current_ptr);
30000c84:	e595c000 	ldr	ip, [r5]

			/* Calculate the number of byte available in this block.  */
			available_bytes = next_ptr - current_ptr - sizeof(RAW_U8  *) - sizeof(RAW_U32);
30000c88:	e065100c 	rsb	r1, r5, ip
30000c8c:	e2411008 	sub	r1, r1, #8

			/* If this is large enough, we are done because our first-fit algorithm
			has been satisfied!  */
			if (available_bytes >= memory_size) {
30000c90:	e15a0001 	cmp	sl, r1
30000c94:	9a00001f 	bls	30000d18 <raw_byte_allocate+0x180>
				/* Clear the available bytes variable.  */
				available_bytes = 0u;

				/* Not enough memory, check to see if the neighbor is 
				free and can be merged.  */
				if (*((RAW_U32 *)(next_ptr + sizeof(RAW_U8 *))) == RAW_BYTE_BLOCK_FREE) {
30000c98:	e59c1004 	ldr	r1, [ip, #4]
30000c9c:	e1510007 	cmp	r1, r7
30000ca0:	0a000014 	beq	30000cf8 <raw_byte_allocate+0x160>

					/* Neighbor is not free so get to the next search point*/
					current_ptr = *((RAW_U8 * *)next_ptr);

					/* Reduse the examined block since we have skiped one search */
					if (examine_blocks) {
30000ca4:	e3530000 	cmp	r3, #0
				}
				
				else {

					/* Neighbor is not free so get to the next search point*/
					current_ptr = *((RAW_U8 * *)next_ptr);
30000ca8:	e59c5000 	ldr	r5, [ip]

					/* Reduse the examined block since we have skiped one search */
					if (examine_blocks) {
						examine_blocks--;
30000cac:	12433001 	subne	r3, r3, #1

					/* Neighbor is not free so get to the next search point*/
					current_ptr = *((RAW_U8 * *)next_ptr);

					/* Reduse the examined block since we have skiped one search */
					if (examine_blocks) {
30000cb0:	1affffdd 	bne	30000c2c <raw_byte_allocate+0x94>
30000cb4:	eaffffde 	b	30000c34 <raw_byte_allocate+0x9c>
		current_ptr = 0;
	}


	/* Restore interrupts temporarily.  */
	RAW_CPU_ENABLE();
30000cb8:	e1a00002 	mov	r0, r2
30000cbc:	eb001bd5 	bl	30007c18 <OS_CPU_SR_Restore>

		/*Search for free memory*/
		work_ptr = raw_byte_pool_search(pool_ptr, memory_size);

		/* Disable interrupts.  */
		RAW_CPU_DISABLE();
30000cc0:	eb001bcc 	bl	30007bf8 <OS_CPU_SR_Save>
30000cc4:	e1a05000 	mov	r5, r0

	/*if raw_byte_pool_owner changed and we have not got memory yet, continue tom do search*/
	} while ((!work_ptr) && (pool_ptr ->raw_byte_pool_owner != current_work_task));
30000cc8:	e594301c 	ldr	r3, [r4, #28]
30000ccc:	e1530009 	cmp	r3, r9
30000cd0:	1affffc9 	bne	30000bfc <raw_byte_allocate+0x64>

	}

	else {
		
		*memory_ptr = 0;
30000cd4:	e3a03000 	mov	r3, #0

		/* Set the status to RAW_NO_MEMORY.  */
		status = RAW_NO_MEMORY; 

		TRACE_BYTE_NO_MEMORY(raw_task_active, pool_ptr);
30000cd8:	e1a01004 	mov	r1, r4

	}

	else {
		
		*memory_ptr = 0;
30000cdc:	e5863000 	str	r3, [r6]

		/* Set the status to RAW_NO_MEMORY.  */
		status = RAW_NO_MEMORY; 

		TRACE_BYTE_NO_MEMORY(raw_task_active, pool_ptr);
30000ce0:	e5980000 	ldr	r0, [r8]
30000ce4:	eb001bb0 	bl	30007bac <_trace_byte_no_memory>
30000ce8:	e3a0401d 	mov	r4, #29
	}

	RAW_CPU_ENABLE();
30000cec:	e1a00005 	mov	r0, r5
30000cf0:	eb001bc8 	bl	30007c18 <OS_CPU_SR_Restore>

	return status;
30000cf4:	eaffffb2 	b	30000bc4 <raw_byte_allocate+0x2c>
					*((RAW_U8 * *)current_ptr) = *((RAW_U8 * *)next_ptr);

					/* Reduce the fragment number, and does not need to increase  available bytes since 
					    they are already there*/
					    
					pool_ptr->raw_byte_pool_fragments--;
30000cf8:	e5941014 	ldr	r1, [r4, #20]
				free and can be merged.  */
				if (*((RAW_U32 *)(next_ptr + sizeof(RAW_U8 *))) == RAW_BYTE_BLOCK_FREE) {

					/* Yes, neighbor block can be merged!  This is quickly accomplished
					   by updating the current block with the next blocks pointer.  */
					*((RAW_U8 * *)current_ptr) = *((RAW_U8 * *)next_ptr);
30000cfc:	e59c0000 	ldr	r0, [ip]

					/* Reduce the fragment number, and does not need to increase  available bytes since 
					    they are already there*/
					    
					pool_ptr->raw_byte_pool_fragments--;
30000d00:	e2411001 	sub	r1, r1, #1
				free and can be merged.  */
				if (*((RAW_U32 *)(next_ptr + sizeof(RAW_U8 *))) == RAW_BYTE_BLOCK_FREE) {

					/* Yes, neighbor block can be merged!  This is quickly accomplished
					   by updating the current block with the next blocks pointer.  */
					*((RAW_U8 * *)current_ptr) = *((RAW_U8 * *)next_ptr);
30000d04:	e5850000 	str	r0, [r5]

					/* Reduce the fragment number, and does not need to increase  available bytes since 
					    they are already there*/
					    
					pool_ptr->raw_byte_pool_fragments--;
30000d08:	e5841014 	str	r1, [r4, #20]
30000d0c:	eaffffc6 	b	30000c2c <raw_byte_allocate+0x94>
		TRACE_BYTE_NO_MEMORY(raw_task_active, pool_ptr);
	}

	RAW_CPU_ENABLE();

	return status;
30000d10:	e3a04023 	mov	r4, #35	; 0x23
30000d14:	eaffffaa 	b	30000bc4 <raw_byte_allocate+0x2c>

	} while (examine_blocks);

	/* Determine if a block was found.  If so, determine if it needs to be
	split.  */
	if (available_bytes) {
30000d18:	e3510000 	cmp	r1, #0
30000d1c:	0affffe5 	beq	30000cb8 <raw_byte_allocate+0x120>

		/* Do we need to split this block if this is big enough.*/
		if ((available_bytes - memory_size) >= ((RAW_U32) RAW_BYTE_BLOCK_MIN)) {
30000d20:	e06a3001 	rsb	r3, sl, r1
30000d24:	e3530013 	cmp	r3, #19
30000d28:	9a000008 	bls	30000d50 <raw_byte_allocate+0x1b8>

			/* Split the block.  */
			next_ptr = current_ptr + memory_size + sizeof(RAW_U8 *) + sizeof(RAW_U32);
30000d2c:	e59de004 	ldr	lr, [sp, #4]
30000d30:	e085300e 	add	r3, r5, lr

			/* Setup the new free block.  */
			*((RAW_U8 * *) next_ptr) = *((RAW_U8 * *) current_ptr);
			*((RAW_U32 *) (next_ptr + sizeof(RAW_U8 *))) = RAW_BYTE_BLOCK_FREE;
30000d34:	e5837004 	str	r7, [r3, #4]

			/* Increase the total fragment counter.  */
			pool_ptr->raw_byte_pool_fragments++;
30000d38:	e5941014 	ldr	r1, [r4, #20]

			/* Split the block.  */
			next_ptr = current_ptr + memory_size + sizeof(RAW_U8 *) + sizeof(RAW_U32);

			/* Setup the new free block.  */
			*((RAW_U8 * *) next_ptr) = *((RAW_U8 * *) current_ptr);
30000d3c:	e785c00e 	str	ip, [r5, lr]
			*((RAW_U32 *) (next_ptr + sizeof(RAW_U8 *))) = RAW_BYTE_BLOCK_FREE;

			/* Increase the total fragment counter.  */
			pool_ptr->raw_byte_pool_fragments++;
30000d40:	e2811001 	add	r1, r1, #1
30000d44:	e5841014 	str	r1, [r4, #20]

			/* Update the current pointer to point at the newly created block.  */
			*((RAW_U8 * *)current_ptr) = next_ptr;
30000d48:	e5853000 	str	r3, [r5]
30000d4c:	e1a0100a 	mov	r1, sl
			/* Set available equal to memory size for subsequent calculation.  */
			available_bytes = memory_size;
		}

			/* In any case, mark the current block as allocated.  */
			*((RAW_U32 *)(current_ptr + sizeof(RAW_U8  *))) = RAW_BYTE_BLOCK_ALLOC;
30000d50:	e580b000 	str	fp, [r0]

			/* Reduce the number of available bytes in the pool.  */
			pool_ptr->raw_byte_pool_available =  pool_ptr ->raw_byte_pool_available - available_bytes
30000d54:	e5940010 	ldr	r0, [r4, #16]
			                   - sizeof(RAW_U8 *) - sizeof(RAW_U32);

			/* Adjust the pointer for the application.  */
			current_ptr = current_ptr + sizeof(RAW_U8 *) + sizeof(RAW_U32);
30000d58:	e2853008 	add	r3, r5, #8

			/* In any case, mark the current block as allocated.  */
			*((RAW_U32 *)(current_ptr + sizeof(RAW_U8  *))) = RAW_BYTE_BLOCK_ALLOC;

			/* Reduce the number of available bytes in the pool.  */
			pool_ptr->raw_byte_pool_available =  pool_ptr ->raw_byte_pool_available - available_bytes
30000d5c:	e2400008 	sub	r0, r0, #8
30000d60:	e0611000 	rsb	r1, r1, r0
30000d64:	e5841010 	str	r1, [r4, #16]
		current_ptr = 0;
	}


	/* Restore interrupts temporarily.  */
	RAW_CPU_ENABLE();
30000d68:	e1a00002 	mov	r0, r2
30000d6c:	e58d3000 	str	r3, [sp]
30000d70:	eb001ba8 	bl	30007c18 <OS_CPU_SR_Restore>

		/*Search for free memory*/
		work_ptr = raw_byte_pool_search(pool_ptr, memory_size);

		/* Disable interrupts.  */
		RAW_CPU_DISABLE();
30000d74:	eb001b9f 	bl	30007bf8 <OS_CPU_SR_Save>

	/*if raw_byte_pool_owner changed and we have not got memory yet, continue tom do search*/
	} while ((!work_ptr) && (pool_ptr ->raw_byte_pool_owner != current_work_task));
30000d78:	e59d3000 	ldr	r3, [sp]

		/*Search for free memory*/
		work_ptr = raw_byte_pool_search(pool_ptr, memory_size);

		/* Disable interrupts.  */
		RAW_CPU_DISABLE();
30000d7c:	e1a05000 	mov	r5, r0

	/*if raw_byte_pool_owner changed and we have not got memory yet, continue tom do search*/
	} while ((!work_ptr) && (pool_ptr ->raw_byte_pool_owner != current_work_task));
30000d80:	e3530000 	cmp	r3, #0
30000d84:	0affffcf 	beq	30000cc8 <raw_byte_allocate+0x130>

	/* Determine if memory was found.  */
	if (work_ptr) {

		/* Copy the pointer into the return destination.  */
		*memory_ptr = (RAW_U8 *) work_ptr;
30000d88:	e5863000 	str	r3, [r6]
30000d8c:	e3a04000 	mov	r4, #0
30000d90:	eaffffd5 	b	30000cec <raw_byte_allocate+0x154>
30000d94:	30013838 	andcc	r3, r1, r8, lsr r8
30000d98:	fefdecdb 	mrc2	12, 7, lr, cr13, cr11, {6}
30000d9c:	abcddcab 	blge	2f378050 <MEM_SIZE+0x2eb78050>

30000da0 <raw_event_delete>:
*             
************************************************************************************************************************
*/
#if (CONFIG_RAW_EVENT_DELETE > 0)
RAW_U16 raw_event_delete(RAW_EVENT *event_ptr)
{
30000da0:	e92d4070 	push	{r4, r5, r6, lr}

	RAW_SR_ALLOC();

	#if (RAW_EVENT_FUNCTION_CHECK > 0)

	if (event_ptr == 0) {
30000da4:	e2504000 	subs	r4, r0, #0
30000da8:	03a00025 	moveq	r0, #37	; 0x25
30000dac:	0a000004 	beq	30000dc4 <raw_event_delete+0x24>
		return RAW_NULL_OBJECT;
	}

	if (raw_int_nesting) {
30000db0:	e59f30e0 	ldr	r3, [pc, #224]	; 30000e98 <raw_event_delete+0xf8>
30000db4:	e5d35000 	ldrb	r5, [r3]
30000db8:	e3550000 	cmp	r5, #0
30000dbc:	13a00027 	movne	r0, #39	; 0x27
30000dc0:	0a000001 	beq	30000dcc <raw_event_delete+0x2c>
	TRACE_EVENT_DELETE(raw_task_active, event_ptr);

	do_possible_sche();  

	return RAW_SUCCESS;
}
30000dc4:	e8bd4070 	pop	{r4, r5, r6, lr}
30000dc8:	e12fff1e 	bx	lr
		
	}

	#endif

	RAW_CRITICAL_ENTER();
30000dcc:	e59f60c8 	ldr	r6, [pc, #200]	; 30000e9c <raw_event_delete+0xfc>
30000dd0:	eb001b88 	bl	30007bf8 <OS_CPU_SR_Save>
30000dd4:	e5d63000 	ldrb	r3, [r6]
30000dd8:	e2833001 	add	r3, r3, #1
30000ddc:	e5c63000 	strb	r3, [r6]
30000de0:	eb001b8c 	bl	30007c18 <OS_CPU_SR_Restore>

	if (event_ptr->common_block_obj.object_type != RAW_EVENT_OBJ_TYPE) {
30000de4:	e5d4300d 	ldrb	r3, [r4, #13]
30000de8:	e3530019 	cmp	r3, #25
30000dec:	0a00000c 	beq	30000e24 <raw_event_delete+0x84>

		RAW_CRITICAL_EXIT();
30000df0:	e5d63000 	ldrb	r3, [r6]
30000df4:	e3530001 	cmp	r3, #1
30000df8:	0a000006 	beq	30000e18 <raw_event_delete+0x78>
30000dfc:	eb001b7d 	bl	30007bf8 <OS_CPU_SR_Save>
30000e00:	e5d63000 	ldrb	r3, [r6]
30000e04:	e2433001 	sub	r3, r3, #1
30000e08:	e5c63000 	strb	r3, [r6]
30000e0c:	eb001b81 	bl	30007c18 <OS_CPU_SR_Restore>
30000e10:	e3a00036 	mov	r0, #54	; 0x36
30000e14:	eaffffea 	b	30000dc4 <raw_event_delete+0x24>
30000e18:	eb0015b3 	bl	300064ec <hybrid_int_process>
30000e1c:	e3a00036 	mov	r0, #54	; 0x36
30000e20:	eaffffe7 	b	30000dc4 <raw_event_delete+0x24>
 * return TRUE if the list is empty
 */
RAW_INLINE RAW_BOOLEAN is_list_empty(LIST *list)
{

	return (list->next == list);	
30000e24:	e5940000 	ldr	r0, [r4]
		return RAW_ERROR_OBJECT_TYPE;
	}

	block_list_head = &event_ptr->common_block_obj.block_list;
	
	event_ptr->common_block_obj.object_type = 0u;
30000e28:	e5c4500d 	strb	r5, [r4, #13]
	/*All task blocked on this queue is waken up until list is empty*/
	while (!is_list_empty(block_list_head)) {
30000e2c:	e1540000 	cmp	r4, r0
30000e30:	0a000004 	beq	30000e48 <raw_event_delete+0xa8>
		
		delete_pend_obj(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list));	
30000e34:	e2400004 	sub	r0, r0, #4
30000e38:	eb0005b9 	bl	30002524 <delete_pend_obj>
30000e3c:	e5940000 	ldr	r0, [r4]

	block_list_head = &event_ptr->common_block_obj.block_list;
	
	event_ptr->common_block_obj.object_type = 0u;
	/*All task blocked on this queue is waken up until list is empty*/
	while (!is_list_empty(block_list_head)) {
30000e40:	e1540000 	cmp	r4, r0
30000e44:	1afffffa 	bne	30000e34 <raw_event_delete+0x94>
		delete_pend_obj(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list));	
	}    

	event_ptr->flags = 0u;

	RAW_CRITICAL_EXIT();
30000e48:	e5d63000 	ldrb	r3, [r6]
30000e4c:	e59f5048 	ldr	r5, [pc, #72]	; 30000e9c <raw_event_delete+0xfc>
30000e50:	e3530001 	cmp	r3, #1
	while (!is_list_empty(block_list_head)) {
		
		delete_pend_obj(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list));	
	}    

	event_ptr->flags = 0u;
30000e54:	e3a03000 	mov	r3, #0
30000e58:	e5843010 	str	r3, [r4, #16]

	RAW_CRITICAL_EXIT();
30000e5c:	0a00000b 	beq	30000e90 <raw_event_delete+0xf0>
30000e60:	eb001b64 	bl	30007bf8 <OS_CPU_SR_Save>
30000e64:	e5d53000 	ldrb	r3, [r5]
30000e68:	e2433001 	sub	r3, r3, #1
30000e6c:	e5c53000 	strb	r3, [r5]
30000e70:	eb001b68 	bl	30007c18 <OS_CPU_SR_Restore>

	TRACE_EVENT_DELETE(raw_task_active, event_ptr);
30000e74:	e59f3024 	ldr	r3, [pc, #36]	; 30000ea0 <raw_event_delete+0x100>
30000e78:	e1a01004 	mov	r1, r4
30000e7c:	e5930000 	ldr	r0, [r3]
30000e80:	eb001b4e 	bl	30007bc0 <_trace_event_delete>

	do_possible_sche();  
30000e84:	eb000d82 	bl	30004494 <raw_sched>
30000e88:	e3a00000 	mov	r0, #0

	return RAW_SUCCESS;
30000e8c:	eaffffcc 	b	30000dc4 <raw_event_delete+0x24>
		delete_pend_obj(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list));	
	}    

	event_ptr->flags = 0u;

	RAW_CRITICAL_EXIT();
30000e90:	eb001595 	bl	300064ec <hybrid_int_process>
30000e94:	eafffff6 	b	30000e74 <raw_event_delete+0xd4>
30000e98:	30013e61 	andcc	r3, r1, r1, ror #28
30000e9c:	300142c0 	andcc	r4, r1, r0, asr #5
30000ea0:	30013838 	andcc	r3, r1, r8, lsr r8

30000ea4 <event_set>:
}



RAW_U16 event_set(RAW_EVENT *event_ptr, RAW_U32 flags_to_set, RAW_U8 set_option)
{
30000ea4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}

	RAW_SR_ALLOC();

	status = RAW_FALSE;
	
	RAW_CRITICAL_ENTER();
30000ea8:	e59f5170 	ldr	r5, [pc, #368]	; 30001020 <event_set+0x17c>
}



RAW_U16 event_set(RAW_EVENT *event_ptr, RAW_U32 flags_to_set, RAW_U8 set_option)
{
30000eac:	e1a04000 	mov	r4, r0
30000eb0:	e1a07001 	mov	r7, r1
30000eb4:	e1a06002 	mov	r6, r2

	RAW_SR_ALLOC();

	status = RAW_FALSE;
	
	RAW_CRITICAL_ENTER();
30000eb8:	eb001b4e 	bl	30007bf8 <OS_CPU_SR_Save>
30000ebc:	e5d53000 	ldrb	r3, [r5]
30000ec0:	e2833001 	add	r3, r3, #1
30000ec4:	e5c53000 	strb	r3, [r5]
30000ec8:	eb001b52 	bl	30007c18 <OS_CPU_SR_Restore>

	if (event_ptr->common_block_obj.object_type != RAW_EVENT_OBJ_TYPE) {
30000ecc:	e5d4300d 	ldrb	r3, [r4, #13]
30000ed0:	e3530019 	cmp	r3, #25
30000ed4:	0a00000a 	beq	30000f04 <event_set+0x60>

		RAW_CRITICAL_EXIT();
30000ed8:	e5d53000 	ldrb	r3, [r5]
30000edc:	e3530001 	cmp	r3, #1
30000ee0:	0a000039 	beq	30000fcc <event_set+0x128>
30000ee4:	eb001b43 	bl	30007bf8 <OS_CPU_SR_Save>
30000ee8:	e5d53000 	ldrb	r3, [r5]
30000eec:	e2433001 	sub	r3, r3, #1
30000ef0:	e5c53000 	strb	r3, [r5]
30000ef4:	eb001b47 	bl	30007c18 <OS_CPU_SR_Restore>
30000ef8:	e3a00036 	mov	r0, #54	; 0x36
		do_possible_sche();
	}
	
	return RAW_SUCCESS;

}
30000efc:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
30000f00:	e12fff1e 	bx	lr
	}

	event_head_ptr = &event_ptr->common_block_obj.block_list;

	/*if the set_option is AND_MASK, it just clear the flags and will return immediately!*/
	if (set_option & RAW_FLAGS_AND_MASK)  {
30000f04:	e2169002 	ands	r9, r6, #2
30000f08:	1a000032 	bne	30000fd8 <event_set+0x134>
	}
	
	/*if it is or mask then set the flag and continue.........*/
	else  {

		event_ptr->flags |= flags_to_set;    
30000f0c:	e5943010 	ldr	r3, [r4, #16]
	}

	iter = event_head_ptr->next;
30000f10:	e5946000 	ldr	r6, [r4]
	}
	
	/*if it is or mask then set the flag and continue.........*/
	else  {

		event_ptr->flags |= flags_to_set;    
30000f14:	e1877003 	orr	r7, r7, r3
	}

	iter = event_head_ptr->next;

	/*if list is not empty*/
 	while (iter != event_head_ptr) {
30000f18:	e1540006 	cmp	r4, r6
	}
	
	/*if it is or mask then set the flag and continue.........*/
	else  {

		event_ptr->flags |= flags_to_set;    
30000f1c:	e5847010 	str	r7, [r4, #16]
	}

	iter = event_head_ptr->next;

	/*if list is not empty*/
 	while (iter != event_head_ptr) {
30000f20:	0a00001a 	beq	30000f90 <event_set+0xec>
			(*(RAW_U32 *)(task_ptr->raw_additional_suspend_info)) = event_ptr->flags;
			
			/*Ok the task condition is met, just wake this task*/
			raw_wake_object(task_ptr);

			TRACE_EVENT_WAKE(raw_task_active, task_ptr);
30000f24:	e59f80f8 	ldr	r8, [pc, #248]	; 30001024 <event_set+0x180>
30000f28:	ea000006 	b	30000f48 <event_set+0xa4>
		task_ptr =  list_entry(iter, RAW_TASK_OBJ, task_list);
		iter_temp =  iter->next;
		
		if (task_ptr->raw_suspend_option & RAW_FLAGS_AND_MASK)  {

			if ((event_ptr->flags  & task_ptr ->raw_suspend_flags) == task_ptr ->raw_suspend_flags) {
30000f2c:	e59a3064 	ldr	r3, [sl, #100]	; 0x64
30000f30:	e0072003 	and	r2, r7, r3
30000f34:	e1530002 	cmp	r3, r2
30000f38:	0a00000a 	beq	30000f68 <event_set+0xc4>
	}

	iter = event_head_ptr->next;

	/*if list is not empty*/
 	while (iter != event_head_ptr) {
30000f3c:	e1540006 	cmp	r4, r6
30000f40:	0a000012 	beq	30000f90 <event_set+0xec>
30000f44:	e5947010 	ldr	r7, [r4, #16]

		task_ptr =  list_entry(iter, RAW_TASK_OBJ, task_list);
30000f48:	e246a004 	sub	sl, r6, #4
		iter_temp =  iter->next;
		
		if (task_ptr->raw_suspend_option & RAW_FLAGS_AND_MASK)  {
30000f4c:	e5da3060 	ldrb	r3, [sl, #96]	; 0x60

	/*if list is not empty*/
 	while (iter != event_head_ptr) {

		task_ptr =  list_entry(iter, RAW_TASK_OBJ, task_list);
		iter_temp =  iter->next;
30000f50:	e5966000 	ldr	r6, [r6]
		
		if (task_ptr->raw_suspend_option & RAW_FLAGS_AND_MASK)  {
30000f54:	e3130002 	tst	r3, #2
30000f58:	1afffff3 	bne	30000f2c <event_set+0x88>
		}

		
		else {

			if (event_ptr->flags  &  task_ptr ->raw_suspend_flags) {
30000f5c:	e59a3064 	ldr	r3, [sl, #100]	; 0x64
30000f60:	e1170003 	tst	r7, r3
30000f64:	0afffff4 	beq	30000f3c <event_set+0x98>
		}

		
		if (status) {

			(*(RAW_U32 *)(task_ptr->raw_additional_suspend_info)) = event_ptr->flags;
30000f68:	e59a3068 	ldr	r3, [sl, #104]	; 0x68
			
			/*Ok the task condition is met, just wake this task*/
			raw_wake_object(task_ptr);
30000f6c:	e1a0000a 	mov	r0, sl
		}

		
		if (status) {

			(*(RAW_U32 *)(task_ptr->raw_additional_suspend_info)) = event_ptr->flags;
30000f70:	e5837000 	str	r7, [r3]
			
			/*Ok the task condition is met, just wake this task*/
			raw_wake_object(task_ptr);
30000f74:	eb0005b8 	bl	3000265c <raw_wake_object>

			TRACE_EVENT_WAKE(raw_task_active, task_ptr);
30000f78:	e1a0100a 	mov	r1, sl
30000f7c:	e5980000 	ldr	r0, [r8]
30000f80:	eb001b0d 	bl	30007bbc <_trace_event_wake>
	}

	iter = event_head_ptr->next;

	/*if list is not empty*/
 	while (iter != event_head_ptr) {
30000f84:	e1540006 	cmp	r4, r6
			(*(RAW_U32 *)(task_ptr->raw_additional_suspend_info)) = event_ptr->flags;
			
			/*Ok the task condition is met, just wake this task*/
			raw_wake_object(task_ptr);

			TRACE_EVENT_WAKE(raw_task_active, task_ptr);
30000f88:	e3a09001 	mov	r9, #1
	}

	iter = event_head_ptr->next;

	/*if list is not empty*/
 	while (iter != event_head_ptr) {
30000f8c:	1affffec 	bne	30000f44 <event_set+0xa0>

		iter = iter_temp;

 	}

	RAW_CRITICAL_EXIT();
30000f90:	e5d53000 	ldrb	r3, [r5]
30000f94:	e59f4084 	ldr	r4, [pc, #132]	; 30001020 <event_set+0x17c>
30000f98:	e3530001 	cmp	r3, #1
30000f9c:	0a00001d 	beq	30001018 <event_set+0x174>
30000fa0:	eb001b14 	bl	30007bf8 <OS_CPU_SR_Save>
30000fa4:	e5d43000 	ldrb	r3, [r4]
30000fa8:	e2433001 	sub	r3, r3, #1
30000fac:	e5c43000 	strb	r3, [r4]
30000fb0:	eb001b18 	bl	30007c18 <OS_CPU_SR_Restore>

	if (need_sche) {
30000fb4:	e3590000 	cmp	r9, #0
30000fb8:	01a00009 	moveq	r0, r9
30000fbc:	0affffce 	beq	30000efc <event_set+0x58>
		
		do_possible_sche();
30000fc0:	eb000d33 	bl	30004494 <raw_sched>
30000fc4:	e3a00000 	mov	r0, #0
30000fc8:	eaffffcb 	b	30000efc <event_set+0x58>
	
	RAW_CRITICAL_ENTER();

	if (event_ptr->common_block_obj.object_type != RAW_EVENT_OBJ_TYPE) {

		RAW_CRITICAL_EXIT();
30000fcc:	eb001546 	bl	300064ec <hybrid_int_process>
30000fd0:	e3a00036 	mov	r0, #54	; 0x36
30000fd4:	eaffffc8 	b	30000efc <event_set+0x58>
	event_head_ptr = &event_ptr->common_block_obj.block_list;

	/*if the set_option is AND_MASK, it just clear the flags and will return immediately!*/
	if (set_option & RAW_FLAGS_AND_MASK)  {

		event_ptr->flags &= flags_to_set;
30000fd8:	e5942010 	ldr	r2, [r4, #16]

		RAW_CRITICAL_EXIT();
30000fdc:	e5d53000 	ldrb	r3, [r5]
	event_head_ptr = &event_ptr->common_block_obj.block_list;

	/*if the set_option is AND_MASK, it just clear the flags and will return immediately!*/
	if (set_option & RAW_FLAGS_AND_MASK)  {

		event_ptr->flags &= flags_to_set;
30000fe0:	e0027007 	and	r7, r2, r7

		RAW_CRITICAL_EXIT();
30000fe4:	e3530001 	cmp	r3, #1
	event_head_ptr = &event_ptr->common_block_obj.block_list;

	/*if the set_option is AND_MASK, it just clear the flags and will return immediately!*/
	if (set_option & RAW_FLAGS_AND_MASK)  {

		event_ptr->flags &= flags_to_set;
30000fe8:	e5847010 	str	r7, [r4, #16]

		RAW_CRITICAL_EXIT();
30000fec:	0a000006 	beq	3000100c <event_set+0x168>
30000ff0:	eb001b00 	bl	30007bf8 <OS_CPU_SR_Save>
30000ff4:	e5d53000 	ldrb	r3, [r5]
30000ff8:	e2433001 	sub	r3, r3, #1
30000ffc:	e5c53000 	strb	r3, [r5]
30001000:	eb001b04 	bl	30007c18 <OS_CPU_SR_Restore>
30001004:	e3a00000 	mov	r0, #0
30001008:	eaffffbb 	b	30000efc <event_set+0x58>
3000100c:	eb001536 	bl	300064ec <hybrid_int_process>
30001010:	e3a00000 	mov	r0, #0
30001014:	eaffffb8 	b	30000efc <event_set+0x58>

		iter = iter_temp;

 	}

	RAW_CRITICAL_EXIT();
30001018:	eb001533 	bl	300064ec <hybrid_int_process>
3000101c:	eaffffe4 	b	30000fb4 <event_set+0x110>
30001020:	300142c0 	andcc	r4, r1, r0, asr #5
30001024:	30013838 	andcc	r3, r1, r8, lsr r8

30001028 <raw_event_set>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_event_set(RAW_EVENT *event_ptr, RAW_U32 flags_to_set, RAW_U8 set_option)
{
30001028:	e92d4070 	push	{r4, r5, r6, lr}

	#if (RAW_EVENT_FUNCTION_CHECK > 0)

	if (event_ptr == 0) {
3000102c:	e2503000 	subs	r3, r0, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_event_set(RAW_EVENT *event_ptr, RAW_U32 flags_to_set, RAW_U8 set_option)
{
30001030:	e24dd008 	sub	sp, sp, #8
30001034:	e1a04001 	mov	r4, r1
30001038:	e1a0c002 	mov	ip, r2

	#if (RAW_EVENT_FUNCTION_CHECK > 0)

	if (event_ptr == 0) {
3000103c:	03a00025 	moveq	r0, #37	; 0x25
30001040:	0a000012 	beq	30001090 <raw_event_set+0x68>
		return RAW_NULL_OBJECT;
	}
	
	if ((set_option != RAW_AND) && (set_option != RAW_OR)) {
30001044:	e3520000 	cmp	r2, #0
30001048:	13520002 	cmpne	r2, #2
3000104c:	03a05000 	moveq	r5, #0
30001050:	13a05001 	movne	r5, #1
30001054:	13a0002f 	movne	r0, #47	; 0x2f
30001058:	1a00000c 	bne	30001090 <raw_event_set+0x68>
	#endif


	#if (CONFIG_RAW_ZERO_INTERRUPT > 0)
	
	if (raw_int_nesting) {
3000105c:	e59f6038 	ldr	r6, [pc, #56]	; 3000109c <raw_event_set+0x74>
30001060:	e5d66000 	ldrb	r6, [r6]
30001064:	e3560000 	cmp	r6, #0
30001068:	1a000002 	bne	30001078 <raw_event_set+0x50>
	
	#endif

	return event_set(event_ptr, flags_to_set, set_option);		
	 
}
3000106c:	e28dd008 	add	sp, sp, #8
30001070:	e8bd4070 	pop	{r4, r5, r6, lr}
		return int_msg_post(RAW_TYPE_EVENT, event_ptr, 0, 0u, flags_to_set, set_option);
	}
	
	#endif

	return event_set(event_ptr, flags_to_set, set_option);		
30001074:	eaffff8a 	b	30000ea4 <event_set>

	#if (CONFIG_RAW_ZERO_INTERRUPT > 0)
	
	if (raw_int_nesting) {
		
		return int_msg_post(RAW_TYPE_EVENT, event_ptr, 0, 0u, flags_to_set, set_option);
30001078:	e1a01003 	mov	r1, r3
3000107c:	e1a02005 	mov	r2, r5
30001080:	e3a0000b 	mov	r0, #11
30001084:	e1a03005 	mov	r3, r5
30001088:	e88d1010 	stm	sp, {r4, ip}
3000108c:	eb0015aa 	bl	3000673c <int_msg_post>
	
	#endif

	return event_set(event_ptr, flags_to_set, set_option);		
	 
}
30001090:	e28dd008 	add	sp, sp, #8
30001094:	e8bd4070 	pop	{r4, r5, r6, lr}
30001098:	e12fff1e 	bx	lr
3000109c:	30013e61 	andcc	r3, r1, r1, ror #28

300010a0 <raw_event_get>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_event_get(RAW_EVENT *event_ptr, RAW_U32 requested_flags, RAW_U8 get_option, RAW_U32 *actual_flags_ptr, RAW_TICK_TYPE wait_option)
{
300010a0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	RAW_U8 status;
	RAW_SR_ALLOC();

	#if (RAW_EVENT_FUNCTION_CHECK > 0)

	if (event_ptr == 0) {
300010a4:	e2505000 	subs	r5, r0, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_event_get(RAW_EVENT *event_ptr, RAW_U32 requested_flags, RAW_U8 get_option, RAW_U32 *actual_flags_ptr, RAW_TICK_TYPE wait_option)
{
300010a8:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
300010ac:	e1a06001 	mov	r6, r1
300010b0:	e1a04002 	mov	r4, r2
300010b4:	e1a0b003 	mov	fp, r3
	RAW_U8 status;
	RAW_SR_ALLOC();

	#if (RAW_EVENT_FUNCTION_CHECK > 0)

	if (event_ptr == 0) {
300010b8:	03a08025 	moveq	r8, #37	; 0x25
300010bc:	0a00001d 	beq	30001138 <raw_event_get+0x98>
		
		return RAW_NULL_OBJECT;
	}

	if (raw_int_nesting) {
300010c0:	e59f3234 	ldr	r3, [pc, #564]	; 300012fc <raw_event_get+0x25c>
300010c4:	e5d33000 	ldrb	r3, [r3]
300010c8:	e3530000 	cmp	r3, #0
300010cc:	13a08027 	movne	r8, #39	; 0x27
300010d0:	1a000018 	bne	30001138 <raw_event_get+0x98>

		return RAW_NOT_CALLED_BY_ISR;
		
	}

	if ((get_option  != RAW_AND) && (get_option  != RAW_OR) && (get_option  != RAW_AND_CLEAR) && (get_option  != RAW_OR_CLEAR)) {
300010d4:	e3520000 	cmp	r2, #0
300010d8:	13520002 	cmpne	r2, #2
300010dc:	0a000003 	beq	300010f0 <raw_event_get+0x50>
300010e0:	e3520001 	cmp	r2, #1
300010e4:	13520003 	cmpne	r2, #3
300010e8:	13a0802f 	movne	r8, #47	; 0x2f
300010ec:	1a000011 	bne	30001138 <raw_event_get+0x98>
	}
	
	#endif

	
	RAW_CRITICAL_ENTER();
300010f0:	e59f7208 	ldr	r7, [pc, #520]	; 30001300 <raw_event_get+0x260>
300010f4:	eb001abf 	bl	30007bf8 <OS_CPU_SR_Save>
300010f8:	e5d73000 	ldrb	r3, [r7]
300010fc:	e2833001 	add	r3, r3, #1
30001100:	e5c73000 	strb	r3, [r7]
30001104:	eb001ac3 	bl	30007c18 <OS_CPU_SR_Restore>

	if (event_ptr->common_block_obj.object_type != RAW_EVENT_OBJ_TYPE) {
30001108:	e5d5300d 	ldrb	r3, [r5, #13]
3000110c:	e3530019 	cmp	r3, #25
30001110:	0a00000e 	beq	30001150 <raw_event_get+0xb0>

		RAW_CRITICAL_EXIT();
30001114:	e5d73000 	ldrb	r3, [r7]
30001118:	e3530001 	cmp	r3, #1
3000111c:	0a000008 	beq	30001144 <raw_event_get+0xa4>
30001120:	eb001ab4 	bl	30007bf8 <OS_CPU_SR_Save>
30001124:	e5d73000 	ldrb	r3, [r7]
30001128:	e3a08036 	mov	r8, #54	; 0x36
3000112c:	e2433001 	sub	r3, r3, #1
30001130:	e5c73000 	strb	r3, [r7]
30001134:	eb001ab7 	bl	30007c18 <OS_CPU_SR_Restore>
	RAW_CRITICAL_EXIT();
	
	return RAW_SUCCESS;

	
}
30001138:	e1a00008 	mov	r0, r8
3000113c:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
30001140:	e12fff1e 	bx	lr
	
	RAW_CRITICAL_ENTER();

	if (event_ptr->common_block_obj.object_type != RAW_EVENT_OBJ_TYPE) {

		RAW_CRITICAL_EXIT();
30001144:	eb0014e8 	bl	300064ec <hybrid_int_process>
30001148:	e3a08036 	mov	r8, #54	; 0x36
3000114c:	eafffff9 	b	30001138 <raw_event_get+0x98>
		
		return RAW_ERROR_OBJECT_TYPE;
	}

	/*if option is and flag*/
	if (get_option & RAW_FLAGS_AND_MASK) {
30001150:	e3140002 	tst	r4, #2
30001154:	0a000010 	beq	3000119c <raw_event_get+0xfc>

		if ((event_ptr->flags & requested_flags) == requested_flags) {
30001158:	e5953010 	ldr	r3, [r5, #16]
3000115c:	e0062003 	and	r2, r6, r3
30001160:	e1520006 	cmp	r2, r6
30001164:	0a00000f 	beq	300011a8 <raw_event_get+0x108>
		
		return RAW_SUCCESS;
	}
		
	/*Cann't get event, and return immediately if wait_option is  RAW_NO_WAIT*/
	if (wait_option == RAW_NO_WAIT) { 
30001168:	e3580000 	cmp	r8, #0
3000116c:	1a000021 	bne	300011f8 <raw_event_get+0x158>
		RAW_CRITICAL_EXIT();
30001170:	e5d73000 	ldrb	r3, [r7]
30001174:	e59f4184 	ldr	r4, [pc, #388]	; 30001300 <raw_event_get+0x260>
30001178:	e3530001 	cmp	r3, #1
3000117c:	0a00002a 	beq	3000122c <raw_event_get+0x18c>
30001180:	eb001a9c 	bl	30007bf8 <OS_CPU_SR_Save>
30001184:	e5d43000 	ldrb	r3, [r4]
30001188:	e3a08006 	mov	r8, #6
3000118c:	e2433001 	sub	r3, r3, #1
30001190:	e5c43000 	strb	r3, [r4]
30001194:	eb001a9f 	bl	30007c18 <OS_CPU_SR_Restore>
30001198:	eaffffe6 	b	30001138 <raw_event_get+0x98>
	}
	
	/*if option is or flag*/
	else {

		if (event_ptr->flags & requested_flags) {
3000119c:	e5953010 	ldr	r3, [r5, #16]
300011a0:	e1160003 	tst	r6, r3
300011a4:	0affffef 	beq	30001168 <raw_event_get+0xc8>
	if (status) {

		*actual_flags_ptr = event_ptr->flags;
			
		/*does it need to clear the flags*/
		if (get_option & RAW_FLAGS_CLEAR_MASK) {
300011a8:	e3140001 	tst	r4, #1
		
	}
		
	if (status) {

		*actual_flags_ptr = event_ptr->flags;
300011ac:	e58b3000 	str	r3, [fp]
			
		/*does it need to clear the flags*/
		if (get_option & RAW_FLAGS_CLEAR_MASK) {
			
			event_ptr->flags &= ~requested_flags;
300011b0:	15953010 	ldrne	r3, [r5, #16]
300011b4:	11c36006 	bicne	r6, r3, r6
300011b8:	15856010 	strne	r6, [r5, #16]
		}

		RAW_CRITICAL_EXIT();
300011bc:	e5d73000 	ldrb	r3, [r7]
300011c0:	e59f4138 	ldr	r4, [pc, #312]	; 30001300 <raw_event_get+0x260>
300011c4:	e3530001 	cmp	r3, #1
300011c8:	0a000015 	beq	30001224 <raw_event_get+0x184>
300011cc:	eb001a89 	bl	30007bf8 <OS_CPU_SR_Save>
300011d0:	e5d43000 	ldrb	r3, [r4]
300011d4:	e2433001 	sub	r3, r3, #1
300011d8:	e5c43000 	strb	r3, [r4]
300011dc:	eb001a8d 	bl	30007c18 <OS_CPU_SR_Restore>

		TRACE_EVENT_GET(raw_task_active, event_ptr);
300011e0:	e59f311c 	ldr	r3, [pc, #284]	; 30001304 <raw_event_get+0x264>
300011e4:	e1a01005 	mov	r1, r5
300011e8:	e5930000 	ldr	r0, [r3]
300011ec:	eb001a70 	bl	30007bb4 <_trace_event_get>
300011f0:	e3a08000 	mov	r8, #0
		
		return RAW_SUCCESS;
300011f4:	eaffffcf 	b	30001138 <raw_event_get+0x98>
		RAW_CRITICAL_EXIT();
		return RAW_NO_PEND_WAIT;
	}   

	/*system is locked so task can not be blocked just return immediately*/
	SYSTEM_LOCK_PROCESS();
300011f8:	e5d73000 	ldrb	r3, [r7]
300011fc:	e59fa0fc 	ldr	sl, [pc, #252]	; 30001300 <raw_event_get+0x260>
30001200:	e3530001 	cmp	r3, #1
30001204:	9a00000b 	bls	30001238 <raw_event_get+0x198>
30001208:	eb001a7a 	bl	30007bf8 <OS_CPU_SR_Save>
3000120c:	e5da3000 	ldrb	r3, [sl]
30001210:	e3a08007 	mov	r8, #7
30001214:	e2433001 	sub	r3, r3, #1
30001218:	e5ca3000 	strb	r3, [sl]
3000121c:	eb001a7d 	bl	30007c18 <OS_CPU_SR_Restore>
30001220:	eaffffc4 	b	30001138 <raw_event_get+0x98>
		if (get_option & RAW_FLAGS_CLEAR_MASK) {
			
			event_ptr->flags &= ~requested_flags;
		}

		RAW_CRITICAL_EXIT();
30001224:	eb0014b0 	bl	300064ec <hybrid_int_process>
30001228:	eaffffec 	b	300011e0 <raw_event_get+0x140>
		return RAW_SUCCESS;
	}
		
	/*Cann't get event, and return immediately if wait_option is  RAW_NO_WAIT*/
	if (wait_option == RAW_NO_WAIT) { 
		RAW_CRITICAL_EXIT();
3000122c:	eb0014ae 	bl	300064ec <hybrid_int_process>
30001230:	e3a08006 	mov	r8, #6
30001234:	eaffffbf 	b	30001138 <raw_event_get+0x98>

	/*system is locked so task can not be blocked just return immediately*/
	SYSTEM_LOCK_PROCESS();

	/*Remember the passed information*/
	raw_task_active->raw_suspend_option =  get_option;
30001238:	e59f90c4 	ldr	r9, [pc, #196]	; 30001304 <raw_event_get+0x264>
	raw_task_active->raw_suspend_flags = requested_flags;
	raw_task_active->raw_additional_suspend_info = actual_flags_ptr;
		
	raw_pend_object((RAW_COMMON_BLOCK_OBJECT  *)event_ptr, raw_task_active, wait_option);
3000123c:	e1a00005 	mov	r0, r5

	/*system is locked so task can not be blocked just return immediately*/
	SYSTEM_LOCK_PROCESS();

	/*Remember the passed information*/
	raw_task_active->raw_suspend_option =  get_option;
30001240:	e5991000 	ldr	r1, [r9]
	raw_task_active->raw_suspend_flags = requested_flags;
	raw_task_active->raw_additional_suspend_info = actual_flags_ptr;
		
	raw_pend_object((RAW_COMMON_BLOCK_OBJECT  *)event_ptr, raw_task_active, wait_option);
30001244:	e1a02008 	mov	r2, r8
	SYSTEM_LOCK_PROCESS();

	/*Remember the passed information*/
	raw_task_active->raw_suspend_option =  get_option;
	raw_task_active->raw_suspend_flags = requested_flags;
	raw_task_active->raw_additional_suspend_info = actual_flags_ptr;
30001248:	e581b068 	str	fp, [r1, #104]	; 0x68

	/*system is locked so task can not be blocked just return immediately*/
	SYSTEM_LOCK_PROCESS();

	/*Remember the passed information*/
	raw_task_active->raw_suspend_option =  get_option;
3000124c:	e5c14060 	strb	r4, [r1, #96]	; 0x60
	raw_task_active->raw_suspend_flags = requested_flags;
30001250:	e5816064 	str	r6, [r1, #100]	; 0x64
	raw_task_active->raw_additional_suspend_info = actual_flags_ptr;
		
	raw_pend_object((RAW_COMMON_BLOCK_OBJECT  *)event_ptr, raw_task_active, wait_option);
30001254:	eb000521 	bl	300026e0 <raw_pend_object>
	RAW_CRITICAL_EXIT();
30001258:	e5da3000 	ldrb	r3, [sl]
3000125c:	e3530001 	cmp	r3, #1
30001260:	0a000021 	beq	300012ec <raw_event_get+0x24c>
30001264:	eb001a63 	bl	30007bf8 <OS_CPU_SR_Save>
30001268:	e5da3000 	ldrb	r3, [sl]
3000126c:	e2433001 	sub	r3, r3, #1
30001270:	e5ca3000 	strb	r3, [sl]
30001274:	eb001a67 	bl	30007c18 <OS_CPU_SR_Restore>

	TRACE_EVENT_GET_BLOCK(raw_task_active, event_ptr, wait_option);
30001278:	e1a02008 	mov	r2, r8
3000127c:	e5990000 	ldr	r0, [r9]
30001280:	e1a01005 	mov	r1, r5
30001284:	eb001a4b 	bl	30007bb8 <_trace_event_get_block>
	
	raw_sched(); 
30001288:	eb000c81 	bl	30004494 <raw_sched>

	/*So the task is waked up, need know which reason cause wake up.*/
	error_status = block_state_post_process(raw_task_active, 0);
3000128c:	e5990000 	ldr	r0, [r9]
30001290:	e3a01000 	mov	r1, #0
30001294:	eb000e7e 	bl	30004c94 <block_state_post_process>

	/*if it is not successed then we do not need to clear the flags just return the error status*/ 
	if (error_status != RAW_SUCCESS) {
30001298:	e2508000 	subs	r8, r0, #0
3000129c:	1affffa5 	bne	30001138 <raw_event_get+0x98>

		return error_status;
	}

	RAW_CRITICAL_ENTER();
300012a0:	eb001a54 	bl	30007bf8 <OS_CPU_SR_Save>
300012a4:	e5d73000 	ldrb	r3, [r7]
300012a8:	e2833001 	add	r3, r3, #1
300012ac:	e5c73000 	strb	r3, [r7]
300012b0:	eb001a58 	bl	30007c18 <OS_CPU_SR_Restore>

	/*does it need to clear the flags*/
	if (get_option & RAW_FLAGS_CLEAR_MASK) {
300012b4:	e3140001 	tst	r4, #1
		
		event_ptr->flags &= ~requested_flags;
300012b8:	15953010 	ldrne	r3, [r5, #16]
	}

	RAW_CRITICAL_EXIT();
300012bc:	e59f403c 	ldr	r4, [pc, #60]	; 30001300 <raw_event_get+0x260>
	RAW_CRITICAL_ENTER();

	/*does it need to clear the flags*/
	if (get_option & RAW_FLAGS_CLEAR_MASK) {
		
		event_ptr->flags &= ~requested_flags;
300012c0:	11c36006 	bicne	r6, r3, r6
300012c4:	15856010 	strne	r6, [r5, #16]
	}

	RAW_CRITICAL_EXIT();
300012c8:	e5d73000 	ldrb	r3, [r7]
300012cc:	e3530001 	cmp	r3, #1
300012d0:	0a000007 	beq	300012f4 <raw_event_get+0x254>
300012d4:	eb001a47 	bl	30007bf8 <OS_CPU_SR_Save>
300012d8:	e5d43000 	ldrb	r3, [r4]
300012dc:	e2433001 	sub	r3, r3, #1
300012e0:	e5c43000 	strb	r3, [r4]
300012e4:	eb001a4b 	bl	30007c18 <OS_CPU_SR_Restore>
300012e8:	eaffff92 	b	30001138 <raw_event_get+0x98>
	raw_task_active->raw_suspend_option =  get_option;
	raw_task_active->raw_suspend_flags = requested_flags;
	raw_task_active->raw_additional_suspend_info = actual_flags_ptr;
		
	raw_pend_object((RAW_COMMON_BLOCK_OBJECT  *)event_ptr, raw_task_active, wait_option);
	RAW_CRITICAL_EXIT();
300012ec:	eb00147e 	bl	300064ec <hybrid_int_process>
300012f0:	eaffffe0 	b	30001278 <raw_event_get+0x1d8>
	if (get_option & RAW_FLAGS_CLEAR_MASK) {
		
		event_ptr->flags &= ~requested_flags;
	}

	RAW_CRITICAL_EXIT();
300012f4:	eb00147c 	bl	300064ec <hybrid_int_process>
300012f8:	eaffff8e 	b	30001138 <raw_event_get+0x98>
300012fc:	30013e61 	andcc	r3, r1, r1, ror #28
30001300:	300142c0 	andcc	r4, r1, r0, asr #5
30001304:	30013838 	andcc	r3, r1, r8, lsr r8

30001308 <raw_event_create>:
RAW_U16 raw_event_create(RAW_EVENT *event_ptr, RAW_U8 *name_ptr, RAW_U32 flags_init)
{
	
	#if (RAW_EVENT_FUNCTION_CHECK > 0)
	
	if (event_ptr == 0) {
30001308:	e250c000 	subs	ip, r0, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_event_create(RAW_EVENT *event_ptr, RAW_U8 *name_ptr, RAW_U32 flags_init)
{
3000130c:	e92d4070 	push	{r4, r5, r6, lr}
30001310:	e1a03002 	mov	r3, r2
30001314:	e1a05001 	mov	r5, r1
	
	#if (RAW_EVENT_FUNCTION_CHECK > 0)
	
	if (event_ptr == 0) {
30001318:	03a00025 	moveq	r0, #37	; 0x25
3000131c:	0a00000d 	beq	30001358 <raw_event_create+0x50>
	/*Init the list*/
	list_init(&event_ptr->common_block_obj.block_list);
	event_ptr->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
	event_ptr->common_block_obj.name = name_ptr;  
	event_ptr->flags = flags_init;
	event_ptr->common_block_obj.object_type = RAW_EVENT_OBJ_TYPE;
30001320:	e3a02019 	mov	r2, #25
30001324:	e5cc200d 	strb	r2, [ip, #13]
	
	#endif

	/*Init the list*/
	list_init(&event_ptr->common_block_obj.block_list);
	event_ptr->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
30001328:	e3a04000 	mov	r4, #0
	event_ptr->common_block_obj.name = name_ptr;  
	event_ptr->flags = flags_init;
	event_ptr->common_block_obj.object_type = RAW_EVENT_OBJ_TYPE;

	TRACE_EVENT_CREATE(raw_task_active, event_ptr, name_ptr, flags_init);
3000132c:	e59f202c 	ldr	r2, [pc, #44]	; 30001360 <raw_event_create+0x58>
	
	#endif

	/*Init the list*/
	list_init(&event_ptr->common_block_obj.block_list);
	event_ptr->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
30001330:	e5cc400c 	strb	r4, [ip, #12]
	event_ptr->common_block_obj.name = name_ptr;  
	event_ptr->flags = flags_init;
	event_ptr->common_block_obj.object_type = RAW_EVENT_OBJ_TYPE;

	TRACE_EVENT_CREATE(raw_task_active, event_ptr, name_ptr, flags_init);
30001334:	e5920000 	ldr	r0, [r2]
	#endif

	/*Init the list*/
	list_init(&event_ptr->common_block_obj.block_list);
	event_ptr->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
	event_ptr->common_block_obj.name = name_ptr;  
30001338:	e58c1008 	str	r1, [ip, #8]
/*
 * List initialization
 */
RAW_INLINE void list_init(LIST *list_head)
{
	list_head->next = list_head;
3000133c:	e58cc000 	str	ip, [ip]
	list_head->previous = list_head;
30001340:	e58cc004 	str	ip, [ip, #4]
	event_ptr->flags = flags_init;
30001344:	e58c3010 	str	r3, [ip, #16]
	event_ptr->common_block_obj.object_type = RAW_EVENT_OBJ_TYPE;

	TRACE_EVENT_CREATE(raw_task_active, event_ptr, name_ptr, flags_init);
30001348:	e1a0100c 	mov	r1, ip
3000134c:	e1a02005 	mov	r2, r5
30001350:	eb001a16 	bl	30007bb0 <_trace_event_create>
30001354:	e1a00004 	mov	r0, r4
		
	return RAW_SUCCESS;
}
30001358:	e8bd4070 	pop	{r4, r5, r6, lr}
3000135c:	e12fff1e 	bx	lr
30001360:	30013838 	andcc	r3, r1, r8, lsr r8

30001364 <raw_idle_task>:

#if (CONFIG_RAW_SYSTEM_PREEMPTABLE > 0)

#if (RAW_SYSTEM_CHECK > 0)
RAW_VOID raw_idle_task(void *p_arg)
{
30001364:	e92d4070 	push	{r4, r5, r6, lr}
	RAW_U32 free_stack;
	
	RAW_SR_ALLOC();
	p_arg = p_arg;                                          /* Make compiler happy ^_^ */
	
	iter = system_debug.task_head.next;
30001368:	e59f6058 	ldr	r6, [pc, #88]	; 300013c8 <raw_idle_task+0x64>
3000136c:	e5965000 	ldr	r5, [r6]
	
	while (1) {	
		
		free_stack = 0u;
		task_ptr = list_entry(iter,RAW_TASK_OBJ, stack_check_list);
30001370:	e2454020 	sub	r4, r5, #32

		#if (RAW_CPU_STACK_DOWN > 0)
		
		task_stack = task_ptr->task_stack_base;  
30001374:	e594102c 	ldr	r1, [r4, #44]	; 0x2c
30001378:	e3a03000 	mov	r3, #0

		/*if no more freespace then break*/
		while (*task_stack++ == 0u) {                         
3000137c:	e7912103 	ldr	r2, [r1, r3, lsl #2]
			free_stack++;
30001380:	e2833001 	add	r3, r3, #1
		#if (RAW_CPU_STACK_DOWN > 0)
		
		task_stack = task_ptr->task_stack_base;  

		/*if no more freespace then break*/
		while (*task_stack++ == 0u) {                         
30001384:	e3520000 	cmp	r2, #0
30001388:	1a000002 	bne	30001398 <raw_idle_task+0x34>
			free_stack++;

			/*if task free stack space is big than 12% ,then break because we have enougf stack space*/
			if (free_stack > (task_ptr->stack_size >> 3)) {
3000138c:	e5942028 	ldr	r2, [r4, #40]	; 0x28
30001390:	e15301a2 	cmp	r3, r2, lsr #3
30001394:	9afffff8 	bls	3000137c <raw_idle_task+0x18>
			}
		}
		
		#endif
		
		TRACE_TASK_STACK_SPACE(task_ptr);
30001398:	e1a00004 	mov	r0, r4
3000139c:	eb0019ff 	bl	30007ba0 <_trace_task_stack_space>
		
		RAW_CPU_DISABLE();
300013a0:	eb001a14 	bl	30007bf8 <OS_CPU_SR_Save>
		/*if task is still on the stack check list*/
		if (task_ptr->task_state != RAW_DELETED) {
300013a4:	e5d43050 	ldrb	r3, [r4, #80]	; 0x50
300013a8:	e3530008 	cmp	r3, #8
		}

		/*if task is deleted, then move to next*/
		else {

			iter = system_debug.after_delete_list;
300013ac:	05965008 	ldreq	r5, [r6, #8]
		
		TRACE_TASK_STACK_SPACE(task_ptr);
		
		RAW_CPU_DISABLE();
		/*if task is still on the stack check list*/
		if (task_ptr->task_state != RAW_DELETED) {
300013b0:	0a000002 	beq	300013c0 <raw_idle_task+0x5c>
			if (free_stack < (task_ptr->stack_size >> 3)) {

				RAW_ASSERT(0);
			}

			iter = iter->next;
300013b4:	e5955000 	ldr	r5, [r5]

			/*if meet task head then skip it*/
			if (iter == (&(system_debug.task_head))) {
300013b8:	e1550006 	cmp	r5, r6
				iter = system_debug.task_head.next;
300013bc:	05955000 	ldreq	r5, [r5]
		else {

			iter = system_debug.after_delete_list;
		}
		
		RAW_CPU_ENABLE();
300013c0:	eb001a14 	bl	30007c18 <OS_CPU_SR_Restore>
	 		
	}
300013c4:	eaffffe9 	b	30001370 <raw_idle_task+0xc>
300013c8:	30012fb4 	undefined instruction 0x30012fb4

300013cc <raw_mq_init>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_mq_init(RAW_MQUEUE *mqueue, RAW_U8 *name_ptr, USER_MALLOC malloc_fun, USER_FREE free_fun, RAW_VOID **msg_start, RAW_U32 msg_size)
{
300013cc:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)

	/*Init the list*/
	list_init(&mqueue->common_block_obj.block_list);
	mqueue->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
	mqueue->common_block_obj.name = name_ptr; 
	mqueue->common_block_obj.object_type = RAW_MQUEUE_OBJ_TYPE;
300013d0:	e3a0401c 	mov	r4, #28
300013d4:	e5c0400d 	strb	r4, [r0, #13]
*/
RAW_U16 raw_mq_init(RAW_MQUEUE *mqueue, RAW_U8 *name_ptr, USER_MALLOC malloc_fun, USER_FREE free_fun, RAW_VOID **msg_start, RAW_U32 msg_size)
{

	mqueue->malloc_fun = malloc_fun;
	mqueue->free_fun = free_fun;
300013d8:	e5803024 	str	r3, [r0, #36]	; 0x24
	mqueue->messages = msg_start;
300013dc:	e59d3004 	ldr	r3, [sp, #4]
	mqueue->mq_maxmsg = msg_size;
	
	mqueue->mq_curmsgs = 0u;
300013e0:	e3a0c000 	mov	ip, #0
RAW_U16 raw_mq_init(RAW_MQUEUE *mqueue, RAW_U8 *name_ptr, USER_MALLOC malloc_fun, USER_FREE free_fun, RAW_VOID **msg_start, RAW_U32 msg_size)
{

	mqueue->malloc_fun = malloc_fun;
	mqueue->free_fun = free_fun;
	mqueue->messages = msg_start;
300013e4:	e580301c 	str	r3, [r0, #28]
	mqueue->mq_maxmsg = msg_size;
300013e8:	e59d3008 	ldr	r3, [sp, #8]
************************************************************************************************************************
*/
RAW_U16 raw_mq_init(RAW_MQUEUE *mqueue, RAW_U8 *name_ptr, USER_MALLOC malloc_fun, USER_FREE free_fun, RAW_VOID **msg_start, RAW_U32 msg_size)
{

	mqueue->malloc_fun = malloc_fun;
300013ec:	e5802020 	str	r2, [r0, #32]
	mqueue->free_fun = free_fun;
	mqueue->messages = msg_start;
	mqueue->mq_maxmsg = msg_size;
300013f0:	e5803018 	str	r3, [r0, #24]
	mqueue->peak_numbers = 0u;

	/*Init the list*/
	list_init(&mqueue->common_block_obj.block_list);
	mqueue->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
	mqueue->common_block_obj.name = name_ptr; 
300013f4:	e5801008 	str	r1, [r0, #8]
	mqueue->malloc_fun = malloc_fun;
	mqueue->free_fun = free_fun;
	mqueue->messages = msg_start;
	mqueue->mq_maxmsg = msg_size;
	
	mqueue->mq_curmsgs = 0u;
300013f8:	e580c010 	str	ip, [r0, #16]
	mqueue->peak_numbers = 0u;
300013fc:	e580c014 	str	ip, [r0, #20]
/*
 * List initialization
 */
RAW_INLINE void list_init(LIST *list_head)
{
	list_head->next = list_head;
30001400:	e5800000 	str	r0, [r0]
	list_head->previous = list_head;
30001404:	e5800004 	str	r0, [r0, #4]

	/*Init the list*/
	list_init(&mqueue->common_block_obj.block_list);
	mqueue->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
30001408:	e5c0c00c 	strb	ip, [r0, #12]
	mqueue->common_block_obj.name = name_ptr; 
	mqueue->common_block_obj.object_type = RAW_MQUEUE_OBJ_TYPE;
	return RAW_SUCCESS;
}
3000140c:	e1a0000c 	mov	r0, ip
30001410:	e8bd0010 	pop	{r4}
30001414:	e12fff1e 	bx	lr

30001418 <raw_mqueue_get_information>:
*             
************************************************************************************************************************
*/
#if (CONFIG_RAW_MQUEUE_GET_INFORMATION > 0)
RAW_U16 raw_mqueue_get_information(RAW_MQUEUE *p_q, RAW_U32 *queue_peak_msg_size, RAW_U32 *mq_curmsgs, RAW_U32 *mq_maxmsg)
{
30001418:	e92d4010 	push	{r4, lr}

	RAW_SR_ALLOC();
	
	#if (RAW_MQUEUE_FUNCTION_CHECK > 0)

	if (p_q == 0)  {
3000141c:	e2504000 	subs	r4, r0, #0
*             
************************************************************************************************************************
*/
#if (CONFIG_RAW_MQUEUE_GET_INFORMATION > 0)
RAW_U16 raw_mqueue_get_information(RAW_MQUEUE *p_q, RAW_U32 *queue_peak_msg_size, RAW_U32 *mq_curmsgs, RAW_U32 *mq_maxmsg)
{
30001420:	e24dd010 	sub	sp, sp, #16

	RAW_SR_ALLOC();
	
	#if (RAW_MQUEUE_FUNCTION_CHECK > 0)

	if (p_q == 0)  {
30001424:	03a00025 	moveq	r0, #37	; 0x25
30001428:	0a000003 	beq	3000143c <raw_mqueue_get_information+0x24>
	
	#endif


	
	if (p_q->common_block_obj.object_type !=  RAW_MQUEUE_OBJ_TYPE) {
3000142c:	e5d4000d 	ldrb	r0, [r4, #13]
30001430:	e350001c 	cmp	r0, #28
30001434:	13a00036 	movne	r0, #54	; 0x36
30001438:	0a000002 	beq	30001448 <raw_mqueue_get_information+0x30>
	
	RAW_CPU_ENABLE();

	return RAW_SUCCESS;

}
3000143c:	e28dd010 	add	sp, sp, #16
30001440:	e8bd4010 	pop	{r4, lr}
30001444:	e12fff1e 	bx	lr
	if (p_q->common_block_obj.object_type !=  RAW_MQUEUE_OBJ_TYPE) {

		return RAW_ERROR_OBJECT_TYPE;
	}
	
	RAW_CPU_DISABLE();
30001448:	e58d100c 	str	r1, [sp, #12]
3000144c:	e58d2008 	str	r2, [sp, #8]
30001450:	e58d3004 	str	r3, [sp, #4]
30001454:	eb0019e7 	bl	30007bf8 <OS_CPU_SR_Save>
	
	*mq_curmsgs = p_q->mq_curmsgs;
30001458:	e594c010 	ldr	ip, [r4, #16]
3000145c:	e59d2008 	ldr	r2, [sp, #8]
	*mq_maxmsg = p_q->mq_maxmsg;
30001460:	e59d3004 	ldr	r3, [sp, #4]
		return RAW_ERROR_OBJECT_TYPE;
	}
	
	RAW_CPU_DISABLE();
	
	*mq_curmsgs = p_q->mq_curmsgs;
30001464:	e582c000 	str	ip, [r2]
	*mq_maxmsg = p_q->mq_maxmsg;
30001468:	e5942018 	ldr	r2, [r4, #24]
	*queue_peak_msg_size = p_q->peak_numbers;
3000146c:	e59d100c 	ldr	r1, [sp, #12]
	}
	
	RAW_CPU_DISABLE();
	
	*mq_curmsgs = p_q->mq_curmsgs;
	*mq_maxmsg = p_q->mq_maxmsg;
30001470:	e5832000 	str	r2, [r3]
	*queue_peak_msg_size = p_q->peak_numbers;
30001474:	e5943014 	ldr	r3, [r4, #20]
30001478:	e5813000 	str	r3, [r1]
	
	RAW_CPU_ENABLE();
3000147c:	eb0019e5 	bl	30007c18 <OS_CPU_SR_Restore>
30001480:	e3a00000 	mov	r0, #0

	return RAW_SUCCESS;
30001484:	eaffffec 	b	3000143c <raw_mqueue_get_information+0x24>

30001488 <raw_mqueue_flush>:
************************************************************************************************************************
*/
#if (CONFIG_RAW_MQUEUE_FLUSH > 0)

RAW_U16 raw_mqueue_flush(RAW_MQUEUE  *p_q)
{
30001488:	e92d4070 	push	{r4, r5, r6, lr}

	RAW_SR_ALLOC();
	
	#if (RAW_MQUEUE_FUNCTION_CHECK > 0)

	if (p_q == 0) {
3000148c:	e2505000 	subs	r5, r0, #0
30001490:	03a00025 	moveq	r0, #37	; 0x25
30001494:	0a000008 	beq	300014bc <raw_mqueue_flush+0x34>
		return RAW_NULL_OBJECT;
	}
	
	#endif

	if (raw_int_nesting) {
30001498:	e59f3074 	ldr	r3, [pc, #116]	; 30001514 <raw_mqueue_flush+0x8c>
3000149c:	e5d34000 	ldrb	r4, [r3]
300014a0:	e3540000 	cmp	r4, #0
300014a4:	13a00027 	movne	r0, #39	; 0x27
300014a8:	1a000003 	bne	300014bc <raw_mqueue_flush+0x34>

		return RAW_NOT_CALLED_BY_ISR;	
	}

	if (p_q->common_block_obj.object_type !=  RAW_MQUEUE_OBJ_TYPE) {
300014ac:	e5d5300d 	ldrb	r3, [r5, #13]
300014b0:	e353001c 	cmp	r3, #28
300014b4:	13a00036 	movne	r0, #54	; 0x36
300014b8:	0a000001 	beq	300014c4 <raw_mqueue_flush+0x3c>
	RAW_CRITICAL_ENTER();
	p_q->mq_curmsgs = 0u;
	RAW_CRITICAL_EXIT(); 
	
	return RAW_SUCCESS;
}
300014bc:	e8bd4070 	pop	{r4, r5, r6, lr}
300014c0:	e12fff1e 	bx	lr
	if (p_q->common_block_obj.object_type !=  RAW_MQUEUE_OBJ_TYPE) {

		return RAW_ERROR_OBJECT_TYPE;
	}
	
	RAW_CRITICAL_ENTER();
300014c4:	e59f604c 	ldr	r6, [pc, #76]	; 30001518 <raw_mqueue_flush+0x90>
300014c8:	eb0019ca 	bl	30007bf8 <OS_CPU_SR_Save>
300014cc:	e5d63000 	ldrb	r3, [r6]
300014d0:	e2833001 	add	r3, r3, #1
300014d4:	e5c63000 	strb	r3, [r6]
300014d8:	eb0019ce 	bl	30007c18 <OS_CPU_SR_Restore>
	p_q->mq_curmsgs = 0u;
	RAW_CRITICAL_EXIT(); 
300014dc:	e5d63000 	ldrb	r3, [r6]

		return RAW_ERROR_OBJECT_TYPE;
	}
	
	RAW_CRITICAL_ENTER();
	p_q->mq_curmsgs = 0u;
300014e0:	e5854010 	str	r4, [r5, #16]
	RAW_CRITICAL_EXIT(); 
300014e4:	e3530001 	cmp	r3, #1
300014e8:	0a000006 	beq	30001508 <raw_mqueue_flush+0x80>
300014ec:	eb0019c1 	bl	30007bf8 <OS_CPU_SR_Save>
300014f0:	e5d63000 	ldrb	r3, [r6]
300014f4:	e2433001 	sub	r3, r3, #1
300014f8:	e5c63000 	strb	r3, [r6]
300014fc:	eb0019c5 	bl	30007c18 <OS_CPU_SR_Restore>
30001500:	e1a00004 	mov	r0, r4
30001504:	eaffffec 	b	300014bc <raw_mqueue_flush+0x34>
30001508:	eb0013f7 	bl	300064ec <hybrid_int_process>
3000150c:	e1a00004 	mov	r0, r4
30001510:	eaffffe9 	b	300014bc <raw_mqueue_flush+0x34>
30001514:	30013e61 	andcc	r3, r1, r1, ror #28
30001518:	300142c0 	andcc	r4, r1, r0, asr #5

3000151c <raw_mqueue_delete>:
*             
************************************************************************************************************************
*/
#if (CONFIG_RAW_MQUEUE_DELETE > 0)
RAW_U16 raw_mqueue_delete(RAW_MQUEUE *p_q)
{
3000151c:	e92d4070 	push	{r4, r5, r6, lr}
	
	RAW_SR_ALLOC();

	#if (RAW_MQUEUE_FUNCTION_CHECK > 0)

	if (p_q == 0) {
30001520:	e2504000 	subs	r4, r0, #0
30001524:	03a00025 	moveq	r0, #37	; 0x25
30001528:	0a000008 	beq	30001550 <raw_mqueue_delete+0x34>
		return RAW_NULL_OBJECT;
	}
	
	#endif

	if (raw_int_nesting) {
3000152c:	e59f3098 	ldr	r3, [pc, #152]	; 300015cc <raw_mqueue_delete+0xb0>
30001530:	e5d35000 	ldrb	r5, [r3]
30001534:	e3550000 	cmp	r5, #0
30001538:	13a00027 	movne	r0, #39	; 0x27
3000153c:	1a000003 	bne	30001550 <raw_mqueue_delete+0x34>

		return RAW_NOT_CALLED_BY_ISR;	
	}

	if (p_q->common_block_obj.object_type !=  RAW_MQUEUE_OBJ_TYPE) {
30001540:	e5d4300d 	ldrb	r3, [r4, #13]
30001544:	e353001c 	cmp	r3, #28
30001548:	13a00036 	movne	r0, #54	; 0x36
3000154c:	0a000001 	beq	30001558 <raw_mqueue_delete+0x3c>

	do_possible_sche(); 
	
	return RAW_SUCCESS;
	
}
30001550:	e8bd4070 	pop	{r4, r5, r6, lr}
30001554:	e12fff1e 	bx	lr
	}
	

	block_list_head = &p_q->common_block_obj.block_list;
	
	RAW_CRITICAL_ENTER();
30001558:	e59f6070 	ldr	r6, [pc, #112]	; 300015d0 <raw_mqueue_delete+0xb4>
3000155c:	eb0019a5 	bl	30007bf8 <OS_CPU_SR_Save>
30001560:	e5d63000 	ldrb	r3, [r6]
30001564:	e2833001 	add	r3, r3, #1
30001568:	e5c63000 	strb	r3, [r6]
3000156c:	eb0019a9 	bl	30007c18 <OS_CPU_SR_Restore>
 * return TRUE if the list is empty
 */
RAW_INLINE RAW_BOOLEAN is_list_empty(LIST *list)
{

	return (list->next == list);	
30001570:	e5940000 	ldr	r0, [r4]

	p_q->common_block_obj.object_type = 0u;
30001574:	e5c4500d 	strb	r5, [r4, #13]
	
	/*All task blocked on this queue is waken up*/
	while (!is_list_empty(block_list_head))  {
30001578:	e1540000 	cmp	r4, r0
3000157c:	0a000004 	beq	30001594 <raw_mqueue_delete+0x78>
		delete_pend_obj(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list));	
30001580:	e2400004 	sub	r0, r0, #4
30001584:	eb0003e6 	bl	30002524 <delete_pend_obj>
30001588:	e5940000 	ldr	r0, [r4]
	RAW_CRITICAL_ENTER();

	p_q->common_block_obj.object_type = 0u;
	
	/*All task blocked on this queue is waken up*/
	while (!is_list_empty(block_list_head))  {
3000158c:	e1540000 	cmp	r4, r0
30001590:	1afffffa 	bne	30001580 <raw_mqueue_delete+0x64>
		delete_pend_obj(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list));	
	}                             
	
	RAW_CRITICAL_EXIT();
30001594:	e5d63000 	ldrb	r3, [r6]
30001598:	e59f4030 	ldr	r4, [pc, #48]	; 300015d0 <raw_mqueue_delete+0xb4>
3000159c:	e3530001 	cmp	r3, #1
300015a0:	0a000007 	beq	300015c4 <raw_mqueue_delete+0xa8>
300015a4:	eb001993 	bl	30007bf8 <OS_CPU_SR_Save>
300015a8:	e5d43000 	ldrb	r3, [r4]
300015ac:	e2433001 	sub	r3, r3, #1
300015b0:	e5c43000 	strb	r3, [r4]
300015b4:	eb001997 	bl	30007c18 <OS_CPU_SR_Restore>

	do_possible_sche(); 
300015b8:	eb000bb5 	bl	30004494 <raw_sched>
300015bc:	e3a00000 	mov	r0, #0
	
	return RAW_SUCCESS;
300015c0:	eaffffe2 	b	30001550 <raw_mqueue_delete+0x34>
	/*All task blocked on this queue is waken up*/
	while (!is_list_empty(block_list_head))  {
		delete_pend_obj(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list));	
	}                             
	
	RAW_CRITICAL_EXIT();
300015c4:	eb0013c8 	bl	300064ec <hybrid_int_process>
300015c8:	eafffffa 	b	300015b8 <raw_mqueue_delete+0x9c>
300015cc:	30013e61 	andcc	r3, r1, r1, ror #28
300015d0:	300142c0 	andcc	r4, r1, r0, asr #5

300015d4 <raw_mq_receive>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_mq_receive (RAW_MQUEUE *p_q,  RAW_VOID **p_void, RAW_U32 *msg_len, RAW_U32 *msg_prio, RAW_TICK_TYPE wait_option)
{
300015d4:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
	
	RAW_SR_ALLOC();

	#if (RAW_MQUEUE_FUNCTION_CHECK > 0)

	if (p_q == 0) {
300015d8:	e2505000 	subs	r5, r0, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_mq_receive (RAW_MQUEUE *p_q,  RAW_VOID **p_void, RAW_U32 *msg_len, RAW_U32 *msg_prio, RAW_TICK_TYPE wait_option)
{
300015dc:	e24dd00c 	sub	sp, sp, #12
300015e0:	e1a04001 	mov	r4, r1
300015e4:	e1a06002 	mov	r6, r2
300015e8:	e59da028 	ldr	sl, [sp, #40]	; 0x28
	
	RAW_SR_ALLOC();

	#if (RAW_MQUEUE_FUNCTION_CHECK > 0)

	if (p_q == 0) {
300015ec:	03a07025 	moveq	r7, #37	; 0x25
300015f0:	0a00000b 	beq	30001624 <raw_mq_receive+0x50>
		
		return RAW_NULL_OBJECT;
	}

	
	if (p_void == 0) {
300015f4:	e3510000 	cmp	r1, #0
300015f8:	03a07023 	moveq	r7, #35	; 0x23
300015fc:	0a000008 	beq	30001624 <raw_mq_receive+0x50>
		return RAW_NULL_POINTER;
	}
	
	#endif

	if (raw_int_nesting) {
30001600:	e59f21a4 	ldr	r2, [pc, #420]	; 300017ac <raw_mq_receive+0x1d8>
30001604:	e5d27000 	ldrb	r7, [r2]
30001608:	e3570000 	cmp	r7, #0
3000160c:	13a07027 	movne	r7, #39	; 0x27
30001610:	1a000003 	bne	30001624 <raw_mq_receive+0x50>

		return RAW_NOT_CALLED_BY_ISR;	
	}

	if (p_q->common_block_obj.object_type !=  RAW_MQUEUE_OBJ_TYPE) {
30001614:	e5d5200d 	ldrb	r2, [r5, #13]
30001618:	e352001c 	cmp	r2, #28
3000161c:	13a07036 	movne	r7, #54	; 0x36
30001620:	0a000003 	beq	30001634 <raw_mq_receive+0x60>

	}
	
	return result;
	
}
30001624:	e1a00007 	mov	r0, r7
30001628:	e28dd00c 	add	sp, sp, #12
3000162c:	e8bd45f0 	pop	{r4, r5, r6, r7, r8, sl, lr}
30001630:	e12fff1e 	bx	lr
	if (p_q->common_block_obj.object_type !=  RAW_MQUEUE_OBJ_TYPE) {

		return RAW_ERROR_OBJECT_TYPE;
	}

	raw_disable_sche();
30001634:	e58d3004 	str	r3, [sp, #4]
30001638:	eb000e75 	bl	30005014 <raw_disable_sche>
	
	/*if queue has msg then receive it*/
	if (p_q->mq_curmsgs) {
3000163c:	e5952010 	ldr	r2, [r5, #16]
30001640:	e59d3004 	ldr	r3, [sp, #4]
30001644:	e3520000 	cmp	r2, #0
30001648:	1a000011 	bne	30001694 <raw_mq_receive+0xc0>
		return RAW_SUCCESS;
	
	}


	if (wait_option == RAW_NO_WAIT) {
3000164c:	e35a0000 	cmp	sl, #0
30001650:	0a000009 	beq	3000167c <raw_mq_receive+0xa8>
		
		raw_enable_sche();
		return RAW_NO_PEND_WAIT;
	} 

	if (raw_sched_lock >= 2) { 
30001654:	e59f7154 	ldr	r7, [pc, #340]	; 300017b0 <raw_mq_receive+0x1dc>
30001658:	e5d71000 	ldrb	r1, [r7]
3000165c:	e3510001 	cmp	r1, #1
30001660:	9a00001d 	bls	300016dc <raw_mq_receive+0x108>
		
		*p_void =  0;
		*msg_len = 0u;
30001664:	e5862000 	str	r2, [r6]
		return RAW_NO_PEND_WAIT;
	} 

	if (raw_sched_lock >= 2) { 
		
		*p_void =  0;
30001668:	e5842000 	str	r2, [r4]
		*msg_len = 0u;
		*msg_prio = 0u;
3000166c:	e5832000 	str	r2, [r3]
		
		raw_enable_sche();
30001670:	eb000f22 	bl	30005300 <raw_enable_sche>
30001674:	e3a07007 	mov	r7, #7
		return RAW_SCHED_DISABLE;    
30001678:	eaffffe9 	b	30001624 <raw_mq_receive+0x50>


	if (wait_option == RAW_NO_WAIT) {

		*p_void =  0;
		*msg_len = 0u;
3000167c:	e586a000 	str	sl, [r6]
	}


	if (wait_option == RAW_NO_WAIT) {

		*p_void =  0;
30001680:	e584a000 	str	sl, [r4]
		*msg_len = 0u;
		*msg_prio = 0u;
30001684:	e583a000 	str	sl, [r3]
		
		raw_enable_sche();
30001688:	eb000f1c 	bl	30005300 <raw_enable_sche>
3000168c:	e3a07006 	mov	r7, #6
		return RAW_NO_PEND_WAIT;
30001690:	eaffffe3 	b	30001624 <raw_mq_receive+0x50>
	raw_disable_sche();
	
	/*if queue has msg then receive it*/
	if (p_q->mq_curmsgs) {

		msg_in = p_q->messages[p_q->mq_curmsgs - 1u];
30001694:	e595101c 	ldr	r1, [r5, #28]
30001698:	e2422001 	sub	r2, r2, #1
3000169c:	e7918102 	ldr	r8, [r1, r2, lsl #2]
		*p_void =  msg_in->msg;
		*msg_len = msg_in->m_ts;
300016a0:	e5982004 	ldr	r2, [r8, #4]
	
	/*if queue has msg then receive it*/
	if (p_q->mq_curmsgs) {

		msg_in = p_q->messages[p_q->mq_curmsgs - 1u];
		*p_void =  msg_in->msg;
300016a4:	e5981008 	ldr	r1, [r8, #8]
		*msg_len = msg_in->m_ts;
300016a8:	e5862000 	str	r2, [r6]
		*msg_prio = msg_in->m_type;
300016ac:	e5982000 	ldr	r2, [r8]
	
	/*if queue has msg then receive it*/
	if (p_q->mq_curmsgs) {

		msg_in = p_q->messages[p_q->mq_curmsgs - 1u];
		*p_void =  msg_in->msg;
300016b0:	e5841000 	str	r1, [r4]
		*msg_len = msg_in->m_ts;
		*msg_prio = msg_in->m_type;
300016b4:	e5832000 	str	r2, [r3]
		p_q->mq_curmsgs--;
300016b8:	e5953010 	ldr	r3, [r5, #16]
300016bc:	e2433001 	sub	r3, r3, #1
300016c0:	e5853010 	str	r3, [r5, #16]
		
		raw_enable_sche();
300016c4:	eb000f0d 	bl	30005300 <raw_enable_sche>

		p_q->free_fun(msg_in);
300016c8:	e1a00008 	mov	r0, r8
300016cc:	e595c024 	ldr	ip, [r5, #36]	; 0x24
300016d0:	e1a0e00f 	mov	lr, pc
300016d4:	e12fff1c 	bx	ip
		
		return RAW_SUCCESS;
300016d8:	eaffffd1 	b	30001624 <raw_mq_receive+0x50>
		
		raw_enable_sche();
		return RAW_SCHED_DISABLE;    
	}

	RAW_CRITICAL_ENTER();
300016dc:	e58d3004 	str	r3, [sp, #4]
300016e0:	eb001944 	bl	30007bf8 <OS_CPU_SR_Save>
300016e4:	e5d72000 	ldrb	r2, [r7]
	raw_pend_object((RAW_COMMON_BLOCK_OBJECT  *)p_q, raw_task_active, wait_option);
300016e8:	e59f80c4 	ldr	r8, [pc, #196]	; 300017b4 <raw_mq_receive+0x1e0>
		
		raw_enable_sche();
		return RAW_SCHED_DISABLE;    
	}

	RAW_CRITICAL_ENTER();
300016ec:	e2822001 	add	r2, r2, #1
300016f0:	e5c72000 	strb	r2, [r7]
300016f4:	eb001947 	bl	30007c18 <OS_CPU_SR_Restore>
	raw_pend_object((RAW_COMMON_BLOCK_OBJECT  *)p_q, raw_task_active, wait_option);
300016f8:	e1a0200a 	mov	r2, sl
300016fc:	e1a00005 	mov	r0, r5
30001700:	e5981000 	ldr	r1, [r8]
30001704:	eb0003f5 	bl	300026e0 <raw_pend_object>
	RAW_CRITICAL_EXIT();
30001708:	e5d72000 	ldrb	r2, [r7]
3000170c:	e59d3004 	ldr	r3, [sp, #4]
30001710:	e3520001 	cmp	r2, #1
30001714:	0a000014 	beq	3000176c <raw_mq_receive+0x198>
30001718:	e58d3004 	str	r3, [sp, #4]
3000171c:	eb001935 	bl	30007bf8 <OS_CPU_SR_Save>
30001720:	e5d72000 	ldrb	r2, [r7]
30001724:	e2422001 	sub	r2, r2, #1
30001728:	e5c72000 	strb	r2, [r7]
3000172c:	eb001939 	bl	30007c18 <OS_CPU_SR_Restore>
30001730:	e59d3004 	ldr	r3, [sp, #4]
	
	raw_enable_sche();
30001734:	e58d3004 	str	r3, [sp, #4]
30001738:	eb000ef0 	bl	30005300 <raw_enable_sche>

	raw_sched(); 
3000173c:	eb000b54 	bl	30004494 <raw_sched>
	
	result = block_state_post_process(raw_task_active, 0);
30001740:	e5980000 	ldr	r0, [r8]
30001744:	e3a01000 	mov	r1, #0
30001748:	eb000d51 	bl	30004c94 <block_state_post_process>

	/*if get the msg successful then take it*/
	if (result == RAW_SUCCESS) {
3000174c:	e2507000 	subs	r7, r0, #0
30001750:	e59d3004 	ldr	r3, [sp, #4]
30001754:	0a000007 	beq	30001778 <raw_mq_receive+0x1a4>
		p_q->free_fun(msg_in);
	}

	else {
		
		*p_void =  0;
30001758:	e3a02000 	mov	r2, #0
		*msg_len = 0u;
3000175c:	e5862000 	str	r2, [r6]
		p_q->free_fun(msg_in);
	}

	else {
		
		*p_void =  0;
30001760:	e5842000 	str	r2, [r4]
		*msg_len = 0u;
		*msg_prio = 0u;
30001764:	e5832000 	str	r2, [r3]
30001768:	eaffffad 	b	30001624 <raw_mq_receive+0x50>
		return RAW_SCHED_DISABLE;    
	}

	RAW_CRITICAL_ENTER();
	raw_pend_object((RAW_COMMON_BLOCK_OBJECT  *)p_q, raw_task_active, wait_option);
	RAW_CRITICAL_EXIT();
3000176c:	eb00135e 	bl	300064ec <hybrid_int_process>
30001770:	e59d3004 	ldr	r3, [sp, #4]
30001774:	eaffffee 	b	30001734 <raw_mq_receive+0x160>
	result = block_state_post_process(raw_task_active, 0);

	/*if get the msg successful then take it*/
	if (result == RAW_SUCCESS) {

		msg_in = raw_task_active->msg;
30001778:	e59f2034 	ldr	r2, [pc, #52]	; 300017b4 <raw_mq_receive+0x1e0>
3000177c:	e5922000 	ldr	r2, [r2]
30001780:	e5920044 	ldr	r0, [r2, #68]	; 0x44
		*p_void =  msg_in->msg;
		*msg_len = msg_in->m_ts;
30001784:	e5902004 	ldr	r2, [r0, #4]

	/*if get the msg successful then take it*/
	if (result == RAW_SUCCESS) {

		msg_in = raw_task_active->msg;
		*p_void =  msg_in->msg;
30001788:	e5901008 	ldr	r1, [r0, #8]
		*msg_len = msg_in->m_ts;
3000178c:	e5862000 	str	r2, [r6]
		*msg_prio = msg_in->m_type;
30001790:	e5902000 	ldr	r2, [r0]

	/*if get the msg successful then take it*/
	if (result == RAW_SUCCESS) {

		msg_in = raw_task_active->msg;
		*p_void =  msg_in->msg;
30001794:	e5841000 	str	r1, [r4]
		*msg_len = msg_in->m_ts;
		*msg_prio = msg_in->m_type;
30001798:	e5832000 	str	r2, [r3]
		p_q->free_fun(msg_in);
3000179c:	e595c024 	ldr	ip, [r5, #36]	; 0x24
300017a0:	e1a0e00f 	mov	lr, pc
300017a4:	e12fff1c 	bx	ip
300017a8:	eaffff9d 	b	30001624 <raw_mq_receive+0x50>
300017ac:	30013e61 	andcc	r3, r1, r1, ror #28
300017b0:	300142c0 	andcc	r4, r1, r0, asr #5
300017b4:	30013838 	andcc	r3, r1, r8, lsr r8

300017b8 <raw_mq_send>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_mq_send(RAW_MQUEUE *mqueue, RAW_VOID *msg_ptr, RAW_U32 msg_len, RAW_U32 msg_prio)
{
300017b8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	
	RAW_SR_ALLOC();

	#if (RAW_QUEUE_FUNCTION_CHECK > 0)

	if (p_q == 0) {
300017bc:	e2504000 	subs	r4, r0, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_mq_send(RAW_MQUEUE *mqueue, RAW_VOID *msg_ptr, RAW_U32 msg_len, RAW_U32 msg_prio)
{
300017c0:	e24dd014 	sub	sp, sp, #20
	
	RAW_SR_ALLOC();

	#if (RAW_QUEUE_FUNCTION_CHECK > 0)

	if (p_q == 0) {
300017c4:	03a00025 	moveq	r0, #37	; 0x25
300017c8:	0a000008 	beq	300017f0 <raw_mq_send+0x38>
		return RAW_NULL_OBJECT;
	}
	
	#endif

	if (raw_int_nesting) {
300017cc:	e59f0194 	ldr	r0, [pc, #404]	; 30001968 <raw_mq_send+0x1b0>
300017d0:	e5d00000 	ldrb	r0, [r0]
300017d4:	e3500000 	cmp	r0, #0
300017d8:	13a00027 	movne	r0, #39	; 0x27
300017dc:	1a000003 	bne	300017f0 <raw_mq_send+0x38>

		return RAW_NOT_CALLED_BY_ISR;
		
	}

	if (p_q->common_block_obj.object_type !=  RAW_MQUEUE_OBJ_TYPE) {
300017e0:	e5d4000d 	ldrb	r0, [r4, #13]
300017e4:	e350001c 	cmp	r0, #28
300017e8:	13a00036 	movne	r0, #54	; 0x36
300017ec:	0a000002 	beq	300017fc <raw_mq_send+0x44>
	RAW_U16 ret;
	
	ret = internal_raw_mq_send(mqueue, msg_ptr, msg_len, msg_prio);
	return ret;

}
300017f0:	e28dd014 	add	sp, sp, #20
300017f4:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
300017f8:	e12fff1e 	bx	lr

		return RAW_ERROR_OBJECT_TYPE;
	}

	block_list_head = &p_q->common_block_obj.block_list;
	sended_block_msg = p_q->malloc_fun(sizeof(RAW_MQUEUE_MSG));
300017fc:	e58d100c 	str	r1, [sp, #12]
30001800:	e58d2008 	str	r2, [sp, #8]
30001804:	e58d3004 	str	r3, [sp, #4]
30001808:	e3a0000c 	mov	r0, #12
3000180c:	e594c020 	ldr	ip, [r4, #32]
30001810:	e1a0e00f 	mov	lr, pc
30001814:	e12fff1c 	bx	ip

	if (sended_block_msg == 0) {
30001818:	e2506000 	subs	r6, r0, #0
3000181c:	e59d100c 	ldr	r1, [sp, #12]
30001820:	e59d2008 	ldr	r2, [sp, #8]
30001824:	e59d3004 	ldr	r3, [sp, #4]
30001828:	03a0001d 	moveq	r0, #29
3000182c:	0affffef 	beq	300017f0 <raw_mq_send+0x38>
		return RAW_NO_MEMORY;

	}
	sended_block_msg->msg = p_void;
	sended_block_msg->m_ts = size;
	sended_block_msg->m_type = msg_prio;
30001830:	e5863000 	str	r3, [r6]
	if (sended_block_msg == 0) {

		return RAW_NO_MEMORY;

	}
	sended_block_msg->msg = p_void;
30001834:	e5861008 	str	r1, [r6, #8]
	sended_block_msg->m_ts = size;
30001838:	e5862004 	str	r2, [r6, #4]
	sended_block_msg->m_type = msg_prio;
	
	raw_disable_sche();
3000183c:	eb000df4 	bl	30005014 <raw_disable_sche>

	if (p_q->mq_curmsgs >= p_q->mq_maxmsg) {
30001840:	e5945010 	ldr	r5, [r4, #16]
30001844:	e5943018 	ldr	r3, [r4, #24]
30001848:	e1550003 	cmp	r5, r3
3000184c:	2a000018 	bcs	300018b4 <raw_mq_send+0xfc>
	if (p_q->common_block_obj.object_type !=  RAW_MQUEUE_OBJ_TYPE) {

		return RAW_ERROR_OBJECT_TYPE;
	}

	block_list_head = &p_q->common_block_obj.block_list;
30001850:	e5943000 	ldr	r3, [r4]
30001854:	e1540003 	cmp	r4, r3
30001858:	0a00001c 	beq	300018d0 <raw_mq_send+0x118>
		msg_insert(p_q, sended_block_msg);
		raw_enable_sche();
		return RAW_SUCCESS;
	}

	RAW_CRITICAL_ENTER();
3000185c:	e59f5108 	ldr	r5, [pc, #264]	; 3000196c <raw_mq_send+0x1b4>
30001860:	eb0018e4 	bl	30007bf8 <OS_CPU_SR_Save>
30001864:	e5d53000 	ldrb	r3, [r5]
30001868:	e2833001 	add	r3, r3, #1
3000186c:	e5c53000 	strb	r3, [r5]
30001870:	eb0018e8 	bl	30007c18 <OS_CPU_SR_Restore>
	
	/*wake hignhest priority task blocked on this queue and send msg to it*/
	wake_send_msg(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list), sended_block_msg);	
30001874:	e5940000 	ldr	r0, [r4]
30001878:	e1a01006 	mov	r1, r6
3000187c:	e2400004 	sub	r0, r0, #4
30001880:	eb000373 	bl	30002654 <wake_send_msg>
		
	RAW_CRITICAL_EXIT();
30001884:	e5d53000 	ldrb	r3, [r5]
30001888:	e3530001 	cmp	r3, #1
3000188c:	0a000033 	beq	30001960 <raw_mq_send+0x1a8>
30001890:	eb0018d8 	bl	30007bf8 <OS_CPU_SR_Save>
30001894:	e5d53000 	ldrb	r3, [r5]
30001898:	e2433001 	sub	r3, r3, #1
3000189c:	e5c53000 	strb	r3, [r5]
300018a0:	eb0018dc 	bl	30007c18 <OS_CPU_SR_Restore>

	raw_enable_sche();
300018a4:	eb000e95 	bl	30005300 <raw_enable_sche>
	
   	do_possible_sche();
300018a8:	eb000af9 	bl	30004494 <raw_sched>
300018ac:	e3a00000 	mov	r0, #0
300018b0:	eaffffce 	b	300017f0 <raw_mq_send+0x38>
	
	raw_disable_sche();

	if (p_q->mq_curmsgs >= p_q->mq_maxmsg) {
		
		raw_enable_sche();
300018b4:	eb000e91 	bl	30005300 <raw_enable_sche>
		p_q->free_fun(sended_block_msg);
300018b8:	e1a00006 	mov	r0, r6
300018bc:	e594c024 	ldr	ip, [r4, #36]	; 0x24
300018c0:	e1a0e00f 	mov	lr, pc
300018c4:	e12fff1c 	bx	ip
300018c8:	e3a0000b 	mov	r0, #11
300018cc:	eaffffc7 	b	300017f0 <raw_mq_send+0x38>
/* Auxiliary functions to manipulate messages' list */
RAW_INLINE void msg_insert(RAW_MQUEUE *info, RAW_MQUEUE_MSG *ptr)
{
	RAW_S32 k;

	k = info->mq_curmsgs - 1u;
300018d0:	e2450001 	sub	r0, r5, #1
	while ((k >= 0) && ( ( ( RAW_MQUEUE_MSG * )info->messages[k]  )->m_type >= ptr->m_type  )  ) {
300018d4:	e3500000 	cmp	r0, #0
/* Auxiliary functions to manipulate messages' list */
RAW_INLINE void msg_insert(RAW_MQUEUE *info, RAW_MQUEUE_MSG *ptr)
{
	RAW_S32 k;

	k = info->mq_curmsgs - 1u;
300018d8:	e1a03000 	mov	r3, r0
300018dc:	b594c01c 	ldrlt	ip, [r4, #28]
	while ((k >= 0) && ( ( ( RAW_MQUEUE_MSG * )info->messages[k]  )->m_type >= ptr->m_type  )  ) {
300018e0:	ba000014 	blt	30001938 <raw_mq_send+0x180>
300018e4:	e594c01c 	ldr	ip, [r4, #28]
300018e8:	e5967000 	ldr	r7, [r6]
300018ec:	e79c2100 	ldr	r2, [ip, r0, lsl #2]
300018f0:	e5921000 	ldr	r1, [r2]
300018f4:	e1510007 	cmp	r1, r7
300018f8:	3a00000e 	bcc	30001938 <raw_mq_send+0x180>
300018fc:	e2451002 	sub	r1, r5, #2
30001900:	e1a01101 	lsl	r1, r1, #2
30001904:	ea000005 	b	30001920 <raw_mq_send+0x168>
30001908:	e79c2001 	ldr	r2, [ip, r1]
3000190c:	e1a00003 	mov	r0, r3
30001910:	e592e000 	ldr	lr, [r2]
30001914:	e2411004 	sub	r1, r1, #4
30001918:	e15e0007 	cmp	lr, r7
3000191c:	3a000005 	bcc	30001938 <raw_mq_send+0x180>
		info->messages[k + 1] = info->messages[k];
		k--;
30001920:	e2433001 	sub	r3, r3, #1
{
	RAW_S32 k;

	k = info->mq_curmsgs - 1u;
	while ((k >= 0) && ( ( ( RAW_MQUEUE_MSG * )info->messages[k]  )->m_type >= ptr->m_type  )  ) {
		info->messages[k + 1] = info->messages[k];
30001924:	e2800001 	add	r0, r0, #1
RAW_INLINE void msg_insert(RAW_MQUEUE *info, RAW_MQUEUE_MSG *ptr)
{
	RAW_S32 k;

	k = info->mq_curmsgs - 1u;
	while ((k >= 0) && ( ( ( RAW_MQUEUE_MSG * )info->messages[k]  )->m_type >= ptr->m_type  )  ) {
30001928:	e3730001 	cmn	r3, #1
		info->messages[k + 1] = info->messages[k];
3000192c:	e78c2100 	str	r2, [ip, r0, lsl #2]
RAW_INLINE void msg_insert(RAW_MQUEUE *info, RAW_MQUEUE_MSG *ptr)
{
	RAW_S32 k;

	k = info->mq_curmsgs - 1u;
	while ((k >= 0) && ( ( ( RAW_MQUEUE_MSG * )info->messages[k]  )->m_type >= ptr->m_type  )  ) {
30001930:	1afffff4 	bne	30001908 <raw_mq_send+0x150>
30001934:	e1a00003 	mov	r0, r3
		info->messages[k + 1] = info->messages[k];
		k--;
	}
	info->mq_curmsgs++;

	if (info->mq_curmsgs > info->peak_numbers) {
30001938:	e5943014 	ldr	r3, [r4, #20]
	k = info->mq_curmsgs - 1u;
	while ((k >= 0) && ( ( ( RAW_MQUEUE_MSG * )info->messages[k]  )->m_type >= ptr->m_type  )  ) {
		info->messages[k + 1] = info->messages[k];
		k--;
	}
	info->mq_curmsgs++;
3000193c:	e2855001 	add	r5, r5, #1

	if (info->mq_curmsgs > info->peak_numbers) {
30001940:	e1550003 	cmp	r5, r3
		
		info->peak_numbers = info->mq_curmsgs;
	}

	info->messages[k + 1] = ptr;
30001944:	e2800001 	add	r0, r0, #1
	k = info->mq_curmsgs - 1u;
	while ((k >= 0) && ( ( ( RAW_MQUEUE_MSG * )info->messages[k]  )->m_type >= ptr->m_type  )  ) {
		info->messages[k + 1] = info->messages[k];
		k--;
	}
	info->mq_curmsgs++;
30001948:	e5845010 	str	r5, [r4, #16]

	if (info->mq_curmsgs > info->peak_numbers) {
		
		info->peak_numbers = info->mq_curmsgs;
3000194c:	85845014 	strhi	r5, [r4, #20]
	}

	info->messages[k + 1] = ptr;
30001950:	e78c6100 	str	r6, [ip, r0, lsl #2]
	/*Queue is not full here, there should be no blocked send task*/	
	/*If there is no blocked receive task*/
	if (is_list_empty(block_list_head)) { 
		
		msg_insert(p_q, sended_block_msg);
		raw_enable_sche();
30001954:	eb000e69 	bl	30005300 <raw_enable_sche>
30001958:	e3a00000 	mov	r0, #0
3000195c:	eaffffa3 	b	300017f0 <raw_mq_send+0x38>
	RAW_CRITICAL_ENTER();
	
	/*wake hignhest priority task blocked on this queue and send msg to it*/
	wake_send_msg(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list), sended_block_msg);	
		
	RAW_CRITICAL_EXIT();
30001960:	eb0012e1 	bl	300064ec <hybrid_int_process>
30001964:	eaffffce 	b	300018a4 <raw_mq_send+0xec>
30001968:	30013e61 	andcc	r3, r1, r1, ror #28
3000196c:	300142c0 	andcc	r4, r1, r0, asr #5

30001970 <chg_pri_mutex>:
	LIST *block_list_head;
	
	hi_pri  = priority;
	low_pri = 0u;
	
	mtxcb = (RAW_MUTEX	*)(tcb->block_obj);
30001970:	e5903054 	ldr	r3, [r0, #84]	; 0x54
 *	priority limit of mutex with TA_CEILING attribute.
 *	In this case, return E_ILUSE.
 *    3.Other than above, return the 'priority'.
 */
RAW_U8 chg_pri_mutex(RAW_TASK_OBJ *tcb, RAW_U8 priority, RAW_U16 *error)
{
30001974:	e92d0030 	push	{r4, r5}
	hi_pri  = priority;
	low_pri = 0u;
	
	mtxcb = (RAW_MUTEX	*)(tcb->block_obj);
	
	if (mtxcb) {
30001978:	e3530000 	cmp	r3, #0
3000197c:	0a000002 	beq	3000198c <chg_pri_mutex+0x1c>

		/*if it is blocked on mutex*/
		if (mtxcb->common_block_obj.object_type == RAW_MUTEX_OBJ_TYPE) {
30001980:	e5d3c00d 	ldrb	ip, [r3, #13]
30001984:	e35c0012 	cmp	ip, #18
30001988:	0a000024 	beq	30001a20 <chg_pri_mutex+0xb0>
			
			if (mtxcb->policy == RAW_MUTEX_CEILING_POLICY) {
				pri = mtxcb->ceiling_prio;
3000198c:	e3a05000 	mov	r5, #0
		}
	}

	/* Locked Mutex */
	pri = hi_pri;
	for (mtxcb = tcb->mtxlist; mtxcb != 0; mtxcb = mtxcb->mtxlist) {
30001990:	e590301c 	ldr	r3, [r0, #28]
30001994:	e3530000 	cmp	r3, #0
30001998:	01a00001 	moveq	r0, r1
3000199c:	0a000017 	beq	30001a00 <chg_pri_mutex+0x90>
300019a0:	e1a04001 	mov	r4, r1
300019a4:	e1a00001 	mov	r0, r1
300019a8:	ea000009 	b	300019d4 <chg_pri_mutex+0x64>
		switch (mtxcb->policy) {
300019ac:	e35c0003 	cmp	ip, #3
300019b0:	1a000002 	bne	300019c0 <chg_pri_mutex+0x50>
			
		  case RAW_MUTEX_CEILING_POLICY:
			pri = mtxcb->ceiling_prio;
300019b4:	e5d34019 	ldrb	r4, [r3, #25]
			if ( pri > low_pri ) {
300019b8:	e1550004 	cmp	r5, r4
300019bc:	31a05004 	movcc	r5, r4
		}
	}

	/* Locked Mutex */
	pri = hi_pri;
	for (mtxcb = tcb->mtxlist; mtxcb != 0; mtxcb = mtxcb->mtxlist) {
300019c0:	e5933014 	ldr	r3, [r3, #20]
		  	
			block_list_head = &mtxcb->common_block_obj.block_list;
			
			if (!is_list_empty(block_list_head)) {
				first_block_task = list_entry(block_list_head->next, RAW_TASK_OBJ, task_list); 
				pri = first_block_task->priority;
300019c4:	e1540000 	cmp	r4, r0
300019c8:	31a00004 	movcc	r0, r4
		}
	}

	/* Locked Mutex */
	pri = hi_pri;
	for (mtxcb = tcb->mtxlist; mtxcb != 0; mtxcb = mtxcb->mtxlist) {
300019cc:	e3530000 	cmp	r3, #0
300019d0:	0a00000a 	beq	30001a00 <chg_pri_mutex+0x90>
		switch (mtxcb->policy) {
300019d4:	e5d3c018 	ldrb	ip, [r3, #24]
300019d8:	e35c0002 	cmp	ip, #2
300019dc:	1afffff2 	bne	300019ac <chg_pri_mutex+0x3c>
300019e0:	e593c000 	ldr	ip, [r3]
			}
			break;
			
		  case RAW_MUTEX_INHERIT_POLICY:
		  	
			block_list_head = &mtxcb->common_block_obj.block_list;
300019e4:	e153000c 	cmp	r3, ip
			
			if (!is_list_empty(block_list_head)) {
				first_block_task = list_entry(block_list_head->next, RAW_TASK_OBJ, task_list); 
				pri = first_block_task->priority;
300019e8:	15dc4015 	ldrbne	r4, [ip, #21]
		}
	}

	/* Locked Mutex */
	pri = hi_pri;
	for (mtxcb = tcb->mtxlist; mtxcb != 0; mtxcb = mtxcb->mtxlist) {
300019ec:	e5933014 	ldr	r3, [r3, #20]
		  	
			block_list_head = &mtxcb->common_block_obj.block_list;
			
			if (!is_list_empty(block_list_head)) {
				first_block_task = list_entry(block_list_head->next, RAW_TASK_OBJ, task_list); 
				pri = first_block_task->priority;
300019f0:	e1540000 	cmp	r4, r0
300019f4:	31a00004 	movcc	r0, r4
		}
	}

	/* Locked Mutex */
	pri = hi_pri;
	for (mtxcb = tcb->mtxlist; mtxcb != 0; mtxcb = mtxcb->mtxlist) {
300019f8:	e3530000 	cmp	r3, #0
300019fc:	1afffff4 	bne	300019d4 <chg_pri_mutex+0x64>
		if (pri < hi_pri) {
			hi_pri = pri;
		}
	}

	if (priority < low_pri) {
30001a00:	e1510005 	cmp	r1, r5
		
		*error = RAW_EXCEED_CEILING_PRIORITY;
30001a04:	33a0301a 	movcc	r3, #26
		return RAW_EXCEED_CEILING_PRIORITY;
	}

	*error = RAW_SUCCESS;
30001a08:	23a03000 	movcs	r3, #0
		}
	}

	if (priority < low_pri) {
		
		*error = RAW_EXCEED_CEILING_PRIORITY;
30001a0c:	31c230b0 	strhcc	r3, [r2]
30001a10:	33a0001a 	movcc	r0, #26
		return RAW_EXCEED_CEILING_PRIORITY;
	}

	*error = RAW_SUCCESS;
30001a14:	21c230b0 	strhcs	r3, [r2]
	return hi_pri;
}
30001a18:	e8bd0030 	pop	{r4, r5}
30001a1c:	e12fff1e 	bx	lr
	if (mtxcb) {

		/*if it is blocked on mutex*/
		if (mtxcb->common_block_obj.object_type == RAW_MUTEX_OBJ_TYPE) {
			
			if (mtxcb->policy == RAW_MUTEX_CEILING_POLICY) {
30001a20:	e5d3c018 	ldrb	ip, [r3, #24]
30001a24:	e35c0003 	cmp	ip, #3
				pri = mtxcb->ceiling_prio;
30001a28:	05d35019 	ldrbeq	r5, [r3, #25]
	if (mtxcb) {

		/*if it is blocked on mutex*/
		if (mtxcb->common_block_obj.object_type == RAW_MUTEX_OBJ_TYPE) {
			
			if (mtxcb->policy == RAW_MUTEX_CEILING_POLICY) {
30001a2c:	1affffd6 	bne	3000198c <chg_pri_mutex+0x1c>
30001a30:	eaffffd6 	b	30001990 <chg_pri_mutex+0x20>

30001a34 <release_mutex>:
 * Set the highest priority between listed below:
 *	(A) The highest priority in all mutexes in which 'tcb' task locks.
 *	(B) The base priority of 'tcb' task.
 */
static RAW_VOID release_mutex(RAW_TASK_OBJ *tcb, RAW_MUTEX *relmtxcb)
{
30001a34:	e92d4070 	push	{r4, r5, r6, lr}
	RAW_U8	newpri, pri;
	RAW_TASK_OBJ *first_block_task;
	LIST *block_list_head;
	
	/* (B) The base priority of task */
	newpri = tcb->bpriority;
30001a38:	e5d0401a 	ldrb	r4, [r0, #26]
 * Set the highest priority between listed below:
 *	(A) The highest priority in all mutexes in which 'tcb' task locks.
 *	(B) The base priority of 'tcb' task.
 */
static RAW_VOID release_mutex(RAW_TASK_OBJ *tcb, RAW_MUTEX *relmtxcb)
{
30001a3c:	e1a05000 	mov	r5, r0
	/* (B) The base priority of task */
	newpri = tcb->bpriority;

	/* (A) The highest priority in mutex which is locked */
	pri = newpri;
	prev = &tcb->mtxlist;
30001a40:	e280201c 	add	r2, r0, #28
30001a44:	e590301c 	ldr	r3, [r0, #28]
30001a48:	e1a00004 	mov	r0, r4
	while ((mtxcb = *prev) != 0) {
30001a4c:	e3530000 	cmp	r3, #0
30001a50:	0a00000c 	beq	30001a88 <release_mutex+0x54>
		if (mtxcb == relmtxcb) {
30001a54:	e1510003 	cmp	r1, r3
30001a58:	0a00001b 	beq	30001acc <release_mutex+0x98>
			/* Delete self from list and tcb->mtxlist point to next*/
			*prev = mtxcb->mtxlist;
			continue;
		}

		switch (mtxcb->policy) {
30001a5c:	e5d32018 	ldrb	r2, [r3, #24]
30001a60:	e3520002 	cmp	r2, #2
30001a64:	0a000014 	beq	30001abc <release_mutex+0x88>
30001a68:	e3520003 	cmp	r2, #3
		  case RAW_MUTEX_CEILING_POLICY:
			pri = mtxcb->ceiling_prio;
30001a6c:	05d30019 	ldrbeq	r0, [r3, #25]
		}
		if (newpri > pri) {
			newpri = pri;
		}

		prev = &mtxcb->mtxlist;
30001a70:	e2832014 	add	r2, r3, #20
30001a74:	e5933014 	ldr	r3, [r3, #20]
		  	
		  	block_list_head = &mtxcb->common_block_obj.block_list;
			
			if (!is_list_empty(block_list_head)) {
				first_block_task = list_entry(block_list_head->next, RAW_TASK_OBJ, task_list); 
				pri = first_block_task->priority;
30001a78:	e1500004 	cmp	r0, r4
30001a7c:	31a04000 	movcc	r4, r0
	newpri = tcb->bpriority;

	/* (A) The highest priority in mutex which is locked */
	pri = newpri;
	prev = &tcb->mtxlist;
	while ((mtxcb = *prev) != 0) {
30001a80:	e3530000 	cmp	r3, #0
30001a84:	1afffff2 	bne	30001a54 <release_mutex+0x20>
		}

		prev = &mtxcb->mtxlist;
	}

	if ( newpri != tcb->priority ) {
30001a88:	e5d53019 	ldrb	r3, [r5, #25]
30001a8c:	e1530004 	cmp	r3, r4
30001a90:	0a000007 	beq	30001ab4 <release_mutex+0x80>
		/* Change priority of lock get task */
		change_internal_task_priority(tcb, newpri);
30001a94:	e1a01004 	mov	r1, r4
30001a98:	e1a00005 	mov	r0, r5
30001a9c:	eb000f05 	bl	300056b8 <change_internal_task_priority>

		TRACE_MUTEX_RELEASE(raw_task_active, tcb, newpri);
30001aa0:	e59f3030 	ldr	r3, [pc, #48]	; 30001ad8 <release_mutex+0xa4>
30001aa4:	e1a01005 	mov	r1, r5
30001aa8:	e5930000 	ldr	r0, [r3]
30001aac:	e1a02004 	mov	r2, r4
30001ab0:	eb001832 	bl	30007b80 <_trace_mutex_release>
	}
	
}
30001ab4:	e8bd4070 	pop	{r4, r5, r6, lr}
30001ab8:	e12fff1e 	bx	lr
30001abc:	e5932000 	ldr	r2, [r3]
			pri = mtxcb->ceiling_prio;
			break;
			
		  case RAW_MUTEX_INHERIT_POLICY:
		  	
		  	block_list_head = &mtxcb->common_block_obj.block_list;
30001ac0:	e1530002 	cmp	r3, r2
			
			if (!is_list_empty(block_list_head)) {
				first_block_task = list_entry(block_list_head->next, RAW_TASK_OBJ, task_list); 
				pri = first_block_task->priority;
30001ac4:	15d20015 	ldrbne	r0, [r2, #21]
30001ac8:	eaffffe8 	b	30001a70 <release_mutex+0x3c>
	pri = newpri;
	prev = &tcb->mtxlist;
	while ((mtxcb = *prev) != 0) {
		if (mtxcb == relmtxcb) {
			/* Delete self from list and tcb->mtxlist point to next*/
			*prev = mtxcb->mtxlist;
30001acc:	e5913014 	ldr	r3, [r1, #20]
30001ad0:	e5823000 	str	r3, [r2]
			continue;
30001ad4:	eaffffdc 	b	30001a4c <release_mutex+0x18>
30001ad8:	30013838 	andcc	r3, r1, r8, lsr r8

30001adc <raw_mutex_delete>:
************************************************************************************************************************
*/
#if (CONFIG_RAW_MUTEX_DELETE > 0)

RAW_U16 raw_mutex_delete(RAW_MUTEX *mutex_ptr)
{
30001adc:	e92d4070 	push	{r4, r5, r6, lr}
	
	RAW_SR_ALLOC();

	#if (RAW_MUTEX_FUNCTION_CHECK > 0)

	if (mutex_ptr == 0) {
30001ae0:	e2504000 	subs	r4, r0, #0
30001ae4:	03a00025 	moveq	r0, #37	; 0x25
30001ae8:	0a000011 	beq	30001b34 <raw_mutex_delete+0x58>
		return RAW_NULL_OBJECT;
	}
	
	#endif
	
	RAW_CRITICAL_ENTER();
30001aec:	e59f50d8 	ldr	r5, [pc, #216]	; 30001bcc <raw_mutex_delete+0xf0>
30001af0:	eb001840 	bl	30007bf8 <OS_CPU_SR_Save>
30001af4:	e5d53000 	ldrb	r3, [r5]
30001af8:	e2833001 	add	r3, r3, #1
30001afc:	e5c53000 	strb	r3, [r5]
30001b00:	eb001844 	bl	30007c18 <OS_CPU_SR_Restore>

	if (mutex_ptr->common_block_obj.object_type != RAW_MUTEX_OBJ_TYPE) {
30001b04:	e5d4300d 	ldrb	r3, [r4, #13]
30001b08:	e3530012 	cmp	r3, #18
30001b0c:	0a00000a 	beq	30001b3c <raw_mutex_delete+0x60>
		
		RAW_CRITICAL_EXIT();  
30001b10:	e5d53000 	ldrb	r3, [r5]
30001b14:	e3530001 	cmp	r3, #1
30001b18:	0a000026 	beq	30001bb8 <raw_mutex_delete+0xdc>
30001b1c:	eb001835 	bl	30007bf8 <OS_CPU_SR_Save>
30001b20:	e5d53000 	ldrb	r3, [r5]
30001b24:	e2433001 	sub	r3, r3, #1
30001b28:	e5c53000 	strb	r3, [r5]
30001b2c:	eb001839 	bl	30007c18 <OS_CPU_SR_Restore>
30001b30:	e3a00036 	mov	r0, #54	; 0x36
	TRACE_MUTEX_DELETE(raw_task_active, mutex_ptr);
		
	do_possible_sche(); 
	
	return RAW_SUCCESS;
}
30001b34:	e8bd4070 	pop	{r4, r5, r6, lr}
30001b38:	e12fff1e 	bx	lr

	block_list_head = &mutex_ptr->common_block_obj.block_list;
	
	mutex_ptr->common_block_obj.object_type = 0u;

	if (mutex_ptr->mtxtsk) {
30001b3c:	e5940010 	ldr	r0, [r4, #16]
		return RAW_ERROR_OBJECT_TYPE;
	}

	block_list_head = &mutex_ptr->common_block_obj.block_list;
	
	mutex_ptr->common_block_obj.object_type = 0u;
30001b40:	e3a03000 	mov	r3, #0

	if (mutex_ptr->mtxtsk) {
30001b44:	e3500000 	cmp	r0, #0
		return RAW_ERROR_OBJECT_TYPE;
	}

	block_list_head = &mutex_ptr->common_block_obj.block_list;
	
	mutex_ptr->common_block_obj.object_type = 0u;
30001b48:	e5c4300d 	strb	r3, [r4, #13]

	if (mutex_ptr->mtxtsk) {
30001b4c:	0a000006 	beq	30001b6c <raw_mutex_delete+0x90>
		release_mutex(mutex_ptr->mtxtsk, mutex_ptr);
30001b50:	e1a01004 	mov	r1, r4
30001b54:	ebffffb6 	bl	30001a34 <release_mutex>
30001b58:	e5940000 	ldr	r0, [r4]
	}
	
	/*All task blocked on this mutex is waken up*/
	while (!is_list_empty(block_list_head)) {
30001b5c:	e1540000 	cmp	r4, r0
30001b60:	0a000004 	beq	30001b78 <raw_mutex_delete+0x9c>
		delete_pend_obj(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list));	
30001b64:	e2400004 	sub	r0, r0, #4
30001b68:	eb00026d 	bl	30002524 <delete_pend_obj>
30001b6c:	e5940000 	ldr	r0, [r4]
	if (mutex_ptr->mtxtsk) {
		release_mutex(mutex_ptr->mtxtsk, mutex_ptr);
	}
	
	/*All task blocked on this mutex is waken up*/
	while (!is_list_empty(block_list_head)) {
30001b70:	e1540000 	cmp	r4, r0
30001b74:	1afffffa 	bne	30001b64 <raw_mutex_delete+0x88>
		delete_pend_obj(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list));	
	}              

	RAW_CRITICAL_EXIT();
30001b78:	e5d53000 	ldrb	r3, [r5]
30001b7c:	e59f5048 	ldr	r5, [pc, #72]	; 30001bcc <raw_mutex_delete+0xf0>
30001b80:	e3530001 	cmp	r3, #1
30001b84:	0a00000e 	beq	30001bc4 <raw_mutex_delete+0xe8>
30001b88:	eb00181a 	bl	30007bf8 <OS_CPU_SR_Save>
30001b8c:	e5d53000 	ldrb	r3, [r5]
30001b90:	e2433001 	sub	r3, r3, #1
30001b94:	e5c53000 	strb	r3, [r5]
30001b98:	eb00181e 	bl	30007c18 <OS_CPU_SR_Restore>

	TRACE_MUTEX_DELETE(raw_task_active, mutex_ptr);
30001b9c:	e59f302c 	ldr	r3, [pc, #44]	; 30001bd0 <raw_mutex_delete+0xf4>
30001ba0:	e1a01004 	mov	r1, r4
30001ba4:	e5930000 	ldr	r0, [r3]
30001ba8:	eb0017fb 	bl	30007b9c <_trace_mutex_delete>
		
	do_possible_sche(); 
30001bac:	eb000a38 	bl	30004494 <raw_sched>
30001bb0:	e3a00000 	mov	r0, #0
	
	return RAW_SUCCESS;
30001bb4:	eaffffde 	b	30001b34 <raw_mutex_delete+0x58>
	
	RAW_CRITICAL_ENTER();

	if (mutex_ptr->common_block_obj.object_type != RAW_MUTEX_OBJ_TYPE) {
		
		RAW_CRITICAL_EXIT();  
30001bb8:	eb00124b 	bl	300064ec <hybrid_int_process>
30001bbc:	e3a00036 	mov	r0, #54	; 0x36
30001bc0:	eaffffdb 	b	30001b34 <raw_mutex_delete+0x58>
	/*All task blocked on this mutex is waken up*/
	while (!is_list_empty(block_list_head)) {
		delete_pend_obj(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list));	
	}              

	RAW_CRITICAL_EXIT();
30001bc4:	eb001248 	bl	300064ec <hybrid_int_process>
30001bc8:	eafffff3 	b	30001b9c <raw_mutex_delete+0xc0>
30001bcc:	300142c0 	andcc	r4, r1, r0, asr #5
30001bd0:	30013838 	andcc	r3, r1, r8, lsr r8

30001bd4 <mutex_state_change>:
RAW_VOID mutex_state_change(RAW_TASK_OBJ *tcb)
{
	RAW_MUTEX		*mtxcb;
	RAW_TASK_OBJ	*mtxtsk;

	mtxcb = (RAW_MUTEX	*)(tcb->block_obj);
30001bd4:	e5903054 	ldr	r3, [r0, #84]	; 0x54
	
	if (mtxcb->common_block_obj.object_type == RAW_MUTEX_OBJ_TYPE) {
30001bd8:	e5d3200d 	ldrb	r2, [r3, #13]
30001bdc:	e3520012 	cmp	r2, #18
30001be0:	112fff1e 	bxne	lr
				
		if (mtxcb->policy == RAW_MUTEX_INHERIT_POLICY) {
30001be4:	e5d32018 	ldrb	r2, [r3, #24]
30001be8:	e3520002 	cmp	r2, #2
30001bec:	112fff1e 	bxne	lr
			mtxtsk = mtxcb->mtxtsk;
30001bf0:	e5933010 	ldr	r3, [r3, #16]
			
			/*the highest priority task blocked on this mutex may decrease priority so reset the mutex task priority*/
			if(mtxtsk->priority == tcb->priority) {
30001bf4:	e5d02019 	ldrb	r2, [r0, #25]
30001bf8:	e5d31019 	ldrb	r1, [r3, #25]
30001bfc:	e1510002 	cmp	r1, r2
30001c00:	112fff1e 	bxne	lr

				release_mutex(mtxtsk, 0);
30001c04:	e1a00003 	mov	r0, r3
30001c08:	e3a01000 	mov	r1, #0
30001c0c:	eaffff88 	b	30001a34 <release_mutex>

30001c10 <mtx_chg_pri>:

/*
 * Processing if the priority of wait task changes
 */
RAW_VOID mtx_chg_pri(RAW_TASK_OBJ *tcb, RAW_U8 oldpri)
{
30001c10:	e92d4010 	push	{r4, lr}
	RAW_MUTEX		*mtxcb;
	RAW_TASK_OBJ	*mtxtsk;

	mtxcb = (RAW_MUTEX	*)(tcb->block_obj);
30001c14:	e5903054 	ldr	r3, [r0, #84]	; 0x54
	
	if (mtxcb->common_block_obj.object_type == RAW_MUTEX_OBJ_TYPE) {
30001c18:	e5d3200d 	ldrb	r2, [r3, #13]
30001c1c:	e3520012 	cmp	r2, #18
30001c20:	0a000001 	beq	30001c2c <mtx_chg_pri+0x1c>
			
		}
		
	}

}
30001c24:	e8bd4010 	pop	{r4, lr}
30001c28:	e12fff1e 	bx	lr

	mtxcb = (RAW_MUTEX	*)(tcb->block_obj);
	
	if (mtxcb->common_block_obj.object_type == RAW_MUTEX_OBJ_TYPE) {
		
		if (mtxcb->policy == RAW_MUTEX_INHERIT_POLICY) {
30001c2c:	e5d32018 	ldrb	r2, [r3, #24]
30001c30:	e3520002 	cmp	r2, #2
30001c34:	1afffffa 	bne	30001c24 <mtx_chg_pri+0x14>
			mtxtsk = mtxcb->mtxtsk;
30001c38:	e593c010 	ldr	ip, [r3, #16]
			
			if (mtxtsk->priority > tcb->priority) {
30001c3c:	e5d03019 	ldrb	r3, [r0, #25]
30001c40:	e5dc2019 	ldrb	r2, [ip, #25]
30001c44:	e1520003 	cmp	r2, r3
30001c48:	8a000005 	bhi	30001c64 <mtx_chg_pri+0x54>
				change_internal_task_priority(mtxtsk, tcb->priority);

			}

			/*the highest priority task blocked on this mutex may decrease priority so reset the mutex task priority*/
			else if (mtxtsk->priority == oldpri) {
30001c4c:	e1520001 	cmp	r2, r1
30001c50:	1afffff3 	bne	30001c24 <mtx_chg_pri+0x14>

				release_mutex(mtxtsk, 0);
30001c54:	e1a0000c 	mov	r0, ip
30001c58:	e3a01000 	mov	r1, #0
			
		}
		
	}

}
30001c5c:	e8bd4010 	pop	{r4, lr}
			}

			/*the highest priority task blocked on this mutex may decrease priority so reset the mutex task priority*/
			else if (mtxtsk->priority == oldpri) {

				release_mutex(mtxtsk, 0);
30001c60:	eaffff73 	b	30001a34 <release_mutex>
			if (mtxtsk->priority > tcb->priority) {

				/* Since the highest priority of the lock wait task
		  		 became higher, raise the lock get task priority
		   		higher */
				change_internal_task_priority(mtxtsk, tcb->priority);
30001c64:	e1a0000c 	mov	r0, ip
30001c68:	e1a01003 	mov	r1, r3
30001c6c:	eb000e91 	bl	300056b8 <change_internal_task_priority>
30001c70:	eaffffeb 	b	30001c24 <mtx_chg_pri+0x14>

30001c74 <raw_task_free_mutex>:
	
}


RAW_VOID raw_task_free_mutex(RAW_TASK_OBJ *tcb)
{
30001c74:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	RAW_MUTEX	*mtxcb, *next_mtxcb;
	RAW_TASK_OBJ	*next_tcb;
	LIST 				*block_list_head;
	
	next_mtxcb = tcb->mtxlist;
30001c78:	e590601c 	ldr	r6, [r0, #28]
	while ((mtxcb = next_mtxcb) != 0) {
30001c7c:	e3560000 	cmp	r6, #0
30001c80:	0a00001b 	beq	30001cf4 <raw_task_free_mutex+0x80>
			}
		} 

		else {
			/* No wait task */
			mtxcb->mtxtsk = 0;
30001c84:	e3a05000 	mov	r5, #0
30001c88:	ea000002 	b	30001c98 <raw_task_free_mutex+0x24>
	RAW_MUTEX	*mtxcb, *next_mtxcb;
	RAW_TASK_OBJ	*next_tcb;
	LIST 				*block_list_head;
	
	next_mtxcb = tcb->mtxlist;
	while ((mtxcb = next_mtxcb) != 0) {
30001c8c:	e3540000 	cmp	r4, #0
30001c90:	0a000017 	beq	30001cf4 <raw_task_free_mutex+0x80>
30001c94:	e1a06004 	mov	r6, r4
30001c98:	e5963000 	ldr	r3, [r6]
		next_mtxcb = mtxcb->mtxlist;
30001c9c:	e5964014 	ldr	r4, [r6, #20]

		block_list_head = &mtxcb->common_block_obj.block_list;
		
		if (!is_list_empty(block_list_head)) {
			
			next_tcb = list_entry(block_list_head->next, RAW_TASK_OBJ, task_list);
30001ca0:	e2437004 	sub	r7, r3, #4
	
	next_mtxcb = tcb->mtxlist;
	while ((mtxcb = next_mtxcb) != 0) {
		next_mtxcb = mtxcb->mtxlist;

		block_list_head = &mtxcb->common_block_obj.block_list;
30001ca4:	e1560003 	cmp	r6, r3
		if (!is_list_empty(block_list_head)) {
			
			next_tcb = list_entry(block_list_head->next, RAW_TASK_OBJ, task_list);

			/* Wake wait task */
			raw_wake_object(next_tcb);
30001ca8:	e1a00007 	mov	r0, r7
			}
		} 

		else {
			/* No wait task */
			mtxcb->mtxtsk = 0;
30001cac:	05865010 	streq	r5, [r6, #16]
	
	next_mtxcb = tcb->mtxlist;
	while ((mtxcb = next_mtxcb) != 0) {
		next_mtxcb = mtxcb->mtxlist;

		block_list_head = &mtxcb->common_block_obj.block_list;
30001cb0:	0afffff5 	beq	30001c8c <raw_task_free_mutex+0x18>
		if (!is_list_empty(block_list_head)) {
			
			next_tcb = list_entry(block_list_head->next, RAW_TASK_OBJ, task_list);

			/* Wake wait task */
			raw_wake_object(next_tcb);
30001cb4:	eb000268 	bl	3000265c <raw_wake_object>

			/* Change mutex get task */
			mtxcb->mtxtsk = next_tcb;
			mtxcb->mtxlist = next_tcb->mtxlist;
30001cb8:	e597301c 	ldr	r3, [r7, #28]

			/* Wake wait task */
			raw_wake_object(next_tcb);

			/* Change mutex get task */
			mtxcb->mtxtsk = next_tcb;
30001cbc:	e5867010 	str	r7, [r6, #16]
			mtxcb->mtxlist = next_tcb->mtxlist;
30001cc0:	e5863014 	str	r3, [r6, #20]
			next_tcb->mtxlist = mtxcb;
30001cc4:	e587601c 	str	r6, [r7, #28]

			if (mtxcb->policy == RAW_MUTEX_CEILING_POLICY) {
30001cc8:	e5d63018 	ldrb	r3, [r6, #24]
30001ccc:	e3530003 	cmp	r3, #3
30001cd0:	1affffed 	bne	30001c8c <raw_task_free_mutex+0x18>
				if (next_tcb->priority > mtxcb->ceiling_prio) {
30001cd4:	e5d61019 	ldrb	r1, [r6, #25]
30001cd8:	e5d73019 	ldrb	r3, [r7, #25]
30001cdc:	e1530001 	cmp	r3, r1
30001ce0:	9affffe9 	bls	30001c8c <raw_task_free_mutex+0x18>
					/* Raise the priority for the task
					   that got lock to the highest
					   priority limit */
					change_internal_task_priority(next_tcb, mtxcb->ceiling_prio);
30001ce4:	e1a00007 	mov	r0, r7
30001ce8:	eb000e72 	bl	300056b8 <change_internal_task_priority>
	RAW_MUTEX	*mtxcb, *next_mtxcb;
	RAW_TASK_OBJ	*next_tcb;
	LIST 				*block_list_head;
	
	next_mtxcb = tcb->mtxlist;
	while ((mtxcb = next_mtxcb) != 0) {
30001cec:	e3540000 	cmp	r4, #0
30001cf0:	1affffe7 	bne	30001c94 <raw_task_free_mutex+0x20>
			mtxcb->mtxtsk = 0;
		}
		
	}
	
}
30001cf4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
30001cf8:	e12fff1e 	bx	lr

30001cfc <raw_mutex_put>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_mutex_put(RAW_MUTEX *mutex_ptr)
{
30001cfc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	
	RAW_SR_ALLOC();

	#if (RAW_MUTEX_FUNCTION_CHECK > 0)

	if (mutex_ptr == 0) {
30001d00:	e2505000 	subs	r5, r0, #0
30001d04:	03a00025 	moveq	r0, #37	; 0x25
30001d08:	0a000004 	beq	30001d20 <raw_mutex_put+0x24>
		return RAW_NULL_OBJECT;
	}

	if (raw_int_nesting) {
30001d0c:	e59f31e4 	ldr	r3, [pc, #484]	; 30001ef8 <raw_mutex_put+0x1fc>
30001d10:	e5d33000 	ldrb	r3, [r3]
30001d14:	e3530000 	cmp	r3, #0
30001d18:	13a00027 	movne	r0, #39	; 0x27
30001d1c:	0a000001 	beq	30001d28 <raw_mutex_put+0x2c>

	do_possible_sche();                                       

	return RAW_SUCCESS;
	
}
30001d20:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
30001d24:	e12fff1e 	bx	lr
		return RAW_NOT_CALLED_BY_ISR;
	}
	
	#endif

	RAW_CRITICAL_ENTER();
30001d28:	e59f41cc 	ldr	r4, [pc, #460]	; 30001efc <raw_mutex_put+0x200>
30001d2c:	eb0017b1 	bl	30007bf8 <OS_CPU_SR_Save>
30001d30:	e5d43000 	ldrb	r3, [r4]
30001d34:	e2833001 	add	r3, r3, #1
30001d38:	e5c43000 	strb	r3, [r4]
30001d3c:	eb0017b5 	bl	30007c18 <OS_CPU_SR_Restore>

	if (mutex_ptr->common_block_obj.object_type != RAW_MUTEX_OBJ_TYPE) {
30001d40:	e5d5300d 	ldrb	r3, [r5, #13]
30001d44:	e3530012 	cmp	r3, #18
30001d48:	0a00000c 	beq	30001d80 <raw_mutex_put+0x84>
		
		RAW_CRITICAL_EXIT();  
30001d4c:	e5d43000 	ldrb	r3, [r4]
30001d50:	e3530001 	cmp	r3, #1
30001d54:	0a000006 	beq	30001d74 <raw_mutex_put+0x78>
30001d58:	eb0017a6 	bl	30007bf8 <OS_CPU_SR_Save>
30001d5c:	e5d43000 	ldrb	r3, [r4]
30001d60:	e2433001 	sub	r3, r3, #1
30001d64:	e5c43000 	strb	r3, [r4]
30001d68:	eb0017aa 	bl	30007c18 <OS_CPU_SR_Restore>
30001d6c:	e3a00036 	mov	r0, #54	; 0x36
30001d70:	eaffffea 	b	30001d20 <raw_mutex_put+0x24>
30001d74:	eb0011dc 	bl	300064ec <hybrid_int_process>
30001d78:	e3a00036 	mov	r0, #54	; 0x36
30001d7c:	eaffffe7 	b	30001d20 <raw_mutex_put+0x24>
		return RAW_ERROR_OBJECT_TYPE;
	}


	/*Must release the mutex by self*/
	if (raw_task_active != mutex_ptr->mtxtsk) {           
30001d80:	e59f6178 	ldr	r6, [pc, #376]	; 30001f00 <raw_mutex_put+0x204>
30001d84:	e5950010 	ldr	r0, [r5, #16]
30001d88:	e5963000 	ldr	r3, [r6]
30001d8c:	e1500003 	cmp	r0, r3
30001d90:	0a00000c 	beq	30001dc8 <raw_mutex_put+0xcc>
		RAW_CRITICAL_EXIT();
30001d94:	e5d43000 	ldrb	r3, [r4]
30001d98:	e3530001 	cmp	r3, #1
30001d9c:	0a000006 	beq	30001dbc <raw_mutex_put+0xc0>
30001da0:	eb001794 	bl	30007bf8 <OS_CPU_SR_Save>
30001da4:	e5d43000 	ldrb	r3, [r4]
30001da8:	e2433001 	sub	r3, r3, #1
30001dac:	e5c43000 	strb	r3, [r4]
30001db0:	eb001798 	bl	30007c18 <OS_CPU_SR_Restore>
30001db4:	e3a00017 	mov	r0, #23
30001db8:	eaffffd8 	b	30001d20 <raw_mutex_put+0x24>
30001dbc:	eb0011ca 	bl	300064ec <hybrid_int_process>
30001dc0:	e3a00017 	mov	r0, #23
30001dc4:	eaffffd5 	b	30001d20 <raw_mutex_put+0x24>
		return RAW_MUTEX_NOT_RELEASE_BY_OCCYPY;
	}

	mutex_ptr->owner_nested--;
30001dc8:	e5d5701a 	ldrb	r7, [r5, #26]
30001dcc:	e2477001 	sub	r7, r7, #1
30001dd0:	e20770ff 	and	r7, r7, #255	; 0xff

	if (mutex_ptr->owner_nested) {
30001dd4:	e3570000 	cmp	r7, #0
	if (raw_task_active != mutex_ptr->mtxtsk) {           
		RAW_CRITICAL_EXIT();
		return RAW_MUTEX_NOT_RELEASE_BY_OCCYPY;
	}

	mutex_ptr->owner_nested--;
30001dd8:	e5c5701a 	strb	r7, [r5, #26]

	if (mutex_ptr->owner_nested) {
30001ddc:	0a000009 	beq	30001e08 <raw_mutex_put+0x10c>

		RAW_CRITICAL_EXIT();
30001de0:	e5d43000 	ldrb	r3, [r4]
30001de4:	e3530001 	cmp	r3, #1
30001de8:	0a000026 	beq	30001e88 <raw_mutex_put+0x18c>
30001dec:	eb001781 	bl	30007bf8 <OS_CPU_SR_Save>
30001df0:	e5d43000 	ldrb	r3, [r4]
30001df4:	e2433001 	sub	r3, r3, #1
30001df8:	e5c43000 	strb	r3, [r4]
30001dfc:	eb001785 	bl	30007c18 <OS_CPU_SR_Restore>
30001e00:	e3a00018 	mov	r0, #24
30001e04:	eaffffc5 	b	30001d20 <raw_mutex_put+0x24>
		return RAW_MUTEX_OWNER_NESTED;

	}

	release_mutex(raw_task_active, mutex_ptr);
30001e08:	e1a01005 	mov	r1, r5
30001e0c:	ebffff08 	bl	30001a34 <release_mutex>
30001e10:	e5953000 	ldr	r3, [r5]


	block_list_head = &mutex_ptr->common_block_obj.block_list;
30001e14:	e1550003 	cmp	r5, r3
30001e18:	0a00001d 	beq	30001e94 <raw_mutex_put+0x198>
		return RAW_SUCCESS;
	}

	
	/* there must have task blocked on this mutex object*/ 																												
	tcb = list_entry(block_list_head->next, RAW_TASK_OBJ, task_list);
30001e1c:	e2437004 	sub	r7, r3, #4

	/*Wake up the occupy task, which is the highst priority task on the list*/																										 
	raw_wake_object(tcb);
30001e20:	e1a00007 	mov	r0, r7
30001e24:	eb00020c 	bl	3000265c <raw_wake_object>

	/* Change mutex get task */
	mutex_ptr->mtxtsk = tcb;
	mutex_ptr->mtxlist = tcb->mtxlist;
30001e28:	e597301c 	ldr	r3, [r7, #28]
	tcb->mtxlist = mutex_ptr;
	mutex_ptr->owner_nested = 1u;
30001e2c:	e3a02001 	mov	r2, #1
	/*Wake up the occupy task, which is the highst priority task on the list*/																										 
	raw_wake_object(tcb);

	/* Change mutex get task */
	mutex_ptr->mtxtsk = tcb;
	mutex_ptr->mtxlist = tcb->mtxlist;
30001e30:	e5853014 	str	r3, [r5, #20]
	tcb->mtxlist = mutex_ptr;
30001e34:	e587501c 	str	r5, [r7, #28]
	mutex_ptr->owner_nested = 1u;
	
	if (mutex_ptr->policy == RAW_MUTEX_CEILING_POLICY) {
30001e38:	e5d53018 	ldrb	r3, [r5, #24]

	/* Change mutex get task */
	mutex_ptr->mtxtsk = tcb;
	mutex_ptr->mtxlist = tcb->mtxlist;
	tcb->mtxlist = mutex_ptr;
	mutex_ptr->owner_nested = 1u;
30001e3c:	e5c5201a 	strb	r2, [r5, #26]
	
	if (mutex_ptr->policy == RAW_MUTEX_CEILING_POLICY) {
30001e40:	e3530003 	cmp	r3, #3

	/*Wake up the occupy task, which is the highst priority task on the list*/																										 
	raw_wake_object(tcb);

	/* Change mutex get task */
	mutex_ptr->mtxtsk = tcb;
30001e44:	e5857010 	str	r7, [r5, #16]
	mutex_ptr->mtxlist = tcb->mtxlist;
	tcb->mtxlist = mutex_ptr;
	mutex_ptr->owner_nested = 1u;
	
	if (mutex_ptr->policy == RAW_MUTEX_CEILING_POLICY) {
30001e48:	0a000021 	beq	30001ed4 <raw_mutex_put+0x1d8>
			
		}
		
	}

	TRACE_MUTEX_WAKE_TASK(raw_task_active, tcb);
30001e4c:	e5960000 	ldr	r0, [r6]
30001e50:	e1a01007 	mov	r1, r7
30001e54:	eb00174f 	bl	30007b98 <_trace_mutex_wake_task>
	
	RAW_CRITICAL_EXIT();
30001e58:	e5d43000 	ldrb	r3, [r4]
30001e5c:	e59f4098 	ldr	r4, [pc, #152]	; 30001efc <raw_mutex_put+0x200>
30001e60:	e3530001 	cmp	r3, #1
30001e64:	0a000018 	beq	30001ecc <raw_mutex_put+0x1d0>
30001e68:	eb001762 	bl	30007bf8 <OS_CPU_SR_Save>
30001e6c:	e5d43000 	ldrb	r3, [r4]
30001e70:	e2433001 	sub	r3, r3, #1
30001e74:	e5c43000 	strb	r3, [r4]
30001e78:	eb001766 	bl	30007c18 <OS_CPU_SR_Restore>

	do_possible_sche();                                       
30001e7c:	eb000984 	bl	30004494 <raw_sched>
30001e80:	e3a00000 	mov	r0, #0

	return RAW_SUCCESS;
30001e84:	eaffffa5 	b	30001d20 <raw_mutex_put+0x24>

	mutex_ptr->owner_nested--;

	if (mutex_ptr->owner_nested) {

		RAW_CRITICAL_EXIT();
30001e88:	eb001197 	bl	300064ec <hybrid_int_process>
30001e8c:	e3a00018 	mov	r0, #24
30001e90:	eaffffa2 	b	30001d20 <raw_mutex_put+0x24>

	/*if no block task on this list just return*/
	if (is_list_empty(block_list_head)) {        
		/* No wait task */
		mutex_ptr->mtxtsk = 0;                                    
		RAW_CRITICAL_EXIT();
30001e94:	e5d43000 	ldrb	r3, [r4]
	block_list_head = &mutex_ptr->common_block_obj.block_list;

	/*if no block task on this list just return*/
	if (is_list_empty(block_list_head)) {        
		/* No wait task */
		mutex_ptr->mtxtsk = 0;                                    
30001e98:	e5857010 	str	r7, [r5, #16]
		RAW_CRITICAL_EXIT();
30001e9c:	e3530001 	cmp	r3, #1
30001ea0:	0a000012 	beq	30001ef0 <raw_mutex_put+0x1f4>
30001ea4:	eb001753 	bl	30007bf8 <OS_CPU_SR_Save>
30001ea8:	e5d43000 	ldrb	r3, [r4]
30001eac:	e2433001 	sub	r3, r3, #1
30001eb0:	e5c43000 	strb	r3, [r4]
30001eb4:	eb001757 	bl	30007c18 <OS_CPU_SR_Restore>

		TRACE_MUTEX_RELEASE_SUCCESS(raw_task_active, mutex_ptr);
30001eb8:	e5960000 	ldr	r0, [r6]
30001ebc:	e1a01005 	mov	r1, r5
30001ec0:	eb001733 	bl	30007b94 <_trace_mutex_release_success>
30001ec4:	e3a00000 	mov	r0, #0
		
		return RAW_SUCCESS;
30001ec8:	eaffff94 	b	30001d20 <raw_mutex_put+0x24>
		
	}

	TRACE_MUTEX_WAKE_TASK(raw_task_active, tcb);
	
	RAW_CRITICAL_EXIT();
30001ecc:	eb001186 	bl	300064ec <hybrid_int_process>
30001ed0:	eaffffe9 	b	30001e7c <raw_mutex_put+0x180>
	tcb->mtxlist = mutex_ptr;
	mutex_ptr->owner_nested = 1u;
	
	if (mutex_ptr->policy == RAW_MUTEX_CEILING_POLICY) {
		
		if (tcb->priority > mutex_ptr->ceiling_prio) {
30001ed4:	e5d51019 	ldrb	r1, [r5, #25]
30001ed8:	e5d73019 	ldrb	r3, [r7, #25]
30001edc:	e1530001 	cmp	r3, r1
30001ee0:	9affffd9 	bls	30001e4c <raw_mutex_put+0x150>
		/* Raise the priority of the task that
		got lock to the highest priority limit */
			change_internal_task_priority(tcb, mutex_ptr->ceiling_prio);
30001ee4:	e1a00007 	mov	r0, r7
30001ee8:	eb000df2 	bl	300056b8 <change_internal_task_priority>
30001eec:	eaffffd6 	b	30001e4c <raw_mutex_put+0x150>

	/*if no block task on this list just return*/
	if (is_list_empty(block_list_head)) {        
		/* No wait task */
		mutex_ptr->mtxtsk = 0;                                    
		RAW_CRITICAL_EXIT();
30001ef0:	eb00117d 	bl	300064ec <hybrid_int_process>
30001ef4:	eaffffef 	b	30001eb8 <raw_mutex_put+0x1bc>
30001ef8:	30013e61 	andcc	r3, r1, r1, ror #28
30001efc:	300142c0 	andcc	r4, r1, r0, asr #5
30001f00:	30013838 	andcc	r3, r1, r8, lsr r8

30001f04 <raw_mutex_get>:
*             
************************************************************************************************************************
*/
RAW_U16 raw_mutex_get(RAW_MUTEX *mutex_ptr, RAW_TICK_TYPE wait_option)

{
30001f04:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	RAW_SR_ALLOC();

	#if (RAW_MUTEX_FUNCTION_CHECK > 0)


	if (mutex_ptr == 0) {
30001f08:	e2505000 	subs	r5, r0, #0
*             
************************************************************************************************************************
*/
RAW_U16 raw_mutex_get(RAW_MUTEX *mutex_ptr, RAW_TICK_TYPE wait_option)

{
30001f0c:	e1a06001 	mov	r6, r1
	RAW_SR_ALLOC();

	#if (RAW_MUTEX_FUNCTION_CHECK > 0)


	if (mutex_ptr == 0) {
30001f10:	03a00025 	moveq	r0, #37	; 0x25
30001f14:	0a000004 	beq	30001f2c <raw_mutex_get+0x28>
		return RAW_NULL_OBJECT;
	}

	
	if (raw_int_nesting) {
30001f18:	e59f32b0 	ldr	r3, [pc, #688]	; 300021d0 <raw_mutex_get+0x2cc>
30001f1c:	e5d33000 	ldrb	r3, [r3]
30001f20:	e3530000 	cmp	r3, #0
30001f24:	13a00027 	movne	r0, #39	; 0x27
30001f28:	0a000001 	beq	30001f34 <raw_mutex_get+0x30>

	/*So the task is waked up, need know which reason cause wake up.*/
	error_status = block_state_post_process(raw_task_active, 0);
	
	return error_status;
}
30001f2c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
30001f30:	e12fff1e 	bx	lr
		
	}
	
	#endif

	RAW_CRITICAL_ENTER();
30001f34:	e59f4298 	ldr	r4, [pc, #664]	; 300021d4 <raw_mutex_get+0x2d0>
30001f38:	eb00172e 	bl	30007bf8 <OS_CPU_SR_Save>
30001f3c:	e5d43000 	ldrb	r3, [r4]
30001f40:	e2833001 	add	r3, r3, #1
30001f44:	e5c43000 	strb	r3, [r4]
30001f48:	eb001732 	bl	30007c18 <OS_CPU_SR_Restore>

	if (mutex_ptr->common_block_obj.object_type != RAW_MUTEX_OBJ_TYPE) {
30001f4c:	e5d5300d 	ldrb	r3, [r5, #13]
30001f50:	e3530012 	cmp	r3, #18
30001f54:	0a00000c 	beq	30001f8c <raw_mutex_get+0x88>
		
		RAW_CRITICAL_EXIT();  
30001f58:	e5d43000 	ldrb	r3, [r4]
30001f5c:	e3530001 	cmp	r3, #1
30001f60:	0a000006 	beq	30001f80 <raw_mutex_get+0x7c>
30001f64:	eb001723 	bl	30007bf8 <OS_CPU_SR_Save>
30001f68:	e5d43000 	ldrb	r3, [r4]
30001f6c:	e2433001 	sub	r3, r3, #1
30001f70:	e5c43000 	strb	r3, [r4]
30001f74:	eb001727 	bl	30007c18 <OS_CPU_SR_Restore>
30001f78:	e3a00036 	mov	r0, #54	; 0x36
30001f7c:	eaffffea 	b	30001f2c <raw_mutex_get+0x28>
30001f80:	eb001159 	bl	300064ec <hybrid_int_process>
30001f84:	e3a00036 	mov	r0, #54	; 0x36
30001f88:	eaffffe7 	b	30001f2c <raw_mutex_get+0x28>
		return RAW_ERROR_OBJECT_TYPE;
	}
	
		/*if the same task get the same mutex again, it causes deadlock*/ 
	if (raw_task_active == mutex_ptr->mtxtsk) {
30001f8c:	e59f7244 	ldr	r7, [pc, #580]	; 300021d8 <raw_mutex_get+0x2d4>
30001f90:	e5958010 	ldr	r8, [r5, #16]
30001f94:	e5971000 	ldr	r1, [r7]
30001f98:	e1580001 	cmp	r8, r1
30001f9c:	0a00002e 	beq	3000205c <raw_mutex_get+0x158>
  		RAW_CRITICAL_EXIT();   
		return RAW_MUTEX_OWNER_NESTED;
   }


	if (mutex_ptr->policy == RAW_MUTEX_CEILING_POLICY) {
30001fa0:	e5d53018 	ldrb	r3, [r5, #24]
30001fa4:	e3530003 	cmp	r3, #3
30001fa8:	0a000019 	beq	30002014 <raw_mutex_get+0x110>
	}
	

	mtxtsk = mutex_ptr->mtxtsk;

	if (mtxtsk == 0) {
30001fac:	e3580000 	cmp	r8, #0
30001fb0:	0a000036 	beq	30002090 <raw_mutex_get+0x18c>
		return RAW_SUCCESS;
	}
	

	/*Cann't get mutex, and return immediately if wait_option is  RAW_NO_WAIT*/
	if (wait_option == RAW_NO_WAIT) { 
30001fb4:	e3560000 	cmp	r6, #0
30001fb8:	1a00000a 	bne	30001fe8 <raw_mutex_get+0xe4>

		RAW_CRITICAL_EXIT();
30001fbc:	e5d43000 	ldrb	r3, [r4]
30001fc0:	e59f420c 	ldr	r4, [pc, #524]	; 300021d4 <raw_mutex_get+0x2d0>
30001fc4:	e3530001 	cmp	r3, #1
30001fc8:	0a000048 	beq	300020f0 <raw_mutex_get+0x1ec>
30001fcc:	eb001709 	bl	30007bf8 <OS_CPU_SR_Save>
30001fd0:	e5d43000 	ldrb	r3, [r4]
30001fd4:	e2433001 	sub	r3, r3, #1
30001fd8:	e5c43000 	strb	r3, [r4]
30001fdc:	eb00170d 	bl	30007c18 <OS_CPU_SR_Restore>
30001fe0:	e3a00006 	mov	r0, #6
30001fe4:	eaffffd0 	b	30001f2c <raw_mutex_get+0x28>
		return RAW_NO_PEND_WAIT;

	}

	/*system is locked so task can not be blocked just return immediately*/
	SYSTEM_LOCK_PROCESS();
30001fe8:	e5d42000 	ldrb	r2, [r4]
30001fec:	e59fa1e0 	ldr	sl, [pc, #480]	; 300021d4 <raw_mutex_get+0x2d0>
30001ff0:	e3520001 	cmp	r2, #1
30001ff4:	9a000040 	bls	300020fc <raw_mutex_get+0x1f8>
30001ff8:	eb0016fe 	bl	30007bf8 <OS_CPU_SR_Save>
30001ffc:	e5da3000 	ldrb	r3, [sl]
30002000:	e2433001 	sub	r3, r3, #1
30002004:	e5ca3000 	strb	r3, [sl]
30002008:	eb001702 	bl	30007c18 <OS_CPU_SR_Restore>
3000200c:	e3a00007 	mov	r0, #7
30002010:	eaffffc5 	b	30001f2c <raw_mutex_get+0x28>
   }


	if (mutex_ptr->policy == RAW_MUTEX_CEILING_POLICY) {

		if (raw_task_active->bpriority < mutex_ptr->ceiling_prio) {
30002014:	e5d1001a 	ldrb	r0, [r1, #26]
30002018:	e5d52019 	ldrb	r2, [r5, #25]
3000201c:	e1500002 	cmp	r0, r2
30002020:	2affffe1 	bcs	30001fac <raw_mutex_get+0xa8>
			/* Violation of highest priority limit */
			RAW_CRITICAL_EXIT();
30002024:	e5d43000 	ldrb	r3, [r4]
30002028:	e3530001 	cmp	r3, #1
3000202c:	0a000049 	beq	30002158 <raw_mutex_get+0x254>
30002030:	eb0016f0 	bl	30007bf8 <OS_CPU_SR_Save>
30002034:	e5d43000 	ldrb	r3, [r4]
30002038:	e2433001 	sub	r3, r3, #1
3000203c:	e5c43000 	strb	r3, [r4]
30002040:	eb0016f4 	bl	30007c18 <OS_CPU_SR_Restore>

			TRACE_MUTEX_EX_CE_PRI(raw_task_active, mutex_ptr, wait_option);
30002044:	e5970000 	ldr	r0, [r7]
30002048:	e1a01005 	mov	r1, r5
3000204c:	e1a02006 	mov	r2, r6
30002050:	eb0016cb 	bl	30007b84 <_trace_mutex_ex_ce_pri>
30002054:	e3a0001a 	mov	r0, #26
			return RAW_EXCEED_CEILING_PRIORITY;
30002058:	eaffffb3 	b	30001f2c <raw_mutex_get+0x28>
	}
	
		/*if the same task get the same mutex again, it causes deadlock*/ 
	if (raw_task_active == mutex_ptr->mtxtsk) {
		
		mutex_ptr->owner_nested++;
3000205c:	e5d5301a 	ldrb	r3, [r5, #26]
30002060:	e2833001 	add	r3, r3, #1
30002064:	e5c5301a 	strb	r3, [r5, #26]
  		RAW_CRITICAL_EXIT();   
30002068:	e5d43000 	ldrb	r3, [r4]
3000206c:	e3530001 	cmp	r3, #1
30002070:	0a00003a 	beq	30002160 <raw_mutex_get+0x25c>
30002074:	eb0016df 	bl	30007bf8 <OS_CPU_SR_Save>
30002078:	e5d43000 	ldrb	r3, [r4]
3000207c:	e2433001 	sub	r3, r3, #1
30002080:	e5c43000 	strb	r3, [r4]
30002084:	eb0016e3 	bl	30007c18 <OS_CPU_SR_Restore>
30002088:	e3a00018 	mov	r0, #24
3000208c:	eaffffa6 	b	30001f2c <raw_mutex_get+0x28>
	mtxtsk = mutex_ptr->mtxtsk;

	if (mtxtsk == 0) {
		/* Get lock */
		mutex_ptr->mtxtsk = raw_task_active;
		mutex_ptr->mtxlist = raw_task_active->mtxlist;
30002090:	e591301c 	ldr	r3, [r1, #28]
		raw_task_active->mtxlist = mutex_ptr;
		mutex_ptr->owner_nested = 1u;
30002094:	e3a02001 	mov	r2, #1
	mtxtsk = mutex_ptr->mtxtsk;

	if (mtxtsk == 0) {
		/* Get lock */
		mutex_ptr->mtxtsk = raw_task_active;
		mutex_ptr->mtxlist = raw_task_active->mtxlist;
30002098:	e5853014 	str	r3, [r5, #20]
		raw_task_active->mtxlist = mutex_ptr;
3000209c:	e581501c 	str	r5, [r1, #28]
		mutex_ptr->owner_nested = 1u;
		
		if (mutex_ptr->policy == RAW_MUTEX_CEILING_POLICY) {
300020a0:	e5d53018 	ldrb	r3, [r5, #24]
	if (mtxtsk == 0) {
		/* Get lock */
		mutex_ptr->mtxtsk = raw_task_active;
		mutex_ptr->mtxlist = raw_task_active->mtxlist;
		raw_task_active->mtxlist = mutex_ptr;
		mutex_ptr->owner_nested = 1u;
300020a4:	e5c5201a 	strb	r2, [r5, #26]
		
		if (mutex_ptr->policy == RAW_MUTEX_CEILING_POLICY) {
300020a8:	e3530003 	cmp	r3, #3

	mtxtsk = mutex_ptr->mtxtsk;

	if (mtxtsk == 0) {
		/* Get lock */
		mutex_ptr->mtxtsk = raw_task_active;
300020ac:	e5851010 	str	r1, [r5, #16]
		mutex_ptr->mtxlist = raw_task_active->mtxlist;
		raw_task_active->mtxlist = mutex_ptr;
		mutex_ptr->owner_nested = 1u;
		
		if (mutex_ptr->policy == RAW_MUTEX_CEILING_POLICY) {
300020b0:	0a00002f 	beq	30002174 <raw_mutex_get+0x270>
				change_internal_task_priority(raw_task_active, mutex_ptr->ceiling_prio);
			}

		}

		RAW_CRITICAL_EXIT();
300020b4:	e5d43000 	ldrb	r3, [r4]
300020b8:	e59f4114 	ldr	r4, [pc, #276]	; 300021d4 <raw_mutex_get+0x2d0>
300020bc:	e3530001 	cmp	r3, #1
300020c0:	0a000029 	beq	3000216c <raw_mutex_get+0x268>
300020c4:	eb0016cb 	bl	30007bf8 <OS_CPU_SR_Save>
300020c8:	e5d43000 	ldrb	r3, [r4]
300020cc:	e2433001 	sub	r3, r3, #1
300020d0:	e5c43000 	strb	r3, [r4]
300020d4:	eb0016cf 	bl	30007c18 <OS_CPU_SR_Restore>

		TRACE_MUTEX_GET(raw_task_active, mutex_ptr, wait_option);
300020d8:	e5970000 	ldr	r0, [r7]
300020dc:	e1a01005 	mov	r1, r5
300020e0:	e1a02006 	mov	r2, r6
300020e4:	eb0016a7 	bl	30007b88 <_trace_mutex_get>
300020e8:	e3a00000 	mov	r0, #0
		
		return RAW_SUCCESS;
300020ec:	eaffff8e 	b	30001f2c <raw_mutex_get+0x28>
	

	/*Cann't get mutex, and return immediately if wait_option is  RAW_NO_WAIT*/
	if (wait_option == RAW_NO_WAIT) { 

		RAW_CRITICAL_EXIT();
300020f0:	eb0010fd 	bl	300064ec <hybrid_int_process>
300020f4:	e3a00006 	mov	r0, #6
300020f8:	eaffff8b 	b	30001f2c <raw_mutex_get+0x28>
	SYSTEM_LOCK_PROCESS();

    /*if current task is a higher priority task and block on  the mutex
	  *priority inverse condition happened, priority inherit method is used here*/

	if (mutex_ptr->policy == RAW_MUTEX_INHERIT_POLICY) {
300020fc:	e3530002 	cmp	r3, #2
30002100:	0a000025 	beq	3000219c <raw_mutex_get+0x298>
		}
	}

	
	/*Any way block the current task*/
	raw_pend_object((RAW_COMMON_BLOCK_OBJECT  *)mutex_ptr, raw_task_active, wait_option);
30002104:	e1a00005 	mov	r0, r5
30002108:	e1a02006 	mov	r2, r6
3000210c:	eb000173 	bl	300026e0 <raw_pend_object>

	RAW_CRITICAL_EXIT();
30002110:	e5d43000 	ldrb	r3, [r4]
30002114:	e59f40b8 	ldr	r4, [pc, #184]	; 300021d4 <raw_mutex_get+0x2d0>
30002118:	e3530001 	cmp	r3, #1
3000211c:	0a00001c 	beq	30002194 <raw_mutex_get+0x290>
30002120:	eb0016b4 	bl	30007bf8 <OS_CPU_SR_Save>
30002124:	e5d43000 	ldrb	r3, [r4]
30002128:	e2433001 	sub	r3, r3, #1
3000212c:	e5c43000 	strb	r3, [r4]
30002130:	eb0016b8 	bl	30007c18 <OS_CPU_SR_Restore>

	TRACE_MUTEX_GET_BLOCK(raw_task_active, mutex_ptr, wait_option);
30002134:	e1a01005 	mov	r1, r5
30002138:	e5970000 	ldr	r0, [r7]
3000213c:	e1a02006 	mov	r2, r6
30002140:	eb001692 	bl	30007b90 <_trace_mutex_get_block>

	/*find the next highest priority task ready to run*/
	raw_sched();                                             
30002144:	eb0008d2 	bl	30004494 <raw_sched>

	/*So the task is waked up, need know which reason cause wake up.*/
	error_status = block_state_post_process(raw_task_active, 0);
30002148:	e5970000 	ldr	r0, [r7]
3000214c:	e3a01000 	mov	r1, #0
30002150:	eb000acf 	bl	30004c94 <block_state_post_process>
	
	return error_status;
30002154:	eaffff74 	b	30001f2c <raw_mutex_get+0x28>

	if (mutex_ptr->policy == RAW_MUTEX_CEILING_POLICY) {

		if (raw_task_active->bpriority < mutex_ptr->ceiling_prio) {
			/* Violation of highest priority limit */
			RAW_CRITICAL_EXIT();
30002158:	eb0010e3 	bl	300064ec <hybrid_int_process>
3000215c:	eaffffb8 	b	30002044 <raw_mutex_get+0x140>
	
		/*if the same task get the same mutex again, it causes deadlock*/ 
	if (raw_task_active == mutex_ptr->mtxtsk) {
		
		mutex_ptr->owner_nested++;
  		RAW_CRITICAL_EXIT();   
30002160:	eb0010e1 	bl	300064ec <hybrid_int_process>
30002164:	e3a00018 	mov	r0, #24
30002168:	eaffff6f 	b	30001f2c <raw_mutex_get+0x28>
				change_internal_task_priority(raw_task_active, mutex_ptr->ceiling_prio);
			}

		}

		RAW_CRITICAL_EXIT();
3000216c:	eb0010de 	bl	300064ec <hybrid_int_process>
30002170:	eaffffd8 	b	300020d8 <raw_mutex_get+0x1d4>
		raw_task_active->mtxlist = mutex_ptr;
		mutex_ptr->owner_nested = 1u;
		
		if (mutex_ptr->policy == RAW_MUTEX_CEILING_POLICY) {
			
			if (raw_task_active->priority > mutex_ptr->ceiling_prio) {
30002174:	e5d53019 	ldrb	r3, [r5, #25]
30002178:	e5d12019 	ldrb	r2, [r1, #25]
3000217c:	e1520003 	cmp	r2, r3
30002180:	9affffcb 	bls	300020b4 <raw_mutex_get+0x1b0>
				/* Raise its own task to the highest
				   priority limit */
				change_internal_task_priority(raw_task_active, mutex_ptr->ceiling_prio);
30002184:	e1a00001 	mov	r0, r1
30002188:	e1a01003 	mov	r1, r3
3000218c:	eb000d49 	bl	300056b8 <change_internal_task_priority>
30002190:	eaffffc7 	b	300020b4 <raw_mutex_get+0x1b0>

	
	/*Any way block the current task*/
	raw_pend_object((RAW_COMMON_BLOCK_OBJECT  *)mutex_ptr, raw_task_active, wait_option);

	RAW_CRITICAL_EXIT();
30002194:	eb0010d4 	bl	300064ec <hybrid_int_process>
30002198:	eaffffe5 	b	30002134 <raw_mutex_get+0x230>
    /*if current task is a higher priority task and block on  the mutex
	  *priority inverse condition happened, priority inherit method is used here*/

	if (mutex_ptr->policy == RAW_MUTEX_INHERIT_POLICY) {
		
		if (raw_task_active->priority < mtxtsk->priority) {
3000219c:	e5d12019 	ldrb	r2, [r1, #25]
300021a0:	e5d83019 	ldrb	r3, [r8, #25]
300021a4:	e1520003 	cmp	r2, r3
300021a8:	2affffd5 	bcs	30002104 <raw_mutex_get+0x200>

			TRACE_TASK_PRI_INV(raw_task_active, mtxtsk);
300021ac:	e1a00001 	mov	r0, r1
300021b0:	e1a01008 	mov	r1, r8
300021b4:	eb001674 	bl	30007b8c <_trace_task_pri_inv>
			change_internal_task_priority(mtxtsk, raw_task_active->priority);
300021b8:	e5973000 	ldr	r3, [r7]
300021bc:	e1a00008 	mov	r0, r8
300021c0:	e5d31019 	ldrb	r1, [r3, #25]
300021c4:	eb000d3b 	bl	300056b8 <change_internal_task_priority>
300021c8:	e5971000 	ldr	r1, [r7]
300021cc:	eaffffcc 	b	30002104 <raw_mutex_get+0x200>
300021d0:	30013e61 	andcc	r3, r1, r1, ror #28
300021d4:	300142c0 	andcc	r4, r1, r0, asr #5
300021d8:	30013838 	andcc	r3, r1, r8, lsr r8

300021dc <raw_mutex_create>:
*                   if CONFIG_RAW_ZERO_INTERRUPT is set, then ceiling_prio 0 is not allowed!
*             
************************************************************************************************************************
*/
RAW_U16 raw_mutex_create(RAW_MUTEX *mutex_ptr, RAW_U8 *name_ptr, RAW_U8 policy, RAW_U8 ceiling_prio)
{
300021dc:	e92d4070 	push	{r4, r5, r6, lr}
	
	
	#if (RAW_MUTEX_FUNCTION_CHECK > 0)

	if (mutex_ptr == 0) {
300021e0:	e2506000 	subs	r6, r0, #0
*                   if CONFIG_RAW_ZERO_INTERRUPT is set, then ceiling_prio 0 is not allowed!
*             
************************************************************************************************************************
*/
RAW_U16 raw_mutex_create(RAW_MUTEX *mutex_ptr, RAW_U8 *name_ptr, RAW_U8 policy, RAW_U8 ceiling_prio)
{
300021e4:	e24dd008 	sub	sp, sp, #8
300021e8:	e1a05001 	mov	r5, r1
300021ec:	e1a0c002 	mov	ip, r2
300021f0:	e1a04003 	mov	r4, r3
	
	
	#if (RAW_MUTEX_FUNCTION_CHECK > 0)

	if (mutex_ptr == 0) {
300021f4:	03a00025 	moveq	r0, #37	; 0x25
300021f8:	0a00001b 	beq	3000226c <raw_mutex_create+0x90>
		return RAW_NULL_OBJECT;
	}

	if ((policy != RAW_MUTEX_CEILING_POLICY) && (policy != RAW_MUTEX_INHERIT_POLICY) && (policy != RAW_MUTEX_NONE_POLICY)) {
300021fc:	e2423002 	sub	r3, r2, #2
30002200:	e3530002 	cmp	r3, #2
30002204:	83a0001c 	movhi	r0, #28
30002208:	8a000017 	bhi	3000226c <raw_mutex_create+0x90>
	
	#endif
	
	/*Init the list*/
	list_init(&mutex_ptr->common_block_obj.block_list);
	mutex_ptr->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
3000220c:	e3a03000 	mov	r3, #0

	mutex_ptr->policy = policy;

	#if (CONFIG_RAW_TASK_0 > 0)

	if (policy == RAW_MUTEX_CEILING_POLICY) {
30002210:	e3520003 	cmp	r2, #3
	list_init(&mutex_ptr->common_block_obj.block_list);
	mutex_ptr->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
	mutex_ptr->common_block_obj.name  =  name_ptr;
	/*No one occupy mutex yet*/
	mutex_ptr->mtxtsk 		= 0;
	mutex_ptr->mtxlist 		= 0;
30002214:	e5863014 	str	r3, [r6, #20]
/*
 * List initialization
 */
RAW_INLINE void list_init(LIST *list_head)
{
	list_head->next = list_head;
30002218:	e5866000 	str	r6, [r6]
	list_head->previous = list_head;
3000221c:	e5866004 	str	r6, [r6, #4]
	
	#endif
	
	/*Init the list*/
	list_init(&mutex_ptr->common_block_obj.block_list);
	mutex_ptr->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
30002220:	e5c6300c 	strb	r3, [r6, #12]
	mutex_ptr->common_block_obj.name  =  name_ptr;
30002224:	e5861008 	str	r1, [r6, #8]
	/*No one occupy mutex yet*/
	mutex_ptr->mtxtsk 		= 0;
30002228:	e5863010 	str	r3, [r6, #16]
	mutex_ptr->mtxlist 		= 0;

	mutex_ptr->policy = policy;
3000222c:	e5c62018 	strb	r2, [r6, #24]

	#if (CONFIG_RAW_TASK_0 > 0)

	if (policy == RAW_MUTEX_CEILING_POLICY) {
30002230:	1a000002 	bne	30002240 <raw_mutex_create+0x64>
		
		if (ceiling_prio == 0) {
30002234:	e1540003 	cmp	r4, r3
30002238:	03a0001b 	moveq	r0, #27
3000223c:	0a00000a 	beq	3000226c <raw_mutex_create+0x90>
	}
	
	#endif
	
	mutex_ptr->ceiling_prio = ceiling_prio;
	mutex_ptr->common_block_obj.object_type = RAW_MUTEX_OBJ_TYPE;
30002240:	e3a03012 	mov	r3, #18
30002244:	e5c6300d 	strb	r3, [r6, #13]

	TRACE_MUTEX_CREATE(raw_task_active, mutex_ptr, name_ptr, policy, ceiling_prio);
30002248:	e59f3028 	ldr	r3, [pc, #40]	; 30002278 <raw_mutex_create+0x9c>
		}
	}
	
	#endif
	
	mutex_ptr->ceiling_prio = ceiling_prio;
3000224c:	e5c64019 	strb	r4, [r6, #25]
	mutex_ptr->common_block_obj.object_type = RAW_MUTEX_OBJ_TYPE;

	TRACE_MUTEX_CREATE(raw_task_active, mutex_ptr, name_ptr, policy, ceiling_prio);
30002250:	e5930000 	ldr	r0, [r3]
30002254:	e1a01006 	mov	r1, r6
30002258:	e1a02005 	mov	r2, r5
3000225c:	e1a0300c 	mov	r3, ip
30002260:	e58d4000 	str	r4, [sp]
30002264:	eb001644 	bl	30007b7c <_trace_mutex_create>
30002268:	e3a00000 	mov	r0, #0
	
	return RAW_SUCCESS;

}
3000226c:	e28dd008 	add	sp, sp, #8
30002270:	e8bd4070 	pop	{r4, r5, r6, lr}
30002274:	e12fff1e 	bx	lr
30002278:	30013838 	andcc	r3, r1, r8, lsr r8

3000227c <run_queue_init>:

void run_queue_init(RAW_RUN_QUEUE *rq)
{
	RAW_U8 i;
   /*Inisialize the lowest priority to run queue*/
	rq->highest_priority = CONFIG_RAW_PRIO_MAX;
3000227c:	e3a0303e 	mov	r3, #62	; 0x3e
30002280:	e3a02000 	mov	r2, #0
30002284:	e5c03000 	strb	r3, [r0]
30002288:	e1a03002 	mov	r3, r2
	 
	/*List init for run queue*/
	for (i = 0; i < CONFIG_RAW_PRIO_MAX; i++ ) {
		list_init(&rq->task_ready_list[i]);
3000228c:	e080c183 	add	ip, r0, r3, lsl #3
30002290:	e2833001 	add	r3, r3, #1
  *	xxxxxx   please added here
  */

#include <raw_api.h>

void run_queue_init(RAW_RUN_QUEUE *rq)
30002294:	e0801002 	add	r1, r0, r2
   /*Inisialize the lowest priority to run queue*/
	rq->highest_priority = CONFIG_RAW_PRIO_MAX;
	 
	/*List init for run queue*/
	for (i = 0; i < CONFIG_RAW_PRIO_MAX; i++ ) {
		list_init(&rq->task_ready_list[i]);
30002298:	e28cc004 	add	ip, ip, #4
	RAW_U8 i;
   /*Inisialize the lowest priority to run queue*/
	rq->highest_priority = CONFIG_RAW_PRIO_MAX;
	 
	/*List init for run queue*/
	for (i = 0; i < CONFIG_RAW_PRIO_MAX; i++ ) {
3000229c:	e353003e 	cmp	r3, #62	; 0x3e
300022a0:	e581c008 	str	ip, [r1, #8]
/*
 * List initialization
 */
RAW_INLINE void list_init(LIST *list_head)
{
	list_head->next = list_head;
300022a4:	e581c004 	str	ip, [r1, #4]
	list_head->previous = list_head;
300022a8:	e2822008 	add	r2, r2, #8
300022ac:	1afffff6 	bne	3000228c <run_queue_init+0x10>
		list_init(&rq->task_ready_list[i]);
	}

}
300022b0:	e12fff1e 	bx	lr

300022b4 <add_ready_list_head>:
}


/*add task_ptr to the ready list head*/
void add_ready_list_head(RAW_RUN_QUEUE *rq, RAW_TASK_OBJ *task_ptr)
{
300022b4:	e92d0030 	push	{r4, r5}
	RAW_U8 priority = task_ptr->priority;
300022b8:	e5d13019 	ldrb	r3, [r1, #25]

	list_insert(rq->task_ready_list[priority].next, &task_ptr->task_list);
300022bc:	e281c004 	add	ip, r1, #4
300022c0:	e0802183 	add	r2, r0, r3, lsl #3
300022c4:	e5922004 	ldr	r2, [r2, #4]
	cp = (RAW_U8 *)base;
	cp += offset >> 3;

	mask = _BIT_SET_N(offset);

	*cp |= mask;
300022c8:	e3a05001 	mov	r5, #1
 * add element before head.
 */
RAW_INLINE void list_insert(LIST *head, LIST *element)
{
	
	element->previous = head->previous;
300022cc:	e5924004 	ldr	r4, [r2, #4]
	element->next = head;
300022d0:	e9810014 	stmib	r1, {r2, r4}
	
	head->previous->next = element;	
300022d4:	e5921004 	ldr	r1, [r2, #4]
	head->previous = element;
300022d8:	e582c004 	str	ip, [r2, #4]
{
	
	element->previous = head->previous;
	element->next = head;
	
	head->previous->next = element;	
300022dc:	e581c000 	str	ip, [r1]
RAW_INLINE void bit_set( void *base, RAW_U8 offset)
{
	register RAW_U8 *cp, mask;
	
	cp = (RAW_U8 *)base;
	cp += offset >> 3;
300022e0:	e1a021a3 	lsr	r2, r3, #3

RAW_INLINE void bit_set( void *base, RAW_U8 offset)
{
	register RAW_U8 *cp, mask;
	
	cp = (RAW_U8 *)base;
300022e4:	e2801f7d 	add	r1, r0, #500	; 0x1f4
	cp += offset >> 3;

	mask = _BIT_SET_N(offset);

	*cp |= mask;
300022e8:	e7d14002 	ldrb	r4, [r1, r2]
300022ec:	e203c007 	and	ip, r3, #7
300022f0:	e184cc15 	orr	ip, r4, r5, lsl ip
300022f4:	e7c1c002 	strb	ip, [r1, r2]

	list_insert(rq->task_ready_list[priority].next, &task_ptr->task_list);
	bit_set(rq->task_bit_map, priority);

	/*update highest_priority if task has higher priority*/
	if (priority < rq->highest_priority) {
300022f8:	e5d02000 	ldrb	r2, [r0]
300022fc:	e1520003 	cmp	r2, r3
		rq->highest_priority = priority;
30002300:	85c03000 	strbhi	r3, [r0]
	}	

}
30002304:	e8bd0030 	pop	{r4, r5}
30002308:	e12fff1e 	bx	lr

3000230c <add_ready_list_end>:



/*add task_ptr to the ready list end*/
void add_ready_list_end(RAW_RUN_QUEUE *rq, RAW_TASK_OBJ *task_ptr)
{
3000230c:	e92d0030 	push	{r4, r5}

	RAW_U8	 priority = task_ptr->priority;
30002310:	e5d13019 	ldrb	r3, [r1, #25]

	list_insert(&rq->task_ready_list[priority], &task_ptr->task_list);
30002314:	e281c004 	add	ip, r1, #4
 * add element before head.
 */
RAW_INLINE void list_insert(LIST *head, LIST *element)
{
	
	element->previous = head->previous;
30002318:	e0802183 	add	r2, r0, r3, lsl #3
3000231c:	e5924008 	ldr	r4, [r2, #8]
	element->next = head;
30002320:	e2825004 	add	r5, r2, #4
 * add element before head.
 */
RAW_INLINE void list_insert(LIST *head, LIST *element)
{
	
	element->previous = head->previous;
30002324:	e5814008 	str	r4, [r1, #8]
	element->next = head;
	
	head->previous->next = element;	
30002328:	e5924008 	ldr	r4, [r2, #8]
 */
RAW_INLINE void list_insert(LIST *head, LIST *element)
{
	
	element->previous = head->previous;
	element->next = head;
3000232c:	e5815004 	str	r5, [r1, #4]
	
	head->previous->next = element;	
	head->previous = element;
30002330:	e582c008 	str	ip, [r2, #8]
{
	
	element->previous = head->previous;
	element->next = head;
	
	head->previous->next = element;	
30002334:	e584c000 	str	ip, [r4]
RAW_INLINE void bit_set( void *base, RAW_U8 offset)
{
	register RAW_U8 *cp, mask;
	
	cp = (RAW_U8 *)base;
	cp += offset >> 3;
30002338:	e1a021a3 	lsr	r2, r3, #3

RAW_INLINE void bit_set( void *base, RAW_U8 offset)
{
	register RAW_U8 *cp, mask;
	
	cp = (RAW_U8 *)base;
3000233c:	e2801f7d 	add	r1, r0, #500	; 0x1f4
	cp += offset >> 3;

	mask = _BIT_SET_N(offset);

	*cp |= mask;
30002340:	e7d14002 	ldrb	r4, [r1, r2]
30002344:	e203c007 	and	ip, r3, #7
30002348:	e3a05001 	mov	r5, #1
3000234c:	e184cc15 	orr	ip, r4, r5, lsl ip
30002350:	e7c1c002 	strb	ip, [r1, r2]

	list_insert(&rq->task_ready_list[priority], &task_ptr->task_list);
	bit_set(rq->task_bit_map, priority);

	/*update highest_priority if current task has higher priority*/
	if (priority < rq->highest_priority) {
30002354:	e5d02000 	ldrb	r2, [r0]
30002358:	e1520003 	cmp	r2, r3

		rq->highest_priority = priority;
3000235c:	85c03000 	strbhi	r3, [r0]

	}	
	

}
30002360:	e8bd0030 	pop	{r4, r5}
30002364:	e12fff1e 	bx	lr

30002368 <add_ready_list>:



void add_ready_list(RAW_RUN_QUEUE *rq, RAW_TASK_OBJ *task_ptr)
{
30002368:	e92d0030 	push	{r4, r5}
	/*if task priority is equal current task priority then add to the end*/
	if (task_ptr->priority == raw_task_active->priority) {
3000236c:	e59f30b0 	ldr	r3, [pc, #176]	; 30002424 <add_ready_list+0xbc>
30002370:	e5932000 	ldr	r2, [r3]
30002374:	e5d13019 	ldrb	r3, [r1, #25]
30002378:	e5d22019 	ldrb	r2, [r2, #25]
3000237c:	e1520003 	cmp	r2, r3
30002380:	0a000013 	beq	300023d4 <add_ready_list+0x6c>
/*add task_ptr to the ready list head*/
void add_ready_list_head(RAW_RUN_QUEUE *rq, RAW_TASK_OBJ *task_ptr)
{
	RAW_U8 priority = task_ptr->priority;

	list_insert(rq->task_ready_list[priority].next, &task_ptr->task_list);
30002384:	e0802183 	add	r2, r0, r3, lsl #3
30002388:	e5922004 	ldr	r2, [r2, #4]
3000238c:	e281c004 	add	ip, r1, #4
 * add element before head.
 */
RAW_INLINE void list_insert(LIST *head, LIST *element)
{
	
	element->previous = head->previous;
30002390:	e5924004 	ldr	r4, [r2, #4]
	element->next = head;
30002394:	e9810014 	stmib	r1, {r2, r4}
	
	head->previous->next = element;	
30002398:	e5921004 	ldr	r1, [r2, #4]
	head->previous = element;
3000239c:	e582c004 	str	ip, [r2, #4]
{
	
	element->previous = head->previous;
	element->next = head;
	
	head->previous->next = element;	
300023a0:	e581c000 	str	ip, [r1]
RAW_INLINE void bit_set( void *base, RAW_U8 offset)
{
	register RAW_U8 *cp, mask;
	
	cp = (RAW_U8 *)base;
	cp += offset >> 3;
300023a4:	e1a021a3 	lsr	r2, r3, #3

RAW_INLINE void bit_set( void *base, RAW_U8 offset)
{
	register RAW_U8 *cp, mask;
	
	cp = (RAW_U8 *)base;
300023a8:	e2801f7d 	add	r1, r0, #500	; 0x1f4
	cp += offset >> 3;

	mask = _BIT_SET_N(offset);

	*cp |= mask;
300023ac:	e7d14002 	ldrb	r4, [r1, r2]
300023b0:	e203c007 	and	ip, r3, #7
300023b4:	e3a05001 	mov	r5, #1
300023b8:	e184cc15 	orr	ip, r4, r5, lsl ip
300023bc:	e7c1c002 	strb	ip, [r1, r2]

	list_insert(rq->task_ready_list[priority].next, &task_ptr->task_list);
	bit_set(rq->task_bit_map, priority);

	/*update highest_priority if task has higher priority*/
	if (priority < rq->highest_priority) {
300023c0:	e5d02000 	ldrb	r2, [r0]
300023c4:	e1520003 	cmp	r2, r3
		rq->highest_priority = priority;
300023c8:	85c03000 	strbhi	r3, [r0]
	/*if not add to the list front*/
	else {
		add_ready_list_head(rq, task_ptr);
	}
	
}
300023cc:	e8bd0030 	pop	{r4, r5}
300023d0:	e12fff1e 	bx	lr
 * add element before head.
 */
RAW_INLINE void list_insert(LIST *head, LIST *element)
{
	
	element->previous = head->previous;
300023d4:	e0803182 	add	r3, r0, r2, lsl #3
300023d8:	e5934008 	ldr	r4, [r3, #8]
void add_ready_list_end(RAW_RUN_QUEUE *rq, RAW_TASK_OBJ *task_ptr)
{

	RAW_U8	 priority = task_ptr->priority;

	list_insert(&rq->task_ready_list[priority], &task_ptr->task_list);
300023dc:	e281c004 	add	ip, r1, #4
300023e0:	e5814008 	str	r4, [r1, #8]
	element->next = head;
	
	head->previous->next = element;	
300023e4:	e5934008 	ldr	r4, [r3, #8]
 */
RAW_INLINE void list_insert(LIST *head, LIST *element)
{
	
	element->previous = head->previous;
	element->next = head;
300023e8:	e2835004 	add	r5, r3, #4
300023ec:	e5815004 	str	r5, [r1, #4]
	
	head->previous->next = element;	
	head->previous = element;
300023f0:	e583c008 	str	ip, [r3, #8]
{
	
	element->previous = head->previous;
	element->next = head;
	
	head->previous->next = element;	
300023f4:	e584c000 	str	ip, [r4]
RAW_INLINE void bit_set( void *base, RAW_U8 offset)
{
	register RAW_U8 *cp, mask;
	
	cp = (RAW_U8 *)base;
	cp += offset >> 3;
300023f8:	e1a031a2 	lsr	r3, r2, #3

RAW_INLINE void bit_set( void *base, RAW_U8 offset)
{
	register RAW_U8 *cp, mask;
	
	cp = (RAW_U8 *)base;
300023fc:	e2801f7d 	add	r1, r0, #500	; 0x1f4
	cp += offset >> 3;

	mask = _BIT_SET_N(offset);

	*cp |= mask;
30002400:	e7d14003 	ldrb	r4, [r1, r3]
30002404:	e202c007 	and	ip, r2, #7
30002408:	e3a05001 	mov	r5, #1
3000240c:	e184cc15 	orr	ip, r4, r5, lsl ip
30002410:	e7c1c003 	strb	ip, [r1, r3]

	list_insert(&rq->task_ready_list[priority], &task_ptr->task_list);
	bit_set(rq->task_bit_map, priority);

	/*update highest_priority if current task has higher priority*/
	if (priority < rq->highest_priority) {
30002414:	e5d03000 	ldrb	r3, [r0]
30002418:	e1530002 	cmp	r3, r2

		rq->highest_priority = priority;
3000241c:	85c02000 	strbhi	r2, [r0]
30002420:	eaffffe9 	b	300023cc <add_ready_list+0x64>
30002424:	30013838 	andcc	r3, r1, r8, lsr r8

30002428 <move_to_ready_list_end>:


RAW_INLINE void list_delete(LIST *element)
{

	element->previous->next = element->next;
30002428:	e5912008 	ldr	r2, [r1, #8]
3000242c:	e5913004 	ldr	r3, [r1, #4]
}



void move_to_ready_list_end(RAW_RUN_QUEUE *rq, RAW_TASK_OBJ *task_ptr)
{
30002430:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)

	LIST *head = &rq->task_ready_list[task_ptr->priority];
30002434:	e5d14019 	ldrb	r4, [r1, #25]
30002438:	e5823000 	str	r3, [r2]
	element->next->previous = element->previous;
3000243c:	e1a03001 	mov	r3, r1
30002440:	e5b3c004 	ldr	ip, [r3, #4]!
 * add element before head.
 */
RAW_INLINE void list_insert(LIST *head, LIST *element)
{
	
	element->previous = head->previous;
30002444:	e0800184 	add	r0, r0, r4, lsl #3

RAW_INLINE void list_delete(LIST *element)
{

	element->previous->next = element->next;
	element->next->previous = element->previous;
30002448:	e58c2004 	str	r2, [ip, #4]
 * add element before head.
 */
RAW_INLINE void list_insert(LIST *head, LIST *element)
{
	
	element->previous = head->previous;
3000244c:	e5902008 	ldr	r2, [r0, #8]
	element->next = head;
30002450:	e280c004 	add	ip, r0, #4
30002454:	e581c004 	str	ip, [r1, #4]
 * add element before head.
 */
RAW_INLINE void list_insert(LIST *head, LIST *element)
{
	
	element->previous = head->previous;
30002458:	e5812008 	str	r2, [r1, #8]
	element->next = head;
	
	head->previous->next = element;	
3000245c:	e5823000 	str	r3, [r2]
	head->previous = element;
30002460:	e5803008 	str	r3, [r0, #8]
	/*delete it first than add to list end again*/
	list_delete(&task_ptr->task_list);
	list_insert(head, &task_ptr->task_list);
	
}
30002464:	e8bd0010 	pop	{r4}
30002468:	e12fff1e 	bx	lr

3000246c <get_ready_task>:
void get_ready_task(RAW_RUN_QUEUE *rq)
{
	LIST *node;
	RAW_U8 highest_pri;
	
	if (task_0_events) {
3000246c:	e59f302c 	ldr	r3, [pc, #44]	; 300024a0 <get_ready_task+0x34>
30002470:	e1d330b0 	ldrh	r3, [r3]
30002474:	e3530000 	cmp	r3, #0
	highest_pri = rq->highest_priority;
	/*Highest priority task must be the first element on the list*/
	node = rq->task_ready_list[highest_pri].next;

	/*Get the highest priority task object*/
	high_ready_obj = list_entry(node, RAW_TASK_OBJ, task_list);
30002478:	05d03000 	ldrbeq	r3, [r0]
	LIST *node;
	RAW_U8 highest_pri;
	
	if (task_0_events) {

		high_ready_obj = &raw_task_0_obj;
3000247c:	159f2020 	ldrne	r2, [pc, #32]	; 300024a4 <get_ready_task+0x38>
	highest_pri = rq->highest_priority;
	/*Highest priority task must be the first element on the list*/
	node = rq->task_ready_list[highest_pri].next;

	/*Get the highest priority task object*/
	high_ready_obj = list_entry(node, RAW_TASK_OBJ, task_list);
30002480:	00800183 	addeq	r0, r0, r3, lsl #3
30002484:	05902004 	ldreq	r2, [r0, #4]
	LIST *node;
	RAW_U8 highest_pri;
	
	if (task_0_events) {

		high_ready_obj = &raw_task_0_obj;
30002488:	159f3018 	ldrne	r3, [pc, #24]	; 300024a8 <get_ready_task+0x3c>
	highest_pri = rq->highest_priority;
	/*Highest priority task must be the first element on the list*/
	node = rq->task_ready_list[highest_pri].next;

	/*Get the highest priority task object*/
	high_ready_obj = list_entry(node, RAW_TASK_OBJ, task_list);
3000248c:	059f3014 	ldreq	r3, [pc, #20]	; 300024a8 <get_ready_task+0x3c>
30002490:	02422004 	subeq	r2, r2, #4
	LIST *node;
	RAW_U8 highest_pri;
	
	if (task_0_events) {

		high_ready_obj = &raw_task_0_obj;
30002494:	15832000 	strne	r2, [r3]
	highest_pri = rq->highest_priority;
	/*Highest priority task must be the first element on the list*/
	node = rq->task_ready_list[highest_pri].next;

	/*Get the highest priority task object*/
	high_ready_obj = list_entry(node, RAW_TASK_OBJ, task_list);
30002498:	05832000 	streq	r2, [r3]
3000249c:	e12fff1e 	bx	lr
300024a0:	30012b50 	andcc	r2, r1, r0, asr fp
300024a4:	300142c8 	andcc	r4, r1, r8, asr #5
300024a8:	30013e64 	andcc	r3, r1, r4, ror #28

300024ac <change_pend_list_priority>:


void change_pend_list_priority(RAW_TASK_OBJ *task_ptr)
{

	RAW_COMMON_BLOCK_OBJECT *temp = task_ptr->block_obj;
300024ac:	e5901054 	ldr	r1, [r0, #84]	; 0x54
300024b0:	e5d1300c 	ldrb	r3, [r1, #12]
300024b4:	e3530000 	cmp	r3, #0
300024b8:	112fff1e 	bxne	lr


RAW_INLINE void list_delete(LIST *element)
{

	element->previous->next = element->next;
300024bc:	e5902008 	ldr	r2, [r0, #8]
300024c0:	e5903004 	ldr	r3, [r0, #4]
300024c4:	e5823000 	str	r3, [r2]
	element->next->previous = element->previous;
300024c8:	e590c004 	ldr	ip, [r0, #4]

	list_start = list_end = head;
	val = task_ptr->priority;
	
	/*Find the right position to insert*/ 
	for (q = list_start->next; q != list_end; q = q->next) {
300024cc:	e5913000 	ldr	r3, [r1]
300024d0:	e58c2004 	str	r2, [ip, #4]
300024d4:	e1510003 	cmp	r1, r3
	RAW_U8 val;
	
	LIST *q, *list_start, *list_end;

	list_start = list_end = head;
	val = task_ptr->priority;
300024d8:	e5d0c019 	ldrb	ip, [r0, #25]
	
	/*Find the right position to insert*/ 
	for (q = list_start->next; q != list_end; q = q->next) {
300024dc:	1a000003 	bne	300024f0 <change_pend_list_priority+0x44>
300024e0:	ea00000d 	b	3000251c <change_pend_list_priority+0x70>
300024e4:	e5933000 	ldr	r3, [r3]
300024e8:	e1510003 	cmp	r1, r3
300024ec:	0a00000a 	beq	3000251c <change_pend_list_priority+0x70>
		if (list_entry(q, RAW_TASK_OBJ, task_list)->priority > val) {
300024f0:	e5d32015 	ldrb	r2, [r3, #21]
300024f4:	e152000c 	cmp	r2, ip
300024f8:	9afffff9 	bls	300024e4 <change_pend_list_priority+0x38>
 * add element before head.
 */
RAW_INLINE void list_insert(LIST *head, LIST *element)
{
	
	element->previous = head->previous;
300024fc:	e5931004 	ldr	r1, [r3, #4]
			break;
		}
	}

	list_insert(q, &task_ptr->task_list);
30002500:	e2802004 	add	r2, r0, #4
30002504:	e5801008 	str	r1, [r0, #8]
	element->next = head;
	
	head->previous->next = element;	
30002508:	e5931004 	ldr	r1, [r3, #4]
 */
RAW_INLINE void list_insert(LIST *head, LIST *element)
{
	
	element->previous = head->previous;
	element->next = head;
3000250c:	e5803004 	str	r3, [r0, #4]
	
	head->previous->next = element;	
	head->previous = element;
30002510:	e5832004 	str	r2, [r3, #4]
{
	
	element->previous = head->previous;
	element->next = head;
	
	head->previous->next = element;	
30002514:	e5812000 	str	r2, [r1]
30002518:	e12fff1e 	bx	lr

	list_start = list_end = head;
	val = task_ptr->priority;
	
	/*Find the right position to insert*/ 
	for (q = list_start->next; q != list_end; q = q->next) {
3000251c:	e1a03001 	mov	r3, r1
30002520:	eafffff5 	b	300024fc <change_pend_list_priority+0x50>

30002524 <delete_pend_obj>:
	return RAW_SUCCESS;
}


RAW_U16 delete_pend_obj(RAW_TASK_OBJ *task_ptr)																	
{
30002524:	e92d4010 	push	{r4, lr}
	switch (task_ptr->task_state) {
30002528:	e5d03050 	ldrb	r3, [r0, #80]	; 0x50
	return RAW_SUCCESS;
}


RAW_U16 delete_pend_obj(RAW_TASK_OBJ *task_ptr)																	
{
3000252c:	e1a04000 	mov	r4, r0
	switch (task_ptr->task_state) {
30002530:	e2433001 	sub	r3, r3, #1
30002534:	e3530004 	cmp	r3, #4
30002538:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
3000253c:	ea00000a 	b	3000256c <delete_pend_obj+0x48>
30002540:	3000258c 	andcc	r2, r0, ip, lsl #11
30002544:	3000258c 	andcc	r2, r0, ip, lsl #11
30002548:	30002554 	andcc	r2, r0, r4, asr r5
3000254c:	3000256c 	andcc	r2, r0, ip, ror #10
30002550:	30002554 	andcc	r2, r0, r4, asr r5


RAW_INLINE void list_delete(LIST *element)
{

	element->previous->next = element->next;
30002554:	e990000c 	ldmib	r0, {r2, r3}
30002558:	e5832000 	str	r2, [r3]
	element->next->previous = element->previous;
3000255c:	e5902004 	ldr	r2, [r0, #4]
30002560:	e5823004 	str	r3, [r2, #4]
		case RAW_PEND_TIMEOUT_SUSPENDED:
                               
			/*remove task on the block list because task is waken up*/
			list_delete(&task_ptr->task_list);
		
			task_ptr->task_state = RAW_SUSPENDED;
30002564:	e3a03004 	mov	r3, #4
30002568:	e5c03050 	strb	r3, [r0, #80]	; 0x50
			RAW_ASSERT(0);
			
	}

	/*remove task on the tick list because task is waken up*/     
	tick_list_remove(task_ptr);
3000256c:	e1a00004 	mov	r0, r4
30002570:	eb001135 	bl	30006a4c <tick_list_remove>
	task_ptr->block_status = RAW_B_DEL;  

	/*task is nothing blocked on so reset it to 0*/
	task_ptr->block_obj = 0;
30002574:	e3a00000 	mov	r0, #0
			
	}

	/*remove task on the tick list because task is waken up*/     
	tick_list_remove(task_ptr);
	task_ptr->block_status = RAW_B_DEL;  
30002578:	e3a03003 	mov	r3, #3
3000257c:	e5c43051 	strb	r3, [r4, #81]	; 0x51

	/*task is nothing blocked on so reset it to 0*/
	task_ptr->block_obj = 0;
30002580:	e5840054 	str	r0, [r4, #84]	; 0x54
	
	return RAW_SUCCESS;

}
30002584:	e8bd4010 	pop	{r4, lr}
30002588:	e12fff1e 	bx	lr


RAW_INLINE void list_delete(LIST *element)
{

	element->previous->next = element->next;
3000258c:	e990000c 	ldmib	r0, {r2, r3}
		case RAW_PEND_TIMEOUT:
		    
			/*remove task on the block list because task is waken up*/
			list_delete(&task_ptr->task_list);
           /*add to the ready list again*/        
			add_ready_list(&raw_ready_queue, task_ptr);
30002590:	e1a01004 	mov	r1, r4
30002594:	e5832000 	str	r2, [r3]
	element->next->previous = element->previous;
30002598:	e5942004 	ldr	r2, [r4, #4]
3000259c:	e59f0010 	ldr	r0, [pc, #16]	; 300025b4 <delete_pend_obj+0x90>
300025a0:	e5823004 	str	r3, [r2, #4]
300025a4:	ebffff6f 	bl	30002368 <add_ready_list>
			task_ptr->task_state = RAW_RDY;
300025a8:	e3a03000 	mov	r3, #0
300025ac:	e5c43050 	strb	r3, [r4, #80]	; 0x50
			           
			break;
300025b0:	eaffffed 	b	3000256c <delete_pend_obj+0x48>
300025b4:	30013c4c 	andcc	r3, r1, ip, asr #24

300025b8 <pend_task_wake_up>:

#endif


static RAW_U16 pend_task_wake_up(RAW_TASK_OBJ *task_ptr)
{
300025b8:	e92d4010 	push	{r4, lr}

	/*wake up task depend on the different state of task*/
	switch (task_ptr->task_state) {
300025bc:	e5d03050 	ldrb	r3, [r0, #80]	; 0x50

#endif


static RAW_U16 pend_task_wake_up(RAW_TASK_OBJ *task_ptr)
{
300025c0:	e1a04000 	mov	r4, r0

	/*wake up task depend on the different state of task*/
	switch (task_ptr->task_state) {
300025c4:	e2433001 	sub	r3, r3, #1
300025c8:	e3530004 	cmp	r3, #4
300025cc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
300025d0:	ea00000a 	b	30002600 <pend_task_wake_up+0x48>
300025d4:	3000261c 	andcc	r2, r0, ip, lsl r6
300025d8:	3000261c 	andcc	r2, r0, ip, lsl r6
300025dc:	300025e8 	andcc	r2, r0, r8, ror #11
300025e0:	30002600 	andcc	r2, r0, r0, lsl #12
300025e4:	300025e8 	andcc	r2, r0, r8, ror #11


RAW_INLINE void list_delete(LIST *element)
{

	element->previous->next = element->next;
300025e8:	e990000c 	ldmib	r0, {r2, r3}
300025ec:	e5832000 	str	r2, [r3]
	element->next->previous = element->previous;
300025f0:	e5902004 	ldr	r2, [r0, #4]
300025f4:	e5823004 	str	r3, [r2, #4]
		case RAW_PEND_TIMEOUT_SUSPENDED:
                     
			/*remove task on the block list because task is waken up*/
			list_delete(&task_ptr->task_list);                   
			
			task_ptr->task_state = RAW_SUSPENDED;
300025f8:	e3a03004 	mov	r3, #4
300025fc:	e5c03050 	strb	r3, [r0, #80]	; 0x50
			
	
	}

	/*remove task on the tick list because task is waken up*/
	tick_list_remove(task_ptr); 
30002600:	e1a00004 	mov	r0, r4
30002604:	eb001110 	bl	30006a4c <tick_list_remove>

	task_ptr->block_status = RAW_B_OK;
30002608:	e3a00000 	mov	r0, #0

	/*task is nothing blocked on so reset it to 0*/
	task_ptr->block_obj = 0;
3000260c:	e5840054 	str	r0, [r4, #84]	; 0x54
	}

	/*remove task on the tick list because task is waken up*/
	tick_list_remove(task_ptr); 

	task_ptr->block_status = RAW_B_OK;
30002610:	e5c40051 	strb	r0, [r4, #81]	; 0x51
	task_ptr->block_obj = 0;
	
	return RAW_SUCCESS;


}
30002614:	e8bd4010 	pop	{r4, lr}
30002618:	e12fff1e 	bx	lr


RAW_INLINE void list_delete(LIST *element)
{

	element->previous->next = element->next;
3000261c:	e990000c 	ldmib	r0, {r2, r3}
			
			/*remove task on the block list because task is waken up*/
			list_delete(&task_ptr->task_list); 
			
			/*add to the ready list again*/    
			add_ready_list(&raw_ready_queue, task_ptr);
30002620:	e1a01004 	mov	r1, r4
30002624:	e5832000 	str	r2, [r3]
	element->next->previous = element->previous;
30002628:	e5942004 	ldr	r2, [r4, #4]
3000262c:	e59f0010 	ldr	r0, [pc, #16]	; 30002644 <pend_task_wake_up+0x8c>
30002630:	e5823004 	str	r3, [r2, #4]
30002634:	ebffff4b 	bl	30002368 <add_ready_list>
			
			task_ptr->task_state = RAW_RDY;
30002638:	e3a03000 	mov	r3, #0
3000263c:	e5c43050 	strb	r3, [r4, #80]	; 0x50
		         
			break;
30002640:	eaffffee 	b	30002600 <pend_task_wake_up+0x48>
30002644:	30013c4c 	andcc	r3, r1, ip, asr #24

30002648 <wake_send_msg_size>:

RAW_U16 wake_send_msg_size(RAW_TASK_OBJ *task_ptr, RAW_VOID *msg, RAW_U32 msg_size)
{
	
	task_ptr->msg = msg; 
	task_ptr->msg_size = msg_size;
30002648:	e5802048 	str	r2, [r0, #72]	; 0x48


RAW_U16 wake_send_msg_size(RAW_TASK_OBJ *task_ptr, RAW_VOID *msg, RAW_U32 msg_size)
{
	
	task_ptr->msg = msg; 
3000264c:	e5801044 	str	r1, [r0, #68]	; 0x44
	task_ptr->msg_size = msg_size;
	
	return pend_task_wake_up(task_ptr);
30002650:	eaffffd8 	b	300025b8 <pend_task_wake_up>

30002654 <wake_send_msg>:


RAW_U16 wake_send_msg(RAW_TASK_OBJ *task_ptr, RAW_VOID *msg)
{

	task_ptr->msg = msg; 
30002654:	e5801044 	str	r1, [r0, #68]	; 0x44
	
	return pend_task_wake_up(task_ptr);																
30002658:	eaffffd6 	b	300025b8 <pend_task_wake_up>

3000265c <raw_wake_object>:



RAW_U16 raw_wake_object(RAW_TASK_OBJ *task_ptr)
{
	return pend_task_wake_up(task_ptr);	
3000265c:	eaffffd5 	b	300025b8 <pend_task_wake_up>

30002660 <remove_ready_list>:
	
}


void remove_ready_list(RAW_RUN_QUEUE *rq, RAW_TASK_OBJ *task_ptr)
{
30002660:	e92d4070 	push	{r4, r5, r6, lr}


RAW_INLINE void list_delete(LIST *element)
{

	element->previous->next = element->next;
30002664:	e5913008 	ldr	r3, [r1, #8]

	RAW_S32 	i;
	RAW_U8	 priority = task_ptr->priority;
30002668:	e5d12019 	ldrb	r2, [r1, #25]
3000266c:	e591c004 	ldr	ip, [r1, #4]
	
}


void remove_ready_list(RAW_RUN_QUEUE *rq, RAW_TASK_OBJ *task_ptr)
{
30002670:	e1a04000 	mov	r4, r0
30002674:	e583c000 	str	ip, [r3]
	RAW_U8	 priority = task_ptr->priority;

	list_delete(&task_ptr->task_list);

	/*if the ready list is not empty, we do not need to update the highest priority*/
	if (!is_list_empty(&rq->task_ready_list[priority]) ) {
30002678:	e0800182 	add	r0, r0, r2, lsl #3
3000267c:	e590c004 	ldr	ip, [r0, #4]
	element->next->previous = element->previous;
30002680:	e5911004 	ldr	r1, [r1, #4]
30002684:	e2800004 	add	r0, r0, #4
30002688:	e15c0000 	cmp	ip, r0
3000268c:	e5813004 	str	r3, [r1, #4]
30002690:	0a000001 	beq	3000269c <remove_ready_list+0x3c>
	else {
		
		RAW_ASSERT(0);
	}
	
}
30002694:	e8bd4070 	pop	{r4, r5, r6, lr}
30002698:	e12fff1e 	bx	lr

RAW_INLINE void bit_clear(void *base, RAW_U8 offset)
{
	register RAW_U8 *cp, mask;
	
	cp = (RAW_U8 *)base;
3000269c:	e2840f7d 	add	r0, r4, #500	; 0x1f4
	cp += offset >> 3;
300026a0:	e1a031a2 	lsr	r3, r2, #3

	mask = _BIT_SET_N(offset);

	*cp &= (RAW_U8)(~mask);
300026a4:	e7d0c003 	ldrb	ip, [r0, r3]
300026a8:	e3a05001 	mov	r5, #1
300026ac:	e2021007 	and	r1, r2, #7
300026b0:	e1cc1115 	bic	r1, ip, r5, lsl r1
300026b4:	e7c01003 	strb	r1, [r0, r3]
	bit_clear(rq->task_bit_map, priority);

	/*If task priority not equal to the highest priority, then we do not need to update the highest priority*/
	/*This condition happens when a current high priority task to suspend a low priotity task*/
	
	if (priority != rq->highest_priority) {
300026b8:	e5d45000 	ldrb	r5, [r4]
300026bc:	e1550002 	cmp	r5, r2
300026c0:	1afffff3 	bne	30002694 <remove_ready_list+0x34>
		return;
	}

	/*Find the highest ready task*/
	i = bit_search_first_one(rq->task_bit_map, priority, CONFIG_RAW_PRIO_MAX - priority);
300026c4:	e1a01005 	mov	r1, r5
300026c8:	e265203e 	rsb	r2, r5, #62	; 0x3e
300026cc:	eb000997 	bl	30004d30 <bit_search_first_one>
	
	/*Update the next highest priority task*/
	if (i >= 0) {
300026d0:	e3500000 	cmp	r0, #0
		rq->highest_priority = priority + i;
300026d4:	a0850000 	addge	r0, r5, r0
300026d8:	a5c40000 	strbge	r0, [r4]
300026dc:	eaffffec 	b	30002694 <remove_ready_list+0x34>

300026e0 <raw_pend_object>:

	/*task need to remember which object is blocked on*/
	task_ptr->block_obj = block_common_obj;

	
	if (timeout == RAW_WAIT_FOREVER) {
300026e0:	e3720001 	cmn	r2, #1
												
}


RAW_U16 raw_pend_object(RAW_COMMON_BLOCK_OBJECT  *block_common_obj, RAW_TASK_OBJ *task_ptr, RAW_TICK_TYPE timeout)
{
300026e4:	e92d4070 	push	{r4, r5, r6, lr}

	
	if (timeout == RAW_WAIT_FOREVER) {
		

		task_ptr->task_state = RAW_PEND;
300026e8:	03a03001 	moveq	r3, #1
												
}


RAW_U16 raw_pend_object(RAW_COMMON_BLOCK_OBJECT  *block_common_obj, RAW_TASK_OBJ *task_ptr, RAW_TICK_TYPE timeout)
{
300026ec:	e1a05001 	mov	r5, r1
300026f0:	e1a04000 	mov	r4, r0
		RAW_ASSERT(0);
	}
		

	/*task need to remember which object is blocked on*/
	task_ptr->block_obj = block_common_obj;
300026f4:	e5850054 	str	r0, [r5, #84]	; 0x54

	
	if (timeout == RAW_WAIT_FOREVER) {
		

		task_ptr->task_state = RAW_PEND;
300026f8:	05c13050 	strbeq	r3, [r1, #80]	; 0x50

	/*task need to remember which object is blocked on*/
	task_ptr->block_obj = block_common_obj;

	
	if (timeout == RAW_WAIT_FOREVER) {
300026fc:	0a000004 	beq	30002714 <raw_pend_object+0x34>
	}
	/*task is blocked with timeout*/
	else {
		
		/*add to time sorted tick list */   
		tick_list_insert(task_ptr,timeout);
30002700:	e1a01002 	mov	r1, r2
30002704:	e1a00005 	mov	r0, r5
30002708:	eb0010ab 	bl	300069bc <tick_list_insert>

		task_ptr->task_state = RAW_PEND_TIMEOUT;
3000270c:	e3a03002 	mov	r3, #2
30002710:	e5c53050 	strb	r3, [r5, #80]	; 0x50

	}
	
	/*Remove from the ready list*/
	remove_ready_list(&raw_ready_queue, task_ptr);
30002714:	e59f0088 	ldr	r0, [pc, #136]	; 300027a4 <raw_pend_object+0xc4>
30002718:	e1a01005 	mov	r1, r5
3000271c:	ebffffcf 	bl	30002660 <remove_ready_list>
	
	if (block_common_obj->block_way == RAW_BLOCKED_WAY_FIFO) {
30002720:	e5d4300c 	ldrb	r3, [r4, #12]
30002724:	e3530001 	cmp	r3, #1
30002728:	0a000016 	beq	30002788 <raw_pend_object+0xa8>

	list_start = list_end = head;
	val = task_ptr->priority;
	
	/*Find the right position to insert*/ 
	for (q = list_start->next; q != list_end; q = q->next) {
3000272c:	e5943000 	ldr	r3, [r4]
	RAW_U8 val;
	
	LIST *q, *list_start, *list_end;

	list_start = list_end = head;
	val = task_ptr->priority;
30002730:	e5d51019 	ldrb	r1, [r5, #25]
	
	/*Find the right position to insert*/ 
	for (q = list_start->next; q != list_end; q = q->next) {
30002734:	e1540003 	cmp	r4, r3
30002738:	1a000003 	bne	3000274c <raw_pend_object+0x6c>
3000273c:	ea00000f 	b	30002780 <raw_pend_object+0xa0>
30002740:	e5933000 	ldr	r3, [r3]
30002744:	e1540003 	cmp	r4, r3
30002748:	0a00000c 	beq	30002780 <raw_pend_object+0xa0>
		if (list_entry(q, RAW_TASK_OBJ, task_list)->priority > val) {
3000274c:	e5d32015 	ldrb	r2, [r3, #21]
30002750:	e1520001 	cmp	r2, r1
30002754:	9afffff9 	bls	30002740 <raw_pend_object+0x60>
 * add element before head.
 */
RAW_INLINE void list_insert(LIST *head, LIST *element)
{
	
	element->previous = head->previous;
30002758:	e5931004 	ldr	r1, [r3, #4]
			break;
		}
	}

	list_insert(q, &task_ptr->task_list);
3000275c:	e2852004 	add	r2, r5, #4
30002760:	e5851008 	str	r1, [r5, #8]
	element->next = head;
	
	head->previous->next = element;	
30002764:	e5931004 	ldr	r1, [r3, #4]
 */
RAW_INLINE void list_insert(LIST *head, LIST *element)
{
	
	element->previous = head->previous;
	element->next = head;
30002768:	e5853004 	str	r3, [r5, #4]
	
	head->previous->next = element;	
	head->previous = element;
3000276c:	e5832004 	str	r2, [r3, #4]
{
	
	element->previous = head->previous;
	element->next = head;
	
	head->previous->next = element;	
30002770:	e5812000 	str	r2, [r1]
		add_to_priority_list(&block_common_obj->block_list, task_ptr);
		
	}
	
	return RAW_SUCCESS;
}
30002774:	e3a00000 	mov	r0, #0
30002778:	e8bd4070 	pop	{r4, r5, r6, lr}
3000277c:	e12fff1e 	bx	lr

	list_start = list_end = head;
	val = task_ptr->priority;
	
	/*Find the right position to insert*/ 
	for (q = list_start->next; q != list_end; q = q->next) {
30002780:	e1a03004 	mov	r3, r4
30002784:	eafffff3 	b	30002758 <raw_pend_object+0x78>
 * add element before head.
 */
RAW_INLINE void list_insert(LIST *head, LIST *element)
{
	
	element->previous = head->previous;
30002788:	e5942004 	ldr	r2, [r4, #4]
	/*Remove from the ready list*/
	remove_ready_list(&raw_ready_queue, task_ptr);
	
	if (block_common_obj->block_way == RAW_BLOCKED_WAY_FIFO) {
		/*add to the end of blocked objet list*/
		list_insert(&block_common_obj->block_list, &task_ptr->task_list);
3000278c:	e2853004 	add	r3, r5, #4
	element->next = head;
30002790:	e5854004 	str	r4, [r5, #4]
 * add element before head.
 */
RAW_INLINE void list_insert(LIST *head, LIST *element)
{
	
	element->previous = head->previous;
30002794:	e5852008 	str	r2, [r5, #8]
	element->next = head;
	
	head->previous->next = element;	
30002798:	e5823000 	str	r3, [r2]
	head->previous = element;
3000279c:	e5843004 	str	r3, [r4, #4]
300027a0:	eafffff3 	b	30002774 <raw_pend_object+0x94>
300027a4:	30013c4c 	andcc	r3, r1, ip, asr #24

300027a8 <raw_queue_buffer_get_information>:
************************************************************************************************************************
*/
#if (CONFIG_RAW_QUEUE_BUFFER_GET_INFORMATION > 0)

RAW_U16 raw_queue_buffer_get_information(RAW_QUEUE_BUFFER  *q_b, RAW_U32 *queue_buffer_free_size, RAW_U32 *queue_buffer_size)
{
300027a8:	e92d4070 	push	{r4, r5, r6, lr}
	RAW_SR_ALLOC();
	
	#if (RAW_QUEUE_BUFFER_FUNCTION_CHECK > 0)

	if (q_b == 0) {
300027ac:	e2504000 	subs	r4, r0, #0
************************************************************************************************************************
*/
#if (CONFIG_RAW_QUEUE_BUFFER_GET_INFORMATION > 0)

RAW_U16 raw_queue_buffer_get_information(RAW_QUEUE_BUFFER  *q_b, RAW_U32 *queue_buffer_free_size, RAW_U32 *queue_buffer_size)
{
300027b0:	e1a05001 	mov	r5, r1
300027b4:	e1a06002 	mov	r6, r2
	RAW_SR_ALLOC();
	
	#if (RAW_QUEUE_BUFFER_FUNCTION_CHECK > 0)

	if (q_b == 0) {
300027b8:	0a00000b 	beq	300027ec <raw_queue_buffer_get_information+0x44>
		
		return RAW_NULL_OBJECT;
	}

	if (queue_buffer_free_size == 0) {
300027bc:	e3510000 	cmp	r1, #0
300027c0:	0a000009 	beq	300027ec <raw_queue_buffer_get_information+0x44>
		
		return RAW_NULL_OBJECT;
	}

	if (queue_buffer_size == 0) {
300027c4:	e3520000 	cmp	r2, #0
300027c8:	0a000007 	beq	300027ec <raw_queue_buffer_get_information+0x44>
		return RAW_NULL_OBJECT;
	}

	#endif

	RAW_CPU_DISABLE();
300027cc:	eb001509 	bl	30007bf8 <OS_CPU_SR_Save>
	
	if (q_b->common_block_obj.object_type != RAW_QUEUE_BUFFER_OBJ_TYPE) {
300027d0:	e5d4300d 	ldrb	r3, [r4, #13]
300027d4:	e3530014 	cmp	r3, #20
300027d8:	0a000005 	beq	300027f4 <raw_queue_buffer_get_information+0x4c>

		RAW_CPU_ENABLE();
300027dc:	eb00150d 	bl	30007c18 <OS_CPU_SR_Restore>
300027e0:	e3a00036 	mov	r0, #54	; 0x36

	RAW_CPU_ENABLE();
	
	return RAW_SUCCESS;

}
300027e4:	e8bd4070 	pop	{r4, r5, r6, lr}
300027e8:	e12fff1e 	bx	lr
	
	*queue_buffer_size = q_b->bufsz;

	RAW_CPU_ENABLE();
	
	return RAW_SUCCESS;
300027ec:	e3a00025 	mov	r0, #37	; 0x25
300027f0:	eafffffb 	b	300027e4 <raw_queue_buffer_get_information+0x3c>

		RAW_CPU_ENABLE();
		return RAW_ERROR_OBJECT_TYPE;
	}

	*queue_buffer_free_size = q_b->frbufsz;
300027f4:	e5943018 	ldr	r3, [r4, #24]
300027f8:	e5853000 	str	r3, [r5]
	
	*queue_buffer_size = q_b->bufsz;
300027fc:	e5943010 	ldr	r3, [r4, #16]
30002800:	e5863000 	str	r3, [r6]

	RAW_CPU_ENABLE();
30002804:	eb001503 	bl	30007c18 <OS_CPU_SR_Restore>
30002808:	e3a00000 	mov	r0, #0
	
	return RAW_SUCCESS;
3000280c:	eafffff4 	b	300027e4 <raw_queue_buffer_get_information+0x3c>

30002810 <raw_queue_buffer_flush>:
************************************************************************************************************************
*/
#if (CONFIG_RAW_QUEUE_BUFFER_FLUSH > 0) 

RAW_U16 raw_queue_buffer_flush(RAW_QUEUE_BUFFER  *q_b)
{
30002810:	e92d4070 	push	{r4, r5, r6, lr}

	RAW_SR_ALLOC();

	#if (RAW_QUEUE_BUFFER_FUNCTION_CHECK > 0)

	if (raw_int_nesting) {
30002814:	e59f30bc 	ldr	r3, [pc, #188]	; 300028d8 <raw_queue_buffer_flush+0xc8>
************************************************************************************************************************
*/
#if (CONFIG_RAW_QUEUE_BUFFER_FLUSH > 0) 

RAW_U16 raw_queue_buffer_flush(RAW_QUEUE_BUFFER  *q_b)
{
30002818:	e1a05000 	mov	r5, r0

	RAW_SR_ALLOC();

	#if (RAW_QUEUE_BUFFER_FUNCTION_CHECK > 0)

	if (raw_int_nesting) {
3000281c:	e5d36000 	ldrb	r6, [r3]
30002820:	e3560000 	cmp	r6, #0
30002824:	13a00027 	movne	r0, #39	; 0x27
30002828:	1a000014 	bne	30002880 <raw_queue_buffer_flush+0x70>
		
		return RAW_NOT_CALLED_BY_ISR;
		
	}

	if (q_b == 0) {
3000282c:	e3550000 	cmp	r5, #0
30002830:	03a00025 	moveq	r0, #37	; 0x25
30002834:	0a000011 	beq	30002880 <raw_queue_buffer_flush+0x70>
		return RAW_NULL_OBJECT;
	}

	#endif

	RAW_CRITICAL_ENTER();
30002838:	e59f409c 	ldr	r4, [pc, #156]	; 300028dc <raw_queue_buffer_flush+0xcc>
3000283c:	eb0014ed 	bl	30007bf8 <OS_CPU_SR_Save>
30002840:	e5d43000 	ldrb	r3, [r4]
30002844:	e2833001 	add	r3, r3, #1
30002848:	e5c43000 	strb	r3, [r4]
3000284c:	eb0014f1 	bl	30007c18 <OS_CPU_SR_Restore>

	if (q_b->common_block_obj.object_type != RAW_QUEUE_BUFFER_OBJ_TYPE) {
30002850:	e5d5300d 	ldrb	r3, [r5, #13]
30002854:	e3530014 	cmp	r3, #20
30002858:	0a00000a 	beq	30002888 <raw_queue_buffer_flush+0x78>

		RAW_CRITICAL_EXIT();
3000285c:	e5d43000 	ldrb	r3, [r4]
30002860:	e3530001 	cmp	r3, #1
30002864:	0a000015 	beq	300028c0 <raw_queue_buffer_flush+0xb0>
30002868:	eb0014e2 	bl	30007bf8 <OS_CPU_SR_Save>
3000286c:	e5d43000 	ldrb	r3, [r4]
30002870:	e2433001 	sub	r3, r3, #1
30002874:	e5c43000 	strb	r3, [r4]
30002878:	eb0014e6 	bl	30007c18 <OS_CPU_SR_Restore>
3000287c:	e3a00036 	mov	r0, #54	; 0x36

	RAW_CRITICAL_EXIT();

	return RAW_SUCCESS;   
	
}
30002880:	e8bd4070 	pop	{r4, r5, r6, lr}
30002884:	e12fff1e 	bx	lr

	q_b->frbufsz = q_b->bufsz;
	q_b->head = 0;
	q_b->tail = 0;

	RAW_CRITICAL_EXIT();
30002888:	e5d42000 	ldrb	r2, [r4]

		RAW_CRITICAL_EXIT();
		return RAW_ERROR_OBJECT_TYPE;
	}

	q_b->frbufsz = q_b->bufsz;
3000288c:	e5953010 	ldr	r3, [r5, #16]
	q_b->head = 0;
	q_b->tail = 0;

	RAW_CRITICAL_EXIT();
30002890:	e3520001 	cmp	r2, #1

		RAW_CRITICAL_EXIT();
		return RAW_ERROR_OBJECT_TYPE;
	}

	q_b->frbufsz = q_b->bufsz;
30002894:	e5853018 	str	r3, [r5, #24]
	q_b->head = 0;
	q_b->tail = 0;
30002898:	e5856020 	str	r6, [r5, #32]
		RAW_CRITICAL_EXIT();
		return RAW_ERROR_OBJECT_TYPE;
	}

	q_b->frbufsz = q_b->bufsz;
	q_b->head = 0;
3000289c:	e585601c 	str	r6, [r5, #28]
	q_b->tail = 0;

	RAW_CRITICAL_EXIT();
300028a0:	0a000009 	beq	300028cc <raw_queue_buffer_flush+0xbc>
300028a4:	eb0014d3 	bl	30007bf8 <OS_CPU_SR_Save>
300028a8:	e5d43000 	ldrb	r3, [r4]
300028ac:	e2433001 	sub	r3, r3, #1
300028b0:	e5c43000 	strb	r3, [r4]
300028b4:	eb0014d7 	bl	30007c18 <OS_CPU_SR_Restore>
300028b8:	e1a00006 	mov	r0, r6
300028bc:	eaffffef 	b	30002880 <raw_queue_buffer_flush+0x70>

	RAW_CRITICAL_ENTER();

	if (q_b->common_block_obj.object_type != RAW_QUEUE_BUFFER_OBJ_TYPE) {

		RAW_CRITICAL_EXIT();
300028c0:	eb000f09 	bl	300064ec <hybrid_int_process>
300028c4:	e3a00036 	mov	r0, #54	; 0x36
300028c8:	eaffffec 	b	30002880 <raw_queue_buffer_flush+0x70>

	q_b->frbufsz = q_b->bufsz;
	q_b->head = 0;
	q_b->tail = 0;

	RAW_CRITICAL_EXIT();
300028cc:	eb000f06 	bl	300064ec <hybrid_int_process>
300028d0:	e1a00006 	mov	r0, r6
300028d4:	eaffffe9 	b	30002880 <raw_queue_buffer_flush+0x70>
300028d8:	30013e61 	andcc	r3, r1, r1, ror #28
300028dc:	300142c0 	andcc	r4, r1, r0, asr #5

300028e0 <raw_queue_buffer_delete>:
************************************************************************************************************************
*/
#if (CONFIG_RAW_QUEUE_BUFFER_DELETE > 0)

RAW_U16 raw_queue_buffer_delete(RAW_QUEUE_BUFFER *q_b)
{
300028e0:	e92d4070 	push	{r4, r5, r6, lr}
	
	RAW_SR_ALLOC();

	#if (RAW_QUEUE_FUNCTION_CHECK > 0)

	if (q_b == 0) {
300028e4:	e2504000 	subs	r4, r0, #0
300028e8:	03a00025 	moveq	r0, #37	; 0x25
300028ec:	0a000004 	beq	30002904 <raw_queue_buffer_delete+0x24>
		
		return RAW_NULL_OBJECT;
	}

	if (raw_int_nesting) {
300028f0:	e59f30c8 	ldr	r3, [pc, #200]	; 300029c0 <raw_queue_buffer_delete+0xe0>
300028f4:	e5d35000 	ldrb	r5, [r3]
300028f8:	e3550000 	cmp	r5, #0
300028fc:	13a00027 	movne	r0, #39	; 0x27
30002900:	0a000001 	beq	3000290c <raw_queue_buffer_delete+0x2c>

	do_possible_sche(); 
	
	return RAW_SUCCESS;
	
}
30002904:	e8bd4070 	pop	{r4, r5, r6, lr}
30002908:	e12fff1e 	bx	lr
		
	}
	
	#endif
	
	RAW_CRITICAL_ENTER();
3000290c:	e59f60b0 	ldr	r6, [pc, #176]	; 300029c4 <raw_queue_buffer_delete+0xe4>
30002910:	eb0014b8 	bl	30007bf8 <OS_CPU_SR_Save>
30002914:	e5d63000 	ldrb	r3, [r6]
30002918:	e2833001 	add	r3, r3, #1
3000291c:	e5c63000 	strb	r3, [r6]
30002920:	eb0014bc 	bl	30007c18 <OS_CPU_SR_Restore>

	if (q_b->common_block_obj.object_type != RAW_QUEUE_BUFFER_OBJ_TYPE) {
30002924:	e5d4300d 	ldrb	r3, [r4, #13]
30002928:	e3530014 	cmp	r3, #20
3000292c:	0a00000c 	beq	30002964 <raw_queue_buffer_delete+0x84>

		RAW_CRITICAL_EXIT();
30002930:	e5d63000 	ldrb	r3, [r6]
30002934:	e3530001 	cmp	r3, #1
30002938:	0a000006 	beq	30002958 <raw_queue_buffer_delete+0x78>
3000293c:	eb0014ad 	bl	30007bf8 <OS_CPU_SR_Save>
30002940:	e5d63000 	ldrb	r3, [r6]
30002944:	e2433001 	sub	r3, r3, #1
30002948:	e5c63000 	strb	r3, [r6]
3000294c:	eb0014b1 	bl	30007c18 <OS_CPU_SR_Restore>
30002950:	e3a00036 	mov	r0, #54	; 0x36
30002954:	eaffffea 	b	30002904 <raw_queue_buffer_delete+0x24>
30002958:	eb000ee3 	bl	300064ec <hybrid_int_process>
3000295c:	e3a00036 	mov	r0, #54	; 0x36
30002960:	eaffffe7 	b	30002904 <raw_queue_buffer_delete+0x24>
 * return TRUE if the list is empty
 */
RAW_INLINE RAW_BOOLEAN is_list_empty(LIST *list)
{

	return (list->next == list);	
30002964:	e5940000 	ldr	r0, [r4]
		return RAW_ERROR_OBJECT_TYPE;
	}

	block_list_head = &q_b->common_block_obj.block_list;
	
	q_b->common_block_obj.object_type = 0;
30002968:	e5c4500d 	strb	r5, [r4, #13]
	
	/*All task blocked on this queue is waken up*/
	while (!is_list_empty(block_list_head))  {
3000296c:	e1540000 	cmp	r4, r0
30002970:	0a000004 	beq	30002988 <raw_queue_buffer_delete+0xa8>
		delete_pend_obj(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list));	
30002974:	e2400004 	sub	r0, r0, #4
30002978:	ebfffee9 	bl	30002524 <delete_pend_obj>
3000297c:	e5940000 	ldr	r0, [r4]
	block_list_head = &q_b->common_block_obj.block_list;
	
	q_b->common_block_obj.object_type = 0;
	
	/*All task blocked on this queue is waken up*/
	while (!is_list_empty(block_list_head))  {
30002980:	e1540000 	cmp	r4, r0
30002984:	1afffffa 	bne	30002974 <raw_queue_buffer_delete+0x94>
		delete_pend_obj(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list));	
	}                             
	
	RAW_CRITICAL_EXIT();
30002988:	e5d63000 	ldrb	r3, [r6]
3000298c:	e59f4030 	ldr	r4, [pc, #48]	; 300029c4 <raw_queue_buffer_delete+0xe4>
30002990:	e3530001 	cmp	r3, #1
30002994:	0a000007 	beq	300029b8 <raw_queue_buffer_delete+0xd8>
30002998:	eb001496 	bl	30007bf8 <OS_CPU_SR_Save>
3000299c:	e5d43000 	ldrb	r3, [r4]
300029a0:	e2433001 	sub	r3, r3, #1
300029a4:	e5c43000 	strb	r3, [r4]
300029a8:	eb00149a 	bl	30007c18 <OS_CPU_SR_Restore>

	do_possible_sche(); 
300029ac:	eb0006b8 	bl	30004494 <raw_sched>
300029b0:	e3a00000 	mov	r0, #0
	
	return RAW_SUCCESS;
300029b4:	eaffffd2 	b	30002904 <raw_queue_buffer_delete+0x24>
	/*All task blocked on this queue is waken up*/
	while (!is_list_empty(block_list_head))  {
		delete_pend_obj(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list));	
	}                             
	
	RAW_CRITICAL_EXIT();
300029b8:	eb000ecb 	bl	300064ec <hybrid_int_process>
300029bc:	eafffffa 	b	300029ac <raw_queue_buffer_delete+0xcc>
300029c0:	30013e61 	andcc	r3, r1, r1, ror #28
300029c4:	300142c0 	andcc	r4, r1, r0, asr #5

300029c8 <raw_queue_buffer_receive>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_buffer_receive(RAW_QUEUE_BUFFER *q_b, RAW_TICK_TYPE wait_option, RAW_VOID *msg, MSG_SIZE_TYPE *receive_size)
{
300029c8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
300029cc:	e1a04000 	mov	r4, r0
	RAW_SR_ALLOC();


	#if (RAW_QUEUE_BUFFER_FUNCTION_CHECK > 0)

	if (raw_int_nesting) {
300029d0:	e59f0240 	ldr	r0, [pc, #576]	; 30002c18 <raw_queue_buffer_receive+0x250>
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_buffer_receive(RAW_QUEUE_BUFFER *q_b, RAW_TICK_TYPE wait_option, RAW_VOID *msg, MSG_SIZE_TYPE *receive_size)
{
300029d4:	e24dd00c 	sub	sp, sp, #12
	RAW_SR_ALLOC();


	#if (RAW_QUEUE_BUFFER_FUNCTION_CHECK > 0)

	if (raw_int_nesting) {
300029d8:	e5d05000 	ldrb	r5, [r0]
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_buffer_receive(RAW_QUEUE_BUFFER *q_b, RAW_TICK_TYPE wait_option, RAW_VOID *msg, MSG_SIZE_TYPE *receive_size)
{
300029dc:	e1a0a001 	mov	sl, r1
	RAW_SR_ALLOC();


	#if (RAW_QUEUE_BUFFER_FUNCTION_CHECK > 0)

	if (raw_int_nesting) {
300029e0:	e3550000 	cmp	r5, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_buffer_receive(RAW_QUEUE_BUFFER *q_b, RAW_TICK_TYPE wait_option, RAW_VOID *msg, MSG_SIZE_TYPE *receive_size)
{
300029e4:	e1a06002 	mov	r6, r2
300029e8:	e1a08003 	mov	r8, r3
	RAW_SR_ALLOC();


	#if (RAW_QUEUE_BUFFER_FUNCTION_CHECK > 0)

	if (raw_int_nesting) {
300029ec:	13a00027 	movne	r0, #39	; 0x27
300029f0:	1a000017 	bne	30002a54 <raw_queue_buffer_receive+0x8c>
		
		return RAW_NOT_CALLED_BY_ISR;
		
	}

	if (q_b == 0) {
300029f4:	e3540000 	cmp	r4, #0
300029f8:	03a00025 	moveq	r0, #37	; 0x25
300029fc:	0a000014 	beq	30002a54 <raw_queue_buffer_receive+0x8c>
		
		return RAW_NULL_OBJECT;
	}

	
	if (msg == 0) {
30002a00:	e3520000 	cmp	r2, #0
30002a04:	03a00023 	moveq	r0, #35	; 0x23
30002a08:	0a000011 	beq	30002a54 <raw_queue_buffer_receive+0x8c>
		return RAW_NULL_POINTER;
	}
	
	#endif

	RAW_CRITICAL_ENTER();
30002a0c:	e59f7208 	ldr	r7, [pc, #520]	; 30002c1c <raw_queue_buffer_receive+0x254>
30002a10:	eb001478 	bl	30007bf8 <OS_CPU_SR_Save>
30002a14:	e5d73000 	ldrb	r3, [r7]
30002a18:	e2833001 	add	r3, r3, #1
30002a1c:	e5c73000 	strb	r3, [r7]
30002a20:	eb00147c 	bl	30007c18 <OS_CPU_SR_Restore>

	if (q_b->common_block_obj.object_type != RAW_QUEUE_BUFFER_OBJ_TYPE) {
30002a24:	e5d4300d 	ldrb	r3, [r4, #13]
30002a28:	e3530014 	cmp	r3, #20
30002a2c:	0a00000b 	beq	30002a60 <raw_queue_buffer_receive+0x98>

		RAW_CRITICAL_EXIT();
30002a30:	e5d73000 	ldrb	r3, [r7]
30002a34:	e3530001 	cmp	r3, #1
30002a38:	0a000031 	beq	30002b04 <raw_queue_buffer_receive+0x13c>
30002a3c:	eb00146d 	bl	30007bf8 <OS_CPU_SR_Save>
30002a40:	e5d73000 	ldrb	r3, [r7]
30002a44:	e2433001 	sub	r3, r3, #1
30002a48:	e5c73000 	strb	r3, [r7]
30002a4c:	eb001471 	bl	30007c18 <OS_CPU_SR_Restore>
30002a50:	e3a00036 	mov	r0, #54	; 0x36
	}
	
	return result;


}
30002a54:	e28dd00c 	add	sp, sp, #12
30002a58:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
30002a5c:	e12fff1e 	bx	lr
/*
 * If message buffer is empty, return TRUE.
 */
RAW_INLINE RAW_BOOLEAN is_buffer_empty(RAW_QUEUE_BUFFER *q_b)
{
	return (q_b->frbufsz == q_b->bufsz);
30002a60:	e5942018 	ldr	r2, [r4, #24]

		RAW_CRITICAL_EXIT();
		return RAW_ERROR_OBJECT_TYPE;
	}

  	if (!is_buffer_empty(q_b)) {
30002a64:	e594c010 	ldr	ip, [r4, #16]
30002a68:	e152000c 	cmp	r2, ip
30002a6c:	0a000027 	beq	30002b10 <raw_queue_buffer_receive+0x148>
}


static RAW_U32 buffer_to_msg(RAW_QUEUE_BUFFER *q_b, void *msg)
{
	MSG_SIZE_TYPE	head = q_b->head;
30002a70:	e594301c 	ldr	r3, [r4, #28]
	RAW_U8	*buffer = q_b->buffer;
30002a74:	e594b024 	ldr	fp, [r4, #36]	; 0x24
	MSG_SIZE_TYPE	remsz;

	actsz = msgsz = *(HEADER*)&buffer[head];
	q_b->frbufsz += (HEADERSZ + ROUND_BUFFER_SIZE(msgsz));

	head += HEADERSZ;
30002a78:	e283a004 	add	sl, r3, #4
	MSG_SIZE_TYPE	head = q_b->head;
	RAW_U8	*buffer = q_b->buffer;
	MSG_SIZE_TYPE	msgsz, actsz;
	MSG_SIZE_TYPE	remsz;

	actsz = msgsz = *(HEADER*)&buffer[head];
30002a7c:	e79b9003 	ldr	r9, [fp, r3]
	q_b->frbufsz += (HEADERSZ + ROUND_BUFFER_SIZE(msgsz));

	head += HEADERSZ;
	
	if (head >= q_b->bufsz) {
30002a80:	e15a000c 	cmp	sl, ip
30002a84:	23a0a000 	movcs	sl, #0
	RAW_U8	*buffer = q_b->buffer;
	MSG_SIZE_TYPE	msgsz, actsz;
	MSG_SIZE_TYPE	remsz;

	actsz = msgsz = *(HEADER*)&buffer[head];
	q_b->frbufsz += (HEADERSZ + ROUND_BUFFER_SIZE(msgsz));
30002a88:	e2893003 	add	r3, r9, #3
30002a8c:	e3c33003 	bic	r3, r3, #3
30002a90:	e2822004 	add	r2, r2, #4
	
	if (head >= q_b->bufsz) {
		head = 0;
	}

	if ((remsz = q_b->bufsz - head) < msgsz) {
30002a94:	e06ac00c 	rsb	ip, sl, ip
	RAW_U8	*buffer = q_b->buffer;
	MSG_SIZE_TYPE	msgsz, actsz;
	MSG_SIZE_TYPE	remsz;

	actsz = msgsz = *(HEADER*)&buffer[head];
	q_b->frbufsz += (HEADERSZ + ROUND_BUFFER_SIZE(msgsz));
30002a98:	e0822003 	add	r2, r2, r3
	
	if (head >= q_b->bufsz) {
		head = 0;
	}

	if ((remsz = q_b->bufsz - head) < msgsz) {
30002a9c:	e159000c 	cmp	r9, ip
	RAW_U8	*buffer = q_b->buffer;
	MSG_SIZE_TYPE	msgsz, actsz;
	MSG_SIZE_TYPE	remsz;

	actsz = msgsz = *(HEADER*)&buffer[head];
	q_b->frbufsz += (HEADERSZ + ROUND_BUFFER_SIZE(msgsz));
30002aa0:	e5842018 	str	r2, [r4, #24]
	
	if (head >= q_b->bufsz) {
		head = 0;
	}

	if ((remsz = q_b->bufsz - head) < msgsz) {
30002aa4:	91a02009 	movls	r2, r9
30002aa8:	8a000024 	bhi	30002b40 <raw_queue_buffer_receive+0x178>
		raw_memcpy(msg, &buffer[head], remsz);
		msg = (RAW_U8 *)msg + remsz;
		msgsz -= remsz;
		head = 0;
	}
	raw_memcpy(msg, &buffer[head], msgsz);
30002aac:	e08b100a 	add	r1, fp, sl
30002ab0:	e1a00006 	mov	r0, r6
30002ab4:	e58d3004 	str	r3, [sp, #4]
30002ab8:	eb000893 	bl	30004d0c <raw_memcpy>
	head += ROUND_BUFFER_SIZE(msgsz);
30002abc:	e59d3004 	ldr	r3, [sp, #4]
	if (head >= q_b->bufsz) {
30002ac0:	e5942010 	ldr	r2, [r4, #16]
		msg = (RAW_U8 *)msg + remsz;
		msgsz -= remsz;
		head = 0;
	}
	raw_memcpy(msg, &buffer[head], msgsz);
	head += ROUND_BUFFER_SIZE(msgsz);
30002ac4:	e083a00a 	add	sl, r3, sl
	if (head >= q_b->bufsz) {
30002ac8:	e15a0002 	cmp	sl, r2
30002acc:	23a0a000 	movcs	sl, #0
		head = 0;
	}

	q_b->head = head;
30002ad0:	e584a01c 	str	sl, [r4, #28]
		return RAW_ERROR_OBJECT_TYPE;
	}

  	if (!is_buffer_empty(q_b)) {
		
		*receive_size = buffer_to_msg(q_b, msg);
30002ad4:	e5889000 	str	r9, [r8]
		
		RAW_CRITICAL_EXIT();
30002ad8:	e5d73000 	ldrb	r3, [r7]
30002adc:	e59f4138 	ldr	r4, [pc, #312]	; 30002c1c <raw_queue_buffer_receive+0x254>
30002ae0:	e3530001 	cmp	r3, #1
30002ae4:	0a000021 	beq	30002b70 <raw_queue_buffer_receive+0x1a8>
30002ae8:	eb001442 	bl	30007bf8 <OS_CPU_SR_Save>
30002aec:	e5d43000 	ldrb	r3, [r4]
30002af0:	e2433001 	sub	r3, r3, #1
30002af4:	e5c43000 	strb	r3, [r4]
30002af8:	eb001446 	bl	30007c18 <OS_CPU_SR_Restore>
30002afc:	e3a00000 	mov	r0, #0
30002b00:	eaffffd3 	b	30002a54 <raw_queue_buffer_receive+0x8c>

	RAW_CRITICAL_ENTER();

	if (q_b->common_block_obj.object_type != RAW_QUEUE_BUFFER_OBJ_TYPE) {

		RAW_CRITICAL_EXIT();
30002b04:	eb000e78 	bl	300064ec <hybrid_int_process>
30002b08:	e3a00036 	mov	r0, #54	; 0x36
30002b0c:	eaffffd0 	b	30002a54 <raw_queue_buffer_receive+0x8c>
		return RAW_SUCCESS;   

  	}	
		

	if (wait_option == RAW_NO_WAIT) {   
30002b10:	e35a0000 	cmp	sl, #0
30002b14:	1a000018 	bne	30002b7c <raw_queue_buffer_receive+0x1b4>
	
		RAW_CRITICAL_EXIT();
30002b18:	e5d73000 	ldrb	r3, [r7]
30002b1c:	e3530001 	cmp	r3, #1
30002b20:	0a00001f 	beq	30002ba4 <raw_queue_buffer_receive+0x1dc>
30002b24:	eb001433 	bl	30007bf8 <OS_CPU_SR_Save>
30002b28:	e5d73000 	ldrb	r3, [r7]
30002b2c:	e2433001 	sub	r3, r3, #1
30002b30:	e5c73000 	strb	r3, [r7]
30002b34:	eb001437 	bl	30007c18 <OS_CPU_SR_Restore>
30002b38:	e3a00006 	mov	r0, #6
30002b3c:	eaffffc4 	b	30002a54 <raw_queue_buffer_receive+0x8c>
	if (head >= q_b->bufsz) {
		head = 0;
	}

	if ((remsz = q_b->bufsz - head) < msgsz) {
		raw_memcpy(msg, &buffer[head], remsz);
30002b40:	e1a0200c 	mov	r2, ip
30002b44:	e08b100a 	add	r1, fp, sl
30002b48:	e1a00006 	mov	r0, r6
30002b4c:	e58dc004 	str	ip, [sp, #4]
30002b50:	eb00086d 	bl	30004d0c <raw_memcpy>
		msg = (RAW_U8 *)msg + remsz;
		msgsz -= remsz;
30002b54:	e59dc004 	ldr	ip, [sp, #4]
30002b58:	e1a0a005 	mov	sl, r5
30002b5c:	e06c2009 	rsb	r2, ip, r9
30002b60:	e2823003 	add	r3, r2, #3
		head = 0;
	}

	if ((remsz = q_b->bufsz - head) < msgsz) {
		raw_memcpy(msg, &buffer[head], remsz);
		msg = (RAW_U8 *)msg + remsz;
30002b64:	e086600c 	add	r6, r6, ip
		msgsz -= remsz;
30002b68:	e3c33003 	bic	r3, r3, #3
30002b6c:	eaffffce 	b	30002aac <raw_queue_buffer_receive+0xe4>

  	if (!is_buffer_empty(q_b)) {
		
		*receive_size = buffer_to_msg(q_b, msg);
		
		RAW_CRITICAL_EXIT();
30002b70:	eb000e5d 	bl	300064ec <hybrid_int_process>
30002b74:	e3a00000 	mov	r0, #0
30002b78:	eaffffb5 	b	30002a54 <raw_queue_buffer_receive+0x8c>
	
		RAW_CRITICAL_EXIT();
		return RAW_NO_PEND_WAIT;
	} 

	SYSTEM_LOCK_PROCESS();
30002b7c:	e5d73000 	ldrb	r3, [r7]
30002b80:	e3530001 	cmp	r3, #1
30002b84:	9a000009 	bls	30002bb0 <raw_queue_buffer_receive+0x1e8>
30002b88:	eb00141a 	bl	30007bf8 <OS_CPU_SR_Save>
30002b8c:	e5d73000 	ldrb	r3, [r7]
30002b90:	e2433001 	sub	r3, r3, #1
30002b94:	e5c73000 	strb	r3, [r7]
30002b98:	eb00141e 	bl	30007c18 <OS_CPU_SR_Restore>
30002b9c:	e3a00007 	mov	r0, #7
30002ba0:	eaffffab 	b	30002a54 <raw_queue_buffer_receive+0x8c>
  	}	
		

	if (wait_option == RAW_NO_WAIT) {   
	
		RAW_CRITICAL_EXIT();
30002ba4:	eb000e50 	bl	300064ec <hybrid_int_process>
30002ba8:	e3a00006 	mov	r0, #6
30002bac:	eaffffa8 	b	30002a54 <raw_queue_buffer_receive+0x8c>
		return RAW_NO_PEND_WAIT;
	} 

	SYSTEM_LOCK_PROCESS();

	raw_task_active->msg = msg;
30002bb0:	e59f5068 	ldr	r5, [pc, #104]	; 30002c20 <raw_queue_buffer_receive+0x258>
	raw_pend_object((RAW_COMMON_BLOCK_OBJECT  *)q_b, raw_task_active, wait_option);
30002bb4:	e1a00004 	mov	r0, r4
		return RAW_NO_PEND_WAIT;
	} 

	SYSTEM_LOCK_PROCESS();

	raw_task_active->msg = msg;
30002bb8:	e5951000 	ldr	r1, [r5]
	raw_pend_object((RAW_COMMON_BLOCK_OBJECT  *)q_b, raw_task_active, wait_option);
30002bbc:	e1a0200a 	mov	r2, sl
		return RAW_NO_PEND_WAIT;
	} 

	SYSTEM_LOCK_PROCESS();

	raw_task_active->msg = msg;
30002bc0:	e5816044 	str	r6, [r1, #68]	; 0x44
	raw_pend_object((RAW_COMMON_BLOCK_OBJECT  *)q_b, raw_task_active, wait_option);
30002bc4:	ebfffec5 	bl	300026e0 <raw_pend_object>
	
	RAW_CRITICAL_EXIT();
30002bc8:	e5d73000 	ldrb	r3, [r7]
30002bcc:	e3530001 	cmp	r3, #1
30002bd0:	0a00000e 	beq	30002c10 <raw_queue_buffer_receive+0x248>
30002bd4:	eb001407 	bl	30007bf8 <OS_CPU_SR_Save>
30002bd8:	e5d73000 	ldrb	r3, [r7]
30002bdc:	e2433001 	sub	r3, r3, #1
30002be0:	e5c73000 	strb	r3, [r7]
30002be4:	eb00140b 	bl	30007c18 <OS_CPU_SR_Restore>

	raw_sched();
30002be8:	eb000629 	bl	30004494 <raw_sched>

	result = block_state_post_process(raw_task_active, 0);
30002bec:	e5950000 	ldr	r0, [r5]
30002bf0:	e3a01000 	mov	r1, #0
30002bf4:	eb000826 	bl	30004c94 <block_state_post_process>
	
	/*if get the msg successful then take it*/
	if (result == RAW_SUCCESS) {
30002bf8:	e3500000 	cmp	r0, #0

		*receive_size = raw_task_active->msg_size;
30002bfc:	059f301c 	ldreq	r3, [pc, #28]	; 30002c20 <raw_queue_buffer_receive+0x258>
30002c00:	05933000 	ldreq	r3, [r3]
30002c04:	05933048 	ldreq	r3, [r3, #72]	; 0x48
30002c08:	05883000 	streq	r3, [r8]
30002c0c:	eaffff90 	b	30002a54 <raw_queue_buffer_receive+0x8c>
	SYSTEM_LOCK_PROCESS();

	raw_task_active->msg = msg;
	raw_pend_object((RAW_COMMON_BLOCK_OBJECT  *)q_b, raw_task_active, wait_option);
	
	RAW_CRITICAL_EXIT();
30002c10:	eb000e35 	bl	300064ec <hybrid_int_process>
30002c14:	eafffff3 	b	30002be8 <raw_queue_buffer_receive+0x220>
30002c18:	30013e61 	andcc	r3, r1, r1, ror #28
30002c1c:	300142c0 	andcc	r4, r1, r0, asr #5
30002c20:	30013838 	andcc	r3, r1, r8, lsr r8

30002c24 <queue_buffer_post>:

	return actsz;
}

RAW_U16 queue_buffer_post(RAW_QUEUE_BUFFER *q_b, RAW_VOID *p_void, MSG_SIZE_TYPE msg_size, RAW_U8 opt_send_method)
{
30002c24:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LIST *block_list_head;
	RAW_TASK_OBJ *task_ptr;

 	RAW_SR_ALLOC();
	
	RAW_CRITICAL_ENTER();
30002c28:	e59f4234 	ldr	r4, [pc, #564]	; 30002e64 <queue_buffer_post+0x240>

	return actsz;
}

RAW_U16 queue_buffer_post(RAW_QUEUE_BUFFER *q_b, RAW_VOID *p_void, MSG_SIZE_TYPE msg_size, RAW_U8 opt_send_method)
{
30002c2c:	e24dd014 	sub	sp, sp, #20
30002c30:	e1a05000 	mov	r5, r0
30002c34:	e1a07001 	mov	r7, r1
30002c38:	e1a06002 	mov	r6, r2
30002c3c:	e1a08003 	mov	r8, r3
	LIST *block_list_head;
	RAW_TASK_OBJ *task_ptr;

 	RAW_SR_ALLOC();
	
	RAW_CRITICAL_ENTER();
30002c40:	eb0013ec 	bl	30007bf8 <OS_CPU_SR_Save>
30002c44:	e5d43000 	ldrb	r3, [r4]
30002c48:	e2833001 	add	r3, r3, #1
30002c4c:	e5c43000 	strb	r3, [r4]
30002c50:	eb0013f0 	bl	30007c18 <OS_CPU_SR_Restore>

	if (q_b->common_block_obj.object_type != RAW_QUEUE_BUFFER_OBJ_TYPE) {
30002c54:	e5d5300d 	ldrb	r3, [r5, #13]
30002c58:	e3530014 	cmp	r3, #20
30002c5c:	0a00000b 	beq	30002c90 <queue_buffer_post+0x6c>

		RAW_CRITICAL_EXIT();
30002c60:	e5d43000 	ldrb	r3, [r4]
30002c64:	e3530001 	cmp	r3, #1
30002c68:	0a00001d 	beq	30002ce4 <queue_buffer_post+0xc0>
30002c6c:	eb0013e1 	bl	30007bf8 <OS_CPU_SR_Save>
30002c70:	e5d43000 	ldrb	r3, [r4]
30002c74:	e2433001 	sub	r3, r3, #1
30002c78:	e5c43000 	strb	r3, [r4]
30002c7c:	eb0013e5 	bl	30007c18 <OS_CPU_SR_Restore>
30002c80:	e3a00036 	mov	r0, #54	; 0x36

	do_possible_sche();    
	return RAW_SUCCESS;
	

}
30002c84:	e28dd014 	add	sp, sp, #20
30002c88:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
30002c8c:	e12fff1e 	bx	lr
 * Check message buffer free space
 *	If 'msgsz' message is able to be stored, return TRUE.
 */
RAW_INLINE RAW_BOOLEAN is_queue_buffer_free(RAW_QUEUE_BUFFER *q_b, MSG_SIZE_TYPE msg_size)
{
	return ((HEADERSZ + msg_size) <= q_b->frbufsz);
30002c90:	e5953018 	ldr	r3, [r5, #24]
		return RAW_ERROR_OBJECT_TYPE;
	}

	block_list_head = &q_b->common_block_obj.block_list;
	
	if (!is_queue_buffer_free(q_b,  msg_size)) {
30002c94:	e2862004 	add	r2, r6, #4
30002c98:	e1520003 	cmp	r2, r3
30002c9c:	9a000013 	bls	30002cf0 <queue_buffer_post+0xcc>

		RAW_CRITICAL_EXIT();
30002ca0:	e5d43000 	ldrb	r3, [r4]
30002ca4:	e3530001 	cmp	r3, #1
30002ca8:	0a00002e 	beq	30002d68 <queue_buffer_post+0x144>
30002cac:	eb0013d1 	bl	30007bf8 <OS_CPU_SR_Save>
30002cb0:	e5d43000 	ldrb	r3, [r4]
30002cb4:	e2433001 	sub	r3, r3, #1
30002cb8:	e5c43000 	strb	r3, [r4]
30002cbc:	eb0013d5 	bl	30007c18 <OS_CPU_SR_Restore>

		TRACE_QUEUE_BUFFER_MAX(raw_task_active, q_b, p_void, msg_size, opt_send_method); 
30002cc0:	e59f31a0 	ldr	r3, [pc, #416]	; 30002e68 <queue_buffer_post+0x244>
30002cc4:	e1a01005 	mov	r1, r5
30002cc8:	e5930000 	ldr	r0, [r3]
30002ccc:	e1a02007 	mov	r2, r7
30002cd0:	e1a03006 	mov	r3, r6
30002cd4:	e58d8000 	str	r8, [sp]
30002cd8:	eb0013c2 	bl	30007be8 <_trace_buffer_max>
30002cdc:	e3a0003f 	mov	r0, #63	; 0x3f
		
		return RAW_QUEUE_BUFFER_FULL;
30002ce0:	eaffffe7 	b	30002c84 <queue_buffer_post+0x60>
	
	RAW_CRITICAL_ENTER();

	if (q_b->common_block_obj.object_type != RAW_QUEUE_BUFFER_OBJ_TYPE) {

		RAW_CRITICAL_EXIT();
30002ce4:	eb000e00 	bl	300064ec <hybrid_int_process>
30002ce8:	e3a00036 	mov	r0, #54	; 0x36
30002cec:	eaffffe4 	b	30002c84 <queue_buffer_post+0x60>
30002cf0:	e595a000 	ldr	sl, [r5]
		return RAW_ERROR_OBJECT_TYPE;
	}

	block_list_head = &q_b->common_block_obj.block_list;
30002cf4:	e155000a 	cmp	r5, sl
30002cf8:	0a00001e 	beq	30002d78 <queue_buffer_post+0x154>
		TRACE_QUEUE_BUFFER_POST(raw_task_active, q_b, p_void, msg_size, opt_send_method);
		
		return RAW_SUCCESS;
	}
	
	task_ptr = list_entry(block_list_head->next, RAW_TASK_OBJ, task_list);
30002cfc:	e24aa004 	sub	sl, sl, #4
	
	raw_memcpy(task_ptr->msg, p_void, msg_size);
30002d00:	e1a01007 	mov	r1, r7
30002d04:	e1a02006 	mov	r2, r6
30002d08:	e59a0044 	ldr	r0, [sl, #68]	; 0x44
30002d0c:	eb0007fe 	bl	30004d0c <raw_memcpy>
	task_ptr->msg_size = msg_size;
30002d10:	e58a6048 	str	r6, [sl, #72]	; 0x48
	
	raw_wake_object(task_ptr);
30002d14:	e1a0000a 	mov	r0, sl
30002d18:	ebfffe4f 	bl	3000265c <raw_wake_object>
		
	RAW_CRITICAL_EXIT();
30002d1c:	e5d43000 	ldrb	r3, [r4]
30002d20:	e3530001 	cmp	r3, #1
30002d24:	0a000011 	beq	30002d70 <queue_buffer_post+0x14c>
30002d28:	eb0013b2 	bl	30007bf8 <OS_CPU_SR_Save>
30002d2c:	e5d43000 	ldrb	r3, [r4]
30002d30:	e2433001 	sub	r3, r3, #1
30002d34:	e5c43000 	strb	r3, [r4]
30002d38:	eb0013b6 	bl	30007c18 <OS_CPU_SR_Restore>

	TRACE_QUEUE_BUFFER_WAKE_TASK(raw_task_active, list_entry(block_list_head->next, RAW_TASK_OBJ, task_list), p_void, msg_size, opt_send_method);
30002d3c:	e5951000 	ldr	r1, [r5]
30002d40:	e59f3120 	ldr	r3, [pc, #288]	; 30002e68 <queue_buffer_post+0x244>
30002d44:	e2411004 	sub	r1, r1, #4
30002d48:	e5930000 	ldr	r0, [r3]
30002d4c:	e1a02007 	mov	r2, r7
30002d50:	e1a03006 	mov	r3, r6
30002d54:	e58d8000 	str	r8, [sp]
30002d58:	eb0013a4 	bl	30007bf0 <_trace_queue_buffer_wake_task>

	do_possible_sche();    
30002d5c:	eb0005cc 	bl	30004494 <raw_sched>
30002d60:	e3a00000 	mov	r0, #0
	return RAW_SUCCESS;
30002d64:	eaffffc6 	b	30002c84 <queue_buffer_post+0x60>

	block_list_head = &q_b->common_block_obj.block_list;
	
	if (!is_queue_buffer_free(q_b,  msg_size)) {

		RAW_CRITICAL_EXIT();
30002d68:	eb000ddf 	bl	300064ec <hybrid_int_process>
30002d6c:	eaffffd3 	b	30002cc0 <queue_buffer_post+0x9c>
	raw_memcpy(task_ptr->msg, p_void, msg_size);
	task_ptr->msg_size = msg_size;
	
	raw_wake_object(task_ptr);
		
	RAW_CRITICAL_EXIT();
30002d70:	eb000ddd 	bl	300064ec <hybrid_int_process>
30002d74:	eafffff0 	b	30002d3c <queue_buffer_post+0x118>


	/*Queue buffer is not full here, if there is no blocked receive task*/
	if (is_list_empty(block_list_head)) {        

		if (opt_send_method == SEND_TO_END)  { 
30002d78:	e3580002 	cmp	r8, #2
30002d7c:	0a000011 	beq	30002dc8 <queue_buffer_post+0x1a4>
		else {


		}
		
		RAW_CRITICAL_EXIT();
30002d80:	e5d43000 	ldrb	r3, [r4]
30002d84:	e59f40d8 	ldr	r4, [pc, #216]	; 30002e64 <queue_buffer_post+0x240>
30002d88:	e3530001 	cmp	r3, #1
30002d8c:	0a000027 	beq	30002e30 <queue_buffer_post+0x20c>
30002d90:	eb001398 	bl	30007bf8 <OS_CPU_SR_Save>
30002d94:	e5d43000 	ldrb	r3, [r4]
30002d98:	e2433001 	sub	r3, r3, #1
30002d9c:	e5c43000 	strb	r3, [r4]
30002da0:	eb00139c 	bl	30007c18 <OS_CPU_SR_Restore>

		TRACE_QUEUE_BUFFER_POST(raw_task_active, q_b, p_void, msg_size, opt_send_method);
30002da4:	e59f30bc 	ldr	r3, [pc, #188]	; 30002e68 <queue_buffer_post+0x244>
30002da8:	e1a01005 	mov	r1, r5
30002dac:	e5930000 	ldr	r0, [r3]
30002db0:	e1a02007 	mov	r2, r7
30002db4:	e1a03006 	mov	r3, r6
30002db8:	e58d8000 	str	r8, [sp]
30002dbc:	eb00138a 	bl	30007bec <_trace_buffer_post>
30002dc0:	e3a00000 	mov	r0, #0
		
		return RAW_SUCCESS;
30002dc4:	eaffffae 	b	30002c84 <queue_buffer_post+0x60>
{
	MSG_SIZE_TYPE	tail = q_b->tail;
	RAW_U8	*buffer = q_b->buffer;
	MSG_SIZE_TYPE	remsz;

	q_b->frbufsz -= (HEADERSZ + ROUND_BUFFER_SIZE(msgsz));
30002dc8:	e286b003 	add	fp, r6, #3
30002dcc:	e1e0200b 	mvn	r2, fp
30002dd0:	e3c22003 	bic	r2, r2, #3
}


static void msg_to_end_buffer(RAW_QUEUE_BUFFER *q_b, void *msg, MSG_SIZE_TYPE msgsz)
{
	MSG_SIZE_TYPE	tail = q_b->tail;
30002dd4:	e595a020 	ldr	sl, [r5, #32]
	RAW_U8	*buffer = q_b->buffer;
30002dd8:	e5959024 	ldr	r9, [r5, #36]	; 0x24
	MSG_SIZE_TYPE	remsz;

	q_b->frbufsz -= (HEADERSZ + ROUND_BUFFER_SIZE(msgsz));
30002ddc:	e0823003 	add	r3, r2, r3
30002de0:	e5853018 	str	r3, [r5, #24]

	*(HEADER*)&buffer[tail] = msgsz;
30002de4:	e789600a 	str	r6, [r9, sl]
	tail += HEADERSZ;
	if (tail >= q_b->bufsz) {
30002de8:	e5953010 	ldr	r3, [r5, #16]
	MSG_SIZE_TYPE	remsz;

	q_b->frbufsz -= (HEADERSZ + ROUND_BUFFER_SIZE(msgsz));

	*(HEADER*)&buffer[tail] = msgsz;
	tail += HEADERSZ;
30002dec:	e28aa004 	add	sl, sl, #4
	if (tail >= q_b->bufsz) {
30002df0:	e15a0003 	cmp	sl, r3
30002df4:	23a0a000 	movcs	sl, #0
		tail = 0;
	}

	if ((remsz = q_b->bufsz - tail) < msgsz) {
30002df8:	e06a3003 	rsb	r3, sl, r3
30002dfc:	e1560003 	cmp	r6, r3
30002e00:	91a02006 	movls	r2, r6
30002e04:	91a01007 	movls	r1, r7
30002e08:	8a00000a 	bhi	30002e38 <queue_buffer_post+0x214>
		msg = (RAW_U8 *)msg + remsz;
		msgsz -= remsz;
		tail = 0;
	}
	
	raw_memcpy(&buffer[tail], msg, msgsz);
30002e0c:	e089000a 	add	r0, r9, sl
30002e10:	eb0007bd 	bl	30004d0c <raw_memcpy>
	tail += ROUND_BUFFER_SIZE(msgsz);
30002e14:	e3cbb003 	bic	fp, fp, #3
	
	if (tail >= q_b->bufsz) {
30002e18:	e5953010 	ldr	r3, [r5, #16]
		msgsz -= remsz;
		tail = 0;
	}
	
	raw_memcpy(&buffer[tail], msg, msgsz);
	tail += ROUND_BUFFER_SIZE(msgsz);
30002e1c:	e08ba00a 	add	sl, fp, sl
	
	if (tail >= q_b->bufsz) {
30002e20:	e15a0003 	cmp	sl, r3
30002e24:	23a0a000 	movcs	sl, #0
		tail = 0;
	}

	q_b->tail = tail;
30002e28:	e585a020 	str	sl, [r5, #32]
30002e2c:	eaffffd3 	b	30002d80 <queue_buffer_post+0x15c>
		else {


		}
		
		RAW_CRITICAL_EXIT();
30002e30:	eb000dad 	bl	300064ec <hybrid_int_process>
30002e34:	eaffffda 	b	30002da4 <queue_buffer_post+0x180>
	if (tail >= q_b->bufsz) {
		tail = 0;
	}

	if ((remsz = q_b->bufsz - tail) < msgsz) {
		raw_memcpy(&buffer[tail], msg, remsz);
30002e38:	e1a02003 	mov	r2, r3
30002e3c:	e089000a 	add	r0, r9, sl
30002e40:	e1a01007 	mov	r1, r7
30002e44:	e58d300c 	str	r3, [sp, #12]
30002e48:	eb0007af 	bl	30004d0c <raw_memcpy>
		msg = (RAW_U8 *)msg + remsz;
		msgsz -= remsz;
30002e4c:	e59d300c 	ldr	r3, [sp, #12]
30002e50:	e3a0a000 	mov	sl, #0
30002e54:	e0632006 	rsb	r2, r3, r6
		tail = 0;
	}

	if ((remsz = q_b->bufsz - tail) < msgsz) {
		raw_memcpy(&buffer[tail], msg, remsz);
		msg = (RAW_U8 *)msg + remsz;
30002e58:	e0871003 	add	r1, r7, r3
		msgsz -= remsz;
30002e5c:	e282b003 	add	fp, r2, #3
30002e60:	eaffffe9 	b	30002e0c <queue_buffer_post+0x1e8>
30002e64:	300142c0 	andcc	r4, r1, r0, asr #5
30002e68:	30013838 	andcc	r3, r1, r8, lsr r8

30002e6c <raw_queue_buffer_end_post>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_buffer_end_post(RAW_QUEUE_BUFFER *q_b, RAW_VOID *p_void, MSG_SIZE_TYPE msg_size)
{
30002e6c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)


	#if (RAW_QUEUE_BUFFER_FUNCTION_CHECK > 0)

	if (q_b == 0) {
30002e70:	e3500000 	cmp	r0, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_buffer_end_post(RAW_QUEUE_BUFFER *q_b, RAW_VOID *p_void, MSG_SIZE_TYPE msg_size)
{
30002e74:	e24dd00c 	sub	sp, sp, #12
30002e78:	e1a0c001 	mov	ip, r1
30002e7c:	e1a03002 	mov	r3, r2


	#if (RAW_QUEUE_BUFFER_FUNCTION_CHECK > 0)

	if (q_b == 0) {
30002e80:	03a00025 	moveq	r0, #37	; 0x25
30002e84:	0a00001b 	beq	30002ef8 <raw_queue_buffer_end_post+0x8c>
		
		return RAW_NULL_OBJECT;
	}

	if (p_void == 0) {
30002e88:	e3510000 	cmp	r1, #0
30002e8c:	03a00023 	moveq	r0, #35	; 0x23
30002e90:	0a000018 	beq	30002ef8 <raw_queue_buffer_end_post+0x8c>
		
		return RAW_NULL_POINTER;
		
	}

	if (msg_size > q_b->maxmsz) {
30002e94:	e5902014 	ldr	r2, [r0, #20]
30002e98:	e1520003 	cmp	r2, r3
30002e9c:	33a00040 	movcc	r0, #64	; 0x40
30002ea0:	3a000014 	bcc	30002ef8 <raw_queue_buffer_end_post+0x8c>
	
	#endif
	
	#if (CONFIG_RAW_ZERO_INTERRUPT > 0)

	if (raw_int_nesting && raw_sched_lock) {
30002ea4:	e59f2058 	ldr	r2, [pc, #88]	; 30002f04 <raw_queue_buffer_end_post+0x98>
30002ea8:	e5d22000 	ldrb	r2, [r2]
30002eac:	e3520000 	cmp	r2, #0
30002eb0:	0a000003 	beq	30002ec4 <raw_queue_buffer_end_post+0x58>
30002eb4:	e59f204c 	ldr	r2, [pc, #76]	; 30002f08 <raw_queue_buffer_end_post+0x9c>
30002eb8:	e5d22000 	ldrb	r2, [r2]
30002ebc:	e3520000 	cmp	r2, #0
30002ec0:	1a000005 	bne	30002edc <raw_queue_buffer_end_post+0x70>
		return int_msg_post(RAW_TYPE_Q_BUFFER_END, q_b, p_void, msg_size, 0, 0);
	}
	
	#endif

	 return queue_buffer_post(q_b, p_void, msg_size, SEND_TO_END);
30002ec4:	e1a02003 	mov	r2, r3
30002ec8:	e1a0100c 	mov	r1, ip
30002ecc:	e3a03002 	mov	r3, #2

}
30002ed0:	e28dd00c 	add	sp, sp, #12
30002ed4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
		return int_msg_post(RAW_TYPE_Q_BUFFER_END, q_b, p_void, msg_size, 0, 0);
	}
	
	#endif

	 return queue_buffer_post(q_b, p_void, msg_size, SEND_TO_END);
30002ed8:	eaffff51 	b	30002c24 <queue_buffer_post>
	
	#if (CONFIG_RAW_ZERO_INTERRUPT > 0)

	if (raw_int_nesting && raw_sched_lock) {
		
		return int_msg_post(RAW_TYPE_Q_BUFFER_END, q_b, p_void, msg_size, 0, 0);
30002edc:	e1a01000 	mov	r1, r0
30002ee0:	e1a0200c 	mov	r2, ip
30002ee4:	e3a00003 	mov	r0, #3
30002ee8:	e3a0c000 	mov	ip, #0
30002eec:	e58dc004 	str	ip, [sp, #4]
30002ef0:	e58dc000 	str	ip, [sp]
30002ef4:	eb000e10 	bl	3000673c <int_msg_post>
	
	#endif

	 return queue_buffer_post(q_b, p_void, msg_size, SEND_TO_END);

}
30002ef8:	e28dd00c 	add	sp, sp, #12
30002efc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
30002f00:	e12fff1e 	bx	lr
30002f04:	30013e61 	andcc	r3, r1, r1, ror #28
30002f08:	300142c0 	andcc	r4, r1, r0, asr #5

30002f0c <raw_queue_buffer_create>:
	MSG_SIZE_TYPE bufsz;


	#if (RAW_QUEUE_BUFFER_FUNCTION_CHECK > 0)

	if (q_b == 0) {
30002f0c:	e250c000 	subs	ip, r0, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_buffer_create(RAW_QUEUE_BUFFER *q_b, RAW_U8 *p_name, RAW_VOID *msg_buffer, MSG_SIZE_TYPE buffer_size, MSG_SIZE_TYPE max_msg_size)
{
30002f10:	e92d4010 	push	{r4, lr}
	MSG_SIZE_TYPE bufsz;


	#if (RAW_QUEUE_BUFFER_FUNCTION_CHECK > 0)

	if (q_b == 0) {
30002f14:	03a00025 	moveq	r0, #37	; 0x25
30002f18:	0a000009 	beq	30002f44 <raw_queue_buffer_create+0x38>
		
		return RAW_NULL_OBJECT;
	}
	
	if (msg_buffer == 0) {
30002f1c:	e3520000 	cmp	r2, #0
30002f20:	03a00023 	moveq	r0, #35	; 0x23
30002f24:	0a000006 	beq	30002f44 <raw_queue_buffer_create+0x38>
		return RAW_NULL_POINTER;
	}
	
	#endif
	
	bufsz = ROUND_BUFFER_SIZE(buffer_size);
30002f28:	e2830003 	add	r0, r3, #3

	if (bufsz == 0) {
30002f2c:	e3d00003 	bics	r0, r0, #3
30002f30:	03a0003d 	moveq	r0, #61	; 0x3d
30002f34:	0a000002 	beq	30002f44 <raw_queue_buffer_create+0x38>
		return RAW_QUEUE_BUFFER_SIZE_0;
		
	}

	
	if (bufsz != buffer_size) {
30002f38:	e1500003 	cmp	r0, r3
30002f3c:	13a0003e 	movne	r0, #62	; 0x3e
30002f40:	0a000001 	beq	30002f4c <raw_queue_buffer_create+0x40>

	TRACE_QUEUE_BUFFER_CREATE(raw_task_active, q_b); 
	
	return RAW_SUCCESS;

}
30002f44:	e8bd4010 	pop	{r4, lr}
30002f48:	e12fff1e 	bx	lr

	q_b->bufsz = bufsz;
	q_b->frbufsz = bufsz;
	q_b->buffer = msg_buffer;
	q_b->maxmsz = max_msg_size;
	q_b->head = 0;
30002f4c:	e3a04000 	mov	r4, #0
	q_b->tail = 0;
	
	q_b->common_block_obj.name = p_name;
	q_b->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
	q_b->common_block_obj.object_type = RAW_QUEUE_BUFFER_OBJ_TYPE;
30002f50:	e3a03014 	mov	r3, #20
30002f54:	e5cc300d 	strb	r3, [ip, #13]
	q_b->maxmsz = max_msg_size;
	q_b->head = 0;
	q_b->tail = 0;
	
	q_b->common_block_obj.name = p_name;
	q_b->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
30002f58:	e5cc400c 	strb	r4, [ip, #12]

	/*init the queue blocked list*/
	list_init(&q_b->common_block_obj.block_list);

	q_b->bufsz = bufsz;
	q_b->frbufsz = bufsz;
30002f5c:	e58c0018 	str	r0, [ip, #24]
	q_b->buffer = msg_buffer;
	q_b->maxmsz = max_msg_size;
30002f60:	e59d3008 	ldr	r3, [sp, #8]
	q_b->head = 0;
	q_b->tail = 0;
	
	q_b->common_block_obj.name = p_name;
30002f64:	e58c1008 	str	r1, [ip, #8]
	list_init(&q_b->common_block_obj.block_list);

	q_b->bufsz = bufsz;
	q_b->frbufsz = bufsz;
	q_b->buffer = msg_buffer;
	q_b->maxmsz = max_msg_size;
30002f68:	e58c3014 	str	r3, [ip, #20]
	
	q_b->common_block_obj.name = p_name;
	q_b->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
	q_b->common_block_obj.object_type = RAW_QUEUE_BUFFER_OBJ_TYPE;

	TRACE_QUEUE_BUFFER_CREATE(raw_task_active, q_b); 
30002f6c:	e59f3028 	ldr	r3, [pc, #40]	; 30002f9c <raw_queue_buffer_create+0x90>
	

	/*init the queue blocked list*/
	list_init(&q_b->common_block_obj.block_list);

	q_b->bufsz = bufsz;
30002f70:	e58c0010 	str	r0, [ip, #16]
	q_b->frbufsz = bufsz;
	q_b->buffer = msg_buffer;
30002f74:	e58c2024 	str	r2, [ip, #36]	; 0x24
	
	q_b->common_block_obj.name = p_name;
	q_b->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
	q_b->common_block_obj.object_type = RAW_QUEUE_BUFFER_OBJ_TYPE;

	TRACE_QUEUE_BUFFER_CREATE(raw_task_active, q_b); 
30002f78:	e5930000 	ldr	r0, [r3]
/*
 * List initialization
 */
RAW_INLINE void list_init(LIST *list_head)
{
	list_head->next = list_head;
30002f7c:	e58cc000 	str	ip, [ip]
	list_head->previous = list_head;
30002f80:	e58cc004 	str	ip, [ip, #4]

	q_b->bufsz = bufsz;
	q_b->frbufsz = bufsz;
	q_b->buffer = msg_buffer;
	q_b->maxmsz = max_msg_size;
	q_b->head = 0;
30002f84:	e58c401c 	str	r4, [ip, #28]
	q_b->tail = 0;
30002f88:	e58c4020 	str	r4, [ip, #32]
	
	q_b->common_block_obj.name = p_name;
	q_b->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
	q_b->common_block_obj.object_type = RAW_QUEUE_BUFFER_OBJ_TYPE;

	TRACE_QUEUE_BUFFER_CREATE(raw_task_active, q_b); 
30002f8c:	e1a0100c 	mov	r1, ip
30002f90:	eb001313 	bl	30007be4 <_trace_queue_buffer_create>
30002f94:	e1a00004 	mov	r0, r4
	
	return RAW_SUCCESS;
30002f98:	eaffffe9 	b	30002f44 <raw_queue_buffer_create+0x38>
30002f9c:	30013838 	andcc	r3, r1, r8, lsr r8

30002fa0 <raw_queue_get_information>:
*             
************************************************************************************************************************
*/
#if (CONFIG_RAW_QUEUE_GET_INFORMATION > 0)
RAW_U16 raw_queue_get_information(RAW_QUEUE *p_q, RAW_MSG_INFO *msg_information)
{
30002fa0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	
	RAW_SR_ALLOC();
	
	#if (RAW_QUEUE_FUNCTION_CHECK > 0)

	if (p_q == 0)  {
30002fa4:	e2504000 	subs	r4, r0, #0
*             
************************************************************************************************************************
*/
#if (CONFIG_RAW_QUEUE_GET_INFORMATION > 0)
RAW_U16 raw_queue_get_information(RAW_QUEUE *p_q, RAW_MSG_INFO *msg_information)
{
30002fa8:	e1a05001 	mov	r5, r1
	
	RAW_SR_ALLOC();
	
	#if (RAW_QUEUE_FUNCTION_CHECK > 0)

	if (p_q == 0)  {
30002fac:	03a00025 	moveq	r0, #37	; 0x25
30002fb0:	0a000008 	beq	30002fd8 <raw_queue_get_information+0x38>
		
		return RAW_NULL_OBJECT;
	}

	
	if (msg_information == 0) {
30002fb4:	e3510000 	cmp	r1, #0
30002fb8:	03a00023 	moveq	r0, #35	; 0x23
30002fbc:	0a000005 	beq	30002fd8 <raw_queue_get_information+0x38>
	
	#endif

	
	
	RAW_CPU_DISABLE();
30002fc0:	eb00130c 	bl	30007bf8 <OS_CPU_SR_Save>

	if (p_q->common_block_obj.object_type !=  RAW_QUEUE_OBJ_TYPE) {
30002fc4:	e5d4300d 	ldrb	r3, [r4, #13]
30002fc8:	e3530013 	cmp	r3, #19
30002fcc:	0a000003 	beq	30002fe0 <raw_queue_get_information+0x40>
		
		RAW_CPU_ENABLE();
30002fd0:	eb001310 	bl	30007c18 <OS_CPU_SR_Restore>
30002fd4:	e3a00036 	mov	r0, #54	; 0x36
	
	RAW_CPU_ENABLE();

	return RAW_SUCCESS;

}
30002fd8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
30002fdc:	e12fff1e 	bx	lr
	msg_information->msg_q.queue_start =  p_q->msg_q.queue_start;
	msg_information->msg_q.queue_end = p_q->msg_q.queue_end;
	msg_information->msg_q.read = p_q->msg_q.read;
	msg_information->msg_q.write = p_q->msg_q.write;
	msg_information->msg_q.size = p_q->msg_q.size;
	msg_information->suspend_entry = block_list_head->next;
30002fe0:	e5948000 	ldr	r8, [r4]
		return RAW_ERROR_OBJECT_TYPE;
	}

	block_list_head = &p_q->common_block_obj.block_list;
	
	msg_information->msg_q.peak_numbers =  p_q->msg_q.peak_numbers;
30002fe4:	e5947028 	ldr	r7, [r4, #40]	; 0x28
	msg_information->msg_q.current_numbers = p_q->msg_q.current_numbers;
30002fe8:	e5946024 	ldr	r6, [r4, #36]	; 0x24
	msg_information->msg_q.queue_start =  p_q->msg_q.queue_start;
30002fec:	e594e010 	ldr	lr, [r4, #16]
	msg_information->msg_q.queue_end = p_q->msg_q.queue_end;
30002ff0:	e594c014 	ldr	ip, [r4, #20]
	msg_information->msg_q.read = p_q->msg_q.read;
30002ff4:	e594101c 	ldr	r1, [r4, #28]
	msg_information->msg_q.write = p_q->msg_q.write;
30002ff8:	e5942018 	ldr	r2, [r4, #24]
	msg_information->msg_q.size = p_q->msg_q.size;
30002ffc:	e5943020 	ldr	r3, [r4, #32]
	msg_information->suspend_entry = block_list_head->next;
30003000:	e585801c 	str	r8, [r5, #28]
		return RAW_ERROR_OBJECT_TYPE;
	}

	block_list_head = &p_q->common_block_obj.block_list;
	
	msg_information->msg_q.peak_numbers =  p_q->msg_q.peak_numbers;
30003004:	e5857018 	str	r7, [r5, #24]
	msg_information->msg_q.current_numbers = p_q->msg_q.current_numbers;
30003008:	e5856014 	str	r6, [r5, #20]
	msg_information->msg_q.queue_start =  p_q->msg_q.queue_start;
3000300c:	e585e000 	str	lr, [r5]
	msg_information->msg_q.queue_end = p_q->msg_q.queue_end;
30003010:	e585c004 	str	ip, [r5, #4]
	msg_information->msg_q.read = p_q->msg_q.read;
30003014:	e585100c 	str	r1, [r5, #12]
	msg_information->msg_q.write = p_q->msg_q.write;
30003018:	e5852008 	str	r2, [r5, #8]
	msg_information->msg_q.size = p_q->msg_q.size;
3000301c:	e5853010 	str	r3, [r5, #16]
	msg_information->suspend_entry = block_list_head->next;
	
	RAW_CPU_ENABLE();
30003020:	eb0012fc 	bl	30007c18 <OS_CPU_SR_Restore>
30003024:	e3a00000 	mov	r0, #0

	return RAW_SUCCESS;
30003028:	eaffffea 	b	30002fd8 <raw_queue_get_information+0x38>

3000302c <raw_queue_send_notify>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_send_notify(RAW_QUEUE *p_q, QUEUE_SEND_NOTIFY notify_function)
{
3000302c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	RAW_SR_ALLOC();
	

	#if (RAW_QUEUE_FUNCTION_CHECK > 0)

	if (p_q == 0) {
30003030:	e2504000 	subs	r4, r0, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_send_notify(RAW_QUEUE *p_q, QUEUE_SEND_NOTIFY notify_function)
{
30003034:	e1a07001 	mov	r7, r1
	RAW_SR_ALLOC();
	

	#if (RAW_QUEUE_FUNCTION_CHECK > 0)

	if (p_q == 0) {
30003038:	03a00025 	moveq	r0, #37	; 0x25
3000303c:	0a000004 	beq	30003054 <raw_queue_send_notify+0x28>
		
		return RAW_NULL_OBJECT;
	}

	if (raw_int_nesting) {
30003040:	e59f30a4 	ldr	r3, [pc, #164]	; 300030ec <raw_queue_send_notify+0xc0>
30003044:	e5d36000 	ldrb	r6, [r3]
30003048:	e3560000 	cmp	r6, #0
3000304c:	13a00027 	movne	r0, #39	; 0x27
30003050:	0a000001 	beq	3000305c <raw_queue_send_notify+0x30>
	
	p_q->queue_send_notify = notify_function;
	RAW_CRITICAL_EXIT();
	
	return RAW_SUCCESS;
}
30003054:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
30003058:	e12fff1e 	bx	lr
		
	}
	
	#endif
	
	RAW_CRITICAL_ENTER();
3000305c:	e59f508c 	ldr	r5, [pc, #140]	; 300030f0 <raw_queue_send_notify+0xc4>
30003060:	eb0012e4 	bl	30007bf8 <OS_CPU_SR_Save>
30003064:	e5d53000 	ldrb	r3, [r5]
30003068:	e2833001 	add	r3, r3, #1
3000306c:	e5c53000 	strb	r3, [r5]
30003070:	eb0012e8 	bl	30007c18 <OS_CPU_SR_Restore>

	if (p_q->common_block_obj.object_type != RAW_QUEUE_OBJ_TYPE) {
30003074:	e5d4300d 	ldrb	r3, [r4, #13]
30003078:	e3530013 	cmp	r3, #19
3000307c:	0a00000c 	beq	300030b4 <raw_queue_send_notify+0x88>
		
		RAW_CRITICAL_EXIT();
30003080:	e5d53000 	ldrb	r3, [r5]
30003084:	e3530001 	cmp	r3, #1
30003088:	0a000006 	beq	300030a8 <raw_queue_send_notify+0x7c>
3000308c:	eb0012d9 	bl	30007bf8 <OS_CPU_SR_Save>
30003090:	e5d53000 	ldrb	r3, [r5]
30003094:	e2433001 	sub	r3, r3, #1
30003098:	e5c53000 	strb	r3, [r5]
3000309c:	eb0012dd 	bl	30007c18 <OS_CPU_SR_Restore>
300030a0:	e3a00036 	mov	r0, #54	; 0x36
300030a4:	eaffffea 	b	30003054 <raw_queue_send_notify+0x28>
300030a8:	eb000d0f 	bl	300064ec <hybrid_int_process>
300030ac:	e3a00036 	mov	r0, #54	; 0x36
300030b0:	eaffffe7 	b	30003054 <raw_queue_send_notify+0x28>
		return RAW_ERROR_OBJECT_TYPE;
	}
	
	p_q->queue_send_notify = notify_function;
	RAW_CRITICAL_EXIT();
300030b4:	e5d53000 	ldrb	r3, [r5]
		
		RAW_CRITICAL_EXIT();
		return RAW_ERROR_OBJECT_TYPE;
	}
	
	p_q->queue_send_notify = notify_function;
300030b8:	e584702c 	str	r7, [r4, #44]	; 0x2c
	RAW_CRITICAL_EXIT();
300030bc:	e3530001 	cmp	r3, #1
300030c0:	0a000006 	beq	300030e0 <raw_queue_send_notify+0xb4>
300030c4:	eb0012cb 	bl	30007bf8 <OS_CPU_SR_Save>
300030c8:	e5d53000 	ldrb	r3, [r5]
300030cc:	e2433001 	sub	r3, r3, #1
300030d0:	e5c53000 	strb	r3, [r5]
300030d4:	eb0012cf 	bl	30007c18 <OS_CPU_SR_Restore>
300030d8:	e1a00006 	mov	r0, r6
300030dc:	eaffffdc 	b	30003054 <raw_queue_send_notify+0x28>
300030e0:	eb000d01 	bl	300064ec <hybrid_int_process>
300030e4:	e1a00006 	mov	r0, r6
300030e8:	eaffffd9 	b	30003054 <raw_queue_send_notify+0x28>
300030ec:	30013e61 	andcc	r3, r1, r1, ror #28
300030f0:	300142c0 	andcc	r4, r1, r0, asr #5

300030f4 <raw_queue_delete>:
*             
************************************************************************************************************************
*/
#if (CONFIG_RAW_QUEUE_DELETE > 0)
RAW_U16 raw_queue_delete(RAW_QUEUE *p_q)
{
300030f4:	e92d4070 	push	{r4, r5, r6, lr}
	
	RAW_SR_ALLOC();

	#if (RAW_QUEUE_FUNCTION_CHECK > 0)

	if (p_q == 0) {
300030f8:	e2504000 	subs	r4, r0, #0
300030fc:	03a00025 	moveq	r0, #37	; 0x25
30003100:	0a000004 	beq	30003118 <raw_queue_delete+0x24>
		
		return RAW_NULL_OBJECT;
	}

	if (raw_int_nesting) {
30003104:	e59f30d8 	ldr	r3, [pc, #216]	; 300031e4 <raw_queue_delete+0xf0>
30003108:	e5d35000 	ldrb	r5, [r3]
3000310c:	e3550000 	cmp	r5, #0
30003110:	13a00027 	movne	r0, #39	; 0x27
30003114:	0a000001 	beq	30003120 <raw_queue_delete+0x2c>

	do_possible_sche(); 
	
	return RAW_SUCCESS;
	
}
30003118:	e8bd4070 	pop	{r4, r5, r6, lr}
3000311c:	e12fff1e 	bx	lr
		
	}
	
	#endif
	
	RAW_CRITICAL_ENTER();
30003120:	e59f60c0 	ldr	r6, [pc, #192]	; 300031e8 <raw_queue_delete+0xf4>
30003124:	eb0012b3 	bl	30007bf8 <OS_CPU_SR_Save>
30003128:	e5d63000 	ldrb	r3, [r6]
3000312c:	e2833001 	add	r3, r3, #1
30003130:	e5c63000 	strb	r3, [r6]
30003134:	eb0012b7 	bl	30007c18 <OS_CPU_SR_Restore>

	if (p_q->common_block_obj.object_type != RAW_QUEUE_OBJ_TYPE) {
30003138:	e5d4300d 	ldrb	r3, [r4, #13]
3000313c:	e3530013 	cmp	r3, #19
30003140:	0a00000c 	beq	30003178 <raw_queue_delete+0x84>
		
		RAW_CRITICAL_EXIT();
30003144:	e5d63000 	ldrb	r3, [r6]
30003148:	e3530001 	cmp	r3, #1
3000314c:	0a000006 	beq	3000316c <raw_queue_delete+0x78>
30003150:	eb0012a8 	bl	30007bf8 <OS_CPU_SR_Save>
30003154:	e5d63000 	ldrb	r3, [r6]
30003158:	e2433001 	sub	r3, r3, #1
3000315c:	e5c63000 	strb	r3, [r6]
30003160:	eb0012ac 	bl	30007c18 <OS_CPU_SR_Restore>
30003164:	e3a00036 	mov	r0, #54	; 0x36
30003168:	eaffffea 	b	30003118 <raw_queue_delete+0x24>
3000316c:	eb000cde 	bl	300064ec <hybrid_int_process>
30003170:	e3a00036 	mov	r0, #54	; 0x36
30003174:	eaffffe7 	b	30003118 <raw_queue_delete+0x24>
 * return TRUE if the list is empty
 */
RAW_INLINE RAW_BOOLEAN is_list_empty(LIST *list)
{

	return (list->next == list);	
30003178:	e5940000 	ldr	r0, [r4]
		return RAW_ERROR_OBJECT_TYPE;
	}

	block_list_head = &p_q->common_block_obj.block_list;
	
	p_q->common_block_obj.object_type = 0u;
3000317c:	e5c4500d 	strb	r5, [r4, #13]
	
	/*All task blocked on this queue is waken up*/
	while (!is_list_empty(block_list_head))  {
30003180:	e1540000 	cmp	r4, r0
30003184:	0a000004 	beq	3000319c <raw_queue_delete+0xa8>
		delete_pend_obj(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list));	
30003188:	e2400004 	sub	r0, r0, #4
3000318c:	ebfffce4 	bl	30002524 <delete_pend_obj>
30003190:	e5940000 	ldr	r0, [r4]
	block_list_head = &p_q->common_block_obj.block_list;
	
	p_q->common_block_obj.object_type = 0u;
	
	/*All task blocked on this queue is waken up*/
	while (!is_list_empty(block_list_head))  {
30003194:	e1540000 	cmp	r4, r0
30003198:	1afffffa 	bne	30003188 <raw_queue_delete+0x94>
		delete_pend_obj(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list));	
	}                             
	
	RAW_CRITICAL_EXIT();
3000319c:	e5d63000 	ldrb	r3, [r6]
300031a0:	e59f5040 	ldr	r5, [pc, #64]	; 300031e8 <raw_queue_delete+0xf4>
300031a4:	e3530001 	cmp	r3, #1
300031a8:	0a00000b 	beq	300031dc <raw_queue_delete+0xe8>
300031ac:	eb001291 	bl	30007bf8 <OS_CPU_SR_Save>
300031b0:	e5d53000 	ldrb	r3, [r5]
300031b4:	e2433001 	sub	r3, r3, #1
300031b8:	e5c53000 	strb	r3, [r5]
300031bc:	eb001295 	bl	30007c18 <OS_CPU_SR_Restore>

	TRACE_QUEUE_DELETE(raw_task_active, p_q);
300031c0:	e59f3024 	ldr	r3, [pc, #36]	; 300031ec <raw_queue_delete+0xf8>
300031c4:	e1a01004 	mov	r1, r4
300031c8:	e5930000 	ldr	r0, [r3]
300031cc:	eb001269 	bl	30007b78 <_trace_queue_delete>

	do_possible_sche(); 
300031d0:	eb0004af 	bl	30004494 <raw_sched>
300031d4:	e3a00000 	mov	r0, #0
	
	return RAW_SUCCESS;
300031d8:	eaffffce 	b	30003118 <raw_queue_delete+0x24>
	/*All task blocked on this queue is waken up*/
	while (!is_list_empty(block_list_head))  {
		delete_pend_obj(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list));	
	}                             
	
	RAW_CRITICAL_EXIT();
300031dc:	eb000cc2 	bl	300064ec <hybrid_int_process>
300031e0:	eafffff6 	b	300031c0 <raw_queue_delete+0xcc>
300031e4:	30013e61 	andcc	r3, r1, r1, ror #28
300031e8:	300142c0 	andcc	r4, r1, r0, asr #5
300031ec:	30013838 	andcc	r3, r1, r8, lsr r8

300031f0 <raw_queue_flush>:
*             
************************************************************************************************************************
*/
#if (CONFIG_RAW_QUEUE_FLUSH > 0) 
RAW_U16 raw_queue_flush(RAW_QUEUE  *p_q)
{
300031f0:	e92d4070 	push	{r4, r5, r6, lr}
	RAW_SR_ALLOC();
	

	#if (RAW_QUEUE_FUNCTION_CHECK > 0)

	if (p_q == 0) {
300031f4:	e2506000 	subs	r6, r0, #0
300031f8:	03a00025 	moveq	r0, #37	; 0x25
300031fc:	0a000004 	beq	30003214 <raw_queue_flush+0x24>
		
		return RAW_NULL_OBJECT;
	}

	if (raw_int_nesting) {
30003200:	e59f30bc 	ldr	r3, [pc, #188]	; 300032c4 <raw_queue_flush+0xd4>
30003204:	e5d35000 	ldrb	r5, [r3]
30003208:	e3550000 	cmp	r5, #0
3000320c:	13a00027 	movne	r0, #39	; 0x27
30003210:	0a000001 	beq	3000321c <raw_queue_flush+0x2c>
	
	RAW_CRITICAL_EXIT(); 

	TRACE_QUEUE_FLUSH(raw_task_active, p_q);
	return RAW_SUCCESS;
}
30003214:	e8bd4070 	pop	{r4, r5, r6, lr}
30003218:	e12fff1e 	bx	lr
		
	}
	
	#endif
	
	RAW_CRITICAL_ENTER();
3000321c:	e59f40a4 	ldr	r4, [pc, #164]	; 300032c8 <raw_queue_flush+0xd8>
30003220:	eb001274 	bl	30007bf8 <OS_CPU_SR_Save>
30003224:	e5d43000 	ldrb	r3, [r4]
30003228:	e2833001 	add	r3, r3, #1
3000322c:	e5c43000 	strb	r3, [r4]
30003230:	eb001278 	bl	30007c18 <OS_CPU_SR_Restore>

	if (p_q->common_block_obj.object_type != RAW_QUEUE_OBJ_TYPE) {
30003234:	e5d6300d 	ldrb	r3, [r6, #13]
30003238:	e3530013 	cmp	r3, #19
3000323c:	0a00000c 	beq	30003274 <raw_queue_flush+0x84>
		
		RAW_CRITICAL_EXIT();
30003240:	e5d43000 	ldrb	r3, [r4]
30003244:	e3530001 	cmp	r3, #1
30003248:	0a000006 	beq	30003268 <raw_queue_flush+0x78>
3000324c:	eb001269 	bl	30007bf8 <OS_CPU_SR_Save>
30003250:	e5d43000 	ldrb	r3, [r4]
30003254:	e2433001 	sub	r3, r3, #1
30003258:	e5c43000 	strb	r3, [r4]
3000325c:	eb00126d 	bl	30007c18 <OS_CPU_SR_Restore>
30003260:	e3a00036 	mov	r0, #54	; 0x36
30003264:	eaffffea 	b	30003214 <raw_queue_flush+0x24>
30003268:	eb000c9f 	bl	300064ec <hybrid_int_process>
3000326c:	e3a00036 	mov	r0, #54	; 0x36
30003270:	eaffffe7 	b	30003214 <raw_queue_flush+0x24>
	p_q->msg_q.write = p_q->msg_q.queue_start;
	p_q->msg_q.read  = p_q->msg_q.queue_start;

	p_q->msg_q.current_numbers = 0u;
	
	RAW_CRITICAL_EXIT(); 
30003274:	e5d42000 	ldrb	r2, [r4]
		RAW_CRITICAL_EXIT();
		return RAW_ERROR_OBJECT_TYPE;
	}

	/*Reset  read and write pointer to init position*/
	p_q->msg_q.write = p_q->msg_q.queue_start;
30003278:	e5963010 	ldr	r3, [r6, #16]
	p_q->msg_q.read  = p_q->msg_q.queue_start;

	p_q->msg_q.current_numbers = 0u;
	
	RAW_CRITICAL_EXIT(); 
3000327c:	e3520001 	cmp	r2, #1
		return RAW_ERROR_OBJECT_TYPE;
	}

	/*Reset  read and write pointer to init position*/
	p_q->msg_q.write = p_q->msg_q.queue_start;
	p_q->msg_q.read  = p_q->msg_q.queue_start;
30003280:	e586301c 	str	r3, [r6, #28]

	p_q->msg_q.current_numbers = 0u;
30003284:	e5865024 	str	r5, [r6, #36]	; 0x24
		RAW_CRITICAL_EXIT();
		return RAW_ERROR_OBJECT_TYPE;
	}

	/*Reset  read and write pointer to init position*/
	p_q->msg_q.write = p_q->msg_q.queue_start;
30003288:	e5863018 	str	r3, [r6, #24]
	p_q->msg_q.read  = p_q->msg_q.queue_start;

	p_q->msg_q.current_numbers = 0u;
	
	RAW_CRITICAL_EXIT(); 
3000328c:	0a00000a 	beq	300032bc <raw_queue_flush+0xcc>
30003290:	eb001258 	bl	30007bf8 <OS_CPU_SR_Save>
30003294:	e5d43000 	ldrb	r3, [r4]
30003298:	e2433001 	sub	r3, r3, #1
3000329c:	e5c43000 	strb	r3, [r4]
300032a0:	eb00125c 	bl	30007c18 <OS_CPU_SR_Restore>

	TRACE_QUEUE_FLUSH(raw_task_active, p_q);
300032a4:	e59f3020 	ldr	r3, [pc, #32]	; 300032cc <raw_queue_flush+0xdc>
300032a8:	e1a01006 	mov	r1, r6
300032ac:	e5930000 	ldr	r0, [r3]
300032b0:	eb00122f 	bl	30007b74 <_trace_queue_flush>
300032b4:	e3a00000 	mov	r0, #0
	return RAW_SUCCESS;
300032b8:	eaffffd5 	b	30003214 <raw_queue_flush+0x24>
	p_q->msg_q.write = p_q->msg_q.queue_start;
	p_q->msg_q.read  = p_q->msg_q.queue_start;

	p_q->msg_q.current_numbers = 0u;
	
	RAW_CRITICAL_EXIT(); 
300032bc:	eb000c8a 	bl	300064ec <hybrid_int_process>
300032c0:	eafffff7 	b	300032a4 <raw_queue_flush+0xb4>
300032c4:	30013e61 	andcc	r3, r1, r1, ror #28
300032c8:	300142c0 	andcc	r4, r1, r0, asr #5
300032cc:	30013838 	andcc	r3, r1, r8, lsr r8

300032d0 <raw_queue_receive>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_receive(RAW_QUEUE *p_q, RAW_TICK_TYPE wait_option, RAW_VOID **msg)
{
300032d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	
	RAW_SR_ALLOC();

	#if (RAW_QUEUE_FUNCTION_CHECK > 0)

	if (raw_int_nesting) {
300032d4:	e59f31f8 	ldr	r3, [pc, #504]	; 300034d4 <raw_queue_receive+0x204>
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_receive(RAW_QUEUE *p_q, RAW_TICK_TYPE wait_option, RAW_VOID **msg)
{
300032d8:	e1a04000 	mov	r4, r0
	
	RAW_SR_ALLOC();

	#if (RAW_QUEUE_FUNCTION_CHECK > 0)

	if (raw_int_nesting) {
300032dc:	e5d33000 	ldrb	r3, [r3]
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_receive(RAW_QUEUE *p_q, RAW_TICK_TYPE wait_option, RAW_VOID **msg)
{
300032e0:	e1a07001 	mov	r7, r1
	
	RAW_SR_ALLOC();

	#if (RAW_QUEUE_FUNCTION_CHECK > 0)

	if (raw_int_nesting) {
300032e4:	e3530000 	cmp	r3, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_receive(RAW_QUEUE *p_q, RAW_TICK_TYPE wait_option, RAW_VOID **msg)
{
300032e8:	e1a06002 	mov	r6, r2
	
	RAW_SR_ALLOC();

	#if (RAW_QUEUE_FUNCTION_CHECK > 0)

	if (raw_int_nesting) {
300032ec:	13a00027 	movne	r0, #39	; 0x27
300032f0:	1a000017 	bne	30003354 <raw_queue_receive+0x84>
		
		return RAW_NOT_CALLED_BY_ISR;
		
	}

	if (p_q == 0) {
300032f4:	e3540000 	cmp	r4, #0
300032f8:	03a00025 	moveq	r0, #37	; 0x25
300032fc:	0a000014 	beq	30003354 <raw_queue_receive+0x84>
		
		return RAW_NULL_OBJECT;
	}

	
	if (msg == 0) {
30003300:	e3520000 	cmp	r2, #0
30003304:	03a00023 	moveq	r0, #35	; 0x23
30003308:	0a000011 	beq	30003354 <raw_queue_receive+0x84>
		return RAW_NULL_POINTER;
	}
	
	#endif
	
	RAW_CRITICAL_ENTER();
3000330c:	e59f51c4 	ldr	r5, [pc, #452]	; 300034d8 <raw_queue_receive+0x208>
30003310:	eb001238 	bl	30007bf8 <OS_CPU_SR_Save>
30003314:	e5d53000 	ldrb	r3, [r5]
30003318:	e2833001 	add	r3, r3, #1
3000331c:	e5c53000 	strb	r3, [r5]
30003320:	eb00123c 	bl	30007c18 <OS_CPU_SR_Restore>

	if (p_q->common_block_obj.object_type != RAW_QUEUE_OBJ_TYPE) {
30003324:	e5d4300d 	ldrb	r3, [r4, #13]
30003328:	e3530013 	cmp	r3, #19
3000332c:	0a00000a 	beq	3000335c <raw_queue_receive+0x8c>
		
		RAW_CRITICAL_EXIT();
30003330:	e5d53000 	ldrb	r3, [r5]
30003334:	e3530001 	cmp	r3, #1
30003338:	0a000025 	beq	300033d4 <raw_queue_receive+0x104>
3000333c:	eb00122d 	bl	30007bf8 <OS_CPU_SR_Save>
30003340:	e5d53000 	ldrb	r3, [r5]
30003344:	e2433001 	sub	r3, r3, #1
30003348:	e5c53000 	strb	r3, [r5]
3000334c:	eb001231 	bl	30007c18 <OS_CPU_SR_Restore>
30003350:	e3a00036 	mov	r0, #54	; 0x36
	*msg      = (RAW_VOID      *)0;
	result = block_state_post_process(raw_task_active, msg);
	
	return result;
	
}
30003354:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
30003358:	e12fff1e 	bx	lr
		RAW_CRITICAL_EXIT();
		return RAW_ERROR_OBJECT_TYPE;
	}

  	/*if queue has msgs, just receive it*/
	if (p_q->msg_q.current_numbers) { 
3000335c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
30003360:	e3530000 	cmp	r3, #0
30003364:	0a00001d 	beq	300033e0 <raw_queue_receive+0x110>
		
		pmsg = *p_q->msg_q.read++;                    
30003368:	e594201c 	ldr	r2, [r4, #28]
		
		if (p_q->msg_q.read == p_q->msg_q.queue_end) { 
3000336c:	e5940014 	ldr	r0, [r4, #20]
	}

  	/*if queue has msgs, just receive it*/
	if (p_q->msg_q.current_numbers) { 
		
		pmsg = *p_q->msg_q.read++;                    
30003370:	e4921004 	ldr	r1, [r2], #4
			p_q->msg_q.read = p_q->msg_q.queue_start;
		}

		*msg = pmsg;

		p_q->msg_q.current_numbers--;  
30003374:	e2433001 	sub	r3, r3, #1
  	/*if queue has msgs, just receive it*/
	if (p_q->msg_q.current_numbers) { 
		
		pmsg = *p_q->msg_q.read++;                    
		
		if (p_q->msg_q.read == p_q->msg_q.queue_end) { 
30003378:	e1520000 	cmp	r2, r0
	}

  	/*if queue has msgs, just receive it*/
	if (p_q->msg_q.current_numbers) { 
		
		pmsg = *p_q->msg_q.read++;                    
3000337c:	e584201c 	str	r2, [r4, #28]
		
		if (p_q->msg_q.read == p_q->msg_q.queue_end) { 
			/*wrap around to start*/
			p_q->msg_q.read = p_q->msg_q.queue_start;
30003380:	05942010 	ldreq	r2, [r4, #16]
		}

		*msg = pmsg;
30003384:	e5861000 	str	r1, [r6]
		
		pmsg = *p_q->msg_q.read++;                    
		
		if (p_q->msg_q.read == p_q->msg_q.queue_end) { 
			/*wrap around to start*/
			p_q->msg_q.read = p_q->msg_q.queue_start;
30003388:	0584201c 	streq	r2, [r4, #28]

		*msg = pmsg;

		p_q->msg_q.current_numbers--;  
		
		RAW_CRITICAL_EXIT();
3000338c:	e5d52000 	ldrb	r2, [r5]
			p_q->msg_q.read = p_q->msg_q.queue_start;
		}

		*msg = pmsg;

		p_q->msg_q.current_numbers--;  
30003390:	e5843024 	str	r3, [r4, #36]	; 0x24
		
		RAW_CRITICAL_EXIT();
30003394:	e3520001 	cmp	r2, #1
30003398:	e59f5138 	ldr	r5, [pc, #312]	; 300034d8 <raw_queue_receive+0x208>
3000339c:	0a00002a 	beq	3000344c <raw_queue_receive+0x17c>
300033a0:	eb001214 	bl	30007bf8 <OS_CPU_SR_Save>
300033a4:	e5d53000 	ldrb	r3, [r5]
300033a8:	e2433001 	sub	r3, r3, #1
300033ac:	e5c53000 	strb	r3, [r5]
300033b0:	eb001218 	bl	30007c18 <OS_CPU_SR_Restore>

		TRACE_QUEUE_GET_MSG(raw_task_active, p_q, wait_option, *msg);
300033b4:	e59f3120 	ldr	r3, [pc, #288]	; 300034dc <raw_queue_receive+0x20c>
300033b8:	e1a01004 	mov	r1, r4
300033bc:	e5930000 	ldr	r0, [r3]
300033c0:	e1a02007 	mov	r2, r7
300033c4:	e5963000 	ldr	r3, [r6]
300033c8:	eb0011e6 	bl	30007b68 <_trace_queue_get_msg>
300033cc:	e3a00000 	mov	r0, #0
		
		return RAW_SUCCESS;                         
300033d0:	eaffffdf 	b	30003354 <raw_queue_receive+0x84>
	
	RAW_CRITICAL_ENTER();

	if (p_q->common_block_obj.object_type != RAW_QUEUE_OBJ_TYPE) {
		
		RAW_CRITICAL_EXIT();
300033d4:	eb000c44 	bl	300064ec <hybrid_int_process>
300033d8:	e3a00036 	mov	r0, #54	; 0x36
300033dc:	eaffffdc 	b	30003354 <raw_queue_receive+0x84>
		return RAW_SUCCESS;                         
	}



	if (wait_option == RAW_NO_WAIT) {   
300033e0:	e3570000 	cmp	r7, #0
300033e4:	0a00000d 	beq	30003420 <raw_queue_receive+0x150>
		RAW_CRITICAL_EXIT();
		return RAW_NO_PEND_WAIT;
	} 

	/*if system is locked, block operation is not allowed*/
	SYSTEM_LOCK_PROCESS_QUEUE();
300033e8:	e5d52000 	ldrb	r2, [r5]
300033ec:	e3520001 	cmp	r2, #1
300033f0:	9a00001d 	bls	3000346c <raw_queue_receive+0x19c>
300033f4:	e5863000 	str	r3, [r6]
300033f8:	e5d53000 	ldrb	r3, [r5]
300033fc:	e3530001 	cmp	r3, #1
30003400:	0a000016 	beq	30003460 <raw_queue_receive+0x190>
30003404:	eb0011fb 	bl	30007bf8 <OS_CPU_SR_Save>
30003408:	e5d53000 	ldrb	r3, [r5]
3000340c:	e2433001 	sub	r3, r3, #1
30003410:	e5c53000 	strb	r3, [r5]
30003414:	eb0011ff 	bl	30007c18 <OS_CPU_SR_Restore>
30003418:	e3a00007 	mov	r0, #7
3000341c:	eaffffcc 	b	30003354 <raw_queue_receive+0x84>
	}



	if (wait_option == RAW_NO_WAIT) {   
		*msg = (RAW_VOID *)0;
30003420:	e5867000 	str	r7, [r6]
		RAW_CRITICAL_EXIT();
30003424:	e5d53000 	ldrb	r3, [r5]
30003428:	e3530001 	cmp	r3, #1
3000342c:	0a000008 	beq	30003454 <raw_queue_receive+0x184>
30003430:	eb0011f0 	bl	30007bf8 <OS_CPU_SR_Save>
30003434:	e5d53000 	ldrb	r3, [r5]
30003438:	e2433001 	sub	r3, r3, #1
3000343c:	e5c53000 	strb	r3, [r5]
30003440:	eb0011f4 	bl	30007c18 <OS_CPU_SR_Restore>
30003444:	e3a00006 	mov	r0, #6
30003448:	eaffffc1 	b	30003354 <raw_queue_receive+0x84>

		*msg = pmsg;

		p_q->msg_q.current_numbers--;  
		
		RAW_CRITICAL_EXIT();
3000344c:	eb000c26 	bl	300064ec <hybrid_int_process>
30003450:	eaffffd7 	b	300033b4 <raw_queue_receive+0xe4>



	if (wait_option == RAW_NO_WAIT) {   
		*msg = (RAW_VOID *)0;
		RAW_CRITICAL_EXIT();
30003454:	eb000c24 	bl	300064ec <hybrid_int_process>
30003458:	e3a00006 	mov	r0, #6
3000345c:	eaffffbc 	b	30003354 <raw_queue_receive+0x84>
		return RAW_NO_PEND_WAIT;
	} 

	/*if system is locked, block operation is not allowed*/
	SYSTEM_LOCK_PROCESS_QUEUE();
30003460:	eb000c21 	bl	300064ec <hybrid_int_process>
30003464:	e3a00007 	mov	r0, #7
30003468:	eaffffb9 	b	30003354 <raw_queue_receive+0x84>

	raw_pend_object((RAW_COMMON_BLOCK_OBJECT  *)p_q, raw_task_active, wait_option);
3000346c:	e59f8068 	ldr	r8, [pc, #104]	; 300034dc <raw_queue_receive+0x20c>
30003470:	e1a00004 	mov	r0, r4
30003474:	e5981000 	ldr	r1, [r8]
30003478:	e1a02007 	mov	r2, r7
3000347c:	ebfffc97 	bl	300026e0 <raw_pend_object>
	
	RAW_CRITICAL_EXIT();
30003480:	e5d53000 	ldrb	r3, [r5]
30003484:	e3530001 	cmp	r3, #1
30003488:	0a00000f 	beq	300034cc <raw_queue_receive+0x1fc>
3000348c:	eb0011d9 	bl	30007bf8 <OS_CPU_SR_Save>
30003490:	e5d53000 	ldrb	r3, [r5]
30003494:	e2433001 	sub	r3, r3, #1
30003498:	e5c53000 	strb	r3, [r5]
3000349c:	eb0011dd 	bl	30007c18 <OS_CPU_SR_Restore>

	TRACE_QUEUE_GET_BLOCK(raw_task_active, p_q, wait_option);
300034a0:	e1a01004 	mov	r1, r4
300034a4:	e5980000 	ldr	r0, [r8]
300034a8:	e1a02007 	mov	r2, r7
300034ac:	eb0011af 	bl	30007b70 <_trace_queue_get_block>
	
	raw_sched();                                             
300034b0:	eb0003f7 	bl	30004494 <raw_sched>

	*msg      = (RAW_VOID      *)0;
300034b4:	e3a03000 	mov	r3, #0
300034b8:	e5863000 	str	r3, [r6]
	result = block_state_post_process(raw_task_active, msg);
300034bc:	e5980000 	ldr	r0, [r8]
300034c0:	e1a01006 	mov	r1, r6
300034c4:	eb0005f2 	bl	30004c94 <block_state_post_process>
	
	return result;
300034c8:	eaffffa1 	b	30003354 <raw_queue_receive+0x84>
	/*if system is locked, block operation is not allowed*/
	SYSTEM_LOCK_PROCESS_QUEUE();

	raw_pend_object((RAW_COMMON_BLOCK_OBJECT  *)p_q, raw_task_active, wait_option);
	
	RAW_CRITICAL_EXIT();
300034cc:	eb000c06 	bl	300064ec <hybrid_int_process>
300034d0:	eafffff2 	b	300034a0 <raw_queue_receive+0x1d0>
300034d4:	30013e61 	andcc	r3, r1, r1, ror #28
300034d8:	300142c0 	andcc	r4, r1, r0, asr #5
300034dc:	30013838 	andcc	r3, r1, r8, lsr r8

300034e0 <msg_post>:
	return RAW_SUCCESS;
}


RAW_U16 msg_post(RAW_QUEUE *p_q, RAW_VOID *p_void, RAW_U8 opt_send_method, RAW_U8 opt_wake_all)             
{
300034e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	LIST *block_list_head;

 	RAW_SR_ALLOC();

	RAW_CRITICAL_ENTER();
300034e4:	e59f4224 	ldr	r4, [pc, #548]	; 30003710 <msg_post+0x230>
	return RAW_SUCCESS;
}


RAW_U16 msg_post(RAW_QUEUE *p_q, RAW_VOID *p_void, RAW_U8 opt_send_method, RAW_U8 opt_wake_all)             
{
300034e8:	e1a05000 	mov	r5, r0
300034ec:	e1a06001 	mov	r6, r1
300034f0:	e1a08002 	mov	r8, r2
300034f4:	e1a07003 	mov	r7, r3
	LIST *block_list_head;

 	RAW_SR_ALLOC();

	RAW_CRITICAL_ENTER();
300034f8:	eb0011be 	bl	30007bf8 <OS_CPU_SR_Save>
300034fc:	e5d43000 	ldrb	r3, [r4]
30003500:	e2833001 	add	r3, r3, #1
30003504:	e5c43000 	strb	r3, [r4]
30003508:	eb0011c2 	bl	30007c18 <OS_CPU_SR_Restore>

	if (p_q->common_block_obj.object_type != RAW_QUEUE_OBJ_TYPE) {
3000350c:	e5d5300d 	ldrb	r3, [r5, #13]
30003510:	e3530013 	cmp	r3, #19
30003514:	0a00000a 	beq	30003544 <msg_post+0x64>
		
		RAW_CRITICAL_EXIT();
30003518:	e5d43000 	ldrb	r3, [r4]
3000351c:	e3530001 	cmp	r3, #1
30003520:	0a00001b 	beq	30003594 <msg_post+0xb4>
30003524:	eb0011b3 	bl	30007bf8 <OS_CPU_SR_Save>
30003528:	e5d43000 	ldrb	r3, [r4]
3000352c:	e2433001 	sub	r3, r3, #1
30003530:	e5c43000 	strb	r3, [r4]
30003534:	eb0011b7 	bl	30007c18 <OS_CPU_SR_Restore>
30003538:	e3a00036 	mov	r0, #54	; 0x36
	
	RAW_CRITICAL_EXIT();

	do_possible_sche();    
	return RAW_SUCCESS;
}
3000353c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
30003540:	e12fff1e 	bx	lr
		return RAW_ERROR_OBJECT_TYPE;
	}

	block_list_head = &p_q->common_block_obj.block_list;
	
	if (p_q->msg_q.current_numbers >= p_q->msg_q.size) {  
30003544:	e5953024 	ldr	r3, [r5, #36]	; 0x24
30003548:	e5952020 	ldr	r2, [r5, #32]
3000354c:	e1530002 	cmp	r3, r2
30003550:	3a000012 	bcc	300035a0 <msg_post+0xc0>

		RAW_CRITICAL_EXIT();
30003554:	e5d43000 	ldrb	r3, [r4]
30003558:	e3530001 	cmp	r3, #1
3000355c:	0a00002d 	beq	30003618 <msg_post+0x138>
30003560:	eb0011a4 	bl	30007bf8 <OS_CPU_SR_Save>
30003564:	e5d43000 	ldrb	r3, [r4]
30003568:	e2433001 	sub	r3, r3, #1
3000356c:	e5c43000 	strb	r3, [r4]
30003570:	eb0011a8 	bl	30007c18 <OS_CPU_SR_Restore>
		
		TRACE_QUEUE_MSG_MAX(raw_task_active, p_q, p_void, opt_send_method); 
30003574:	e59f3198 	ldr	r3, [pc, #408]	; 30003714 <msg_post+0x234>
30003578:	e1a01005 	mov	r1, r5
3000357c:	e5930000 	ldr	r0, [r3]
30003580:	e1a02006 	mov	r2, r6
30003584:	e1a03008 	mov	r3, r8
30003588:	eb001177 	bl	30007b6c <_trace_queue_msg_max>
3000358c:	e3a0000b 	mov	r0, #11
		
		return RAW_MSG_MAX;
30003590:	eaffffe9 	b	3000353c <msg_post+0x5c>

	RAW_CRITICAL_ENTER();

	if (p_q->common_block_obj.object_type != RAW_QUEUE_OBJ_TYPE) {
		
		RAW_CRITICAL_EXIT();
30003594:	eb000bd4 	bl	300064ec <hybrid_int_process>
30003598:	e3a00036 	mov	r0, #54	; 0x36
3000359c:	eaffffe6 	b	3000353c <msg_post+0x5c>
300035a0:	e5950000 	ldr	r0, [r5]
		return RAW_MSG_MAX;
	}


	/*Queue is not full here, if there is no blocked receive task*/
	if (is_list_empty(block_list_head)) {        
300035a4:	e1550000 	cmp	r5, r0
300035a8:	0a000029 	beq	30003654 <msg_post+0x174>
		
		return RAW_SUCCESS;
	}

	/*wake all the task blocked on this queue*/
	if (opt_wake_all) {
300035ac:	e3570000 	cmp	r7, #0
300035b0:	0a00001a 	beq	30003620 <msg_post+0x140>
300035b4:	e59f8158 	ldr	r8, [pc, #344]	; 30003714 <msg_post+0x234>

		while (!is_list_empty(block_list_head)) {
			
			wake_send_msg(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list),  p_void);	
300035b8:	e1a01006 	mov	r1, r6
300035bc:	e2400004 	sub	r0, r0, #4
300035c0:	ebfffc23 	bl	30002654 <wake_send_msg>
			
			TRACE_QUEUE_WAKE_TASK(raw_task_active, list_entry(block_list_head->next, RAW_TASK_OBJ, task_list), p_void, opt_wake_all);
300035c4:	e5951000 	ldr	r1, [r5]
300035c8:	e5980000 	ldr	r0, [r8]
300035cc:	e2411004 	sub	r1, r1, #4
300035d0:	e1a02006 	mov	r2, r6
300035d4:	e1a03007 	mov	r3, r7
300035d8:	eb001161 	bl	30007b64 <_trace_queue_wake_task>
300035dc:	e5950000 	ldr	r0, [r5]
	}

	/*wake all the task blocked on this queue*/
	if (opt_wake_all) {

		while (!is_list_empty(block_list_head)) {
300035e0:	e1550000 	cmp	r5, r0
300035e4:	1afffff3 	bne	300035b8 <msg_post+0xd8>
		
		TRACE_QUEUE_WAKE_TASK(raw_task_active, list_entry(block_list_head->next, RAW_TASK_OBJ, task_list), p_void, opt_wake_all);

	}
	
	RAW_CRITICAL_EXIT();
300035e8:	e5d43000 	ldrb	r3, [r4]
300035ec:	e59f411c 	ldr	r4, [pc, #284]	; 30003710 <msg_post+0x230>
300035f0:	e3530001 	cmp	r3, #1
300035f4:	0a000014 	beq	3000364c <msg_post+0x16c>
300035f8:	eb00117e 	bl	30007bf8 <OS_CPU_SR_Save>
300035fc:	e5d43000 	ldrb	r3, [r4]
30003600:	e2433001 	sub	r3, r3, #1
30003604:	e5c43000 	strb	r3, [r4]
30003608:	eb001182 	bl	30007c18 <OS_CPU_SR_Restore>

	do_possible_sche();    
3000360c:	eb0003a0 	bl	30004494 <raw_sched>
30003610:	e3a00000 	mov	r0, #0
	return RAW_SUCCESS;
30003614:	eaffffc8 	b	3000353c <msg_post+0x5c>

	block_list_head = &p_q->common_block_obj.block_list;
	
	if (p_q->msg_q.current_numbers >= p_q->msg_q.size) {  

		RAW_CRITICAL_EXIT();
30003618:	eb000bb3 	bl	300064ec <hybrid_int_process>
3000361c:	eaffffd4 	b	30003574 <msg_post+0x94>
	}
	
	/*wake hignhest priority task blocked on this queue and send msg to it*/
	else {
		
		wake_send_msg(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list),  p_void);
30003620:	e1a01006 	mov	r1, r6
30003624:	e2400004 	sub	r0, r0, #4
30003628:	ebfffc09 	bl	30002654 <wake_send_msg>
		
		TRACE_QUEUE_WAKE_TASK(raw_task_active, list_entry(block_list_head->next, RAW_TASK_OBJ, task_list), p_void, opt_wake_all);
3000362c:	e5951000 	ldr	r1, [r5]
30003630:	e59f30dc 	ldr	r3, [pc, #220]	; 30003714 <msg_post+0x234>
30003634:	e2411004 	sub	r1, r1, #4
30003638:	e5930000 	ldr	r0, [r3]
3000363c:	e1a02006 	mov	r2, r6
30003640:	e1a03007 	mov	r3, r7
30003644:	eb001146 	bl	30007b64 <_trace_queue_wake_task>
30003648:	eaffffe6 	b	300035e8 <msg_post+0x108>

	}
	
	RAW_CRITICAL_EXIT();
3000364c:	eb000ba6 	bl	300064ec <hybrid_int_process>
30003650:	eaffffed 	b	3000360c <msg_post+0x12c>
	if (is_list_empty(block_list_head)) {        

		p_q->msg_q.current_numbers++;                                

		/*update peak_numbers for debug*/
		if (p_q->msg_q.current_numbers > p_q->msg_q.peak_numbers) {
30003654:	e5952028 	ldr	r2, [r5, #40]	; 0x28


	/*Queue is not full here, if there is no blocked receive task*/
	if (is_list_empty(block_list_head)) {        

		p_q->msg_q.current_numbers++;                                
30003658:	e2833001 	add	r3, r3, #1

		/*update peak_numbers for debug*/
		if (p_q->msg_q.current_numbers > p_q->msg_q.peak_numbers) {
3000365c:	e1530002 	cmp	r3, r2

			p_q->msg_q.peak_numbers = p_q->msg_q.current_numbers;
30003660:	85853028 	strhi	r3, [r5, #40]	; 0x28
		}
		
		if (opt_send_method == SEND_TO_END)  {
30003664:	e3580002 	cmp	r8, #2


	/*Queue is not full here, if there is no blocked receive task*/
	if (is_list_empty(block_list_head)) {        

		p_q->msg_q.current_numbers++;                                
30003668:	e5853024 	str	r3, [r5, #36]	; 0x24
		if (p_q->msg_q.current_numbers > p_q->msg_q.peak_numbers) {

			p_q->msg_q.peak_numbers = p_q->msg_q.current_numbers;
		}
		
		if (opt_send_method == SEND_TO_END)  {
3000366c:	0a00001f 	beq	300036f0 <msg_post+0x210>
		}

		else {

			 /* Wrap read pointer to end if we are at the 1st queue entry */
			if (p_q->msg_q.read == p_q->msg_q.queue_start) {                
30003670:	e595301c 	ldr	r3, [r5, #28]
30003674:	e5952010 	ldr	r2, [r5, #16]
30003678:	e1530002 	cmp	r3, r2
	        	p_q->msg_q.read = p_q->msg_q.queue_end;
3000367c:	05953014 	ldreq	r3, [r5, #20]
	    	}
			
			p_q->msg_q.read--;
30003680:	e2432004 	sub	r2, r3, #4

		else {

			 /* Wrap read pointer to end if we are at the 1st queue entry */
			if (p_q->msg_q.read == p_q->msg_q.queue_start) {                
	        	p_q->msg_q.read = p_q->msg_q.queue_end;
30003684:	0585301c 	streq	r3, [r5, #28]
	    	}
			
			p_q->msg_q.read--;
			*p_q->msg_q.read = p_void;                               /* Insert message into queue                     */
30003688:	e5036004 	str	r6, [r3, #-4]
			 /* Wrap read pointer to end if we are at the 1st queue entry */
			if (p_q->msg_q.read == p_q->msg_q.queue_start) {                
	        	p_q->msg_q.read = p_q->msg_q.queue_end;
	    	}
			
			p_q->msg_q.read--;
3000368c:	e585201c 	str	r2, [r5, #28]
			*p_q->msg_q.read = p_void;                               /* Insert message into queue                     */
			
		}
		
		RAW_CRITICAL_EXIT();
30003690:	e5d43000 	ldrb	r3, [r4]
30003694:	e59f4074 	ldr	r4, [pc, #116]	; 30003710 <msg_post+0x230>
30003698:	e3530001 	cmp	r3, #1
3000369c:	0a000011 	beq	300036e8 <msg_post+0x208>
300036a0:	eb001154 	bl	30007bf8 <OS_CPU_SR_Save>
300036a4:	e5d43000 	ldrb	r3, [r4]
300036a8:	e2433001 	sub	r3, r3, #1
300036ac:	e5c43000 	strb	r3, [r4]
300036b0:	eb001158 	bl	30007c18 <OS_CPU_SR_Restore>

		/*if queue is registered with notify function just call it*/		
		if (p_q->queue_send_notify) {
300036b4:	e595302c 	ldr	r3, [r5, #44]	; 0x2c
300036b8:	e3530000 	cmp	r3, #0

			p_q->queue_send_notify(p_q);	
300036bc:	11a00005 	movne	r0, r5
300036c0:	11a0e00f 	movne	lr, pc
300036c4:	112fff13 	bxne	r3
		}

		TRACE_QUEUE_MSG_POST(raw_task_active, p_q, p_void, opt_send_method); 
300036c8:	e59f3044 	ldr	r3, [pc, #68]	; 30003714 <msg_post+0x234>
300036cc:	e1a01005 	mov	r1, r5
300036d0:	e5930000 	ldr	r0, [r3]
300036d4:	e1a02006 	mov	r2, r6
300036d8:	e1a03008 	mov	r3, r8
300036dc:	eb00111f 	bl	30007b60 <_trace_queue_msg_post>
300036e0:	e3a00000 	mov	r0, #0
		
		return RAW_SUCCESS;
300036e4:	eaffff94 	b	3000353c <msg_post+0x5c>
			p_q->msg_q.read--;
			*p_q->msg_q.read = p_void;                               /* Insert message into queue                     */
			
		}
		
		RAW_CRITICAL_EXIT();
300036e8:	eb000b7f 	bl	300064ec <hybrid_int_process>
300036ec:	eafffff0 	b	300036b4 <msg_post+0x1d4>
			p_q->msg_q.peak_numbers = p_q->msg_q.current_numbers;
		}
		
		if (opt_send_method == SEND_TO_END)  {

			*p_q->msg_q.write++ = p_void;                              
300036f0:	e5953018 	ldr	r3, [r5, #24]

			if (p_q->msg_q.write == p_q->msg_q.queue_end) {   
300036f4:	e5952014 	ldr	r2, [r5, #20]
			p_q->msg_q.peak_numbers = p_q->msg_q.current_numbers;
		}
		
		if (opt_send_method == SEND_TO_END)  {

			*p_q->msg_q.write++ = p_void;                              
300036f8:	e4836004 	str	r6, [r3], #4

			if (p_q->msg_q.write == p_q->msg_q.queue_end) {   
300036fc:	e1530002 	cmp	r3, r2
			p_q->msg_q.peak_numbers = p_q->msg_q.current_numbers;
		}
		
		if (opt_send_method == SEND_TO_END)  {

			*p_q->msg_q.write++ = p_void;                              
30003700:	e5853018 	str	r3, [r5, #24]

			if (p_q->msg_q.write == p_q->msg_q.queue_end) {   
				
				p_q->msg_q.write = p_q->msg_q.queue_start;
30003704:	05953010 	ldreq	r3, [r5, #16]
30003708:	05853018 	streq	r3, [r5, #24]
3000370c:	eaffffdf 	b	30003690 <msg_post+0x1b0>
30003710:	300142c0 	andcc	r4, r1, r0, asr #5
30003714:	30013838 	andcc	r3, r1, r8, lsr r8

30003718 <raw_queue_all_post>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_all_post(RAW_QUEUE *p_q, RAW_VOID *p_void, RAW_U8 opt)
{
30003718:	e92d4030 	push	{r4, r5, lr}
	#if (RAW_QUEUE_FUNCTION_CHECK > 0)

	if (p_q == 0) {
3000371c:	e2505000 	subs	r5, r0, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_all_post(RAW_QUEUE *p_q, RAW_VOID *p_void, RAW_U8 opt)
{
30003720:	e24dd00c 	sub	sp, sp, #12
30003724:	e1a04001 	mov	r4, r1
30003728:	e1a0c002 	mov	ip, r2
	#if (RAW_QUEUE_FUNCTION_CHECK > 0)

	if (p_q == 0) {
3000372c:	03a00025 	moveq	r0, #37	; 0x25
30003730:	0a000012 	beq	30003780 <raw_queue_all_post+0x68>
		
		return RAW_NULL_OBJECT;
	}

	
	if (p_void == 0) {
30003734:	e3510000 	cmp	r1, #0
30003738:	03a00023 	moveq	r0, #35	; 0x23
3000373c:	0a00000f 	beq	30003780 <raw_queue_all_post+0x68>
	
	#endif
	
	#if (CONFIG_RAW_ZERO_INTERRUPT > 0)
	
	if (raw_int_nesting) {
30003740:	e59f3044 	ldr	r3, [pc, #68]	; 3000378c <raw_queue_all_post+0x74>
30003744:	e5d33000 	ldrb	r3, [r3]
30003748:	e3530000 	cmp	r3, #0
3000374c:	1a000003 	bne	30003760 <raw_queue_all_post+0x48>
	}
	
	#endif
	
	
	return msg_post(p_q, p_void, opt, WAKE_ALL_QUEUE);
30003750:	e3a03001 	mov	r3, #1
	
}
30003754:	e28dd00c 	add	sp, sp, #12
30003758:	e8bd4030 	pop	{r4, r5, lr}
	}
	
	#endif
	
	
	return msg_post(p_q, p_void, opt, WAKE_ALL_QUEUE);
3000375c:	eaffff5f 	b	300034e0 <msg_post>
	
	#if (CONFIG_RAW_ZERO_INTERRUPT > 0)
	
	if (raw_int_nesting) {
		
		return int_msg_post(RAW_TYPE_Q_ALL, p_q, p_void, 0, 0, opt);
30003760:	e3a0e000 	mov	lr, #0
30003764:	e1a01005 	mov	r1, r5
30003768:	e1a02004 	mov	r2, r4
3000376c:	e1a0300e 	mov	r3, lr
30003770:	e3a00002 	mov	r0, #2
30003774:	e58dc004 	str	ip, [sp, #4]
30003778:	e58de000 	str	lr, [sp]
3000377c:	eb000bee 	bl	3000673c <int_msg_post>
	#endif
	
	
	return msg_post(p_q, p_void, opt, WAKE_ALL_QUEUE);
	
}
30003780:	e28dd00c 	add	sp, sp, #12
30003784:	e8bd4030 	pop	{r4, r5, lr}
30003788:	e12fff1e 	bx	lr
3000378c:	30013e61 	andcc	r3, r1, r1, ror #28

30003790 <raw_queue_end_post>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_end_post(RAW_QUEUE *p_q, RAW_VOID *p_void)
{
30003790:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	#if (RAW_QUEUE_FUNCTION_CHECK > 0)

	if (p_q == 0) {
30003794:	e3500000 	cmp	r0, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_end_post(RAW_QUEUE *p_q, RAW_VOID *p_void)
{
30003798:	e24dd00c 	sub	sp, sp, #12
3000379c:	e1a02001 	mov	r2, r1
	#if (RAW_QUEUE_FUNCTION_CHECK > 0)

	if (p_q == 0) {
300037a0:	03a00025 	moveq	r0, #37	; 0x25
300037a4:	0a000017 	beq	30003808 <raw_queue_end_post+0x78>
		
		return RAW_NULL_OBJECT;
	}

	
	if (p_void == 0) {
300037a8:	e3510000 	cmp	r1, #0
300037ac:	03a00023 	moveq	r0, #35	; 0x23
300037b0:	0a000014 	beq	30003808 <raw_queue_end_post+0x78>
	
	#endif

	#if (CONFIG_RAW_ZERO_INTERRUPT > 0)
	
	if (raw_int_nesting && raw_sched_lock) {
300037b4:	e59f3058 	ldr	r3, [pc, #88]	; 30003814 <raw_queue_end_post+0x84>
300037b8:	e5d33000 	ldrb	r3, [r3]
300037bc:	e3530000 	cmp	r3, #0
300037c0:	0a000003 	beq	300037d4 <raw_queue_end_post+0x44>
300037c4:	e59f304c 	ldr	r3, [pc, #76]	; 30003818 <raw_queue_end_post+0x88>
300037c8:	e5d33000 	ldrb	r3, [r3]
300037cc:	e3530000 	cmp	r3, #0
300037d0:	1a000005 	bne	300037ec <raw_queue_end_post+0x5c>
		return int_msg_post(RAW_TYPE_Q_END, p_q, p_void, 0, 0, 0);
	}
	
	#endif
	
	return msg_post(p_q, p_void,  SEND_TO_END, WAKE_ONE_QUEUE);
300037d4:	e1a01002 	mov	r1, r2
300037d8:	e3a03000 	mov	r3, #0
300037dc:	e3a02002 	mov	r2, #2
	
}
300037e0:	e28dd00c 	add	sp, sp, #12
300037e4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
		return int_msg_post(RAW_TYPE_Q_END, p_q, p_void, 0, 0, 0);
	}
	
	#endif
	
	return msg_post(p_q, p_void,  SEND_TO_END, WAKE_ONE_QUEUE);
300037e8:	eaffff3c 	b	300034e0 <msg_post>

	#if (CONFIG_RAW_ZERO_INTERRUPT > 0)
	
	if (raw_int_nesting && raw_sched_lock) {
		
		return int_msg_post(RAW_TYPE_Q_END, p_q, p_void, 0, 0, 0);
300037ec:	e3a0c000 	mov	ip, #0
300037f0:	e1a01000 	mov	r1, r0
300037f4:	e1a0300c 	mov	r3, ip
300037f8:	e3a00001 	mov	r0, #1
300037fc:	e58dc000 	str	ip, [sp]
30003800:	e58dc004 	str	ip, [sp, #4]
30003804:	eb000bcc 	bl	3000673c <int_msg_post>
	
	#endif
	
	return msg_post(p_q, p_void,  SEND_TO_END, WAKE_ONE_QUEUE);
	
}
30003808:	e28dd00c 	add	sp, sp, #12
3000380c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
30003810:	e12fff1e 	bx	lr
30003814:	30013e61 	andcc	r3, r1, r1, ror #28
30003818:	300142c0 	andcc	r4, r1, r0, asr #5

3000381c <raw_queue_front_post>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_front_post(RAW_QUEUE *p_q, RAW_VOID *p_void)
{
3000381c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)

	#if (RAW_QUEUE_FUNCTION_CHECK > 0)

	if (p_q == 0) {
30003820:	e2503000 	subs	r3, r0, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_front_post(RAW_QUEUE *p_q, RAW_VOID *p_void)
{
30003824:	e24dd00c 	sub	sp, sp, #12
30003828:	e1a02001 	mov	r2, r1

	#if (RAW_QUEUE_FUNCTION_CHECK > 0)

	if (p_q == 0) {
3000382c:	03a00025 	moveq	r0, #37	; 0x25
30003830:	0a000018 	beq	30003898 <raw_queue_front_post+0x7c>
		
		return RAW_NULL_OBJECT;
	}

	
	if (p_void == 0) {
30003834:	e3510000 	cmp	r1, #0
30003838:	03a00023 	moveq	r0, #35	; 0x23
3000383c:	0a000015 	beq	30003898 <raw_queue_front_post+0x7c>
	
	#endif

	#if (CONFIG_RAW_ZERO_INTERRUPT > 0)

	if (raw_int_nesting && raw_sched_lock) {
30003840:	e59f105c 	ldr	r1, [pc, #92]	; 300038a4 <raw_queue_front_post+0x88>
30003844:	e5d11000 	ldrb	r1, [r1]
30003848:	e3510000 	cmp	r1, #0
3000384c:	0a000003 	beq	30003860 <raw_queue_front_post+0x44>
30003850:	e59f1050 	ldr	r1, [pc, #80]	; 300038a8 <raw_queue_front_post+0x8c>
30003854:	e5d11000 	ldrb	r1, [r1]
30003858:	e3510000 	cmp	r1, #0
3000385c:	1a000006 	bne	3000387c <raw_queue_front_post+0x60>
		return int_msg_post(RAW_TYPE_Q_FRONT, p_q, p_void, 0, 0, 0);
	}
	
	#endif
	
	return msg_post(p_q, p_void,SEND_TO_FRONT, WAKE_ONE_QUEUE);
30003860:	e1a00003 	mov	r0, r3
30003864:	e1a01002 	mov	r1, r2
30003868:	e3a03000 	mov	r3, #0
3000386c:	e3a02001 	mov	r2, #1
}
30003870:	e28dd00c 	add	sp, sp, #12
30003874:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
		return int_msg_post(RAW_TYPE_Q_FRONT, p_q, p_void, 0, 0, 0);
	}
	
	#endif
	
	return msg_post(p_q, p_void,SEND_TO_FRONT, WAKE_ONE_QUEUE);
30003878:	eaffff18 	b	300034e0 <msg_post>

	#if (CONFIG_RAW_ZERO_INTERRUPT > 0)

	if (raw_int_nesting && raw_sched_lock) {
		
		return int_msg_post(RAW_TYPE_Q_FRONT, p_q, p_void, 0, 0, 0);
3000387c:	e3a0c000 	mov	ip, #0
30003880:	e1a01003 	mov	r1, r3
30003884:	e1a0000c 	mov	r0, ip
30003888:	e1a0300c 	mov	r3, ip
3000388c:	e58dc000 	str	ip, [sp]
30003890:	e58dc004 	str	ip, [sp, #4]
30003894:	eb000ba8 	bl	3000673c <int_msg_post>
	}
	
	#endif
	
	return msg_post(p_q, p_void,SEND_TO_FRONT, WAKE_ONE_QUEUE);
}
30003898:	e28dd00c 	add	sp, sp, #12
3000389c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
300038a0:	e12fff1e 	bx	lr
300038a4:	30013e61 	andcc	r3, r1, r1, ror #28
300038a8:	300142c0 	andcc	r4, r1, r0, asr #5

300038ac <raw_queue_create>:
{
	
	
	#if (RAW_QUEUE_FUNCTION_CHECK > 0)

	if (p_q == 0) {
300038ac:	e250c000 	subs	ip, r0, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_create(RAW_QUEUE *p_q, RAW_U8 *p_name, RAW_VOID **msg_start, MSG_SIZE_TYPE number)
{
300038b0:	e92d4010 	push	{r4, lr}
	
	
	#if (RAW_QUEUE_FUNCTION_CHECK > 0)

	if (p_q == 0) {
300038b4:	03a00025 	moveq	r0, #37	; 0x25
300038b8:	0a00001a 	beq	30003928 <raw_queue_create+0x7c>
		
		return RAW_NULL_OBJECT;
	}
	
	if (msg_start == 0) {
300038bc:	e3520000 	cmp	r2, #0
300038c0:	03a00023 	moveq	r0, #35	; 0x23
300038c4:	0a000017 	beq	30003928 <raw_queue_create+0x7c>
		
		return RAW_NULL_POINTER;
	}
	
	if (number == 0u) {
300038c8:	e3530000 	cmp	r3, #0
300038cc:	03a00029 	moveq	r0, #41	; 0x29
300038d0:	0a000014 	beq	30003928 <raw_queue_create+0x7c>
	p_q->msg_q.read             = msg_start;
	p_q->msg_q.size            	= number;
	p_q->msg_q.current_numbers  = 0u;
	p_q->msg_q.peak_numbers		= 0u;
	p_q->queue_send_notify      = 0;
	p_q->common_block_obj.object_type = RAW_QUEUE_OBJ_TYPE;
300038d4:	e3a00013 	mov	r0, #19

	/*init the queue blocked list*/
	list_init(&p_q->common_block_obj.block_list);
	                             
	p_q->common_block_obj.name = p_name;   
	p_q->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
300038d8:	e3a04000 	mov	r4, #0
	p_q->msg_q.read             = msg_start;
	p_q->msg_q.size            	= number;
	p_q->msg_q.current_numbers  = 0u;
	p_q->msg_q.peak_numbers		= 0u;
	p_q->queue_send_notify      = 0;
	p_q->common_block_obj.object_type = RAW_QUEUE_OBJ_TYPE;
300038dc:	e5cc000d 	strb	r0, [ip, #13]
	p_q->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
	p_q->msg_q.queue_start 		= msg_start;               /*      Initialize the queue                 */
	p_q->msg_q.queue_end        = &msg_start[number];
	p_q->msg_q.write            = msg_start;
	p_q->msg_q.read             = msg_start;
	p_q->msg_q.size            	= number;
300038e0:	e58c3020 	str	r3, [ip, #32]
	list_init(&p_q->common_block_obj.block_list);
	                             
	p_q->common_block_obj.name = p_name;   
	p_q->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
	p_q->msg_q.queue_start 		= msg_start;               /*      Initialize the queue                 */
	p_q->msg_q.queue_end        = &msg_start[number];
300038e4:	e0820103 	add	r0, r2, r3, lsl #2
	p_q->msg_q.current_numbers  = 0u;
	p_q->msg_q.peak_numbers		= 0u;
	p_q->queue_send_notify      = 0;
	p_q->common_block_obj.object_type = RAW_QUEUE_OBJ_TYPE;

	TRACE_QUEUE_CREATE(raw_task_active, p_q); 
300038e8:	e59f3040 	ldr	r3, [pc, #64]	; 30003930 <raw_queue_create+0x84>

	/*init the queue blocked list*/
	list_init(&p_q->common_block_obj.block_list);
	                             
	p_q->common_block_obj.name = p_name;   
	p_q->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
300038ec:	e5cc400c 	strb	r4, [ip, #12]
	#endif

	/*init the queue blocked list*/
	list_init(&p_q->common_block_obj.block_list);
	                             
	p_q->common_block_obj.name = p_name;   
300038f0:	e58c1008 	str	r1, [ip, #8]
	p_q->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
	p_q->msg_q.queue_start 		= msg_start;               /*      Initialize the queue                 */
	p_q->msg_q.queue_end        = &msg_start[number];
300038f4:	e58c0014 	str	r0, [ip, #20]
	p_q->msg_q.write            = msg_start;
	p_q->msg_q.read             = msg_start;
300038f8:	e58c201c 	str	r2, [ip, #28]
	p_q->msg_q.current_numbers  = 0u;
	p_q->msg_q.peak_numbers		= 0u;
	p_q->queue_send_notify      = 0;
	p_q->common_block_obj.object_type = RAW_QUEUE_OBJ_TYPE;

	TRACE_QUEUE_CREATE(raw_task_active, p_q); 
300038fc:	e5930000 	ldr	r0, [r3]
/*
 * List initialization
 */
RAW_INLINE void list_init(LIST *list_head)
{
	list_head->next = list_head;
30003900:	e58cc000 	str	ip, [ip]
	list_head->previous = list_head;
30003904:	e58cc004 	str	ip, [ip, #4]
	/*init the queue blocked list*/
	list_init(&p_q->common_block_obj.block_list);
	                             
	p_q->common_block_obj.name = p_name;   
	p_q->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
	p_q->msg_q.queue_start 		= msg_start;               /*      Initialize the queue                 */
30003908:	e58c2010 	str	r2, [ip, #16]
	p_q->msg_q.queue_end        = &msg_start[number];
	p_q->msg_q.write            = msg_start;
3000390c:	e58c2018 	str	r2, [ip, #24]
	p_q->msg_q.read             = msg_start;
	p_q->msg_q.size            	= number;
	p_q->msg_q.current_numbers  = 0u;
30003910:	e58c4024 	str	r4, [ip, #36]	; 0x24
	p_q->msg_q.peak_numbers		= 0u;
30003914:	e58c4028 	str	r4, [ip, #40]	; 0x28
	p_q->queue_send_notify      = 0;
30003918:	e58c402c 	str	r4, [ip, #44]	; 0x2c
	p_q->common_block_obj.object_type = RAW_QUEUE_OBJ_TYPE;

	TRACE_QUEUE_CREATE(raw_task_active, p_q); 
3000391c:	e1a0100c 	mov	r1, ip
30003920:	eb00108d 	bl	30007b5c <_trace_queue_create>
30003924:	e1a00004 	mov	r0, r4
	
	return RAW_SUCCESS;
}
30003928:	e8bd4010 	pop	{r4, lr}
3000392c:	e12fff1e 	bx	lr
30003930:	30013838 	andcc	r3, r1, r8, lsr r8

30003934 <raw_queue_size_get_information>:
*             
************************************************************************************************************************
*/
#if (CONFIG_RAW_QUEUE_SIZE_GET_INFORMATION > 0)
RAW_U16 raw_queue_size_get_information(RAW_QUEUE_SIZE *p_q, MSG_SIZE_TYPE *queue_free_msg_size, MSG_SIZE_TYPE *queue_peak_msg_size, MSG_SIZE_TYPE *queue_current_msg)
{
30003934:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}

	RAW_SR_ALLOC();
	
	#if (RAW_QUEUE_SIZE_FUNCTION_CHECK > 0)

	if (p_q == 0)  {
30003938:	e2504000 	subs	r4, r0, #0
*             
************************************************************************************************************************
*/
#if (CONFIG_RAW_QUEUE_SIZE_GET_INFORMATION > 0)
RAW_U16 raw_queue_size_get_information(RAW_QUEUE_SIZE *p_q, MSG_SIZE_TYPE *queue_free_msg_size, MSG_SIZE_TYPE *queue_peak_msg_size, MSG_SIZE_TYPE *queue_current_msg)
{
3000393c:	e1a05001 	mov	r5, r1
30003940:	e1a06002 	mov	r6, r2
30003944:	e1a07003 	mov	r7, r3

	RAW_SR_ALLOC();
	
	#if (RAW_QUEUE_SIZE_FUNCTION_CHECK > 0)

	if (p_q == 0)  {
30003948:	03a00025 	moveq	r0, #37	; 0x25
3000394c:	0a000009 	beq	30003978 <raw_queue_size_get_information+0x44>
		
		return RAW_NULL_OBJECT;
	}
	
	if (queue_free_msg_size == 0) {
30003950:	e3510000 	cmp	r1, #0
30003954:	0a000009 	beq	30003980 <raw_queue_size_get_information+0x4c>
		
		return RAW_NULL_POINTER;
	}

	if (queue_current_msg == 0) {
30003958:	e3530000 	cmp	r3, #0
3000395c:	0a000007 	beq	30003980 <raw_queue_size_get_information+0x4c>
	}

	
	#endif

	RAW_CPU_DISABLE();
30003960:	eb0010a4 	bl	30007bf8 <OS_CPU_SR_Save>

	if (p_q->common_block_obj.object_type != RAW_QUEUE_SIZE_OBJ_TYPE) {
30003964:	e5d4300d 	ldrb	r3, [r4, #13]
30003968:	e3530015 	cmp	r3, #21
3000396c:	0a000005 	beq	30003988 <raw_queue_size_get_information+0x54>

		RAW_CPU_ENABLE();
30003970:	eb0010a8 	bl	30007c18 <OS_CPU_SR_Restore>
30003974:	e3a00036 	mov	r0, #54	; 0x36
	
	RAW_CPU_ENABLE();

	return RAW_SUCCESS;

}
30003978:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
3000397c:	e12fff1e 	bx	lr
	*queue_current_msg = p_q->queue_current_msg;
	*queue_peak_msg_size = p_q->peak_numbers;
	
	RAW_CPU_ENABLE();

	return RAW_SUCCESS;
30003980:	e3a00023 	mov	r0, #35	; 0x23
30003984:	eafffffb 	b	30003978 <raw_queue_size_get_information+0x44>

		RAW_CPU_ENABLE();
		return RAW_ERROR_OBJECT_TYPE;
	}
	
	*queue_free_msg_size = p_q->queue_msg_size - p_q->queue_current_msg;
30003988:	e5942024 	ldr	r2, [r4, #36]	; 0x24
3000398c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
30003990:	e0633002 	rsb	r3, r3, r2
30003994:	e5853000 	str	r3, [r5]
	*queue_current_msg = p_q->queue_current_msg;
30003998:	e5943028 	ldr	r3, [r4, #40]	; 0x28
3000399c:	e5873000 	str	r3, [r7]
	*queue_peak_msg_size = p_q->peak_numbers;
300039a0:	e5943018 	ldr	r3, [r4, #24]
300039a4:	e5863000 	str	r3, [r6]
	
	RAW_CPU_ENABLE();
300039a8:	eb00109a 	bl	30007c18 <OS_CPU_SR_Restore>
300039ac:	e3a00000 	mov	r0, #0

	return RAW_SUCCESS;
300039b0:	eafffff0 	b	30003978 <raw_queue_size_get_information+0x44>

300039b4 <raw_queue_size_delete>:
*             
************************************************************************************************************************
*/
#if (CONFIG_RAW_QUEUE_SIZE_DELETE > 0)
RAW_U16 raw_queue_size_delete(RAW_QUEUE_SIZE *p_q)
{
300039b4:	e92d4070 	push	{r4, r5, r6, lr}
	
	RAW_SR_ALLOC();

	#if (RAW_QUEUE_SIZE_FUNCTION_CHECK > 0)

	if (p_q == 0) {
300039b8:	e2504000 	subs	r4, r0, #0
300039bc:	03a00025 	moveq	r0, #37	; 0x25
300039c0:	0a000004 	beq	300039d8 <raw_queue_size_delete+0x24>
		
		return RAW_NULL_OBJECT;
	}

	if (raw_int_nesting) {
300039c4:	e59f30d8 	ldr	r3, [pc, #216]	; 30003aa4 <raw_queue_size_delete+0xf0>
300039c8:	e5d35000 	ldrb	r5, [r3]
300039cc:	e3550000 	cmp	r5, #0
300039d0:	13a00027 	movne	r0, #39	; 0x27
300039d4:	0a000001 	beq	300039e0 <raw_queue_size_delete+0x2c>

	do_possible_sche(); 
	
	return RAW_SUCCESS;
	
}
300039d8:	e8bd4070 	pop	{r4, r5, r6, lr}
300039dc:	e12fff1e 	bx	lr
		
	}
	
	#endif
	
	RAW_CRITICAL_ENTER();
300039e0:	e59f60c0 	ldr	r6, [pc, #192]	; 30003aa8 <raw_queue_size_delete+0xf4>
300039e4:	eb001083 	bl	30007bf8 <OS_CPU_SR_Save>
300039e8:	e5d63000 	ldrb	r3, [r6]
300039ec:	e2833001 	add	r3, r3, #1
300039f0:	e5c63000 	strb	r3, [r6]
300039f4:	eb001087 	bl	30007c18 <OS_CPU_SR_Restore>

	if (p_q->common_block_obj.object_type != RAW_QUEUE_SIZE_OBJ_TYPE) {
300039f8:	e5d4300d 	ldrb	r3, [r4, #13]
300039fc:	e3530015 	cmp	r3, #21
30003a00:	0a00000c 	beq	30003a38 <raw_queue_size_delete+0x84>

		RAW_CRITICAL_EXIT();
30003a04:	e5d63000 	ldrb	r3, [r6]
30003a08:	e3530001 	cmp	r3, #1
30003a0c:	0a000006 	beq	30003a2c <raw_queue_size_delete+0x78>
30003a10:	eb001078 	bl	30007bf8 <OS_CPU_SR_Save>
30003a14:	e5d63000 	ldrb	r3, [r6]
30003a18:	e2433001 	sub	r3, r3, #1
30003a1c:	e5c63000 	strb	r3, [r6]
30003a20:	eb00107c 	bl	30007c18 <OS_CPU_SR_Restore>
30003a24:	e3a00036 	mov	r0, #54	; 0x36
30003a28:	eaffffea 	b	300039d8 <raw_queue_size_delete+0x24>
30003a2c:	eb000aae 	bl	300064ec <hybrid_int_process>
30003a30:	e3a00036 	mov	r0, #54	; 0x36
30003a34:	eaffffe7 	b	300039d8 <raw_queue_size_delete+0x24>
 * return TRUE if the list is empty
 */
RAW_INLINE RAW_BOOLEAN is_list_empty(LIST *list)
{

	return (list->next == list);	
30003a38:	e5940000 	ldr	r0, [r4]
		return RAW_ERROR_OBJECT_TYPE;
	}

	block_list_head = &p_q->common_block_obj.block_list;
	
	p_q->common_block_obj.object_type = 0;
30003a3c:	e5c4500d 	strb	r5, [r4, #13]
	/*All task blocked on this queue is waken up*/
	while (!is_list_empty(block_list_head))  {
30003a40:	e1540000 	cmp	r4, r0
30003a44:	0a000004 	beq	30003a5c <raw_queue_size_delete+0xa8>
		delete_pend_obj(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list));	
30003a48:	e2400004 	sub	r0, r0, #4
30003a4c:	ebfffab4 	bl	30002524 <delete_pend_obj>
30003a50:	e5940000 	ldr	r0, [r4]

	block_list_head = &p_q->common_block_obj.block_list;
	
	p_q->common_block_obj.object_type = 0;
	/*All task blocked on this queue is waken up*/
	while (!is_list_empty(block_list_head))  {
30003a54:	e1540000 	cmp	r4, r0
30003a58:	1afffffa 	bne	30003a48 <raw_queue_size_delete+0x94>
		delete_pend_obj(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list));	
	}                             
	
	RAW_CRITICAL_EXIT();
30003a5c:	e5d63000 	ldrb	r3, [r6]
30003a60:	e59f5040 	ldr	r5, [pc, #64]	; 30003aa8 <raw_queue_size_delete+0xf4>
30003a64:	e3530001 	cmp	r3, #1
30003a68:	0a00000b 	beq	30003a9c <raw_queue_size_delete+0xe8>
30003a6c:	eb001061 	bl	30007bf8 <OS_CPU_SR_Save>
30003a70:	e5d53000 	ldrb	r3, [r5]
30003a74:	e2433001 	sub	r3, r3, #1
30003a78:	e5c53000 	strb	r3, [r5]
30003a7c:	eb001065 	bl	30007c18 <OS_CPU_SR_Restore>

	TRACE_QUEUE_SIZE_DELETE(raw_task_active, p_q);
30003a80:	e59f3024 	ldr	r3, [pc, #36]	; 30003aac <raw_queue_size_delete+0xf8>
30003a84:	e1a01004 	mov	r1, r4
30003a88:	e5930000 	ldr	r0, [r3]
30003a8c:	eb001053 	bl	30007be0 <_trace_queue_size_delete>

	do_possible_sche(); 
30003a90:	eb00027f 	bl	30004494 <raw_sched>
30003a94:	e3a00000 	mov	r0, #0
	
	return RAW_SUCCESS;
30003a98:	eaffffce 	b	300039d8 <raw_queue_size_delete+0x24>
	/*All task blocked on this queue is waken up*/
	while (!is_list_empty(block_list_head))  {
		delete_pend_obj(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list));	
	}                             
	
	RAW_CRITICAL_EXIT();
30003a9c:	eb000a92 	bl	300064ec <hybrid_int_process>
30003aa0:	eafffff6 	b	30003a80 <raw_queue_size_delete+0xcc>
30003aa4:	30013e61 	andcc	r3, r1, r1, ror #28
30003aa8:	300142c0 	andcc	r4, r1, r0, asr #5
30003aac:	30013838 	andcc	r3, r1, r8, lsr r8

30003ab0 <raw_queue_size_flush>:
*             
************************************************************************************************************************
*/
#if (CONFIG_RAW_QUEUE_SIZE_FLUSH > 0) 
RAW_U16 raw_queue_size_flush(RAW_QUEUE_SIZE  *p_q)
{
30003ab0:	e92d4070 	push	{r4, r5, r6, lr}
	RAW_SR_ALLOC();
	
	
	#if (RAW_QUEUE_SIZE_FUNCTION_CHECK > 0)

	if (p_q == 0) {
30003ab4:	e2505000 	subs	r5, r0, #0
30003ab8:	03a00025 	moveq	r0, #37	; 0x25
30003abc:	0a000004 	beq	30003ad4 <raw_queue_size_flush+0x24>
		
		return RAW_NULL_OBJECT;
	}

	if (raw_int_nesting) {
30003ac0:	e59f30dc 	ldr	r3, [pc, #220]	; 30003ba4 <raw_queue_size_flush+0xf4>
30003ac4:	e5d34000 	ldrb	r4, [r3]
30003ac8:	e3540000 	cmp	r4, #0
30003acc:	13a00027 	movne	r0, #39	; 0x27
30003ad0:	0a000001 	beq	30003adc <raw_queue_size_flush+0x2c>
	RAW_CRITICAL_EXIT();

	TRACE_QUEUE_SIZE_FLUSH(raw_task_active, p_q);
	
	return RAW_SUCCESS;
}
30003ad4:	e8bd4070 	pop	{r4, r5, r6, lr}
30003ad8:	e12fff1e 	bx	lr
		
	}
	
	#endif
	
	RAW_CRITICAL_ENTER();
30003adc:	e59f60c4 	ldr	r6, [pc, #196]	; 30003ba8 <raw_queue_size_flush+0xf8>
30003ae0:	eb001044 	bl	30007bf8 <OS_CPU_SR_Save>
30003ae4:	e5d63000 	ldrb	r3, [r6]
30003ae8:	e2833001 	add	r3, r3, #1
30003aec:	e5c63000 	strb	r3, [r6]
30003af0:	eb001048 	bl	30007c18 <OS_CPU_SR_Restore>

	if (p_q->common_block_obj.object_type != RAW_QUEUE_SIZE_OBJ_TYPE) {
30003af4:	e5d5300d 	ldrb	r3, [r5, #13]
30003af8:	e3530015 	cmp	r3, #21
30003afc:	0a00000c 	beq	30003b34 <raw_queue_size_flush+0x84>

		RAW_CRITICAL_EXIT();
30003b00:	e5d63000 	ldrb	r3, [r6]
30003b04:	e3530001 	cmp	r3, #1
30003b08:	0a000006 	beq	30003b28 <raw_queue_size_flush+0x78>
30003b0c:	eb001039 	bl	30007bf8 <OS_CPU_SR_Save>
30003b10:	e5d63000 	ldrb	r3, [r6]
30003b14:	e2433001 	sub	r3, r3, #1
30003b18:	e5c63000 	strb	r3, [r6]
30003b1c:	eb00103d 	bl	30007c18 <OS_CPU_SR_Restore>
30003b20:	e3a00036 	mov	r0, #54	; 0x36
30003b24:	eaffffea 	b	30003ad4 <raw_queue_size_flush+0x24>
30003b28:	eb000a6f 	bl	300064ec <hybrid_int_process>
30003b2c:	e3a00036 	mov	r0, #54	; 0x36
30003b30:	eaffffe7 	b	30003ad4 <raw_queue_size_flush+0x24>
		return RAW_ERROR_OBJECT_TYPE;
	}

	if (p_q->queue_current_msg) {
30003b34:	e5953028 	ldr	r3, [r5, #40]	; 0x28
30003b38:	e3530000 	cmp	r3, #0
30003b3c:	0a000007 	beq	30003b60 <raw_queue_size_flush+0xb0>
		
        p_msg               	= p_q->write;           
        p_msg->next         	= p_q->free_msg;
30003b40:	e595301c 	ldr	r3, [r5, #28]
30003b44:	e5952010 	ldr	r2, [r5, #16]

		/*free msg reset to queue read*/
        p_q->free_msg       	= p_q->read;         
        
       	p_q->queue_current_msg  = 0;           
30003b48:	e5854028 	str	r4, [r5, #40]	; 0x28
	}

	if (p_q->queue_current_msg) {
		
        p_msg               	= p_q->write;           
        p_msg->next         	= p_q->free_msg;
30003b4c:	e5832000 	str	r2, [r3]

		/*free msg reset to queue read*/
        p_q->free_msg       	= p_q->read;         
30003b50:	e5953020 	ldr	r3, [r5, #32]
        
       	p_q->queue_current_msg  = 0;           
        p_q->read          		= 0;
        p_q->write         		= 0;
30003b54:	e585401c 	str	r4, [r5, #28]
		
        p_msg               	= p_q->write;           
        p_msg->next         	= p_q->free_msg;

		/*free msg reset to queue read*/
        p_q->free_msg       	= p_q->read;         
30003b58:	e5853010 	str	r3, [r5, #16]
        
       	p_q->queue_current_msg  = 0;           
        p_q->read          		= 0;
30003b5c:	e5854020 	str	r4, [r5, #32]
        p_q->write         		= 0;
    }
	
	RAW_CRITICAL_EXIT();
30003b60:	e5d63000 	ldrb	r3, [r6]
30003b64:	e59f403c 	ldr	r4, [pc, #60]	; 30003ba8 <raw_queue_size_flush+0xf8>
30003b68:	e3530001 	cmp	r3, #1
30003b6c:	0a00000a 	beq	30003b9c <raw_queue_size_flush+0xec>
30003b70:	eb001020 	bl	30007bf8 <OS_CPU_SR_Save>
30003b74:	e5d43000 	ldrb	r3, [r4]
30003b78:	e2433001 	sub	r3, r3, #1
30003b7c:	e5c43000 	strb	r3, [r4]
30003b80:	eb001024 	bl	30007c18 <OS_CPU_SR_Restore>

	TRACE_QUEUE_SIZE_FLUSH(raw_task_active, p_q);
30003b84:	e59f3020 	ldr	r3, [pc, #32]	; 30003bac <raw_queue_size_flush+0xfc>
30003b88:	e1a01005 	mov	r1, r5
30003b8c:	e5930000 	ldr	r0, [r3]
30003b90:	eb001011 	bl	30007bdc <_trace_queue_size_flush>
30003b94:	e3a00000 	mov	r0, #0
	
	return RAW_SUCCESS;
30003b98:	eaffffcd 	b	30003ad4 <raw_queue_size_flush+0x24>
       	p_q->queue_current_msg  = 0;           
        p_q->read          		= 0;
        p_q->write         		= 0;
    }
	
	RAW_CRITICAL_EXIT();
30003b9c:	eb000a52 	bl	300064ec <hybrid_int_process>
30003ba0:	eafffff7 	b	30003b84 <raw_queue_size_flush+0xd4>
30003ba4:	30013e61 	andcc	r3, r1, r1, ror #28
30003ba8:	300142c0 	andcc	r4, r1, r0, asr #5
30003bac:	30013838 	andcc	r3, r1, r8, lsr r8

30003bb0 <raw_queue_size_receive>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_size_receive(RAW_QUEUE_SIZE *p_q, RAW_TICK_TYPE wait_option, RAW_VOID  **msg_ptr, MSG_SIZE_TYPE *receive_size)
{
30003bb0:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
30003bb4:	e1a04000 	mov	r4, r0

	
	#if (RAW_QUEUE_SIZE_FUNCTION_CHECK > 0)
	

	if (raw_int_nesting) {
30003bb8:	e59f0254 	ldr	r0, [pc, #596]	; 30003e14 <raw_queue_size_receive+0x264>
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_size_receive(RAW_QUEUE_SIZE *p_q, RAW_TICK_TYPE wait_option, RAW_VOID  **msg_ptr, MSG_SIZE_TYPE *receive_size)
{
30003bbc:	e24dd00c 	sub	sp, sp, #12

	
	#if (RAW_QUEUE_SIZE_FUNCTION_CHECK > 0)
	

	if (raw_int_nesting) {
30003bc0:	e5d00000 	ldrb	r0, [r0]
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_size_receive(RAW_QUEUE_SIZE *p_q, RAW_TICK_TYPE wait_option, RAW_VOID  **msg_ptr, MSG_SIZE_TYPE *receive_size)
{
30003bc4:	e1a06001 	mov	r6, r1

	
	#if (RAW_QUEUE_SIZE_FUNCTION_CHECK > 0)
	

	if (raw_int_nesting) {
30003bc8:	e3500000 	cmp	r0, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_size_receive(RAW_QUEUE_SIZE *p_q, RAW_TICK_TYPE wait_option, RAW_VOID  **msg_ptr, MSG_SIZE_TYPE *receive_size)
{
30003bcc:	e1a05002 	mov	r5, r2
30003bd0:	e1a08003 	mov	r8, r3

	
	#if (RAW_QUEUE_SIZE_FUNCTION_CHECK > 0)
	

	if (raw_int_nesting) {
30003bd4:	13a00027 	movne	r0, #39	; 0x27
30003bd8:	1a000018 	bne	30003c40 <raw_queue_size_receive+0x90>
		
		return RAW_NOT_CALLED_BY_ISR;
		
	}

	if (p_q == 0) {
30003bdc:	e3540000 	cmp	r4, #0
30003be0:	03a00025 	moveq	r0, #37	; 0x25
30003be4:	0a000015 	beq	30003c40 <raw_queue_size_receive+0x90>
		
		return RAW_NULL_OBJECT;
	}
	
	if (msg_ptr == 0) {
30003be8:	e3520000 	cmp	r2, #0
30003bec:	0a000016 	beq	30003c4c <raw_queue_size_receive+0x9c>
		
		return RAW_NULL_POINTER;
	}

	if (receive_size == 0) {
30003bf0:	e3530000 	cmp	r3, #0
30003bf4:	0a000014 	beq	30003c4c <raw_queue_size_receive+0x9c>
		return RAW_NULL_POINTER;
	}
	
	#endif

	RAW_CRITICAL_ENTER();
30003bf8:	e59f7218 	ldr	r7, [pc, #536]	; 30003e18 <raw_queue_size_receive+0x268>
30003bfc:	eb000ffd 	bl	30007bf8 <OS_CPU_SR_Save>
30003c00:	e5d73000 	ldrb	r3, [r7]
30003c04:	e2833001 	add	r3, r3, #1
30003c08:	e5c73000 	strb	r3, [r7]
30003c0c:	eb001001 	bl	30007c18 <OS_CPU_SR_Restore>
	

	if (p_q->common_block_obj.object_type != RAW_QUEUE_SIZE_OBJ_TYPE) {
30003c10:	e5d4300d 	ldrb	r3, [r4, #13]
30003c14:	e3530015 	cmp	r3, #21
30003c18:	0a00000d 	beq	30003c54 <raw_queue_size_receive+0xa4>

		RAW_CRITICAL_EXIT();
30003c1c:	e5d73000 	ldrb	r3, [r7]
30003c20:	e3530001 	cmp	r3, #1
30003c24:	0a000030 	beq	30003cec <raw_queue_size_receive+0x13c>
30003c28:	eb000ff2 	bl	30007bf8 <OS_CPU_SR_Save>
30003c2c:	e5d73000 	ldrb	r3, [r7]
30003c30:	e2433001 	sub	r3, r3, #1
30003c34:	e5c73000 	strb	r3, [r7]
30003c38:	eb000ff6 	bl	30007c18 <OS_CPU_SR_Restore>
30003c3c:	e3a00036 	mov	r0, #54	; 0x36

	}
	
	return result;
	
}
30003c40:	e28dd00c 	add	sp, sp, #12
30003c44:	e8bd45f0 	pop	{r4, r5, r6, r7, r8, sl, lr}
30003c48:	e12fff1e 	bx	lr
	}

	else {

		*msg_ptr    = 0;
		*receive_size   = 0;
30003c4c:	e3a00023 	mov	r0, #35	; 0x23
30003c50:	eafffffa 	b	30003c40 <raw_queue_size_receive+0x90>
		RAW_CRITICAL_EXIT();
		return RAW_ERROR_OBJECT_TYPE;
	}

	/*if queue has msg then receive it*/
	if (p_q->queue_current_msg) {
30003c54:	e5943028 	ldr	r3, [r4, #40]	; 0x28
30003c58:	e3530000 	cmp	r3, #0
30003c5c:	0a000025 	beq	30003cf8 <raw_queue_size_receive+0x148>
      
		msg_tmp =   p_q->read;
30003c60:	e5943020 	ldr	r3, [r4, #32]
		*msg_ptr           = msg_tmp->msg_ptr;
		*receive_size = msg_tmp->msg_size;
	   

	    p_q->read = msg_tmp->next;
30003c64:	e5932000 	ldr	r2, [r3]
	/*if queue has msg then receive it*/
	if (p_q->queue_current_msg) {
      
		msg_tmp =   p_q->read;
		*msg_ptr           = msg_tmp->msg_ptr;
		*receive_size = msg_tmp->msg_size;
30003c68:	e5931008 	ldr	r1, [r3, #8]
	   

	    p_q->read = msg_tmp->next;
		
	    if (p_q->read) {
30003c6c:	e3520000 	cmp	r2, #0
	/*if queue has msg then receive it*/
	if (p_q->queue_current_msg) {
      
		msg_tmp =   p_q->read;
		*msg_ptr           = msg_tmp->msg_ptr;
		*receive_size = msg_tmp->msg_size;
30003c70:	e5881000 	str	r1, [r8]
	   

	    p_q->read = msg_tmp->next;
30003c74:	e5842020 	str	r2, [r4, #32]
		
	    if (p_q->read) {
			
	         p_q->queue_current_msg--;
30003c78:	15942028 	ldrne	r2, [r4, #40]	; 0x28

	/*if queue has msg then receive it*/
	if (p_q->queue_current_msg) {
      
		msg_tmp =   p_q->read;
		*msg_ptr           = msg_tmp->msg_ptr;
30003c7c:	e5930004 	ldr	r0, [r3, #4]

	    p_q->read = msg_tmp->next;
		
	    if (p_q->read) {
			
	         p_q->queue_current_msg--;
30003c80:	12422001 	subne	r2, r2, #1
	    } 

		else {
	       
			p_q->write     = 0;
30003c84:	0584201c 	streq	r2, [r4, #28]

	    p_q->read = msg_tmp->next;
		
	    if (p_q->read) {
			
	         p_q->queue_current_msg--;
30003c88:	15842028 	strne	r2, [r4, #40]	; 0x28
	    } 

		else {
	       
			p_q->write     = 0;
			p_q->queue_current_msg = 0;
30003c8c:	05842028 	streq	r2, [r4, #40]	; 0x28

	/*if queue has msg then receive it*/
	if (p_q->queue_current_msg) {
      
		msg_tmp =   p_q->read;
		*msg_ptr           = msg_tmp->msg_ptr;
30003c90:	e5850000 	str	r0, [r5]

		
		msg_tmp->next = p_q->free_msg;
		p_q->free_msg =  msg_tmp;
		
		RAW_CRITICAL_EXIT();
30003c94:	e5d71000 	ldrb	r1, [r7]
			p_q->write     = 0;
			p_q->queue_current_msg = 0;
	    }

		
		msg_tmp->next = p_q->free_msg;
30003c98:	e5942010 	ldr	r2, [r4, #16]
		p_q->free_msg =  msg_tmp;
		
		RAW_CRITICAL_EXIT();
30003c9c:	e3510001 	cmp	r1, #1
			p_q->write     = 0;
			p_q->queue_current_msg = 0;
	    }

		
		msg_tmp->next = p_q->free_msg;
30003ca0:	e5832000 	str	r2, [r3]
		p_q->free_msg =  msg_tmp;
		
		RAW_CRITICAL_EXIT();
30003ca4:	e59f716c 	ldr	r7, [pc, #364]	; 30003e18 <raw_queue_size_receive+0x268>
			p_q->queue_current_msg = 0;
	    }

		
		msg_tmp->next = p_q->free_msg;
		p_q->free_msg =  msg_tmp;
30003ca8:	e5843010 	str	r3, [r4, #16]
		
		RAW_CRITICAL_EXIT();
30003cac:	0a00002e 	beq	30003d6c <raw_queue_size_receive+0x1bc>
30003cb0:	eb000fd0 	bl	30007bf8 <OS_CPU_SR_Save>
30003cb4:	e5d73000 	ldrb	r3, [r7]
30003cb8:	e2433001 	sub	r3, r3, #1
30003cbc:	e5c73000 	strb	r3, [r7]
30003cc0:	eb000fd4 	bl	30007c18 <OS_CPU_SR_Restore>

		TRACE_QUEUE_SIZE_GET_MSG(raw_task_active, p_q, wait_option, *msg_ptr, *receive_size);
30003cc4:	e59f2150 	ldr	r2, [pc, #336]	; 30003e1c <raw_queue_size_receive+0x26c>
30003cc8:	e598c000 	ldr	ip, [r8]
30003ccc:	e5920000 	ldr	r0, [r2]
30003cd0:	e5953000 	ldr	r3, [r5]
30003cd4:	e1a01004 	mov	r1, r4
30003cd8:	e1a02006 	mov	r2, r6
30003cdc:	e58dc000 	str	ip, [sp]
30003ce0:	eb000fbb 	bl	30007bd4 <_trace_queue_size_get_msg>
30003ce4:	e3a00000 	mov	r0, #0
		
		return RAW_SUCCESS;   
30003ce8:	eaffffd4 	b	30003c40 <raw_queue_size_receive+0x90>
	RAW_CRITICAL_ENTER();
	

	if (p_q->common_block_obj.object_type != RAW_QUEUE_SIZE_OBJ_TYPE) {

		RAW_CRITICAL_EXIT();
30003cec:	eb0009fe 	bl	300064ec <hybrid_int_process>
30003cf0:	e3a00036 	mov	r0, #54	; 0x36
30003cf4:	eaffffd1 	b	30003c40 <raw_queue_size_receive+0x90>
		
		return RAW_SUCCESS;   
	}  
	
	
	if (wait_option == RAW_NO_WAIT) {   
30003cf8:	e3560000 	cmp	r6, #0
30003cfc:	0a00000e 	beq	30003d3c <raw_queue_size_receive+0x18c>
		RAW_CRITICAL_EXIT();

		return RAW_NO_PEND_WAIT;   
	}

	SYSTEM_LOCK_PROCESS_QUEUE_SIZE();
30003d00:	e5d72000 	ldrb	r2, [r7]
30003d04:	e3520001 	cmp	r2, #1
30003d08:	9a00001f 	bls	30003d8c <raw_queue_size_receive+0x1dc>
30003d0c:	e5883000 	str	r3, [r8]
30003d10:	e5853000 	str	r3, [r5]
30003d14:	e5d73000 	ldrb	r3, [r7]
30003d18:	e3530001 	cmp	r3, #1
30003d1c:	0a000017 	beq	30003d80 <raw_queue_size_receive+0x1d0>
30003d20:	eb000fb4 	bl	30007bf8 <OS_CPU_SR_Save>
30003d24:	e5d73000 	ldrb	r3, [r7]
30003d28:	e2433001 	sub	r3, r3, #1
30003d2c:	e5c73000 	strb	r3, [r7]
30003d30:	eb000fb8 	bl	30007c18 <OS_CPU_SR_Restore>
30003d34:	e3a00007 	mov	r0, #7
30003d38:	eaffffc0 	b	30003c40 <raw_queue_size_receive+0x90>
	
	
	if (wait_option == RAW_NO_WAIT) {   
		
		*msg_ptr    = 0;
		*receive_size   = 0;
30003d3c:	e5886000 	str	r6, [r8]
	}  
	
	
	if (wait_option == RAW_NO_WAIT) {   
		
		*msg_ptr    = 0;
30003d40:	e5856000 	str	r6, [r5]
		*receive_size   = 0;
		
		RAW_CRITICAL_EXIT();
30003d44:	e5d73000 	ldrb	r3, [r7]
30003d48:	e3530001 	cmp	r3, #1
30003d4c:	0a000008 	beq	30003d74 <raw_queue_size_receive+0x1c4>
30003d50:	eb000fa8 	bl	30007bf8 <OS_CPU_SR_Save>
30003d54:	e5d73000 	ldrb	r3, [r7]
30003d58:	e2433001 	sub	r3, r3, #1
30003d5c:	e5c73000 	strb	r3, [r7]
30003d60:	eb000fac 	bl	30007c18 <OS_CPU_SR_Restore>
30003d64:	e3a00006 	mov	r0, #6
30003d68:	eaffffb4 	b	30003c40 <raw_queue_size_receive+0x90>

		
		msg_tmp->next = p_q->free_msg;
		p_q->free_msg =  msg_tmp;
		
		RAW_CRITICAL_EXIT();
30003d6c:	eb0009de 	bl	300064ec <hybrid_int_process>
30003d70:	eaffffd3 	b	30003cc4 <raw_queue_size_receive+0x114>
	if (wait_option == RAW_NO_WAIT) {   
		
		*msg_ptr    = 0;
		*receive_size   = 0;
		
		RAW_CRITICAL_EXIT();
30003d74:	eb0009dc 	bl	300064ec <hybrid_int_process>
30003d78:	e3a00006 	mov	r0, #6
30003d7c:	eaffffaf 	b	30003c40 <raw_queue_size_receive+0x90>

		return RAW_NO_PEND_WAIT;   
	}

	SYSTEM_LOCK_PROCESS_QUEUE_SIZE();
30003d80:	eb0009d9 	bl	300064ec <hybrid_int_process>
30003d84:	e3a00007 	mov	r0, #7
30003d88:	eaffffac 	b	30003c40 <raw_queue_size_receive+0x90>

	raw_pend_object((RAW_COMMON_BLOCK_OBJECT  *)p_q, raw_task_active, wait_option);
30003d8c:	e59fa088 	ldr	sl, [pc, #136]	; 30003e1c <raw_queue_size_receive+0x26c>
30003d90:	e1a00004 	mov	r0, r4
30003d94:	e59a1000 	ldr	r1, [sl]
30003d98:	e1a02006 	mov	r2, r6
30003d9c:	ebfffa4f 	bl	300026e0 <raw_pend_object>
	
	RAW_CRITICAL_EXIT();
30003da0:	e5d73000 	ldrb	r3, [r7]
30003da4:	e3530001 	cmp	r3, #1
30003da8:	0a000017 	beq	30003e0c <raw_queue_size_receive+0x25c>
30003dac:	eb000f91 	bl	30007bf8 <OS_CPU_SR_Save>
30003db0:	e5d73000 	ldrb	r3, [r7]
30003db4:	e2433001 	sub	r3, r3, #1
30003db8:	e5c73000 	strb	r3, [r7]
30003dbc:	eb000f95 	bl	30007c18 <OS_CPU_SR_Restore>

	TRACE_QUEUE_SIZE_GET_BLOCK(raw_task_active, p_q, wait_option);
30003dc0:	e1a02006 	mov	r2, r6
30003dc4:	e1a01004 	mov	r1, r4
30003dc8:	e59a0000 	ldr	r0, [sl]
30003dcc:	eb000f81 	bl	30007bd8 <_trace_queue_size_get_block>
	
	raw_sched();                                             
30003dd0:	eb0001af 	bl	30004494 <raw_sched>

	result = block_state_post_process(raw_task_active, 0);
30003dd4:	e59a0000 	ldr	r0, [sl]
30003dd8:	e3a01000 	mov	r1, #0
30003ddc:	eb0003ac 	bl	30004c94 <block_state_post_process>

	/*if get the msg successful then take it*/
	if (result == RAW_SUCCESS) {
30003de0:	e3500000 	cmp	r0, #0

		*receive_size = raw_task_active->msg_size;
30003de4:	059f3030 	ldreq	r3, [pc, #48]	; 30003e1c <raw_queue_size_receive+0x26c>
		*msg_ptr =  raw_task_active->msg;
	}

	else {

		*msg_ptr    = 0;
30003de8:	13a03000 	movne	r3, #0
	result = block_state_post_process(raw_task_active, 0);

	/*if get the msg successful then take it*/
	if (result == RAW_SUCCESS) {

		*receive_size = raw_task_active->msg_size;
30003dec:	05933000 	ldreq	r3, [r3]
	}

	else {

		*msg_ptr    = 0;
		*receive_size   = 0;
30003df0:	15883000 	strne	r3, [r8]

	/*if get the msg successful then take it*/
	if (result == RAW_SUCCESS) {

		*receive_size = raw_task_active->msg_size;
		*msg_ptr =  raw_task_active->msg;
30003df4:	05932044 	ldreq	r2, [r3, #68]	; 0x44
	result = block_state_post_process(raw_task_active, 0);

	/*if get the msg successful then take it*/
	if (result == RAW_SUCCESS) {

		*receive_size = raw_task_active->msg_size;
30003df8:	05933048 	ldreq	r3, [r3, #72]	; 0x48
		*msg_ptr =  raw_task_active->msg;
30003dfc:	05852000 	streq	r2, [r5]
	result = block_state_post_process(raw_task_active, 0);

	/*if get the msg successful then take it*/
	if (result == RAW_SUCCESS) {

		*receive_size = raw_task_active->msg_size;
30003e00:	05883000 	streq	r3, [r8]
		*msg_ptr =  raw_task_active->msg;
	}

	else {

		*msg_ptr    = 0;
30003e04:	15853000 	strne	r3, [r5]
30003e08:	eaffff8c 	b	30003c40 <raw_queue_size_receive+0x90>

	SYSTEM_LOCK_PROCESS_QUEUE_SIZE();

	raw_pend_object((RAW_COMMON_BLOCK_OBJECT  *)p_q, raw_task_active, wait_option);
	
	RAW_CRITICAL_EXIT();
30003e0c:	eb0009b6 	bl	300064ec <hybrid_int_process>
30003e10:	eaffffea 	b	30003dc0 <raw_queue_size_receive+0x210>
30003e14:	30013e61 	andcc	r3, r1, r1, ror #28
30003e18:	300142c0 	andcc	r4, r1, r0, asr #5
30003e1c:	30013838 	andcc	r3, r1, r8, lsr r8

30003e20 <msg_size_post>:
}



RAW_U16 msg_size_post(RAW_QUEUE_SIZE *p_q, RAW_MSG_SIZE *p_void,  MSG_SIZE_TYPE size,  RAW_U8 opt_send_method, RAW_U8 opt_wake_all)             
{
30003e20:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
	RAW_MSG_SIZE *msg_temp;
	RAW_MSG_SIZE *p_msg_in; 
	
 	RAW_SR_ALLOC();
	
	RAW_CRITICAL_ENTER();
30003e24:	e59f4234 	ldr	r4, [pc, #564]	; 30004060 <msg_size_post+0x240>
}



RAW_U16 msg_size_post(RAW_QUEUE_SIZE *p_q, RAW_MSG_SIZE *p_void,  MSG_SIZE_TYPE size,  RAW_U8 opt_send_method, RAW_U8 opt_wake_all)             
{
30003e28:	e24dd00c 	sub	sp, sp, #12
30003e2c:	e1a05000 	mov	r5, r0
30003e30:	e1a07001 	mov	r7, r1
30003e34:	e1a06002 	mov	r6, r2
30003e38:	e1a0a003 	mov	sl, r3
30003e3c:	e5dd8028 	ldrb	r8, [sp, #40]	; 0x28
	RAW_MSG_SIZE *msg_temp;
	RAW_MSG_SIZE *p_msg_in; 
	
 	RAW_SR_ALLOC();
	
	RAW_CRITICAL_ENTER();
30003e40:	eb000f6c 	bl	30007bf8 <OS_CPU_SR_Save>
30003e44:	e5d43000 	ldrb	r3, [r4]
30003e48:	e2833001 	add	r3, r3, #1
30003e4c:	e5c43000 	strb	r3, [r4]
30003e50:	eb000f70 	bl	30007c18 <OS_CPU_SR_Restore>

	if (p_q->common_block_obj.object_type != RAW_QUEUE_SIZE_OBJ_TYPE) {
30003e54:	e5d5300d 	ldrb	r3, [r5, #13]
30003e58:	e3530015 	cmp	r3, #21
30003e5c:	0a00000b 	beq	30003e90 <msg_size_post+0x70>

		RAW_CRITICAL_EXIT();
30003e60:	e5d43000 	ldrb	r3, [r4]
30003e64:	e3530001 	cmp	r3, #1
30003e68:	0a00001d 	beq	30003ee4 <msg_size_post+0xc4>
30003e6c:	eb000f61 	bl	30007bf8 <OS_CPU_SR_Save>
30003e70:	e5d43000 	ldrb	r3, [r4]
30003e74:	e2433001 	sub	r3, r3, #1
30003e78:	e5c43000 	strb	r3, [r4]
30003e7c:	eb000f65 	bl	30007c18 <OS_CPU_SR_Restore>
30003e80:	e3a00036 	mov	r0, #54	; 0x36
	
	RAW_CRITICAL_EXIT();

	do_possible_sche();    
	return RAW_SUCCESS;
}
30003e84:	e28dd00c 	add	sp, sp, #12
30003e88:	e8bd45f0 	pop	{r4, r5, r6, r7, r8, sl, lr}
30003e8c:	e12fff1e 	bx	lr
	}

	block_list_head = &p_q->common_block_obj.block_list;

	/*queue is full condition!*/
	if (p_q->queue_current_msg >= p_q->queue_msg_size) {  
30003e90:	e5953028 	ldr	r3, [r5, #40]	; 0x28
30003e94:	e5952024 	ldr	r2, [r5, #36]	; 0x24
30003e98:	e1530002 	cmp	r3, r2
30003e9c:	3a000013 	bcc	30003ef0 <msg_size_post+0xd0>
	
		RAW_CRITICAL_EXIT();
30003ea0:	e5d43000 	ldrb	r3, [r4]
30003ea4:	e3530001 	cmp	r3, #1
30003ea8:	0a000030 	beq	30003f70 <msg_size_post+0x150>
30003eac:	eb000f51 	bl	30007bf8 <OS_CPU_SR_Save>
30003eb0:	e5d43000 	ldrb	r3, [r4]
30003eb4:	e2433001 	sub	r3, r3, #1
30003eb8:	e5c43000 	strb	r3, [r4]
30003ebc:	eb000f55 	bl	30007c18 <OS_CPU_SR_Restore>

		TRACE_QUEUE_SIZE_MSG_MAX(raw_task_active, p_q, p_void, size, opt_send_method);
30003ec0:	e59f319c 	ldr	r3, [pc, #412]	; 30004064 <msg_size_post+0x244>
30003ec4:	e1a01005 	mov	r1, r5
30003ec8:	e5930000 	ldr	r0, [r3]
30003ecc:	e1a02007 	mov	r2, r7
30003ed0:	e1a03006 	mov	r3, r6
30003ed4:	e58da000 	str	sl, [sp]
30003ed8:	eb000f3a 	bl	30007bc8 <_trace_queue_size_msg_max>
30003edc:	e3a0000b 	mov	r0, #11
		
		return RAW_MSG_MAX;
30003ee0:	eaffffe7 	b	30003e84 <msg_size_post+0x64>
	
	RAW_CRITICAL_ENTER();

	if (p_q->common_block_obj.object_type != RAW_QUEUE_SIZE_OBJ_TYPE) {

		RAW_CRITICAL_EXIT();
30003ee4:	eb000980 	bl	300064ec <hybrid_int_process>
30003ee8:	e3a00036 	mov	r0, #54	; 0x36
30003eec:	eaffffe4 	b	30003e84 <msg_size_post+0x64>
30003ef0:	e5950000 	ldr	r0, [r5]
		return RAW_MSG_MAX;
		
	}

	/*Queue is not full here, If there is no blocked receive task*/
	if (is_list_empty(block_list_head)) {        
30003ef4:	e1550000 	cmp	r5, r0
30003ef8:	0a00002d 	beq	30003fb4 <msg_size_post+0x194>
		
		return RAW_SUCCESS;
	}

	/*wake all the task blocked on this queue*/
	if (opt_wake_all) {
30003efc:	e3580000 	cmp	r8, #0
30003f00:	0a00001c 	beq	30003f78 <msg_size_post+0x158>
30003f04:	e59fa158 	ldr	sl, [pc, #344]	; 30004064 <msg_size_post+0x244>

		while (!is_list_empty(block_list_head)) {
			wake_send_msg_size(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list),  p_void, size);
30003f08:	e1a01007 	mov	r1, r7
30003f0c:	e1a02006 	mov	r2, r6
30003f10:	e2400004 	sub	r0, r0, #4
30003f14:	ebfff9cb 	bl	30002648 <wake_send_msg_size>

			TRACE_QUEUE_SIZE_WAKE_TASK(raw_task_active, list_entry(block_list_head->next, RAW_TASK_OBJ, task_list), p_void, size, opt_wake_all);
30003f18:	e5951000 	ldr	r1, [r5]
30003f1c:	e59a0000 	ldr	r0, [sl]
30003f20:	e2411004 	sub	r1, r1, #4
30003f24:	e1a02007 	mov	r2, r7
30003f28:	e1a03006 	mov	r3, r6
30003f2c:	e58d8000 	str	r8, [sp]
30003f30:	eb000f26 	bl	30007bd0 <_trace_queue_size_wake_task>
30003f34:	e5950000 	ldr	r0, [r5]
	}

	/*wake all the task blocked on this queue*/
	if (opt_wake_all) {

		while (!is_list_empty(block_list_head)) {
30003f38:	e1550000 	cmp	r5, r0
30003f3c:	1afffff1 	bne	30003f08 <msg_size_post+0xe8>
		wake_send_msg_size(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list),  p_void, size);

		TRACE_QUEUE_SIZE_WAKE_TASK(raw_task_active, list_entry(block_list_head->next, RAW_TASK_OBJ, task_list), p_void, size, opt_wake_all);
	}
	
	RAW_CRITICAL_EXIT();
30003f40:	e5d43000 	ldrb	r3, [r4]
30003f44:	e59f4114 	ldr	r4, [pc, #276]	; 30004060 <msg_size_post+0x240>
30003f48:	e3530001 	cmp	r3, #1
30003f4c:	0a000016 	beq	30003fac <msg_size_post+0x18c>
30003f50:	eb000f28 	bl	30007bf8 <OS_CPU_SR_Save>
30003f54:	e5d43000 	ldrb	r3, [r4]
30003f58:	e2433001 	sub	r3, r3, #1
30003f5c:	e5c43000 	strb	r3, [r4]
30003f60:	eb000f2c 	bl	30007c18 <OS_CPU_SR_Restore>

	do_possible_sche();    
30003f64:	eb00014a 	bl	30004494 <raw_sched>
30003f68:	e3a00000 	mov	r0, #0
	return RAW_SUCCESS;
30003f6c:	eaffffc4 	b	30003e84 <msg_size_post+0x64>
	block_list_head = &p_q->common_block_obj.block_list;

	/*queue is full condition!*/
	if (p_q->queue_current_msg >= p_q->queue_msg_size) {  
	
		RAW_CRITICAL_EXIT();
30003f70:	eb00095d 	bl	300064ec <hybrid_int_process>
30003f74:	eaffffd1 	b	30003ec0 <msg_size_post+0xa0>
	}
	
	/*wake hignhest priority task blocked on this queue and send msg to it*/
	else {
		
		wake_send_msg_size(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list),  p_void, size);
30003f78:	e1a01007 	mov	r1, r7
30003f7c:	e1a02006 	mov	r2, r6
30003f80:	e2400004 	sub	r0, r0, #4
30003f84:	ebfff9af 	bl	30002648 <wake_send_msg_size>

		TRACE_QUEUE_SIZE_WAKE_TASK(raw_task_active, list_entry(block_list_head->next, RAW_TASK_OBJ, task_list), p_void, size, opt_wake_all);
30003f88:	e5951000 	ldr	r1, [r5]
30003f8c:	e59f30d0 	ldr	r3, [pc, #208]	; 30004064 <msg_size_post+0x244>
30003f90:	e2411004 	sub	r1, r1, #4
30003f94:	e5930000 	ldr	r0, [r3]
30003f98:	e1a02007 	mov	r2, r7
30003f9c:	e1a03006 	mov	r3, r6
30003fa0:	e58d8000 	str	r8, [sp]
30003fa4:	eb000f09 	bl	30007bd0 <_trace_queue_size_wake_task>
30003fa8:	eaffffe4 	b	30003f40 <msg_size_post+0x120>
	}
	
	RAW_CRITICAL_EXIT();
30003fac:	eb00094e 	bl	300064ec <hybrid_int_process>
30003fb0:	eaffffeb 	b	30003f64 <msg_size_post+0x144>

	/*Queue is not full here, If there is no blocked receive task*/
	if (is_list_empty(block_list_head)) {        

		/*delete msg from free msg list*/
		msg_temp             = p_q->free_msg;                  
30003fb4:	e5952010 	ldr	r2, [r5, #16]
		p_q->free_msg 	= 	msg_temp->next;
		
		 /* If it is the first message placed in the queue*/
		if (p_q->queue_current_msg == 0) {            
30003fb8:	e3530000 	cmp	r3, #0
	/*Queue is not full here, If there is no blocked receive task*/
	if (is_list_empty(block_list_head)) {        

		/*delete msg from free msg list*/
		msg_temp             = p_q->free_msg;                  
		p_q->free_msg 	= 	msg_temp->next;
30003fbc:	e5921000 	ldr	r1, [r2]
		
		 /* If it is the first message placed in the queue*/
		if (p_q->queue_current_msg == 0) {            
			p_q->write         = msg_temp;                    
30003fc0:	0585201c 	streq	r2, [r5, #28]
	/*Queue is not full here, If there is no blocked receive task*/
	if (is_list_empty(block_list_head)) {        

		/*delete msg from free msg list*/
		msg_temp             = p_q->free_msg;                  
		p_q->free_msg 	= 	msg_temp->next;
30003fc4:	e5851010 	str	r1, [r5, #16]
		
		 /* If it is the first message placed in the queue*/
		if (p_q->queue_current_msg == 0) {            
			p_q->write         = msg_temp;                    
			p_q->read        = msg_temp;
30003fc8:	05852020 	streq	r2, [r5, #32]
		/*delete msg from free msg list*/
		msg_temp             = p_q->free_msg;                  
		p_q->free_msg 	= 	msg_temp->next;
		
		 /* If it is the first message placed in the queue*/
		if (p_q->queue_current_msg == 0) {            
30003fcc:	0a000008 	beq	30003ff4 <msg_size_post+0x1d4>
		} 
		
		else {


			if (opt_send_method == SEND_TO_END)  {
30003fd0:	e35a0002 	cmp	sl, #2

				p_msg_in           = p_q->write;           
				p_msg_in->next  = msg_temp;
30003fd4:	0595101c 	ldreq	r1, [r5, #28]

			}

			else {

				msg_temp->next = p_q->read;          
30003fd8:	15951020 	ldrne	r1, [r5, #32]


			if (opt_send_method == SEND_TO_END)  {

				p_msg_in           = p_q->write;           
				p_msg_in->next  = msg_temp;
30003fdc:	05812000 	streq	r2, [r1]
				msg_temp->next = 0;
30003fe0:	03a01000 	moveq	r1, #0
30003fe4:	05821000 	streq	r1, [r2]

			}

			else {

				msg_temp->next = p_q->read;          
30003fe8:	15821000 	strne	r1, [r2]
			if (opt_send_method == SEND_TO_END)  {

				p_msg_in           = p_q->write;           
				p_msg_in->next  = msg_temp;
				msg_temp->next = 0;
				p_q->write     = msg_temp;
30003fec:	0585201c 	streq	r2, [r5, #28]
			}

			else {

				msg_temp->next = p_q->read;          
				p_q->read = msg_temp;                 
30003ff0:	15852020 	strne	r2, [r5, #32]
			
		}

		p_q->queue_current_msg++;

		if (p_q->queue_current_msg > p_q->peak_numbers) {
30003ff4:	e5951018 	ldr	r1, [r5, #24]
			}
			
			
		}

		p_q->queue_current_msg++;
30003ff8:	e2833001 	add	r3, r3, #1

		if (p_q->queue_current_msg > p_q->peak_numbers) {
30003ffc:	e1530001 	cmp	r3, r1

			p_q->peak_numbers = p_q->queue_current_msg;
30004000:	85853018 	strhi	r3, [r5, #24]
			}
			
			
		}

		p_q->queue_current_msg++;
30004004:	e5853028 	str	r3, [r5, #40]	; 0x28
		
		/*Assign value to msg*/
		msg_temp->msg_ptr = p_void;                               
		msg_temp->msg_size = size;
		
		RAW_CRITICAL_EXIT();
30004008:	e5d43000 	ldrb	r3, [r4]
			p_q->peak_numbers = p_q->queue_current_msg;
		}
		
		/*Assign value to msg*/
		msg_temp->msg_ptr = p_void;                               
		msg_temp->msg_size = size;
3000400c:	e5826008 	str	r6, [r2, #8]
		
		RAW_CRITICAL_EXIT();
30004010:	e3530001 	cmp	r3, #1

			p_q->peak_numbers = p_q->queue_current_msg;
		}
		
		/*Assign value to msg*/
		msg_temp->msg_ptr = p_void;                               
30004014:	e5827004 	str	r7, [r2, #4]
		msg_temp->msg_size = size;
		
		RAW_CRITICAL_EXIT();
30004018:	e59f4040 	ldr	r4, [pc, #64]	; 30004060 <msg_size_post+0x240>
3000401c:	0a00000d 	beq	30004058 <msg_size_post+0x238>
30004020:	eb000ef4 	bl	30007bf8 <OS_CPU_SR_Save>
30004024:	e5d43000 	ldrb	r3, [r4]
30004028:	e2433001 	sub	r3, r3, #1
3000402c:	e5c43000 	strb	r3, [r4]
30004030:	eb000ef8 	bl	30007c18 <OS_CPU_SR_Restore>

		TRACE_QUEUE_SIZE_MSG_POST(raw_task_active, p_q, p_void, size, opt_send_method);
30004034:	e59f3028 	ldr	r3, [pc, #40]	; 30004064 <msg_size_post+0x244>
30004038:	e1a01005 	mov	r1, r5
3000403c:	e5930000 	ldr	r0, [r3]
30004040:	e1a02007 	mov	r2, r7
30004044:	e1a03006 	mov	r3, r6
30004048:	e58da000 	str	sl, [sp]
3000404c:	eb000ede 	bl	30007bcc <_trace_queue_size_msg_post>
30004050:	e3a00000 	mov	r0, #0
		
		return RAW_SUCCESS;
30004054:	eaffff8a 	b	30003e84 <msg_size_post+0x64>
		
		/*Assign value to msg*/
		msg_temp->msg_ptr = p_void;                               
		msg_temp->msg_size = size;
		
		RAW_CRITICAL_EXIT();
30004058:	eb000923 	bl	300064ec <hybrid_int_process>
3000405c:	eafffff4 	b	30004034 <msg_size_post+0x214>
30004060:	300142c0 	andcc	r4, r1, r0, asr #5
30004064:	30013838 	andcc	r3, r1, r8, lsr r8

30004068 <raw_queue_size_all_post>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_size_all_post(RAW_QUEUE_SIZE *p_q, RAW_VOID  *p_void, MSG_SIZE_TYPE size, RAW_U8 opt)
{
30004068:	e92d4070 	push	{r4, r5, r6, lr}
	#if (RAW_QUEUE_SIZE_FUNCTION_CHECK > 0)
		
		if (p_q == 0) {
3000406c:	e2506000 	subs	r6, r0, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_size_all_post(RAW_QUEUE_SIZE *p_q, RAW_VOID  *p_void, MSG_SIZE_TYPE size, RAW_U8 opt)
{
30004070:	e24dd008 	sub	sp, sp, #8
30004074:	e1a0c001 	mov	ip, r1
30004078:	e1a05002 	mov	r5, r2
3000407c:	e1a04003 	mov	r4, r3
	#if (RAW_QUEUE_SIZE_FUNCTION_CHECK > 0)
		
		if (p_q == 0) {
30004080:	03a00025 	moveq	r0, #37	; 0x25
30004084:	0a000009 	beq	300040b0 <raw_queue_size_all_post+0x48>
			
			return RAW_NULL_OBJECT;
		}
	
		/*if send null pointer, just return*/
		if (p_void == 0) {
30004088:	e3510000 	cmp	r1, #0
3000408c:	03a00023 	moveq	r0, #35	; 0x23
30004090:	0a000006 	beq	300040b0 <raw_queue_size_all_post+0x48>
		
	#endif

	#if (CONFIG_RAW_ZERO_INTERRUPT > 0)
	
	if (raw_int_nesting) {
30004094:	e59fe044 	ldr	lr, [pc, #68]	; 300040e0 <raw_queue_size_all_post+0x78>
30004098:	e5dee000 	ldrb	lr, [lr]
3000409c:	e35e0000 	cmp	lr, #0
300040a0:	1a000005 	bne	300040bc <raw_queue_size_all_post+0x54>
		return int_msg_post(RAW_TYPE_Q_SIZE_ALL, p_q, p_void, size, 0, opt);
	}
	
	#endif
	
	return msg_size_post(p_q, p_void, size, opt, WAKE_ALL_QUEUE);
300040a4:	e3a0c001 	mov	ip, #1
300040a8:	e58dc000 	str	ip, [sp]
300040ac:	ebffff5b 	bl	30003e20 <msg_size_post>
}
300040b0:	e28dd008 	add	sp, sp, #8
300040b4:	e8bd4070 	pop	{r4, r5, r6, lr}
300040b8:	e12fff1e 	bx	lr

	#if (CONFIG_RAW_ZERO_INTERRUPT > 0)
	
	if (raw_int_nesting) {
		
		return int_msg_post(RAW_TYPE_Q_SIZE_ALL, p_q, p_void, size, 0, opt);
300040bc:	e1a0200c 	mov	r2, ip
300040c0:	e1a01006 	mov	r1, r6
300040c4:	e3a0c000 	mov	ip, #0
300040c8:	e1a03005 	mov	r3, r5
300040cc:	e3a0000a 	mov	r0, #10
300040d0:	e58dc000 	str	ip, [sp]
300040d4:	e58d4004 	str	r4, [sp, #4]
300040d8:	eb000997 	bl	3000673c <int_msg_post>
300040dc:	eafffff3 	b	300040b0 <raw_queue_size_all_post+0x48>
300040e0:	30013e61 	andcc	r3, r1, r1, ror #28

300040e4 <raw_queue_size_end_post>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_size_end_post(RAW_QUEUE_SIZE *p_q, RAW_VOID  *p_void, MSG_SIZE_TYPE size)
{
300040e4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	#if (RAW_QUEUE_SIZE_FUNCTION_CHECK > 0)
		
		if (p_q == 0) {
300040e8:	e3500000 	cmp	r0, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_size_end_post(RAW_QUEUE_SIZE *p_q, RAW_VOID  *p_void, MSG_SIZE_TYPE size)
{
300040ec:	e24dd00c 	sub	sp, sp, #12
300040f0:	e1a0c001 	mov	ip, r1
300040f4:	e1a03002 	mov	r3, r2
	#if (RAW_QUEUE_SIZE_FUNCTION_CHECK > 0)
		
		if (p_q == 0) {
300040f8:	03a00025 	moveq	r0, #37	; 0x25
300040fc:	0a000010 	beq	30004144 <raw_queue_size_end_post+0x60>
			
			return RAW_NULL_OBJECT;
		}
	
		/*if send null pointer, just return*/
		if (p_void == 0) {
30004100:	e3510000 	cmp	r1, #0
30004104:	03a00023 	moveq	r0, #35	; 0x23
30004108:	0a00000d 	beq	30004144 <raw_queue_size_end_post+0x60>
	#endif


	#if (CONFIG_RAW_ZERO_INTERRUPT > 0)
	
	if (raw_int_nesting && raw_sched_lock) {
3000410c:	e59f205c 	ldr	r2, [pc, #92]	; 30004170 <raw_queue_size_end_post+0x8c>
30004110:	e5d22000 	ldrb	r2, [r2]
30004114:	e3520000 	cmp	r2, #0
30004118:	0a000003 	beq	3000412c <raw_queue_size_end_post+0x48>
3000411c:	e59f2050 	ldr	r2, [pc, #80]	; 30004174 <raw_queue_size_end_post+0x90>
30004120:	e5d22000 	ldrb	r2, [r2]
30004124:	e3520000 	cmp	r2, #0
30004128:	1a000008 	bne	30004150 <raw_queue_size_end_post+0x6c>
		return int_msg_post(RAW_TYPE_Q_SIZE_END, p_q, p_void, size, 0, 0);
	}
	
	#endif
	
	return msg_size_post(p_q, p_void, size, SEND_TO_END, WAKE_ONE_QUEUE);
3000412c:	e1a0100c 	mov	r1, ip
30004130:	e1a02003 	mov	r2, r3
30004134:	e3a0c000 	mov	ip, #0
30004138:	e3a03002 	mov	r3, #2
3000413c:	e58dc000 	str	ip, [sp]
30004140:	ebffff36 	bl	30003e20 <msg_size_post>
}
30004144:	e28dd00c 	add	sp, sp, #12
30004148:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
3000414c:	e12fff1e 	bx	lr

	#if (CONFIG_RAW_ZERO_INTERRUPT > 0)
	
	if (raw_int_nesting && raw_sched_lock) {
		
		return int_msg_post(RAW_TYPE_Q_SIZE_END, p_q, p_void, size, 0, 0);
30004150:	e1a01000 	mov	r1, r0
30004154:	e1a0200c 	mov	r2, ip
30004158:	e3a00009 	mov	r0, #9
3000415c:	e3a0c000 	mov	ip, #0
30004160:	e58dc004 	str	ip, [sp, #4]
30004164:	e58dc000 	str	ip, [sp]
30004168:	eb000973 	bl	3000673c <int_msg_post>
3000416c:	eafffff4 	b	30004144 <raw_queue_size_end_post+0x60>
30004170:	30013e61 	andcc	r3, r1, r1, ror #28
30004174:	300142c0 	andcc	r4, r1, r0, asr #5

30004178 <raw_queue_size_front_post>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_size_front_post(RAW_QUEUE_SIZE *p_q, RAW_VOID  *p_void, MSG_SIZE_TYPE size)
{
30004178:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	#if (RAW_QUEUE_SIZE_FUNCTION_CHECK > 0)
		
		if (p_q == 0) {
3000417c:	e3500000 	cmp	r0, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_size_front_post(RAW_QUEUE_SIZE *p_q, RAW_VOID  *p_void, MSG_SIZE_TYPE size)
{
30004180:	e24dd00c 	sub	sp, sp, #12
30004184:	e1a0c001 	mov	ip, r1
30004188:	e1a03002 	mov	r3, r2
	#if (RAW_QUEUE_SIZE_FUNCTION_CHECK > 0)
		
		if (p_q == 0) {
3000418c:	03a00025 	moveq	r0, #37	; 0x25
30004190:	0a000010 	beq	300041d8 <raw_queue_size_front_post+0x60>
			
			return RAW_NULL_OBJECT;
		}
	
		/*if send null pointer, just return*/
		if (p_void == 0) {
30004194:	e3510000 	cmp	r1, #0
30004198:	03a00023 	moveq	r0, #35	; 0x23
3000419c:	0a00000d 	beq	300041d8 <raw_queue_size_front_post+0x60>
	#endif
	

	#if (CONFIG_RAW_ZERO_INTERRUPT > 0)
	
	if (raw_int_nesting && raw_sched_lock) {
300041a0:	e59f205c 	ldr	r2, [pc, #92]	; 30004204 <raw_queue_size_front_post+0x8c>
300041a4:	e5d22000 	ldrb	r2, [r2]
300041a8:	e3520000 	cmp	r2, #0
300041ac:	0a000003 	beq	300041c0 <raw_queue_size_front_post+0x48>
300041b0:	e59f2050 	ldr	r2, [pc, #80]	; 30004208 <raw_queue_size_front_post+0x90>
300041b4:	e5d22000 	ldrb	r2, [r2]
300041b8:	e3520000 	cmp	r2, #0
300041bc:	1a000008 	bne	300041e4 <raw_queue_size_front_post+0x6c>
		return int_msg_post(RAW_TYPE_Q_SIZE_FRONT, p_q, p_void, size, 0, 0);
	}
	
	#endif

	return msg_size_post(p_q, p_void,size,SEND_TO_FRONT, WAKE_ONE_QUEUE);
300041c0:	e1a0100c 	mov	r1, ip
300041c4:	e1a02003 	mov	r2, r3
300041c8:	e3a0c000 	mov	ip, #0
300041cc:	e3a03001 	mov	r3, #1
300041d0:	e58dc000 	str	ip, [sp]
300041d4:	ebffff11 	bl	30003e20 <msg_size_post>
}
300041d8:	e28dd00c 	add	sp, sp, #12
300041dc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
300041e0:	e12fff1e 	bx	lr

	#if (CONFIG_RAW_ZERO_INTERRUPT > 0)
	
	if (raw_int_nesting && raw_sched_lock) {
		
		return int_msg_post(RAW_TYPE_Q_SIZE_FRONT, p_q, p_void, size, 0, 0);
300041e4:	e1a01000 	mov	r1, r0
300041e8:	e1a0200c 	mov	r2, ip
300041ec:	e3a00008 	mov	r0, #8
300041f0:	e3a0c000 	mov	ip, #0
300041f4:	e58dc004 	str	ip, [sp, #4]
300041f8:	e58dc000 	str	ip, [sp]
300041fc:	eb00094e 	bl	3000673c <int_msg_post>
30004200:	eafffff4 	b	300041d8 <raw_queue_size_front_post+0x60>
30004204:	30013e61 	andcc	r3, r1, r1, ror #28
30004208:	300142c0 	andcc	r4, r1, r0, asr #5

3000420c <raw_queue_size_create>:

	
	#if (RAW_QUEUE_SIZE_FUNCTION_CHECK > 0)
	

	if (p_q == 0) {
3000420c:	e250c000 	subs	ip, r0, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_queue_size_create(RAW_QUEUE_SIZE  *p_q, RAW_U8 *p_name, RAW_MSG_SIZE *msg_start, MSG_SIZE_TYPE number)
{
30004210:	e92d4010 	push	{r4, lr}

	
	#if (RAW_QUEUE_SIZE_FUNCTION_CHECK > 0)
	

	if (p_q == 0) {
30004214:	03a00025 	moveq	r0, #37	; 0x25
30004218:	0a000026 	beq	300042b8 <raw_queue_size_create+0xac>
		
		return RAW_NULL_OBJECT;
	}
	
	if (msg_start == 0) {
3000421c:	e3520000 	cmp	r2, #0
30004220:	03a00023 	moveq	r0, #35	; 0x23
30004224:	0a000023 	beq	300042b8 <raw_queue_size_create+0xac>
		
		return RAW_NULL_POINTER;
	}
	
	if (number == 0) {
30004228:	e3530000 	cmp	r3, #0
3000422c:	03a00029 	moveq	r0, #41	; 0x29
30004230:	0a000020 	beq	300042b8 <raw_queue_size_create+0xac>
	/*init the free msg list*/
	p_msg1 = msg_start;
	p_msg2 = msg_start;
	p_msg2++;
   
	while (--number) { 
30004234:	e243e001 	sub	lr, r3, #1
	#endif

	list_init(&p_q->common_block_obj.block_list);
	                             
	p_q->common_block_obj.name = p_name;   
	p_q->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
30004238:	e3a00000 	mov	r0, #0
	/*init the free msg list*/
	p_msg1 = msg_start;
	p_msg2 = msg_start;
	p_msg2++;
   
	while (--number) { 
3000423c:	e35e0000 	cmp	lr, #0
	
	#endif

	list_init(&p_q->common_block_obj.block_list);
	                             
	p_q->common_block_obj.name = p_name;   
30004240:	e58c1008 	str	r1, [ip, #8]
/*
 * List initialization
 */
RAW_INLINE void list_init(LIST *list_head)
{
	list_head->next = list_head;
30004244:	e58cc000 	str	ip, [ip]
	list_head->previous = list_head;
30004248:	e58cc004 	str	ip, [ip, #4]
	p_q->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
3000424c:	e5cc000c 	strb	r0, [ip, #12]

	p_q->queue_current_msg = 0;
30004250:	e58c0028 	str	r0, [ip, #40]	; 0x28
	p_q->peak_numbers = 0;
30004254:	e58c0018 	str	r0, [ip, #24]
	
	p_q->queue_msg_size = number;
30004258:	e58c3024 	str	r3, [ip, #36]	; 0x24
	p_q->free_msg = msg_start;
3000425c:	e58c2010 	str	r2, [ip, #16]
	/*init the free msg list*/
	p_msg1 = msg_start;
	p_msg2 = msg_start;
	p_msg2++;
   
	while (--number) { 
30004260:	e1a0100e 	mov	r1, lr
30004264:	0a000008 	beq	3000428c <raw_queue_size_create+0x80>
	p_q->free_msg = msg_start;
	
	/*init the free msg list*/
	p_msg1 = msg_start;
	p_msg2 = msg_start;
	p_msg2++;
30004268:	e282300c 	add	r3, r2, #12
   
	while (--number) { 
3000426c:	e2511001 	subs	r1, r1, #1
		
		p_msg1->next = p_msg2;
30004270:	e503300c 	str	r3, [r3, #-12]
		p_msg1->msg_ptr = 0;
30004274:	e5030008 	str	r0, [r3, #-8]
		p_msg1->msg_size = 0;
30004278:	e5030004 	str	r0, [r3, #-4]

		p_msg1++;
		p_msg2++;
3000427c:	e283300c 	add	r3, r3, #12
	/*init the free msg list*/
	p_msg1 = msg_start;
	p_msg2 = msg_start;
	p_msg2++;
   
	while (--number) { 
30004280:	1afffff9 	bne	3000426c <raw_queue_size_create+0x60>
30004284:	e08ee08e 	add	lr, lr, lr, lsl #1
30004288:	e082210e 	add	r2, r2, lr, lsl #2
		p_msg1++;
		p_msg2++;
	}

	/*init  the last free msg*/ 
	p_msg1->next = 0;                      
3000428c:	e3a04000 	mov	r4, #0
	p_msg1->msg_ptr  = 0;
	p_msg1->msg_size = 0;

	p_q->common_block_obj.object_type = RAW_QUEUE_SIZE_OBJ_TYPE;
30004290:	e3a03015 	mov	r3, #21
	}

	/*init  the last free msg*/ 
	p_msg1->next = 0;                      
	p_msg1->msg_ptr  = 0;
	p_msg1->msg_size = 0;
30004294:	e5824008 	str	r4, [r2, #8]
		p_msg1++;
		p_msg2++;
	}

	/*init  the last free msg*/ 
	p_msg1->next = 0;                      
30004298:	e5824000 	str	r4, [r2]
	p_msg1->msg_ptr  = 0;
3000429c:	e5824004 	str	r4, [r2, #4]
	p_msg1->msg_size = 0;

	p_q->common_block_obj.object_type = RAW_QUEUE_SIZE_OBJ_TYPE;
300042a0:	e5cc300d 	strb	r3, [ip, #13]

	TRACE_QUEUE_SIZE_CREATE(raw_task_active, p_q);
300042a4:	e59f3014 	ldr	r3, [pc, #20]	; 300042c0 <raw_queue_size_create+0xb4>
300042a8:	e1a0100c 	mov	r1, ip
300042ac:	e5930000 	ldr	r0, [r3]
300042b0:	eb000e43 	bl	30007bc4 <_trace_queue_size_create>
300042b4:	e1a00004 	mov	r0, r4
	
	return RAW_SUCCESS;
	
}
300042b8:	e8bd4010 	pop	{r4, lr}
300042bc:	e12fff1e 	bx	lr
300042c0:	30013838 	andcc	r3, r1, r8, lsr r8

300042c4 <calculate_time_slice>:


#if (CONFIG_SCHED_FIFO_RR > 0)

void calculate_time_slice(RAW_U8 task_prio)
{
300042c4:	e92d4070 	push	{r4, r5, r6, lr}

	RAW_SR_ALLOC();

	head = &raw_ready_queue.task_ready_list[task_prio];
	 
	RAW_CRITICAL_ENTER();
300042c8:	e59f40b4 	ldr	r4, [pc, #180]	; 30004384 <calculate_time_slice+0xc0>


#if (CONFIG_SCHED_FIFO_RR > 0)

void calculate_time_slice(RAW_U8 task_prio)
{
300042cc:	e1a06000 	mov	r6, r0

	RAW_SR_ALLOC();

	head = &raw_ready_queue.task_ready_list[task_prio];
	 
	RAW_CRITICAL_ENTER();
300042d0:	eb000e48 	bl	30007bf8 <OS_CPU_SR_Save>
300042d4:	e5d43000 	ldrb	r3, [r4]
	RAW_TASK_OBJ   *task_ptr;
	LIST *head;

	RAW_SR_ALLOC();

	head = &raw_ready_queue.task_ready_list[task_prio];
300042d8:	e59f50a8 	ldr	r5, [pc, #168]	; 30004388 <calculate_time_slice+0xc4>
	 
	RAW_CRITICAL_ENTER();
300042dc:	e2833001 	add	r3, r3, #1
300042e0:	e5c43000 	strb	r3, [r4]
300042e4:	eb000e4b 	bl	30007c18 <OS_CPU_SR_Restore>
 * return TRUE if the list is empty
 */
RAW_INLINE RAW_BOOLEAN is_list_empty(LIST *list)
{

	return (list->next == list);	
300042e8:	e7953186 	ldr	r3, [r5, r6, lsl #3]
	RAW_TASK_OBJ   *task_ptr;
	LIST *head;

	RAW_SR_ALLOC();

	head = &raw_ready_queue.task_ready_list[task_prio];
300042ec:	e0856186 	add	r6, r5, r6, lsl #3
	 
	RAW_CRITICAL_ENTER();
	
	/*if ready list is empty then just return because nothing is to be caculated*/                       
	if (is_list_empty(head)) {
300042f0:	e1560003 	cmp	r6, r3
300042f4:	0a00000d 	beq	30004330 <calculate_time_slice+0x6c>
		RAW_CRITICAL_EXIT();
		return;
	}

	/*Always look at the first task on the ready list*/
	task_ptr = list_entry(head->next, RAW_TASK_OBJ, task_list);
300042f8:	e2435004 	sub	r5, r3, #4

	/*SCHED_FIFO does not has timeslice, just return*/
	if (task_ptr->sched_way == SCHED_FIFO) {
300042fc:	e5d52018 	ldrb	r2, [r5, #24]
30004300:	e3520001 	cmp	r2, #1
30004304:	0a000009 	beq	30004330 <calculate_time_slice+0x6c>
		return;
	}

	/*there is only one task on this ready list, so do not need to caculate time slice*/
	/*idle task must satisfy this condition*/
	if (head->next->next == head)  {
30004308:	e5933000 	ldr	r3, [r3]
3000430c:	e1530006 	cmp	r3, r6
30004310:	0a000006 	beq	30004330 <calculate_time_slice+0x6c>
		RAW_CRITICAL_EXIT();
		return;
		
	}

	if (task_ptr->time_slice) {
30004314:	e5953010 	ldr	r3, [r5, #16]
30004318:	e3530000 	cmp	r3, #0
3000431c:	0a00000d 	beq	30004358 <calculate_time_slice+0x94>
		task_ptr->time_slice--;
30004320:	e2433001 	sub	r3, r3, #1
	}

	/*if current active task has time_slice, just return*/
	if (task_ptr->time_slice) {               
30004324:	e3530000 	cmp	r3, #0
		return;
		
	}

	if (task_ptr->time_slice) {
		task_ptr->time_slice--;
30004328:	e5853010 	str	r3, [r5, #16]
	}

	/*if current active task has time_slice, just return*/
	if (task_ptr->time_slice) {               
3000432c:	0a000009 	beq	30004358 <calculate_time_slice+0x94>
		RAW_CRITICAL_EXIT();
30004330:	e5d43000 	ldrb	r3, [r4]
30004334:	e3530001 	cmp	r3, #1
30004338:	0a00000f 	beq	3000437c <calculate_time_slice+0xb8>
	move_to_ready_list_end(&raw_ready_queue, task_ptr);

	/*restore the task time slice*/ 
	task_ptr->time_slice = task_ptr->time_total;  
	
	RAW_CRITICAL_EXIT();
3000433c:	eb000e2d 	bl	30007bf8 <OS_CPU_SR_Save>
30004340:	e5d43000 	ldrb	r3, [r4]
30004344:	e2433001 	sub	r3, r3, #1
30004348:	e5c43000 	strb	r3, [r4]
3000434c:	eb000e31 	bl	30007c18 <OS_CPU_SR_Restore>
}
30004350:	e8bd4070 	pop	{r4, r5, r6, lr}
30004354:	e12fff1e 	bx	lr
		RAW_CRITICAL_EXIT();
		return;
	}

	/*Move current active task to the end of ready list for the same priority*/
	move_to_ready_list_end(&raw_ready_queue, task_ptr);
30004358:	e59f002c 	ldr	r0, [pc, #44]	; 3000438c <calculate_time_slice+0xc8>
3000435c:	e1a01005 	mov	r1, r5
30004360:	ebfff830 	bl	30002428 <move_to_ready_list_end>

	/*restore the task time slice*/ 
	task_ptr->time_slice = task_ptr->time_total;  
	
	RAW_CRITICAL_EXIT();
30004364:	e5d42000 	ldrb	r2, [r4]

	/*Move current active task to the end of ready list for the same priority*/
	move_to_ready_list_end(&raw_ready_queue, task_ptr);

	/*restore the task time slice*/ 
	task_ptr->time_slice = task_ptr->time_total;  
30004368:	e5953014 	ldr	r3, [r5, #20]
	
	RAW_CRITICAL_EXIT();
3000436c:	e3520001 	cmp	r2, #1

	/*Move current active task to the end of ready list for the same priority*/
	move_to_ready_list_end(&raw_ready_queue, task_ptr);

	/*restore the task time slice*/ 
	task_ptr->time_slice = task_ptr->time_total;  
30004370:	e5853010 	str	r3, [r5, #16]
	
	RAW_CRITICAL_EXIT();
30004374:	e59f4008 	ldr	r4, [pc, #8]	; 30004384 <calculate_time_slice+0xc0>
30004378:	1affffef 	bne	3000433c <calculate_time_slice+0x78>
3000437c:	eb00085a 	bl	300064ec <hybrid_int_process>
30004380:	eafffff2 	b	30004350 <calculate_time_slice+0x8c>
30004384:	300142c0 	andcc	r4, r1, r0, asr #5
30004388:	30013c50 	andcc	r3, r1, r0, asr ip
3000438c:	30013c4c 	andcc	r3, r1, ip, asr #24

30004390 <raw_os_start>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_os_start(void)
{
30004390:	e92d4010 	push	{r4, lr}

	if (raw_os_active == RAW_OS_STOPPED) {
30004394:	e59f4040 	ldr	r4, [pc, #64]	; 300043dc <raw_os_start+0x4c>
30004398:	e5d43000 	ldrb	r3, [r4]
3000439c:	e3530005 	cmp	r3, #5
300043a0:	13a00004 	movne	r0, #4
300043a4:	0a000001 	beq	300043b0 <raw_os_start+0x20>

	}

	return RAW_SYSTEM_ERROR;
	
}
300043a8:	e8bd4010 	pop	{r4, lr}
300043ac:	e12fff1e 	bx	lr
RAW_U16 raw_os_start(void)
{

	if (raw_os_active == RAW_OS_STOPPED) {
		
		get_ready_task(&raw_ready_queue);
300043b0:	e59f0028 	ldr	r0, [pc, #40]	; 300043e0 <raw_os_start+0x50>
300043b4:	ebfff82c 	bl	3000246c <get_ready_task>
		
		/*done it here, so doesn't need do it in raw_start_first_task*/
		raw_task_active = high_ready_obj;
300043b8:	e59f3024 	ldr	r3, [pc, #36]	; 300043e4 <raw_os_start+0x54>
300043bc:	e5932000 	ldr	r2, [r3]
300043c0:	e59f3020 	ldr	r3, [pc, #32]	; 300043e8 <raw_os_start+0x58>
300043c4:	e5832000 	str	r2, [r3]
		raw_os_active = RAW_OS_RUNNING;
300043c8:	e3a03004 	mov	r3, #4
300043cc:	e5c43000 	strb	r3, [r4]
		
		raw_start_first_task(); 
300043d0:	eb000e12 	bl	30007c20 <raw_start_first_task>
300043d4:	e3a00003 	mov	r0, #3

		return RAW_OS_RUNNING;

	}

	return RAW_SYSTEM_ERROR;
300043d8:	eafffff2 	b	300043a8 <raw_os_start+0x18>
300043dc:	300133c0 	andcc	r3, r1, r0, asr #7
300043e0:	30013c4c 	andcc	r3, r1, ip, asr #24
300043e4:	30013e64 	andcc	r3, r1, r4, ror #28
300043e8:	30013838 	andcc	r3, r1, r8, lsr r8

300043ec <raw_os_init>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_os_init(void)
{
300043ec:	e92d4010 	push	{r4, lr}
300043f0:	e24dd018 	sub	sp, sp, #24

	TRACE_INIT();
300043f4:	eb000dc5 	bl	30007b10 <_trace_init>
	
	raw_os_active = RAW_OS_STOPPED;
300043f8:	e59f3078 	ldr	r3, [pc, #120]	; 30004478 <raw_os_init+0x8c>
300043fc:	e3a02005 	mov	r2, #5
30004400:	e5c32000 	strb	r2, [r3]
	run_queue_init(&raw_ready_queue);
30004404:	e59f0070 	ldr	r0, [pc, #112]	; 3000447c <raw_os_init+0x90>
30004408:	ebfff79b 	bl	3000227c <run_queue_init>

	/*Init the tick heart system*/
	tick_list_init();
3000440c:	eb000961 	bl	30006998 <tick_list_init>
/*
 * List initialization
 */
RAW_INLINE void list_init(LIST *list_head)
{
	list_head->next = list_head;
30004410:	e59f3068 	ldr	r3, [pc, #104]	; 30004480 <raw_os_init+0x94>
	#if (CONFIG_RAW_USER_HOOK > 0)
	raw_os_init_hook();
	#endif

	/*Start the first idle task*/
	raw_task_create(&raw_idle_obj, (RAW_U8  *)"idle_task",  0, 
30004414:	e3a04000 	mov	r4, #0
	list_head->previous = list_head;
30004418:	e5833004 	str	r3, [r3, #4]
/*
 * List initialization
 */
RAW_INLINE void list_init(LIST *list_head)
{
	list_head->next = list_head;
3000441c:	e5833000 	str	r3, [r3]
	/*Init the task head list*/
	list_init(&(system_debug.task_head));
	#endif
	
	#if (CONFIG_RAW_USER_HOOK > 0)
	raw_os_init_hook();
30004420:	eb000db5 	bl	30007afc <raw_os_init_hook>
	#endif

	/*Start the first idle task*/
	raw_task_create(&raw_idle_obj, (RAW_U8  *)"idle_task",  0, 
30004424:	e59fc058 	ldr	ip, [pc, #88]	; 30004484 <raw_os_init+0x98>
30004428:	e59f1058 	ldr	r1, [pc, #88]	; 30004488 <raw_os_init+0x9c>
3000442c:	e58dc004 	str	ip, [sp, #4]
30004430:	e3a0cc01 	mov	ip, #256	; 0x100
30004434:	e58dc008 	str	ip, [sp, #8]
30004438:	e59fc04c 	ldr	ip, [pc, #76]	; 3000448c <raw_os_init+0xa0>
3000443c:	e1a02004 	mov	r2, r4
30004440:	e3a0303d 	mov	r3, #61	; 0x3d
30004444:	e58dc00c 	str	ip, [sp, #12]
30004448:	e59f0040 	ldr	r0, [pc, #64]	; 30004490 <raw_os_init+0xa4>
3000444c:	e3a0c001 	mov	ip, #1
30004450:	e58dc010 	str	ip, [sp, #16]
30004454:	e58d4000 	str	r4, [sp]
30004458:	eb00068c 	bl	30005e90 <raw_task_create>
									IDLE_PRIORITY, 0,  idle_stack, 
									IDLE_STACK_SIZE,  raw_idle_task, 1);
	
	#if (CONFIG_RAW_TIMER > 0)
	raw_timer_init();
3000445c:	eb000a30 	bl	30006d24 <raw_timer_init>
	#endif

	#if (CONFIG_RAW_TASK_0 > 0)
	raw_task_0_init();
30004460:	eb00074a 	bl	30006190 <raw_task_0_init>
	#endif

	#if (CONFIG_RAW_TICK_TASK > 0)
	tick_task_start();
30004464:	eb000983 	bl	30006a78 <tick_task_start>
	#endif
	
	return RAW_SUCCESS;
}
30004468:	e1a00004 	mov	r0, r4
3000446c:	e28dd018 	add	sp, sp, #24
30004470:	e8bd4010 	pop	{r4, lr}
30004474:	e12fff1e 	bx	lr
30004478:	300133c0 	andcc	r3, r1, r0, asr #7
3000447c:	30013c4c 	andcc	r3, r1, ip, asr #24
30004480:	30012fb4 	undefined instruction 0x30012fb4
30004484:	30012bb4 	undefined instruction 0x30012bb4
30004488:	30007cec 	andcc	r7, r0, ip, ror #25
3000448c:	30001364 	andcc	r1, r0, r4, ror #6
30004490:	30013e68 	andcc	r3, r1, r8, ror #28

30004494 <raw_sched>:

#include <raw_api.h>


void raw_sched(void)
{
30004494:	e92d4010 	push	{r4, lr}
	RAW_SR_ALLOC();

	/*if it is in interrupt or system is locked, just return*/ 
	if (raw_int_nesting || raw_sched_lock) {              
30004498:	e59f305c 	ldr	r3, [pc, #92]	; 300044fc <raw_sched+0x68>
3000449c:	e5d33000 	ldrb	r3, [r3]
300044a0:	e3530000 	cmp	r3, #0
300044a4:	1a000003 	bne	300044b8 <raw_sched+0x24>
300044a8:	e59f3050 	ldr	r3, [pc, #80]	; 30004500 <raw_sched+0x6c>
300044ac:	e5d33000 	ldrb	r3, [r3]
300044b0:	e3530000 	cmp	r3, #0
300044b4:	0a000001 	beq	300044c0 <raw_sched+0x2c>

	CONTEXT_SWITCH(); 

	RAW_CPU_ENABLE();  

}
300044b8:	e8bd4010 	pop	{r4, lr}
300044bc:	e12fff1e 	bx	lr
	/*if it is in interrupt or system is locked, just return*/ 
	if (raw_int_nesting || raw_sched_lock) {              
		return;                                             
	}

	RAW_CPU_DISABLE();
300044c0:	eb000dcc 	bl	30007bf8 <OS_CPU_SR_Save>
300044c4:	e1a04000 	mov	r4, r0
	         
	get_ready_task(&raw_ready_queue);
300044c8:	e59f0034 	ldr	r0, [pc, #52]	; 30004504 <raw_sched+0x70>
300044cc:	ebfff7e6 	bl	3000246c <get_ready_task>

	/*if highest task is currently task, then no need to do switch and just return*/
	if (high_ready_obj == raw_task_active) {                 
300044d0:	e59f3030 	ldr	r3, [pc, #48]	; 30004508 <raw_sched+0x74>
300044d4:	e5931000 	ldr	r1, [r3]
300044d8:	e59f302c 	ldr	r3, [pc, #44]	; 3000450c <raw_sched+0x78>
300044dc:	e5930000 	ldr	r0, [r3]
300044e0:	e1510000 	cmp	r1, r0
300044e4:	0a000001 	beq	300044f0 <raw_sched+0x5c>
		RAW_CPU_ENABLE();                                     
		return;
	}

	TRACE_TASK_SWITCH(raw_task_active, high_ready_obj);
300044e8:	eb000d89 	bl	30007b14 <_trace_task_switch>

	CONTEXT_SWITCH(); 
300044ec:	eb000dd3 	bl	30007c40 <port_task_switch>

	RAW_CPU_ENABLE();  
300044f0:	e1a00004 	mov	r0, r4
300044f4:	eb000dc7 	bl	30007c18 <OS_CPU_SR_Restore>
300044f8:	eaffffee 	b	300044b8 <raw_sched+0x24>
300044fc:	30013e61 	andcc	r3, r1, r1, ror #28
30004500:	300142c0 	andcc	r4, r1, r0, asr #5
30004504:	30013c4c 	andcc	r3, r1, ip, asr #24
30004508:	30013e64 	andcc	r3, r1, r4, ror #28
3000450c:	30013838 	andcc	r3, r1, r8, lsr r8

30004510 <raw_semaphore_set>:
************************************************************************************************************************
*/
#if (CONFIG_RAW_SEMAPHORE_SET > 0)

RAW_U16 raw_semaphore_set(RAW_SEMAPHORE *semaphore_ptr,  RAW_U32 sem_count)
{
30004510:	e92d4070 	push	{r4, r5, r6, lr}

	block_list_head = &semaphore_ptr->common_block_obj.block_list;

	#if (RAW_SEMA_FUNCTION_CHECK > 0)

	if (semaphore_ptr == 0) {
30004514:	e2504000 	subs	r4, r0, #0
************************************************************************************************************************
*/
#if (CONFIG_RAW_SEMAPHORE_SET > 0)

RAW_U16 raw_semaphore_set(RAW_SEMAPHORE *semaphore_ptr,  RAW_U32 sem_count)
{
30004518:	e1a06001 	mov	r6, r1

	block_list_head = &semaphore_ptr->common_block_obj.block_list;

	#if (RAW_SEMA_FUNCTION_CHECK > 0)

	if (semaphore_ptr == 0) {
3000451c:	03a00025 	moveq	r0, #37	; 0x25
30004520:	0a000004 	beq	30004538 <raw_semaphore_set+0x28>

		return RAW_NULL_OBJECT;
	}

	if (raw_int_nesting) {
30004524:	e59f30f4 	ldr	r3, [pc, #244]	; 30004620 <raw_semaphore_set+0x110>
30004528:	e5d33000 	ldrb	r3, [r3]
3000452c:	e3530000 	cmp	r3, #0
30004530:	13a00027 	movne	r0, #39	; 0x27
30004534:	0a000001 	beq	30004540 <raw_semaphore_set+0x30>

	RAW_CRITICAL_EXIT();

	return RAW_SUCCESS;

}
30004538:	e8bd4070 	pop	{r4, r5, r6, lr}
3000453c:	e12fff1e 	bx	lr
		return RAW_NOT_CALLED_BY_ISR;
	}

	#endif

	RAW_CRITICAL_ENTER();
30004540:	e59f50dc 	ldr	r5, [pc, #220]	; 30004624 <raw_semaphore_set+0x114>
30004544:	eb000dab 	bl	30007bf8 <OS_CPU_SR_Save>
30004548:	e5d53000 	ldrb	r3, [r5]
3000454c:	e2833001 	add	r3, r3, #1
30004550:	e5c53000 	strb	r3, [r5]
30004554:	eb000daf 	bl	30007c18 <OS_CPU_SR_Restore>

	if (semaphore_ptr->common_block_obj.object_type != RAW_SEM_OBJ_TYPE) {
30004558:	e5d4300d 	ldrb	r3, [r4, #13]
3000455c:	e3530011 	cmp	r3, #17
30004560:	0a00000c 	beq	30004598 <raw_semaphore_set+0x88>

		RAW_CRITICAL_EXIT();
30004564:	e5d53000 	ldrb	r3, [r5]
30004568:	e3530001 	cmp	r3, #1
3000456c:	0a000006 	beq	3000458c <raw_semaphore_set+0x7c>
30004570:	eb000da0 	bl	30007bf8 <OS_CPU_SR_Save>
30004574:	e5d53000 	ldrb	r3, [r5]
30004578:	e2433001 	sub	r3, r3, #1
3000457c:	e5c53000 	strb	r3, [r5]
30004580:	eb000da4 	bl	30007c18 <OS_CPU_SR_Restore>
30004584:	e3a00036 	mov	r0, #54	; 0x36
30004588:	eaffffea 	b	30004538 <raw_semaphore_set+0x28>
3000458c:	eb0007d6 	bl	300064ec <hybrid_int_process>
30004590:	e3a00036 	mov	r0, #54	; 0x36
30004594:	eaffffe7 	b	30004538 <raw_semaphore_set+0x28>
		return RAW_ERROR_OBJECT_TYPE;
	}
	
	if (semaphore_ptr->count) { 
30004598:	e5943010 	ldr	r3, [r4, #16]
3000459c:	e3530000 	cmp	r3, #0
300045a0:	1a00000c 	bne	300045d8 <raw_semaphore_set+0xc8>
{
	LIST *block_list_head;
	
	RAW_SR_ALLOC();

	block_list_head = &semaphore_ptr->common_block_obj.block_list;
300045a4:	e5943000 	ldr	r3, [r4]
300045a8:	e1540003 	cmp	r4, r3
300045ac:	0a000009 	beq	300045d8 <raw_semaphore_set+0xc8>
			semaphore_ptr->count = sem_count; 
		}

		else {

			RAW_CRITICAL_EXIT();
300045b0:	e5d53000 	ldrb	r3, [r5]
300045b4:	e3530001 	cmp	r3, #1
300045b8:	0a000015 	beq	30004614 <raw_semaphore_set+0x104>
300045bc:	eb000d8d 	bl	30007bf8 <OS_CPU_SR_Save>
300045c0:	e5d53000 	ldrb	r3, [r5]
300045c4:	e2433001 	sub	r3, r3, #1
300045c8:	e5c53000 	strb	r3, [r5]
300045cc:	eb000d91 	bl	30007c18 <OS_CPU_SR_Restore>
300045d0:	e3a00016 	mov	r0, #22
300045d4:	eaffffd7 	b	30004538 <raw_semaphore_set+0x28>

	else {

		if (is_list_empty(block_list_head)) {

			semaphore_ptr->count = sem_count; 
300045d8:	e5846010 	str	r6, [r4, #16]
			return RAW_SEMAPHORE_TASK_WAITING;
		}

	}

	RAW_CRITICAL_EXIT();
300045dc:	e5d53000 	ldrb	r3, [r5]
300045e0:	e59f403c 	ldr	r4, [pc, #60]	; 30004624 <raw_semaphore_set+0x114>
300045e4:	e3530001 	cmp	r3, #1
300045e8:	0a000006 	beq	30004608 <raw_semaphore_set+0xf8>
300045ec:	eb000d81 	bl	30007bf8 <OS_CPU_SR_Save>
300045f0:	e5d43000 	ldrb	r3, [r4]
300045f4:	e2433001 	sub	r3, r3, #1
300045f8:	e5c43000 	strb	r3, [r4]
300045fc:	eb000d85 	bl	30007c18 <OS_CPU_SR_Restore>
30004600:	e3a00000 	mov	r0, #0
30004604:	eaffffcb 	b	30004538 <raw_semaphore_set+0x28>
30004608:	eb0007b7 	bl	300064ec <hybrid_int_process>
3000460c:	e3a00000 	mov	r0, #0
30004610:	eaffffc8 	b	30004538 <raw_semaphore_set+0x28>
			semaphore_ptr->count = sem_count; 
		}

		else {

			RAW_CRITICAL_EXIT();
30004614:	eb0007b4 	bl	300064ec <hybrid_int_process>
30004618:	e3a00016 	mov	r0, #22
3000461c:	eaffffc5 	b	30004538 <raw_semaphore_set+0x28>
30004620:	30013e61 	andcc	r3, r1, r1, ror #28
30004624:	300142c0 	andcc	r4, r1, r0, asr #5

30004628 <raw_semphore_send_notify>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_semphore_send_notify(RAW_SEMAPHORE *semaphore_ptr, SEMPHORE_SEND_NOTIFY notify_function)
{
30004628:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	RAW_SR_ALLOC();
	
	#if (RAW_SEMA_FUNCTION_CHECK > 0)

	if (semaphore_ptr == 0) {
3000462c:	e2504000 	subs	r4, r0, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_semphore_send_notify(RAW_SEMAPHORE *semaphore_ptr, SEMPHORE_SEND_NOTIFY notify_function)
{
30004630:	e1a07001 	mov	r7, r1
	RAW_SR_ALLOC();
	
	#if (RAW_SEMA_FUNCTION_CHECK > 0)

	if (semaphore_ptr == 0) {
30004634:	03a00025 	moveq	r0, #37	; 0x25
30004638:	0a000004 	beq	30004650 <raw_semphore_send_notify+0x28>

		return RAW_NULL_OBJECT;
	}

	if (raw_int_nesting) {
3000463c:	e59f30a4 	ldr	r3, [pc, #164]	; 300046e8 <raw_semphore_send_notify+0xc0>
30004640:	e5d36000 	ldrb	r6, [r3]
30004644:	e3560000 	cmp	r6, #0
30004648:	13a00027 	movne	r0, #39	; 0x27
3000464c:	0a000001 	beq	30004658 <raw_semphore_send_notify+0x30>
	
	semaphore_ptr->semphore_send_notify = notify_function;
	RAW_CRITICAL_EXIT();
	
	return RAW_SUCCESS;
}
30004650:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
30004654:	e12fff1e 	bx	lr
		return RAW_NOT_CALLED_BY_ISR;
	}

	#endif
	
	RAW_CRITICAL_ENTER();
30004658:	e59f508c 	ldr	r5, [pc, #140]	; 300046ec <raw_semphore_send_notify+0xc4>
3000465c:	eb000d65 	bl	30007bf8 <OS_CPU_SR_Save>
30004660:	e5d53000 	ldrb	r3, [r5]
30004664:	e2833001 	add	r3, r3, #1
30004668:	e5c53000 	strb	r3, [r5]
3000466c:	eb000d69 	bl	30007c18 <OS_CPU_SR_Restore>

	if (semaphore_ptr->common_block_obj.object_type != RAW_SEM_OBJ_TYPE) {
30004670:	e5d4300d 	ldrb	r3, [r4, #13]
30004674:	e3530011 	cmp	r3, #17
30004678:	0a00000c 	beq	300046b0 <raw_semphore_send_notify+0x88>

		RAW_CRITICAL_EXIT();
3000467c:	e5d53000 	ldrb	r3, [r5]
30004680:	e3530001 	cmp	r3, #1
30004684:	0a000006 	beq	300046a4 <raw_semphore_send_notify+0x7c>
30004688:	eb000d5a 	bl	30007bf8 <OS_CPU_SR_Save>
3000468c:	e5d53000 	ldrb	r3, [r5]
30004690:	e2433001 	sub	r3, r3, #1
30004694:	e5c53000 	strb	r3, [r5]
30004698:	eb000d5e 	bl	30007c18 <OS_CPU_SR_Restore>
3000469c:	e3a00036 	mov	r0, #54	; 0x36
300046a0:	eaffffea 	b	30004650 <raw_semphore_send_notify+0x28>
300046a4:	eb000790 	bl	300064ec <hybrid_int_process>
300046a8:	e3a00036 	mov	r0, #54	; 0x36
300046ac:	eaffffe7 	b	30004650 <raw_semphore_send_notify+0x28>
		return RAW_ERROR_OBJECT_TYPE;
	}
	
	semaphore_ptr->semphore_send_notify = notify_function;
	RAW_CRITICAL_EXIT();
300046b0:	e5d53000 	ldrb	r3, [r5]

		RAW_CRITICAL_EXIT();
		return RAW_ERROR_OBJECT_TYPE;
	}
	
	semaphore_ptr->semphore_send_notify = notify_function;
300046b4:	e5847014 	str	r7, [r4, #20]
	RAW_CRITICAL_EXIT();
300046b8:	e3530001 	cmp	r3, #1
300046bc:	0a000006 	beq	300046dc <raw_semphore_send_notify+0xb4>
300046c0:	eb000d4c 	bl	30007bf8 <OS_CPU_SR_Save>
300046c4:	e5d53000 	ldrb	r3, [r5]
300046c8:	e2433001 	sub	r3, r3, #1
300046cc:	e5c53000 	strb	r3, [r5]
300046d0:	eb000d50 	bl	30007c18 <OS_CPU_SR_Restore>
300046d4:	e1a00006 	mov	r0, r6
300046d8:	eaffffdc 	b	30004650 <raw_semphore_send_notify+0x28>
300046dc:	eb000782 	bl	300064ec <hybrid_int_process>
300046e0:	e1a00006 	mov	r0, r6
300046e4:	eaffffd9 	b	30004650 <raw_semphore_send_notify+0x28>
300046e8:	30013e61 	andcc	r3, r1, r1, ror #28
300046ec:	300142c0 	andcc	r4, r1, r0, asr #5

300046f0 <raw_semaphore_delete>:
*             
************************************************************************************************************************
*/
#if (CONFIG_RAW_SEMAPHORE_DELETE > 0)
RAW_U16 raw_semaphore_delete(RAW_SEMAPHORE *semaphore_ptr)
{
300046f0:	e92d4070 	push	{r4, r5, r6, lr}
	
	RAW_SR_ALLOC();

	#if (RAW_SEMA_FUNCTION_CHECK > 0)
	
	if (semaphore_ptr == 0) {
300046f4:	e2504000 	subs	r4, r0, #0
300046f8:	03a00025 	moveq	r0, #37	; 0x25
300046fc:	0a000004 	beq	30004714 <raw_semaphore_delete+0x24>
		
		return RAW_NULL_OBJECT;
	}

	if (raw_int_nesting) {
30004700:	e59f30d8 	ldr	r3, [pc, #216]	; 300047e0 <raw_semaphore_delete+0xf0>
30004704:	e5d35000 	ldrb	r5, [r3]
30004708:	e3550000 	cmp	r5, #0
3000470c:	13a00027 	movne	r0, #39	; 0x27
30004710:	0a000001 	beq	3000471c <raw_semaphore_delete+0x2c>
	TRACE_SEMAPHORE_DELETE(raw_task_active, semaphore_ptr);
	
	do_possible_sche(); 
	
	return RAW_SUCCESS;
}
30004714:	e8bd4070 	pop	{r4, r5, r6, lr}
30004718:	e12fff1e 	bx	lr
		return RAW_NOT_CALLED_BY_ISR;
	}

	#endif
	
	RAW_CRITICAL_ENTER();
3000471c:	e59f60c0 	ldr	r6, [pc, #192]	; 300047e4 <raw_semaphore_delete+0xf4>
30004720:	eb000d34 	bl	30007bf8 <OS_CPU_SR_Save>
30004724:	e5d63000 	ldrb	r3, [r6]
30004728:	e2833001 	add	r3, r3, #1
3000472c:	e5c63000 	strb	r3, [r6]
30004730:	eb000d38 	bl	30007c18 <OS_CPU_SR_Restore>

	if (semaphore_ptr->common_block_obj.object_type != RAW_SEM_OBJ_TYPE) {
30004734:	e5d4300d 	ldrb	r3, [r4, #13]
30004738:	e3530011 	cmp	r3, #17
3000473c:	0a00000c 	beq	30004774 <raw_semaphore_delete+0x84>

		RAW_CRITICAL_EXIT();
30004740:	e5d63000 	ldrb	r3, [r6]
30004744:	e3530001 	cmp	r3, #1
30004748:	0a000006 	beq	30004768 <raw_semaphore_delete+0x78>
3000474c:	eb000d29 	bl	30007bf8 <OS_CPU_SR_Save>
30004750:	e5d63000 	ldrb	r3, [r6]
30004754:	e2433001 	sub	r3, r3, #1
30004758:	e5c63000 	strb	r3, [r6]
3000475c:	eb000d2d 	bl	30007c18 <OS_CPU_SR_Restore>
30004760:	e3a00036 	mov	r0, #54	; 0x36
30004764:	eaffffea 	b	30004714 <raw_semaphore_delete+0x24>
30004768:	eb00075f 	bl	300064ec <hybrid_int_process>
3000476c:	e3a00036 	mov	r0, #54	; 0x36
30004770:	eaffffe7 	b	30004714 <raw_semaphore_delete+0x24>
 * return TRUE if the list is empty
 */
RAW_INLINE RAW_BOOLEAN is_list_empty(LIST *list)
{

	return (list->next == list);	
30004774:	e5940000 	ldr	r0, [r4]
		return RAW_ERROR_OBJECT_TYPE;
	}

	block_list_head = &semaphore_ptr->common_block_obj.block_list;
	
	semaphore_ptr->common_block_obj.object_type = 0;
30004778:	e5c4500d 	strb	r5, [r4, #13]
	/*All task blocked on this queue is waken up*/
	while (!is_list_empty(block_list_head)) {
3000477c:	e1540000 	cmp	r4, r0
30004780:	0a000004 	beq	30004798 <raw_semaphore_delete+0xa8>
		delete_pend_obj(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list));	
30004784:	e2400004 	sub	r0, r0, #4
30004788:	ebfff765 	bl	30002524 <delete_pend_obj>
3000478c:	e5940000 	ldr	r0, [r4]

	block_list_head = &semaphore_ptr->common_block_obj.block_list;
	
	semaphore_ptr->common_block_obj.object_type = 0;
	/*All task blocked on this queue is waken up*/
	while (!is_list_empty(block_list_head)) {
30004790:	e1540000 	cmp	r4, r0
30004794:	1afffffa 	bne	30004784 <raw_semaphore_delete+0x94>
		delete_pend_obj(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list));	
	}                             

	RAW_CRITICAL_EXIT();
30004798:	e5d63000 	ldrb	r3, [r6]
3000479c:	e59f5040 	ldr	r5, [pc, #64]	; 300047e4 <raw_semaphore_delete+0xf4>
300047a0:	e3530001 	cmp	r3, #1
300047a4:	0a00000b 	beq	300047d8 <raw_semaphore_delete+0xe8>
300047a8:	eb000d12 	bl	30007bf8 <OS_CPU_SR_Save>
300047ac:	e5d53000 	ldrb	r3, [r5]
300047b0:	e2433001 	sub	r3, r3, #1
300047b4:	e5c53000 	strb	r3, [r5]
300047b8:	eb000d16 	bl	30007c18 <OS_CPU_SR_Restore>

	TRACE_SEMAPHORE_DELETE(raw_task_active, semaphore_ptr);
300047bc:	e59f3024 	ldr	r3, [pc, #36]	; 300047e8 <raw_semaphore_delete+0xf8>
300047c0:	e1a01004 	mov	r1, r4
300047c4:	e5930000 	ldr	r0, [r3]
300047c8:	eb000cde 	bl	30007b48 <_trace_semaphore_delete>
	
	do_possible_sche(); 
300047cc:	ebffff30 	bl	30004494 <raw_sched>
300047d0:	e3a00000 	mov	r0, #0
	
	return RAW_SUCCESS;
300047d4:	eaffffce 	b	30004714 <raw_semaphore_delete+0x24>
	/*All task blocked on this queue is waken up*/
	while (!is_list_empty(block_list_head)) {
		delete_pend_obj(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list));	
	}                             

	RAW_CRITICAL_EXIT();
300047d8:	eb000743 	bl	300064ec <hybrid_int_process>
300047dc:	eafffff6 	b	300047bc <raw_semaphore_delete+0xcc>
300047e0:	30013e61 	andcc	r3, r1, r1, ror #28
300047e4:	300142c0 	andcc	r4, r1, r0, asr #5
300047e8:	30013838 	andcc	r3, r1, r8, lsr r8

300047ec <raw_semaphore_get>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_semaphore_get(RAW_SEMAPHORE *semaphore_ptr, RAW_TICK_TYPE wait_option)
{
300047ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}

	RAW_SR_ALLOC();

	#if (RAW_SEMA_FUNCTION_CHECK > 0)

	if (semaphore_ptr == 0) {
300047f0:	e2505000 	subs	r5, r0, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_semaphore_get(RAW_SEMAPHORE *semaphore_ptr, RAW_TICK_TYPE wait_option)
{
300047f4:	e1a06001 	mov	r6, r1

	RAW_SR_ALLOC();

	#if (RAW_SEMA_FUNCTION_CHECK > 0)

	if (semaphore_ptr == 0) {
300047f8:	03a00025 	moveq	r0, #37	; 0x25
300047fc:	0a000004 	beq	30004814 <raw_semaphore_get+0x28>
		return RAW_NULL_OBJECT;
	}

	
	
	if (raw_int_nesting) {
30004800:	e59f3184 	ldr	r3, [pc, #388]	; 3000498c <raw_semaphore_get+0x1a0>
30004804:	e5d33000 	ldrb	r3, [r3]
30004808:	e3530000 	cmp	r3, #0
3000480c:	13a00027 	movne	r0, #39	; 0x27
30004810:	0a000001 	beq	3000481c <raw_semaphore_get+0x30>
	raw_sched(); 
	
	error_status = block_state_post_process(raw_task_active, 0);
	return error_status;

}
30004814:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
30004818:	e12fff1e 	bx	lr
		return RAW_NOT_CALLED_BY_ISR;
	}

	#endif
	
	RAW_CRITICAL_ENTER();
3000481c:	e59f416c 	ldr	r4, [pc, #364]	; 30004990 <raw_semaphore_get+0x1a4>
30004820:	eb000cf4 	bl	30007bf8 <OS_CPU_SR_Save>
30004824:	e5d43000 	ldrb	r3, [r4]
30004828:	e2833001 	add	r3, r3, #1
3000482c:	e5c43000 	strb	r3, [r4]
30004830:	eb000cf8 	bl	30007c18 <OS_CPU_SR_Restore>

	if (semaphore_ptr->common_block_obj.object_type != RAW_SEM_OBJ_TYPE) {
30004834:	e5d5300d 	ldrb	r3, [r5, #13]
30004838:	e3530011 	cmp	r3, #17
3000483c:	0a00000c 	beq	30004874 <raw_semaphore_get+0x88>

		RAW_CRITICAL_EXIT();
30004840:	e5d43000 	ldrb	r3, [r4]
30004844:	e3530001 	cmp	r3, #1
30004848:	0a000006 	beq	30004868 <raw_semaphore_get+0x7c>
3000484c:	eb000ce9 	bl	30007bf8 <OS_CPU_SR_Save>
30004850:	e5d43000 	ldrb	r3, [r4]
30004854:	e2433001 	sub	r3, r3, #1
30004858:	e5c43000 	strb	r3, [r4]
3000485c:	eb000ced 	bl	30007c18 <OS_CPU_SR_Restore>
30004860:	e3a00036 	mov	r0, #54	; 0x36
30004864:	eaffffea 	b	30004814 <raw_semaphore_get+0x28>
30004868:	eb00071f 	bl	300064ec <hybrid_int_process>
3000486c:	e3a00036 	mov	r0, #54	; 0x36
30004870:	eaffffe7 	b	30004814 <raw_semaphore_get+0x28>
		return RAW_ERROR_OBJECT_TYPE;
	}
	
	if (semaphore_ptr->count) {                      
30004874:	e5953010 	ldr	r3, [r5, #16]
30004878:	e3530000 	cmp	r3, #0
3000487c:	0a00000f 	beq	300048c0 <raw_semaphore_get+0xd4>
		semaphore_ptr->count--;                                       

		RAW_CRITICAL_EXIT();
30004880:	e5d42000 	ldrb	r2, [r4]
		RAW_CRITICAL_EXIT();
		return RAW_ERROR_OBJECT_TYPE;
	}
	
	if (semaphore_ptr->count) {                      
		semaphore_ptr->count--;                                       
30004884:	e2433001 	sub	r3, r3, #1

		RAW_CRITICAL_EXIT();
30004888:	e3520001 	cmp	r2, #1
		RAW_CRITICAL_EXIT();
		return RAW_ERROR_OBJECT_TYPE;
	}
	
	if (semaphore_ptr->count) {                      
		semaphore_ptr->count--;                                       
3000488c:	e5853010 	str	r3, [r5, #16]

		RAW_CRITICAL_EXIT();
30004890:	0a000020 	beq	30004918 <raw_semaphore_get+0x12c>
30004894:	eb000cd7 	bl	30007bf8 <OS_CPU_SR_Save>
30004898:	e5d43000 	ldrb	r3, [r4]
3000489c:	e2433001 	sub	r3, r3, #1
300048a0:	e5c43000 	strb	r3, [r4]
300048a4:	eb000cdb 	bl	30007c18 <OS_CPU_SR_Restore>
		TRACE_SEMAPHORE_GET_SUCCESS(raw_task_active, semaphore_ptr);		
300048a8:	e59f30e4 	ldr	r3, [pc, #228]	; 30004994 <raw_semaphore_get+0x1a8>
300048ac:	e1a01005 	mov	r1, r5
300048b0:	e5930000 	ldr	r0, [r3]
300048b4:	eb000ca4 	bl	30007b4c <_trace_semaphore_get_success>
300048b8:	e3a00000 	mov	r0, #0
		return RAW_SUCCESS;
300048bc:	eaffffd4 	b	30004814 <raw_semaphore_get+0x28>
	}
	
	/*Cann't get semphore, and return immediately if wait_option is  RAW_NO_WAIT*/
	if (wait_option == RAW_NO_WAIT) { 
300048c0:	e3560000 	cmp	r6, #0
300048c4:	1a000009 	bne	300048f0 <raw_semaphore_get+0x104>

		RAW_CRITICAL_EXIT();
300048c8:	e5d43000 	ldrb	r3, [r4]
300048cc:	e3530001 	cmp	r3, #1
300048d0:	0a000012 	beq	30004920 <raw_semaphore_get+0x134>
300048d4:	eb000cc7 	bl	30007bf8 <OS_CPU_SR_Save>
300048d8:	e5d43000 	ldrb	r3, [r4]
300048dc:	e2433001 	sub	r3, r3, #1
300048e0:	e5c43000 	strb	r3, [r4]
300048e4:	eb000ccb 	bl	30007c18 <OS_CPU_SR_Restore>
300048e8:	e3a00006 	mov	r0, #6
300048ec:	eaffffc8 	b	30004814 <raw_semaphore_get+0x28>
		return RAW_NO_PEND_WAIT;
	}      
	
	SYSTEM_LOCK_PROCESS();
300048f0:	e5d43000 	ldrb	r3, [r4]
300048f4:	e3530001 	cmp	r3, #1
300048f8:	9a00000b 	bls	3000492c <raw_semaphore_get+0x140>
300048fc:	eb000cbd 	bl	30007bf8 <OS_CPU_SR_Save>
30004900:	e5d43000 	ldrb	r3, [r4]
30004904:	e2433001 	sub	r3, r3, #1
30004908:	e5c43000 	strb	r3, [r4]
3000490c:	eb000cc1 	bl	30007c18 <OS_CPU_SR_Restore>
30004910:	e3a00007 	mov	r0, #7
30004914:	eaffffbe 	b	30004814 <raw_semaphore_get+0x28>
	}
	
	if (semaphore_ptr->count) {                      
		semaphore_ptr->count--;                                       

		RAW_CRITICAL_EXIT();
30004918:	eb0006f3 	bl	300064ec <hybrid_int_process>
3000491c:	eaffffe1 	b	300048a8 <raw_semaphore_get+0xbc>
	}
	
	/*Cann't get semphore, and return immediately if wait_option is  RAW_NO_WAIT*/
	if (wait_option == RAW_NO_WAIT) { 

		RAW_CRITICAL_EXIT();
30004920:	eb0006f1 	bl	300064ec <hybrid_int_process>
30004924:	e3a00006 	mov	r0, #6
30004928:	eaffffb9 	b	30004814 <raw_semaphore_get+0x28>
		return RAW_NO_PEND_WAIT;
	}      
	
	SYSTEM_LOCK_PROCESS();

	raw_pend_object((RAW_COMMON_BLOCK_OBJECT  *)semaphore_ptr, raw_task_active, wait_option);
3000492c:	e59f7060 	ldr	r7, [pc, #96]	; 30004994 <raw_semaphore_get+0x1a8>
30004930:	e1a00005 	mov	r0, r5
30004934:	e5971000 	ldr	r1, [r7]
30004938:	e1a02006 	mov	r2, r6
3000493c:	ebfff767 	bl	300026e0 <raw_pend_object>
	RAW_CRITICAL_EXIT();
30004940:	e5d43000 	ldrb	r3, [r4]
30004944:	e3530001 	cmp	r3, #1
30004948:	0a00000d 	beq	30004984 <raw_semaphore_get+0x198>
3000494c:	eb000ca9 	bl	30007bf8 <OS_CPU_SR_Save>
30004950:	e5d43000 	ldrb	r3, [r4]
30004954:	e2433001 	sub	r3, r3, #1
30004958:	e5c43000 	strb	r3, [r4]
3000495c:	eb000cad 	bl	30007c18 <OS_CPU_SR_Restore>

	TRACE_SEMAPHORE_GET_BLOCK(raw_task_active, semaphore_ptr, wait_option);
30004960:	e1a01005 	mov	r1, r5
30004964:	e5970000 	ldr	r0, [r7]
30004968:	e1a02006 	mov	r2, r6
3000496c:	eb000c77 	bl	30007b50 <_trace_semaphore_get_block>
	
	raw_sched(); 
30004970:	ebfffec7 	bl	30004494 <raw_sched>
	
	error_status = block_state_post_process(raw_task_active, 0);
30004974:	e5970000 	ldr	r0, [r7]
30004978:	e3a01000 	mov	r1, #0
3000497c:	eb0000c4 	bl	30004c94 <block_state_post_process>
	return error_status;
30004980:	eaffffa3 	b	30004814 <raw_semaphore_get+0x28>
	}      
	
	SYSTEM_LOCK_PROCESS();

	raw_pend_object((RAW_COMMON_BLOCK_OBJECT  *)semaphore_ptr, raw_task_active, wait_option);
	RAW_CRITICAL_EXIT();
30004984:	eb0006d8 	bl	300064ec <hybrid_int_process>
30004988:	eafffff4 	b	30004960 <raw_semaphore_get+0x174>
3000498c:	30013e61 	andcc	r3, r1, r1, ror #28
30004990:	300142c0 	andcc	r4, r1, r0, asr #5
30004994:	30013838 	andcc	r3, r1, r8, lsr r8

30004998 <semaphore_put>:

}


RAW_U16 semaphore_put(RAW_SEMAPHORE *semaphore_ptr, RAW_U8 opt_wake_all)
{
30004998:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	LIST *block_list_head;
	
	RAW_SR_ALLOC();
	
	RAW_CRITICAL_ENTER();
3000499c:	e59f51a0 	ldr	r5, [pc, #416]	; 30004b44 <semaphore_put+0x1ac>

}


RAW_U16 semaphore_put(RAW_SEMAPHORE *semaphore_ptr, RAW_U8 opt_wake_all)
{
300049a0:	e1a04000 	mov	r4, r0
300049a4:	e1a06001 	mov	r6, r1
	LIST *block_list_head;
	
	RAW_SR_ALLOC();
	
	RAW_CRITICAL_ENTER();
300049a8:	eb000c92 	bl	30007bf8 <OS_CPU_SR_Save>
300049ac:	e5d53000 	ldrb	r3, [r5]
300049b0:	e2833001 	add	r3, r3, #1
300049b4:	e5c53000 	strb	r3, [r5]
300049b8:	eb000c96 	bl	30007c18 <OS_CPU_SR_Restore>

	if (semaphore_ptr->common_block_obj.object_type != RAW_SEM_OBJ_TYPE) {
300049bc:	e5d4300d 	ldrb	r3, [r4, #13]
300049c0:	e3530011 	cmp	r3, #17
300049c4:	0a00000a 	beq	300049f4 <semaphore_put+0x5c>

		RAW_CRITICAL_EXIT();
300049c8:	e5d53000 	ldrb	r3, [r5]
300049cc:	e3530001 	cmp	r3, #1
300049d0:	0a000023 	beq	30004a64 <semaphore_put+0xcc>
300049d4:	eb000c87 	bl	30007bf8 <OS_CPU_SR_Save>
300049d8:	e5d53000 	ldrb	r3, [r5]
300049dc:	e2433001 	sub	r3, r3, #1
300049e0:	e5c53000 	strb	r3, [r5]
300049e4:	eb000c8b 	bl	30007c18 <OS_CPU_SR_Restore>
300049e8:	e3a00036 	mov	r0, #54	; 0x36

	return RAW_SUCCESS;



}
300049ec:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
300049f0:	e12fff1e 	bx	lr
300049f4:	e5940000 	ldr	r0, [r4]
	}

	block_list_head = &semaphore_ptr->common_block_obj.block_list;
	
	/*if no block task on this list just return*/
	if (is_list_empty(block_list_head)) {        
300049f8:	e1540000 	cmp	r4, r0
300049fc:	0a000026 	beq	30004a9c <semaphore_put+0x104>
		TRACE_SEMAPHORE_COUNT_INCREASE(raw_task_active, semaphore_ptr);
		return RAW_SUCCESS;
	}

	/*wake all the task blocked on this semphore*/
	if (opt_wake_all) {
30004a00:	e3560000 	cmp	r6, #0
30004a04:	0a000019 	beq	30004a70 <semaphore_put+0xd8>
30004a08:	e59f7138 	ldr	r7, [pc, #312]	; 30004b48 <semaphore_put+0x1b0>

		while (!is_list_empty(block_list_head)) {
			
			raw_wake_object(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list));
30004a0c:	e2400004 	sub	r0, r0, #4
30004a10:	ebfff711 	bl	3000265c <raw_wake_object>

			
			TRACE_SEM_WAKE_TASK(raw_task_active, list_entry(block_list_head->next, RAW_TASK_OBJ, task_list), opt_wake_all);
30004a14:	e5941000 	ldr	r1, [r4]
30004a18:	e5970000 	ldr	r0, [r7]
30004a1c:	e2411004 	sub	r1, r1, #4
30004a20:	e1a02006 	mov	r2, r6
30004a24:	eb000c4a 	bl	30007b54 <_trace_sem_wake_task>
30004a28:	e5940000 	ldr	r0, [r4]
	}

	/*wake all the task blocked on this semphore*/
	if (opt_wake_all) {

		while (!is_list_empty(block_list_head)) {
30004a2c:	e1540000 	cmp	r4, r0
30004a30:	1afffff5 	bne	30004a0c <semaphore_put+0x74>

		TRACE_SEM_WAKE_TASK(raw_task_active, list_entry(block_list_head->next, RAW_TASK_OBJ, task_list), opt_wake_all);
		
	}
	
	RAW_CRITICAL_EXIT();
30004a34:	e5d53000 	ldrb	r3, [r5]
30004a38:	e59f4104 	ldr	r4, [pc, #260]	; 30004b44 <semaphore_put+0x1ac>
30004a3c:	e3530001 	cmp	r3, #1
30004a40:	0a000013 	beq	30004a94 <semaphore_put+0xfc>
30004a44:	eb000c6b 	bl	30007bf8 <OS_CPU_SR_Save>
30004a48:	e5d43000 	ldrb	r3, [r4]
30004a4c:	e2433001 	sub	r3, r3, #1
30004a50:	e5c43000 	strb	r3, [r4]
30004a54:	eb000c6f 	bl	30007c18 <OS_CPU_SR_Restore>

	do_possible_sche();    
30004a58:	ebfffe8d 	bl	30004494 <raw_sched>
30004a5c:	e3a00000 	mov	r0, #0

	return RAW_SUCCESS;
30004a60:	eaffffe1 	b	300049ec <semaphore_put+0x54>
	
	RAW_CRITICAL_ENTER();

	if (semaphore_ptr->common_block_obj.object_type != RAW_SEM_OBJ_TYPE) {

		RAW_CRITICAL_EXIT();
30004a64:	eb0006a0 	bl	300064ec <hybrid_int_process>
30004a68:	e3a00036 	mov	r0, #54	; 0x36
30004a6c:	eaffffde 	b	300049ec <semaphore_put+0x54>
	}

	else {
		
		/*Wake up the highest priority task block on the semaphore*/
		raw_wake_object(list_entry(block_list_head->next, RAW_TASK_OBJ, task_list));
30004a70:	e2400004 	sub	r0, r0, #4
30004a74:	ebfff6f8 	bl	3000265c <raw_wake_object>

		TRACE_SEM_WAKE_TASK(raw_task_active, list_entry(block_list_head->next, RAW_TASK_OBJ, task_list), opt_wake_all);
30004a78:	e5941000 	ldr	r1, [r4]
30004a7c:	e59f30c4 	ldr	r3, [pc, #196]	; 30004b48 <semaphore_put+0x1b0>
30004a80:	e2411004 	sub	r1, r1, #4
30004a84:	e5930000 	ldr	r0, [r3]
30004a88:	e1a02006 	mov	r2, r6
30004a8c:	eb000c30 	bl	30007b54 <_trace_sem_wake_task>
30004a90:	eaffffe7 	b	30004a34 <semaphore_put+0x9c>
		
	}
	
	RAW_CRITICAL_EXIT();
30004a94:	eb000694 	bl	300064ec <hybrid_int_process>
30004a98:	eaffffee 	b	30004a58 <semaphore_put+0xc0>
	block_list_head = &semaphore_ptr->common_block_obj.block_list;
	
	/*if no block task on this list just return*/
	if (is_list_empty(block_list_head)) {        
	    
		if (semaphore_ptr->count == RAW_SEMAPHORE_COUNT) {
30004a9c:	e5943010 	ldr	r3, [r4, #16]
30004aa0:	e3730001 	cmn	r3, #1
30004aa4:	0a000014 	beq	30004afc <semaphore_put+0x164>

		}
		/*increase resource*/
		semaphore_ptr->count++;                                      
	    
		RAW_CRITICAL_EXIT();
30004aa8:	e5d52000 	ldrb	r2, [r5]
			TRACE_SEMAPHORE_OVERFLOW(raw_task_active, semaphore_ptr);
			return RAW_SEMAPHORE_OVERFLOW;

		}
		/*increase resource*/
		semaphore_ptr->count++;                                      
30004aac:	e2833001 	add	r3, r3, #1
	    
		RAW_CRITICAL_EXIT();
30004ab0:	e3520001 	cmp	r2, #1
			TRACE_SEMAPHORE_OVERFLOW(raw_task_active, semaphore_ptr);
			return RAW_SEMAPHORE_OVERFLOW;

		}
		/*increase resource*/
		semaphore_ptr->count++;                                      
30004ab4:	e5843010 	str	r3, [r4, #16]
	    
		RAW_CRITICAL_EXIT();
30004ab8:	0a00001d 	beq	30004b34 <semaphore_put+0x19c>
30004abc:	eb000c4d 	bl	30007bf8 <OS_CPU_SR_Save>
30004ac0:	e5d53000 	ldrb	r3, [r5]
30004ac4:	e2433001 	sub	r3, r3, #1
30004ac8:	e5c53000 	strb	r3, [r5]
30004acc:	eb000c51 	bl	30007c18 <OS_CPU_SR_Restore>
		
		/*if semphore is registered with notify function just call it*/		
		if (semaphore_ptr->semphore_send_notify) {
30004ad0:	e5943014 	ldr	r3, [r4, #20]
30004ad4:	e3530000 	cmp	r3, #0

			semaphore_ptr->semphore_send_notify(semaphore_ptr);	
30004ad8:	11a00004 	movne	r0, r4
30004adc:	11a0e00f 	movne	lr, pc
30004ae0:	112fff13 	bxne	r3
		}

		TRACE_SEMAPHORE_COUNT_INCREASE(raw_task_active, semaphore_ptr);
30004ae4:	e59f305c 	ldr	r3, [pc, #92]	; 30004b48 <semaphore_put+0x1b0>
30004ae8:	e1a01004 	mov	r1, r4
30004aec:	e5930000 	ldr	r0, [r3]
30004af0:	eb000c18 	bl	30007b58 <_trace_semaphore_count_increase>
30004af4:	e3a00000 	mov	r0, #0
		return RAW_SUCCESS;
30004af8:	eaffffbb 	b	300049ec <semaphore_put+0x54>
	/*if no block task on this list just return*/
	if (is_list_empty(block_list_head)) {        
	    
		if (semaphore_ptr->count == RAW_SEMAPHORE_COUNT) {

			RAW_CRITICAL_EXIT();
30004afc:	e5d53000 	ldrb	r3, [r5]
30004b00:	e3530001 	cmp	r3, #1
30004b04:	0a00000c 	beq	30004b3c <semaphore_put+0x1a4>
30004b08:	eb000c3a 	bl	30007bf8 <OS_CPU_SR_Save>
30004b0c:	e5d53000 	ldrb	r3, [r5]
30004b10:	e2433001 	sub	r3, r3, #1
30004b14:	e5c53000 	strb	r3, [r5]
30004b18:	eb000c3e 	bl	30007c18 <OS_CPU_SR_Restore>
			TRACE_SEMAPHORE_OVERFLOW(raw_task_active, semaphore_ptr);
30004b1c:	e59f3024 	ldr	r3, [pc, #36]	; 30004b48 <semaphore_put+0x1b0>
30004b20:	e1a01004 	mov	r1, r4
30004b24:	e5930000 	ldr	r0, [r3]
30004b28:	eb000c05 	bl	30007b44 <_trace_semaphore_overflow>
30004b2c:	e3a00015 	mov	r0, #21
			return RAW_SEMAPHORE_OVERFLOW;
30004b30:	eaffffad 	b	300049ec <semaphore_put+0x54>

		}
		/*increase resource*/
		semaphore_ptr->count++;                                      
	    
		RAW_CRITICAL_EXIT();
30004b34:	eb00066c 	bl	300064ec <hybrid_int_process>
30004b38:	eaffffe4 	b	30004ad0 <semaphore_put+0x138>
	/*if no block task on this list just return*/
	if (is_list_empty(block_list_head)) {        
	    
		if (semaphore_ptr->count == RAW_SEMAPHORE_COUNT) {

			RAW_CRITICAL_EXIT();
30004b3c:	eb00066a 	bl	300064ec <hybrid_int_process>
30004b40:	eafffff5 	b	30004b1c <semaphore_put+0x184>
30004b44:	300142c0 	andcc	r4, r1, r0, asr #5
30004b48:	30013838 	andcc	r3, r1, r8, lsr r8

30004b4c <raw_semaphore_put_all>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_semaphore_put_all(RAW_SEMAPHORE *semaphore_ptr)
{
30004b4c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)

	#if (RAW_SEMA_FUNCTION_CHECK > 0)
	
	if (semaphore_ptr == 0) {
30004b50:	e2501000 	subs	r1, r0, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_semaphore_put_all(RAW_SEMAPHORE *semaphore_ptr)
{
30004b54:	e24dd00c 	sub	sp, sp, #12

	#if (RAW_SEMA_FUNCTION_CHECK > 0)
	
	if (semaphore_ptr == 0) {
30004b58:	03a00025 	moveq	r0, #37	; 0x25
30004b5c:	0a00000e 	beq	30004b9c <raw_semaphore_put_all+0x50>
	#endif


	#if (CONFIG_RAW_ZERO_INTERRUPT > 0)

	if (raw_int_nesting) {
30004b60:	e59f3040 	ldr	r3, [pc, #64]	; 30004ba8 <raw_semaphore_put_all+0x5c>
30004b64:	e5d33000 	ldrb	r3, [r3]
30004b68:	e3530000 	cmp	r3, #0
30004b6c:	1a000003 	bne	30004b80 <raw_semaphore_put_all+0x34>
		return int_msg_post(RAW_TYPE_SEM_ALL, semaphore_ptr, 0, 0, 0, 0);
	}
	
	#endif
	
	return semaphore_put(semaphore_ptr, WAKE_ALL_SEM);
30004b70:	e3a01001 	mov	r1, #1
	
}
30004b74:	e28dd00c 	add	sp, sp, #12
30004b78:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
		return int_msg_post(RAW_TYPE_SEM_ALL, semaphore_ptr, 0, 0, 0, 0);
	}
	
	#endif
	
	return semaphore_put(semaphore_ptr, WAKE_ALL_SEM);
30004b7c:	eaffff85 	b	30004998 <semaphore_put>


	#if (CONFIG_RAW_ZERO_INTERRUPT > 0)

	if (raw_int_nesting) {
		return int_msg_post(RAW_TYPE_SEM_ALL, semaphore_ptr, 0, 0, 0, 0);
30004b80:	e3a0c000 	mov	ip, #0
30004b84:	e1a0200c 	mov	r2, ip
30004b88:	e3a00005 	mov	r0, #5
30004b8c:	e1a0300c 	mov	r3, ip
30004b90:	e58dc000 	str	ip, [sp]
30004b94:	e58dc004 	str	ip, [sp, #4]
30004b98:	eb0006e7 	bl	3000673c <int_msg_post>
	
	#endif
	
	return semaphore_put(semaphore_ptr, WAKE_ALL_SEM);
	
}
30004b9c:	e28dd00c 	add	sp, sp, #12
30004ba0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
30004ba4:	e12fff1e 	bx	lr
30004ba8:	30013e61 	andcc	r3, r1, r1, ror #28

30004bac <raw_semaphore_put>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_semaphore_put(RAW_SEMAPHORE *semaphore_ptr)
{
30004bac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)

	#if (RAW_SEMA_FUNCTION_CHECK > 0)
	
	if (semaphore_ptr == 0) {
30004bb0:	e3500000 	cmp	r0, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_semaphore_put(RAW_SEMAPHORE *semaphore_ptr)
{
30004bb4:	e24dd00c 	sub	sp, sp, #12

	#if (RAW_SEMA_FUNCTION_CHECK > 0)
	
	if (semaphore_ptr == 0) {
30004bb8:	03a00025 	moveq	r0, #37	; 0x25
30004bbc:	0a000013 	beq	30004c10 <raw_semaphore_put+0x64>
	
	#endif

	#if (CONFIG_RAW_ZERO_INTERRUPT > 0)
	
	if (raw_int_nesting && raw_sched_lock) {
30004bc0:	e59f3054 	ldr	r3, [pc, #84]	; 30004c1c <raw_semaphore_put+0x70>
30004bc4:	e5d33000 	ldrb	r3, [r3]
30004bc8:	e3530000 	cmp	r3, #0
30004bcc:	0a000003 	beq	30004be0 <raw_semaphore_put+0x34>
30004bd0:	e59f3048 	ldr	r3, [pc, #72]	; 30004c20 <raw_semaphore_put+0x74>
30004bd4:	e5d33000 	ldrb	r3, [r3]
30004bd8:	e3530000 	cmp	r3, #0
30004bdc:	1a000003 	bne	30004bf0 <raw_semaphore_put+0x44>
		return int_msg_post(RAW_TYPE_SEM, semaphore_ptr, 0, 0, 0, 0);
	}
	
	#endif
	
	return semaphore_put(semaphore_ptr, WAKE_ONE_SEM);
30004be0:	e3a01000 	mov	r1, #0
}
30004be4:	e28dd00c 	add	sp, sp, #12
30004be8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
		return int_msg_post(RAW_TYPE_SEM, semaphore_ptr, 0, 0, 0, 0);
	}
	
	#endif
	
	return semaphore_put(semaphore_ptr, WAKE_ONE_SEM);
30004bec:	eaffff69 	b	30004998 <semaphore_put>
	#endif

	#if (CONFIG_RAW_ZERO_INTERRUPT > 0)
	
	if (raw_int_nesting && raw_sched_lock) {
		return int_msg_post(RAW_TYPE_SEM, semaphore_ptr, 0, 0, 0, 0);
30004bf0:	e3a0c000 	mov	ip, #0
30004bf4:	e1a01000 	mov	r1, r0
30004bf8:	e1a0200c 	mov	r2, ip
30004bfc:	e3a00004 	mov	r0, #4
30004c00:	e1a0300c 	mov	r3, ip
30004c04:	e58dc000 	str	ip, [sp]
30004c08:	e58dc004 	str	ip, [sp, #4]
30004c0c:	eb0006ca 	bl	3000673c <int_msg_post>
	}
	
	#endif
	
	return semaphore_put(semaphore_ptr, WAKE_ONE_SEM);
}
30004c10:	e28dd00c 	add	sp, sp, #12
30004c14:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
30004c18:	e12fff1e 	bx	lr
30004c1c:	30013e61 	andcc	r3, r1, r1, ror #28
30004c20:	300142c0 	andcc	r4, r1, r0, asr #5

30004c24 <raw_semaphore_create>:
{
	
	
	#if (RAW_SEMA_FUNCTION_CHECK > 0)
	
	if (semaphore_ptr == 0) {
30004c24:	e2503000 	subs	r3, r0, #0
************************************************************************************************************************
*/
#if (CONFIG_RAW_SEMAPHORE > 0)

RAW_U16 raw_semaphore_create(RAW_SEMAPHORE *semaphore_ptr, RAW_U8 *name_ptr, RAW_U32 initial_count)
{
30004c28:	e92d4010 	push	{r4, lr}
	
	
	#if (RAW_SEMA_FUNCTION_CHECK > 0)
	
	if (semaphore_ptr == 0) {
30004c2c:	03a00025 	moveq	r0, #37	; 0x25
30004c30:	0a000010 	beq	30004c78 <raw_semaphore_create+0x54>
		
		return RAW_NULL_OBJECT;
	}

	if (initial_count == 0xffffffff) {
30004c34:	e3720001 	cmn	r2, #1
30004c38:	03a00015 	moveq	r0, #21
30004c3c:	0a00000d 	beq	30004c78 <raw_semaphore_create+0x54>
	/*Init resource*/
	semaphore_ptr->count     = initial_count;                                 
	
	semaphore_ptr->common_block_obj.name = name_ptr;  
	
	semaphore_ptr->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
30004c40:	e3a04000 	mov	r4, #0
	semaphore_ptr->semphore_send_notify = 0;
	
	semaphore_ptr->common_block_obj.object_type = RAW_SEM_OBJ_TYPE;
30004c44:	e3a00011 	mov	r0, #17

	/*Init the list*/
	list_init(&semaphore_ptr->common_block_obj.block_list);
	
	/*Init resource*/
	semaphore_ptr->count     = initial_count;                                 
30004c48:	e5832010 	str	r2, [r3, #16]
	semaphore_ptr->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
	semaphore_ptr->semphore_send_notify = 0;
	
	semaphore_ptr->common_block_obj.object_type = RAW_SEM_OBJ_TYPE;

	TRACE_SEMAPHORE_CREATE(raw_task_active, semaphore_ptr);
30004c4c:	e59f202c 	ldr	r2, [pc, #44]	; 30004c80 <raw_semaphore_create+0x5c>
	semaphore_ptr->common_block_obj.name = name_ptr;  
	
	semaphore_ptr->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
	semaphore_ptr->semphore_send_notify = 0;
	
	semaphore_ptr->common_block_obj.object_type = RAW_SEM_OBJ_TYPE;
30004c50:	e5c3000d 	strb	r0, [r3, #13]
	/*Init resource*/
	semaphore_ptr->count     = initial_count;                                 
	
	semaphore_ptr->common_block_obj.name = name_ptr;  
	
	semaphore_ptr->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
30004c54:	e5c3400c 	strb	r4, [r3, #12]
	list_init(&semaphore_ptr->common_block_obj.block_list);
	
	/*Init resource*/
	semaphore_ptr->count     = initial_count;                                 
	
	semaphore_ptr->common_block_obj.name = name_ptr;  
30004c58:	e5831008 	str	r1, [r3, #8]
	semaphore_ptr->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
	semaphore_ptr->semphore_send_notify = 0;
	
	semaphore_ptr->common_block_obj.object_type = RAW_SEM_OBJ_TYPE;

	TRACE_SEMAPHORE_CREATE(raw_task_active, semaphore_ptr);
30004c5c:	e5920000 	ldr	r0, [r2]
/*
 * List initialization
 */
RAW_INLINE void list_init(LIST *list_head)
{
	list_head->next = list_head;
30004c60:	e5833000 	str	r3, [r3]
	list_head->previous = list_head;
30004c64:	e5833004 	str	r3, [r3, #4]
	semaphore_ptr->count     = initial_count;                                 
	
	semaphore_ptr->common_block_obj.name = name_ptr;  
	
	semaphore_ptr->common_block_obj.block_way = RAW_BLOCKED_WAY_PRIO;
	semaphore_ptr->semphore_send_notify = 0;
30004c68:	e5834014 	str	r4, [r3, #20]
	
	semaphore_ptr->common_block_obj.object_type = RAW_SEM_OBJ_TYPE;

	TRACE_SEMAPHORE_CREATE(raw_task_active, semaphore_ptr);
30004c6c:	e1a01003 	mov	r1, r3
30004c70:	eb000bb2 	bl	30007b40 <_trace_semaphore_create>
30004c74:	e1a00004 	mov	r0, r4
	
	return RAW_SUCCESS;

}
30004c78:	e8bd4010 	pop	{r4, lr}
30004c7c:	e12fff1e 	bx	lr
30004c80:	30013838 	andcc	r3, r1, r8, lsr r8

30004c84 <raw_system_time_get>:
*             
************************************************************************************************************************
*/

RAW_TICK_TYPE  raw_system_time_get(void)
{
30004c84:	e59f3004 	ldr	r3, [pc, #4]	; 30004c90 <raw_system_time_get+0xc>

	return raw_tick_count;

}
30004c88:	e5930000 	ldr	r0, [r3]
30004c8c:	e12fff1e 	bx	lr
30004c90:	30013834 	andcc	r3, r1, r4, lsr r8

30004c94 <block_state_post_process>:
	RAW_U16 error_status = 0;
	
	
	state = task_ptr->block_status;
	
	switch (state) {
30004c94:	e5d03051 	ldrb	r3, [r0, #81]	; 0x51
30004c98:	e3530003 	cmp	r3, #3
30004c9c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
30004ca0:	ea000005 	b	30004cbc <block_state_post_process+0x28>
30004ca4:	30004cb4 	undefined instruction 0x30004cb4
30004ca8:	30004cd4 	ldrdcc	r4, [r0], -r4
30004cac:	30004ccc 	andcc	r4, r0, ip, asr #25
30004cb0:	30004cc4 	andcc	r4, r0, r4, asr #25
		
		case RAW_B_OK:                             /* We got the message */
			/*if deal with msg*/	
			if (msg) {
30004cb4:	e3510000 	cmp	r1, #0
30004cb8:	1a000007 	bne	30004cdc <block_state_post_process+0x48>
			break;

		case RAW_B_TIMEOUT:                        /* Indicate that it is timeout */

			error_status = RAW_BLOCK_TIMEOUT;
			break;
30004cbc:	e3a00000 	mov	r0, #0
			
	}

	return error_status;
	
}
30004cc0:	e12fff1e 	bx	lr
			break;

		case RAW_B_TIMEOUT:                        /* Indicate that it is timeout */

			error_status = RAW_BLOCK_TIMEOUT;
			break;
30004cc4:	e3a0000a 	mov	r0, #10
30004cc8:	e12fff1e 	bx	lr
	switch (state) {
		
		case RAW_B_OK:                             /* We got the message */
			/*if deal with msg*/	
			if (msg) {
				*msg = task_ptr->msg;
30004ccc:	e3a00009 	mov	r0, #9
			break;

		case RAW_B_TIMEOUT:                        /* Indicate that it is timeout */

			error_status = RAW_BLOCK_TIMEOUT;
			break;
30004cd0:	e12fff1e 	bx	lr
	RAW_U16 error_status = 0;
	
	
	state = task_ptr->block_status;
	
	switch (state) {
30004cd4:	e3a00008 	mov	r0, #8
30004cd8:	e12fff1e 	bx	lr
		
		case RAW_B_OK:                             /* We got the message */
			/*if deal with msg*/	
			if (msg) {
				*msg = task_ptr->msg;
30004cdc:	e5903044 	ldr	r3, [r0, #68]	; 0x44
30004ce0:	e3a00000 	mov	r0, #0
30004ce4:	e5813000 	str	r3, [r1]
30004ce8:	e12fff1e 	bx	lr

30004cec <raw_memset>:

RAW_VOID *raw_memset(RAW_VOID *src, RAW_U8 byte, RAW_U32 count)
{
	RAW_U8 *xs = src;

	while (count--) {
30004cec:	e3520000 	cmp	r2, #0
30004cf0:	012fff1e 	bxeq	lr
30004cf4:	e3a03000 	mov	r3, #0
		
		*xs++ = byte;
30004cf8:	e7c01003 	strb	r1, [r0, r3]
30004cfc:	e2833001 	add	r3, r3, #1

RAW_VOID *raw_memset(RAW_VOID *src, RAW_U8 byte, RAW_U32 count)
{
	RAW_U8 *xs = src;

	while (count--) {
30004d00:	e1530002 	cmp	r3, r2
30004d04:	1afffffb 	bne	30004cf8 <raw_memset+0xc>
		
		*xs++ = byte;
	}
	
	return src;
}
30004d08:	e12fff1e 	bx	lr

30004d0c <raw_memcpy>:
RAW_VOID *raw_memcpy(RAW_VOID *dest, const RAW_VOID *src, RAW_U32 count)
{
	RAW_U8 *tmp = dest;
	const RAW_U8 *s = src;

	while (count--) {
30004d0c:	e3520000 	cmp	r2, #0
30004d10:	012fff1e 	bxeq	lr
30004d14:	e3a03000 	mov	r3, #0
		
		*tmp++ = *s++;
30004d18:	e7d1c003 	ldrb	ip, [r1, r3]
30004d1c:	e7c0c003 	strb	ip, [r0, r3]
30004d20:	e2833001 	add	r3, r3, #1
RAW_VOID *raw_memcpy(RAW_VOID *dest, const RAW_VOID *src, RAW_U32 count)
{
	RAW_U8 *tmp = dest;
	const RAW_U8 *s = src;

	while (count--) {
30004d24:	e1530002 	cmp	r3, r2
30004d28:	1afffffa 	bne	30004d18 <raw_memcpy+0xc>
		
		*tmp++ = *s++;
	}
	
	return dest;
}
30004d2c:	e12fff1e 	bx	lr

30004d30 <bit_search_first_one>:
	cp = base;
	/*caculate word position to bitmap*/
	cp += offset >> 5;
	
	/* clear all bit before offset(not include offset bit), do not need do this if offset is 32, 64, 96, etc......*/
	if (offset & 31) {
30004d30:	e211301f 	ands	r3, r1, #31
	register RAW_U32 *cp, v;
	register RAW_S32 position;

	cp = base;
	/*caculate word position to bitmap*/
	cp += offset >> 5;
30004d34:	e1a012a1 	lsr	r1, r1, #5

#if (RAW_CPU_WIDTH_32 > 0)

/*For 32 bit cpu*/
RAW_S32 bit_search_first_one(RAW_U32 *base, RAW_U8 offset, RAW_S32 width)
{
30004d38:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	register RAW_U32 *cp, v;
	register RAW_S32 position;

	cp = base;
	/*caculate word position to bitmap*/
	cp += offset >> 5;
30004d3c:	e0804101 	add	r4, r0, r1, lsl #2
	
	/* clear all bit before offset(not include offset bit), do not need do this if offset is 32, 64, 96, etc......*/
	if (offset & 31) {
		
		#if (CONFIG_RAW_LITTLE_ENDIAN > 0)
		v = *cp & ~(((RAW_U32)1 << (offset & 31)) - 1);
30004d40:	17901101 	ldrne	r1, [r0, r1, lsl #2]
30004d44:	13e0c000 	mvnne	ip, #0
30004d48:	1001c31c 	andne	ip, r1, ip, lsl r3
		#endif
	} 

	else {
		
		v = *cp;
30004d4c:	0790c101 	ldreq	ip, [r0, r1, lsl #2]
	}

	position = 0;
	while (position < width) {
30004d50:	e3520000 	cmp	r2, #0
30004d54:	da00000e 	ble	30004d94 <bit_search_first_one+0x64>
		if (v){
30004d58:	e35c0000 	cmp	ip, #0
				++position;
			}
					
			#endif
		
			if (position < width) {
30004d5c:	01a01004 	moveq	r1, r4
30004d60:	01a0000c 	moveq	r0, ip
			if (position) {
				
				position += 32;
			} else {
			
				position = 32 - (offset & 31);
30004d64:	02633020 	rsbeq	r3, r3, #32
		v = *cp;
	}

	position = 0;
	while (position < width) {
		if (v){
30004d68:	0a000003 	beq	30004d7c <bit_search_first_one+0x4c>
30004d6c:	ea00000b 	b	30004da0 <bit_search_first_one+0x70>
30004d70:	e35c0000 	cmp	ip, #0
30004d74:	e2811004 	add	r1, r1, #4
30004d78:	1a000009 	bne	30004da4 <bit_search_first_one+0x74>
		} 

		else {  
			
			/*Skip one world*/
			if (position) {
30004d7c:	e3500000 	cmp	r0, #0
				
				position += 32;
30004d80:	12800020 	addne	r0, r0, #32
			} else {
			
				position = 32 - (offset & 31);
30004d84:	01a00003 	moveq	r0, r3
		
		v = *cp;
	}

	position = 0;
	while (position < width) {
30004d88:	e1500002 	cmp	r0, r2
			} else {
			
				position = 32 - (offset & 31);
			}
		
			v = *++cp;
30004d8c:	e591c004 	ldr	ip, [r1, #4]
		
		v = *cp;
	}

	position = 0;
	while (position < width) {
30004d90:	bafffff6 	blt	30004d70 <bit_search_first_one+0x40>
30004d94:	e3e00000 	mvn	r0, #0
			v = *++cp;
		}
	}

    return -1;
}
30004d98:	e8bd0010 	pop	{r4}
30004d9c:	e12fff1e 	bx	lr
		if (v){

			 /*Set right position first time*/
			if (!position) { 
				
				position -= (offset & 31);
30004da0:	e2630000 	rsb	r0, r3, #0
			}
					
			#if  (CONFIG_RAW_LITTLE_ENDIAN > 0)

			if (!(v & 0xffff)) {
30004da4:	e1a0380c 	lsl	r3, ip, #16
30004da8:	e1a03823 	lsr	r3, r3, #16
30004dac:	e3530000 	cmp	r3, #0
				v >>= 16;
30004db0:	01a0c82c 	lsreq	ip, ip, #16
				position += 16;
30004db4:	02800010 	addeq	r0, r0, #16
			}
			if (!(v & 0xff)) {
30004db8:	e31c00ff 	tst	ip, #255	; 0xff
				v >>= 8;
30004dbc:	01a0c42c 	lsreq	ip, ip, #8
				position += 8;
30004dc0:	02800008 	addeq	r0, r0, #8
			}
			if (!(v & 0xf)) {
30004dc4:	e31c000f 	tst	ip, #15
				v >>= 4;
30004dc8:	01a0c22c 	lsreq	ip, ip, #4
				position += 4;
30004dcc:	02800004 	addeq	r0, r0, #4
			}
			if (!(v & 0x3)) {
30004dd0:	e31c0003 	tst	ip, #3
				v >>= 2;
30004dd4:	01a0c12c 	lsreq	ip, ip, #2
				position += 2;
30004dd8:	02800002 	addeq	r0, r0, #2
			}
			if (!(v & 0x1)) {
30004ddc:	e31c0001 	tst	ip, #1
				++position;
30004de0:	02800001 	addeq	r0, r0, #1
				++position;
			}
					
			#endif
		
			if (position < width) {
30004de4:	e1500002 	cmp	r0, r2
30004de8:	baffffea 	blt	30004d98 <bit_search_first_one+0x68>
30004dec:	eaffffe8 	b	30004d94 <bit_search_first_one+0x64>

30004df0 <raw_enter_interrupt>:
* you must invoke raw_enter_interrupt and raw_finish_int in pair.
*             
************************************************************************************************************************
*/
RAW_U16 raw_enter_interrupt(void)
{
30004df0:	e92d4010 	push	{r4, lr}
	RAW_SR_ALLOC();

	if (raw_int_nesting >= INT_NESTED_LEVEL) {  
30004df4:	e59f402c 	ldr	r4, [pc, #44]	; 30004e28 <raw_enter_interrupt+0x38>
30004df8:	e5d43000 	ldrb	r3, [r4]
30004dfc:	e3530063 	cmp	r3, #99	; 0x63
30004e00:	83a00041 	movhi	r0, #65	; 0x41
30004e04:	8a000005 	bhi	30004e20 <raw_enter_interrupt+0x30>
		
		return RAW_EXCEED_INT_NESTED_LEVEL;                                                                                      
	}

	RAW_CPU_DISABLE();
30004e08:	eb000b7a 	bl	30007bf8 <OS_CPU_SR_Save>
	raw_int_nesting++; 
30004e0c:	e5d43000 	ldrb	r3, [r4]
30004e10:	e2833001 	add	r3, r3, #1
30004e14:	e5c43000 	strb	r3, [r4]
	RAW_CPU_ENABLE();
30004e18:	eb000b7e 	bl	30007c18 <OS_CPU_SR_Restore>
30004e1c:	e3a00000 	mov	r0, #0

	return RAW_SUCCESS;
}
30004e20:	e8bd4010 	pop	{r4, lr}
30004e24:	e12fff1e 	bx	lr
30004e28:	30013e61 	andcc	r3, r1, r1, ror #28

30004e2c <raw_system_time_set>:
* Note(s)    
*             
************************************************************************************************************************
*/
RAW_U16 raw_system_time_set(RAW_TICK_TYPE time)
{
30004e2c:	e92d4070 	push	{r4, r5, r6, lr}
	RAW_SR_ALLOC();

	if (raw_int_nesting) {
30004e30:	e59f306c 	ldr	r3, [pc, #108]	; 30004ea4 <raw_system_time_set+0x78>
* Note(s)    
*             
************************************************************************************************************************
*/
RAW_U16 raw_system_time_set(RAW_TICK_TYPE time)
{
30004e34:	e1a06000 	mov	r6, r0
	RAW_SR_ALLOC();

	if (raw_int_nesting) {
30004e38:	e5d34000 	ldrb	r4, [r3]
30004e3c:	e3540000 	cmp	r4, #0
30004e40:	13a00027 	movne	r0, #39	; 0x27
30004e44:	0a000001 	beq	30004e50 <raw_system_time_set+0x24>
	raw_tick_count = time;
	RAW_CRITICAL_EXIT();

	return RAW_SUCCESS;

}
30004e48:	e8bd4070 	pop	{r4, r5, r6, lr}
30004e4c:	e12fff1e 	bx	lr
	if (raw_int_nesting) {

		return RAW_NOT_CALLED_BY_ISR;
	}
	
	RAW_CRITICAL_ENTER();
30004e50:	e59f5050 	ldr	r5, [pc, #80]	; 30004ea8 <raw_system_time_set+0x7c>
30004e54:	eb000b67 	bl	30007bf8 <OS_CPU_SR_Save>
30004e58:	e5d53000 	ldrb	r3, [r5]
30004e5c:	e2833001 	add	r3, r3, #1
30004e60:	e5c53000 	strb	r3, [r5]
30004e64:	eb000b6b 	bl	30007c18 <OS_CPU_SR_Restore>
	raw_tick_count = time;
	RAW_CRITICAL_EXIT();
30004e68:	e5d53000 	ldrb	r3, [r5]
30004e6c:	e3530001 	cmp	r3, #1

		return RAW_NOT_CALLED_BY_ISR;
	}
	
	RAW_CRITICAL_ENTER();
	raw_tick_count = time;
30004e70:	e59f3034 	ldr	r3, [pc, #52]	; 30004eac <raw_system_time_set+0x80>
30004e74:	e5836000 	str	r6, [r3]
	RAW_CRITICAL_EXIT();
30004e78:	0a000006 	beq	30004e98 <raw_system_time_set+0x6c>
30004e7c:	eb000b5d 	bl	30007bf8 <OS_CPU_SR_Save>
30004e80:	e5d53000 	ldrb	r3, [r5]
30004e84:	e2433001 	sub	r3, r3, #1
30004e88:	e5c53000 	strb	r3, [r5]
30004e8c:	eb000b61 	bl	30007c18 <OS_CPU_SR_Restore>
30004e90:	e1a00004 	mov	r0, r4
30004e94:	eaffffeb 	b	30004e48 <raw_system_time_set+0x1c>
30004e98:	eb000593 	bl	300064ec <hybrid_int_process>
30004e9c:	e1a00004 	mov	r0, r4
30004ea0:	eaffffe8 	b	30004e48 <raw_system_time_set+0x1c>
30004ea4:	30013e61 	andcc	r3, r1, r1, ror #28
30004ea8:	300142c0 	andcc	r4, r1, r0, asr #5
30004eac:	30013834 	andcc	r3, r1, r4, lsr r8

30004eb0 <raw_time_tick>:
*
*             
************************************************************************************************************************
*/
RAW_VOID raw_time_tick(void)
{
30004eb0:	e92d4010 	push	{r4, lr}
	}

	#endif
	
	#if (CONFIG_RAW_USER_HOOK > 0)
	raw_tick_hook();
30004eb4:	eb000b0e 	bl	30007af4 <raw_tick_hook>
	#endif

	/*update system time to calculate whether task timeout happens*/
	#if (CONFIG_RAW_TICK_TASK > 0)
	raw_task_semaphore_put(&tick_task_obj);
30004eb8:	e59f001c 	ldr	r0, [pc, #28]	; 30004edc <raw_time_tick+0x2c>
30004ebc:	eb0006a7 	bl	30006960 <raw_task_semaphore_put>
	tick_list_update();
	#endif

	/*update task time slice if possible*/
	#if (CONFIG_SCHED_FIFO_RR > 0)
	calculate_time_slice(raw_task_active->priority);
30004ec0:	e59f3018 	ldr	r3, [pc, #24]	; 30004ee0 <raw_time_tick+0x30>
30004ec4:	e5933000 	ldr	r3, [r3]
30004ec8:	e5d30019 	ldrb	r0, [r3, #25]
30004ecc:	ebfffcfc 	bl	300042c4 <calculate_time_slice>
	#endif

	/*inform the timer task to update software timer*/	
	#if (CONFIG_RAW_TIMER > 0)
	call_timer_task();
30004ed0:	eb0007bd 	bl	30006dcc <call_timer_task>
	#endif
}
30004ed4:	e8bd4010 	pop	{r4, lr}
30004ed8:	e12fff1e 	bx	lr
30004edc:	300137c8 	andcc	r3, r1, r8, asr #15
30004ee0:	30013838 	andcc	r3, r1, r8, lsr r8

30004ee4 <raw_finish_int>:
* Note(s)    
*             
************************************************************************************************************************
*/
RAW_VOID raw_finish_int(void)
{
30004ee4:	e92d4010 	push	{r4, lr}

	RAW_SR_ALLOC();

	RAW_CPU_DISABLE();
30004ee8:	eb000b42 	bl	30007bf8 <OS_CPU_SR_Save>

	/*prevent raw_int_nesting 0 enter, 0 means it is processed*/
	if (raw_int_nesting == 0) {
30004eec:	e59f3074 	ldr	r3, [pc, #116]	; 30004f68 <raw_finish_int+0x84>
RAW_VOID raw_finish_int(void)
{

	RAW_SR_ALLOC();

	RAW_CPU_DISABLE();
30004ef0:	e1a04000 	mov	r4, r0

	/*prevent raw_int_nesting 0 enter, 0 means it is processed*/
	if (raw_int_nesting == 0) {
30004ef4:	e5d32000 	ldrb	r2, [r3]
30004ef8:	e3520000 	cmp	r2, #0
30004efc:	0a000013 	beq	30004f50 <raw_finish_int+0x6c>
		RAW_CPU_ENABLE();                                  
		return;
	}

	raw_int_nesting--;
30004f00:	e2422001 	sub	r2, r2, #1
30004f04:	e20220ff 	and	r2, r2, #255	; 0xff
	/*if still interrupt nested just return */
	if (raw_int_nesting) {              
30004f08:	e3520000 	cmp	r2, #0
	if (raw_int_nesting == 0) {
		RAW_CPU_ENABLE();                                  
		return;
	}

	raw_int_nesting--;
30004f0c:	e5c32000 	strb	r2, [r3]
	/*if still interrupt nested just return */
	if (raw_int_nesting) {              
30004f10:	1a00000e 	bne	30004f50 <raw_finish_int+0x6c>
		RAW_CPU_ENABLE();                                  
		return;
	}
	/*if system is locked then just return*/
	if (raw_sched_lock) { 
30004f14:	e59f3050 	ldr	r3, [pc, #80]	; 30004f6c <raw_finish_int+0x88>
30004f18:	e5d33000 	ldrb	r3, [r3]
30004f1c:	e3530000 	cmp	r3, #0
30004f20:	1a00000a 	bne	30004f50 <raw_finish_int+0x6c>
		/*if interrupt happen here, it may cause raw_int_nesting equal 0*/
		return;
	}

	/*get the highest task*/
	get_ready_task(&raw_ready_queue);
30004f24:	e59f0044 	ldr	r0, [pc, #68]	; 30004f70 <raw_finish_int+0x8c>
30004f28:	ebfff54f 	bl	3000246c <get_ready_task>

	/*if the current task is still the highest task then we do not need to have interrupt switch*/ 
	if (high_ready_obj == raw_task_active) {                 
30004f2c:	e59f3040 	ldr	r3, [pc, #64]	; 30004f74 <raw_finish_int+0x90>
30004f30:	e5931000 	ldr	r1, [r3]
30004f34:	e59f303c 	ldr	r3, [pc, #60]	; 30004f78 <raw_finish_int+0x94>
30004f38:	e5930000 	ldr	r0, [r3]
30004f3c:	e1510000 	cmp	r1, r0
30004f40:	0a000005 	beq	30004f5c <raw_finish_int+0x78>
		RAW_CPU_ENABLE();                                     
		return;
	}

	TRACE_INT_TASK_SWITCH(raw_task_active, high_ready_obj);
30004f44:	eb000af3 	bl	30007b18 <_trace_int_task_switch>
	
	/*switch to the highest task, this function is cpu related, thus need to be ported*/
	raw_int_switch();  
30004f48:	eb000b4e 	bl	30007c88 <raw_int_switch>

	RAW_CPU_ENABLE();  
30004f4c:	e1a00004 	mov	r0, r4
30004f50:	eb000b30 	bl	30007c18 <OS_CPU_SR_Restore>

}
30004f54:	e8bd4010 	pop	{r4, lr}
30004f58:	e12fff1e 	bx	lr
	/*get the highest task*/
	get_ready_task(&raw_ready_queue);

	/*if the current task is still the highest task then we do not need to have interrupt switch*/ 
	if (high_ready_obj == raw_task_active) {                 
		RAW_CPU_ENABLE();                                     
30004f5c:	e1a00004 	mov	r0, r4
30004f60:	eb000b2c 	bl	30007c18 <OS_CPU_SR_Restore>
		return;
30004f64:	eafffffa 	b	30004f54 <raw_finish_int+0x70>
30004f68:	30013e61 	andcc	r3, r1, r1, ror #28
30004f6c:	300142c0 	andcc	r4, r1, r0, asr #5
30004f70:	30013c4c 	andcc	r3, r1, ip, asr #24
30004f74:	30013e64 	andcc	r3, r1, r4, ror #28
30004f78:	30013838 	andcc	r3, r1, r8, lsr r8

30004f7c <raw_task_stack_check>:
	PORT_STACK  *task_stack;
	RAW_U32 free_stk = 0;

	#if (RAW_TASK_FUNCTION_CHECK > 0)
	
	if (task_obj == 0) {
30004f7c:	e3500000 	cmp	r0, #0
30004f80:	03a00025 	moveq	r0, #37	; 0x25
30004f84:	012fff1e 	bxeq	lr
		return RAW_NULL_OBJECT;
	}

	if (free_stack == 0) {
30004f88:	e3510000 	cmp	r1, #0
30004f8c:	03a00023 	moveq	r0, #35	; 0x23
30004f90:	012fff1e 	bxeq	lr

	#endif

	#if (RAW_CPU_STACK_DOWN > 0)
	
	task_stack = task_obj->task_stack_base;  
30004f94:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
	
	while (*task_stack++ == 0) {                         
30004f98:	e5903000 	ldr	r3, [r0]
30004f9c:	e3530000 	cmp	r3, #0
30004fa0:	13a03000 	movne	r3, #0
30004fa4:	1a000003 	bne	30004fb8 <raw_task_stack_check+0x3c>
		free_stk++;
30004fa8:	e2833001 	add	r3, r3, #1

	#if (RAW_CPU_STACK_DOWN > 0)
	
	task_stack = task_obj->task_stack_base;  
	
	while (*task_stack++ == 0) {                         
30004fac:	e7902103 	ldr	r2, [r0, r3, lsl #2]
30004fb0:	e3520000 	cmp	r2, #0
30004fb4:	0afffffb 	beq	30004fa8 <raw_task_stack_check+0x2c>
		free_stk++;
	}

	#endif
	
	*free_stack = free_stk;
30004fb8:	e5813000 	str	r3, [r1]
30004fbc:	e3a00000 	mov	r0, #0

	return RAW_SUCCESS;
	 

}
30004fc0:	e12fff1e 	bx	lr

30004fc4 <raw_get_task_user_point>:
	RAW_CPU_ENABLE();
}


RAW_VOID *raw_get_task_user_point(RAW_TASK_OBJ *task_ptr, RAW_U32 point_position)
{
30004fc4:	e0801101 	add	r1, r0, r1, lsl #2
	return task_ptr->user_data_pointer[point_position];	
}
30004fc8:	e591000c 	ldr	r0, [r1, #12]
30004fcc:	e12fff1e 	bx	lr

30004fd0 <raw_task_identify>:
*
*             
************************************************************************************************************************
*/
RAW_TASK_OBJ *raw_task_identify(void)
{
30004fd0:	e59f3004 	ldr	r3, [pc, #4]	; 30004fdc <raw_task_identify+0xc>

	return raw_task_active;

}
30004fd4:	e5930000 	ldr	r0, [r3]
30004fd8:	e12fff1e 	bx	lr
30004fdc:	30013838 	andcc	r3, r1, r8, lsr r8

30004fe0 <raw_get_system_global_space>:
	#endif
	
	
	return data_space;
	
}
30004fe0:	e59f0000 	ldr	r0, [pc, #0]	; 30004fe8 <raw_get_system_global_space+0x8>
30004fe4:	e12fff1e 	bx	lr
30004fe8:	00001791 	muleq	r0, r1, r7

30004fec <raw_set_task_user_point>:
************************************************************************************************************************
*/
#if (CONFIG_USER_DATA_POINTER > 0)

RAW_VOID raw_set_task_user_point(RAW_TASK_OBJ *task_ptr, RAW_VOID *user_point, RAW_U32 point_position)
{
30004fec:	e92d4070 	push	{r4, r5, r6, lr}
30004ff0:	e1a05002 	mov	r5, r2
30004ff4:	e1a04000 	mov	r4, r0
30004ff8:	e1a06001 	mov	r6, r1
	RAW_SR_ALLOC();

	RAW_CPU_DISABLE();
	task_ptr->user_data_pointer[point_position] = user_point;
30004ffc:	e0844105 	add	r4, r4, r5, lsl #2

RAW_VOID raw_set_task_user_point(RAW_TASK_OBJ *task_ptr, RAW_VOID *user_point, RAW_U32 point_position)
{
	RAW_SR_ALLOC();

	RAW_CPU_DISABLE();
30005000:	eb000afc 	bl	30007bf8 <OS_CPU_SR_Save>
	task_ptr->user_data_pointer[point_position] = user_point;
30005004:	e584600c 	str	r6, [r4, #12]
	RAW_CPU_ENABLE();
30005008:	eb000b02 	bl	30007c18 <OS_CPU_SR_Restore>
}
3000500c:	e8bd4070 	pop	{r4, r5, r6, lr}
30005010:	e12fff1e 	bx	lr

30005014 <raw_disable_sche>:
*/

#if (CONFIG_RAW_SYSTEM_PREEMPTABLE > 0)

RAW_U16 raw_disable_sche(void)
{
30005014:	e92d4070 	push	{r4, r5, r6, lr}
	RAW_SR_ALLOC();

	#if (RAW_TASK_FUNCTION_CHECK > 0)
	
	if (raw_int_nesting) {
30005018:	e59f3044 	ldr	r3, [pc, #68]	; 30005064 <raw_disable_sche+0x50>
3000501c:	e5d34000 	ldrb	r4, [r3]
30005020:	e3540000 	cmp	r4, #0
30005024:	13a00027 	movne	r0, #39	; 0x27
30005028:	1a000004 	bne	30005040 <raw_disable_sche+0x2c>

		return RAW_NOT_CALLED_BY_ISR;
	}


	if (raw_sched_lock >= 250u)  {
3000502c:	e59f5034 	ldr	r5, [pc, #52]	; 30005068 <raw_disable_sche+0x54>
30005030:	e5d53000 	ldrb	r3, [r5]
30005034:	e35300f9 	cmp	r3, #249	; 0xf9
30005038:	83a0000f 	movhi	r0, #15
3000503c:	9a000001 	bls	30005048 <raw_disable_sche+0x34>
	RAW_CPU_DISABLE();
	raw_sched_lock++;
	RAW_CPU_ENABLE();
	
	return RAW_SUCCESS;
}
30005040:	e8bd4070 	pop	{r4, r5, r6, lr}
30005044:	e12fff1e 	bx	lr
		
	}
	
	#endif
	
	RAW_CPU_DISABLE();
30005048:	eb000aea 	bl	30007bf8 <OS_CPU_SR_Save>
	raw_sched_lock++;
3000504c:	e5d53000 	ldrb	r3, [r5]
30005050:	e2833001 	add	r3, r3, #1
30005054:	e5c53000 	strb	r3, [r5]
	RAW_CPU_ENABLE();
30005058:	eb000aee 	bl	30007c18 <OS_CPU_SR_Restore>
3000505c:	e1a00004 	mov	r0, r4
	
	return RAW_SUCCESS;
30005060:	eafffff6 	b	30005040 <raw_disable_sche+0x2c>
30005064:	30013e61 	andcc	r3, r1, r1, ror #28
30005068:	300142c0 	andcc	r4, r1, r0, asr #5

3000506c <raw_get_sched_way>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_get_sched_way(RAW_TASK_OBJ *task_ptr, RAW_U8 *policy_ptr)
{
3000506c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	RAW_SR_ALLOC();
	
	#if (RAW_TASK_FUNCTION_CHECK > 0)

	if (task_ptr == 0) {
30005070:	e2504000 	subs	r4, r0, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_get_sched_way(RAW_TASK_OBJ *task_ptr, RAW_U8 *policy_ptr)
{
30005074:	e1a05001 	mov	r5, r1
	RAW_SR_ALLOC();
	
	#if (RAW_TASK_FUNCTION_CHECK > 0)

	if (task_ptr == 0) {
30005078:	0a00001a 	beq	300050e8 <raw_get_sched_way+0x7c>
		return RAW_NULL_OBJECT;
	}


	if (policy_ptr == 0) {
3000507c:	e3510000 	cmp	r1, #0
30005080:	0a000018 	beq	300050e8 <raw_get_sched_way+0x7c>

		return RAW_NULL_OBJECT;
	}

	if (raw_int_nesting) {
30005084:	e59f3070 	ldr	r3, [pc, #112]	; 300050fc <raw_get_sched_way+0x90>
30005088:	e5d36000 	ldrb	r6, [r3]
3000508c:	e3560000 	cmp	r6, #0
30005090:	13a00027 	movne	r0, #39	; 0x27
30005094:	0a000001 	beq	300050a0 <raw_get_sched_way+0x34>
	*policy_ptr = task_ptr->sched_way;
	RAW_CRITICAL_EXIT();

	return RAW_SUCCESS;
	
}
30005098:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
3000509c:	e12fff1e 	bx	lr
	}
	
	#endif


	RAW_CRITICAL_ENTER();
300050a0:	e59f7058 	ldr	r7, [pc, #88]	; 30005100 <raw_get_sched_way+0x94>
300050a4:	eb000ad3 	bl	30007bf8 <OS_CPU_SR_Save>
300050a8:	e5d73000 	ldrb	r3, [r7]
300050ac:	e2833001 	add	r3, r3, #1
300050b0:	e5c73000 	strb	r3, [r7]
300050b4:	eb000ad7 	bl	30007c18 <OS_CPU_SR_Restore>
	*policy_ptr = task_ptr->sched_way;
300050b8:	e5d43018 	ldrb	r3, [r4, #24]
300050bc:	e5c53000 	strb	r3, [r5]
	RAW_CRITICAL_EXIT();
300050c0:	e5d73000 	ldrb	r3, [r7]
300050c4:	e3530001 	cmp	r3, #1
300050c8:	0a000008 	beq	300050f0 <raw_get_sched_way+0x84>
300050cc:	eb000ac9 	bl	30007bf8 <OS_CPU_SR_Save>
300050d0:	e5d73000 	ldrb	r3, [r7]
300050d4:	e2433001 	sub	r3, r3, #1
300050d8:	e5c73000 	strb	r3, [r7]
300050dc:	eb000acd 	bl	30007c18 <OS_CPU_SR_Restore>
300050e0:	e1a00006 	mov	r0, r6
300050e4:	eaffffeb 	b	30005098 <raw_get_sched_way+0x2c>
300050e8:	e3a00025 	mov	r0, #37	; 0x25
300050ec:	eaffffe9 	b	30005098 <raw_get_sched_way+0x2c>
300050f0:	eb0004fd 	bl	300064ec <hybrid_int_process>
300050f4:	e1a00006 	mov	r0, r6
300050f8:	eaffffe6 	b	30005098 <raw_get_sched_way+0x2c>
300050fc:	30013e61 	andcc	r3, r1, r1, ror #28
30005100:	300142c0 	andcc	r4, r1, r0, asr #5

30005104 <raw_set_sched_way>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_set_sched_way(RAW_TASK_OBJ *task_ptr, RAW_U8 policy)
{
30005104:	e92d4070 	push	{r4, r5, r6, lr}
	RAW_SR_ALLOC();
	
	#if (RAW_TASK_FUNCTION_CHECK > 0)

	if (task_ptr == 0) {
30005108:	e2504000 	subs	r4, r0, #0
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_set_sched_way(RAW_TASK_OBJ *task_ptr, RAW_U8 policy)
{
3000510c:	e24dd008 	sub	sp, sp, #8
	RAW_SR_ALLOC();
	
	#if (RAW_TASK_FUNCTION_CHECK > 0)

	if (task_ptr == 0) {
30005110:	03a00025 	moveq	r0, #37	; 0x25
30005114:	0a000003 	beq	30005128 <raw_set_sched_way+0x24>
		return RAW_NULL_OBJECT;
	}


	if ((policy != SCHED_FIFO) && (policy != SCHED_RR)) {
30005118:	e2413001 	sub	r3, r1, #1
3000511c:	e3530001 	cmp	r3, #1
30005120:	83a00026 	movhi	r0, #38	; 0x26
30005124:	9a000002 	bls	30005134 <raw_set_sched_way+0x30>
	task_ptr->sched_way =  policy;
	RAW_CRITICAL_EXIT();

	return RAW_SUCCESS;
	
}
30005128:	e28dd008 	add	sp, sp, #8
3000512c:	e8bd4070 	pop	{r4, r5, r6, lr}
30005130:	e12fff1e 	bx	lr
	if ((policy != SCHED_FIFO) && (policy != SCHED_RR)) {

		return RAW_INVALID_SCHED_WAY;
	}

	if (raw_int_nesting) {
30005134:	e59f3064 	ldr	r3, [pc, #100]	; 300051a0 <raw_set_sched_way+0x9c>
30005138:	e5d35000 	ldrb	r5, [r3]
3000513c:	e3550000 	cmp	r5, #0
30005140:	13a00027 	movne	r0, #39	; 0x27
30005144:	1afffff7 	bne	30005128 <raw_set_sched_way+0x24>
	}
	
	#endif


	RAW_CRITICAL_ENTER();
30005148:	e59f6054 	ldr	r6, [pc, #84]	; 300051a4 <raw_set_sched_way+0xa0>
3000514c:	e58d1004 	str	r1, [sp, #4]
30005150:	eb000aa8 	bl	30007bf8 <OS_CPU_SR_Save>
30005154:	e5d63000 	ldrb	r3, [r6]
30005158:	e2833001 	add	r3, r3, #1
3000515c:	e5c63000 	strb	r3, [r6]
30005160:	eb000aac 	bl	30007c18 <OS_CPU_SR_Restore>
	task_ptr->sched_way =  policy;
30005164:	e59d1004 	ldr	r1, [sp, #4]
30005168:	e5c41018 	strb	r1, [r4, #24]
	RAW_CRITICAL_EXIT();
3000516c:	e5d63000 	ldrb	r3, [r6]
30005170:	e3530001 	cmp	r3, #1
30005174:	0a000006 	beq	30005194 <raw_set_sched_way+0x90>
30005178:	eb000a9e 	bl	30007bf8 <OS_CPU_SR_Save>
3000517c:	e5d63000 	ldrb	r3, [r6]
30005180:	e2433001 	sub	r3, r3, #1
30005184:	e5c63000 	strb	r3, [r6]
30005188:	eb000aa2 	bl	30007c18 <OS_CPU_SR_Restore>
3000518c:	e1a00005 	mov	r0, r5
30005190:	eaffffe4 	b	30005128 <raw_set_sched_way+0x24>
30005194:	eb0004d4 	bl	300064ec <hybrid_int_process>
30005198:	e1a00005 	mov	r0, r5
3000519c:	eaffffe1 	b	30005128 <raw_set_sched_way+0x24>
300051a0:	30013e61 	andcc	r3, r1, r1, ror #28
300051a4:	300142c0 	andcc	r4, r1, r0, asr #5

300051a8 <raw_task_time_slice_change>:
*             
************************************************************************************************************************
*/
#if (CONFIG_SCHED_FIFO_RR > 0)
RAW_U16 raw_task_time_slice_change(RAW_TASK_OBJ *task_ptr, RAW_U32 new_time_slice)
{
300051a8:	e92d4070 	push	{r4, r5, r6, lr}
	RAW_SR_ALLOC();
	
	#if (RAW_TASK_FUNCTION_CHECK > 0)

	if (task_ptr == 0) {
300051ac:	e2504000 	subs	r4, r0, #0
*             
************************************************************************************************************************
*/
#if (CONFIG_SCHED_FIFO_RR > 0)
RAW_U16 raw_task_time_slice_change(RAW_TASK_OBJ *task_ptr, RAW_U32 new_time_slice)
{
300051b0:	e1a05001 	mov	r5, r1
	RAW_SR_ALLOC();
	
	#if (RAW_TASK_FUNCTION_CHECK > 0)

	if (task_ptr == 0) {
300051b4:	03a00025 	moveq	r0, #37	; 0x25
300051b8:	0a000004 	beq	300051d0 <raw_task_time_slice_change+0x28>
		return RAW_NULL_OBJECT;
	}

	if (raw_int_nesting) {
300051bc:	e59f3074 	ldr	r3, [pc, #116]	; 30005238 <raw_task_time_slice_change+0x90>
300051c0:	e5d33000 	ldrb	r3, [r3]
300051c4:	e3530000 	cmp	r3, #0
300051c8:	13a00027 	movne	r0, #39	; 0x27
300051cc:	0a000001 	beq	300051d8 <raw_task_time_slice_change+0x30>
	task_ptr->time_slice = task_ptr->time_total;
	
	RAW_CRITICAL_EXIT();
	
	return RAW_SUCCESS;
}
300051d0:	e8bd4070 	pop	{r4, r5, r6, lr}
300051d4:	e12fff1e 	bx	lr
		return RAW_NOT_CALLED_BY_ISR;
	}
	
	#endif

	RAW_CRITICAL_ENTER();
300051d8:	e59f605c 	ldr	r6, [pc, #92]	; 3000523c <raw_task_time_slice_change+0x94>
300051dc:	eb000a85 	bl	30007bf8 <OS_CPU_SR_Save>
300051e0:	e5d63000 	ldrb	r3, [r6]
300051e4:	e2833001 	add	r3, r3, #1
300051e8:	e5c63000 	strb	r3, [r6]
300051ec:	eb000a89 	bl	30007c18 <OS_CPU_SR_Restore>


	if (new_time_slice) {
300051f0:	e3550000 	cmp	r5, #0
	} 

	else {

		/*assign the default time slice*/
		task_ptr->time_total = TIME_SLICE_DEFAULT;
300051f4:	03a05032 	moveq	r5, #50	; 0x32
300051f8:	e5845014 	str	r5, [r4, #20]
		
	}

	task_ptr->time_slice = task_ptr->time_total;
	
	RAW_CRITICAL_EXIT();
300051fc:	e5d63000 	ldrb	r3, [r6]
		/*assign the default time slice*/
		task_ptr->time_total = TIME_SLICE_DEFAULT;
		
	}

	task_ptr->time_slice = task_ptr->time_total;
30005200:	e5845010 	str	r5, [r4, #16]
	
	RAW_CRITICAL_EXIT();
30005204:	e3530001 	cmp	r3, #1
30005208:	e59f402c 	ldr	r4, [pc, #44]	; 3000523c <raw_task_time_slice_change+0x94>
3000520c:	0a000006 	beq	3000522c <raw_task_time_slice_change+0x84>
30005210:	eb000a78 	bl	30007bf8 <OS_CPU_SR_Save>
30005214:	e5d43000 	ldrb	r3, [r4]
30005218:	e2433001 	sub	r3, r3, #1
3000521c:	e5c43000 	strb	r3, [r4]
30005220:	eb000a7c 	bl	30007c18 <OS_CPU_SR_Restore>
30005224:	e3a00000 	mov	r0, #0
30005228:	eaffffe8 	b	300051d0 <raw_task_time_slice_change+0x28>
3000522c:	eb0004ae 	bl	300064ec <hybrid_int_process>
30005230:	e3a00000 	mov	r0, #0
30005234:	eaffffe5 	b	300051d0 <raw_task_time_slice_change+0x28>
30005238:	30013e61 	andcc	r3, r1, r1, ror #28
3000523c:	300142c0 	andcc	r4, r1, r0, asr #5

30005240 <raw_iter_block_task>:
************************************************************************************************************************
*/
#if (CONFIG_RAW_DEBUG > 0)

RAW_U16 raw_iter_block_task(LIST *object_head, RAW_VOID  (*debug_function)(RAW_TASK_OBJ *arg), RAW_U8 opt)
{
30005240:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}

	RAW_SR_ALLOC();

	#if (RAW_TASK_FUNCTION_CHECK > 0)

	if (raw_int_nesting) {
30005244:	e59f30ac 	ldr	r3, [pc, #172]	; 300052f8 <raw_iter_block_task+0xb8>
************************************************************************************************************************
*/
#if (CONFIG_RAW_DEBUG > 0)

RAW_U16 raw_iter_block_task(LIST *object_head, RAW_VOID  (*debug_function)(RAW_TASK_OBJ *arg), RAW_U8 opt)
{
30005248:	e1a04000 	mov	r4, r0

	RAW_SR_ALLOC();

	#if (RAW_TASK_FUNCTION_CHECK > 0)

	if (raw_int_nesting) {
3000524c:	e5d33000 	ldrb	r3, [r3]
************************************************************************************************************************
*/
#if (CONFIG_RAW_DEBUG > 0)

RAW_U16 raw_iter_block_task(LIST *object_head, RAW_VOID  (*debug_function)(RAW_TASK_OBJ *arg), RAW_U8 opt)
{
30005250:	e1a05001 	mov	r5, r1

	RAW_SR_ALLOC();

	#if (RAW_TASK_FUNCTION_CHECK > 0)

	if (raw_int_nesting) {
30005254:	e3530000 	cmp	r3, #0
************************************************************************************************************************
*/
#if (CONFIG_RAW_DEBUG > 0)

RAW_U16 raw_iter_block_task(LIST *object_head, RAW_VOID  (*debug_function)(RAW_TASK_OBJ *arg), RAW_U8 opt)
{
30005258:	e1a07002 	mov	r7, r2

	RAW_SR_ALLOC();

	#if (RAW_TASK_FUNCTION_CHECK > 0)

	if (raw_int_nesting) {
3000525c:	13a00027 	movne	r0, #39	; 0x27
30005260:	0a000001 	beq	3000526c <raw_iter_block_task+0x2c>

	do_possible_sche();

	return RAW_SUCCESS;
	 
}
30005264:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
30005268:	e12fff1e 	bx	lr
		return RAW_NOT_CALLED_BY_ISR;
	}
	
	#endif
	
	RAW_CRITICAL_ENTER();
3000526c:	e59f8088 	ldr	r8, [pc, #136]	; 300052fc <raw_iter_block_task+0xbc>
30005270:	eb000a60 	bl	30007bf8 <OS_CPU_SR_Save>
30005274:	e5d83000 	ldrb	r3, [r8]
30005278:	e2833001 	add	r3, r3, #1
3000527c:	e5c83000 	strb	r3, [r8]
30005280:	eb000a64 	bl	30007c18 <OS_CPU_SR_Restore>
	iter = object_head->next;
30005284:	e5946000 	ldr	r6, [r4]
	
	/*do it until list pointer is back to the original position*/ 
	while (iter != object_head) {
30005288:	e1540006 	cmp	r4, r6
3000528c:	0a00000b 	beq	300052c0 <raw_iter_block_task+0x80>

		iter_temp  = iter->next;
		
		if (debug_function) {
30005290:	e3550000 	cmp	r5, #0
			debug_function(list_entry(iter, RAW_TASK_OBJ, task_list));
30005294:	e2460004 	sub	r0, r6, #4
	iter = object_head->next;
	
	/*do it until list pointer is back to the original position*/ 
	while (iter != object_head) {

		iter_temp  = iter->next;
30005298:	e5966000 	ldr	r6, [r6]
		
		if (debug_function) {
			debug_function(list_entry(iter, RAW_TASK_OBJ, task_list));
3000529c:	11a0e00f 	movne	lr, pc
300052a0:	112fff15 	bxne	r5
		}

		if (opt) {
300052a4:	e3570000 	cmp	r7, #0
300052a8:	0afffff6 	beq	30005288 <raw_iter_block_task+0x48>
			raw_wake_object(list_entry(object_head->next, RAW_TASK_OBJ, task_list));
300052ac:	e5940000 	ldr	r0, [r4]
300052b0:	e2400004 	sub	r0, r0, #4
300052b4:	ebfff4e8 	bl	3000265c <raw_wake_object>
	
	RAW_CRITICAL_ENTER();
	iter = object_head->next;
	
	/*do it until list pointer is back to the original position*/ 
	while (iter != object_head) {
300052b8:	e1540006 	cmp	r4, r6
300052bc:	1afffff3 	bne	30005290 <raw_iter_block_task+0x50>
		}
		/*move to list next*/
		iter = iter_temp;
	}

	RAW_CRITICAL_EXIT(); 
300052c0:	e5d83000 	ldrb	r3, [r8]
300052c4:	e59f4030 	ldr	r4, [pc, #48]	; 300052fc <raw_iter_block_task+0xbc>
300052c8:	e3530001 	cmp	r3, #1
300052cc:	0a000007 	beq	300052f0 <raw_iter_block_task+0xb0>
300052d0:	eb000a48 	bl	30007bf8 <OS_CPU_SR_Save>
300052d4:	e5d43000 	ldrb	r3, [r4]
300052d8:	e2433001 	sub	r3, r3, #1
300052dc:	e5c43000 	strb	r3, [r4]
300052e0:	eb000a4c 	bl	30007c18 <OS_CPU_SR_Restore>

	do_possible_sche();
300052e4:	ebfffc6a 	bl	30004494 <raw_sched>
300052e8:	e3a00000 	mov	r0, #0

	return RAW_SUCCESS;
300052ec:	eaffffdc 	b	30005264 <raw_iter_block_task+0x24>
		}
		/*move to list next*/
		iter = iter_temp;
	}

	RAW_CRITICAL_EXIT(); 
300052f0:	eb00047d 	bl	300064ec <hybrid_int_process>
300052f4:	eafffffa 	b	300052e4 <raw_iter_block_task+0xa4>
300052f8:	30013e61 	andcc	r3, r1, r1, ror #28
300052fc:	300142c0 	andcc	r4, r1, r0, asr #5

30005300 <raw_enable_sche>:
*/

#if (CONFIG_RAW_SYSTEM_PREEMPTABLE > 0)

RAW_U16 raw_enable_sche(void)
{
30005300:	e92d4070 	push	{r4, r5, r6, lr}

	RAW_SR_ALLOC();
	
	#if (RAW_TASK_FUNCTION_CHECK > 0)
	
	if (raw_int_nesting) {
30005304:	e59f3058 	ldr	r3, [pc, #88]	; 30005364 <raw_enable_sche+0x64>
30005308:	e5d35000 	ldrb	r5, [r3]
3000530c:	e3550000 	cmp	r5, #0
30005310:	13a00027 	movne	r0, #39	; 0x27
30005314:	1a00000c 	bne	3000534c <raw_enable_sche+0x4c>

		return RAW_NOT_CALLED_BY_ISR;
	}
		

	if (raw_sched_lock == 0) {
30005318:	e59f4048 	ldr	r4, [pc, #72]	; 30005368 <raw_enable_sche+0x68>
3000531c:	e5d43000 	ldrb	r3, [r4]
30005320:	e3530000 	cmp	r3, #0
30005324:	03a0000e 	moveq	r0, #14
30005328:	0a000007 	beq	3000534c <raw_enable_sche+0x4c>
	#endif

	#if (CONFIG_RAW_TASK_0 > 0)


	if (raw_sched_lock == 1) {							
3000532c:	e3530001 	cmp	r3, #1
30005330:	0a000007 	beq	30005354 <raw_enable_sche+0x54>
		hybrid_int_process();							  
	}
	
	else {

		RAW_CPU_DISABLE();
30005334:	eb000a2f 	bl	30007bf8 <OS_CPU_SR_Save>
		raw_sched_lock--;
30005338:	e5d43000 	ldrb	r3, [r4]
3000533c:	e2433001 	sub	r3, r3, #1
30005340:	e5c43000 	strb	r3, [r4]
		RAW_CPU_ENABLE();
30005344:	eb000a33 	bl	30007c18 <OS_CPU_SR_Restore>
30005348:	e3a0000d 	mov	r0, #13
	#endif
	
	raw_sched ();
	
	return RAW_SUCCESS;
}
3000534c:	e8bd4070 	pop	{r4, r5, r6, lr}
30005350:	e12fff1e 	bx	lr

	#if (CONFIG_RAW_TASK_0 > 0)


	if (raw_sched_lock == 1) {							
		hybrid_int_process();							  
30005354:	eb000464 	bl	300064ec <hybrid_int_process>
	
	RAW_CPU_ENABLE();

	#endif
	
	raw_sched ();
30005358:	ebfffc4d 	bl	30004494 <raw_sched>
3000535c:	e1a00005 	mov	r0, r5
	
	return RAW_SUCCESS;
30005360:	eafffff9 	b	3000534c <raw_enable_sche+0x4c>
30005364:	30013e61 	andcc	r3, r1, r1, ror #28
30005368:	300142c0 	andcc	r4, r1, r0, asr #5

3000536c <raw_task_wait_abort>:
*             
************************************************************************************************************************
*/
#if (CONFIG_RAW_TASK_WAIT_ABORT > 0)
RAW_U16 raw_task_wait_abort(RAW_TASK_OBJ *task_ptr)
{
3000536c:	e92d4070 	push	{r4, r5, r6, lr}
	RAW_SR_ALLOC();

	#if (RAW_TASK_FUNCTION_CHECK > 0)

	if (task_ptr == 0) {
30005370:	e2504000 	subs	r4, r0, #0
30005374:	03a00025 	moveq	r0, #37	; 0x25
30005378:	0a000004 	beq	30005390 <raw_task_wait_abort+0x24>
		
		return RAW_NULL_OBJECT;
	}

	if (raw_int_nesting) {
3000537c:	e59f315c 	ldr	r3, [pc, #348]	; 300054e0 <raw_task_wait_abort+0x174>
30005380:	e5d33000 	ldrb	r3, [r3]
30005384:	e3530000 	cmp	r3, #0
30005388:	13a00027 	movne	r0, #39	; 0x27
3000538c:	0a000001 	beq	30005398 <raw_task_wait_abort+0x2c>
	TRACE_TASK_WAIT_ABORT(task_ptr);
	
	do_possible_sche(); 
	
	return RAW_SUCCESS;
}
30005390:	e8bd4070 	pop	{r4, r5, r6, lr}
30005394:	e12fff1e 	bx	lr
		return RAW_NOT_CALLED_BY_ISR;
	}
	
	#endif
	
	RAW_CRITICAL_ENTER();
30005398:	e59f5144 	ldr	r5, [pc, #324]	; 300054e4 <raw_task_wait_abort+0x178>
3000539c:	eb000a15 	bl	30007bf8 <OS_CPU_SR_Save>
300053a0:	e5d53000 	ldrb	r3, [r5]
300053a4:	e2833001 	add	r3, r3, #1
300053a8:	e5c53000 	strb	r3, [r5]
300053ac:	eb000a19 	bl	30007c18 <OS_CPU_SR_Restore>
	
	switch (task_ptr->task_state) {
300053b0:	e5d43050 	ldrb	r3, [r4, #80]	; 0x50
300053b4:	e3530007 	cmp	r3, #7
300053b8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
300053bc:	ea000037 	b	300054a0 <raw_task_wait_abort+0x134>
300053c0:	30005404 	andcc	r5, r0, r4, lsl #8
300053c4:	3000545c 	andcc	r5, r0, ip, asr r4
300053c8:	3000545c 	andcc	r5, r0, ip, asr r4
300053cc:	3000545c 	andcc	r5, r0, ip, asr r4
300053d0:	30005444 	andcc	r5, r0, r4, asr #8
300053d4:	3000545c 	andcc	r5, r0, ip, asr r4
300053d8:	300053e0 	andcc	r5, r0, r0, ror #7
300053dc:	300053e0 	andcc	r5, r0, r0, ror #7
			break;

		case RAW_DLY:    
		case RAW_DLY_SUSPENDED:
			/*change to ready state*/
			tick_list_remove(task_ptr);
300053e0:	e1a00004 	mov	r0, r4
300053e4:	eb000598 	bl	30006a4c <tick_list_remove>
			add_ready_list(&raw_ready_queue, task_ptr);
300053e8:	e59f00f8 	ldr	r0, [pc, #248]	; 300054e8 <raw_task_wait_abort+0x17c>
300053ec:	e1a01004 	mov	r1, r4
300053f0:	ebfff3dc 	bl	30002368 <add_ready_list>
			task_ptr->task_state = RAW_RDY;
300053f4:	e3a03000 	mov	r3, #0
300053f8:	e5c43050 	strb	r3, [r4, #80]	; 0x50
			task_ptr->block_status = RAW_B_ABORT;   
300053fc:	e3a03001 	mov	r3, #1
30005400:	e5c43051 	strb	r3, [r4, #81]	; 0x51
			RAW_CRITICAL_EXIT();
			
			return  RAW_STATE_UNKNOWN;
	}
	
	RAW_CRITICAL_EXIT();
30005404:	e5d53000 	ldrb	r3, [r5]
30005408:	e59f50d4 	ldr	r5, [pc, #212]	; 300054e4 <raw_task_wait_abort+0x178>
3000540c:	e3530001 	cmp	r3, #1
30005410:	0a00002d 	beq	300054cc <raw_task_wait_abort+0x160>
30005414:	eb0009f7 	bl	30007bf8 <OS_CPU_SR_Save>
30005418:	e5d53000 	ldrb	r3, [r5]
3000541c:	e2433001 	sub	r3, r3, #1
30005420:	e5c53000 	strb	r3, [r5]
30005424:	eb0009fb 	bl	30007c18 <OS_CPU_SR_Restore>

	#if (CONFIG_RAW_USER_HOOK > 0)
	raw_task_abort_hook(task_ptr);
30005428:	e1a00004 	mov	r0, r4
3000542c:	eb0009b3 	bl	30007b00 <raw_task_abort_hook>
	#endif
	
	TRACE_TASK_WAIT_ABORT(task_ptr);
30005430:	e1a00004 	mov	r0, r4
30005434:	eb0009bd 	bl	30007b30 <_trace_task_abort>
	
	do_possible_sche(); 
30005438:	ebfffc15 	bl	30004494 <raw_sched>
3000543c:	e3a00000 	mov	r0, #0
	
	return RAW_SUCCESS;
30005440:	eaffffd2 	b	30005390 <raw_task_wait_abort+0x24>
		case RAW_RDY:
			break;
			
		case RAW_SUSPENDED:
			/*change to ready state*/
			task_ptr->task_state = RAW_RDY;
30005444:	e3a03000 	mov	r3, #0
30005448:	e5c43050 	strb	r3, [r4, #80]	; 0x50
			add_ready_list(&raw_ready_queue, task_ptr);   
3000544c:	e59f0094 	ldr	r0, [pc, #148]	; 300054e8 <raw_task_wait_abort+0x17c>
30005450:	e1a01004 	mov	r1, r4
30005454:	ebfff3c3 	bl	30002368 <add_ready_list>
			break;
30005458:	eaffffe9 	b	30005404 <raw_task_wait_abort+0x98>
		case RAW_PEND_TIMEOUT_SUSPENDED:
		case RAW_PEND:
		case RAW_PEND_TIMEOUT:
			
			/*remove task on the tick list because task is waken up*/
			tick_list_remove(task_ptr);  
3000545c:	e1a00004 	mov	r0, r4
30005460:	eb000579 	bl	30006a4c <tick_list_remove>


RAW_INLINE void list_delete(LIST *element)
{

	element->previous->next = element->next;
30005464:	e994000c 	ldmib	r4, {r2, r3}
			/*remove task on the block list because task is waken up*/
			list_delete(&task_ptr->task_list);   
          	/*add to the ready list again*/    
			add_ready_list(&raw_ready_queue, task_ptr);
30005468:	e1a01004 	mov	r1, r4
3000546c:	e5832000 	str	r2, [r3]
	element->next->previous = element->previous;
30005470:	e5942004 	ldr	r2, [r4, #4]
30005474:	e59f006c 	ldr	r0, [pc, #108]	; 300054e8 <raw_task_wait_abort+0x17c>
30005478:	e5823004 	str	r3, [r2, #4]
3000547c:	ebfff3b9 	bl	30002368 <add_ready_list>
			
			#if (CONFIG_RAW_MUTEX > 0)
			mutex_state_change(task_ptr);
30005480:	e1a00004 	mov	r0, r4
30005484:	ebfff1d2 	bl	30001bd4 <mutex_state_change>
			#endif

			task_ptr->task_state = RAW_RDY;
30005488:	e3a03000 	mov	r3, #0
			task_ptr->block_status = RAW_B_ABORT;
3000548c:	e3a02001 	mov	r2, #1
30005490:	e5c42051 	strb	r2, [r4, #81]	; 0x51
			task_ptr->block_obj = 0;
30005494:	e5843054 	str	r3, [r4, #84]	; 0x54
			
			#if (CONFIG_RAW_MUTEX > 0)
			mutex_state_change(task_ptr);
			#endif

			task_ptr->task_state = RAW_RDY;
30005498:	e5c43050 	strb	r3, [r4, #80]	; 0x50
			task_ptr->block_status = RAW_B_ABORT;
			task_ptr->block_obj = 0;
			
			break;
3000549c:	eaffffd8 	b	30005404 <raw_task_wait_abort+0x98>
			
		default:
			
			RAW_CRITICAL_EXIT();
300054a0:	e5d53000 	ldrb	r3, [r5]
300054a4:	e59f4038 	ldr	r4, [pc, #56]	; 300054e4 <raw_task_wait_abort+0x178>
300054a8:	e3530001 	cmp	r3, #1
300054ac:	0a000008 	beq	300054d4 <raw_task_wait_abort+0x168>
300054b0:	eb0009d0 	bl	30007bf8 <OS_CPU_SR_Save>
300054b4:	e5d43000 	ldrb	r3, [r4]
300054b8:	e2433001 	sub	r3, r3, #1
300054bc:	e5c43000 	strb	r3, [r4]
300054c0:	eb0009d4 	bl	30007c18 <OS_CPU_SR_Restore>
300054c4:	e3a00010 	mov	r0, #16
300054c8:	eaffffb0 	b	30005390 <raw_task_wait_abort+0x24>
			
			return  RAW_STATE_UNKNOWN;
	}
	
	RAW_CRITICAL_EXIT();
300054cc:	eb000406 	bl	300064ec <hybrid_int_process>
300054d0:	eaffffd4 	b	30005428 <raw_task_wait_abort+0xbc>
			
			break;
			
		default:
			
			RAW_CRITICAL_EXIT();
300054d4:	eb000404 	bl	300064ec <hybrid_int_process>
300054d8:	e3a00010 	mov	r0, #16
300054dc:	eaffffab 	b	30005390 <raw_task_wait_abort+0x24>
300054e0:	30013e61 	andcc	r3, r1, r1, ror #28
300054e4:	300142c0 	andcc	r4, r1, r0, asr #5
300054e8:	30013c4c 	andcc	r3, r1, ip, asr #24

300054ec <raw_task_delete>:
*             
************************************************************************************************************************
*/
#if (CONFIG_RAW_TASK_DELETE > 0)
RAW_U16 raw_task_delete(RAW_TASK_OBJ *task_ptr)
{
300054ec:	e92d4070 	push	{r4, r5, r6, lr}
	RAW_SR_ALLOC();

	#if (RAW_TASK_FUNCTION_CHECK > 0)

	if (task_ptr == 0) {
300054f0:	e2504000 	subs	r4, r0, #0
300054f4:	03a00025 	moveq	r0, #37	; 0x25
300054f8:	0a00000a 	beq	30005528 <raw_task_delete+0x3c>
		
		return RAW_NULL_OBJECT;
	}

	if (raw_int_nesting) {
300054fc:	e59f31a0 	ldr	r3, [pc, #416]	; 300056a4 <raw_task_delete+0x1b8>
30005500:	e5d33000 	ldrb	r3, [r3]
30005504:	e3530000 	cmp	r3, #0
30005508:	13a00027 	movne	r0, #39	; 0x27
3000550c:	1a000005 	bne	30005528 <raw_task_delete+0x3c>
		
	}
	
	#endif

	if (task_ptr->priority == IDLE_PRIORITY) {
30005510:	e5d43019 	ldrb	r3, [r4, #25]
30005514:	e353003d 	cmp	r3, #61	; 0x3d
30005518:	0a000001 	beq	30005524 <raw_task_delete+0x38>
		return RAW_DELETE_TASK_NOT_ALLOWED;
	}

	#if (CONFIG_RAW_TASK_0 > 0)
	
	if (task_ptr->priority == 0) {
3000551c:	e3530000 	cmp	r3, #0
30005520:	1a000002 	bne	30005530 <raw_task_delete+0x44>
		raw_sched();
	}
	
	#endif
	
	return RAW_SUCCESS;
30005524:	e3a0002d 	mov	r0, #45	; 0x2d
}
30005528:	e8bd4070 	pop	{r4, r5, r6, lr}
3000552c:	e12fff1e 	bx	lr
	}

	#endif
	

	RAW_CRITICAL_ENTER();
30005530:	e59f5170 	ldr	r5, [pc, #368]	; 300056a8 <raw_task_delete+0x1bc>
30005534:	eb0009af 	bl	30007bf8 <OS_CPU_SR_Save>
30005538:	e5d53000 	ldrb	r3, [r5]
3000553c:	e2833001 	add	r3, r3, #1
30005540:	e5c53000 	strb	r3, [r5]
30005544:	eb0009b3 	bl	30007c18 <OS_CPU_SR_Restore>

	if (task_ptr == raw_task_active) {
30005548:	e59f315c 	ldr	r3, [pc, #348]	; 300056ac <raw_task_delete+0x1c0>
3000554c:	e5933000 	ldr	r3, [r3]
30005550:	e1540003 	cmp	r4, r3
30005554:	0a00000d 	beq	30005590 <raw_task_delete+0xa4>
		
		SYSTEM_LOCK_PROCESS();
	}

	#if (CONFIG_RAW_MUTEX > 0)
	raw_task_free_mutex(task_ptr);
30005558:	e1a00004 	mov	r0, r4
3000555c:	ebfff1c4 	bl	30001c74 <raw_task_free_mutex>
	#endif
	
	switch (task_ptr->task_state) {
30005560:	e5d43050 	ldrb	r3, [r4, #80]	; 0x50
30005564:	e3530007 	cmp	r3, #7
30005568:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
3000556c:	ea00003c 	b	30005664 <raw_task_delete+0x178>
30005570:	30005654 	andcc	r5, r0, r4, asr r6
30005574:	30005630 	andcc	r5, r0, r0, lsr r6
30005578:	30005630 	andcc	r5, r0, r0, lsr r6
3000557c:	30005630 	andcc	r5, r0, r0, lsr r6
30005580:	300055c0 	andcc	r5, r0, r0, asr #11
30005584:	30005630 	andcc	r5, r0, r0, lsr r6
30005588:	300055b8 	undefined instruction 0x300055b8
3000558c:	300055b8 	undefined instruction 0x300055b8

	RAW_CRITICAL_ENTER();

	if (task_ptr == raw_task_active) {
		
		SYSTEM_LOCK_PROCESS();
30005590:	e5d53000 	ldrb	r3, [r5]
30005594:	e3530001 	cmp	r3, #1
30005598:	9affffee 	bls	30005558 <raw_task_delete+0x6c>
3000559c:	eb000995 	bl	30007bf8 <OS_CPU_SR_Save>
300055a0:	e5d53000 	ldrb	r3, [r5]
300055a4:	e2433001 	sub	r3, r3, #1
300055a8:	e5c53000 	strb	r3, [r5]
300055ac:	eb000999 	bl	30007c18 <OS_CPU_SR_Restore>
300055b0:	e3a00007 	mov	r0, #7
300055b4:	eaffffdb 	b	30005528 <raw_task_delete+0x3c>
		case RAW_SUSPENDED:
			break;

		case RAW_DLY:                            
		case RAW_DLY_SUSPENDED:
			tick_list_remove(task_ptr);
300055b8:	e1a00004 	mov	r0, r4
300055bc:	eb000522 	bl	30006a4c <tick_list_remove>

	task_ptr->task_state = RAW_DELETED;   
	
	#if (RAW_SYSTEM_CHECK > 0)
	/*make after_delete_list to right position*/
	system_debug.after_delete_list = task_ptr->stack_check_list.next;
300055c0:	e5943020 	ldr	r3, [r4, #32]
300055c4:	e59f20e4 	ldr	r2, [pc, #228]	; 300056b0 <raw_task_delete+0x1c4>
			RAW_CRITICAL_EXIT();
			
			return  RAW_STATE_UNKNOWN;
	}  

	task_ptr->task_state = RAW_DELETED;   
300055c8:	e3a01008 	mov	r1, #8
300055cc:	e5c41050 	strb	r1, [r4, #80]	; 0x50
	
	#if (RAW_SYSTEM_CHECK > 0)
	/*make after_delete_list to right position*/
	system_debug.after_delete_list = task_ptr->stack_check_list.next;
	
	if (system_debug.after_delete_list == (&(system_debug.task_head))) {
300055d0:	e1530002 	cmp	r3, r2

	task_ptr->task_state = RAW_DELETED;   
	
	#if (RAW_SYSTEM_CHECK > 0)
	/*make after_delete_list to right position*/
	system_debug.after_delete_list = task_ptr->stack_check_list.next;
300055d4:	e5823008 	str	r3, [r2, #8]
	
	if (system_debug.after_delete_list == (&(system_debug.task_head))) {
				system_debug.after_delete_list = system_debug.task_head.next;
300055d8:	05932000 	ldreq	r2, [r3]
	
	list_delete(&task_ptr->stack_check_list);
	 
	#endif
	
	RAW_CRITICAL_EXIT();
300055dc:	e5d51000 	ldrb	r1, [r5]
	#if (RAW_SYSTEM_CHECK > 0)
	/*make after_delete_list to right position*/
	system_debug.after_delete_list = task_ptr->stack_check_list.next;
	
	if (system_debug.after_delete_list == (&(system_debug.task_head))) {
				system_debug.after_delete_list = system_debug.task_head.next;
300055e0:	05832008 	streq	r2, [r3, #8]


RAW_INLINE void list_delete(LIST *element)
{

	element->previous->next = element->next;
300055e4:	e5942024 	ldr	r2, [r4, #36]	; 0x24
	
	list_delete(&task_ptr->stack_check_list);
	 
	#endif
	
	RAW_CRITICAL_EXIT();
300055e8:	e3510001 	cmp	r1, #1
300055ec:	e5823000 	str	r3, [r2]
	element->next->previous = element->previous;
300055f0:	e5943020 	ldr	r3, [r4, #32]
300055f4:	e59f50ac 	ldr	r5, [pc, #172]	; 300056a8 <raw_task_delete+0x1bc>
300055f8:	e5832004 	str	r2, [r3, #4]
300055fc:	0a000023 	beq	30005690 <raw_task_delete+0x1a4>
30005600:	eb00097c 	bl	30007bf8 <OS_CPU_SR_Save>
30005604:	e5d53000 	ldrb	r3, [r5]
30005608:	e2433001 	sub	r3, r3, #1
3000560c:	e5c53000 	strb	r3, [r5]
30005610:	eb000980 	bl	30007c18 <OS_CPU_SR_Restore>

	TRACE_TASK_DELETE(task_ptr);
30005614:	e1a00004 	mov	r0, r4
30005618:	eb000943 	bl	30007b2c <_trace_task_delete>

	#if (CONFIG_RAW_USER_HOOK > 0)
	raw_task_delete_hook(task_ptr);
3000561c:	e1a00004 	mov	r0, r4
30005620:	eb000937 	bl	30007b04 <raw_task_delete_hook>
	#endif

	#if (CONFIG_RAW_SYSTEM_PREEMPTABLE > 0)
	raw_sched();
30005624:	ebfffb9a 	bl	30004494 <raw_sched>
30005628:	e3a00000 	mov	r0, #0
		raw_sched();
	}
	
	#endif
	
	return RAW_SUCCESS;
3000562c:	eaffffbd 	b	30005528 <raw_task_delete+0x3c>

		case RAW_PEND:
		case RAW_PEND_SUSPENDED:
		case RAW_PEND_TIMEOUT:
		case RAW_PEND_TIMEOUT_SUSPENDED:
			tick_list_remove(task_ptr);
30005630:	e1a00004 	mov	r0, r4
30005634:	eb000504 	bl	30006a4c <tick_list_remove>


RAW_INLINE void list_delete(LIST *element)
{

	element->previous->next = element->next;
30005638:	e994000c 	ldmib	r4, {r2, r3}
			list_delete(&task_ptr->task_list);
			
			#if (CONFIG_RAW_MUTEX > 0)
			mutex_state_change(task_ptr);
3000563c:	e1a00004 	mov	r0, r4
30005640:	e5832000 	str	r2, [r3]
	element->next->previous = element->previous;
30005644:	e5942004 	ldr	r2, [r4, #4]
30005648:	e5823004 	str	r3, [r2, #4]
3000564c:	ebfff160 	bl	30001bd4 <mutex_state_change>
			#endif
			
			break;
30005650:	eaffffda 	b	300055c0 <raw_task_delete+0xd4>
	raw_task_free_mutex(task_ptr);
	#endif
	
	switch (task_ptr->task_state) {
		case RAW_RDY:
			remove_ready_list(&raw_ready_queue, task_ptr);
30005654:	e59f0058 	ldr	r0, [pc, #88]	; 300056b4 <raw_task_delete+0x1c8>
30005658:	e1a01004 	mov	r1, r4
3000565c:	ebfff3ff 	bl	30002660 <remove_ready_list>
			break;
30005660:	eaffffd6 	b	300055c0 <raw_task_delete+0xd4>
			
			break;

		default:
			
			RAW_CRITICAL_EXIT();
30005664:	e5d53000 	ldrb	r3, [r5]
30005668:	e59f4038 	ldr	r4, [pc, #56]	; 300056a8 <raw_task_delete+0x1bc>
3000566c:	e3530001 	cmp	r3, #1
30005670:	0a000008 	beq	30005698 <raw_task_delete+0x1ac>
30005674:	eb00095f 	bl	30007bf8 <OS_CPU_SR_Save>
30005678:	e5d43000 	ldrb	r3, [r4]
3000567c:	e2433001 	sub	r3, r3, #1
30005680:	e5c43000 	strb	r3, [r4]
30005684:	eb000963 	bl	30007c18 <OS_CPU_SR_Restore>
30005688:	e3a00010 	mov	r0, #16
3000568c:	eaffffa5 	b	30005528 <raw_task_delete+0x3c>
	
	list_delete(&task_ptr->stack_check_list);
	 
	#endif
	
	RAW_CRITICAL_EXIT();
30005690:	eb000395 	bl	300064ec <hybrid_int_process>
30005694:	eaffffde 	b	30005614 <raw_task_delete+0x128>
			
			break;

		default:
			
			RAW_CRITICAL_EXIT();
30005698:	eb000393 	bl	300064ec <hybrid_int_process>
3000569c:	e3a00010 	mov	r0, #16
300056a0:	eaffffa0 	b	30005528 <raw_task_delete+0x3c>
300056a4:	30013e61 	andcc	r3, r1, r1, ror #28
300056a8:	300142c0 	andcc	r4, r1, r0, asr #5
300056ac:	30013838 	andcc	r3, r1, r8, lsr r8
300056b0:	30012fb4 	undefined instruction 0x30012fb4
300056b4:	30013c4c 	andcc	r3, r1, ip, asr #24

300056b8 <change_internal_task_priority>:


#if (CONFIG_RAW_TASK_PRIORITY_CHANGE > 0)

RAW_U16 change_internal_task_priority(RAW_TASK_OBJ *task_ptr, RAW_U8 new_priority)
{
300056b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	RAW_U8 old_pri = 0;
	old_pri = old_pri;

	switch (task_ptr->task_state) {
300056bc:	e5d03050 	ldrb	r3, [r0, #80]	; 0x50


#if (CONFIG_RAW_TASK_PRIORITY_CHANGE > 0)

RAW_U16 change_internal_task_priority(RAW_TASK_OBJ *task_ptr, RAW_U8 new_priority)
{
300056c0:	e1a04000 	mov	r4, r0
	RAW_U8 old_pri = 0;
	old_pri = old_pri;

	switch (task_ptr->task_state) {
300056c4:	e3530007 	cmp	r3, #7


#if (CONFIG_RAW_TASK_PRIORITY_CHANGE > 0)

RAW_U16 change_internal_task_priority(RAW_TASK_OBJ *task_ptr, RAW_U8 new_priority)
{
300056c8:	e1a05001 	mov	r5, r1
	RAW_U8 old_pri = 0;
	old_pri = old_pri;

	switch (task_ptr->task_state) {
300056cc:	9a000002 	bls	300056dc <change_internal_task_priority+0x24>
300056d0:	e3a00010 	mov	r0, #16
			
	}

	return RAW_SUCCESS;

}
300056d4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
300056d8:	e12fff1e 	bx	lr
RAW_U16 change_internal_task_priority(RAW_TASK_OBJ *task_ptr, RAW_U8 new_priority)
{
	RAW_U8 old_pri = 0;
	old_pri = old_pri;

	switch (task_ptr->task_state) {
300056dc:	e1d035d0 	ldrsb	r3, [r0, #80]	; 0x50
300056e0:	e3a02001 	mov	r2, #1
300056e4:	e1a03312 	lsl	r3, r2, r3
300056e8:	e21360d0 	ands	r6, r3, #208	; 0xd0

		case RAW_DLY:                             /* Nothing to do except change the priority in the OS_TCB */
		case RAW_SUSPENDED:
		case RAW_DLY_SUSPENDED:
			
			task_ptr->priority = new_priority;                        /* Set new task priority*/
300056ec:	15c01019 	strbne	r1, [r0, #25]
300056f0:	13a00000 	movne	r0, #0
RAW_U16 change_internal_task_priority(RAW_TASK_OBJ *task_ptr, RAW_U8 new_priority)
{
	RAW_U8 old_pri = 0;
	old_pri = old_pri;

	switch (task_ptr->task_state) {
300056f4:	1afffff6 	bne	300056d4 <change_internal_task_priority+0x1c>
300056f8:	e213702e 	ands	r7, r3, #46	; 0x2e
300056fc:	1a00000e 	bne	3000573c <change_internal_task_priority+0x84>
30005700:	e3130001 	tst	r3, #1
30005704:	0afffff1 	beq	300056d0 <change_internal_task_priority+0x18>
		case RAW_RDY:
			
			remove_ready_list(&raw_ready_queue, task_ptr);
30005708:	e59f0060 	ldr	r0, [pc, #96]	; 30005770 <change_internal_task_priority+0xb8>
3000570c:	e1a01004 	mov	r1, r4
30005710:	ebfff3d2 	bl	30002660 <remove_ready_list>
			task_ptr->priority = new_priority;
			
			if (task_ptr == raw_task_active) {
30005714:	e59f3058 	ldr	r3, [pc, #88]	; 30005774 <change_internal_task_priority+0xbc>

	switch (task_ptr->task_state) {
		case RAW_RDY:
			
			remove_ready_list(&raw_ready_queue, task_ptr);
			task_ptr->priority = new_priority;
30005718:	e5c45019 	strb	r5, [r4, #25]
			
			if (task_ptr == raw_task_active) {
3000571c:	e5933000 	ldr	r3, [r3]
30005720:	e1540003 	cmp	r4, r3
30005724:	0a00000c 	beq	3000575c <change_internal_task_priority+0xa4>
				
			}
			
			else {
			
				add_ready_list_end(&raw_ready_queue, task_ptr);
30005728:	e59f0040 	ldr	r0, [pc, #64]	; 30005770 <change_internal_task_priority+0xb8>
3000572c:	e1a01004 	mov	r1, r4
30005730:	ebfff2f5 	bl	3000230c <add_ready_list_end>
30005734:	e1a00007 	mov	r0, r7
30005738:	eaffffe5 	b	300056d4 <change_internal_task_priority+0x1c>

		case RAW_PEND:
		case RAW_PEND_TIMEOUT:
		case RAW_PEND_SUSPENDED:
		case RAW_PEND_TIMEOUT_SUSPENDED:
			old_pri = task_ptr->priority;
3000573c:	e5d47019 	ldrb	r7, [r4, #25]
			task_ptr->priority = new_priority;  
30005740:	e5c41019 	strb	r1, [r4, #25]
			change_pend_list_priority(task_ptr);
30005744:	ebfff358 	bl	300024ac <change_pend_list_priority>
			
			#if (CONFIG_RAW_MUTEX > 0)
			mtx_chg_pri(task_ptr, old_pri);
30005748:	e1a00004 	mov	r0, r4
3000574c:	e1a01007 	mov	r1, r7
30005750:	ebfff12e 	bl	30001c10 <mtx_chg_pri>
30005754:	e1a00006 	mov	r0, r6
			#endif
			
			break;
30005758:	eaffffdd 	b	300056d4 <change_internal_task_priority+0x1c>
			
			remove_ready_list(&raw_ready_queue, task_ptr);
			task_ptr->priority = new_priority;
			
			if (task_ptr == raw_task_active) {
				add_ready_list_head(&raw_ready_queue, task_ptr);
3000575c:	e59f000c 	ldr	r0, [pc, #12]	; 30005770 <change_internal_task_priority+0xb8>
30005760:	e1a01004 	mov	r1, r4
30005764:	ebfff2d2 	bl	300022b4 <add_ready_list_head>
30005768:	e1a00007 	mov	r0, r7
3000576c:	eaffffd8 	b	300056d4 <change_internal_task_priority+0x1c>
30005770:	30013c4c 	andcc	r3, r1, ip, asr #24
30005774:	30013838 	andcc	r3, r1, r8, lsr r8

30005778 <raw_task_priority_change>:
*l 
*             
************************************************************************************************************************
*/
RAW_U16 raw_task_priority_change (RAW_TASK_OBJ *task_ptr, RAW_U8 new_priority, RAW_U8 *old_priority)
{
30005778:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}

	ret_pri = ret_pri;

	#if (RAW_TASK_FUNCTION_CHECK > 0)

	if (raw_int_nesting) {
3000577c:	e59f313c 	ldr	r3, [pc, #316]	; 300058c0 <raw_task_priority_change+0x148>
*l 
*             
************************************************************************************************************************
*/
RAW_U16 raw_task_priority_change (RAW_TASK_OBJ *task_ptr, RAW_U8 new_priority, RAW_U8 *old_priority)
{
30005780:	e1a04000 	mov	r4, r0

	ret_pri = ret_pri;

	#if (RAW_TASK_FUNCTION_CHECK > 0)

	if (raw_int_nesting) {
30005784:	e5d33000 	ldrb	r3, [r3]
*l 
*             
************************************************************************************************************************
*/
RAW_U16 raw_task_priority_change (RAW_TASK_OBJ *task_ptr, RAW_U8 new_priority, RAW_U8 *old_priority)
{
30005788:	e24dd008 	sub	sp, sp, #8

	ret_pri = ret_pri;

	#if (RAW_TASK_FUNCTION_CHECK > 0)

	if (raw_int_nesting) {
3000578c:	e3530000 	cmp	r3, #0
*l 
*             
************************************************************************************************************************
*/
RAW_U16 raw_task_priority_change (RAW_TASK_OBJ *task_ptr, RAW_U8 new_priority, RAW_U8 *old_priority)
{
30005790:	e1a06001 	mov	r6, r1
30005794:	e1a05002 	mov	r5, r2

	ret_pri = ret_pri;

	#if (RAW_TASK_FUNCTION_CHECK > 0)

	if (raw_int_nesting) {
30005798:	13a00027 	movne	r0, #39	; 0x27
3000579c:	1a000024 	bne	30005834 <raw_task_priority_change+0xbc>
		
		return RAW_NOT_CALLED_BY_ISR;
	}
	
	if (task_ptr == 0) {
300057a0:	e3540000 	cmp	r4, #0
300057a4:	0a000027 	beq	30005848 <raw_task_priority_change+0xd0>
		
		return RAW_NULL_OBJECT;
	}

	if (old_priority == 0) {
300057a8:	e3520000 	cmp	r2, #0
300057ac:	0a000025 	beq	30005848 <raw_task_priority_change+0xd0>
	}
	
	#endif		

	/*Idle task is not allowed to change priority*/
	if (task_ptr->priority >= IDLE_PRIORITY) {
300057b0:	e5d43019 	ldrb	r3, [r4, #25]
300057b4:	e353003c 	cmp	r3, #60	; 0x3c
300057b8:	8a000020 	bhi	30005840 <raw_task_priority_change+0xc8>
		return RAW_CHANGE_PRIORITY_NOT_ALLOWED;
	}

	#if (CONFIG_RAW_TASK_0 > 0)
	
	if (task_ptr->priority == 0) {
300057bc:	e3530000 	cmp	r3, #0
300057c0:	0a00001e 	beq	30005840 <raw_task_priority_change+0xc8>
		
		return RAW_CHANGE_PRIORITY_NOT_ALLOWED;
	}

	if (new_priority == 0) {             
300057c4:	e3510000 	cmp	r1, #0
300057c8:	0a00001c 	beq	30005840 <raw_task_priority_change+0xc8>

	#endif
	
	
   /*Not allowed change to idle priority*/
	if (new_priority == IDLE_PRIORITY) {             
300057cc:	e351003d 	cmp	r1, #61	; 0x3d
300057d0:	0a00001a 	beq	30005840 <raw_task_priority_change+0xc8>

		return RAW_CHANGE_PRIORITY_NOT_ALLOWED;
	}

	
	RAW_CRITICAL_ENTER();
300057d4:	e59f70e8 	ldr	r7, [pc, #232]	; 300058c4 <raw_task_priority_change+0x14c>
300057d8:	eb000906 	bl	30007bf8 <OS_CPU_SR_Save>
300057dc:	e5d73000 	ldrb	r3, [r7]
300057e0:	e2833001 	add	r3, r3, #1
300057e4:	e5c73000 	strb	r3, [r7]
300057e8:	eb00090a 	bl	30007c18 <OS_CPU_SR_Restore>

	#if (CONFIG_RAW_MUTEX > 0)

	/*Limit the priority change by mutex at task priority change*/
	ret_pri = chg_pri_mutex(task_ptr, new_priority, &error);
300057ec:	e1a00004 	mov	r0, r4
300057f0:	e1a01006 	mov	r1, r6
300057f4:	e28d2006 	add	r2, sp, #6
300057f8:	ebfff05c 	bl	30001970 <chg_pri_mutex>

	if (error != RAW_SUCCESS) {
300057fc:	e1dd30b6 	ldrh	r3, [sp, #6]
	RAW_CRITICAL_ENTER();

	#if (CONFIG_RAW_MUTEX > 0)

	/*Limit the priority change by mutex at task priority change*/
	ret_pri = chg_pri_mutex(task_ptr, new_priority, &error);
30005800:	e1a08000 	mov	r8, r0

	if (error != RAW_SUCCESS) {
30005804:	e3530000 	cmp	r3, #0
30005808:	0a000010 	beq	30005850 <raw_task_priority_change+0xd8>
	do_possible_sche();  

 	return RAW_SUCCESS;
	
	error_exit:
	RAW_CRITICAL_EXIT();
3000580c:	e5d73000 	ldrb	r3, [r7]
30005810:	e59f40ac 	ldr	r4, [pc, #172]	; 300058c4 <raw_task_priority_change+0x14c>
30005814:	e3530001 	cmp	r3, #1
30005818:	0a000023 	beq	300058ac <raw_task_priority_change+0x134>
3000581c:	eb0008f5 	bl	30007bf8 <OS_CPU_SR_Save>
30005820:	e5d43000 	ldrb	r3, [r4]
30005824:	e2433001 	sub	r3, r3, #1
30005828:	e5c43000 	strb	r3, [r4]
3000582c:	eb0008f9 	bl	30007c18 <OS_CPU_SR_Restore>
	return error;
30005830:	e1dd00b6 	ldrh	r0, [sp, #6]
	
}
30005834:	e28dd008 	add	sp, sp, #8
30005838:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
3000583c:	e12fff1e 	bx	lr

 	return RAW_SUCCESS;
	
	error_exit:
	RAW_CRITICAL_EXIT();
	return error;
30005840:	e3a0002b 	mov	r0, #43	; 0x2b
30005844:	eafffffa 	b	30005834 <raw_task_priority_change+0xbc>
30005848:	e3a00025 	mov	r0, #37	; 0x25
3000584c:	eafffff8 	b	30005834 <raw_task_priority_change+0xbc>
	#else
	
	task_ptr->bpriority = new_priority;
	#endif

	*old_priority = task_ptr->priority;
30005850:	e5d43019 	ldrb	r3, [r4, #25]

	if (error != RAW_SUCCESS) {
		goto error_exit;
	}

	task_ptr->bpriority = new_priority;
30005854:	e5c4601a 	strb	r6, [r4, #26]
	task_ptr->bpriority = new_priority;
	#endif

	*old_priority = task_ptr->priority;

	error = change_internal_task_priority(task_ptr, new_priority);
30005858:	e1a00004 	mov	r0, r4
	#else
	
	task_ptr->bpriority = new_priority;
	#endif

	*old_priority = task_ptr->priority;
3000585c:	e5c53000 	strb	r3, [r5]

	error = change_internal_task_priority(task_ptr, new_priority);
30005860:	e1a01008 	mov	r1, r8
30005864:	ebffff93 	bl	300056b8 <change_internal_task_priority>
	
	if (error != RAW_SUCCESS) {
30005868:	e3500000 	cmp	r0, #0
	task_ptr->bpriority = new_priority;
	#endif

	*old_priority = task_ptr->priority;

	error = change_internal_task_priority(task_ptr, new_priority);
3000586c:	e1cd00b6 	strh	r0, [sp, #6]
	
	if (error != RAW_SUCCESS) {
30005870:	1affffe5 	bne	3000580c <raw_task_priority_change+0x94>
		goto error_exit;
	}

	RAW_CRITICAL_EXIT();
30005874:	e5d73000 	ldrb	r3, [r7]
30005878:	e3530001 	cmp	r3, #1
3000587c:	0a00000d 	beq	300058b8 <raw_task_priority_change+0x140>
30005880:	eb0008dc 	bl	30007bf8 <OS_CPU_SR_Save>
30005884:	e5d73000 	ldrb	r3, [r7]
30005888:	e2433001 	sub	r3, r3, #1
3000588c:	e5c73000 	strb	r3, [r7]
30005890:	eb0008e0 	bl	30007c18 <OS_CPU_SR_Restore>

	TRACE_TASK_PRIORITY_CHANGE(task_ptr, new_priority);
30005894:	e1a00004 	mov	r0, r4
30005898:	e1a01008 	mov	r1, r8
3000589c:	eb00089f 	bl	30007b20 <_trace_task_priority_change>
	
	do_possible_sche();  
300058a0:	ebfffafb 	bl	30004494 <raw_sched>
300058a4:	e3a00000 	mov	r0, #0

 	return RAW_SUCCESS;
300058a8:	eaffffe1 	b	30005834 <raw_task_priority_change+0xbc>
	
	error_exit:
	RAW_CRITICAL_EXIT();
300058ac:	eb00030e 	bl	300064ec <hybrid_int_process>
	return error;
300058b0:	e1dd00b6 	ldrh	r0, [sp, #6]
300058b4:	eaffffde 	b	30005834 <raw_task_priority_change+0xbc>
	
	if (error != RAW_SUCCESS) {
		goto error_exit;
	}

	RAW_CRITICAL_EXIT();
300058b8:	eb00030b 	bl	300064ec <hybrid_int_process>
300058bc:	eafffff4 	b	30005894 <raw_task_priority_change+0x11c>
300058c0:	30013e61 	andcc	r3, r1, r1, ror #28
300058c4:	300142c0 	andcc	r4, r1, r0, asr #5

300058c8 <task_resume>:
	
	return task_resume(task_ptr);
}

RAW_U16 task_resume(RAW_TASK_OBJ *task_ptr)
{
300058c8:	e92d4070 	push	{r4, r5, r6, lr}

	RAW_SR_ALLOC();
	
	RAW_CRITICAL_ENTER();
300058cc:	e59f5194 	ldr	r5, [pc, #404]	; 30005a68 <task_resume+0x1a0>
	
	return task_resume(task_ptr);
}

RAW_U16 task_resume(RAW_TASK_OBJ *task_ptr)
{
300058d0:	e1a04000 	mov	r4, r0

	RAW_SR_ALLOC();
	
	RAW_CRITICAL_ENTER();
300058d4:	eb0008c7 	bl	30007bf8 <OS_CPU_SR_Save>
300058d8:	e5d53000 	ldrb	r3, [r5]
300058dc:	e2833001 	add	r3, r3, #1
300058e0:	e5c53000 	strb	r3, [r5]
300058e4:	eb0008cb 	bl	30007c18 <OS_CPU_SR_Restore>
		
	switch (task_ptr->task_state) {
300058e8:	e5d43050 	ldrb	r3, [r4, #80]	; 0x50
300058ec:	e3530007 	cmp	r3, #7
300058f0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
300058f4:	ea00001f 	b	30005978 <task_resume+0xb0>
300058f8:	300059a4 	andcc	r5, r0, r4, lsr #19
300058fc:	300059a4 	andcc	r5, r0, r4, lsr #19
30005900:	300059a4 	andcc	r5, r0, r4, lsr #19
30005904:	300059d0 	ldrdcc	r5, [r0], -r0
30005908:	30005a04 	andcc	r5, r0, r4, lsl #20
3000590c:	30005a30 	andcc	r5, r0, r0, lsr sl
30005910:	300059a4 	andcc	r5, r0, r4, lsr #19
30005914:	30005918 	andcc	r5, r0, r8, lsl r9

			break;

		case RAW_DLY_SUSPENDED:
			
			task_ptr->suspend_count--;
30005918:	e5d4301b 	ldrb	r3, [r4, #27]
3000591c:	e2433001 	sub	r3, r3, #1
30005920:	e20330ff 	and	r3, r3, #255	; 0xff
			
			if (task_ptr->suspend_count == 0) {
30005924:	e3530000 	cmp	r3, #0

			break;

		case RAW_DLY_SUSPENDED:
			
			task_ptr->suspend_count--;
30005928:	e5c4301b 	strb	r3, [r4, #27]
			
			if (task_ptr->suspend_count == 0) {
						
				task_ptr->task_state = RAW_DLY;
3000592c:	03a03006 	moveq	r3, #6
30005930:	05c43050 	strbeq	r3, [r4, #80]	; 0x50
			
			return RAW_STATE_UNKNOWN;

	}

	RAW_CRITICAL_EXIT();
30005934:	e5d53000 	ldrb	r3, [r5]
30005938:	e59f5128 	ldr	r5, [pc, #296]	; 30005a68 <task_resume+0x1a0>
3000593c:	e3530001 	cmp	r3, #1
30005940:	0a00002d 	beq	300059fc <task_resume+0x134>
30005944:	eb0008ab 	bl	30007bf8 <OS_CPU_SR_Save>
30005948:	e5d53000 	ldrb	r3, [r5]
3000594c:	e2433001 	sub	r3, r3, #1
30005950:	e5c53000 	strb	r3, [r5]
30005954:	eb0008af 	bl	30007c18 <OS_CPU_SR_Restore>

	TRACE_TASK_RESUME(raw_task_active, task_ptr);
30005958:	e59f310c 	ldr	r3, [pc, #268]	; 30005a6c <task_resume+0x1a4>
3000595c:	e1a01004 	mov	r1, r4
30005960:	e5930000 	ldr	r0, [r3]
30005964:	eb00086f 	bl	30007b28 <_trace_task_resume>

	do_possible_sche();   
30005968:	ebfffac9 	bl	30004494 <raw_sched>
3000596c:	e3a00000 	mov	r0, #0

	return RAW_SUCCESS;

}
30005970:	e8bd4070 	pop	{r4, r5, r6, lr}
30005974:	e12fff1e 	bx	lr
			
			break;
			
		default:
			
			RAW_CRITICAL_EXIT();
30005978:	e5d53000 	ldrb	r3, [r5]
3000597c:	e59f40e4 	ldr	r4, [pc, #228]	; 30005a68 <task_resume+0x1a0>
30005980:	e3530001 	cmp	r3, #1
30005984:	0a000034 	beq	30005a5c <task_resume+0x194>
30005988:	eb00089a 	bl	30007bf8 <OS_CPU_SR_Save>
3000598c:	e5d43000 	ldrb	r3, [r4]
30005990:	e2433001 	sub	r3, r3, #1
30005994:	e5c43000 	strb	r3, [r4]
30005998:	eb00089e 	bl	30007c18 <OS_CPU_SR_Restore>
3000599c:	e3a00010 	mov	r0, #16
300059a0:	eafffff2 	b	30005970 <task_resume+0xa8>
		case RAW_RDY:
		case RAW_DLY:
		case RAW_PEND:
		case RAW_PEND_TIMEOUT:
			
			RAW_CRITICAL_EXIT();
300059a4:	e5d53000 	ldrb	r3, [r5]
300059a8:	e59f40b8 	ldr	r4, [pc, #184]	; 30005a68 <task_resume+0x1a0>
300059ac:	e3530001 	cmp	r3, #1
300059b0:	0a000026 	beq	30005a50 <task_resume+0x188>
300059b4:	eb00088f 	bl	30007bf8 <OS_CPU_SR_Save>
300059b8:	e5d43000 	ldrb	r3, [r4]
300059bc:	e2433001 	sub	r3, r3, #1
300059c0:	e5c43000 	strb	r3, [r4]
300059c4:	eb000893 	bl	30007c18 <OS_CPU_SR_Restore>
300059c8:	e3a00012 	mov	r0, #18
300059cc:	eaffffe7 	b	30005970 <task_resume+0xa8>
			
			break;

		case RAW_PEND_TIMEOUT_SUSPENDED:
			
			task_ptr->suspend_count--;
300059d0:	e5d4301b 	ldrb	r3, [r4, #27]
300059d4:	e2433001 	sub	r3, r3, #1
300059d8:	e20330ff 	and	r3, r3, #255	; 0xff

			if (task_ptr->suspend_count == 0) {
300059dc:	e3530000 	cmp	r3, #0
			
			break;

		case RAW_PEND_TIMEOUT_SUSPENDED:
			
			task_ptr->suspend_count--;
300059e0:	e5c4301b 	strb	r3, [r4, #27]

			if (task_ptr->suspend_count == 0) {
				task_ptr->task_state = RAW_PEND_TIMEOUT;
300059e4:	03a03002 	moveq	r3, #2
300059e8:	05c43050 	strbeq	r3, [r4, #80]	; 0x50
			
			return RAW_STATE_UNKNOWN;

	}

	RAW_CRITICAL_EXIT();
300059ec:	e5d53000 	ldrb	r3, [r5]
300059f0:	e59f5070 	ldr	r5, [pc, #112]	; 30005a68 <task_resume+0x1a0>
300059f4:	e3530001 	cmp	r3, #1
300059f8:	1affffd1 	bne	30005944 <task_resume+0x7c>
300059fc:	eb0002ba 	bl	300064ec <hybrid_int_process>
30005a00:	eaffffd4 	b	30005958 <task_resume+0x90>
			return HAS_NOT_SUSPENDED;
			

		case RAW_SUSPENDED:

			task_ptr->suspend_count--;
30005a04:	e5d4301b 	ldrb	r3, [r4, #27]
30005a08:	e2433001 	sub	r3, r3, #1
30005a0c:	e20330ff 	and	r3, r3, #255	; 0xff

			if (task_ptr->suspend_count == 0) {
30005a10:	e3530000 	cmp	r3, #0
			return HAS_NOT_SUSPENDED;
			

		case RAW_SUSPENDED:

			task_ptr->suspend_count--;
30005a14:	e5c4301b 	strb	r3, [r4, #27]

			if (task_ptr->suspend_count == 0) {
30005a18:	1affffc5 	bne	30005934 <task_resume+0x6c>

				/*Make task ready*/
				task_ptr->task_state = RAW_RDY;
30005a1c:	e5c43050 	strb	r3, [r4, #80]	; 0x50
				add_ready_list(&raw_ready_queue, task_ptr);
30005a20:	e59f0048 	ldr	r0, [pc, #72]	; 30005a70 <task_resume+0x1a8>
30005a24:	e1a01004 	mov	r1, r4
30005a28:	ebfff24e 	bl	30002368 <add_ready_list>
30005a2c:	eaffffc0 	b	30005934 <task_resume+0x6c>
			
			break;

		case RAW_PEND_SUSPENDED:

			task_ptr->suspend_count--;
30005a30:	e5d4301b 	ldrb	r3, [r4, #27]
30005a34:	e2433001 	sub	r3, r3, #1
30005a38:	e20330ff 	and	r3, r3, #255	; 0xff

			if (task_ptr->suspend_count == 0) {
30005a3c:	e3530000 	cmp	r3, #0
			
			break;

		case RAW_PEND_SUSPENDED:

			task_ptr->suspend_count--;
30005a40:	e5c4301b 	strb	r3, [r4, #27]

			if (task_ptr->suspend_count == 0) {
				task_ptr->task_state = RAW_PEND;
30005a44:	03a03001 	moveq	r3, #1
30005a48:	05c43050 	strbeq	r3, [r4, #80]	; 0x50
30005a4c:	eaffffb8 	b	30005934 <task_resume+0x6c>
		case RAW_RDY:
		case RAW_DLY:
		case RAW_PEND:
		case RAW_PEND_TIMEOUT:
			
			RAW_CRITICAL_EXIT();
30005a50:	eb0002a5 	bl	300064ec <hybrid_int_process>
30005a54:	e3a00012 	mov	r0, #18
30005a58:	eaffffc4 	b	30005970 <task_resume+0xa8>
			
			break;
			
		default:
			
			RAW_CRITICAL_EXIT();
30005a5c:	eb0002a2 	bl	300064ec <hybrid_int_process>
30005a60:	e3a00010 	mov	r0, #16
30005a64:	eaffffc1 	b	30005970 <task_resume+0xa8>
30005a68:	300142c0 	andcc	r4, r1, r0, asr #5
30005a6c:	30013838 	andcc	r3, r1, r8, lsr r8
30005a70:	30013c4c 	andcc	r3, r1, ip, asr #24

30005a74 <raw_task_resume>:
*/

#if (CONFIG_RAW_TASK_RESUME > 0)

RAW_U16 raw_task_resume(RAW_TASK_OBJ *task_ptr)
{
30005a74:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	#if (RAW_TASK_FUNCTION_CHECK > 0)
	
	if (task_ptr == 0) {
30005a78:	e3500000 	cmp	r0, #0
*/

#if (CONFIG_RAW_TASK_RESUME > 0)

RAW_U16 raw_task_resume(RAW_TASK_OBJ *task_ptr)
{
30005a7c:	e24dd00c 	sub	sp, sp, #12
	#if (RAW_TASK_FUNCTION_CHECK > 0)
	
	if (task_ptr == 0) {
30005a80:	03a00025 	moveq	r0, #37	; 0x25
30005a84:	0a000012 	beq	30005ad4 <raw_task_resume+0x60>
	
	#endif	

	#if (CONFIG_RAW_ZERO_INTERRUPT > 0)

	if (raw_int_nesting && raw_sched_lock) {
30005a88:	e59f3050 	ldr	r3, [pc, #80]	; 30005ae0 <raw_task_resume+0x6c>
30005a8c:	e5d33000 	ldrb	r3, [r3]
30005a90:	e3530000 	cmp	r3, #0
30005a94:	0a000003 	beq	30005aa8 <raw_task_resume+0x34>
30005a98:	e59f3044 	ldr	r3, [pc, #68]	; 30005ae4 <raw_task_resume+0x70>
30005a9c:	e5d33000 	ldrb	r3, [r3]
30005aa0:	e3530000 	cmp	r3, #0
30005aa4:	1a000002 	bne	30005ab4 <raw_task_resume+0x40>
	}
	
	#endif
	
	return task_resume(task_ptr);
}
30005aa8:	e28dd00c 	add	sp, sp, #12
30005aac:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
		return int_msg_post(RAW_TYPE_RESUME, task_ptr, 0, 0, 0, 0);
	}
	
	#endif
	
	return task_resume(task_ptr);
30005ab0:	eaffff84 	b	300058c8 <task_resume>
	#endif	

	#if (CONFIG_RAW_ZERO_INTERRUPT > 0)

	if (raw_int_nesting && raw_sched_lock) {
		return int_msg_post(RAW_TYPE_RESUME, task_ptr, 0, 0, 0, 0);
30005ab4:	e3a0c000 	mov	ip, #0
30005ab8:	e1a01000 	mov	r1, r0
30005abc:	e1a0200c 	mov	r2, ip
30005ac0:	e3a00007 	mov	r0, #7
30005ac4:	e1a0300c 	mov	r3, ip
30005ac8:	e58dc000 	str	ip, [sp]
30005acc:	e58dc004 	str	ip, [sp, #4]
30005ad0:	eb000319 	bl	3000673c <int_msg_post>
	}
	
	#endif
	
	return task_resume(task_ptr);
}
30005ad4:	e28dd00c 	add	sp, sp, #12
30005ad8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
30005adc:	e12fff1e 	bx	lr
30005ae0:	30013e61 	andcc	r3, r1, r1, ror #28
30005ae4:	300142c0 	andcc	r4, r1, r0, asr #5

30005ae8 <task_suspend>:
}



RAW_U16 task_suspend(RAW_TASK_OBJ *task_ptr)
{
30005ae8:	e92d4070 	push	{r4, r5, r6, lr}
	RAW_SR_ALLOC();
	
	RAW_CRITICAL_ENTER();
30005aec:	e59f51b0 	ldr	r5, [pc, #432]	; 30005ca4 <task_suspend+0x1bc>
}



RAW_U16 task_suspend(RAW_TASK_OBJ *task_ptr)
{
30005af0:	e1a04000 	mov	r4, r0
	RAW_SR_ALLOC();
	
	RAW_CRITICAL_ENTER();
30005af4:	eb00083f 	bl	30007bf8 <OS_CPU_SR_Save>
30005af8:	e5d53000 	ldrb	r3, [r5]

	if (task_ptr == raw_task_active) {
30005afc:	e59f61a4 	ldr	r6, [pc, #420]	; 30005ca8 <task_suspend+0x1c0>

RAW_U16 task_suspend(RAW_TASK_OBJ *task_ptr)
{
	RAW_SR_ALLOC();
	
	RAW_CRITICAL_ENTER();
30005b00:	e2833001 	add	r3, r3, #1
30005b04:	e5c53000 	strb	r3, [r5]
30005b08:	eb000842 	bl	30007c18 <OS_CPU_SR_Restore>

	if (task_ptr == raw_task_active) {
30005b0c:	e5963000 	ldr	r3, [r6]
30005b10:	e1540003 	cmp	r4, r3
30005b14:	0a000052 	beq	30005c64 <task_suspend+0x17c>
		
		SYSTEM_LOCK_PROCESS();
	}

	switch (task_ptr->task_state) {
30005b18:	e5d43050 	ldrb	r3, [r4, #80]	; 0x50
30005b1c:	e3530007 	cmp	r3, #7
30005b20:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
30005b24:	ea00001b 	b	30005b98 <task_suspend+0xb0>
30005b28:	30005bc4 	andcc	r5, r0, r4, asr #23
30005b2c:	30005bf8 	strdcc	r5, [r0], -r8
30005b30:	30005c0c 	andcc	r5, r0, ip, lsl #24
30005b34:	30005c20 	andcc	r5, r0, r0, lsr #24
30005b38:	30005c20 	andcc	r5, r0, r0, lsr #24
30005b3c:	30005c20 	andcc	r5, r0, r0, lsr #24
30005b40:	30005b48 	andcc	r5, r0, r8, asr #22
30005b44:	30005c20 	andcc	r5, r0, r0, lsr #24
			task_ptr->task_state  =  RAW_SUSPENDED;
			remove_ready_list(&raw_ready_queue, task_ptr);
			break;

		case RAW_DLY:
			task_ptr->suspend_count = 1;
30005b48:	e3a03001 	mov	r3, #1
30005b4c:	e5c4301b 	strb	r3, [r4, #27]
			task_ptr->task_state  = RAW_DLY_SUSPENDED;
30005b50:	e3a03007 	mov	r3, #7
30005b54:	e5c43050 	strb	r3, [r4, #80]	; 0x50
			RAW_CRITICAL_EXIT();
			
			return RAW_STATE_UNKNOWN;
	}

	RAW_CRITICAL_EXIT();
30005b58:	e5d53000 	ldrb	r3, [r5]
30005b5c:	e59f5140 	ldr	r5, [pc, #320]	; 30005ca4 <task_suspend+0x1bc>
30005b60:	e3530001 	cmp	r3, #1
30005b64:	0a000021 	beq	30005bf0 <task_suspend+0x108>
30005b68:	eb000822 	bl	30007bf8 <OS_CPU_SR_Save>
30005b6c:	e5d53000 	ldrb	r3, [r5]
30005b70:	e2433001 	sub	r3, r3, #1
30005b74:	e5c53000 	strb	r3, [r5]
30005b78:	eb000826 	bl	30007c18 <OS_CPU_SR_Restore>

	TRACE_TASK_SUSPEND(raw_task_active, task_ptr);
30005b7c:	e5960000 	ldr	r0, [r6]
30005b80:	e1a01004 	mov	r1, r4
30005b84:	eb0007e6 	bl	30007b24 <_trace_task_suspend>
	
	#if (CONFIG_RAW_SYSTEM_PREEMPTABLE > 0)
	raw_sched();
30005b88:	ebfffa41 	bl	30004494 <raw_sched>
30005b8c:	e3a00000 	mov	r0, #0
	
	#endif     

	return RAW_SUCCESS;

}
30005b90:	e8bd4070 	pop	{r4, r5, r6, lr}
30005b94:	e12fff1e 	bx	lr

			break;
			
		default:
			
			RAW_CRITICAL_EXIT();
30005b98:	e5d53000 	ldrb	r3, [r5]
30005b9c:	e59f4100 	ldr	r4, [pc, #256]	; 30005ca4 <task_suspend+0x1bc>
30005ba0:	e3530001 	cmp	r3, #1
30005ba4:	0a000038 	beq	30005c8c <task_suspend+0x1a4>
30005ba8:	eb000812 	bl	30007bf8 <OS_CPU_SR_Save>
30005bac:	e5d43000 	ldrb	r3, [r4]
30005bb0:	e2433001 	sub	r3, r3, #1
30005bb4:	e5c43000 	strb	r3, [r4]
30005bb8:	eb000816 	bl	30007c18 <OS_CPU_SR_Restore>
30005bbc:	e3a00010 	mov	r0, #16
30005bc0:	eafffff2 	b	30005b90 <task_suspend+0xa8>
		SYSTEM_LOCK_PROCESS();
	}

	switch (task_ptr->task_state) {
		case RAW_RDY:
			task_ptr->suspend_count = 1;
30005bc4:	e3a03001 	mov	r3, #1
30005bc8:	e5c4301b 	strb	r3, [r4, #27]
			task_ptr->task_state  =  RAW_SUSPENDED;
30005bcc:	e3a03004 	mov	r3, #4
30005bd0:	e5c43050 	strb	r3, [r4, #80]	; 0x50
			remove_ready_list(&raw_ready_queue, task_ptr);
30005bd4:	e59f00d0 	ldr	r0, [pc, #208]	; 30005cac <task_suspend+0x1c4>
30005bd8:	e1a01004 	mov	r1, r4
30005bdc:	ebfff29f 	bl	30002660 <remove_ready_list>
			RAW_CRITICAL_EXIT();
			
			return RAW_STATE_UNKNOWN;
	}

	RAW_CRITICAL_EXIT();
30005be0:	e5d53000 	ldrb	r3, [r5]
30005be4:	e59f50b8 	ldr	r5, [pc, #184]	; 30005ca4 <task_suspend+0x1bc>
30005be8:	e3530001 	cmp	r3, #1
30005bec:	1affffdd 	bne	30005b68 <task_suspend+0x80>
30005bf0:	eb00023d 	bl	300064ec <hybrid_int_process>
30005bf4:	eaffffe0 	b	30005b7c <task_suspend+0x94>
			task_ptr->suspend_count = 1;
			task_ptr->task_state  = RAW_DLY_SUSPENDED;
			break;

		case RAW_PEND:
			task_ptr->suspend_count = 1;
30005bf8:	e3a03001 	mov	r3, #1
30005bfc:	e5c4301b 	strb	r3, [r4, #27]
			task_ptr->task_state  = RAW_PEND_SUSPENDED;
30005c00:	e3a03005 	mov	r3, #5
30005c04:	e5c43050 	strb	r3, [r4, #80]	; 0x50
			break;
30005c08:	eaffffd2 	b	30005b58 <task_suspend+0x70>
			

		case RAW_PEND_TIMEOUT:
			task_ptr->suspend_count = 1;
30005c0c:	e3a03001 	mov	r3, #1
30005c10:	e5c4301b 	strb	r3, [r4, #27]
			task_ptr->task_state  = RAW_PEND_TIMEOUT_SUSPENDED;
30005c14:	e3a03003 	mov	r3, #3
30005c18:	e5c43050 	strb	r3, [r4, #80]	; 0x50
			break;
30005c1c:	eaffffcd 	b	30005b58 <task_suspend+0x70>
			
		case RAW_SUSPENDED:
		case RAW_DLY_SUSPENDED:
		case RAW_PEND_SUSPENDED:
		case RAW_PEND_TIMEOUT_SUSPENDED:
			task_ptr->suspend_count++;
30005c20:	e5d4301b 	ldrb	r3, [r4, #27]
30005c24:	e2833001 	add	r3, r3, #1
30005c28:	e20330ff 	and	r3, r3, #255	; 0xff
			if (task_ptr->suspend_count >= 250u) {
30005c2c:	e35300f9 	cmp	r3, #249	; 0xf9
			
		case RAW_SUSPENDED:
		case RAW_DLY_SUSPENDED:
		case RAW_PEND_SUSPENDED:
		case RAW_PEND_TIMEOUT_SUSPENDED:
			task_ptr->suspend_count++;
30005c30:	e5c4301b 	strb	r3, [r4, #27]
			if (task_ptr->suspend_count >= 250u) {
30005c34:	9affffc7 	bls	30005b58 <task_suspend+0x70>

				RAW_CRITICAL_EXIT();
30005c38:	e5d53000 	ldrb	r3, [r5]
30005c3c:	e59f4060 	ldr	r4, [pc, #96]	; 30005ca4 <task_suspend+0x1bc>
30005c40:	e3530001 	cmp	r3, #1
30005c44:	0a000013 	beq	30005c98 <task_suspend+0x1b0>
30005c48:	eb0007ea 	bl	30007bf8 <OS_CPU_SR_Save>
30005c4c:	e5d43000 	ldrb	r3, [r4]
30005c50:	e2433001 	sub	r3, r3, #1
30005c54:	e5c43000 	strb	r3, [r4]
30005c58:	eb0007ee 	bl	30007c18 <OS_CPU_SR_Restore>
30005c5c:	e3a00011 	mov	r0, #17
30005c60:	eaffffca 	b	30005b90 <task_suspend+0xa8>
	
	RAW_CRITICAL_ENTER();

	if (task_ptr == raw_task_active) {
		
		SYSTEM_LOCK_PROCESS();
30005c64:	e5d53000 	ldrb	r3, [r5]
30005c68:	e3530001 	cmp	r3, #1
30005c6c:	9affffa9 	bls	30005b18 <task_suspend+0x30>
30005c70:	eb0007e0 	bl	30007bf8 <OS_CPU_SR_Save>
30005c74:	e5d53000 	ldrb	r3, [r5]
30005c78:	e2433001 	sub	r3, r3, #1
30005c7c:	e5c53000 	strb	r3, [r5]
30005c80:	eb0007e4 	bl	30007c18 <OS_CPU_SR_Restore>
30005c84:	e3a00007 	mov	r0, #7
30005c88:	eaffffc0 	b	30005b90 <task_suspend+0xa8>

			break;
			
		default:
			
			RAW_CRITICAL_EXIT();
30005c8c:	eb000216 	bl	300064ec <hybrid_int_process>
30005c90:	e3a00010 	mov	r0, #16
30005c94:	eaffffbd 	b	30005b90 <task_suspend+0xa8>
		case RAW_PEND_SUSPENDED:
		case RAW_PEND_TIMEOUT_SUSPENDED:
			task_ptr->suspend_count++;
			if (task_ptr->suspend_count >= 250u) {

				RAW_CRITICAL_EXIT();
30005c98:	eb000213 	bl	300064ec <hybrid_int_process>
30005c9c:	e3a00011 	mov	r0, #17
30005ca0:	eaffffba 	b	30005b90 <task_suspend+0xa8>
30005ca4:	300142c0 	andcc	r4, r1, r0, asr #5
30005ca8:	30013838 	andcc	r3, r1, r8, lsr r8
30005cac:	30013c4c 	andcc	r3, r1, ip, asr #24

30005cb0 <raw_task_suspend>:
RAW_U16 raw_task_suspend(RAW_TASK_OBJ *task_ptr)
{
	
	#if (RAW_TASK_FUNCTION_CHECK > 0)

	if (raw_int_nesting) {
30005cb0:	e59f203c 	ldr	r2, [pc, #60]	; 30005cf4 <raw_task_suspend+0x44>
************************************************************************************************************************
*/
#if (CONFIG_RAW_TASK_SUSPEND > 0)

RAW_U16 raw_task_suspend(RAW_TASK_OBJ *task_ptr)
{
30005cb4:	e1a03000 	mov	r3, r0
	
	#if (RAW_TASK_FUNCTION_CHECK > 0)

	if (raw_int_nesting) {
30005cb8:	e5d22000 	ldrb	r2, [r2]
30005cbc:	e3520000 	cmp	r2, #0
30005cc0:	13a00027 	movne	r0, #39	; 0x27
30005cc4:	112fff1e 	bxne	lr

		return RAW_NOT_CALLED_BY_ISR;

	}
	
	if (task_ptr == 0) {
30005cc8:	e3530000 	cmp	r3, #0
30005ccc:	03a00025 	moveq	r0, #37	; 0x25
30005cd0:	012fff1e 	bxeq	lr
		return RAW_NULL_OBJECT;
	}
	
	#endif		

	if (task_ptr->priority == IDLE_PRIORITY) {
30005cd4:	e5d33019 	ldrb	r3, [r3, #25]
30005cd8:	e353003d 	cmp	r3, #61	; 0x3d
30005cdc:	0a000001 	beq	30005ce8 <raw_task_suspend+0x38>
		return RAW_SUSPEND_TASK_NOT_ALLOWED;
	}

	#if (CONFIG_RAW_TASK_0 > 0)
	
	if (task_ptr->priority == 0) {
30005ce0:	e3530000 	cmp	r3, #0
30005ce4:	1a000001 	bne	30005cf0 <raw_task_suspend+0x40>
		return RAW_SUSPEND_TASK_NOT_ALLOWED;
	}
	
	#endif
	
	return task_suspend(task_ptr);
30005ce8:	e3a0002e 	mov	r0, #46	; 0x2e
	
}
30005cec:	e12fff1e 	bx	lr
		return RAW_SUSPEND_TASK_NOT_ALLOWED;
	}
	
	#endif
	
	return task_suspend(task_ptr);
30005cf0:	eaffff7c 	b	30005ae8 <task_suspend>
30005cf4:	30013e61 	andcc	r3, r1, r1, ror #28

30005cf8 <raw_sleep>:
************************************************************************************************************************
*/
#if (CONFIG_RAW_TASK_SLEEP > 0)

RAW_U16 raw_sleep(RAW_TICK_TYPE dly) 
{
30005cf8:	e92d4070 	push	{r4, r5, r6, lr}
	
	RAW_SR_ALLOC();

	#if (RAW_TASK_FUNCTION_CHECK > 0)
	
	if (raw_int_nesting) {
30005cfc:	e59f30e4 	ldr	r3, [pc, #228]	; 30005de8 <raw_sleep+0xf0>
************************************************************************************************************************
*/
#if (CONFIG_RAW_TASK_SLEEP > 0)

RAW_U16 raw_sleep(RAW_TICK_TYPE dly) 
{
30005d00:	e1a05000 	mov	r5, r0
	
	RAW_SR_ALLOC();

	#if (RAW_TASK_FUNCTION_CHECK > 0)
	
	if (raw_int_nesting) {
30005d04:	e5d33000 	ldrb	r3, [r3]
30005d08:	e3530000 	cmp	r3, #0
30005d0c:	13a00027 	movne	r0, #39	; 0x27
30005d10:	0a000001 	beq	30005d1c <raw_sleep+0x24>
		error_status = RAW_SUCCESS;

	}
	
	return error_status;
}
30005d14:	e8bd4070 	pop	{r4, r5, r6, lr}
30005d18:	e12fff1e 	bx	lr
		return RAW_NOT_CALLED_BY_ISR;
	}
	
	#endif		
		
	RAW_CRITICAL_ENTER();
30005d1c:	e59f40c8 	ldr	r4, [pc, #200]	; 30005dec <raw_sleep+0xf4>
30005d20:	eb0007b4 	bl	30007bf8 <OS_CPU_SR_Save>
30005d24:	e5d43000 	ldrb	r3, [r4]
30005d28:	e2833001 	add	r3, r3, #1
30005d2c:	e5c43000 	strb	r3, [r4]
30005d30:	eb0007b8 	bl	30007c18 <OS_CPU_SR_Restore>

	if (dly) {
30005d34:	e3550000 	cmp	r5, #0
30005d38:	0a000009 	beq	30005d64 <raw_sleep+0x6c>

		/*system is locked so task can not sleep just return immediately*/
		SYSTEM_LOCK_PROCESS();
30005d3c:	e5d43000 	ldrb	r3, [r4]
30005d40:	e3530001 	cmp	r3, #1
30005d44:	9a00001d 	bls	30005dc0 <raw_sleep+0xc8>
30005d48:	eb0007aa 	bl	30007bf8 <OS_CPU_SR_Save>
30005d4c:	e5d43000 	ldrb	r3, [r4]
30005d50:	e2433001 	sub	r3, r3, #1
30005d54:	e5c43000 	strb	r3, [r4]
30005d58:	eb0007ae 	bl	30007c18 <OS_CPU_SR_Restore>
30005d5c:	e3a00007 	mov	r0, #7
30005d60:	eaffffeb 	b	30005d14 <raw_sleep+0x1c>
		remove_ready_list(&raw_ready_queue, raw_task_active);
	}
	
	else {	
		/*make current task to the end of ready list*/
		 move_to_ready_list_end(&raw_ready_queue, raw_task_active);
30005d64:	e59f6084 	ldr	r6, [pc, #132]	; 30005df0 <raw_sleep+0xf8>
30005d68:	e59f0084 	ldr	r0, [pc, #132]	; 30005df4 <raw_sleep+0xfc>
30005d6c:	e5961000 	ldr	r1, [r6]
30005d70:	ebfff1ac 	bl	30002428 <move_to_ready_list_end>
	}

	RAW_CRITICAL_EXIT();
30005d74:	e5d43000 	ldrb	r3, [r4]
30005d78:	e59f406c 	ldr	r4, [pc, #108]	; 30005dec <raw_sleep+0xf4>
30005d7c:	e3530001 	cmp	r3, #1
30005d80:	0a00000c 	beq	30005db8 <raw_sleep+0xc0>
30005d84:	eb00079b 	bl	30007bf8 <OS_CPU_SR_Save>
30005d88:	e5d43000 	ldrb	r3, [r4]
30005d8c:	e2433001 	sub	r3, r3, #1
30005d90:	e5c43000 	strb	r3, [r4]
30005d94:	eb00079f 	bl	30007c18 <OS_CPU_SR_Restore>

	raw_sched();   
30005d98:	ebfff9bd 	bl	30004494 <raw_sched>

	if (dly) {
30005d9c:	e3550000 	cmp	r5, #0
30005da0:	01a00005 	moveq	r0, r5
30005da4:	0affffda 	beq	30005d14 <raw_sleep+0x1c>
		/*task is timeout after sleep*/
		error_status = block_state_post_process(raw_task_active, 0);
30005da8:	e5960000 	ldr	r0, [r6]
30005dac:	e3a01000 	mov	r1, #0
30005db0:	ebfffbb7 	bl	30004c94 <block_state_post_process>
30005db4:	eaffffd6 	b	30005d14 <raw_sleep+0x1c>
	else {	
		/*make current task to the end of ready list*/
		 move_to_ready_list_end(&raw_ready_queue, raw_task_active);
	}

	RAW_CRITICAL_EXIT();
30005db8:	eb0001cb 	bl	300064ec <hybrid_int_process>
30005dbc:	eafffff5 	b	30005d98 <raw_sleep+0xa0>
	if (dly) {

		/*system is locked so task can not sleep just return immediately*/
		SYSTEM_LOCK_PROCESS();

		raw_task_active->task_state = RAW_DLY;
30005dc0:	e59f6028 	ldr	r6, [pc, #40]	; 30005df0 <raw_sleep+0xf8>
30005dc4:	e3a03006 	mov	r3, #6
30005dc8:	e5960000 	ldr	r0, [r6]

		tick_list_insert(raw_task_active, dly);
30005dcc:	e1a01005 	mov	r1, r5
	if (dly) {

		/*system is locked so task can not sleep just return immediately*/
		SYSTEM_LOCK_PROCESS();

		raw_task_active->task_state = RAW_DLY;
30005dd0:	e5c03050 	strb	r3, [r0, #80]	; 0x50

		tick_list_insert(raw_task_active, dly);
30005dd4:	eb0002f8 	bl	300069bc <tick_list_insert>
		           
		remove_ready_list(&raw_ready_queue, raw_task_active);
30005dd8:	e59f0014 	ldr	r0, [pc, #20]	; 30005df4 <raw_sleep+0xfc>
30005ddc:	e5961000 	ldr	r1, [r6]
30005de0:	ebfff21e 	bl	30002660 <remove_ready_list>
30005de4:	eaffffe2 	b	30005d74 <raw_sleep+0x7c>
30005de8:	30013e61 	andcc	r3, r1, r1, ror #28
30005dec:	300142c0 	andcc	r4, r1, r0, asr #5
30005df0:	30013838 	andcc	r3, r1, r8, lsr r8
30005df4:	30013c4c 	andcc	r3, r1, ip, asr #24

30005df8 <raw_time_sleep>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_time_sleep(RAW_U16 hours, RAW_U16 minutes, RAW_U16 seconds, RAW_U32 milli)
{
30005df8:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	RAW_TICK_TYPE tick_rate;
	RAW_TICK_TYPE ticks;

	#if (RAW_TASK_FUNCTION_CHECK > 0)

	if (raw_int_nesting) {
30005dfc:	e59fc080 	ldr	ip, [pc, #128]	; 30005e84 <raw_time_sleep+0x8c>
30005e00:	e5dcc000 	ldrb	ip, [ip]
30005e04:	e35c0000 	cmp	ip, #0
30005e08:	13a00027 	movne	r0, #39	; 0x27
30005e0c:	1a000018 	bne	30005e74 <raw_time_sleep+0x7c>
		return RAW_NOT_CALLED_BY_ISR;
	}

	#endif	

	if (minutes > 9999u) {
30005e10:	e59fc070 	ldr	ip, [pc, #112]	; 30005e88 <raw_time_sleep+0x90>
30005e14:	e151000c 	cmp	r1, ip
30005e18:	83a0003b 	movhi	r0, #59	; 0x3b
30005e1c:	8a000014 	bhi	30005e74 <raw_time_sleep+0x7c>

		return RAW_INVALID_MINUTES;
	}
	
	if (hours > 999u) {
30005e20:	e3500ffa 	cmp	r0, #1000	; 0x3e8
30005e24:	23a0003a 	movcs	r0, #58	; 0x3a
30005e28:	2a000011 	bcs	30005e74 <raw_time_sleep+0x7c>
		return RAW_INVALID_HOURS;
	}

	tick_rate = RAW_TICKS_PER_SECOND;
	
	ticks = (hours * 3600u + minutes * 60u + seconds) * tick_rate
30005e2c:	e1a0c301 	lsl	ip, r1, #6
30005e30:	e2833005 	add	r3, r3, #5
30005e34:	e04c1101 	sub	r1, ip, r1, lsl #2
30005e38:	e0833103 	add	r3, r3, r3, lsl #2
30005e3c:	e060c180 	rsb	ip, r0, r0, lsl #3
30005e40:	e0812002 	add	r2, r1, r2
30005e44:	e0833103 	add	r3, r3, r3, lsl #2
30005e48:	e59f103c 	ldr	r1, [pc, #60]	; 30005e8c <raw_time_sleep+0x94>
30005e4c:	e080028c 	add	r0, r0, ip, lsl #5
30005e50:	e1a03103 	lsl	r3, r3, #2
30005e54:	e08c4391 	umull	r4, ip, r1, r3
30005e58:	e0823200 	add	r3, r2, r0, lsl #4
30005e5c:	e0833103 	add	r3, r3, r3, lsl #2
30005e60:	e0833103 	add	r3, r3, r3, lsl #2
30005e64:	e1a03103 	lsl	r3, r3, #2
		+ (tick_rate * (milli + 500u / tick_rate)) / 1000u;

	if (ticks) {
30005e68:	e093032c 	adds	r0, r3, ip, lsr #6
30005e6c:	03a0003c 	moveq	r0, #60	; 0x3c
30005e70:	1a000001 	bne	30005e7c <raw_time_sleep+0x84>

	} 
	
	return RAW_TIME_ZERO_SLEEP;
		
}
30005e74:	e8bd0010 	pop	{r4}
30005e78:	e12fff1e 	bx	lr
30005e7c:	e8bd0010 	pop	{r4}
	ticks = (hours * 3600u + minutes * 60u + seconds) * tick_rate
		+ (tick_rate * (milli + 500u / tick_rate)) / 1000u;

	if (ticks) {

		return raw_sleep(ticks);
30005e80:	eaffff9c 	b	30005cf8 <raw_sleep>
30005e84:	30013e61 	andcc	r3, r1, r1, ror #28
30005e88:	0000270f 	andeq	r2, r0, pc, lsl #14
30005e8c:	10624dd3 	ldrdne	r4, [r2], #-211	; 0xffffff2d

30005e90 <raw_task_create>:

RAW_U16 raw_task_create(RAW_TASK_OBJ  *task_obj, RAW_U8  *task_name,  RAW_VOID   *task_arg, 
                             RAW_U8  task_prio,  RAW_U32  time_slice,  PORT_STACK  *task_stack_base, 
                             RAW_U32 stack_size, RAW_TASK_ENTRY task_entry, RAW_U8 auto_start)
                                      
{
30005e90:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	RAW_SR_ALLOC();
	
	#if (RAW_TASK_FUNCTION_CHECK > 0)

	if (task_obj == 0) {
30005e94:	e2504000 	subs	r4, r0, #0

RAW_U16 raw_task_create(RAW_TASK_OBJ  *task_obj, RAW_U8  *task_name,  RAW_VOID   *task_arg, 
                             RAW_U8  task_prio,  RAW_U32  time_slice,  PORT_STACK  *task_stack_base, 
                             RAW_U32 stack_size, RAW_TASK_ENTRY task_entry, RAW_U8 auto_start)
                                      
{
30005e98:	e24dd00c 	sub	sp, sp, #12
30005e9c:	e1a0b001 	mov	fp, r1
30005ea0:	e1a09002 	mov	r9, r2
30005ea4:	e1a06003 	mov	r6, r3
30005ea8:	e59da034 	ldr	sl, [sp, #52]	; 0x34
30005eac:	e59d5038 	ldr	r5, [sp, #56]	; 0x38
30005eb0:	e5dd7040 	ldrb	r7, [sp, #64]	; 0x40
	
	RAW_SR_ALLOC();
	
	#if (RAW_TASK_FUNCTION_CHECK > 0)

	if (task_obj == 0) {
30005eb4:	03a00025 	moveq	r0, #37	; 0x25
30005eb8:	0a00000c 	beq	30005ef0 <raw_task_create+0x60>
		return RAW_NULL_OBJECT;
	}
	
	if (task_prio >= CONFIG_RAW_PRIO_MAX) {
30005ebc:	e353003d 	cmp	r3, #61	; 0x3d
30005ec0:	83a00013 	movhi	r0, #19
30005ec4:	8a000009 	bhi	30005ef0 <raw_task_create+0x60>
		return RAW_BYOND_MAX_PRIORITY;
	}
	
	if (task_stack_base == 0) {
30005ec8:	e35a0000 	cmp	sl, #0
30005ecc:	0a00007c 	beq	300060c4 <raw_task_create+0x234>
		return RAW_NULL_POINTER;
	}

	if (task_entry == 0) {
30005ed0:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
30005ed4:	e3530000 	cmp	r3, #0
30005ed8:	0a000079 	beq	300060c4 <raw_task_create+0x234>
		return RAW_NULL_POINTER;
	}

	if (raw_int_nesting) {
30005edc:	e59f3290 	ldr	r3, [pc, #656]	; 30006174 <raw_task_create+0x2e4>
30005ee0:	e5d33000 	ldrb	r3, [r3]
30005ee4:	e3530000 	cmp	r3, #0
30005ee8:	13a00027 	movne	r0, #39	; 0x27
30005eec:	0a000002 	beq	30005efc <raw_task_create+0x6c>
		do_possible_sche();
	}
	
	return RAW_SUCCESS;
          
}
30005ef0:	e28dd00c 	add	sp, sp, #12
30005ef4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
30005ef8:	e12fff1e 	bx	lr
		return RAW_NOT_CALLED_BY_ISR;
	}
	
	#endif

	RAW_CRITICAL_ENTER();
30005efc:	e59f8274 	ldr	r8, [pc, #628]	; 30006178 <raw_task_create+0x2e8>
30005f00:	eb00073c 	bl	30007bf8 <OS_CPU_SR_Save>
30005f04:	e5d83000 	ldrb	r3, [r8]
30005f08:	e2833001 	add	r3, r3, #1
30005f0c:	e5c83000 	strb	r3, [r8]
30005f10:	eb000740 	bl	30007c18 <OS_CPU_SR_Restore>
	
	 if (task_prio == IDLE_PRIORITY) {
30005f14:	e356003d 	cmp	r6, #61	; 0x3d
30005f18:	0a00005b 	beq	3000608c <raw_task_create+0x1fc>
	 	idle_task_exit = 1u;
	}

	#if (CONFIG_RAW_TASK_0 > 0)
	
	 if (task_prio == 0) {
30005f1c:	e3560000 	cmp	r6, #0
30005f20:	1a000005 	bne	30005f3c <raw_task_create+0xac>
	 	
	 	if (task_0_exit) {
30005f24:	e59f3250 	ldr	r3, [pc, #592]	; 3000617c <raw_task_create+0x2ec>
30005f28:	e5d32000 	ldrb	r2, [r3]
30005f2c:	e3520000 	cmp	r2, #0
30005f30:	1a000065 	bne	300060cc <raw_task_create+0x23c>
			RAW_CRITICAL_EXIT();
			return RAW_TASK_0_EXIT;
				
	 	}
		
	 	task_0_exit = 1u;
30005f34:	e3a02001 	mov	r2, #1
30005f38:	e5c32000 	strb	r2, [r3]
	}

	#endif
	

	RAW_CRITICAL_EXIT();
30005f3c:	e5d82000 	ldrb	r2, [r8]
30005f40:	e59f3230 	ldr	r3, [pc, #560]	; 30006178 <raw_task_create+0x2e8>
30005f44:	e3520001 	cmp	r2, #1
30005f48:	0a00006d 	beq	30006104 <raw_task_create+0x274>
30005f4c:	e58d3004 	str	r3, [sp, #4]
30005f50:	eb000728 	bl	30007bf8 <OS_CPU_SR_Save>
30005f54:	e59d3004 	ldr	r3, [sp, #4]
30005f58:	e5d32000 	ldrb	r2, [r3]
30005f5c:	e2422001 	sub	r2, r2, #1
30005f60:	e5c32000 	strb	r2, [r3]
30005f64:	eb00072b 	bl	30007c18 <OS_CPU_SR_Restore>
	
 	raw_memset(task_obj, 0, sizeof(RAW_TASK_OBJ));
30005f68:	e1a00004 	mov	r0, r4
30005f6c:	e3a01000 	mov	r1, #0
30005f70:	e3a0206c 	mov	r2, #108	; 0x6c
30005f74:	ebfffb5c 	bl	30004cec <raw_memset>

	#if (CONFIG_SCHED_FIFO_RR > 0)
	
	if (time_slice) {
30005f78:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
		task_obj->task_state = RAW_SUSPENDED;
		task_obj->suspend_count = 1u;
	}

	/*init all the stack element to 0*/
	task_obj->task_stack_base = task_stack_base;
30005f7c:	e584a02c 	str	sl, [r4, #44]	; 0x2c
	
 	raw_memset(task_obj, 0, sizeof(RAW_TASK_OBJ));

	#if (CONFIG_SCHED_FIFO_RR > 0)
	
	if (time_slice) {
30005f80:	e3530000 	cmp	r3, #0
		
	}
	
	else  {
		
		task_obj->time_total        = TIME_SLICE_DEFAULT;
30005f84:	03a03032 	moveq	r3, #50	; 0x32
30005f88:	05843014 	streq	r3, [r4, #20]
 	raw_memset(task_obj, 0, sizeof(RAW_TASK_OBJ));

	#if (CONFIG_SCHED_FIFO_RR > 0)
	
	if (time_slice) {
		task_obj->time_total        = time_slice;
30005f8c:	15843014 	strne	r3, [r4, #20]
		
	}
	
	else  {
		
		task_obj->time_total        = TIME_SLICE_DEFAULT;
30005f90:	058d3030 	streq	r3, [sp, #48]	; 0x30
	}

	task_obj->time_slice = task_obj->time_total;
30005f94:	e59d3030 	ldr	r3, [sp, #48]	; 0x30

	task_obj->sched_way = SCHED_RR;

	#endif
	
	if (auto_start) {
30005f98:	e3570000 	cmp	r7, #0
	else  {
		
		task_obj->time_total        = TIME_SLICE_DEFAULT;
	}

	task_obj->time_slice = task_obj->time_total;
30005f9c:	e5843010 	str	r3, [r4, #16]

	task_obj->sched_way = SCHED_RR;
30005fa0:	e3a03002 	mov	r3, #2
30005fa4:	e5c43018 	strb	r3, [r4, #24]
	if (auto_start) {
		task_obj->task_state = RAW_RDY;
	}
	
	else {
		task_obj->task_state = RAW_SUSPENDED;
30005fa8:	03a03004 	moveq	r3, #4
	task_obj->sched_way = SCHED_RR;

	#endif
	
	if (auto_start) {
		task_obj->task_state = RAW_RDY;
30005fac:	13a03000 	movne	r3, #0
	}
	
	else {
		task_obj->task_state = RAW_SUSPENDED;
30005fb0:	05c43050 	strbeq	r3, [r4, #80]	; 0x50
		task_obj->suspend_count = 1u;
30005fb4:	03a03001 	moveq	r3, #1
	task_obj->sched_way = SCHED_RR;

	#endif
	
	if (auto_start) {
		task_obj->task_state = RAW_RDY;
30005fb8:	15c43050 	strbne	r3, [r4, #80]	; 0x50
	}
	
	else {
		task_obj->task_state = RAW_SUSPENDED;
		task_obj->suspend_count = 1u;
30005fbc:	05c4301b 	strbeq	r3, [r4, #27]

	/*init all the stack element to 0*/
	task_obj->task_stack_base = task_stack_base;
	p_stack = task_stack_base;

	for (i = 0; i < stack_size; i++) {                           
30005fc0:	e3550000 	cmp	r5, #0
30005fc4:	0a000005 	beq	30005fe0 <raw_task_create+0x150>
30005fc8:	e3a03000 	mov	r3, #0
		*p_stack++ = 0;                                            
30005fcc:	e1a02003 	mov	r2, r3
30005fd0:	e78a2103 	str	r2, [sl, r3, lsl #2]

	/*init all the stack element to 0*/
	task_obj->task_stack_base = task_stack_base;
	p_stack = task_stack_base;

	for (i = 0; i < stack_size; i++) {                           
30005fd4:	e2833001 	add	r3, r3, #1
30005fd8:	e1550003 	cmp	r5, r3
30005fdc:	8afffffb 	bhi	30005fd0 <raw_task_create+0x140>
		*p_stack++ = 0;                                            
	          
	}
		
	#if (CONFIG_RAW_USER_HOOK > 0)
	task_create_hook(task_obj);
30005fe0:	e1a00004 	mov	r0, r4
30005fe4:	eb0006c3 	bl	30007af8 <task_create_hook>
	#endif
	
	task_obj->task_stack = (RAW_VOID*)port_stack_init(task_stack_base, stack_size, task_arg, task_entry);
30005fe8:	e1a01005 	mov	r1, r5
30005fec:	e1a02009 	mov	r2, r9
30005ff0:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
30005ff4:	e1a0000a 	mov	r0, sl
30005ff8:	eb000684 	bl	30007a10 <port_stack_init>
	task_obj->task_name  = task_name; 
30005ffc:	e584b04c 	str	fp, [r4, #76]	; 0x4c
		
	#if (CONFIG_RAW_USER_HOOK > 0)
	task_create_hook(task_obj);
	#endif
	
	task_obj->task_stack = (RAW_VOID*)port_stack_init(task_stack_base, stack_size, task_arg, task_entry);
30006000:	e5840000 	str	r0, [r4]
	task_obj->task_name  = task_name; 
	task_obj->priority   = task_prio;
	task_obj->bpriority  = task_prio;
30006004:	e5c4601a 	strb	r6, [r4, #26]
	task_obj->stack_size = stack_size;

	TRACE_TASK_CREATE(task_obj);
30006008:	e1a00004 	mov	r0, r4
	
	task_obj->task_stack = (RAW_VOID*)port_stack_init(task_stack_base, stack_size, task_arg, task_entry);
	task_obj->task_name  = task_name; 
	task_obj->priority   = task_prio;
	task_obj->bpriority  = task_prio;
	task_obj->stack_size = stack_size;
3000600c:	e5845028 	str	r5, [r4, #40]	; 0x28
	task_create_hook(task_obj);
	#endif
	
	task_obj->task_stack = (RAW_VOID*)port_stack_init(task_stack_base, stack_size, task_arg, task_entry);
	task_obj->task_name  = task_name; 
	task_obj->priority   = task_prio;
30006010:	e5c46019 	strb	r6, [r4, #25]
	task_obj->bpriority  = task_prio;
	task_obj->stack_size = stack_size;

	TRACE_TASK_CREATE(task_obj);
30006014:	eb0006c0 	bl	30007b1c <_trace_task_create>
	
	RAW_CRITICAL_ENTER();
30006018:	eb0006f6 	bl	30007bf8 <OS_CPU_SR_Save>
3000601c:	e5d83000 	ldrb	r3, [r8]
30006020:	e2833001 	add	r3, r3, #1
30006024:	e5c83000 	strb	r3, [r8]
30006028:	eb0006fa 	bl	30007c18 <OS_CPU_SR_Restore>
 * add element before head.
 */
RAW_INLINE void list_insert(LIST *head, LIST *element)
{
	
	element->previous = head->previous;
3000602c:	e59f314c 	ldr	r3, [pc, #332]	; 30006180 <raw_task_create+0x2f0>
	
	#if (RAW_SYSTEM_CHECK > 0)
	list_insert(&(system_debug.task_head), &task_obj->stack_check_list);
30006030:	e2841020 	add	r1, r4, #32
30006034:	e5932004 	ldr	r2, [r3, #4]
	#endif

	if (auto_start) {
30006038:	e3570000 	cmp	r7, #0
3000603c:	e5842024 	str	r2, [r4, #36]	; 0x24
	element->next = head;
30006040:	e5843020 	str	r3, [r4, #32]
	
	head->previous->next = element;	
	head->previous = element;
30006044:	e5831004 	str	r1, [r3, #4]
{
	
	element->previous = head->previous;
	element->next = head;
	
	head->previous->next = element;	
30006048:	e5821000 	str	r1, [r2]
3000604c:	1a000028 	bne	300060f4 <raw_task_create+0x264>
		add_ready_list_end(&raw_ready_queue, task_obj);
	}
	
	if (raw_os_active !=  RAW_OS_RUNNING) {                 /* Return if multitasking has not started                 */
30006050:	e59f312c 	ldr	r3, [pc, #300]	; 30006184 <raw_task_create+0x2f4>
30006054:	e5d33000 	ldrb	r3, [r3]
30006058:	e3530004 	cmp	r3, #4
3000605c:	0a00002a 	beq	3000610c <raw_task_create+0x27c>
		RAW_CRITICAL_EXIT();
30006060:	e5d83000 	ldrb	r3, [r8]
30006064:	e59f410c 	ldr	r4, [pc, #268]	; 30006178 <raw_task_create+0x2e8>
30006068:	e3530001 	cmp	r3, #1
3000606c:	0a000035 	beq	30006148 <raw_task_create+0x2b8>
30006070:	eb0006e0 	bl	30007bf8 <OS_CPU_SR_Save>
30006074:	e5d43000 	ldrb	r3, [r4]
30006078:	e2433001 	sub	r3, r3, #1
3000607c:	e5c43000 	strb	r3, [r4]
30006080:	eb0006e4 	bl	30007c18 <OS_CPU_SR_Restore>
30006084:	e3a00005 	mov	r0, #5
30006088:	eaffff98 	b	30005ef0 <raw_task_create+0x60>

	RAW_CRITICAL_ENTER();
	
	 if (task_prio == IDLE_PRIORITY) {
	 	
	 	if (idle_task_exit) {
3000608c:	e59f30f4 	ldr	r3, [pc, #244]	; 30006188 <raw_task_create+0x2f8>
30006090:	e5d32000 	ldrb	r2, [r3]
30006094:	e3520000 	cmp	r2, #0
30006098:	0affffa5 	beq	30005f34 <raw_task_create+0xa4>
			
			RAW_CRITICAL_EXIT();
3000609c:	e5d87000 	ldrb	r7, [r8]
300060a0:	e3570001 	cmp	r7, #1
300060a4:	0a00002f 	beq	30006168 <raw_task_create+0x2d8>
300060a8:	eb0006d2 	bl	30007bf8 <OS_CPU_SR_Save>
300060ac:	e5d83000 	ldrb	r3, [r8]
300060b0:	e2433001 	sub	r3, r3, #1
300060b4:	e5c83000 	strb	r3, [r8]
300060b8:	eb0006d6 	bl	30007c18 <OS_CPU_SR_Restore>
300060bc:	e3a00001 	mov	r0, #1
300060c0:	eaffff8a 	b	30005ef0 <raw_task_create+0x60>
	}

	RAW_CRITICAL_EXIT();

	if (auto_start) {
		do_possible_sche();
300060c4:	e3a00023 	mov	r0, #35	; 0x23
300060c8:	eaffff88 	b	30005ef0 <raw_task_create+0x60>
	
	 if (task_prio == 0) {
	 	
	 	if (task_0_exit) {
			
			RAW_CRITICAL_EXIT();
300060cc:	e5d83000 	ldrb	r3, [r8]
300060d0:	e3530001 	cmp	r3, #1
300060d4:	0a00001e 	beq	30006154 <raw_task_create+0x2c4>
300060d8:	eb0006c6 	bl	30007bf8 <OS_CPU_SR_Save>
300060dc:	e5d83000 	ldrb	r3, [r8]
300060e0:	e2433001 	sub	r3, r3, #1
300060e4:	e5c83000 	strb	r3, [r8]
300060e8:	eb0006ca 	bl	30007c18 <OS_CPU_SR_Restore>
300060ec:	e3a00002 	mov	r0, #2
300060f0:	eaffff7e 	b	30005ef0 <raw_task_create+0x60>
	#if (RAW_SYSTEM_CHECK > 0)
	list_insert(&(system_debug.task_head), &task_obj->stack_check_list);
	#endif

	if (auto_start) {
		add_ready_list_end(&raw_ready_queue, task_obj);
300060f4:	e1a01004 	mov	r1, r4
300060f8:	e59f008c 	ldr	r0, [pc, #140]	; 3000618c <raw_task_create+0x2fc>
300060fc:	ebfff082 	bl	3000230c <add_ready_list_end>
30006100:	eaffffd2 	b	30006050 <raw_task_create+0x1c0>
	}

	#endif
	

	RAW_CRITICAL_EXIT();
30006104:	eb0000f8 	bl	300064ec <hybrid_int_process>
30006108:	eaffff96 	b	30005f68 <raw_task_create+0xd8>
	if (raw_os_active !=  RAW_OS_RUNNING) {                 /* Return if multitasking has not started                 */
		RAW_CRITICAL_EXIT();
		return RAW_OS_STOPPED;
	}

	RAW_CRITICAL_EXIT();
3000610c:	e5d83000 	ldrb	r3, [r8]
30006110:	e59f4060 	ldr	r4, [pc, #96]	; 30006178 <raw_task_create+0x2e8>
30006114:	e3530001 	cmp	r3, #1
30006118:	0a000010 	beq	30006160 <raw_task_create+0x2d0>
3000611c:	eb0006b5 	bl	30007bf8 <OS_CPU_SR_Save>
30006120:	e5d43000 	ldrb	r3, [r4]
30006124:	e2433001 	sub	r3, r3, #1
30006128:	e5c43000 	strb	r3, [r4]
3000612c:	eb0006b9 	bl	30007c18 <OS_CPU_SR_Restore>

	if (auto_start) {
30006130:	e3570000 	cmp	r7, #0
30006134:	01a00007 	moveq	r0, r7
30006138:	0affff6c 	beq	30005ef0 <raw_task_create+0x60>
		do_possible_sche();
3000613c:	ebfff8d4 	bl	30004494 <raw_sched>
30006140:	e3a00000 	mov	r0, #0
30006144:	eaffff69 	b	30005ef0 <raw_task_create+0x60>
	if (auto_start) {
		add_ready_list_end(&raw_ready_queue, task_obj);
	}
	
	if (raw_os_active !=  RAW_OS_RUNNING) {                 /* Return if multitasking has not started                 */
		RAW_CRITICAL_EXIT();
30006148:	eb0000e7 	bl	300064ec <hybrid_int_process>
3000614c:	e3a00005 	mov	r0, #5
30006150:	eaffff66 	b	30005ef0 <raw_task_create+0x60>
	
	 if (task_prio == 0) {
	 	
	 	if (task_0_exit) {
			
			RAW_CRITICAL_EXIT();
30006154:	eb0000e4 	bl	300064ec <hybrid_int_process>
30006158:	e3a00002 	mov	r0, #2
3000615c:	eaffff63 	b	30005ef0 <raw_task_create+0x60>
	if (raw_os_active !=  RAW_OS_RUNNING) {                 /* Return if multitasking has not started                 */
		RAW_CRITICAL_EXIT();
		return RAW_OS_STOPPED;
	}

	RAW_CRITICAL_EXIT();
30006160:	eb0000e1 	bl	300064ec <hybrid_int_process>
30006164:	eafffff1 	b	30006130 <raw_task_create+0x2a0>
	
	 if (task_prio == IDLE_PRIORITY) {
	 	
	 	if (idle_task_exit) {
			
			RAW_CRITICAL_EXIT();
30006168:	eb0000df 	bl	300064ec <hybrid_int_process>
3000616c:	e1a00007 	mov	r0, r7
30006170:	eaffff5e 	b	30005ef0 <raw_task_create+0x60>
30006174:	30013e61 	andcc	r3, r1, r1, ror #28
30006178:	300142c0 	andcc	r4, r1, r0, asr #5
3000617c:	30013e60 	andcc	r3, r1, r0, ror #28
30006180:	30012fb4 	undefined instruction 0x30012fb4
30006184:	300133c0 	andcc	r3, r1, r0, asr #7
30006188:	30012b6c 	andcc	r2, r1, ip, ror #22
3000618c:	30013c4c 	andcc	r3, r1, ip, asr #24

30006190 <raw_task_0_init>:
*
*             
************************************************************************************************************************
*/	
void raw_task_0_init(void)
{
30006190:	e92d4030 	push	{r4, r5, lr}

	/*Create task 0  to handle fast interrupt event*/
	raw_task_create(&raw_task_0_obj, (RAW_U8  *)"task_0_object",  0, 
30006194:	e59fc098 	ldr	ip, [pc, #152]	; 30006234 <raw_task_0_init+0xa4>
*
*             
************************************************************************************************************************
*/	
void raw_task_0_init(void)
{
30006198:	e24dd01c 	sub	sp, sp, #28

	/*Create task 0  to handle fast interrupt event*/
	raw_task_create(&raw_task_0_obj, (RAW_U8  *)"task_0_object",  0, 
3000619c:	e58dc004 	str	ip, [sp, #4]
300061a0:	e3a0cc01 	mov	ip, #256	; 0x100
300061a4:	e58dc008 	str	ip, [sp, #8]
300061a8:	e59fc088 	ldr	ip, [pc, #136]	; 30006238 <raw_task_0_init+0xa8>
300061ac:	e3a05000 	mov	r5, #0
300061b0:	e59f1084 	ldr	r1, [pc, #132]	; 3000623c <raw_task_0_init+0xac>
300061b4:	e1a02005 	mov	r2, r5
300061b8:	e1a03005 	mov	r3, r5
300061bc:	e58dc00c 	str	ip, [sp, #12]
300061c0:	e59f0078 	ldr	r0, [pc, #120]	; 30006240 <raw_task_0_init+0xb0>
300061c4:	e3a0c001 	mov	ip, #1
300061c8:	e58dc010 	str	ip, [sp, #16]
300061cc:	e58d5000 	str	r5, [sp]
300061d0:	ebffff2e 	bl	30005e90 <raw_task_create>
	0,  0, task_0_stack, TASK_0_STACK_SIZE, task_0_process, 1);

	task_0_event_handler.handle_event = task_0_tick_handler;
300061d4:	e59fc068 	ldr	ip, [pc, #104]	; 30006244 <raw_task_0_init+0xb4>
300061d8:	e59f3068 	ldr	r3, [pc, #104]	; 30006248 <raw_task_0_init+0xb8>

	msg_event_handler.handle_event = int_msg_handler;

	number = OBJECT_INT_MSG_SIZE;

	raw_memset(object_int_msg, 0, sizeof(object_int_msg));
300061dc:	e59f4068 	ldr	r4, [pc, #104]	; 3000624c <raw_task_0_init+0xbc>

	/*Create task 0  to handle fast interrupt event*/
	raw_task_create(&raw_task_0_obj, (RAW_U8  *)"task_0_object",  0, 
	0,  0, task_0_stack, TASK_0_STACK_SIZE, task_0_process, 1);

	task_0_event_handler.handle_event = task_0_tick_handler;
300061e0:	e583c000 	str	ip, [r3]
{
	OBJECT_INT_MSG *p_msg1;
	OBJECT_INT_MSG *p_msg2;
	RAW_U32 number;

	msg_event_handler.handle_event = int_msg_handler;
300061e4:	e59f3064 	ldr	r3, [pc, #100]	; 30006250 <raw_task_0_init+0xc0>
300061e8:	e59fc064 	ldr	ip, [pc, #100]	; 30006254 <raw_task_0_init+0xc4>

	number = OBJECT_INT_MSG_SIZE;

	raw_memset(object_int_msg, 0, sizeof(object_int_msg));
300061ec:	e3a02e1e 	mov	r2, #480	; 0x1e0
{
	OBJECT_INT_MSG *p_msg1;
	OBJECT_INT_MSG *p_msg2;
	RAW_U32 number;

	msg_event_handler.handle_event = int_msg_handler;
300061f0:	e583c000 	str	ip, [r3]

	number = OBJECT_INT_MSG_SIZE;

	raw_memset(object_int_msg, 0, sizeof(object_int_msg));
300061f4:	e1a01005 	mov	r1, r5
300061f8:	e1a00004 	mov	r0, r4
300061fc:	ebfffaba 	bl	30004cec <raw_memset>
	
	free_object_int_msg = object_int_msg;
30006200:	e59f3050 	ldr	r3, [pc, #80]	; 30006258 <raw_task_0_init+0xc8>
* Note(s)     
*
*             
************************************************************************************************************************
*/	
void raw_task_0_init(void)
30006204:	e2842e1e 	add	r2, r4, #480	; 0x1e0

	number = OBJECT_INT_MSG_SIZE;

	raw_memset(object_int_msg, 0, sizeof(object_int_msg));
	
	free_object_int_msg = object_int_msg;
30006208:	e5834000 	str	r4, [r3]
* Note(s)     
*
*             
************************************************************************************************************************
*/	
void raw_task_0_init(void)
3000620c:	e2843018 	add	r3, r4, #24
	p_msg2 = object_int_msg;
	p_msg2++;

	while (--number) { 

		p_msg1->next = p_msg2;
30006210:	e5033014 	str	r3, [r3, #-20]

		p_msg1++;
		p_msg2++;
30006214:	e2833018 	add	r3, r3, #24
	/*init the free msg list*/
	p_msg1 = object_int_msg;
	p_msg2 = object_int_msg;
	p_msg2++;

	while (--number) { 
30006218:	e1530002 	cmp	r3, r2
3000621c:	1afffffb 	bne	30006210 <raw_task_0_init+0x80>
		p_msg1++;
		p_msg2++;
	}

	/*init  the last free msg*/ 
	p_msg1->next = 0;                      
30006220:	e3a03000 	mov	r3, #0
30006224:	e58431cc 	str	r3, [r4, #460]	; 0x1cc
	task_0_event_handler.handle_event = task_0_tick_handler;
	
	#if (CONFIG_RAW_ZERO_INTERRUPT > 0)
	int_msg_init();
	#endif
}
30006228:	e28dd01c 	add	sp, sp, #28
3000622c:	e8bd4030 	pop	{r4, r5, lr}
30006230:	e12fff1e 	bx	lr
30006234:	3001384c 	andcc	r3, r1, ip, asr #16
30006238:	300063f4 	strdcc	r6, [r0], -r4
3000623c:	30007cf8 	strdcc	r7, [r0], -r8
30006240:	300142c8 	andcc	r4, r1, r8, asr #5
30006244:	300063c8 	andcc	r6, r0, r8, asr #7
30006248:	300142c4 	andcc	r4, r1, r4, asr #5
3000624c:	300140e0 	andcc	r4, r1, r0, ror #1
30006250:	30012b4c 	andcc	r2, r1, ip, asr #22
30006254:	3000625c 	andcc	r6, r0, ip, asr r2
30006258:	30013840 	andcc	r3, r1, r0, asr #16

3000625c <int_msg_handler>:


#if (CONFIG_RAW_ZERO_INTERRUPT > 0)

static void int_msg_handler(TASK_0_EVENT_TYPE ev, void *msg_data)
{
3000625c:	e92d4010 	push	{r4, lr}
30006260:	e1a04001 	mov	r4, r1
30006264:	e24dd008 	sub	sp, sp, #8
	
	RAW_SR_ALLOC();
	
	int_msg = msg_data;
	
	switch (ev) {
30006268:	e350000b 	cmp	r0, #11
3000626c:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
30006270:	ea00000f 	b	300062b4 <int_msg_handler+0x58>
30006274:	300062d8 	ldrdcc	r6, [r0], -r8
30006278:	300062f0 	strdcc	r6, [r0], -r0
3000627c:	30006308 	andcc	r6, r0, r8, lsl #6
30006280:	30006320 	andcc	r6, r0, r0, lsr #6
30006284:	30006338 	andcc	r6, r0, r8, lsr r3
30006288:	30006348 	andcc	r6, r0, r8, asr #6
3000628c:	300062b4 	undefined instruction 0x300062b4
30006290:	30006358 	andcc	r6, r0, r8, asr r3
30006294:	30006364 	andcc	r6, r0, r4, ror #6
30006298:	30006384 	andcc	r6, r0, r4, lsl #7
3000629c:	300063a4 	andcc	r6, r0, r4, lsr #7
300062a0:	300062a4 	andcc	r6, r0, r4, lsr #5
		#endif

		#if (CONFIG_RAW_EVENT > 0)
		
		case RAW_TYPE_EVENT:
			event_set((RAW_EVENT *)(int_msg->object), int_msg->event_flags, int_msg->opt);
300062a4:	e5910008 	ldr	r0, [r1, #8]
300062a8:	e5d42001 	ldrb	r2, [r4, #1]
300062ac:	e5911014 	ldr	r1, [r1, #20]
300062b0:	ebffeafb 	bl	30000ea4 <event_set>



	}

	RAW_CPU_DISABLE();
300062b4:	eb00064f 	bl	30007bf8 <OS_CPU_SR_Save>

	int_msg->next = free_object_int_msg;
300062b8:	e59f3104 	ldr	r3, [pc, #260]	; 300063c4 <int_msg_handler+0x168>
300062bc:	e5932000 	ldr	r2, [r3]
300062c0:	e5842004 	str	r2, [r4, #4]
	free_object_int_msg = int_msg;
300062c4:	e5834000 	str	r4, [r3]
	
	RAW_CPU_ENABLE();
300062c8:	eb000652 	bl	30007c18 <OS_CPU_SR_Restore>

}
300062cc:	e28dd008 	add	sp, sp, #8
300062d0:	e8bd4010 	pop	{r4, lr}
300062d4:	e12fff1e 	bx	lr
		
		
		#if (CONFIG_RAW_QUEUE > 0)
		
		case RAW_TYPE_Q_FRONT:
			msg_post((RAW_QUEUE *)(int_msg->object), int_msg->msg, SEND_TO_FRONT, WAKE_ONE_QUEUE);
300062d8:	e5910008 	ldr	r0, [r1, #8]
300062dc:	e3a02001 	mov	r2, #1
300062e0:	e591100c 	ldr	r1, [r1, #12]
300062e4:	e3a03000 	mov	r3, #0
300062e8:	ebfff47c 	bl	300034e0 <msg_post>
			break;
300062ec:	eafffff0 	b	300062b4 <int_msg_handler+0x58>

		case RAW_TYPE_Q_END:
			msg_post((RAW_QUEUE *)(int_msg->object), int_msg->msg, SEND_TO_END, WAKE_ONE_QUEUE);
300062f0:	e5910008 	ldr	r0, [r1, #8]
300062f4:	e3a02002 	mov	r2, #2
300062f8:	e591100c 	ldr	r1, [r1, #12]
300062fc:	e3a03000 	mov	r3, #0
30006300:	ebfff476 	bl	300034e0 <msg_post>
			break;
30006304:	eaffffea 	b	300062b4 <int_msg_handler+0x58>

		case RAW_TYPE_Q_ALL:
			msg_post((RAW_QUEUE *)(int_msg->object), int_msg->msg, int_msg->opt, WAKE_ALL_QUEUE);
30006308:	e5910008 	ldr	r0, [r1, #8]
3000630c:	e5d42001 	ldrb	r2, [r4, #1]
30006310:	e591100c 	ldr	r1, [r1, #12]
30006314:	e3a03001 	mov	r3, #1
30006318:	ebfff470 	bl	300034e0 <msg_post>
			break;
3000631c:	eaffffe4 	b	300062b4 <int_msg_handler+0x58>
		#endif

		#if (CONFIG_RAW_QUEUE_BUFFER > 0)

		case RAW_TYPE_Q_BUFFER_END:
			queue_buffer_post((RAW_QUEUE_BUFFER *)(int_msg->object), int_msg->msg, int_msg->msg_size, SEND_TO_END);
30006320:	e5910008 	ldr	r0, [r1, #8]
30006324:	e5942010 	ldr	r2, [r4, #16]
30006328:	e591100c 	ldr	r1, [r1, #12]
3000632c:	e3a03002 	mov	r3, #2
30006330:	ebfff23b 	bl	30002c24 <queue_buffer_post>
			break;
30006334:	eaffffde 	b	300062b4 <int_msg_handler+0x58>
		#endif

		#if (CONFIG_RAW_SEMAPHORE > 0)
		
		case RAW_TYPE_SEM:
			semaphore_put((RAW_SEMAPHORE *)(int_msg->object), WAKE_ONE_SEM);
30006338:	e5910008 	ldr	r0, [r1, #8]
3000633c:	e3a01000 	mov	r1, #0
30006340:	ebfff994 	bl	30004998 <semaphore_put>
			break;
30006344:	eaffffda 	b	300062b4 <int_msg_handler+0x58>

		case RAW_TYPE_SEM_ALL:
			semaphore_put((RAW_SEMAPHORE *)(int_msg->object), WAKE_ALL_SEM);
30006348:	e5910008 	ldr	r0, [r1, #8]
3000634c:	e3a01001 	mov	r1, #1
30006350:	ebfff990 	bl	30004998 <semaphore_put>
			break;
30006354:	eaffffd6 	b	300062b4 <int_msg_handler+0x58>
	switch (ev) {

		#if (CONFIG_RAW_TASK_RESUME > 0)
		
		case RAW_TYPE_RESUME:
			task_resume((RAW_TASK_OBJ *)(int_msg->object));
30006358:	e5910008 	ldr	r0, [r1, #8]
3000635c:	ebfffd59 	bl	300058c8 <task_resume>
			break;
30006360:	eaffffd3 	b	300062b4 <int_msg_handler+0x58>

		
		#if (CONFIG_RAW_QUEUE_SIZE > 0)
		
		case RAW_TYPE_Q_SIZE_FRONT:
			msg_size_post((RAW_QUEUE_SIZE *)(int_msg->object), int_msg->msg, int_msg->msg_size, SEND_TO_FRONT, WAKE_ONE_QUEUE);
30006364:	e5910008 	ldr	r0, [r1, #8]
30006368:	e5942010 	ldr	r2, [r4, #16]
3000636c:	e591100c 	ldr	r1, [r1, #12]
30006370:	e3a0c000 	mov	ip, #0
30006374:	e3a03001 	mov	r3, #1
30006378:	e58dc000 	str	ip, [sp]
3000637c:	ebfff6a7 	bl	30003e20 <msg_size_post>
			break;
30006380:	eaffffcb 	b	300062b4 <int_msg_handler+0x58>

		case RAW_TYPE_Q_SIZE_END:
			msg_size_post((RAW_QUEUE_SIZE *)(int_msg->object), int_msg->msg, int_msg->msg_size, SEND_TO_END, WAKE_ONE_QUEUE);
30006384:	e5910008 	ldr	r0, [r1, #8]
30006388:	e5942010 	ldr	r2, [r4, #16]
3000638c:	e591100c 	ldr	r1, [r1, #12]
30006390:	e3a0c000 	mov	ip, #0
30006394:	e3a03002 	mov	r3, #2
30006398:	e58dc000 	str	ip, [sp]
3000639c:	ebfff69f 	bl	30003e20 <msg_size_post>
			break;
300063a0:	eaffffc3 	b	300062b4 <int_msg_handler+0x58>

		case RAW_TYPE_Q_SIZE_ALL:
			msg_size_post((RAW_QUEUE_SIZE *)(int_msg->object), int_msg->msg, int_msg->msg_size, int_msg->opt, WAKE_ALL_QUEUE);
300063a4:	e5910008 	ldr	r0, [r1, #8]
300063a8:	e5942010 	ldr	r2, [r4, #16]
300063ac:	e591100c 	ldr	r1, [r1, #12]
300063b0:	e5d43001 	ldrb	r3, [r4, #1]
300063b4:	e3a0c001 	mov	ip, #1
300063b8:	e58dc000 	str	ip, [sp]
300063bc:	ebfff697 	bl	30003e20 <msg_size_post>
			break;
300063c0:	eaffffbb 	b	300062b4 <int_msg_handler+0x58>
300063c4:	30013840 	andcc	r3, r1, r0, asr #16

300063c8 <task_0_tick_handler>:


#if (CONFIG_RAW_TASK_0 > 0)

static void task_0_tick_handler(TASK_0_EVENT_TYPE ev, void *event_data)
{
300063c8:	e92d4010 	push	{r4, lr}
300063cc:	e1a04000 	mov	r4, r0
	event_data = event_data;

	#if (CONFIG_RAW_USER_HOOK > 0)
	raw_tick_hook();
300063d0:	eb0005c7 	bl	30007af4 <raw_tick_hook>
	#endif

	/*update system time to calculate whether task timeout happens*/
	#if (CONFIG_RAW_TICK_TASK > 0)
	raw_task_semaphore_put(&tick_task_obj);
300063d4:	e59f0014 	ldr	r0, [pc, #20]	; 300063f0 <task_0_tick_handler+0x28>
300063d8:	eb000160 	bl	30006960 <raw_task_semaphore_put>
	tick_list_update();
	#endif

	/*update task time slice if possible*/
	#if (CONFIG_SCHED_FIFO_RR > 0)
	calculate_time_slice(ev);
300063dc:	e1a00004 	mov	r0, r4
300063e0:	ebfff7b7 	bl	300042c4 <calculate_time_slice>
	#endif
	
	/*inform the timer task to update software timer*/	
	#if (CONFIG_RAW_TIMER > 0)
	call_timer_task();
300063e4:	eb000278 	bl	30006dcc <call_timer_task>
	#endif

}
300063e8:	e8bd4010 	pop	{r4, lr}
300063ec:	e12fff1e 	bx	lr
300063f0:	300137c8 	andcc	r3, r1, r8, asr #15

300063f4 <task_0_process>:
	return task_0_post(p, ev, event_data, SEND_TO_FRONT);
}


static void task_0_process(void *pa)
{
300063f4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
300063f8:	e24dd00c 	sub	sp, sp, #12
	RAW_SR_ALLOC();

	pa = pa;

	/*to prevent interrupt happen here to cause system crash at task 0 start*/
	RAW_CPU_DISABLE();
300063fc:	eb0005fd 	bl	30007bf8 <OS_CPU_SR_Save>
	
	remove_ready_list(&raw_ready_queue, &raw_task_0_obj);
30006400:	e59f10cc 	ldr	r1, [pc, #204]	; 300064d4 <task_0_process+0xe0>
	RAW_SR_ALLOC();

	pa = pa;

	/*to prevent interrupt happen here to cause system crash at task 0 start*/
	RAW_CPU_DISABLE();
30006404:	e1a04000 	mov	r4, r0
	
	remove_ready_list(&raw_ready_queue, &raw_task_0_obj);
30006408:	e59f00c8 	ldr	r0, [pc, #200]	; 300064d8 <task_0_process+0xe4>
3000640c:	ebfff093 	bl	30002660 <remove_ready_list>
	
	RAW_CPU_ENABLE();
30006410:	e1a00004 	mov	r0, r4
30006414:	eb0005ff 	bl	30007c18 <OS_CPU_SR_Restore>
30006418:	e59f50bc 	ldr	r5, [pc, #188]	; 300064dc <task_0_process+0xe8>
3000641c:	e59f40bc 	ldr	r4, [pc, #188]	; 300064e0 <task_0_process+0xec>
30006420:	e59f70bc 	ldr	r7, [pc, #188]	; 300064e4 <task_0_process+0xf0>
30006424:	e59f60bc 	ldr	r6, [pc, #188]	; 300064e8 <task_0_process+0xf4>
	while (1) {

		/*Get the message info and update it*/
		RAW_CPU_DISABLE();

		if (task_0_events) {
30006428:	e1a09005 	mov	r9, r5

			--task_0_events;
			
			/* There are events that we should deliver. */
			ev = task_0_events_queue[task_0_event_end].ev;
3000642c:	e1a0b004 	mov	fp, r4
			if (task_0_event_end == MAX_TASK_EVENT) {                  
			    task_0_event_end = 0u;
			}

			/*lock the scheduler, so event handler can not be switched out*/
			raw_sched_lock = 1u;
30006430:	e3a0a001 	mov	sl, #1
	RAW_CPU_ENABLE();
	
	while (1) {

		/*Get the message info and update it*/
		RAW_CPU_DISABLE();
30006434:	eb0005ef 	bl	30007bf8 <OS_CPU_SR_Save>

		if (task_0_events) {
30006438:	e1d530b0 	ldrh	r3, [r5]
	RAW_CPU_ENABLE();
	
	while (1) {

		/*Get the message info and update it*/
		RAW_CPU_DISABLE();
3000643c:	e1a08000 	mov	r8, r0

		if (task_0_events) {
30006440:	e3530000 	cmp	r3, #0

			--task_0_events;
30006444:	e2432001 	sub	r2, r3, #1
	while (1) {

		/*Get the message info and update it*/
		RAW_CPU_DISABLE();

		if (task_0_events) {
30006448:	0a00001a 	beq	300064b8 <task_0_process+0xc4>

			--task_0_events;
			
			/* There are events that we should deliver. */
			ev = task_0_events_queue[task_0_event_end].ev;
3000644c:	e1d430b0 	ldrh	r3, [r4]
		/*Get the message info and update it*/
		RAW_CPU_DISABLE();

		if (task_0_events) {

			--task_0_events;
30006450:	e1c920b0 	strh	r2, [r9]
			ev = task_0_events_queue[task_0_event_end].ev;

			data_temp = task_0_events_queue[task_0_event_end].event_data;
			receiver = task_0_events_queue[task_0_event_end].p;

			task_0_event_end++;
30006454:	e2831001 	add	r1, r3, #1
30006458:	e1a01801 	lsl	r1, r1, #16
3000645c:	e1a01821 	lsr	r1, r1, #16
		if (task_0_events) {

			--task_0_events;
			
			/* There are events that we should deliver. */
			ev = task_0_events_queue[task_0_event_end].ev;
30006460:	e0833083 	add	r3, r3, r3, lsl #1
30006464:	e0872103 	add	r2, r7, r3, lsl #2
			data_temp = task_0_events_queue[task_0_event_end].event_data;
			receiver = task_0_events_queue[task_0_event_end].p;

			task_0_event_end++;

			if (task_0_event_end == MAX_TASK_EVENT) {                  
30006468:	e3510020 	cmp	r1, #32
			ev = task_0_events_queue[task_0_event_end].ev;

			data_temp = task_0_events_queue[task_0_event_end].event_data;
			receiver = task_0_events_queue[task_0_event_end].p;

			task_0_event_end++;
3000646c:	e1c410b0 	strh	r1, [r4]
			
			/* There are events that we should deliver. */
			ev = task_0_events_queue[task_0_event_end].ev;

			data_temp = task_0_events_queue[task_0_event_end].event_data;
			receiver = task_0_events_queue[task_0_event_end].p;
30006470:	e9920102 	ldmib	r2, {r1, r8}
		if (task_0_events) {

			--task_0_events;
			
			/* There are events that we should deliver. */
			ev = task_0_events_queue[task_0_event_end].ev;
30006474:	e7d73103 	ldrb	r3, [r7, r3, lsl #2]
			receiver = task_0_events_queue[task_0_event_end].p;

			task_0_event_end++;

			if (task_0_event_end == MAX_TASK_EVENT) {                  
			    task_0_event_end = 0u;
30006478:	03a02000 	moveq	r2, #0
3000647c:	01cb20b0 	strheq	r2, [fp]
			}

			/*lock the scheduler, so event handler can not be switched out*/
			raw_sched_lock = 1u;
			
			RAW_CPU_ENABLE();
30006480:	e88d000a 	stm	sp, {r1, r3}
			if (task_0_event_end == MAX_TASK_EVENT) {                  
			    task_0_event_end = 0u;
			}

			/*lock the scheduler, so event handler can not be switched out*/
			raw_sched_lock = 1u;
30006484:	e5c6a000 	strb	sl, [r6]
			
			RAW_CPU_ENABLE();
30006488:	eb0005e2 	bl	30007c18 <OS_CPU_SR_Restore>

			/*exceute the event handler*/
			receiver->handle_event(ev, data_temp);
3000648c:	e89d000a 	ldm	sp, {r1, r3}
30006490:	e1a00003 	mov	r0, r3
30006494:	e598c000 	ldr	ip, [r8]
30006498:	e1a0e00f 	mov	lr, pc
3000649c:	e12fff1c 	bx	ip
	RAW_CPU_ENABLE();
	
	while (1) {

		/*Get the message info and update it*/
		RAW_CPU_DISABLE();
300064a0:	eb0005d4 	bl	30007bf8 <OS_CPU_SR_Save>

		if (task_0_events) {
300064a4:	e1d530b0 	ldrh	r3, [r5]
	RAW_CPU_ENABLE();
	
	while (1) {

		/*Get the message info and update it*/
		RAW_CPU_DISABLE();
300064a8:	e1a08000 	mov	r8, r0

		if (task_0_events) {
300064ac:	e3530000 	cmp	r3, #0

			--task_0_events;
300064b0:	e2432001 	sub	r2, r3, #1
	while (1) {

		/*Get the message info and update it*/
		RAW_CPU_DISABLE();

		if (task_0_events) {
300064b4:	1affffe4 	bne	3000644c <task_0_process+0x58>
		else {

			/*unlock the scheduler, so scheduler can work*/
			raw_sched_lock = 0u;
			
			get_ready_task(&raw_ready_queue);
300064b8:	e59f0018 	ldr	r0, [pc, #24]	; 300064d8 <task_0_process+0xe4>
		}

		else {

			/*unlock the scheduler, so scheduler can work*/
			raw_sched_lock = 0u;
300064bc:	e5c63000 	strb	r3, [r6]
			
			get_ready_task(&raw_ready_queue);
300064c0:	ebffefe9 	bl	3000246c <get_ready_task>
			CONTEXT_SWITCH();
300064c4:	eb0005dd 	bl	30007c40 <port_task_switch>

			RAW_CPU_ENABLE();
300064c8:	e1a00008 	mov	r0, r8
300064cc:	eb0005d1 	bl	30007c18 <OS_CPU_SR_Restore>
300064d0:	eaffffd7 	b	30006434 <task_0_process+0x40>
300064d4:	300142c8 	andcc	r4, r1, r8, asr #5
300064d8:	30013c4c 	andcc	r3, r1, ip, asr #24
300064dc:	30012b50 	andcc	r2, r1, r0, asr fp
300064e0:	3001383c 	andcc	r3, r1, ip, lsr r8
300064e4:	30013ed4 	ldrdcc	r3, [r1], -r4
300064e8:	300142c0 	andcc	r4, r1, r0, asr #5

300064ec <hybrid_int_process>:
	}
		
}

void hybrid_int_process(void)
{
300064ec:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
300064f0:	e59f70f8 	ldr	r7, [pc, #248]	; 300065f0 <hybrid_int_process+0x104>
300064f4:	e24dd00c 	sub	sp, sp, #12
		RAW_CPU_DISABLE(); 
		
		if (task_0_events) {

			/*current running task can never be task 0*/
			if (raw_int_nesting) {
300064f8:	e59fa0f4 	ldr	sl, [pc, #244]	; 300065f4 <hybrid_int_process+0x108>

			else {

				--task_0_events;
				/* There are events that we should deliver. */
				hybrid_ev = task_0_events_queue[task_0_event_end].ev;
300064fc:	e59f40f4 	ldr	r4, [pc, #244]	; 300065f8 <hybrid_int_process+0x10c>
30006500:	e59f50f4 	ldr	r5, [pc, #244]	; 300065fc <hybrid_int_process+0x110>
	}
		
}

void hybrid_int_process(void)
{
30006504:	e3a08000 	mov	r8, #0

	while (1) {
		
		RAW_CPU_DISABLE(); 
		
		if (task_0_events) {
30006508:	e1a09007 	mov	r9, r7
3000650c:	ea000017 	b	30006570 <hybrid_int_process+0x84>

			/*current running task can never be task 0*/
			if (raw_int_nesting) {
30006510:	e5da2000 	ldrb	r2, [sl]
				}
				
				RAW_CPU_ENABLE();

				/*exceute the event handler*/
				hybrid_receiver->handle_event(hybrid_ev, hybrid_data_temp);
30006514:	e3a08001 	mov	r8, #1
		RAW_CPU_DISABLE(); 
		
		if (task_0_events) {

			/*current running task can never be task 0*/
			if (raw_int_nesting) {
30006518:	e3520000 	cmp	r2, #0
3000651c:	1a00002e 	bne	300065dc <hybrid_int_process+0xf0>

			else {

				--task_0_events;
				/* There are events that we should deliver. */
				hybrid_ev = task_0_events_queue[task_0_event_end].ev;
30006520:	e1d430b0 	ldrh	r3, [r4]
				return;
			}

			else {

				--task_0_events;
30006524:	e1c910b0 	strh	r1, [r9]
				/* There are events that we should deliver. */
				hybrid_ev = task_0_events_queue[task_0_event_end].ev;
				hybrid_data_temp = task_0_events_queue[task_0_event_end].event_data;
				hybrid_receiver = task_0_events_queue[task_0_event_end].p;

				task_0_event_end++;
30006528:	e2830001 	add	r0, r3, #1

			else {

				--task_0_events;
				/* There are events that we should deliver. */
				hybrid_ev = task_0_events_queue[task_0_event_end].ev;
3000652c:	e0833083 	add	r3, r3, r3, lsl #1
30006530:	e0851103 	add	r1, r5, r3, lsl #2
				hybrid_data_temp = task_0_events_queue[task_0_event_end].event_data;
				hybrid_receiver = task_0_events_queue[task_0_event_end].p;

				task_0_event_end++;
30006534:	e1a00800 	lsl	r0, r0, #16
30006538:	e1a00820 	lsr	r0, r0, #16

			else {

				--task_0_events;
				/* There are events that we should deliver. */
				hybrid_ev = task_0_events_queue[task_0_event_end].ev;
3000653c:	e7d53103 	ldrb	r3, [r5, r3, lsl #2]
				hybrid_data_temp = task_0_events_queue[task_0_event_end].event_data;
				hybrid_receiver = task_0_events_queue[task_0_event_end].p;
30006540:	e9910042 	ldmib	r1, {r1, r6}

				task_0_event_end++;

				if (task_0_event_end == MAX_TASK_EVENT) {                  
30006544:	e3500020 	cmp	r0, #32
				/* There are events that we should deliver. */
				hybrid_ev = task_0_events_queue[task_0_event_end].ev;
				hybrid_data_temp = task_0_events_queue[task_0_event_end].event_data;
				hybrid_receiver = task_0_events_queue[task_0_event_end].p;

				task_0_event_end++;
30006548:	e1c400b0 	strh	r0, [r4]

				if (task_0_event_end == MAX_TASK_EVENT) {                  
					task_0_event_end = 0;
				}
				
				RAW_CPU_ENABLE();
3000654c:	e1a0000b 	mov	r0, fp
30006550:	e88d000a 	stm	sp, {r1, r3}
				hybrid_receiver = task_0_events_queue[task_0_event_end].p;

				task_0_event_end++;

				if (task_0_event_end == MAX_TASK_EVENT) {                  
					task_0_event_end = 0;
30006554:	01c420b0 	strheq	r2, [r4]
				}
				
				RAW_CPU_ENABLE();
30006558:	eb0005ae 	bl	30007c18 <OS_CPU_SR_Restore>

				/*exceute the event handler*/
				hybrid_receiver->handle_event(hybrid_ev, hybrid_data_temp);
3000655c:	e89d000a 	ldm	sp, {r1, r3}
30006560:	e1a00003 	mov	r0, r3
30006564:	e596c000 	ldr	ip, [r6]
30006568:	e1a0e00f 	mov	lr, pc
3000656c:	e12fff1c 	bx	ip
	
	register RAW_U8 hybrid_task_may_switch = 0u;

	while (1) {
		
		RAW_CPU_DISABLE(); 
30006570:	eb0005a0 	bl	30007bf8 <OS_CPU_SR_Save>
		
		if (task_0_events) {
30006574:	e1d730b0 	ldrh	r3, [r7]
	
	register RAW_U8 hybrid_task_may_switch = 0u;

	while (1) {
		
		RAW_CPU_DISABLE(); 
30006578:	e1a0b000 	mov	fp, r0
		
		if (task_0_events) {
3000657c:	e3530000 	cmp	r3, #0
				return;
			}

			else {

				--task_0_events;
30006580:	e2431001 	sub	r1, r3, #1

	while (1) {
		
		RAW_CPU_DISABLE(); 
		
		if (task_0_events) {
30006584:	1affffe1 	bne	30006510 <hybrid_int_process+0x24>
			
		}

		else {
			
			raw_sched_lock = 0;
30006588:	e59f2070 	ldr	r2, [pc, #112]	; 30006600 <hybrid_int_process+0x114>

			if (hybrid_task_may_switch) {
3000658c:	e3580000 	cmp	r8, #0
			
		}

		else {
			
			raw_sched_lock = 0;
30006590:	e5c23000 	strb	r3, [r2]

			if (hybrid_task_may_switch) {
30006594:	0a00000b 	beq	300065c8 <hybrid_int_process+0xdc>
				hybrid_highest_pri = raw_ready_queue.highest_priority;
				/*Highest priority task must be the first element on the list*/
				hybrid_node = raw_ready_queue.task_ready_list[hybrid_highest_pri].next;

				/*Get the highest priority task object*/
				high_ready_obj = list_entry(hybrid_node, RAW_TASK_OBJ, task_list);
30006598:	e59f3064 	ldr	r3, [pc, #100]	; 30006604 <hybrid_int_process+0x118>

				/*if highest task is currently task, then no need to do switch and just return*/
				if (high_ready_obj == raw_task_active) { 
3000659c:	e59f2064 	ldr	r2, [pc, #100]	; 30006608 <hybrid_int_process+0x11c>
				hybrid_highest_pri = raw_ready_queue.highest_priority;
				/*Highest priority task must be the first element on the list*/
				hybrid_node = raw_ready_queue.task_ready_list[hybrid_highest_pri].next;

				/*Get the highest priority task object*/
				high_ready_obj = list_entry(hybrid_node, RAW_TASK_OBJ, task_list);
300065a0:	e5d31000 	ldrb	r1, [r3]

				/*if highest task is currently task, then no need to do switch and just return*/
				if (high_ready_obj == raw_task_active) { 
300065a4:	e5922000 	ldr	r2, [r2]
				hybrid_highest_pri = raw_ready_queue.highest_priority;
				/*Highest priority task must be the first element on the list*/
				hybrid_node = raw_ready_queue.task_ready_list[hybrid_highest_pri].next;

				/*Get the highest priority task object*/
				high_ready_obj = list_entry(hybrid_node, RAW_TASK_OBJ, task_list);
300065a8:	e0833181 	add	r3, r3, r1, lsl #3
300065ac:	e5933004 	ldr	r3, [r3, #4]
300065b0:	e2433004 	sub	r3, r3, #4

				/*if highest task is currently task, then no need to do switch and just return*/
				if (high_ready_obj == raw_task_active) { 
300065b4:	e1530002 	cmp	r3, r2
				hybrid_highest_pri = raw_ready_queue.highest_priority;
				/*Highest priority task must be the first element on the list*/
				hybrid_node = raw_ready_queue.task_ready_list[hybrid_highest_pri].next;

				/*Get the highest priority task object*/
				high_ready_obj = list_entry(hybrid_node, RAW_TASK_OBJ, task_list);
300065b8:	e59f204c 	ldr	r2, [pc, #76]	; 3000660c <hybrid_int_process+0x120>
300065bc:	e5823000 	str	r3, [r2]

				/*if highest task is currently task, then no need to do switch and just return*/
				if (high_ready_obj == raw_task_active) { 
300065c0:	0a000001 	beq	300065cc <hybrid_int_process+0xe0>
					RAW_CPU_ENABLE();                                     
					return;

				}

				CONTEXT_SWITCH();
300065c4:	eb00059d 	bl	30007c40 <port_task_switch>
			}
			
			RAW_CPU_ENABLE();
300065c8:	e1a0000b 	mov	r0, fp
300065cc:	eb000591 	bl	30007c18 <OS_CPU_SR_Restore>
		}

	}
	
		
}
300065d0:	e28dd00c 	add	sp, sp, #12
300065d4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
300065d8:	e12fff1e 	bx	lr
		if (task_0_events) {

			/*current running task can never be task 0*/
			if (raw_int_nesting) {

				raw_sched_lock = 0;
300065dc:	e59f301c 	ldr	r3, [pc, #28]	; 30006600 <hybrid_int_process+0x114>
300065e0:	e3a02000 	mov	r2, #0
300065e4:	e5c32000 	strb	r2, [r3]
				RAW_CPU_ENABLE();
300065e8:	eb00058a 	bl	30007c18 <OS_CPU_SR_Restore>
				return;
300065ec:	eafffff7 	b	300065d0 <hybrid_int_process+0xe4>
300065f0:	30012b50 	andcc	r2, r1, r0, asr fp
300065f4:	30013e61 	andcc	r3, r1, r1, ror #28
300065f8:	3001383c 	andcc	r3, r1, ip, lsr r8
300065fc:	30013ed4 	ldrdcc	r3, [r1], -r4
30006600:	300142c0 	andcc	r4, r1, r0, asr #5
30006604:	30013c4c 	andcc	r3, r1, ip, asr #24
30006608:	30013838 	andcc	r3, r1, r8, lsr r8
3000660c:	30013e64 	andcc	r3, r1, r4, ror #28

30006610 <task_0_post>:
	return ret;

}

static RAW_U16 task_0_post(EVENT_HANLDER *p, TASK_0_EVENT_TYPE ev, void *event_data, RAW_U8 opt_send_method)
{
30006610:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
30006614:	e1a04000 	mov	r4, r0
	RAW_U16 task_0_event_position;
	RAW_SR_ALLOC();

	/*this function should not be called in task*/
	if (raw_int_nesting == 0) {
30006618:	e59f00f4 	ldr	r0, [pc, #244]	; 30006714 <task_0_post+0x104>
	return ret;

}

static RAW_U16 task_0_post(EVENT_HANLDER *p, TASK_0_EVENT_TYPE ev, void *event_data, RAW_U8 opt_send_method)
{
3000661c:	e1a06001 	mov	r6, r1
	RAW_U16 task_0_event_position;
	RAW_SR_ALLOC();

	/*this function should not be called in task*/
	if (raw_int_nesting == 0) {
30006620:	e5d00000 	ldrb	r0, [r0]
	return ret;

}

static RAW_U16 task_0_post(EVENT_HANLDER *p, TASK_0_EVENT_TYPE ev, void *event_data, RAW_U8 opt_send_method)
{
30006624:	e1a05002 	mov	r5, r2
	RAW_U16 task_0_event_position;
	RAW_SR_ALLOC();

	/*this function should not be called in task*/
	if (raw_int_nesting == 0) {
30006628:	e3500000 	cmp	r0, #0
	return ret;

}

static RAW_U16 task_0_post(EVENT_HANLDER *p, TASK_0_EVENT_TYPE ev, void *event_data, RAW_U8 opt_send_method)
{
3000662c:	e1a07003 	mov	r7, r3
	RAW_U16 task_0_event_position;
	RAW_SR_ALLOC();

	/*this function should not be called in task*/
	if (raw_int_nesting == 0) {
30006630:	03a00028 	moveq	r0, #40	; 0x28
30006634:	1a000001 	bne	30006640 <task_0_post+0x30>

	RAW_CPU_ENABLE();

	return RAW_SUCCESS;
 
}
30006638:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
3000663c:	e12fff1e 	bx	lr

		return RAW_NOT_CALLED_BY_TASK;
	}

	/*fastest way to make task 0 ready*/
	RAW_CPU_DISABLE();
30006640:	eb00056c 	bl	30007bf8 <OS_CPU_SR_Save>

	/*if message is max, probally interrupt is too fast, please check your interrupt*/
	if(task_0_events == MAX_TASK_EVENT) {
30006644:	e59f30cc 	ldr	r3, [pc, #204]	; 30006718 <task_0_post+0x108>

		return RAW_NOT_CALLED_BY_TASK;
	}

	/*fastest way to make task 0 ready*/
	RAW_CPU_DISABLE();
30006648:	e1a0c000 	mov	ip, r0

	/*if message is max, probally interrupt is too fast, please check your interrupt*/
	if(task_0_events == MAX_TASK_EVENT) {
3000664c:	e1d320b0 	ldrh	r2, [r3]
30006650:	e3520020 	cmp	r2, #32
30006654:	0a00001d 	beq	300066d0 <task_0_post+0xc0>
	}

	++task_0_events;

	/*Update the debug information*/
	if (task_0_events > peak_events) {
30006658:	e59f10bc 	ldr	r1, [pc, #188]	; 3000671c <task_0_post+0x10c>
		RAW_CPU_ENABLE();
		TRACE_TASK_0_OVERFLOW(p, ev, event_data);
		return RAW_TASK_0_EVENT_EXHAUSTED;
	}

	++task_0_events;
3000665c:	e2822001 	add	r2, r2, #1

	/*Update the debug information*/
	if (task_0_events > peak_events) {
30006660:	e1d100b0 	ldrh	r0, [r1]
		RAW_CPU_ENABLE();
		TRACE_TASK_0_OVERFLOW(p, ev, event_data);
		return RAW_TASK_0_EVENT_EXHAUSTED;
	}

	++task_0_events;
30006664:	e1a02802 	lsl	r2, r2, #16
30006668:	e1a02822 	lsr	r2, r2, #16

	/*Update the debug information*/
	if (task_0_events > peak_events) {
3000666c:	e1500002 	cmp	r0, r2
		peak_events = task_0_events;
30006670:	31c120b0 	strhcc	r2, [r1]
	}
	
	if (opt_send_method == SEND_TO_END) {
30006674:	e3570002 	cmp	r7, #2
		RAW_CPU_ENABLE();
		TRACE_TASK_0_OVERFLOW(p, ev, event_data);
		return RAW_TASK_0_EVENT_EXHAUSTED;
	}

	++task_0_events;
30006678:	e1c320b0 	strh	r2, [r3]
	/*Update the debug information*/
	if (task_0_events > peak_events) {
		peak_events = task_0_events;
	}
	
	if (opt_send_method == SEND_TO_END) {
3000667c:	0a00001a 	beq	300066ec <task_0_post+0xdc>
		}
	}

	else {

		if (task_0_event_end == 0) { 			   
30006680:	e59f3098 	ldr	r3, [pc, #152]	; 30006720 <task_0_post+0x110>
30006684:	e1d320b0 	ldrh	r2, [r3]
30006688:	e3520000 	cmp	r2, #0
3000668c:	12422001 	subne	r2, r2, #1
30006690:	11a02802 	lslne	r2, r2, #16
			task_0_event_end = MAX_TASK_EVENT;
30006694:	03a0101f 	moveq	r1, #31
		}
	}

	else {

		if (task_0_event_end == 0) { 			   
30006698:	11a02822 	lsrne	r2, r2, #16
			task_0_event_end = MAX_TASK_EVENT;
3000669c:	01a02001 	moveq	r2, r1
		}
	}

	else {

		if (task_0_event_end == 0) { 			   
300066a0:	11a01002 	movne	r1, r2
			task_0_event_end = MAX_TASK_EVENT;
		}

		task_0_event_end--;
300066a4:	e1c320b0 	strh	r2, [r3]
		task_0_event_position = task_0_event_end;

	}

	/*Store the message*/
	task_0_events_queue[task_0_event_position].ev = ev;
300066a8:	e59f2074 	ldr	r2, [pc, #116]	; 30006724 <task_0_post+0x114>
300066ac:	e0811081 	add	r1, r1, r1, lsl #1
300066b0:	e0823101 	add	r3, r2, r1, lsl #2
	task_0_events_queue[task_0_event_position].event_data = event_data;
	task_0_events_queue[task_0_event_position].p = p;

	RAW_CPU_ENABLE();
300066b4:	e1a0000c 	mov	r0, ip
		task_0_event_position = task_0_event_end;

	}

	/*Store the message*/
	task_0_events_queue[task_0_event_position].ev = ev;
300066b8:	e7c26101 	strb	r6, [r2, r1, lsl #2]
	task_0_events_queue[task_0_event_position].event_data = event_data;
	task_0_events_queue[task_0_event_position].p = p;
300066bc:	e5834008 	str	r4, [r3, #8]

	}

	/*Store the message*/
	task_0_events_queue[task_0_event_position].ev = ev;
	task_0_events_queue[task_0_event_position].event_data = event_data;
300066c0:	e5835004 	str	r5, [r3, #4]
	task_0_events_queue[task_0_event_position].p = p;

	RAW_CPU_ENABLE();
300066c4:	eb000553 	bl	30007c18 <OS_CPU_SR_Restore>
300066c8:	e3a00000 	mov	r0, #0

	return RAW_SUCCESS;
300066cc:	eaffffd9 	b	30006638 <task_0_post+0x28>
	/*fastest way to make task 0 ready*/
	RAW_CPU_DISABLE();

	/*if message is max, probally interrupt is too fast, please check your interrupt*/
	if(task_0_events == MAX_TASK_EVENT) {
		RAW_CPU_ENABLE();
300066d0:	eb000550 	bl	30007c18 <OS_CPU_SR_Restore>
		TRACE_TASK_0_OVERFLOW(p, ev, event_data);
300066d4:	e1a00004 	mov	r0, r4
300066d8:	e1a01006 	mov	r1, r6
300066dc:	e1a02005 	mov	r2, r5
300066e0:	eb000513 	bl	30007b34 <_trace_task_0_overflow>
300066e4:	e3a00037 	mov	r0, #55	; 0x37
		return RAW_TASK_0_EVENT_EXHAUSTED;
300066e8:	eaffffd2 	b	30006638 <task_0_post+0x28>
		peak_events = task_0_events;
	}
	
	if (opt_send_method == SEND_TO_END) {

		task_0_event_position = task_0_event_head;
300066ec:	e59f3034 	ldr	r3, [pc, #52]	; 30006728 <task_0_post+0x118>
300066f0:	e1d310b0 	ldrh	r1, [r3]
		
		task_0_event_head++;
300066f4:	e2812001 	add	r2, r1, #1
300066f8:	e1a02802 	lsl	r2, r2, #16
300066fc:	e1a02822 	lsr	r2, r2, #16

		if (task_0_event_head == MAX_TASK_EVENT) {   
30006700:	e3520020 	cmp	r2, #32
	
	if (opt_send_method == SEND_TO_END) {

		task_0_event_position = task_0_event_head;
		
		task_0_event_head++;
30006704:	e1c320b0 	strh	r2, [r3]

		if (task_0_event_head == MAX_TASK_EVENT) {   
			
			task_0_event_head = 0;
30006708:	03a02000 	moveq	r2, #0
3000670c:	01c320b0 	strheq	r2, [r3]
30006710:	eaffffe4 	b	300066a8 <task_0_post+0x98>
30006714:	30013e61 	andcc	r3, r1, r1, ror #28
30006718:	30012b50 	andcc	r2, r1, r0, asr fp
3000671c:	30013844 	andcc	r3, r1, r4, asr #16
30006720:	3001383c 	andcc	r3, r1, ip, lsr r8
30006724:	30013ed4 	ldrdcc	r3, [r1], -r4
30006728:	30013846 	andcc	r3, r1, r6, asr #16

3000672c <raw_task_0_front_post>:
************************************************************************************************************************
*/
RAW_U16 raw_task_0_front_post(EVENT_HANLDER *p, TASK_0_EVENT_TYPE ev, void *event_data)
{

	return task_0_post(p, ev, event_data, SEND_TO_FRONT);
3000672c:	e3a03001 	mov	r3, #1
30006730:	eaffffb6 	b	30006610 <task_0_post>

30006734 <raw_task_0_post>:
************************************************************************************************************************
*/
RAW_U16 raw_task_0_post(EVENT_HANLDER *p, TASK_0_EVENT_TYPE ev, void *event_data)
{

	return task_0_post(p, ev, event_data, SEND_TO_END);
30006734:	e3a03002 	mov	r3, #2
30006738:	eaffffb4 	b	30006610 <task_0_post>

3000673c <int_msg_post>:
}



RAW_U16 int_msg_post(RAW_U8 type, void *p_obj, void *p_void, MSG_SIZE_TYPE msg_size, RAW_U32 flags, RAW_U8 opt)
{
3000673c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
30006740:	e24dd008 	sub	sp, sp, #8
30006744:	e1a07003 	mov	r7, r3
30006748:	e1a05000 	mov	r5, r0
3000674c:	e1a0a001 	mov	sl, r1
30006750:	e1a08002 	mov	r8, r2
30006754:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
30006758:	e5dd902c 	ldrb	r9, [sp, #44]	; 0x2c
	void *msg_data;

	RAW_SR_ALLOC();

	RAW_CPU_DISABLE();
3000675c:	eb000525 	bl	30007bf8 <OS_CPU_SR_Save>
	
	if (free_object_int_msg == 0) {
30006760:	e59f3084 	ldr	r3, [pc, #132]	; 300067ec <int_msg_post+0xb0>
30006764:	e5934000 	ldr	r4, [r3]
30006768:	e3540000 	cmp	r4, #0
3000676c:	0a000014 	beq	300067c4 <int_msg_post+0x88>
	free_object_int_msg->msg = p_void;
	free_object_int_msg->msg_size = msg_size;
	free_object_int_msg->event_flags = flags;
	free_object_int_msg->opt = opt;
	
	free_object_int_msg = free_object_int_msg->next;
30006770:	e5942004 	ldr	r2, [r4, #4]
		return RAW_INT_MSG_EXHAUSTED;
	}

	msg_data = free_object_int_msg;
	
	free_object_int_msg->type = type;
30006774:	e5c45000 	strb	r5, [r4]
	free_object_int_msg->object = p_obj;
	free_object_int_msg->msg = p_void;
	free_object_int_msg->msg_size = msg_size;
	free_object_int_msg->event_flags = flags;
	free_object_int_msg->opt = opt;
30006778:	e5c49001 	strb	r9, [r4, #1]
	}

	msg_data = free_object_int_msg;
	
	free_object_int_msg->type = type;
	free_object_int_msg->object = p_obj;
3000677c:	e584a008 	str	sl, [r4, #8]
	free_object_int_msg->msg = p_void;
	free_object_int_msg->msg_size = msg_size;
	free_object_int_msg->event_flags = flags;
	free_object_int_msg->opt = opt;
	
	free_object_int_msg = free_object_int_msg->next;
30006780:	e5832000 	str	r2, [r3]

	msg_data = free_object_int_msg;
	
	free_object_int_msg->type = type;
	free_object_int_msg->object = p_obj;
	free_object_int_msg->msg = p_void;
30006784:	e584800c 	str	r8, [r4, #12]
	free_object_int_msg->msg_size = msg_size;
30006788:	e5847010 	str	r7, [r4, #16]
	free_object_int_msg->event_flags = flags;
3000678c:	e5846014 	str	r6, [r4, #20]
	free_object_int_msg->opt = opt;
	
	free_object_int_msg = free_object_int_msg->next;

	RAW_CPU_ENABLE();
30006790:	eb000520 	bl	30007c18 <OS_CPU_SR_Restore>

	TRACE_INT_MSG_POST(type, p_obj, p_void, msg_size, flags, opt);
30006794:	e1a0100a 	mov	r1, sl
30006798:	e1a02008 	mov	r2, r8
3000679c:	e1a00005 	mov	r0, r5
300067a0:	e1a03007 	mov	r3, r7
300067a4:	e88d0240 	stm	sp, {r6, r9}
300067a8:	eb0004e3 	bl	30007b3c <_trace_int_msg_post>
	
	return raw_task_0_post(&msg_event_handler, type, msg_data);
300067ac:	e59f003c 	ldr	r0, [pc, #60]	; 300067f0 <int_msg_post+0xb4>
300067b0:	e1a01005 	mov	r1, r5
300067b4:	e1a02004 	mov	r2, r4

}
300067b8:	e28dd008 	add	sp, sp, #8
300067bc:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}

	RAW_CPU_ENABLE();

	TRACE_INT_MSG_POST(type, p_obj, p_void, msg_size, flags, opt);
	
	return raw_task_0_post(&msg_event_handler, type, msg_data);
300067c0:	eaffffdb 	b	30006734 <raw_task_0_post>

	RAW_CPU_DISABLE();
	
	if (free_object_int_msg == 0) {
		
		int_msg_full++;
300067c4:	e59f3028 	ldr	r3, [pc, #40]	; 300067f4 <int_msg_post+0xb8>
300067c8:	e5932000 	ldr	r2, [r3]
300067cc:	e2822001 	add	r2, r2, #1
300067d0:	e5832000 	str	r2, [r3]
		
		RAW_CPU_ENABLE();
300067d4:	eb00050f 	bl	30007c18 <OS_CPU_SR_Restore>
		
		TRACE_INT_MSG_EXHAUSTED();
300067d8:	eb0004d6 	bl	30007b38 <_trace_int_msg_exhausted>

	TRACE_INT_MSG_POST(type, p_obj, p_void, msg_size, flags, opt);
	
	return raw_task_0_post(&msg_event_handler, type, msg_data);

}
300067dc:	e3a00038 	mov	r0, #56	; 0x38
300067e0:	e28dd008 	add	sp, sp, #8
300067e4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
300067e8:	e12fff1e 	bx	lr
300067ec:	30013840 	andcc	r3, r1, r0, asr #16
300067f0:	30012b4c 	andcc	r2, r1, ip, asr #22
300067f4:	30013848 	andcc	r3, r1, r8, asr #16

300067f8 <task_0_tick_post>:
*
*             
************************************************************************************************************************
*/
RAW_U16 task_0_tick_post(void)
{
300067f8:	e92d4010 	push	{r4, lr}
	RAW_U16 ret;
	
	#if (CONFIG_RAW_ZERO_INTERRUPT > 0)
	
	if (raw_sched_lock) {
300067fc:	e59f3044 	ldr	r3, [pc, #68]	; 30006848 <task_0_tick_post+0x50>
30006800:	e5d34000 	ldrb	r4, [r3]
30006804:	e3540000 	cmp	r4, #0
30006808:	1a000007 	bne	3000682c <task_0_tick_post+0x34>
		ret = raw_task_0_post(&task_0_event_handler, raw_task_active->priority, 0);
	}

	else {
		
		task_0_tick_handler(raw_task_active->priority, 0);
3000680c:	e59f3038 	ldr	r3, [pc, #56]	; 3000684c <task_0_tick_post+0x54>
30006810:	e1a01004 	mov	r1, r4
30006814:	e5933000 	ldr	r3, [r3]
30006818:	e5d30019 	ldrb	r0, [r3, #25]
3000681c:	ebfffee9 	bl	300063c8 <task_0_tick_handler>

	#endif

	return ret;

}
30006820:	e1a00004 	mov	r0, r4
30006824:	e8bd4010 	pop	{r4, lr}
30006828:	e12fff1e 	bx	lr
	
	#if (CONFIG_RAW_ZERO_INTERRUPT > 0)
	
	if (raw_sched_lock) {
		
		ret = raw_task_0_post(&task_0_event_handler, raw_task_active->priority, 0);
3000682c:	e59f3018 	ldr	r3, [pc, #24]	; 3000684c <task_0_tick_post+0x54>
30006830:	e59f0018 	ldr	r0, [pc, #24]	; 30006850 <task_0_tick_post+0x58>
30006834:	e5933000 	ldr	r3, [r3]
30006838:	e3a02000 	mov	r2, #0
3000683c:	e5d31019 	ldrb	r1, [r3, #25]

	#endif

	return ret;

}
30006840:	e8bd4010 	pop	{r4, lr}
	
	#if (CONFIG_RAW_ZERO_INTERRUPT > 0)
	
	if (raw_sched_lock) {
		
		ret = raw_task_0_post(&task_0_event_handler, raw_task_active->priority, 0);
30006844:	eaffffba 	b	30006734 <raw_task_0_post>
30006848:	300142c0 	andcc	r4, r1, r0, asr #5
3000684c:	30013838 	andcc	r3, r1, r8, lsr r8
30006850:	300142c4 	andcc	r4, r1, r4, asr #5

30006854 <raw_task_qsize_get_information>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_task_qsize_get_information(RAW_TASK_OBJ *task_obj, RAW_U32 *queue_free_msg_size, RAW_U32 *queue_peak_msg_size, RAW_U32 *queue_current_msg)
{
30006854:	e92d4010 	push	{r4, lr}

	return raw_queue_size_get_information(task_obj->task_queue_size_obj, queue_free_msg_size, queue_peak_msg_size, queue_current_msg);
30006858:	e5900058 	ldr	r0, [r0, #88]	; 0x58
3000685c:	ebfff434 	bl	30003934 <raw_queue_size_get_information>
	
}
30006860:	e8bd4010 	pop	{r4, lr}
30006864:	e12fff1e 	bx	lr

30006868 <raw_task_qsize_delete>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_task_qsize_delete(RAW_TASK_OBJ *task_obj)
{
30006868:	e92d4010 	push	{r4, lr}

	return raw_queue_size_delete(task_obj->task_queue_size_obj);
3000686c:	e5900058 	ldr	r0, [r0, #88]	; 0x58
30006870:	ebfff44f 	bl	300039b4 <raw_queue_size_delete>
}
30006874:	e8bd4010 	pop	{r4, lr}
30006878:	e12fff1e 	bx	lr

3000687c <raw_task_qsize_flush>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_task_qsize_flush(RAW_TASK_OBJ *task_obj)
{
3000687c:	e92d4010 	push	{r4, lr}

	return raw_queue_size_flush(task_obj->task_queue_size_obj);
30006880:	e5900058 	ldr	r0, [r0, #88]	; 0x58
30006884:	ebfff489 	bl	30003ab0 <raw_queue_size_flush>
	
}
30006888:	e8bd4010 	pop	{r4, lr}
3000688c:	e12fff1e 	bx	lr

30006890 <raw_task_qsize_end_post>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_task_qsize_end_post(RAW_TASK_OBJ *task_obj, RAW_VOID  *p_void, RAW_U32 size)
{
30006890:	e92d4010 	push	{r4, lr}

	return raw_queue_size_end_post(task_obj->task_queue_size_obj, p_void, size);
30006894:	e5900058 	ldr	r0, [r0, #88]	; 0x58
30006898:	ebfff611 	bl	300040e4 <raw_queue_size_end_post>
}
3000689c:	e8bd4010 	pop	{r4, lr}
300068a0:	e12fff1e 	bx	lr

300068a4 <raw_task_qsize_front_post>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_task_qsize_front_post(RAW_TASK_OBJ *task_obj, RAW_VOID  *p_void, RAW_U32 size)
{
300068a4:	e92d4010 	push	{r4, lr}

	return raw_queue_size_front_post(task_obj->task_queue_size_obj, p_void, size);
300068a8:	e5900058 	ldr	r0, [r0, #88]	; 0x58
300068ac:	ebfff631 	bl	30004178 <raw_queue_size_front_post>
}
300068b0:	e8bd4010 	pop	{r4, lr}
300068b4:	e12fff1e 	bx	lr

300068b8 <raw_task_qsize_receive>:
*/

RAW_U16 raw_task_qsize_receive (RAW_TICK_TYPE wait_option, RAW_VOID  **msg_ptr, RAW_U32 *receive_size)
{

	return raw_queue_size_receive (raw_task_active->task_queue_size_obj, wait_option, msg_ptr, receive_size);
300068b8:	e59f3028 	ldr	r3, [pc, #40]	; 300068e8 <raw_task_qsize_receive+0x30>
*             
************************************************************************************************************************
*/

RAW_U16 raw_task_qsize_receive (RAW_TICK_TYPE wait_option, RAW_VOID  **msg_ptr, RAW_U32 *receive_size)
{
300068bc:	e92d4010 	push	{r4, lr}
300068c0:	e1a0e000 	mov	lr, r0

	return raw_queue_size_receive (raw_task_active->task_queue_size_obj, wait_option, msg_ptr, receive_size);
300068c4:	e5930000 	ldr	r0, [r3]
*             
************************************************************************************************************************
*/

RAW_U16 raw_task_qsize_receive (RAW_TICK_TYPE wait_option, RAW_VOID  **msg_ptr, RAW_U32 *receive_size)
{
300068c8:	e1a0c001 	mov	ip, r1
300068cc:	e1a03002 	mov	r3, r2

	return raw_queue_size_receive (raw_task_active->task_queue_size_obj, wait_option, msg_ptr, receive_size);
300068d0:	e1a0100e 	mov	r1, lr
300068d4:	e1a0200c 	mov	r2, ip
300068d8:	e5900058 	ldr	r0, [r0, #88]	; 0x58
300068dc:	ebfff4b3 	bl	30003bb0 <raw_queue_size_receive>
}
300068e0:	e8bd4010 	pop	{r4, lr}
300068e4:	e12fff1e 	bx	lr
300068e8:	30013838 	andcc	r3, r1, r8, lsr r8

300068ec <raw_task_qsize_create>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_task_qsize_create(RAW_TASK_OBJ *task_obj, RAW_QUEUE_SIZE *queue_size_obj, RAW_U8 *p_name, RAW_MSG_SIZE *msg_start, RAW_U32 number)
{
300068ec:	e1a0c001 	mov	ip, r1
300068f0:	e92d4010 	push	{r4, lr}
	
	task_obj->task_queue_size_obj = queue_size_obj;
300068f4:	e5801058 	str	r1, [r0, #88]	; 0x58
	
	return raw_queue_size_create(task_obj->task_queue_size_obj, p_name, msg_start, number);
300068f8:	e1a01002 	mov	r1, r2
300068fc:	e1a0000c 	mov	r0, ip
30006900:	e1a02003 	mov	r2, r3
30006904:	e59d3008 	ldr	r3, [sp, #8]
30006908:	ebfff63f 	bl	3000420c <raw_queue_size_create>
		
}
3000690c:	e8bd4010 	pop	{r4, lr}
30006910:	e12fff1e 	bx	lr

30006914 <raw_task_semaphore_delete>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_task_semaphore_delete(RAW_TASK_OBJ *task_obj)
{
30006914:	e92d4010 	push	{r4, lr}
	return raw_semaphore_delete(task_obj->task_semaphore_obj);
30006918:	e590005c 	ldr	r0, [r0, #92]	; 0x5c
3000691c:	ebfff773 	bl	300046f0 <raw_semaphore_delete>
}
30006920:	e8bd4010 	pop	{r4, lr}
30006924:	e12fff1e 	bx	lr

30006928 <raw_task_semaphore_set>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_task_semaphore_set(RAW_TASK_OBJ *task_obj, RAW_U32 sem_count)
{
30006928:	e92d4010 	push	{r4, lr}
	return raw_semaphore_set(task_obj->task_semaphore_obj, sem_count);
3000692c:	e590005c 	ldr	r0, [r0, #92]	; 0x5c
30006930:	ebfff6f6 	bl	30004510 <raw_semaphore_set>
}
30006934:	e8bd4010 	pop	{r4, lr}
30006938:	e12fff1e 	bx	lr

3000693c <raw_task_semaphore_get>:
*             
************************************************************************************************************************
*/
RAW_U16 raw_task_semaphore_get(RAW_TICK_TYPE wait_option)
{
	return raw_semaphore_get(raw_task_active->task_semaphore_obj, wait_option);
3000693c:	e59f3018 	ldr	r3, [pc, #24]	; 3000695c <raw_task_semaphore_get+0x20>
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_task_semaphore_get(RAW_TICK_TYPE wait_option)
{
30006940:	e1a01000 	mov	r1, r0
	return raw_semaphore_get(raw_task_active->task_semaphore_obj, wait_option);
30006944:	e5933000 	ldr	r3, [r3]
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_task_semaphore_get(RAW_TICK_TYPE wait_option)
{
30006948:	e92d4010 	push	{r4, lr}
	return raw_semaphore_get(raw_task_active->task_semaphore_obj, wait_option);
3000694c:	e593005c 	ldr	r0, [r3, #92]	; 0x5c
30006950:	ebfff7a5 	bl	300047ec <raw_semaphore_get>
}
30006954:	e8bd4010 	pop	{r4, lr}
30006958:	e12fff1e 	bx	lr
3000695c:	30013838 	andcc	r3, r1, r8, lsr r8

30006960 <raw_task_semaphore_put>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_task_semaphore_put(RAW_TASK_OBJ *task_obj)
{
30006960:	e92d4010 	push	{r4, lr}
	return raw_semaphore_put(task_obj->task_semaphore_obj);
30006964:	e590005c 	ldr	r0, [r0, #92]	; 0x5c
30006968:	ebfff88f 	bl	30004bac <raw_semaphore_put>
}
3000696c:	e8bd4010 	pop	{r4, lr}
30006970:	e12fff1e 	bx	lr

30006974 <raw_task_semaphore_create>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_task_semaphore_create(RAW_TASK_OBJ *task_obj, RAW_SEMAPHORE *semaphore_ptr, RAW_U8 *name_ptr, RAW_U32 initial_count) 
{
30006974:	e1a0c001 	mov	ip, r1
	task_obj->task_semaphore_obj = semaphore_ptr;
30006978:	e580105c 	str	r1, [r0, #92]	; 0x5c
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_task_semaphore_create(RAW_TASK_OBJ *task_obj, RAW_SEMAPHORE *semaphore_ptr, RAW_U8 *name_ptr, RAW_U32 initial_count) 
{
3000697c:	e92d4010 	push	{r4, lr}
	task_obj->task_semaphore_obj = semaphore_ptr;
	return raw_semaphore_create(task_obj->task_semaphore_obj, name_ptr, initial_count);
30006980:	e1a01002 	mov	r1, r2
30006984:	e1a0000c 	mov	r0, ip
30006988:	e1a02003 	mov	r2, r3
3000698c:	ebfff8a4 	bl	30004c24 <raw_semaphore_create>
}
30006990:	e8bd4010 	pop	{r4, lr}
30006994:	e12fff1e 	bx	lr

30006998 <tick_list_init>:
  */

#include <raw_api.h>

void tick_list_init(void)
{
30006998:	e59f3018 	ldr	r3, [pc, #24]	; 300069b8 <tick_list_init+0x20>
  *	xxxxxx   please added here
  */

#include <raw_api.h>

void tick_list_init(void)
3000699c:	e2832040 	add	r2, r3, #64	; 0x40
/*
 * List initialization
 */
RAW_INLINE void list_init(LIST *list_head)
{
	list_head->next = list_head;
300069a0:	e5833000 	str	r3, [r3]
	list_head->previous = list_head;
300069a4:	e5833004 	str	r3, [r3, #4]
300069a8:	e2833008 	add	r3, r3, #8
{
	RAW_U16 i;

	for (i = 0; i < TICK_HEAD_ARRAY; i++ ) {
300069ac:	e1530002 	cmp	r3, r2
300069b0:	1afffffa 	bne	300069a0 <tick_list_init+0x8>
		list_init(&tick_head[i]);
	}

}
300069b4:	e12fff1e 	bx	lr
300069b8:	30012b74 	andcc	r2, r1, r4, ror fp

300069bc <tick_list_insert>:
{
	LIST     *tick_head_ptr;

	RAW_U16   spoke;

	if (time) {
300069bc:	e3510000 	cmp	r1, #0
}


void  tick_list_insert(RAW_TASK_OBJ *task_ptr, RAW_TICK_TYPE time)
                        
{
300069c0:	e92d0030 	push	{r4, r5}
	LIST     *tick_head_ptr;

	RAW_U16   spoke;

	if (time) {
300069c4:	0a00001a 	beq	30006a34 <tick_list_insert+0x78>
	                               
		task_ptr->tick_match = raw_tick_count + time;
300069c8:	e59f3074 	ldr	r3, [pc, #116]	; 30006a44 <tick_list_insert+0x88>
		task_ptr->tick_remain = time;

		spoke   = (RAW_U16)(task_ptr->tick_match  &  (TICK_HEAD_ARRAY - 1) );
		tick_head_ptr = &tick_head[spoke];
300069cc:	e59fc074 	ldr	ip, [pc, #116]	; 30006a48 <tick_list_insert+0x8c>

	RAW_U16   spoke;

	if (time) {
	                               
		task_ptr->tick_match = raw_tick_count + time;
300069d0:	e5934000 	ldr	r4, [r3]
		task_ptr->tick_remain = time;
300069d4:	e580103c 	str	r1, [r0, #60]	; 0x3c

	RAW_U16   spoke;

	if (time) {
	                               
		task_ptr->tick_match = raw_tick_count + time;
300069d8:	e0812004 	add	r2, r1, r4
		task_ptr->tick_remain = time;

		spoke   = (RAW_U16)(task_ptr->tick_match  &  (TICK_HEAD_ARRAY - 1) );
		tick_head_ptr = &tick_head[spoke];
300069dc:	e2025007 	and	r5, r2, #7

	list_start = list_end = head;
	val = task_ptr->tick_remain;
	

	for (q = list_start->next; q != list_end; q = q->next) {
300069e0:	e79c3185 	ldr	r3, [ip, r5, lsl #3]
	                               
		task_ptr->tick_match = raw_tick_count + time;
		task_ptr->tick_remain = time;

		spoke   = (RAW_U16)(task_ptr->tick_match  &  (TICK_HEAD_ARRAY - 1) );
		tick_head_ptr = &tick_head[spoke];
300069e4:	e08cc185 	add	ip, ip, r5, lsl #3

	list_start = list_end = head;
	val = task_ptr->tick_remain;
	

	for (q = list_start->next; q != list_end; q = q->next) {
300069e8:	e15c0003 	cmp	ip, r3

	RAW_U16   spoke;

	if (time) {
	                               
		task_ptr->tick_match = raw_tick_count + time;
300069ec:	e5802038 	str	r2, [r0, #56]	; 0x38

	list_start = list_end = head;
	val = task_ptr->tick_remain;
	

	for (q = list_start->next; q != list_end; q = q->next) {
300069f0:	1a000003 	bne	30006a04 <tick_list_insert+0x48>
300069f4:	ea000010 	b	30006a3c <tick_list_insert+0x80>
300069f8:	e5933000 	ldr	r3, [r3]
300069fc:	e15c0003 	cmp	ip, r3
30006a00:	0a00000d 	beq	30006a3c <tick_list_insert+0x80>
		
		task_iter_temp = list_entry(q, RAW_TASK_OBJ, tick_list);
		
		/*sorted by remain time*/
		
		if ((task_iter_temp->tick_match - raw_tick_count) > val) {
30006a04:	e5932008 	ldr	r2, [r3, #8]
30006a08:	e0642002 	rsb	r2, r4, r2
30006a0c:	e1510002 	cmp	r1, r2
30006a10:	2afffff8 	bcs	300069f8 <tick_list_insert+0x3c>
 * add element before head.
 */
RAW_INLINE void list_insert(LIST *head, LIST *element)
{
	
	element->previous = head->previous;
30006a14:	e5931004 	ldr	r1, [r3, #4]
			break;
		}
	}

	list_insert(q, &task_ptr->tick_list);
30006a18:	e2802030 	add	r2, r0, #48	; 0x30
30006a1c:	e5801034 	str	r1, [r0, #52]	; 0x34
	element->next = head;
	
	head->previous->next = element;	
30006a20:	e5931004 	ldr	r1, [r3, #4]
 */
RAW_INLINE void list_insert(LIST *head, LIST *element)
{
	
	element->previous = head->previous;
	element->next = head;
30006a24:	e5803030 	str	r3, [r0, #48]	; 0x30
	
	head->previous->next = element;	
	head->previous = element;
30006a28:	e5832004 	str	r2, [r3, #4]
{
	
	element->previous = head->previous;
	element->next = head;
	
	head->previous->next = element;	
30006a2c:	e5812000 	str	r2, [r1]
		spoke   = (RAW_U16)(task_ptr->tick_match  &  (TICK_HEAD_ARRAY - 1) );
		tick_head_ptr = &tick_head[spoke];

		tick_list_priority_insert(tick_head_ptr, task_ptr);

		task_ptr->tick_head = tick_head_ptr;   
30006a30:	e580c040 	str	ip, [r0, #64]	; 0x40

	}                
	
}
30006a34:	e8bd0030 	pop	{r4, r5}
30006a38:	e12fff1e 	bx	lr

	list_start = list_end = head;
	val = task_ptr->tick_remain;
	

	for (q = list_start->next; q != list_end; q = q->next) {
30006a3c:	e1a0300c 	mov	r3, ip
30006a40:	eafffff3 	b	30006a14 <tick_list_insert+0x58>
30006a44:	30013834 	andcc	r3, r1, r4, lsr r8
30006a48:	30012b74 	andcc	r2, r1, r4, ror fp

30006a4c <tick_list_remove>:

void tick_list_remove(RAW_TASK_OBJ  *task_ptr)
{
	LIST  *tick_head_ptr;
    
	tick_head_ptr = task_ptr->tick_head;
30006a4c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
30006a50:	e3530000 	cmp	r3, #0
30006a54:	012fff1e 	bxeq	lr


RAW_INLINE void list_delete(LIST *element)
{

	element->previous->next = element->next;
30006a58:	e5903034 	ldr	r3, [r0, #52]	; 0x34
30006a5c:	e5902030 	ldr	r2, [r0, #48]	; 0x30
30006a60:	e5832000 	str	r2, [r3]
	element->next->previous = element->previous;
30006a64:	e5902030 	ldr	r2, [r0, #48]	; 0x30
30006a68:	e5823004 	str	r3, [r2, #4]

	if (tick_head_ptr) {
		list_delete(&task_ptr->tick_list);
		task_ptr->tick_head = 0;
30006a6c:	e3a03000 	mov	r3, #0
30006a70:	e5803040 	str	r3, [r0, #64]	; 0x40
30006a74:	e12fff1e 	bx	lr

30006a78 <tick_task_start>:
}



void tick_task_start(void)
{
30006a78:	e92d4030 	push	{r4, r5, lr}

	/*Create tick task to caculate task sleep and timeout*/
	raw_task_create(&tick_task_obj, (RAW_U8  *)"tick_task_object",  0, 
30006a7c:	e59fe05c 	ldr	lr, [pc, #92]	; 30006ae0 <tick_task_start+0x68>
}



void tick_task_start(void)
{
30006a80:	e24dd01c 	sub	sp, sp, #28

	/*Create tick task to caculate task sleep and timeout*/
	raw_task_create(&tick_task_obj, (RAW_U8  *)"tick_task_object",  0, 
30006a84:	e59f5058 	ldr	r5, [pc, #88]	; 30006ae4 <tick_task_start+0x6c>
30006a88:	e58de004 	str	lr, [sp, #4]
30006a8c:	e3a0ec01 	mov	lr, #256	; 0x100
30006a90:	e3a04000 	mov	r4, #0
30006a94:	e3a0c001 	mov	ip, #1
30006a98:	e58de008 	str	lr, [sp, #8]
30006a9c:	e59fe044 	ldr	lr, [pc, #68]	; 30006ae8 <tick_task_start+0x70>
30006aa0:	e1a0300c 	mov	r3, ip
30006aa4:	e1a02004 	mov	r2, r4
30006aa8:	e59f103c 	ldr	r1, [pc, #60]	; 30006aec <tick_task_start+0x74>
30006aac:	e1a00005 	mov	r0, r5
30006ab0:	e58de00c 	str	lr, [sp, #12]
30006ab4:	e58d4000 	str	r4, [sp]
30006ab8:	e58dc010 	str	ip, [sp, #16]
30006abc:	ebfffcf3 	bl	30005e90 <raw_task_create>
	TICK_TASK_PRIORITY,  0, tick_task_stack, TICK_TASK_STACK_SIZE, tick_task_process, 1);

	raw_task_semaphore_create(&tick_task_obj, &tick_semaphore_obj, (RAW_U8 *)"tick_semaphore_obj", 0); 
30006ac0:	e1a00005 	mov	r0, r5
30006ac4:	e1a03004 	mov	r3, r4
30006ac8:	e59f1020 	ldr	r1, [pc, #32]	; 30006af0 <tick_task_start+0x78>
30006acc:	e59f2020 	ldr	r2, [pc, #32]	; 30006af4 <tick_task_start+0x7c>
30006ad0:	ebffffa7 	bl	30006974 <raw_task_semaphore_create>

}
30006ad4:	e28dd01c 	add	sp, sp, #28
30006ad8:	e8bd4030 	pop	{r4, r5, lr}
30006adc:	e12fff1e 	bx	lr
30006ae0:	30012fc0 	andcc	r2, r1, r0, asr #31
30006ae4:	300137c8 	andcc	r3, r1, r8, asr #15
30006ae8:	30006cf4 	strdcc	r6, [r0], -r4
30006aec:	30007d08 	andcc	r7, r0, r8, lsl #26
30006af0:	30012b54 	andcc	r2, r1, r4, asr fp
30006af4:	30007d1c 	andcc	r7, r0, ip, lsl sp

30006af8 <tick_list_update>:
*
*             
************************************************************************************************************************
*/
void tick_list_update(void)
{
30006af8:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	RAW_U16   spoke;

	RAW_SR_ALLOC();

	RAW_CRITICAL_ENTER();
30006afc:	e59fb1e0 	ldr	fp, [pc, #480]	; 30006ce4 <tick_list_update+0x1ec>
30006b00:	eb00043c 	bl	30007bf8 <OS_CPU_SR_Save>
30006b04:	e5db3000 	ldrb	r3, [fp]
	
	raw_tick_count++;                                                     
30006b08:	e59f71d8 	ldr	r7, [pc, #472]	; 30006ce8 <tick_list_update+0x1f0>

	RAW_U16   spoke;

	RAW_SR_ALLOC();

	RAW_CRITICAL_ENTER();
30006b0c:	e2833001 	add	r3, r3, #1
30006b10:	e5cb3000 	strb	r3, [fp]
30006b14:	eb00043f 	bl	30007c18 <OS_CPU_SR_Restore>
	
	raw_tick_count++;                                                     
30006b18:	e5973000 	ldr	r3, [r7]
	spoke    = (RAW_U16)(raw_tick_count &  (TICK_HEAD_ARRAY - 1) );
	tick_head_ptr  = &tick_head[spoke];
30006b1c:	e59f21c8 	ldr	r2, [pc, #456]	; 30006cec <tick_list_update+0x1f4>

	RAW_SR_ALLOC();

	RAW_CRITICAL_ENTER();
	
	raw_tick_count++;                                                     
30006b20:	e2833001 	add	r3, r3, #1
	spoke    = (RAW_U16)(raw_tick_count &  (TICK_HEAD_ARRAY - 1) );
	tick_head_ptr  = &tick_head[spoke];
30006b24:	e2038007 	and	r8, r3, #7
	iter    = tick_head_ptr->next;
30006b28:	e7924188 	ldr	r4, [r2, r8, lsl #3]

	RAW_CRITICAL_ENTER();
	
	raw_tick_count++;                                                     
	spoke    = (RAW_U16)(raw_tick_count &  (TICK_HEAD_ARRAY - 1) );
	tick_head_ptr  = &tick_head[spoke];
30006b2c:	e0828188 	add	r8, r2, r8, lsl #3
	iter    = tick_head_ptr->next;
	
	while (RAW_TRUE) {

		/*search all the time list if possible*/
		if (iter != tick_head_ptr) {
30006b30:	e1580004 	cmp	r8, r4

	RAW_SR_ALLOC();

	RAW_CRITICAL_ENTER();
	
	raw_tick_count++;                                                     
30006b34:	e5873000 	str	r3, [r7]
	iter    = tick_head_ptr->next;
	
	while (RAW_TRUE) {

		/*search all the time list if possible*/
		if (iter != tick_head_ptr) {
30006b38:	0a00002b 	beq	30006bec <tick_list_update+0xf4>

			iter_temp =  iter->next;
30006b3c:	e4145030 	ldr	r5, [r4], #-48	; 0x30
			p_tcb =  list_entry(iter, RAW_TASK_OBJ, tick_list);

			/*Since time list is sorted by remain time, so just campare  the absolute time*/
			if (raw_tick_count == p_tcb->tick_match) {
30006b40:	e5942038 	ldr	r2, [r4, #56]	; 0x38
30006b44:	e1530002 	cmp	r3, r2
			
				switch (p_tcb->task_state) {
					case RAW_DLY:
						
						p_tcb->block_status = RAW_B_OK; 
30006b48:	03a06000 	moveq	r6, #0
						
						#if (CONFIG_RAW_MUTEX > 0)
						mutex_state_change(p_tcb);
						#endif
						
						p_tcb->block_status = RAW_B_TIMEOUT; 
30006b4c:	03a09002 	moveq	r9, #2
						#if (CONFIG_RAW_MUTEX > 0)
						mutex_state_change(p_tcb);
						#endif
						
						p_tcb->block_status = RAW_B_TIMEOUT; 
						p_tcb->task_state = RAW_SUSPENDED;  
30006b50:	03a0a004 	moveq	sl, #4

			iter_temp =  iter->next;
			p_tcb =  list_entry(iter, RAW_TASK_OBJ, tick_list);

			/*Since time list is sorted by remain time, so just campare  the absolute time*/
			if (raw_tick_count == p_tcb->tick_match) {
30006b54:	1a000024 	bne	30006bec <tick_list_update+0xf4>
			
				switch (p_tcb->task_state) {
30006b58:	e5d43050 	ldrb	r3, [r4, #80]	; 0x50
30006b5c:	e2433002 	sub	r3, r3, #2
30006b60:	e3530005 	cmp	r3, #5
30006b64:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
30006b68:	ea000017 	b	30006bcc <tick_list_update+0xd4>
30006b6c:	30006c84 	andcc	r6, r0, r4, lsl #25
30006b70:	30006b84 	andcc	r6, r0, r4, lsl #23
30006b74:	30006bcc 	andcc	r6, r0, ip, asr #23
30006b78:	30006bcc 	andcc	r6, r0, ip, asr #23
30006b7c:	30006c48 	andcc	r6, r0, r8, asr #24
30006b80:	30006c18 	andcc	r6, r0, r8, lsl ip

void tick_list_remove(RAW_TASK_OBJ  *task_ptr)
{
	LIST  *tick_head_ptr;
    
	tick_head_ptr = task_ptr->tick_head;
30006b84:	e5943040 	ldr	r3, [r4, #64]	; 0x40
30006b88:	e3530000 	cmp	r3, #0
30006b8c:	0a000005 	beq	30006ba8 <tick_list_update+0xb0>


RAW_INLINE void list_delete(LIST *element)
{

	element->previous->next = element->next;
30006b90:	e5943034 	ldr	r3, [r4, #52]	; 0x34
30006b94:	e5942030 	ldr	r2, [r4, #48]	; 0x30
30006b98:	e5832000 	str	r2, [r3]
	element->next->previous = element->previous;
30006b9c:	e5942030 	ldr	r2, [r4, #48]	; 0x30
30006ba0:	e5823004 	str	r3, [r2, #4]

	if (tick_head_ptr) {
		list_delete(&task_ptr->tick_list);
		task_ptr->tick_head = 0;
30006ba4:	e5846040 	str	r6, [r4, #64]	; 0x40


RAW_INLINE void list_delete(LIST *element)
{

	element->previous->next = element->next;
30006ba8:	e994000c 	ldmib	r4, {r2, r3}
						tick_list_remove(p_tcb);
						/*remove task on the block list because task is timeout*/
						list_delete(&p_tcb->task_list); 

						#if (CONFIG_RAW_MUTEX > 0)
						mutex_state_change(p_tcb);
30006bac:	e1a00004 	mov	r0, r4
30006bb0:	e5832000 	str	r2, [r3]
	element->next->previous = element->previous;
30006bb4:	e5942004 	ldr	r2, [r4, #4]
30006bb8:	e5823004 	str	r3, [r2, #4]
30006bbc:	ebffec04 	bl	30001bd4 <mutex_state_change>
						#endif
						
						p_tcb->block_status = RAW_B_TIMEOUT; 
						p_tcb->task_state = RAW_SUSPENDED;  
						p_tcb->block_obj = 0;
30006bc0:	e5846054 	str	r6, [r4, #84]	; 0x54

						#if (CONFIG_RAW_MUTEX > 0)
						mutex_state_change(p_tcb);
						#endif
						
						p_tcb->block_status = RAW_B_TIMEOUT; 
30006bc4:	e5c49051 	strb	r9, [r4, #81]	; 0x51
						p_tcb->task_state = RAW_SUSPENDED;  
30006bc8:	e5c4a050 	strb	sl, [r4, #80]	; 0x50
	iter    = tick_head_ptr->next;
	
	while (RAW_TRUE) {

		/*search all the time list if possible*/
		if (iter != tick_head_ptr) {
30006bcc:	e1580005 	cmp	r8, r5
30006bd0:	0a000005 	beq	30006bec <tick_list_update+0xf4>

			iter_temp =  iter->next;
30006bd4:	e1a04005 	mov	r4, r5
30006bd8:	e4145030 	ldr	r5, [r4], #-48	; 0x30
			p_tcb =  list_entry(iter, RAW_TASK_OBJ, tick_list);

			/*Since time list is sorted by remain time, so just campare  the absolute time*/
			if (raw_tick_count == p_tcb->tick_match) {
30006bdc:	e5973000 	ldr	r3, [r7]
30006be0:	e5942038 	ldr	r2, [r4, #56]	; 0x38
30006be4:	e1520003 	cmp	r2, r3
30006be8:	0affffda 	beq	30006b58 <tick_list_update+0x60>
			break;
		}
		
	}

	RAW_CRITICAL_EXIT();
30006bec:	e5db3000 	ldrb	r3, [fp]
30006bf0:	e59f40ec 	ldr	r4, [pc, #236]	; 30006ce4 <tick_list_update+0x1ec>
30006bf4:	e3530001 	cmp	r3, #1
30006bf8:	0a000037 	beq	30006cdc <tick_list_update+0x1e4>
30006bfc:	eb0003fd 	bl	30007bf8 <OS_CPU_SR_Save>
30006c00:	e5d43000 	ldrb	r3, [r4]
30006c04:	e2433001 	sub	r3, r3, #1
30006c08:	e5c43000 	strb	r3, [r4]
30006c0c:	eb000401 	bl	30007c18 <OS_CPU_SR_Restore>
}
30006c10:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
30006c14:	e12fff1e 	bx	lr

void tick_list_remove(RAW_TASK_OBJ  *task_ptr)
{
	LIST  *tick_head_ptr;
    
	tick_head_ptr = task_ptr->tick_head;
30006c18:	e5943040 	ldr	r3, [r4, #64]	; 0x40
						p_tcb->block_obj = 0;
						break;
					 
					case RAW_DLY_SUSPENDED:
										      
						p_tcb->task_state  =  RAW_SUSPENDED;
30006c1c:	e5c4a050 	strb	sl, [r4, #80]	; 0x50

void tick_list_remove(RAW_TASK_OBJ  *task_ptr)
{
	LIST  *tick_head_ptr;
    
	tick_head_ptr = task_ptr->tick_head;
30006c20:	e3530000 	cmp	r3, #0
						break;
					 
					case RAW_DLY_SUSPENDED:
										      
						p_tcb->task_state  =  RAW_SUSPENDED;
						p_tcb->block_status = RAW_B_OK; 
30006c24:	e5c46051 	strb	r6, [r4, #81]	; 0x51

void tick_list_remove(RAW_TASK_OBJ  *task_ptr)
{
	LIST  *tick_head_ptr;
    
	tick_head_ptr = task_ptr->tick_head;
30006c28:	0affffe7 	beq	30006bcc <tick_list_update+0xd4>


RAW_INLINE void list_delete(LIST *element)
{

	element->previous->next = element->next;
30006c2c:	e5943034 	ldr	r3, [r4, #52]	; 0x34
30006c30:	e5942030 	ldr	r2, [r4, #48]	; 0x30
30006c34:	e5832000 	str	r2, [r3]
	element->next->previous = element->previous;
30006c38:	e5942030 	ldr	r2, [r4, #48]	; 0x30
30006c3c:	e5823004 	str	r3, [r2, #4]

	if (tick_head_ptr) {
		list_delete(&task_ptr->tick_list);
		task_ptr->tick_head = 0;
30006c40:	e5846040 	str	r6, [r4, #64]	; 0x40
30006c44:	eaffffe0 	b	30006bcc <tick_list_update+0xd4>

void tick_list_remove(RAW_TASK_OBJ  *task_ptr)
{
	LIST  *tick_head_ptr;
    
	tick_head_ptr = task_ptr->tick_head;
30006c48:	e5943040 	ldr	r3, [r4, #64]	; 0x40
			if (raw_tick_count == p_tcb->tick_match) {
			
				switch (p_tcb->task_state) {
					case RAW_DLY:
						
						p_tcb->block_status = RAW_B_OK; 
30006c4c:	e5c46051 	strb	r6, [r4, #81]	; 0x51

void tick_list_remove(RAW_TASK_OBJ  *task_ptr)
{
	LIST  *tick_head_ptr;
    
	tick_head_ptr = task_ptr->tick_head;
30006c50:	e3530000 	cmp	r3, #0
			
				switch (p_tcb->task_state) {
					case RAW_DLY:
						
						p_tcb->block_status = RAW_B_OK; 
						p_tcb->task_state = RAW_RDY;  
30006c54:	e5c46050 	strb	r6, [r4, #80]	; 0x50

void tick_list_remove(RAW_TASK_OBJ  *task_ptr)
{
	LIST  *tick_head_ptr;
    
	tick_head_ptr = task_ptr->tick_head;
30006c58:	0a000005 	beq	30006c74 <tick_list_update+0x17c>


RAW_INLINE void list_delete(LIST *element)
{

	element->previous->next = element->next;
30006c5c:	e5943034 	ldr	r3, [r4, #52]	; 0x34
30006c60:	e5942030 	ldr	r2, [r4, #48]	; 0x30
30006c64:	e5832000 	str	r2, [r3]
	element->next->previous = element->previous;
30006c68:	e5942030 	ldr	r2, [r4, #48]	; 0x30
30006c6c:	e5823004 	str	r3, [r2, #4]

	if (tick_head_ptr) {
		list_delete(&task_ptr->tick_list);
		task_ptr->tick_head = 0;
30006c70:	e5846040 	str	r6, [r4, #64]	; 0x40
					case RAW_DLY:
						
						p_tcb->block_status = RAW_B_OK; 
						p_tcb->task_state = RAW_RDY;  
						tick_list_remove(p_tcb);
						add_ready_list(&raw_ready_queue, p_tcb);
30006c74:	e1a01004 	mov	r1, r4
30006c78:	e59f0070 	ldr	r0, [pc, #112]	; 30006cf0 <tick_list_update+0x1f8>
30006c7c:	ebffedb9 	bl	30002368 <add_ready_list>
						break; 
30006c80:	eaffffd1 	b	30006bcc <tick_list_update+0xd4>

void tick_list_remove(RAW_TASK_OBJ  *task_ptr)
{
	LIST  *tick_head_ptr;
    
	tick_head_ptr = task_ptr->tick_head;
30006c84:	e5943040 	ldr	r3, [r4, #64]	; 0x40
30006c88:	e3530000 	cmp	r3, #0
30006c8c:	0a000005 	beq	30006ca8 <tick_list_update+0x1b0>


RAW_INLINE void list_delete(LIST *element)
{

	element->previous->next = element->next;
30006c90:	e5943034 	ldr	r3, [r4, #52]	; 0x34
30006c94:	e5942030 	ldr	r2, [r4, #48]	; 0x30
30006c98:	e5832000 	str	r2, [r3]
	element->next->previous = element->previous;
30006c9c:	e5942030 	ldr	r2, [r4, #48]	; 0x30
30006ca0:	e5823004 	str	r3, [r2, #4]

	if (tick_head_ptr) {
		list_delete(&task_ptr->tick_list);
		task_ptr->tick_head = 0;
30006ca4:	e5846040 	str	r6, [r4, #64]	; 0x40


RAW_INLINE void list_delete(LIST *element)
{

	element->previous->next = element->next;
30006ca8:	e994000c 	ldmib	r4, {r2, r3}
					case RAW_PEND_TIMEOUT:
						
						tick_list_remove(p_tcb);
						/*remove task on the block list because task is timeout*/
						list_delete(&p_tcb->task_list); 
						add_ready_list(&raw_ready_queue, p_tcb);
30006cac:	e1a01004 	mov	r1, r4
30006cb0:	e5832000 	str	r2, [r3]
	element->next->previous = element->previous;
30006cb4:	e5942004 	ldr	r2, [r4, #4]
30006cb8:	e59f0030 	ldr	r0, [pc, #48]	; 30006cf0 <tick_list_update+0x1f8>
30006cbc:	e5823004 	str	r3, [r2, #4]
30006cc0:	ebffeda8 	bl	30002368 <add_ready_list>
						
						#if (CONFIG_RAW_MUTEX > 0)
						mutex_state_change(p_tcb);
30006cc4:	e1a00004 	mov	r0, r4
30006cc8:	ebffebc1 	bl	30001bd4 <mutex_state_change>
						#endif
						
						p_tcb->block_status = RAW_B_TIMEOUT; 
						p_tcb->task_state = RAW_RDY; 
						p_tcb->block_obj = 0;
30006ccc:	e5846054 	str	r6, [r4, #84]	; 0x54
						
						#if (CONFIG_RAW_MUTEX > 0)
						mutex_state_change(p_tcb);
						#endif
						
						p_tcb->block_status = RAW_B_TIMEOUT; 
30006cd0:	e5c49051 	strb	r9, [r4, #81]	; 0x51
						p_tcb->task_state = RAW_RDY; 
30006cd4:	e5c46050 	strb	r6, [r4, #80]	; 0x50
						p_tcb->block_obj = 0;
						break;
30006cd8:	eaffffbb 	b	30006bcc <tick_list_update+0xd4>
			break;
		}
		
	}

	RAW_CRITICAL_EXIT();
30006cdc:	ebfffe02 	bl	300064ec <hybrid_int_process>
30006ce0:	eaffffca 	b	30006c10 <tick_list_update+0x118>
30006ce4:	300142c0 	andcc	r4, r1, r0, asr #5
30006ce8:	30013834 	andcc	r3, r1, r4, lsr r8
30006cec:	30012b74 	andcc	r2, r1, r4, ror fp
30006cf0:	30013c4c 	andcc	r3, r1, ip, asr #24

30006cf4 <tick_task_process>:
}

#if (CONFIG_RAW_TICK_TASK > 0)

static void tick_task_process(void *para)
{
30006cf4:	e92d4010 	push	{r4, lr}
30006cf8:	e59f4020 	ldr	r4, [pc, #32]	; 30006d20 <tick_task_process+0x2c>
	RAW_U16 ret;
	
	while (1) {
		
		ret = raw_task_semaphore_get(RAW_WAIT_FOREVER);
30006cfc:	e3e00000 	mvn	r0, #0
30006d00:	ebffff0d 	bl	3000693c <raw_task_semaphore_get>

		if (ret == RAW_SUCCESS) {
30006d04:	e3500000 	cmp	r0, #0
30006d08:	1afffffb 	bne	30006cfc <tick_task_process+0x8>
			if (raw_os_active == RAW_OS_RUNNING) {
30006d0c:	e5d43000 	ldrb	r3, [r4]
30006d10:	e3530004 	cmp	r3, #4
30006d14:	1afffff8 	bne	30006cfc <tick_task_process+0x8>
				tick_list_update();
30006d18:	ebffff76 	bl	30006af8 <tick_list_update>
30006d1c:	eafffff6 	b	30006cfc <tick_task_process+0x8>
30006d20:	300133c0 	andcc	r3, r1, r0, asr #7

30006d24 <raw_timer_init>:
	}
}


void raw_timer_init(void)
{
30006d24:	e92d4010 	push	{r4, lr}
	raw_timer_ctrl = RAW_TIMER_RATE;
30006d28:	e59f207c 	ldr	r2, [pc, #124]	; 30006dac <raw_timer_init+0x88>
30006d2c:	e59f307c 	ldr	r3, [pc, #124]	; 30006db0 <raw_timer_init+0x8c>
30006d30:	e3a01001 	mov	r1, #1
30006d34:	e5821000 	str	r1, [r2]
	}
}


void raw_timer_init(void)
{
30006d38:	e24dd018 	sub	sp, sp, #24
		raw_semaphore_put(&timer_sem);
	}
}


void raw_timer_init(void)
30006d3c:	e2832020 	add	r2, r3, #32
/*
 * List initialization
 */
RAW_INLINE void list_init(LIST *list_head)
{
	list_head->next = list_head;
30006d40:	e5833000 	str	r3, [r3]
	list_head->previous = list_head;
30006d44:	e5833004 	str	r3, [r3, #4]
30006d48:	e2833008 	add	r3, r3, #8

static void timer_list_init(void)
{
	RAW_U16 i;

	for (i = 0; i < TIMER_HEAD_NUMBERS; i++ ) {
30006d4c:	e1530002 	cmp	r3, r2
30006d50:	1afffffa 	bne	30006d40 <raw_timer_init+0x1c>
	raw_timer_ctrl = RAW_TIMER_RATE;
	
	timer_list_init();
	
	/*Create a timer task to handle soft timer*/
	raw_task_create(&raw_timer_obj, (RAW_U8  *)"timer_object",  0, 
30006d54:	e59fc058 	ldr	ip, [pc, #88]	; 30006db4 <raw_timer_init+0x90>
30006d58:	e3a04000 	mov	r4, #0
30006d5c:	e58dc004 	str	ip, [sp, #4]
30006d60:	e3a0cc01 	mov	ip, #256	; 0x100
30006d64:	e58dc008 	str	ip, [sp, #8]
30006d68:	e59fc048 	ldr	ip, [pc, #72]	; 30006db8 <raw_timer_init+0x94>
30006d6c:	e1a02004 	mov	r2, r4
30006d70:	e58dc00c 	str	ip, [sp, #12]
30006d74:	e59f1040 	ldr	r1, [pc, #64]	; 30006dbc <raw_timer_init+0x98>
30006d78:	e3a0c001 	mov	ip, #1
30006d7c:	e3a03005 	mov	r3, #5
30006d80:	e59f0038 	ldr	r0, [pc, #56]	; 30006dc0 <raw_timer_init+0x9c>
30006d84:	e58dc010 	str	ip, [sp, #16]
30006d88:	e58d4000 	str	r4, [sp]
30006d8c:	ebfffc3f 	bl	30005e90 <raw_task_create>
	                  TIMER_TASK_PRIORITY,  0,   timer_task_stack, 
	                	TIMER_STACK_SIZE, timer_task, 1);

	/*create a semaphore for timer task*/
	raw_semaphore_create(&timer_sem, (RAW_U8 *)"timer_sem", 0);
30006d90:	e1a02004 	mov	r2, r4
30006d94:	e59f1028 	ldr	r1, [pc, #40]	; 30006dc4 <raw_timer_init+0xa0>
30006d98:	e59f0028 	ldr	r0, [pc, #40]	; 30006dc8 <raw_timer_init+0xa4>
30006d9c:	ebfff7a0 	bl	30004c24 <raw_semaphore_create>
		
}
30006da0:	e28dd018 	add	sp, sp, #24
30006da4:	e8bd4010 	pop	{r4, lr}
30006da8:	e12fff1e 	bx	lr
30006dac:	30012b70 	andcc	r2, r1, r0, ror fp
30006db0:	30014054 	andcc	r4, r1, r4, asr r0
30006db4:	300133c4 	andcc	r3, r1, r4, asr #7
30006db8:	30006e04 	andcc	r6, r0, r4, lsl #28
30006dbc:	30007d30 	andcc	r7, r0, r0, lsr sp
30006dc0:	30014074 	andcc	r4, r1, r4, ror r0
30006dc4:	30007d40 	andcc	r7, r0, r0, asr #26
30006dc8:	30013e48 	andcc	r3, r1, r8, asr #28

30006dcc <call_timer_task>:
*             
************************************************************************************************************************
*/
void call_timer_task(void)
{
	raw_timer_ctrl--;
30006dcc:	e59f3028 	ldr	r3, [pc, #40]	; 30006dfc <call_timer_task+0x30>
*
*             
************************************************************************************************************************
*/
void call_timer_task(void)
{
30006dd0:	e92d4010 	push	{r4, lr}
	raw_timer_ctrl--;
30006dd4:	e5932000 	ldr	r2, [r3]
30006dd8:	e2422001 	sub	r2, r2, #1
	
	if (raw_timer_ctrl == 0u) {
30006ddc:	e3520000 	cmp	r2, #0
*             
************************************************************************************************************************
*/
void call_timer_task(void)
{
	raw_timer_ctrl--;
30006de0:	e5832000 	str	r2, [r3]
	
	if (raw_timer_ctrl == 0u) {
		
		/*reload timer frequency ctrl.*/
		raw_timer_ctrl = RAW_TIMER_RATE;
30006de4:	03a02001 	moveq	r2, #1
		/*Release a semphore to timer task*/
		raw_semaphore_put(&timer_sem);
30006de8:	059f0010 	ldreq	r0, [pc, #16]	; 30006e00 <call_timer_task+0x34>
	raw_timer_ctrl--;
	
	if (raw_timer_ctrl == 0u) {
		
		/*reload timer frequency ctrl.*/
		raw_timer_ctrl = RAW_TIMER_RATE;
30006dec:	05832000 	streq	r2, [r3]
		/*Release a semphore to timer task*/
		raw_semaphore_put(&timer_sem);
30006df0:	0bfff76d 	bleq	30004bac <raw_semaphore_put>
	}
}
30006df4:	e8bd4010 	pop	{r4, lr}
30006df8:	e12fff1e 	bx	lr
30006dfc:	30012b70 	andcc	r2, r1, r0, ror fp
30006e00:	30013e48 	andcc	r3, r1, r8, asr #28

30006e04 <timer_task>:
*
*             
************************************************************************************************************************
*/
void timer_task(void *pa) 
{
30006e04:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	LIST 								*iter;
	LIST 								*iter_temp;
	RAW_TIMER							*timer_ptr;

	/*reset the timer_sem count since it may not be 0 at this point, make it start here*/
	raw_semaphore_set(&timer_sem, 0);
30006e08:	e59f0128 	ldr	r0, [pc, #296]	; 30006f38 <timer_task+0x134>
30006e0c:	e3a01000 	mov	r1, #0
30006e10:	ebfff5be 	bl	30004510 <raw_semaphore_set>
30006e14:	e59f5120 	ldr	r5, [pc, #288]	; 30006f3c <timer_task+0x138>
30006e18:	e59f4120 	ldr	r4, [pc, #288]	; 30006f40 <timer_task+0x13c>
	tick_head_ptr = timer_ptr->to_head;

	if (tick_head_ptr) {
		
		list_delete(&timer_ptr->timer_list);
		timer_ptr->to_head = 0;
30006e1c:	e3a06000 	mov	r6, #0
					          
					} 

					else {

						timer_ptr->timer_state = TIMER_DEACTIVE;
30006e20:	e3a07001 	mov	r7, #1
	pa = pa;
	
	while (1) {
		
		/*timer task will be blocked after call this function*/
		raw_semaphore_get(&timer_sem, RAW_WAIT_FOREVER);
30006e24:	e3e01000 	mvn	r1, #0
30006e28:	e59f0108 	ldr	r0, [pc, #264]	; 30006f38 <timer_task+0x134>
30006e2c:	ebfff66e 	bl	300047ec <raw_semaphore_get>

		raw_disable_sche();
30006e30:	ebfff877 	bl	30005014 <raw_disable_sche>

		/*calculate which  timer_head*/
		raw_timer_count++;                                          
30006e34:	e5953000 	ldr	r3, [r5]
30006e38:	e2833001 	add	r3, r3, #1
		position = (RAW_U16)(raw_timer_count & (TIMER_HEAD_NUMBERS - 1) );
		timer_head_ptr  = &timer_head[position];
30006e3c:	e203a003 	and	sl, r3, #3

		iter = timer_head_ptr->next;
30006e40:	e794118a 	ldr	r1, [r4, sl, lsl #3]
		raw_disable_sche();

		/*calculate which  timer_head*/
		raw_timer_count++;                                          
		position = (RAW_U16)(raw_timer_count & (TIMER_HEAD_NUMBERS - 1) );
		timer_head_ptr  = &timer_head[position];
30006e44:	e084a18a 	add	sl, r4, sl, lsl #3
		iter = timer_head_ptr->next;
		
		while (RAW_TRUE) {

			/*if timer exits*/	
			if (iter != timer_head_ptr) {
30006e48:	e15a0001 	cmp	sl, r1
		raw_semaphore_get(&timer_sem, RAW_WAIT_FOREVER);

		raw_disable_sche();

		/*calculate which  timer_head*/
		raw_timer_count++;                                          
30006e4c:	e5853000 	str	r3, [r5]
		iter = timer_head_ptr->next;
		
		while (RAW_TRUE) {

			/*if timer exits*/	
			if (iter != timer_head_ptr) {
30006e50:	0a000034 	beq	30006f28 <timer_task+0x124>
				/*Must use iter_temp because iter may be remove later.*/
				iter_temp = iter->next;
				timer_ptr =  list_entry(iter, RAW_TIMER, timer_list);

				/*if timeout*/
				if (raw_timer_count == timer_ptr->match) {  
30006e54:	e591c014 	ldr	ip, [r1, #20]
			/*if timer exits*/	
			if (iter != timer_head_ptr) {

				/*Must use iter_temp because iter may be remove later.*/
				iter_temp = iter->next;
				timer_ptr =  list_entry(iter, RAW_TIMER, timer_list);
30006e58:	e1a02001 	mov	r2, r1

				/*if timeout*/
				if (raw_timer_count == timer_ptr->match) {  
30006e5c:	e153000c 	cmp	r3, ip

			/*if timer exits*/	
			if (iter != timer_head_ptr) {

				/*Must use iter_temp because iter may be remove later.*/
				iter_temp = iter->next;
30006e60:	e5918000 	ldr	r8, [r1]
				timer_ptr =  list_entry(iter, RAW_TIMER, timer_list);

				/*if timeout*/
				if (raw_timer_count == timer_ptr->match) {  
30006e64:	1a00002f 	bne	30006f28 <timer_task+0x124>

static void timer_list_remove(RAW_TIMER *timer_ptr)
{
	LIST  *tick_head_ptr;
    
	tick_head_ptr = timer_ptr->to_head;
30006e68:	e5923008 	ldr	r3, [r2, #8]
30006e6c:	e3530000 	cmp	r3, #0
30006e70:	0a000004 	beq	30006e88 <timer_task+0x84>


RAW_INLINE void list_delete(LIST *element)
{

	element->previous->next = element->next;
30006e74:	e892000a 	ldm	r2, {r1, r3}
30006e78:	e5831000 	str	r1, [r3]
	element->next->previous = element->previous;
30006e7c:	e5921000 	ldr	r1, [r2]
30006e80:	e5813004 	str	r3, [r1, #4]

	if (tick_head_ptr) {
		
		list_delete(&timer_ptr->timer_list);
		timer_ptr->to_head = 0;
30006e84:	e5826008 	str	r6, [r2, #8]

					/*remove from timer list*/
					timer_list_remove(timer_ptr);

					/*if timer is reschedulable*/			
					if (timer_ptr->reschedule_ticks) {
30006e88:	e5920020 	ldr	r0, [r2, #32]
30006e8c:	e3500000 	cmp	r0, #0
					          
					} 

					else {

						timer_ptr->timer_state = TIMER_DEACTIVE;
30006e90:	05c27028 	strbeq	r7, [r2, #40]	; 0x28

					/*remove from timer list*/
					timer_list_remove(timer_ptr);

					/*if timer is reschedulable*/			
					if (timer_ptr->reschedule_ticks) {
30006e94:	0a000016 	beq	30006ef4 <timer_task+0xf0>

						/*Sort by remain time*/
						timer_ptr->remain = timer_ptr->reschedule_ticks;

						timer_ptr->match  = raw_timer_count + timer_ptr->remain;
30006e98:	e08c1000 	add	r1, ip, r0
						position   = (RAW_U16)(timer_ptr->match & (TIMER_HEAD_NUMBERS - 1));
						timer_ptr->to_head = &timer_head[position];
30006e9c:	e2013003 	and	r3, r1, #3
30006ea0:	e084e183 	add	lr, r4, r3, lsl #3
30006ea4:	e582e008 	str	lr, [r2, #8]
	RAW_TIMER  *task_iter_temp;

	list_start = list_end = head;
	val = timer_ptr->remain;
	
	for (q = list_start->next; q != list_end; q = q->next) {
30006ea8:	e7943183 	ldr	r3, [r4, r3, lsl #3]

					/*if timer is reschedulable*/			
					if (timer_ptr->reschedule_ticks) {

						/*Sort by remain time*/
						timer_ptr->remain = timer_ptr->reschedule_ticks;
30006eac:	e5820018 	str	r0, [r2, #24]
	RAW_TIMER  *task_iter_temp;

	list_start = list_end = head;
	val = timer_ptr->remain;
	
	for (q = list_start->next; q != list_end; q = q->next) {
30006eb0:	e15e0003 	cmp	lr, r3
					if (timer_ptr->reschedule_ticks) {

						/*Sort by remain time*/
						timer_ptr->remain = timer_ptr->reschedule_ticks;

						timer_ptr->match  = raw_timer_count + timer_ptr->remain;
30006eb4:	e5821014 	str	r1, [r2, #20]
	RAW_TIMER  *task_iter_temp;

	list_start = list_end = head;
	val = timer_ptr->remain;
	
	for (q = list_start->next; q != list_end; q = q->next) {
30006eb8:	1a000003 	bne	30006ecc <timer_task+0xc8>
30006ebc:	ea00001b 	b	30006f30 <timer_task+0x12c>
30006ec0:	e5933000 	ldr	r3, [r3]
30006ec4:	e15e0003 	cmp	lr, r3
30006ec8:	0a000018 	beq	30006f30 <timer_task+0x12c>

		task_iter_temp = list_entry(q, RAW_TIMER, timer_list);

		/*sorted by remain time*/
		
		if ((task_iter_temp->match - raw_timer_count) > val) {
30006ecc:	e5931014 	ldr	r1, [r3, #20]
30006ed0:	e06c1001 	rsb	r1, ip, r1
30006ed4:	e1500001 	cmp	r0, r1
30006ed8:	2afffff8 	bcs	30006ec0 <timer_task+0xbc>
 * add element before head.
 */
RAW_INLINE void list_insert(LIST *head, LIST *element)
{
	
	element->previous = head->previous;
30006edc:	e5931004 	ldr	r1, [r3, #4]
	element->next = head;
30006ee0:	e5823000 	str	r3, [r2]
 * add element before head.
 */
RAW_INLINE void list_insert(LIST *head, LIST *element)
{
	
	element->previous = head->previous;
30006ee4:	e5821004 	str	r1, [r2, #4]
	element->next = head;
	
	head->previous->next = element;	
30006ee8:	e5931004 	ldr	r1, [r3, #4]
	head->previous = element;
30006eec:	e5832004 	str	r2, [r3, #4]
{
	
	element->previous = head->previous;
	element->next = head;
	
	head->previous->next = element;	
30006ef0:	e5812000 	str	r2, [r1]

					}

					/*Any way both condition need to call registered timer function*/
					/*the registered timer function should not touch any timer related API,otherwise you get deadlock*/
					if (timer_ptr->raw_timeout_function) {
30006ef4:	e5923010 	ldr	r3, [r2, #16]
30006ef8:	e3530000 	cmp	r3, #0

						timer_ptr->raw_timeout_function(timer_ptr->raw_timeout_param);
30006efc:	15920024 	ldrne	r0, [r2, #36]	; 0x24
30006f00:	11a0e00f 	movne	lr, pc
30006f04:	112fff13 	bxne	r3
		iter = timer_head_ptr->next;
		
		while (RAW_TRUE) {

			/*if timer exits*/	
			if (iter != timer_head_ptr) {
30006f08:	e15a0008 	cmp	sl, r8
30006f0c:	0a000005 	beq	30006f28 <timer_task+0x124>
				/*Must use iter_temp because iter may be remove later.*/
				iter_temp = iter->next;
				timer_ptr =  list_entry(iter, RAW_TIMER, timer_list);

				/*if timeout*/
				if (raw_timer_count == timer_ptr->match) {  
30006f10:	e598c014 	ldr	ip, [r8, #20]
30006f14:	e5953000 	ldr	r3, [r5]
			/*if timer exits*/	
			if (iter != timer_head_ptr) {

				/*Must use iter_temp because iter may be remove later.*/
				iter_temp = iter->next;
				timer_ptr =  list_entry(iter, RAW_TIMER, timer_list);
30006f18:	e1a02008 	mov	r2, r8

				/*if timeout*/
				if (raw_timer_count == timer_ptr->match) {  
30006f1c:	e15c0003 	cmp	ip, r3

			/*if timer exits*/	
			if (iter != timer_head_ptr) {

				/*Must use iter_temp because iter may be remove later.*/
				iter_temp = iter->next;
30006f20:	e5988000 	ldr	r8, [r8]
				timer_ptr =  list_entry(iter, RAW_TIMER, timer_list);

				/*if timeout*/
				if (raw_timer_count == timer_ptr->match) {  
30006f24:	0affffcf 	beq	30006e68 <timer_task+0x64>
				break;
			}

		}

		raw_enable_sche();
30006f28:	ebfff8f4 	bl	30005300 <raw_enable_sche>

	}
30006f2c:	eaffffbc 	b	30006e24 <timer_task+0x20>
	RAW_TIMER  *task_iter_temp;

	list_start = list_end = head;
	val = timer_ptr->remain;
	
	for (q = list_start->next; q != list_end; q = q->next) {
30006f30:	e1a0300e 	mov	r3, lr
30006f34:	eaffffe8 	b	30006edc <timer_task+0xd8>
30006f38:	30013e48 	andcc	r3, r1, r8, asr #28
30006f3c:	300137c4 	andcc	r3, r1, r4, asr #15
30006f40:	30014054 	andcc	r4, r1, r4, asr r0

30006f44 <raw_timer_delete>:
*             
************************************************************************************************************************
*/
#if (CONFIG_RAW_TIMER_DELETE > 0)
RAW_U16 raw_timer_delete(RAW_TIMER *timer_ptr)
{
30006f44:	e92d4070 	push	{r4, r5, r6, lr}
	
	#if (RAW_TIMER_FUNCTION_CHECK > 0)
	
	if (timer_ptr == 0) {
30006f48:	e2504000 	subs	r4, r0, #0
30006f4c:	03a00025 	moveq	r0, #37	; 0x25
30006f50:	0a000008 	beq	30006f78 <raw_timer_delete+0x34>
		return RAW_NULL_OBJECT;
	}

	if (raw_int_nesting) {
30006f54:	e59f3070 	ldr	r3, [pc, #112]	; 30006fcc <raw_timer_delete+0x88>
30006f58:	e5d35000 	ldrb	r5, [r3]
30006f5c:	e3550000 	cmp	r5, #0
30006f60:	13a00027 	movne	r0, #39	; 0x27
30006f64:	1a000003 	bne	30006f78 <raw_timer_delete+0x34>
		return RAW_NOT_CALLED_BY_ISR;	
	}
	
	#endif

	if (timer_ptr->object_type != RAW_TIMER_OBJ_TYPE) {
30006f68:	e5d43029 	ldrb	r3, [r4, #41]	; 0x29
30006f6c:	e3530018 	cmp	r3, #24
30006f70:	13a00036 	movne	r0, #54	; 0x36
30006f74:	0a000001 	beq	30006f80 <raw_timer_delete+0x3c>
	timer_ptr->timer_state = TIMER_DELETED;
	raw_enable_sche();
   
	return RAW_SUCCESS;

}
30006f78:	e8bd4070 	pop	{r4, r5, r6, lr}
30006f7c:	e12fff1e 	bx	lr
	if (timer_ptr->object_type != RAW_TIMER_OBJ_TYPE) {

		return RAW_ERROR_OBJECT_TYPE;
	}
	
	if (timer_ptr->timer_state == TIMER_DELETED) {
30006f80:	e5d43028 	ldrb	r3, [r4, #40]	; 0x28
30006f84:	e3530003 	cmp	r3, #3
30006f88:	03a00021 	moveq	r0, #33	; 0x21
30006f8c:	0afffff9 	beq	30006f78 <raw_timer_delete+0x34>
		
		return RAW_TIMER_STATE_INVALID;
		
	}
	
	raw_disable_sche();
30006f90:	ebfff81f 	bl	30005014 <raw_disable_sche>

static void timer_list_remove(RAW_TIMER *timer_ptr)
{
	LIST  *tick_head_ptr;
    
	tick_head_ptr = timer_ptr->to_head;
30006f94:	e5943008 	ldr	r3, [r4, #8]
		return RAW_TIMER_STATE_INVALID;
		
	}
	
	raw_disable_sche();
	timer_ptr->object_type = 0u;
30006f98:	e5c45029 	strb	r5, [r4, #41]	; 0x29

static void timer_list_remove(RAW_TIMER *timer_ptr)
{
	LIST  *tick_head_ptr;
    
	tick_head_ptr = timer_ptr->to_head;
30006f9c:	e3530000 	cmp	r3, #0
30006fa0:	0a000004 	beq	30006fb8 <raw_timer_delete+0x74>


RAW_INLINE void list_delete(LIST *element)
{

	element->previous->next = element->next;
30006fa4:	e894000c 	ldm	r4, {r2, r3}
30006fa8:	e5832000 	str	r2, [r3]
	element->next->previous = element->previous;
30006fac:	e5942000 	ldr	r2, [r4]
30006fb0:	e5823004 	str	r3, [r2, #4]

	if (tick_head_ptr) {
		
		list_delete(&timer_ptr->timer_list);
		timer_ptr->to_head = 0;
30006fb4:	e5845008 	str	r5, [r4, #8]
	}
	
	raw_disable_sche();
	timer_ptr->object_type = 0u;
	timer_list_remove(timer_ptr);
	timer_ptr->timer_state = TIMER_DELETED;
30006fb8:	e3a03003 	mov	r3, #3
30006fbc:	e5c43028 	strb	r3, [r4, #40]	; 0x28
	raw_enable_sche();
30006fc0:	ebfff8ce 	bl	30005300 <raw_enable_sche>
30006fc4:	e3a00000 	mov	r0, #0
   
	return RAW_SUCCESS;
30006fc8:	eaffffea 	b	30006f78 <raw_timer_delete+0x34>
30006fcc:	30013e61 	andcc	r3, r1, r1, ror #28

30006fd0 <raw_timer_deactivate>:
*             
************************************************************************************************************************
*/
#if (CONFIG_RAW_TIMER_DEACTIVATE > 0)
RAW_U16 raw_timer_deactivate(RAW_TIMER *timer_ptr)
{
30006fd0:	e92d4070 	push	{r4, r5, r6, lr}
	
	#if (RAW_TIMER_FUNCTION_CHECK > 0)
	
	if (timer_ptr == 0) {
30006fd4:	e2504000 	subs	r4, r0, #0
30006fd8:	03a00025 	moveq	r0, #37	; 0x25
30006fdc:	0a000008 	beq	30007004 <raw_timer_deactivate+0x34>
		return RAW_NULL_OBJECT;
	}

	if (raw_int_nesting) {
30006fe0:	e59f3078 	ldr	r3, [pc, #120]	; 30007060 <raw_timer_deactivate+0x90>
30006fe4:	e5d35000 	ldrb	r5, [r3]
30006fe8:	e3550000 	cmp	r5, #0
30006fec:	13a00027 	movne	r0, #39	; 0x27
30006ff0:	1a000003 	bne	30007004 <raw_timer_deactivate+0x34>
		
	}
	
	#endif

	if (timer_ptr->object_type != RAW_TIMER_OBJ_TYPE) {
30006ff4:	e5d43029 	ldrb	r3, [r4, #41]	; 0x29
30006ff8:	e3530018 	cmp	r3, #24
30006ffc:	13a00036 	movne	r0, #54	; 0x36
30007000:	0a000001 	beq	3000700c <raw_timer_deactivate+0x3c>
	timer_ptr->timer_state = TIMER_DEACTIVE;
	raw_enable_sche();
	
	return RAW_SUCCESS;

}
30007004:	e8bd4070 	pop	{r4, r5, r6, lr}
30007008:	e12fff1e 	bx	lr

		return RAW_ERROR_OBJECT_TYPE;
	}
	
	/*Timer state TIMER_DEACTIVE  TIMER_DELETED is not allowed to delete*/
	if (timer_ptr->timer_state == TIMER_DEACTIVE) {
3000700c:	e5d43028 	ldrb	r3, [r4, #40]	; 0x28
30007010:	e3530001 	cmp	r3, #1
30007014:	0a00000f 	beq	30007058 <raw_timer_deactivate+0x88>
		return RAW_TIMER_STATE_INVALID;
	}
	
	if (timer_ptr->timer_state == TIMER_DELETED) {
30007018:	e3530003 	cmp	r3, #3
3000701c:	0a00000d 	beq	30007058 <raw_timer_deactivate+0x88>
		return RAW_TIMER_STATE_INVALID;

	}
	
	raw_disable_sche();
30007020:	ebfff7fb 	bl	30005014 <raw_disable_sche>

static void timer_list_remove(RAW_TIMER *timer_ptr)
{
	LIST  *tick_head_ptr;
    
	tick_head_ptr = timer_ptr->to_head;
30007024:	e5943008 	ldr	r3, [r4, #8]
30007028:	e3530000 	cmp	r3, #0
3000702c:	0a000004 	beq	30007044 <raw_timer_deactivate+0x74>


RAW_INLINE void list_delete(LIST *element)
{

	element->previous->next = element->next;
30007030:	e894000c 	ldm	r4, {r2, r3}
30007034:	e5832000 	str	r2, [r3]
	element->next->previous = element->previous;
30007038:	e5942000 	ldr	r2, [r4]
3000703c:	e5823004 	str	r3, [r2, #4]

	if (tick_head_ptr) {
		
		list_delete(&timer_ptr->timer_list);
		timer_ptr->to_head = 0;
30007040:	e5845008 	str	r5, [r4, #8]

	}
	
	raw_disable_sche();
	timer_list_remove(timer_ptr);
	timer_ptr->timer_state = TIMER_DEACTIVE;
30007044:	e3a03001 	mov	r3, #1
30007048:	e5c43028 	strb	r3, [r4, #40]	; 0x28
	raw_enable_sche();
3000704c:	ebfff8ab 	bl	30005300 <raw_enable_sche>
30007050:	e3a00000 	mov	r0, #0
	
	return RAW_SUCCESS;
30007054:	eaffffea 	b	30007004 <raw_timer_deactivate+0x34>
30007058:	e3a00021 	mov	r0, #33	; 0x21
3000705c:	eaffffe8 	b	30007004 <raw_timer_deactivate+0x34>
30007060:	30013e61 	andcc	r3, r1, r1, ror #28

30007064 <raw_timer_change>:
*             
************************************************************************************************************************
*/
#if (CONFIG_RAW_TIMER_CHANGE > 0)
RAW_U16 raw_timer_change(RAW_TIMER *timer_ptr, RAW_TICK_TYPE initial_ticks, RAW_TICK_TYPE reschedule_ticks)
{
30007064:	e92d4030 	push	{r4, r5, lr}

	#if (RAW_TIMER_FUNCTION_CHECK > 0)
	
	if (timer_ptr == 0) {
30007068:	e2504000 	subs	r4, r0, #0
*             
************************************************************************************************************************
*/
#if (CONFIG_RAW_TIMER_CHANGE > 0)
RAW_U16 raw_timer_change(RAW_TIMER *timer_ptr, RAW_TICK_TYPE initial_ticks, RAW_TICK_TYPE reschedule_ticks)
{
3000706c:	e24dd00c 	sub	sp, sp, #12

	#if (RAW_TIMER_FUNCTION_CHECK > 0)
	
	if (timer_ptr == 0) {
30007070:	03a00025 	moveq	r0, #37	; 0x25
30007074:	0a000008 	beq	3000709c <raw_timer_change+0x38>
		return RAW_NULL_OBJECT;
	}


	if (raw_int_nesting) {
30007078:	e59f3060 	ldr	r3, [pc, #96]	; 300070e0 <raw_timer_change+0x7c>
3000707c:	e5d35000 	ldrb	r5, [r3]
30007080:	e3550000 	cmp	r5, #0
30007084:	13a00027 	movne	r0, #39	; 0x27
30007088:	1a000003 	bne	3000709c <raw_timer_change+0x38>
		
	}
	
	#endif

	if (timer_ptr->object_type != RAW_TIMER_OBJ_TYPE) {
3000708c:	e5d43029 	ldrb	r3, [r4, #41]	; 0x29
30007090:	e3530018 	cmp	r3, #24
30007094:	13a00036 	movne	r0, #54	; 0x36
30007098:	0a000002 	beq	300070a8 <raw_timer_change+0x44>
	timer_ptr->init_count = initial_ticks;
	timer_ptr->reschedule_ticks = reschedule_ticks;
	raw_enable_sche();
	
	return RAW_SUCCESS;
}
3000709c:	e28dd00c 	add	sp, sp, #12
300070a0:	e8bd4030 	pop	{r4, r5, lr}
300070a4:	e12fff1e 	bx	lr
		return RAW_ERROR_OBJECT_TYPE;
	}
	
	
	/*Only timer state TIMER_DEACTIVE is  allowed here*/	
	if (timer_ptr->timer_state != TIMER_DEACTIVE) {
300070a8:	e5d43028 	ldrb	r3, [r4, #40]	; 0x28
300070ac:	e3530001 	cmp	r3, #1
300070b0:	13a00021 	movne	r0, #33	; 0x21
300070b4:	1afffff8 	bne	3000709c <raw_timer_change+0x38>
	
	if (timer_ptr->timer_state == TIMER_DELETED) {
		return RAW_TIMER_STATE_INVALID;
	}
	
	raw_disable_sche();
300070b8:	e58d1004 	str	r1, [sp, #4]
300070bc:	e58d2000 	str	r2, [sp]
300070c0:	ebfff7d3 	bl	30005014 <raw_disable_sche>
	timer_ptr->init_count = initial_ticks;
	timer_ptr->reschedule_ticks = reschedule_ticks;
300070c4:	e59d2000 	ldr	r2, [sp]
	if (timer_ptr->timer_state == TIMER_DELETED) {
		return RAW_TIMER_STATE_INVALID;
	}
	
	raw_disable_sche();
	timer_ptr->init_count = initial_ticks;
300070c8:	e59d1004 	ldr	r1, [sp, #4]
	timer_ptr->reschedule_ticks = reschedule_ticks;
300070cc:	e5842020 	str	r2, [r4, #32]
	if (timer_ptr->timer_state == TIMER_DELETED) {
		return RAW_TIMER_STATE_INVALID;
	}
	
	raw_disable_sche();
	timer_ptr->init_count = initial_ticks;
300070d0:	e584101c 	str	r1, [r4, #28]
	timer_ptr->reschedule_ticks = reschedule_ticks;
	raw_enable_sche();
300070d4:	ebfff889 	bl	30005300 <raw_enable_sche>
300070d8:	e1a00005 	mov	r0, r5
	
	return RAW_SUCCESS;
300070dc:	eaffffee 	b	3000709c <raw_timer_change+0x38>
300070e0:	30013e61 	andcc	r3, r1, r1, ror #28

300070e4 <raw_timer_activate>:
*
*             
************************************************************************************************************************
*/
RAW_U16 raw_timer_activate(RAW_TIMER *timer_ptr, RAW_VOID *expiration_input)
{
300070e4:	e92d4010 	push	{r4, lr}
	RAW_U16 position;
	
	#if (RAW_TIMER_FUNCTION_CHECK > 0)
	
	if (timer_ptr == 0) {
300070e8:	e2504000 	subs	r4, r0, #0
300070ec:	03a00025 	moveq	r0, #37	; 0x25
300070f0:	0a000008 	beq	30007118 <raw_timer_activate+0x34>
		return RAW_NULL_OBJECT;
	}

	if (raw_int_nesting) {
300070f4:	e59f30d0 	ldr	r3, [pc, #208]	; 300071cc <raw_timer_activate+0xe8>
300070f8:	e5d33000 	ldrb	r3, [r3]
300070fc:	e3530000 	cmp	r3, #0
30007100:	13a00027 	movne	r0, #39	; 0x27
30007104:	1a000003 	bne	30007118 <raw_timer_activate+0x34>
	}

	
	#endif

	if (timer_ptr->object_type != RAW_TIMER_OBJ_TYPE) {
30007108:	e5d43029 	ldrb	r3, [r4, #41]	; 0x29
3000710c:	e3530018 	cmp	r3, #24
30007110:	13a00036 	movne	r0, #54	; 0x36
30007114:	0a000001 	beq	30007120 <raw_timer_activate+0x3c>
	timer_list_priority_insert(&timer_head[position], timer_ptr);
	timer_ptr->timer_state = TIMER_ACTIVE;
	raw_enable_sche();

	return RAW_SUCCESS;
}
30007118:	e8bd4010 	pop	{r4, lr}
3000711c:	e12fff1e 	bx	lr

		return RAW_ERROR_OBJECT_TYPE;
	}
	
	/*Timer state TIMER_ACTIVE TIMER_DELETED is not allowed to delete*/
	if (timer_ptr->timer_state == TIMER_ACTIVE) {
30007120:	e5d43028 	ldrb	r3, [r4, #40]	; 0x28
30007124:	e3530002 	cmp	r3, #2
30007128:	0a000023 	beq	300071bc <raw_timer_activate+0xd8>
		
		return RAW_TIMER_STATE_INVALID;	
	}

	if (timer_ptr->timer_state == TIMER_DELETED) {
3000712c:	e3530003 	cmp	r3, #3
30007130:	0a000021 	beq	300071bc <raw_timer_activate+0xd8>
		
		return RAW_TIMER_STATE_INVALID;
	}

	timer_ptr->raw_timeout_param = expiration_input;
30007134:	e5841024 	str	r1, [r4, #36]	; 0x24
	
	raw_disable_sche();
30007138:	ebfff7b5 	bl	30005014 <raw_disable_sche>
	timer_ptr->match  = raw_timer_count + timer_ptr->init_count;
3000713c:	e59f308c 	ldr	r3, [pc, #140]	; 300071d0 <raw_timer_activate+0xec>
30007140:	e594001c 	ldr	r0, [r4, #28]
30007144:	e593c000 	ldr	ip, [r3]
	position   = (RAW_U16)(timer_ptr->match & (TIMER_HEAD_NUMBERS - 1) );
	/*Sort by remain time*/
	timer_ptr->remain = timer_ptr->init_count;
	/*Used by timer delete*/
	timer_ptr->to_head = &timer_head[position];
30007148:	e59f3084 	ldr	r3, [pc, #132]	; 300071d4 <raw_timer_activate+0xf0>
	}

	timer_ptr->raw_timeout_param = expiration_input;
	
	raw_disable_sche();
	timer_ptr->match  = raw_timer_count + timer_ptr->init_count;
3000714c:	e08c2000 	add	r2, ip, r0
	position   = (RAW_U16)(timer_ptr->match & (TIMER_HEAD_NUMBERS - 1) );
	/*Sort by remain time*/
	timer_ptr->remain = timer_ptr->init_count;
	/*Used by timer delete*/
	timer_ptr->to_head = &timer_head[position];
30007150:	e202e003 	and	lr, r2, #3
30007154:	e083118e 	add	r1, r3, lr, lsl #3
30007158:	e5841008 	str	r1, [r4, #8]
	RAW_TIMER  *task_iter_temp;

	list_start = list_end = head;
	val = timer_ptr->remain;
	
	for (q = list_start->next; q != list_end; q = q->next) {
3000715c:	e793318e 	ldr	r3, [r3, lr, lsl #3]
	}

	timer_ptr->raw_timeout_param = expiration_input;
	
	raw_disable_sche();
	timer_ptr->match  = raw_timer_count + timer_ptr->init_count;
30007160:	e5842014 	str	r2, [r4, #20]
	RAW_TIMER  *task_iter_temp;

	list_start = list_end = head;
	val = timer_ptr->remain;
	
	for (q = list_start->next; q != list_end; q = q->next) {
30007164:	e1510003 	cmp	r1, r3
	
	raw_disable_sche();
	timer_ptr->match  = raw_timer_count + timer_ptr->init_count;
	position   = (RAW_U16)(timer_ptr->match & (TIMER_HEAD_NUMBERS - 1) );
	/*Sort by remain time*/
	timer_ptr->remain = timer_ptr->init_count;
30007168:	e5840018 	str	r0, [r4, #24]
	RAW_TIMER  *task_iter_temp;

	list_start = list_end = head;
	val = timer_ptr->remain;
	
	for (q = list_start->next; q != list_end; q = q->next) {
3000716c:	1a000003 	bne	30007180 <raw_timer_activate+0x9c>
30007170:	ea000013 	b	300071c4 <raw_timer_activate+0xe0>
30007174:	e5933000 	ldr	r3, [r3]
30007178:	e1510003 	cmp	r1, r3
3000717c:	0a000010 	beq	300071c4 <raw_timer_activate+0xe0>

		task_iter_temp = list_entry(q, RAW_TIMER, timer_list);

		/*sorted by remain time*/
		
		if ((task_iter_temp->match - raw_timer_count) > val) {
30007180:	e5932014 	ldr	r2, [r3, #20]
30007184:	e06c2002 	rsb	r2, ip, r2
30007188:	e1500002 	cmp	r0, r2
3000718c:	2afffff8 	bcs	30007174 <raw_timer_activate+0x90>
 * add element before head.
 */
RAW_INLINE void list_insert(LIST *head, LIST *element)
{
	
	element->previous = head->previous;
30007190:	e5932004 	ldr	r2, [r3, #4]
	element->next = head;
30007194:	e5843000 	str	r3, [r4]
 * add element before head.
 */
RAW_INLINE void list_insert(LIST *head, LIST *element)
{
	
	element->previous = head->previous;
30007198:	e5842004 	str	r2, [r4, #4]
	element->next = head;
	
	head->previous->next = element;	
3000719c:	e5932004 	ldr	r2, [r3, #4]
	head->previous = element;
300071a0:	e5834004 	str	r4, [r3, #4]
	timer_ptr->remain = timer_ptr->init_count;
	/*Used by timer delete*/
	timer_ptr->to_head = &timer_head[position];
	
	timer_list_priority_insert(&timer_head[position], timer_ptr);
	timer_ptr->timer_state = TIMER_ACTIVE;
300071a4:	e3a03002 	mov	r3, #2
{
	
	element->previous = head->previous;
	element->next = head;
	
	head->previous->next = element;	
300071a8:	e5824000 	str	r4, [r2]
300071ac:	e5c43028 	strb	r3, [r4, #40]	; 0x28
	raw_enable_sche();
300071b0:	ebfff852 	bl	30005300 <raw_enable_sche>
300071b4:	e3a00000 	mov	r0, #0

	return RAW_SUCCESS;
300071b8:	eaffffd6 	b	30007118 <raw_timer_activate+0x34>
300071bc:	e3a00021 	mov	r0, #33	; 0x21
300071c0:	eaffffd4 	b	30007118 <raw_timer_activate+0x34>
	RAW_TIMER  *task_iter_temp;

	list_start = list_end = head;
	val = timer_ptr->remain;
	
	for (q = list_start->next; q != list_end; q = q->next) {
300071c4:	e1a03001 	mov	r3, r1
300071c8:	eafffff0 	b	30007190 <raw_timer_activate+0xac>
300071cc:	30013e61 	andcc	r3, r1, r1, ror #28
300071d0:	300137c4 	andcc	r3, r1, r4, asr #15
300071d4:	30014054 	andcc	r4, r1, r4, asr r0

300071d8 <raw_timer_create>:
*/
RAW_U16 raw_timer_create(RAW_TIMER *timer_ptr, RAW_U8  *name_ptr, 
            RAW_VOID  (*expiration_function)(RAW_VOID *expiration_input), RAW_VOID *expiration_input,
          RAW_TICK_TYPE initial_ticks, RAW_TICK_TYPE reschedule_ticks, RAW_U8 auto_activate)

{
300071d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	
	#if (RAW_TIMER_FUNCTION_CHECK > 0)
	
	if (timer_ptr == 0) {
300071dc:	e250c000 	subs	ip, r0, #0
*/
RAW_U16 raw_timer_create(RAW_TIMER *timer_ptr, RAW_U8  *name_ptr, 
            RAW_VOID  (*expiration_function)(RAW_VOID *expiration_input), RAW_VOID *expiration_input,
          RAW_TICK_TYPE initial_ticks, RAW_TICK_TYPE reschedule_ticks, RAW_U8 auto_activate)

{
300071e0:	e59d5018 	ldr	r5, [sp, #24]
300071e4:	e5dd6020 	ldrb	r6, [sp, #32]
	
	#if (RAW_TIMER_FUNCTION_CHECK > 0)
	
	if (timer_ptr == 0) {
300071e8:	03a00025 	moveq	r0, #37	; 0x25
300071ec:	0a00001c 	beq	30007264 <raw_timer_create+0x8c>
		return RAW_NULL_OBJECT;
	}
	
	if (expiration_function == 0) {
300071f0:	e3520000 	cmp	r2, #0
300071f4:	03a00023 	moveq	r0, #35	; 0x23
300071f8:	0a000019 	beq	30007264 <raw_timer_create+0x8c>
		return RAW_NULL_POINTER;
	}

	if (initial_ticks == 0) {
300071fc:	e3550000 	cmp	r5, #0
30007200:	03a00022 	moveq	r0, #34	; 0x22
30007204:	0a000016 	beq	30007264 <raw_timer_create+0x8c>
		return RAW_TIMER_INVALID_TICKS;

	}

	if (raw_int_nesting) {
30007208:	e59f406c 	ldr	r4, [pc, #108]	; 3000727c <raw_timer_create+0xa4>
3000720c:	e5d44000 	ldrb	r4, [r4]
30007210:	e3540000 	cmp	r4, #0
30007214:	13a00027 	movne	r0, #39	; 0x27
30007218:	1a000011 	bne	30007264 <raw_timer_create+0x8c>
	timer_ptr->timer_state = TIMER_DEACTIVE;
	timer_ptr->to_head = 0;
	
	list_init(&timer_ptr->timer_list);

	timer_ptr->object_type = RAW_TIMER_OBJ_TYPE;
3000721c:	e3a07018 	mov	r7, #24
30007220:	e5cc7029 	strb	r7, [ip, #41]	; 0x29
	#endif
	
	timer_ptr->name = name_ptr;
	timer_ptr->raw_timeout_function = expiration_function;
	timer_ptr->raw_timeout_param = expiration_input;
	timer_ptr->init_count = initial_ticks;
30007224:	e58c501c 	str	r5, [ip, #28]
	}
	
	#endif
	
	timer_ptr->name = name_ptr;
	timer_ptr->raw_timeout_function = expiration_function;
30007228:	e58c2010 	str	r2, [ip, #16]
	timer_ptr->raw_timeout_param = expiration_input;
	timer_ptr->init_count = initial_ticks;
	timer_ptr->reschedule_ticks = reschedule_ticks;
3000722c:	e59d201c 	ldr	r2, [sp, #28]
	
	list_init(&timer_ptr->timer_list);

	timer_ptr->object_type = RAW_TIMER_OBJ_TYPE;
	
	if (auto_activate) {
30007230:	e3560000 	cmp	r6, #0
	
	timer_ptr->name = name_ptr;
	timer_ptr->raw_timeout_function = expiration_function;
	timer_ptr->raw_timeout_param = expiration_input;
	timer_ptr->init_count = initial_ticks;
	timer_ptr->reschedule_ticks = reschedule_ticks;
30007234:	e58c2020 	str	r2, [ip, #32]
	timer_ptr->remain = 0u;
	timer_ptr->match = 0u;
	timer_ptr->timer_state = TIMER_DEACTIVE;
30007238:	e3a02001 	mov	r2, #1
		return RAW_NOT_CALLED_BY_ISR;	
	}
	
	#endif
	
	timer_ptr->name = name_ptr;
3000723c:	e58c100c 	str	r1, [ip, #12]
	timer_ptr->raw_timeout_param = expiration_input;
	timer_ptr->init_count = initial_ticks;
	timer_ptr->reschedule_ticks = reschedule_ticks;
	timer_ptr->remain = 0u;
	timer_ptr->match = 0u;
	timer_ptr->timer_state = TIMER_DEACTIVE;
30007240:	e5cc2028 	strb	r2, [ip, #40]	; 0x28
	
	#endif
	
	timer_ptr->name = name_ptr;
	timer_ptr->raw_timeout_function = expiration_function;
	timer_ptr->raw_timeout_param = expiration_input;
30007244:	e58c3024 	str	r3, [ip, #36]	; 0x24
	timer_ptr->init_count = initial_ticks;
	timer_ptr->reschedule_ticks = reschedule_ticks;
	timer_ptr->remain = 0u;
30007248:	e58c4018 	str	r4, [ip, #24]
	timer_ptr->match = 0u;
3000724c:	e58c4014 	str	r4, [ip, #20]
	timer_ptr->timer_state = TIMER_DEACTIVE;
	timer_ptr->to_head = 0;
30007250:	e58c4008 	str	r4, [ip, #8]
/*
 * List initialization
 */
RAW_INLINE void list_init(LIST *list_head)
{
	list_head->next = list_head;
30007254:	e58cc000 	str	ip, [ip]
	list_head->previous = list_head;
30007258:	e58cc004 	str	ip, [ip, #4]
	
	list_init(&timer_ptr->timer_list);

	timer_ptr->object_type = RAW_TIMER_OBJ_TYPE;
	
	if (auto_activate) {
3000725c:	01a00006 	moveq	r0, r6
30007260:	1a000001 	bne	3000726c <raw_timer_create+0x94>
		
		 raw_timer_activate(timer_ptr, expiration_input);
	}

	return RAW_SUCCESS;
}
30007264:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
30007268:	e12fff1e 	bx	lr

	timer_ptr->object_type = RAW_TIMER_OBJ_TYPE;
	
	if (auto_activate) {
		
		 raw_timer_activate(timer_ptr, expiration_input);
3000726c:	e1a01003 	mov	r1, r3
30007270:	ebffff9b 	bl	300070e4 <raw_timer_activate>
30007274:	e1a00004 	mov	r0, r4
30007278:	eafffff9 	b	30007264 <raw_timer_create+0x8c>
3000727c:	30013e61 	andcc	r3, r1, r1, ror #28

30007280 <test_task>:
}

extern int test_switch;

void test_task()
{
30007280:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}

	if(1 == test_switch) {
30007284:	e59fc0ac 	ldr	ip, [pc, #172]	; 30007338 <test_task+0xb8>
}

extern int test_switch;

void test_task()
{
30007288:	e24dd018 	sub	sp, sp, #24

	if(1 == test_switch) {
3000728c:	e59c3000 	ldr	r3, [ip]
30007290:	e3530001 	cmp	r3, #1
30007294:	0a000024 	beq	3000732c <test_task+0xac>
		return;
	}

	test_switch = 1;

        raw_task_create(&test_task_obj[0], (RAW_U8  *)"task1", 0,
30007298:	e59f509c 	ldr	r5, [pc, #156]	; 3000733c <test_task+0xbc>
	if(1 == test_switch) {

		return;
	}

	test_switch = 1;
3000729c:	e3a04001 	mov	r4, #1
300072a0:	e58c4000 	str	r4, [ip]

        raw_task_create(&test_task_obj[0], (RAW_U8  *)"task1", 0,
300072a4:	e59fc094 	ldr	ip, [pc, #148]	; 30007340 <test_task+0xc0>
300072a8:	e3a0600a 	mov	r6, #10
300072ac:	e3a07b01 	mov	r7, #1024	; 0x400
300072b0:	e59f108c 	ldr	r1, [pc, #140]	; 30007344 <test_task+0xc4>
300072b4:	e3a02000 	mov	r2, #0
300072b8:	e3a03005 	mov	r3, #5
300072bc:	e2450f51 	sub	r0, r5, #324	; 0x144
300072c0:	e58dc00c 	str	ip, [sp, #12]
                                 5, 10,  test_task_stack1,
                                 TEST_TASK_STK_SIZE ,  test_task1, 1);


        raw_task_create(&test_task_obj[1], (RAW_U8  *)"task2", 0,
300072c4:	e59f807c 	ldr	r8, [pc, #124]	; 30007348 <test_task+0xc8>
		return;
	}

	test_switch = 1;

        raw_task_create(&test_task_obj[0], (RAW_U8  *)"task1", 0,
300072c8:	e58d6000 	str	r6, [sp]
300072cc:	e98d00a0 	stmib	sp, {r5, r7}
300072d0:	e58d4010 	str	r4, [sp, #16]
300072d4:	ebfffaed 	bl	30005e90 <raw_task_create>
                                 5, 10,  test_task_stack1,
                                 TEST_TASK_STK_SIZE ,  test_task1, 1);


        raw_task_create(&test_task_obj[1], (RAW_U8  *)"task2", 0,
300072d8:	e59fc06c 	ldr	ip, [pc, #108]	; 3000734c <test_task+0xcc>
300072dc:	e59f106c 	ldr	r1, [pc, #108]	; 30007350 <test_task+0xd0>
300072e0:	e3a02000 	mov	r2, #0
300072e4:	e3a0300f 	mov	r3, #15
300072e8:	e24500d8 	sub	r0, r5, #216	; 0xd8
300072ec:	e58dc00c 	str	ip, [sp, #12]
300072f0:	e88d0140 	stm	sp, {r6, r8}
300072f4:	e58d7008 	str	r7, [sp, #8]
300072f8:	e58d4010 	str	r4, [sp, #16]
300072fc:	ebfffae3 	bl	30005e90 <raw_task_create>
                                 15, 10,   test_task_stack2,
                                 TEST_TASK_STK_SIZE ,  test_task2, 1);

	raw_task_create(&test_task_obj[2], (RAW_U8  *)"task3", 0,
30007300:	e59fc04c 	ldr	ip, [pc, #76]	; 30007354 <test_task+0xd4>
30007304:	e2888a01 	add	r8, r8, #4096	; 0x1000
30007308:	e245006c 	sub	r0, r5, #108	; 0x6c
3000730c:	e59f1044 	ldr	r1, [pc, #68]	; 30007358 <test_task+0xd8>
30007310:	e3a02000 	mov	r2, #0
30007314:	e3a03014 	mov	r3, #20
30007318:	e88d0140 	stm	sp, {r6, r8}
3000731c:	e58d7008 	str	r7, [sp, #8]
30007320:	e58dc00c 	str	ip, [sp, #12]
30007324:	e58d4010 	str	r4, [sp, #16]
30007328:	ebfffad8 	bl	30005e90 <raw_task_create>
                                 20, 10,   test_task_stack3,
                                 TEST_TASK_STK_SIZE ,  test_task3, 1);


}
3000732c:	e28dd018 	add	sp, sp, #24
30007330:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
30007334:	e12fff1e 	bx	lr
30007338:	30007e20 	andcc	r7, r0, r0, lsr #28
3000733c:	30007f68 	andcc	r7, r0, r8, ror #30
30007340:	3000739c 	mulcc	r0, ip, r3
30007344:	30007d4c 	andcc	r7, r0, ip, asr #26
30007348:	30008f68 	andcc	r8, r0, r8, ror #30
3000734c:	3000737c 	andcc	r7, r0, ip, ror r3
30007350:	30007d54 	andcc	r7, r0, r4, asr sp
30007354:	3000735c 	andcc	r7, r0, ip, asr r3
30007358:	30007d5c 	andcc	r7, r0, ip, asr sp

3000735c <test_task3>:
        }
}


static void test_task3(void * pParam)
{
3000735c:	e92d4010 	push	{r4, lr}

        while(1) {
		__put_char("go ", 3);
30007360:	e3a01003 	mov	r1, #3
30007364:	e59f000c 	ldr	r0, [pc, #12]	; 30007378 <test_task3+0x1c>
30007368:	ebffe50f 	bl	300007ac <__put_char>
		raw_sleep(5);
3000736c:	e3a00005 	mov	r0, #5
30007370:	ebfffa60 	bl	30005cf8 <raw_sleep>
30007374:	eafffff9 	b	30007360 <test_task3+0x4>
30007378:	30007d64 	andcc	r7, r0, r4, ror #26

3000737c <test_task2>:
		raw_sleep(10);	
        }
}

static void test_task2(void * pParam)
{
3000737c:	e92d4010 	push	{r4, lr}

        while(1) {
		__put_char("bye ", 4);
30007380:	e3a01004 	mov	r1, #4
30007384:	e59f000c 	ldr	r0, [pc, #12]	; 30007398 <test_task2+0x1c>
30007388:	ebffe507 	bl	300007ac <__put_char>
		raw_sleep(5);
3000738c:	e3a00005 	mov	r0, #5
30007390:	ebfffa58 	bl	30005cf8 <raw_sleep>
30007394:	eafffff9 	b	30007380 <test_task2+0x4>
30007398:	30007d68 	andcc	r7, r0, r8, ror #26

3000739c <test_task1>:
static PORT_STACK test_task_stack1[TEST_TASK_STK_SIZE];
static PORT_STACK test_task_stack2[TEST_TASK_STK_SIZE];
static PORT_STACK test_task_stack3[TEST_TASK_STK_SIZE];

static void test_task1(void * pParam)
{
3000739c:	e92d4010 	push	{r4, lr}

        while(1) {
		__put_char("hi ", 3);
300073a0:	e3a01003 	mov	r1, #3
300073a4:	e59f000c 	ldr	r0, [pc, #12]	; 300073b8 <test_task1+0x1c>
300073a8:	ebffe4ff 	bl	300007ac <__put_char>
		raw_sleep(10);	
300073ac:	e3a0000a 	mov	r0, #10
300073b0:	ebfffa50 	bl	30005cf8 <raw_sleep>
300073b4:	eafffff9 	b	300073a0 <test_task1+0x4>
300073b8:	30007d70 	andcc	r7, r0, r0, ror sp

300073bc <test_sem>:


extern int test_switch;

void test_sem()
{
300073bc:	e92d40f0 	push	{r4, r5, r6, r7, lr}

	if(1 == test_switch) {
300073c0:	e59f3094 	ldr	r3, [pc, #148]	; 3000745c <test_sem+0xa0>


extern int test_switch;

void test_sem()
{
300073c4:	e24dd01c 	sub	sp, sp, #28

	if(1 == test_switch) {
300073c8:	e5932000 	ldr	r2, [r3]
300073cc:	e3520001 	cmp	r2, #1
300073d0:	0a00001e 	beq	30007450 <test_sem+0x94>

		return;
	}

	test_switch = 1;
300073d4:	e3a04001 	mov	r4, #1

	raw_semaphore_create(&s1, "sem1", 0);

        raw_task_create(&test_task_obj[0], (RAW_U8  *)"task1", 0,
300073d8:	e59f5080 	ldr	r5, [pc, #128]	; 30007460 <test_sem+0xa4>
		return;
	}

	test_switch = 1;

	raw_semaphore_create(&s1, "sem1", 0);
300073dc:	e59f1080 	ldr	r1, [pc, #128]	; 30007464 <test_sem+0xa8>
300073e0:	e3a02000 	mov	r2, #0
	if(1 == test_switch) {

		return;
	}

	test_switch = 1;
300073e4:	e5834000 	str	r4, [r3]

	raw_semaphore_create(&s1, "sem1", 0);
300073e8:	e59f0078 	ldr	r0, [pc, #120]	; 30007468 <test_sem+0xac>
300073ec:	ebfff60c 	bl	30004c24 <raw_semaphore_create>

        raw_task_create(&test_task_obj[0], (RAW_U8  *)"task1", 0,
300073f0:	e59fc074 	ldr	ip, [pc, #116]	; 3000746c <test_sem+0xb0>
300073f4:	e3a0700a 	mov	r7, #10
300073f8:	e3a06b01 	mov	r6, #1024	; 0x400
300073fc:	e59f106c 	ldr	r1, [pc, #108]	; 30007470 <test_sem+0xb4>
30007400:	e3a02000 	mov	r2, #0
30007404:	e3a03005 	mov	r3, #5
30007408:	e24500d8 	sub	r0, r5, #216	; 0xd8
3000740c:	e58dc00c 	str	ip, [sp, #12]
30007410:	e58d7000 	str	r7, [sp]
30007414:	e98d0060 	stmib	sp, {r5, r6}
30007418:	e58d4010 	str	r4, [sp, #16]
3000741c:	ebfffa9b 	bl	30005e90 <raw_task_create>
                                 5, 10,  test_task_stack1,
                                 TEST_TASK_STK_SIZE ,  test_task1, 1);


        raw_task_create(&test_task_obj[1], (RAW_U8  *)"task2", 0,
30007420:	e59fc04c 	ldr	ip, [pc, #76]	; 30007474 <test_sem+0xb8>
30007424:	e245006c 	sub	r0, r5, #108	; 0x6c
30007428:	e58dc004 	str	ip, [sp, #4]
3000742c:	e59fc044 	ldr	ip, [pc, #68]	; 30007478 <test_sem+0xbc>
30007430:	e59f1044 	ldr	r1, [pc, #68]	; 3000747c <test_sem+0xc0>
30007434:	e3a02000 	mov	r2, #0
30007438:	e3a03005 	mov	r3, #5
3000743c:	e58d7000 	str	r7, [sp]
30007440:	e58d6008 	str	r6, [sp, #8]
30007444:	e58dc00c 	str	ip, [sp, #12]
30007448:	e58d4010 	str	r4, [sp, #16]
3000744c:	ebfffa8f 	bl	30005e90 <raw_task_create>
                                 5, 10,   test_task_stack2,
                                 TEST_TASK_STK_SIZE ,  test_task2, 1);



}
30007450:	e28dd01c 	add	sp, sp, #28
30007454:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
30007458:	e12fff1e 	bx	lr
3000745c:	30007e20 	andcc	r7, r0, r0, lsr #28
30007460:	3000b058 	andcc	fp, r0, r8, asr r0
30007464:	30007d74 	andcc	r7, r0, r4, ror sp
30007468:	3000af68 	andcc	sl, r0, r8, ror #30
3000746c:	300074ac 	andcc	r7, r0, ip, lsr #9
30007470:	30007d4c 	andcc	r7, r0, ip, asr #26
30007474:	3000c058 	andcc	ip, r0, r8, asr r0
30007478:	30007480 	andcc	r7, r0, r0, lsl #9
3000747c:	30007d54 	andcc	r7, r0, r4, asr sp

30007480 <test_task2>:
		raw_sleep(2);
        }
}

static void test_task2(void * pParam)
{
30007480:	e92d4010 	push	{r4, lr}

        while(1) {
		raw_semaphore_put(&s1);
30007484:	e59f0018 	ldr	r0, [pc, #24]	; 300074a4 <test_task2+0x24>
30007488:	ebfff5c7 	bl	30004bac <raw_semaphore_put>
		__put_char("get ", 4);
3000748c:	e3a01004 	mov	r1, #4
30007490:	e59f0010 	ldr	r0, [pc, #16]	; 300074a8 <test_task2+0x28>
30007494:	ebffe4c4 	bl	300007ac <__put_char>

		raw_sleep(100);
30007498:	e3a00064 	mov	r0, #100	; 0x64
3000749c:	ebfffa15 	bl	30005cf8 <raw_sleep>
300074a0:	eafffff7 	b	30007484 <test_task2+0x4>
300074a4:	3000af68 	andcc	sl, r0, r8, ror #30
300074a8:	30007d7c 	andcc	r7, r0, ip, ror sp

300074ac <test_task1>:
static PORT_STACK test_task_stack2[TEST_TASK_STK_SIZE];

static RAW_SEMAPHORE s1;

static void test_task1(void * pParam)
{
300074ac:	e92d4010 	push	{r4, lr}

        while(1) {	

		raw_semaphore_get(&s1, RAW_WAIT_FOREVER);
300074b0:	e3e01000 	mvn	r1, #0
300074b4:	e59f0018 	ldr	r0, [pc, #24]	; 300074d4 <test_task1+0x28>
300074b8:	ebfff4cb 	bl	300047ec <raw_semaphore_get>
		__put_char("give ", 5);
300074bc:	e3a01005 	mov	r1, #5
300074c0:	e59f0010 	ldr	r0, [pc, #16]	; 300074d8 <test_task1+0x2c>
300074c4:	ebffe4b8 	bl	300007ac <__put_char>

		raw_sleep(2);
300074c8:	e3a00002 	mov	r0, #2
300074cc:	ebfffa09 	bl	30005cf8 <raw_sleep>
300074d0:	eafffff6 	b	300074b0 <test_task1+0x4>
300074d4:	3000af68 	andcc	sl, r0, r8, ror #30
300074d8:	30007d84 	andcc	r7, r0, r4, lsl #27

300074dc <test_mutex>:


extern int test_switch;

void test_mutex()
{
300074dc:	e92d40f0 	push	{r4, r5, r6, r7, lr}

	if(1 == test_switch) {
300074e0:	e59fc098 	ldr	ip, [pc, #152]	; 30007580 <test_mutex+0xa4>


extern int test_switch;

void test_mutex()
{
300074e4:	e24dd01c 	sub	sp, sp, #28

	if(1 == test_switch) {
300074e8:	e59c3000 	ldr	r3, [ip]
300074ec:	e3530001 	cmp	r3, #1
300074f0:	0a00001f 	beq	30007574 <test_mutex+0x98>

		return;
	}

	test_switch = 1;
300074f4:	e3a04001 	mov	r4, #1

	raw_mutex_create(&m1, "mutex1", RAW_MUTEX_INHERIT_POLICY, 0);


        raw_task_create(&test_task_obj[0], (RAW_U8  *)"task1", 0,
300074f8:	e59f5084 	ldr	r5, [pc, #132]	; 30007584 <test_mutex+0xa8>
		return;
	}

	test_switch = 1;

	raw_mutex_create(&m1, "mutex1", RAW_MUTEX_INHERIT_POLICY, 0);
300074fc:	e59f1084 	ldr	r1, [pc, #132]	; 30007588 <test_mutex+0xac>
30007500:	e3a02002 	mov	r2, #2
30007504:	e3a03000 	mov	r3, #0
	if(1 == test_switch) {

		return;
	}

	test_switch = 1;
30007508:	e58c4000 	str	r4, [ip]

	raw_mutex_create(&m1, "mutex1", RAW_MUTEX_INHERIT_POLICY, 0);
3000750c:	e59f0078 	ldr	r0, [pc, #120]	; 3000758c <test_mutex+0xb0>
30007510:	ebffeb31 	bl	300021dc <raw_mutex_create>


        raw_task_create(&test_task_obj[0], (RAW_U8  *)"task1", 0,
30007514:	e59fc074 	ldr	ip, [pc, #116]	; 30007590 <test_mutex+0xb4>
30007518:	e3a0700a 	mov	r7, #10
3000751c:	e3a06b01 	mov	r6, #1024	; 0x400
30007520:	e59f106c 	ldr	r1, [pc, #108]	; 30007594 <test_mutex+0xb8>
30007524:	e3a02000 	mov	r2, #0
30007528:	e3a03005 	mov	r3, #5
3000752c:	e24500d8 	sub	r0, r5, #216	; 0xd8
30007530:	e58dc00c 	str	ip, [sp, #12]
30007534:	e58d7000 	str	r7, [sp]
30007538:	e98d0060 	stmib	sp, {r5, r6}
3000753c:	e58d4010 	str	r4, [sp, #16]
30007540:	ebfffa52 	bl	30005e90 <raw_task_create>
                                 5, 10,  test_task_stack1,
                                 TEST_TASK_STK_SIZE ,  test_task1, 1);


        raw_task_create(&test_task_obj[1], (RAW_U8  *)"task2", 0,
30007544:	e59fc04c 	ldr	ip, [pc, #76]	; 30007598 <test_mutex+0xbc>
30007548:	e245006c 	sub	r0, r5, #108	; 0x6c
3000754c:	e58dc004 	str	ip, [sp, #4]
30007550:	e59fc044 	ldr	ip, [pc, #68]	; 3000759c <test_mutex+0xc0>
30007554:	e59f1044 	ldr	r1, [pc, #68]	; 300075a0 <test_mutex+0xc4>
30007558:	e3a02000 	mov	r2, #0
3000755c:	e3a0300f 	mov	r3, #15
30007560:	e58d7000 	str	r7, [sp]
30007564:	e58d6008 	str	r6, [sp, #8]
30007568:	e58dc00c 	str	ip, [sp, #12]
3000756c:	e58d4010 	str	r4, [sp, #16]
30007570:	ebfffa46 	bl	30005e90 <raw_task_create>
                                 15, 10,   test_task_stack2,
                                 TEST_TASK_STK_SIZE ,  test_task2, 1);



}
30007574:	e28dd01c 	add	sp, sp, #28
30007578:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
3000757c:	e12fff1e 	bx	lr
30007580:	30007e20 	andcc	r7, r0, r0, lsr #28
30007584:	3000d14c 	andcc	sp, r0, ip, asr #2
30007588:	30007d8c 	andcc	r7, r0, ip, lsl #27
3000758c:	3000d058 	andcc	sp, r0, r8, asr r0
30007590:	300075f8 	strdcc	r7, [r0], -r8
30007594:	30007d4c 	andcc	r7, r0, ip, asr #26
30007598:	3000e14c 	andcc	lr, r0, ip, asr #2
3000759c:	300075a4 	andcc	r7, r0, r4, lsr #11
300075a0:	30007d54 	andcc	r7, r0, r4, asr sp

300075a4 <test_task2>:
		raw_sleep(10);
        }
}

static void test_task2(void * pParam)
{
300075a4:	e92d4070 	push	{r4, r5, r6, lr}
300075a8:	e59f403c 	ldr	r4, [pc, #60]	; 300075ec <test_task2+0x48>
	
		raw_mutex_get(&m1, RAW_WAIT_FOREVER);

		if(1 == flag) {

			flag = 0;
300075ac:	e3a06000 	mov	r6, #0

        while(1) {
	
		raw_mutex_get(&m1, RAW_WAIT_FOREVER);

		if(1 == flag) {
300075b0:	e1a05004 	mov	r5, r4
300075b4:	ea000001 	b	300075c0 <test_task2+0x1c>

			flag = 0;
			__put_char("clean ", 6);
		}

		raw_mutex_put(&m1);
300075b8:	e59f0030 	ldr	r0, [pc, #48]	; 300075f0 <test_task2+0x4c>
300075bc:	ebffe9ce 	bl	30001cfc <raw_mutex_put>
static void test_task2(void * pParam)
{

        while(1) {
	
		raw_mutex_get(&m1, RAW_WAIT_FOREVER);
300075c0:	e3e01000 	mvn	r1, #0
300075c4:	e59f0024 	ldr	r0, [pc, #36]	; 300075f0 <test_task2+0x4c>
300075c8:	ebffea4d 	bl	30001f04 <raw_mutex_get>

		if(1 == flag) {
300075cc:	e59430fc 	ldr	r3, [r4, #252]	; 0xfc
300075d0:	e3530001 	cmp	r3, #1
300075d4:	1afffff7 	bne	300075b8 <test_task2+0x14>

			flag = 0;
			__put_char("clean ", 6);
300075d8:	e3a01006 	mov	r1, #6
	
		raw_mutex_get(&m1, RAW_WAIT_FOREVER);

		if(1 == flag) {

			flag = 0;
300075dc:	e58560fc 	str	r6, [r5, #252]	; 0xfc
			__put_char("clean ", 6);
300075e0:	e59f000c 	ldr	r0, [pc, #12]	; 300075f4 <test_task2+0x50>
300075e4:	ebffe470 	bl	300007ac <__put_char>
300075e8:	eafffff2 	b	300075b8 <test_task2+0x14>
300075ec:	3000f050 	andcc	pc, r0, r0, asr r0
300075f0:	3000d058 	andcc	sp, r0, r8, asr r0
300075f4:	30007d94 	mulcc	r0, r4, sp

300075f8 <test_task1>:
static int flag = 0;

static RAW_MUTEX m1;

static void test_task1(void * pParam)
{
300075f8:	e92d4070 	push	{r4, r5, r6, lr}
300075fc:	e59f4044 	ldr	r4, [pc, #68]	; 30007648 <test_task1+0x50>
                
               raw_mutex_get(&m1, RAW_WAIT_FOREVER);
               
		if(0 == flag){

			flag = 1;
30007600:	e3a06001 	mov	r6, #1

        while(1) {	
                
               raw_mutex_get(&m1, RAW_WAIT_FOREVER);
               
		if(0 == flag){
30007604:	e1a05004 	mov	r5, r4
30007608:	ea000003 	b	3000761c <test_task1+0x24>

			flag = 1;
			__put_char("set ", 4);
		}

		raw_mutex_put(&m1);
3000760c:	e59f0038 	ldr	r0, [pc, #56]	; 3000764c <test_task1+0x54>
30007610:	ebffe9b9 	bl	30001cfc <raw_mutex_put>

		raw_sleep(10);
30007614:	e3a0000a 	mov	r0, #10
30007618:	ebfff9b6 	bl	30005cf8 <raw_sleep>
static void test_task1(void * pParam)
{

        while(1) {	
                
               raw_mutex_get(&m1, RAW_WAIT_FOREVER);
3000761c:	e3e01000 	mvn	r1, #0
30007620:	e59f0024 	ldr	r0, [pc, #36]	; 3000764c <test_task1+0x54>
30007624:	ebffea36 	bl	30001f04 <raw_mutex_get>
               
		if(0 == flag){
30007628:	e59430fc 	ldr	r3, [r4, #252]	; 0xfc
3000762c:	e3530000 	cmp	r3, #0
30007630:	1afffff5 	bne	3000760c <test_task1+0x14>

			flag = 1;
			__put_char("set ", 4);
30007634:	e3a01004 	mov	r1, #4
                
               raw_mutex_get(&m1, RAW_WAIT_FOREVER);
               
		if(0 == flag){

			flag = 1;
30007638:	e58560fc 	str	r6, [r5, #252]	; 0xfc
			__put_char("set ", 4);
3000763c:	e59f000c 	ldr	r0, [pc, #12]	; 30007650 <test_task1+0x58>
30007640:	ebffe459 	bl	300007ac <__put_char>
30007644:	eafffff0 	b	3000760c <test_task1+0x14>
30007648:	3000f050 	andcc	pc, r0, r0, asr r0
3000764c:	3000d058 	andcc	sp, r0, r8, asr r0
30007650:	30007d9c 	mulcc	r0, ip, sp

30007654 <test_timer>:
}

extern int test_switch;

void test_timer()
{
30007654:	e92d4070 	push	{r4, r5, r6, lr}

	if(1 == test_switch) {
30007658:	e59fc078 	ldr	ip, [pc, #120]	; 300076d8 <test_timer+0x84>
}

extern int test_switch;

void test_timer()
{
3000765c:	e24dd018 	sub	sp, sp, #24

	if(1 == test_switch) {
30007660:	e59c3000 	ldr	r3, [ip]
30007664:	e3530001 	cmp	r3, #1
30007668:	0a000017 	beq	300076cc <test_timer+0x78>
		return;
	}

	test_switch = 1;

	raw_timer_create(&tm1, "timer1", timer_func, 0, 10, 10, 0);
3000766c:	e3a05000 	mov	r5, #0
	if(1 == test_switch) {

		return;
	}

	test_switch = 1;
30007670:	e3a06001 	mov	r6, #1
30007674:	e58c6000 	str	r6, [ip]

	raw_timer_create(&tm1, "timer1", timer_func, 0, 10, 10, 0);
30007678:	e3a0400a 	mov	r4, #10
3000767c:	e59f1058 	ldr	r1, [pc, #88]	; 300076dc <test_timer+0x88>
30007680:	e59f2058 	ldr	r2, [pc, #88]	; 300076e0 <test_timer+0x8c>
30007684:	e1a03005 	mov	r3, r5
30007688:	e59f0054 	ldr	r0, [pc, #84]	; 300076e4 <test_timer+0x90>
3000768c:	e58d4000 	str	r4, [sp]
30007690:	e98d0030 	stmib	sp, {r4, r5}
30007694:	ebfffecf 	bl	300071d8 <raw_timer_create>

        raw_task_create(&test_task_obj, (RAW_U8  *)"task1", 0,
30007698:	e59fc048 	ldr	ip, [pc, #72]	; 300076e8 <test_timer+0x94>
3000769c:	e3a0eb01 	mov	lr, #1024	; 0x400
300076a0:	e58de008 	str	lr, [sp, #8]
300076a4:	e59fe040 	ldr	lr, [pc, #64]	; 300076ec <test_timer+0x98>
300076a8:	e24c006c 	sub	r0, ip, #108	; 0x6c
300076ac:	e1a02005 	mov	r2, r5
300076b0:	e59f1038 	ldr	r1, [pc, #56]	; 300076f0 <test_timer+0x9c>
300076b4:	e3a03005 	mov	r3, #5
300076b8:	e58d4000 	str	r4, [sp]
300076bc:	e58de00c 	str	lr, [sp, #12]
300076c0:	e58d6010 	str	r6, [sp, #16]
300076c4:	e58dc004 	str	ip, [sp, #4]
300076c8:	ebfff9f0 	bl	30005e90 <raw_task_create>
                                 5, 10,  test_task_stack1,
                                 TEST_TASK_STK_SIZE ,  test_task1, 1);
}
300076cc:	e28dd018 	add	sp, sp, #24
300076d0:	e8bd4070 	pop	{r4, r5, r6, lr}
300076d4:	e12fff1e 	bx	lr
300076d8:	30007e20 	andcc	r7, r0, r0, lsr #28
300076dc:	30007da4 	andcc	r7, r0, r4, lsr #27
300076e0:	3000770c 	andcc	r7, r0, ip, lsl #14
300076e4:	3000f150 	andcc	pc, r0, r0, asr r1
300076e8:	3000f1e8 	andcc	pc, r0, r8, ror #3
300076ec:	300076f4 	strdcc	r7, [r0], -r4
300076f0:	30007d4c 	andcc	r7, r0, ip, asr #26

300076f4 <test_task1>:
		__put_char("c ", 2);
}


static void test_task1(void * pParam)
{
300076f4:	e92d4010 	push	{r4, lr}

	raw_timer_activate(&tm1, 0);
300076f8:	e59f0008 	ldr	r0, [pc, #8]	; 30007708 <test_task1+0x14>
300076fc:	e3a01000 	mov	r1, #0
30007700:	ebfffe77 	bl	300070e4 <raw_timer_activate>
30007704:	eafffffe 	b	30007704 <test_task1+0x10>
30007708:	3000f150 	andcc	pc, r0, r0, asr r1

3000770c <timer_func>:

static void timer_func(void* p_arg)
{
	count ++;

	count = count % 3;
3000770c:	e59f1070 	ldr	r1, [pc, #112]	; 30007784 <timer_func+0x78>
30007710:	e59f0070 	ldr	r0, [pc, #112]	; 30007788 <timer_func+0x7c>
30007714:	e5112f60 	ldr	r2, [r1, #-3936]	; 0xf60
static RAW_TIMER tm1;

static int count = 0;

static void timer_func(void* p_arg)
{
30007718:	e92d4010 	push	{r4, lr}
	count ++;

	count = count % 3;
3000771c:	e2822001 	add	r2, r2, #1
30007720:	e0c3c290 	smull	ip, r3, r0, r2
30007724:	e0433fc2 	sub	r3, r3, r2, asr #31
30007728:	e0833083 	add	r3, r3, r3, lsl #1
3000772c:	e0633002 	rsb	r3, r3, r2

	if(1 == count)
30007730:	e3530001 	cmp	r3, #1

static void timer_func(void* p_arg)
{
	count ++;

	count = count % 3;
30007734:	e5013f60 	str	r3, [r1, #-3936]	; 0xf60

	if(1 == count)
30007738:	0a00000d 	beq	30007774 <timer_func+0x68>
		__put_char("a ", 2);

	else if(2 == (count %3))
3000773c:	e0c12390 	smull	r2, r1, r0, r3
30007740:	e0411fc3 	sub	r1, r1, r3, asr #31
30007744:	e0811081 	add	r1, r1, r1, lsl #1
30007748:	e0611003 	rsb	r1, r1, r3
3000774c:	e3510002 	cmp	r1, #2
30007750:	0a000004 	beq	30007768 <timer_func+0x5c>

		__put_char("b ", 2);
	else
		__put_char("c ", 2);
30007754:	e59f0030 	ldr	r0, [pc, #48]	; 3000778c <timer_func+0x80>
30007758:	e3a01002 	mov	r1, #2
3000775c:	ebffe412 	bl	300007ac <__put_char>
}
30007760:	e8bd4010 	pop	{r4, lr}
30007764:	e12fff1e 	bx	lr
	if(1 == count)
		__put_char("a ", 2);

	else if(2 == (count %3))

		__put_char("b ", 2);
30007768:	e59f0020 	ldr	r0, [pc, #32]	; 30007790 <timer_func+0x84>
3000776c:	ebffe40e 	bl	300007ac <__put_char>
30007770:	eafffffa 	b	30007760 <timer_func+0x54>
	count ++;

	count = count % 3;

	if(1 == count)
		__put_char("a ", 2);
30007774:	e3a01002 	mov	r1, #2
30007778:	e59f0014 	ldr	r0, [pc, #20]	; 30007794 <timer_func+0x88>
3000777c:	ebffe40a 	bl	300007ac <__put_char>
30007780:	eafffff6 	b	30007760 <timer_func+0x54>
30007784:	30011148 	andcc	r1, r1, r8, asr #2
30007788:	55555556 	ldrbpl	r5, [r5, #-1366]	; 0x556
3000778c:	30007db4 	undefined instruction 0x30007db4
30007790:	30007db0 	undefined instruction 0x30007db0
30007794:	30007dac 	andcc	r7, r0, ip, lsr #27

30007798 <test_block>:
}

extern int test_switch;

void test_block()
{
30007798:	e92d4030 	push	{r4, r5, lr}

	if(1 == test_switch) {
3000779c:	e59fc084 	ldr	ip, [pc, #132]	; 30007828 <test_block+0x90>
}

extern int test_switch;

void test_block()
{
300077a0:	e24dd01c 	sub	sp, sp, #28

	if(1 == test_switch) {
300077a4:	e59c3000 	ldr	r3, [ip]
300077a8:	e3530001 	cmp	r3, #1
300077ac:	0a000016 	beq	3000780c <test_block+0x74>
	}

	test_switch = 1;


	if (RAW_SUCCESS != raw_block_pool_create(&mem_pool, 
300077b0:	e59f0074 	ldr	r0, [pc, #116]	; 3000782c <test_block+0x94>
	if(1 == test_switch) {

		return;
	}

	test_switch = 1;
300077b4:	e3a04001 	mov	r4, #1


	if (RAW_SUCCESS != raw_block_pool_create(&mem_pool, 
300077b8:	e3a02020 	mov	r2, #32
	if(1 == test_switch) {

		return;
	}

	test_switch = 1;
300077bc:	e58c4000 	str	r4, [ip]


	if (RAW_SUCCESS != raw_block_pool_create(&mem_pool, 
300077c0:	e3a05b01 	mov	r5, #1024	; 0x400
300077c4:	e59f1064 	ldr	r1, [pc, #100]	; 30007830 <test_block+0x98>
300077c8:	e280301c 	add	r3, r0, #28
300077cc:	e58d5000 	str	r5, [sp]
300077d0:	ebffe46b 	bl	30000984 <raw_block_pool_create>
300077d4:	e2502000 	subs	r2, r0, #0
300077d8:	1a00000e 	bne	30007818 <test_block+0x80>

		__put_char("error ", 6);
		return;
	}

        raw_task_create(&test_task_obj, (RAW_U8  *)"task1", 0,
300077dc:	e59fc050 	ldr	ip, [pc, #80]	; 30007834 <test_block+0x9c>
300077e0:	e3a0e00a 	mov	lr, #10
300077e4:	e58de000 	str	lr, [sp]
300077e8:	e59fe048 	ldr	lr, [pc, #72]	; 30007838 <test_block+0xa0>
300077ec:	e24c006c 	sub	r0, ip, #108	; 0x6c
300077f0:	e59f1044 	ldr	r1, [pc, #68]	; 3000783c <test_block+0xa4>
300077f4:	e3a03005 	mov	r3, #5
300077f8:	e58d5008 	str	r5, [sp, #8]
300077fc:	e58de00c 	str	lr, [sp, #12]
30007800:	e58d4010 	str	r4, [sp, #16]
30007804:	e58dc004 	str	ip, [sp, #4]
30007808:	ebfff9a0 	bl	30005e90 <raw_task_create>
                                 5, 10,  test_task_stack1,
                                 TEST_TASK_STK_SIZE ,  test_task1, 1);
}
3000780c:	e28dd01c 	add	sp, sp, #28
30007810:	e8bd4030 	pop	{r4, r5, lr}
30007814:	e12fff1e 	bx	lr
					"pool_block1", 
					32, 
					buffer, 
					1024)) {

		__put_char("error ", 6);
30007818:	e3a01006 	mov	r1, #6
3000781c:	e59f001c 	ldr	r0, [pc, #28]	; 30007840 <test_block+0xa8>
30007820:	ebffe3e1 	bl	300007ac <__put_char>
		return;
30007824:	eafffff8 	b	3000780c <test_block+0x74>
30007828:	30007e20 	andcc	r7, r0, r0, lsr #28
3000782c:	300101ec 	andcc	r0, r1, ip, ror #3
30007830:	30007db8 	undefined instruction 0x30007db8
30007834:	30010674 	andcc	r0, r1, r4, ror r6
30007838:	30007844 	andcc	r7, r0, r4, asr #16
3000783c:	30007d4c 	andcc	r7, r0, ip, asr #26
30007840:	30007dc4 	andcc	r7, r0, r4, asr #27

30007844 <test_task1>:
static MEM_POOL mem_pool;

static RAW_U8 count = 0;

static void test_task1(void * pParam)
{
30007844:	e92d4030 	push	{r4, r5, lr}
30007848:	e24dd00c 	sub	sp, sp, #12
3000784c:	e59f5048 	ldr	r5, [pc, #72]	; 3000789c <test_task1+0x58>
30007850:	e28d4004 	add	r4, sp, #4
30007854:	ea000007 	b	30007878 <test_task1+0x34>

        while(1) {
		
		if(RAW_SUCCESS == raw_block_allocate(&mem_pool, (void**)&addr)) {
		
			count ++;
30007858:	e5553b70 	ldrb	r3, [r5, #-2928]	; 0xb70

			__put_char("ok ", 3);
3000785c:	e3a01003 	mov	r1, #3

        while(1) {
		
		if(RAW_SUCCESS == raw_block_allocate(&mem_pool, (void**)&addr)) {
		
			count ++;
30007860:	e2833001 	add	r3, r3, #1

			__put_char("ok ", 3);
30007864:	e59f0034 	ldr	r0, [pc, #52]	; 300078a0 <test_task1+0x5c>

        while(1) {
		
		if(RAW_SUCCESS == raw_block_allocate(&mem_pool, (void**)&addr)) {
		
			count ++;
30007868:	e5453b70 	strb	r3, [r5, #-2928]	; 0xb70

			__put_char("ok ", 3);
3000786c:	ebffe3ce 	bl	300007ac <__put_char>
		}else {

			__put_char("error ", 6);
		}

		raw_sleep(20);
30007870:	e3a00014 	mov	r0, #20
30007874:	ebfff91f 	bl	30005cf8 <raw_sleep>
{
	RAW_U8* addr;

        while(1) {
		
		if(RAW_SUCCESS == raw_block_allocate(&mem_pool, (void**)&addr)) {
30007878:	e1a01004 	mov	r1, r4
3000787c:	e59f0020 	ldr	r0, [pc, #32]	; 300078a4 <test_task1+0x60>
30007880:	ebffe416 	bl	300008e0 <raw_block_allocate>
30007884:	e3500000 	cmp	r0, #0
			count ++;

			__put_char("ok ", 3);
		}else {

			__put_char("error ", 6);
30007888:	e3a01006 	mov	r1, #6
3000788c:	e59f0014 	ldr	r0, [pc, #20]	; 300078a8 <test_task1+0x64>
{
	RAW_U8* addr;

        while(1) {
		
		if(RAW_SUCCESS == raw_block_allocate(&mem_pool, (void**)&addr)) {
30007890:	0afffff0 	beq	30007858 <test_task1+0x14>
			count ++;

			__put_char("ok ", 3);
		}else {

			__put_char("error ", 6);
30007894:	ebffe3c4 	bl	300007ac <__put_char>
30007898:	eafffff4 	b	30007870 <test_task1+0x2c>
3000789c:	300121e4 	andcc	r2, r1, r4, ror #3
300078a0:	30007dcc 	andcc	r7, r0, ip, asr #27
300078a4:	300101ec 	andcc	r0, r1, ip, ror #3
300078a8:	30007dc4 	andcc	r7, r0, r4, asr #27

300078ac <test_byte>:
}

extern int test_switch;

void test_byte()
{
300078ac:	e92d4010 	push	{r4, lr}

	if(1 == test_switch) {
300078b0:	e59fc080 	ldr	ip, [pc, #128]	; 30007938 <test_byte+0x8c>
}

extern int test_switch;

void test_byte()
{
300078b4:	e24dd018 	sub	sp, sp, #24

	if(1 == test_switch) {
300078b8:	e59c3000 	ldr	r3, [ip]
300078bc:	e3530001 	cmp	r3, #1
300078c0:	0a000015 	beq	3000791c <test_byte+0x70>
	}

	test_switch = 1;


	if (RAW_SUCCESS != raw_byte_pool_create(&byte_pool, 
300078c4:	e59f0070 	ldr	r0, [pc, #112]	; 3000793c <test_byte+0x90>
	if(1 == test_switch) {

		return;
	}

	test_switch = 1;
300078c8:	e3a04001 	mov	r4, #1


	if (RAW_SUCCESS != raw_byte_pool_create(&byte_pool, 
300078cc:	e2802020 	add	r2, r0, #32
300078d0:	e59f1068 	ldr	r1, [pc, #104]	; 30007940 <test_byte+0x94>
300078d4:	e3a03b01 	mov	r3, #1024	; 0x400
	if(1 == test_switch) {

		return;
	}

	test_switch = 1;
300078d8:	e58c4000 	str	r4, [ip]


	if (RAW_SUCCESS != raw_byte_pool_create(&byte_pool, 
300078dc:	ebffe463 	bl	30000a70 <raw_byte_pool_create>
300078e0:	e2502000 	subs	r2, r0, #0
300078e4:	1a00000f 	bne	30007928 <test_byte+0x7c>

		__put_char("error ", 6);
		return;
	}

        raw_task_create(&test_task_obj, (RAW_U8  *)"task1", 0,
300078e8:	e3a0e00a 	mov	lr, #10
300078ec:	e59fc050 	ldr	ip, [pc, #80]	; 30007944 <test_byte+0x98>
300078f0:	e58de000 	str	lr, [sp]
300078f4:	e3a0eb01 	mov	lr, #1024	; 0x400
300078f8:	e58de008 	str	lr, [sp, #8]
300078fc:	e59fe044 	ldr	lr, [pc, #68]	; 30007948 <test_byte+0x9c>
30007900:	e24c006c 	sub	r0, ip, #108	; 0x6c
30007904:	e59f1040 	ldr	r1, [pc, #64]	; 3000794c <test_byte+0xa0>
30007908:	e3a03005 	mov	r3, #5
3000790c:	e58de00c 	str	lr, [sp, #12]
30007910:	e58d4010 	str	r4, [sp, #16]
30007914:	e58dc004 	str	ip, [sp, #4]
30007918:	ebfff95c 	bl	30005e90 <raw_task_create>
                                 5, 10,  test_task_stack1,
                                 TEST_TASK_STK_SIZE ,  test_task1, 1);
}
3000791c:	e28dd018 	add	sp, sp, #24
30007920:	e8bd4010 	pop	{r4, lr}
30007924:	e12fff1e 	bx	lr
	if (RAW_SUCCESS != raw_byte_pool_create(&byte_pool, 
					"pool_byte1", 
					buffer, 
					1024)) {

		__put_char("error ", 6);
30007928:	e3a01006 	mov	r1, #6
3000792c:	e59f001c 	ldr	r0, [pc, #28]	; 30007950 <test_byte+0xa4>
30007930:	ebffe39d 	bl	300007ac <__put_char>
		return;
30007934:	eafffff8 	b	3000791c <test_byte+0x70>
30007938:	30007e20 	andcc	r7, r0, r0, lsr #28
3000793c:	30011678 	andcc	r1, r1, r8, ror r6
30007940:	30007dd0 	ldrdcc	r7, [r0], -r0
30007944:	30011b04 	andcc	r1, r1, r4, lsl #22
30007948:	30007954 	andcc	r7, r0, r4, asr r9
3000794c:	30007d4c 	andcc	r7, r0, ip, asr #26
30007950:	30007dc4 	andcc	r7, r0, r4, asr #27

30007954 <test_task1>:
static RAW_BYTE_POOL_STRUCT byte_pool;

static RAW_U8 count = 0;

static void test_task1(void * pParam)
{
30007954:	e92d4030 	push	{r4, r5, lr}
30007958:	e24dd00c 	sub	sp, sp, #12
3000795c:	e59f5094 	ldr	r5, [pc, #148]	; 300079f8 <test_task1+0xa4>
30007960:	e28d4004 	add	r4, sp, #4
30007964:	ea000017 	b	300079c8 <test_task1+0x74>

        while(1) {
		
		if(RAW_SUCCESS == raw_byte_allocate(&byte_pool, (void**)&addr, 16)) {
		
			count ++;
30007968:	e5553b6c 	ldrb	r3, [r5, #-2924]	; 0xb6c

			__put_char("ok1 ", 4);
3000796c:	e3a01004 	mov	r1, #4

        while(1) {
		
		if(RAW_SUCCESS == raw_byte_allocate(&byte_pool, (void**)&addr, 16)) {
		
			count ++;
30007970:	e2833001 	add	r3, r3, #1

			__put_char("ok1 ", 4);
30007974:	e59f0080 	ldr	r0, [pc, #128]	; 300079fc <test_task1+0xa8>

        while(1) {
		
		if(RAW_SUCCESS == raw_byte_allocate(&byte_pool, (void**)&addr, 16)) {
		
			count ++;
30007978:	e5453b6c 	strb	r3, [r5, #-2924]	; 0xb6c

			__put_char("ok1 ", 4);
3000797c:	ebffe38a 	bl	300007ac <__put_char>
		}else {

			__put_char("error1 ", 7);
		}

		raw_sleep(20);
30007980:	e3a00014 	mov	r0, #20
30007984:	ebfff8db 	bl	30005cf8 <raw_sleep>
 
		if(RAW_SUCCESS == raw_byte_allocate(&byte_pool, (void**)&addr, 30)) {
30007988:	e1a01004 	mov	r1, r4
3000798c:	e3a0201e 	mov	r2, #30
30007990:	e59f0068 	ldr	r0, [pc, #104]	; 30007a00 <test_task1+0xac>
30007994:	ebffe47f 	bl	30000b98 <raw_byte_allocate>
30007998:	e3500000 	cmp	r0, #0
			count ++;

			__put_char("ok2 ", 4);
		}else {

			__put_char("error2 ", 7);
3000799c:	e3a01007 	mov	r1, #7
300079a0:	e59f005c 	ldr	r0, [pc, #92]	; 30007a04 <test_task1+0xb0>
			__put_char("error1 ", 7);
		}

		raw_sleep(20);
 
		if(RAW_SUCCESS == raw_byte_allocate(&byte_pool, (void**)&addr, 30)) {
300079a4:	1a000011 	bne	300079f0 <test_task1+0x9c>
		
			count ++;
300079a8:	e5553b6c 	ldrb	r3, [r5, #-2924]	; 0xb6c

			__put_char("ok2 ", 4);
300079ac:	e3a01004 	mov	r1, #4

		raw_sleep(20);
 
		if(RAW_SUCCESS == raw_byte_allocate(&byte_pool, (void**)&addr, 30)) {
		
			count ++;
300079b0:	e2833001 	add	r3, r3, #1

			__put_char("ok2 ", 4);
300079b4:	e59f004c 	ldr	r0, [pc, #76]	; 30007a08 <test_task1+0xb4>

		raw_sleep(20);
 
		if(RAW_SUCCESS == raw_byte_allocate(&byte_pool, (void**)&addr, 30)) {
		
			count ++;
300079b8:	e5453b6c 	strb	r3, [r5, #-2924]	; 0xb6c

			__put_char("ok2 ", 4);
300079bc:	ebffe37a 	bl	300007ac <__put_char>
		}else {

			__put_char("error2 ", 7);
		}

		raw_sleep(20);
300079c0:	e3a00014 	mov	r0, #20
300079c4:	ebfff8cb 	bl	30005cf8 <raw_sleep>
{
	RAW_U8* addr;

        while(1) {
		
		if(RAW_SUCCESS == raw_byte_allocate(&byte_pool, (void**)&addr, 16)) {
300079c8:	e1a01004 	mov	r1, r4
300079cc:	e3a02010 	mov	r2, #16
300079d0:	e59f0028 	ldr	r0, [pc, #40]	; 30007a00 <test_task1+0xac>
300079d4:	ebffe46f 	bl	30000b98 <raw_byte_allocate>
300079d8:	e3500000 	cmp	r0, #0
			count ++;

			__put_char("ok1 ", 4);
		}else {

			__put_char("error1 ", 7);
300079dc:	e3a01007 	mov	r1, #7
300079e0:	e59f0024 	ldr	r0, [pc, #36]	; 30007a0c <test_task1+0xb8>
{
	RAW_U8* addr;

        while(1) {
		
		if(RAW_SUCCESS == raw_byte_allocate(&byte_pool, (void**)&addr, 16)) {
300079e4:	0affffdf 	beq	30007968 <test_task1+0x14>
			count ++;

			__put_char("ok1 ", 4);
		}else {

			__put_char("error1 ", 7);
300079e8:	ebffe36f 	bl	300007ac <__put_char>
300079ec:	eaffffe3 	b	30007980 <test_task1+0x2c>
			count ++;

			__put_char("ok2 ", 4);
		}else {

			__put_char("error2 ", 7);
300079f0:	ebffe36d 	bl	300007ac <__put_char>
300079f4:	eafffff1 	b	300079c0 <test_task1+0x6c>
300079f8:	30013670 	andcc	r3, r1, r0, ror r6
300079fc:	30007ddc 	ldrdcc	r7, [r0], -ip
30007a00:	30011678 	andcc	r1, r1, r8, ror r6
30007a04:	30007df4 	strdcc	r7, [r0], -r4
30007a08:	30007dec 	andcc	r7, r0, ip, ror #27
30007a0c:	30007de4 	andcc	r7, r0, r4, ror #27

30007a10 <port_stack_init>:


RAW_VOID  *port_stack_init(PORT_STACK  *p_stk_base, RAW_U32 stk_size,  RAW_VOID *p_arg, RAW_TASK_ENTRY p_task)
{
        RAW_U32 *stk;
        RAW_U32 temp = (RAW_U32)(p_stk_base + stk_size - 2);
30007a10:	e2411002 	sub	r1, r1, #2
#include "raw_api.h"
#include "port.h"


RAW_VOID  *port_stack_init(PORT_STACK  *p_stk_base, RAW_U32 stk_size,  RAW_VOID *p_arg, RAW_TASK_ENTRY p_task)
{
30007a14:	e92d0ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp}
        RAW_U32 *stk;
        RAW_U32 temp = (RAW_U32)(p_stk_base + stk_size - 2);
30007a18:	e0808101 	add	r8, r0, r1, lsl #2
        stk = (RAW_U32  *)temp;

        *(stk)    =  (RAW_U32)p_task;       /* Entry Point                                        */
        *(--stk)  = (RAW_U32)0;             /* LR                                                 */
30007a1c:	e2487004 	sub	r7, r8, #4
        *(--stk)  = (RAW_U32)0;             /* R12                                                */
30007a20:	e2476004 	sub	r6, r7, #4
        *(--stk)  = (RAW_U32)0;             /* R11                                                */
30007a24:	e2465004 	sub	r5, r6, #4
        *(--stk)  = (RAW_U32)0;             /* R10                                                */
30007a28:	e245a004 	sub	sl, r5, #4
        *(--stk)  = (RAW_U32)0;             /* R9                                                 */
30007a2c:	e24a9004 	sub	r9, sl, #4
        *(--stk)  = (RAW_U32)0;             /* R8                                                 */
30007a30:	e249b004 	sub	fp, r9, #4
#include "raw_api.h"
#include "port.h"


RAW_VOID  *port_stack_init(PORT_STACK  *p_stk_base, RAW_U32 stk_size,  RAW_VOID *p_arg, RAW_TASK_ENTRY p_task)
{
30007a34:	e24dd028 	sub	sp, sp, #40	; 0x28
        *(--stk)  = (RAW_U32)0;             /* R12                                                */
        *(--stk)  = (RAW_U32)0;             /* R11                                                */
        *(--stk)  = (RAW_U32)0;             /* R10                                                */
        *(--stk)  = (RAW_U32)0;             /* R9                                                 */
        *(--stk)  = (RAW_U32)0;             /* R8                                                 */
        *(--stk)  = (RAW_U32)0;             /* R7 :                                               */
30007a38:	e24bc004 	sub	ip, fp, #4
        stk = (RAW_U32  *)temp;

        *(stk)    =  (RAW_U32)p_task;       /* Entry Point                                        */
        *(--stk)  = (RAW_U32)0;             /* LR                                                 */
        *(--stk)  = (RAW_U32)0;             /* R12                                                */
        *(--stk)  = (RAW_U32)0;             /* R11                                                */
30007a3c:	e58d5004 	str	r5, [sp, #4]
        *(--stk)  = (RAW_U32)0;             /* R10                                                */
        *(--stk)  = (RAW_U32)0;             /* R9                                                 */
        *(--stk)  = (RAW_U32)0;             /* R8                                                 */
        *(--stk)  = (RAW_U32)0;             /* R7 :                                               */
        *(--stk)  = (RAW_U32)0;             /* R6                                                 */
30007a40:	e24c5004 	sub	r5, ip, #4
        *(--stk)  = (RAW_U32)0;             /* R12                                                */
        *(--stk)  = (RAW_U32)0;             /* R11                                                */
        *(--stk)  = (RAW_U32)0;             /* R10                                                */
        *(--stk)  = (RAW_U32)0;             /* R9                                                 */
        *(--stk)  = (RAW_U32)0;             /* R8                                                 */
        *(--stk)  = (RAW_U32)0;             /* R7 :                                               */
30007a44:	e58dc024 	str	ip, [sp, #36]	; 0x24
        *(--stk)  = (RAW_U32)0;             /* R6                                                 */
        *(--stk)  = (RAW_U32)0;             /* R5                                                 */
30007a48:	e245c004 	sub	ip, r5, #4
        *(--stk)  = (RAW_U32)0;             /* R11                                                */
        *(--stk)  = (RAW_U32)0;             /* R10                                                */
        *(--stk)  = (RAW_U32)0;             /* R9                                                 */
        *(--stk)  = (RAW_U32)0;             /* R8                                                 */
        *(--stk)  = (RAW_U32)0;             /* R7 :                                               */
        *(--stk)  = (RAW_U32)0;             /* R6                                                 */
30007a4c:	e58d5020 	str	r5, [sp, #32]
        *(--stk)  = (RAW_U32)0;             /* R5                                                 */
        *(--stk)  = (RAW_U32)0;             /* R4                                                 */
30007a50:	e24c5004 	sub	r5, ip, #4
        *(--stk)  = (RAW_U32)0;             /* R10                                                */
        *(--stk)  = (RAW_U32)0;             /* R9                                                 */
        *(--stk)  = (RAW_U32)0;             /* R8                                                 */
        *(--stk)  = (RAW_U32)0;             /* R7 :                                               */
        *(--stk)  = (RAW_U32)0;             /* R6                                                 */
        *(--stk)  = (RAW_U32)0;             /* R5                                                 */
30007a54:	e58dc01c 	str	ip, [sp, #28]
        *(--stk)  = (RAW_U32)0;             /* R4                                                 */
        *(--stk)  = (RAW_U32)0;             /* R3                                                 */
30007a58:	e245c004 	sub	ip, r5, #4
        *(--stk)  = (RAW_U32)0;             /* R9                                                 */
        *(--stk)  = (RAW_U32)0;             /* R8                                                 */
        *(--stk)  = (RAW_U32)0;             /* R7 :                                               */
        *(--stk)  = (RAW_U32)0;             /* R6                                                 */
        *(--stk)  = (RAW_U32)0;             /* R5                                                 */
        *(--stk)  = (RAW_U32)0;             /* R4                                                 */
30007a5c:	e58d5018 	str	r5, [sp, #24]
        *(--stk)  = (RAW_U32)0;             /* R3                                                 */
        *(--stk)  = (RAW_U32)0;             /* R2                                                 */
30007a60:	e24c5004 	sub	r5, ip, #4
        *(--stk)  = (RAW_U32)0;             /* R8                                                 */
        *(--stk)  = (RAW_U32)0;             /* R7 :                                               */
        *(--stk)  = (RAW_U32)0;             /* R6                                                 */
        *(--stk)  = (RAW_U32)0;             /* R5                                                 */
        *(--stk)  = (RAW_U32)0;             /* R4                                                 */
        *(--stk)  = (RAW_U32)0;             /* R3                                                 */
30007a64:	e58dc014 	str	ip, [sp, #20]
        *(--stk)  = (RAW_U32)0;             /* R2                                                 */
        *(--stk)  = (RAW_U32)0;             /* R1                                                 */
30007a68:	e245c004 	sub	ip, r5, #4
30007a6c:	e58dc00c 	str	ip, [sp, #12]
        *(--stk)  = (RAW_U32)0;             /* R7 :                                               */
        *(--stk)  = (RAW_U32)0;             /* R6                                                 */
        *(--stk)  = (RAW_U32)0;             /* R5                                                 */
        *(--stk)  = (RAW_U32)0;             /* R4                                                 */
        *(--stk)  = (RAW_U32)0;             /* R3                                                 */
        *(--stk)  = (RAW_U32)0;             /* R2                                                 */
30007a70:	e58d5010 	str	r5, [sp, #16]
        *(--stk)  = (RAW_U32)0;             /* R1                                                 */
        *(--stk)  = (RAW_U32)p_arg;         /* R0 argument                                        */
30007a74:	e59d500c 	ldr	r5, [sp, #12]
{
        RAW_U32 *stk;
        RAW_U32 temp = (RAW_U32)(p_stk_base + stk_size - 2);
        stk = (RAW_U32  *)temp;

        *(stk)    =  (RAW_U32)p_task;       /* Entry Point                                        */
30007a78:	e7803101 	str	r3, [r0, r1, lsl #2]
        *(--stk)  = (RAW_U32)0;             /* LR                                                 */
        *(--stk)  = (RAW_U32)0;             /* R12                                                */
        *(--stk)  = (RAW_U32)0;             /* R11                                                */
        *(--stk)  = (RAW_U32)0;             /* R10                                                */
30007a7c:	e59d3004 	ldr	r3, [sp, #4]
        RAW_U32 *stk;
        RAW_U32 temp = (RAW_U32)(p_stk_base + stk_size - 2);
        stk = (RAW_U32  *)temp;

        *(stk)    =  (RAW_U32)p_task;       /* Entry Point                                        */
        *(--stk)  = (RAW_U32)0;             /* LR                                                 */
30007a80:	e3a0c000 	mov	ip, #0
        *(--stk)  = (RAW_U32)0;             /* R5                                                 */
        *(--stk)  = (RAW_U32)0;             /* R4                                                 */
        *(--stk)  = (RAW_U32)0;             /* R3                                                 */
        *(--stk)  = (RAW_U32)0;             /* R2                                                 */
        *(--stk)  = (RAW_U32)0;             /* R1                                                 */
        *(--stk)  = (RAW_U32)p_arg;         /* R0 argument                                        */
30007a84:	e2454004 	sub	r4, r5, #4
        *(--stk)  = (RAW_U32)0;             /* R11                                                */
        *(--stk)  = (RAW_U32)0;             /* R10                                                */
        *(--stk)  = (RAW_U32)0;             /* R9                                                 */
        *(--stk)  = (RAW_U32)0;             /* R8                                                 */
        *(--stk)  = (RAW_U32)0;             /* R7 :                                               */
        *(--stk)  = (RAW_U32)0;             /* R6                                                 */
30007a88:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
        RAW_U32 *stk;
        RAW_U32 temp = (RAW_U32)(p_stk_base + stk_size - 2);
        stk = (RAW_U32  *)temp;

        *(stk)    =  (RAW_U32)p_task;       /* Entry Point                                        */
        *(--stk)  = (RAW_U32)0;             /* LR                                                 */
30007a8c:	e508c004 	str	ip, [r8, #-4]
        *(--stk)  = (RAW_U32)0;             /* R12                                                */
30007a90:	e507c004 	str	ip, [r7, #-4]
        *(--stk)  = (RAW_U32)0;             /* R11                                                */
30007a94:	e506c004 	str	ip, [r6, #-4]
        *(--stk)  = (RAW_U32)0;             /* R10                                                */
30007a98:	e503c004 	str	ip, [r3, #-4]
        *(--stk)  = (RAW_U32)0;             /* R9                                                 */
        *(--stk)  = (RAW_U32)0;             /* R8                                                 */
        *(--stk)  = (RAW_U32)0;             /* R7 :                                               */
        *(--stk)  = (RAW_U32)0;             /* R6                                                 */
        *(--stk)  = (RAW_U32)0;             /* R5                                                 */
30007a9c:	e59d3020 	ldr	r3, [sp, #32]
        *(stk)    =  (RAW_U32)p_task;       /* Entry Point                                        */
        *(--stk)  = (RAW_U32)0;             /* LR                                                 */
        *(--stk)  = (RAW_U32)0;             /* R12                                                */
        *(--stk)  = (RAW_U32)0;             /* R11                                                */
        *(--stk)  = (RAW_U32)0;             /* R10                                                */
        *(--stk)  = (RAW_U32)0;             /* R9                                                 */
30007aa0:	e50ac004 	str	ip, [sl, #-4]
        *(--stk)  = (RAW_U32)0;             /* R8                                                 */
30007aa4:	e509c004 	str	ip, [r9, #-4]
        *(--stk)  = (RAW_U32)0;             /* R7 :                                               */
30007aa8:	e50bc004 	str	ip, [fp, #-4]
        *(--stk)  = (RAW_U32)0;             /* R6                                                 */
30007aac:	e505c004 	str	ip, [r5, #-4]
        *(--stk)  = (RAW_U32)0;             /* R5                                                 */
        *(--stk)  = (RAW_U32)0;             /* R4                                                 */
30007ab0:	e59d501c 	ldr	r5, [sp, #28]
        *(--stk)  = (RAW_U32)0;             /* R10                                                */
        *(--stk)  = (RAW_U32)0;             /* R9                                                 */
        *(--stk)  = (RAW_U32)0;             /* R8                                                 */
        *(--stk)  = (RAW_U32)0;             /* R7 :                                               */
        *(--stk)  = (RAW_U32)0;             /* R6                                                 */
        *(--stk)  = (RAW_U32)0;             /* R5                                                 */
30007ab4:	e503c004 	str	ip, [r3, #-4]
        *(--stk)  = (RAW_U32)0;             /* R4                                                 */
        *(--stk)  = (RAW_U32)0;             /* R3                                                 */
30007ab8:	e59d3018 	ldr	r3, [sp, #24]
        *(--stk)  = (RAW_U32)0;             /* R9                                                 */
        *(--stk)  = (RAW_U32)0;             /* R8                                                 */
        *(--stk)  = (RAW_U32)0;             /* R7 :                                               */
        *(--stk)  = (RAW_U32)0;             /* R6                                                 */
        *(--stk)  = (RAW_U32)0;             /* R5                                                 */
        *(--stk)  = (RAW_U32)0;             /* R4                                                 */
30007abc:	e505c004 	str	ip, [r5, #-4]
        *(--stk)  = (RAW_U32)0;             /* R3                                                 */
        *(--stk)  = (RAW_U32)0;             /* R2                                                 */
30007ac0:	e59d5014 	ldr	r5, [sp, #20]
        *(--stk)  = (RAW_U32)0;             /* R8                                                 */
        *(--stk)  = (RAW_U32)0;             /* R7 :                                               */
        *(--stk)  = (RAW_U32)0;             /* R6                                                 */
        *(--stk)  = (RAW_U32)0;             /* R5                                                 */
        *(--stk)  = (RAW_U32)0;             /* R4                                                 */
        *(--stk)  = (RAW_U32)0;             /* R3                                                 */
30007ac4:	e503c004 	str	ip, [r3, #-4]
        *(--stk)  = (RAW_U32)0;             /* R2                                                 */
        *(--stk)  = (RAW_U32)0;             /* R1                                                 */
30007ac8:	e59d3010 	ldr	r3, [sp, #16]
        *(--stk)  = (RAW_U32)0;             /* R7 :                                               */
        *(--stk)  = (RAW_U32)0;             /* R6                                                 */
        *(--stk)  = (RAW_U32)0;             /* R5                                                 */
        *(--stk)  = (RAW_U32)0;             /* R4                                                 */
        *(--stk)  = (RAW_U32)0;             /* R3                                                 */
        *(--stk)  = (RAW_U32)0;             /* R2                                                 */
30007acc:	e505c004 	str	ip, [r5, #-4]
        *(--stk)  = (RAW_U32)0;             /* R1                                                 */
        *(--stk)  = (RAW_U32)p_arg;         /* R0 argument                                        */
30007ad0:	e59d500c 	ldr	r5, [sp, #12]
        *(--stk)  = (RAW_U32)0;             /* R6                                                 */
        *(--stk)  = (RAW_U32)0;             /* R5                                                 */
        *(--stk)  = (RAW_U32)0;             /* R4                                                 */
        *(--stk)  = (RAW_U32)0;             /* R3                                                 */
        *(--stk)  = (RAW_U32)0;             /* R2                                                 */
        *(--stk)  = (RAW_U32)0;             /* R1                                                 */
30007ad4:	e503c004 	str	ip, [r3, #-4]
        *(--stk)  = (RAW_U32)p_arg;         /* R0 argument                                        */
        *(--stk)  = (RAW_U32)0x00000013L;   /* CPSR                                               */
30007ad8:	e3a03013 	mov	r3, #19
        *(--stk)  = (RAW_U32)0;             /* R5                                                 */
        *(--stk)  = (RAW_U32)0;             /* R4                                                 */
        *(--stk)  = (RAW_U32)0;             /* R3                                                 */
        *(--stk)  = (RAW_U32)0;             /* R2                                                 */
        *(--stk)  = (RAW_U32)0;             /* R1                                                 */
        *(--stk)  = (RAW_U32)p_arg;         /* R0 argument                                        */
30007adc:	e5052004 	str	r2, [r5, #-4]
        *(--stk)  = (RAW_U32)0x00000013L;   /* CPSR                                               */
         
	return stk;
}
30007ae0:	e2440004 	sub	r0, r4, #4
        *(--stk)  = (RAW_U32)0;             /* R4                                                 */
        *(--stk)  = (RAW_U32)0;             /* R3                                                 */
        *(--stk)  = (RAW_U32)0;             /* R2                                                 */
        *(--stk)  = (RAW_U32)0;             /* R1                                                 */
        *(--stk)  = (RAW_U32)p_arg;         /* R0 argument                                        */
        *(--stk)  = (RAW_U32)0x00000013L;   /* CPSR                                               */
30007ae4:	e5043004 	str	r3, [r4, #-4]
         
	return stk;
}
30007ae8:	e28dd028 	add	sp, sp, #40	; 0x28
30007aec:	e8bd0ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
30007af0:	e12fff1e 	bx	lr

30007af4 <raw_tick_hook>:


void raw_tick_hook()
{

}
30007af4:	e12fff1e 	bx	lr

30007af8 <task_create_hook>:


void task_create_hook()
{

}
30007af8:	e12fff1e 	bx	lr

30007afc <raw_os_init_hook>:

void raw_os_init_hook()
{

}
30007afc:	e12fff1e 	bx	lr

30007b00 <raw_task_abort_hook>:

void raw_task_abort_hook()
{

}
30007b00:	e12fff1e 	bx	lr

30007b04 <raw_task_delete_hook>:

void raw_task_delete_hook()
{

}
30007b04:	e12fff1e 	bx	lr

30007b08 <raw_idle_coroutine_hook>:


void raw_idle_coroutine_hook()
{

}
30007b08:	e12fff1e 	bx	lr

30007b0c <task_switch_hook>:

void task_switch_hook()
{

}
30007b0c:	e12fff1e 	bx	lr

30007b10 <_trace_init>:

void _trace_init()
{


}
30007b10:	e12fff1e 	bx	lr

30007b14 <_trace_task_switch>:

void _trace_task_switch(RAW_TASK_OBJ *from, RAW_TASK_OBJ *to)
{


}
30007b14:	e12fff1e 	bx	lr

30007b18 <_trace_int_task_switch>:

void _trace_int_task_switch(RAW_TASK_OBJ *from, RAW_TASK_OBJ *to)
{
	
}
30007b18:	e12fff1e 	bx	lr

30007b1c <_trace_task_create>:


void _trace_task_create(RAW_TASK_OBJ *task)
{

}
30007b1c:	e12fff1e 	bx	lr

30007b20 <_trace_task_priority_change>:

void _trace_task_priority_change(RAW_TASK_OBJ *task, RAW_U8 priority)
{


}
30007b20:	e12fff1e 	bx	lr

30007b24 <_trace_task_suspend>:


void _trace_task_suspend(RAW_TASK_OBJ *task_obj, RAW_TASK_OBJ *task)
{
}
30007b24:	e12fff1e 	bx	lr

30007b28 <_trace_task_resume>:

void _trace_task_resume(RAW_TASK_OBJ *task_obj, RAW_TASK_OBJ *task_resumed)
{

	
}
30007b28:	e12fff1e 	bx	lr

30007b2c <_trace_task_delete>:

void _trace_task_delete(RAW_TASK_OBJ *task)
{


}
30007b2c:	e12fff1e 	bx	lr

30007b30 <_trace_task_abort>:

void _trace_task_abort(RAW_TASK_OBJ *task)
{


}
30007b30:	e12fff1e 	bx	lr

30007b34 <_trace_task_0_overflow>:

void _trace_task_0_overflow(EVENT_HANLDER *p, TASK_0_EVENT_TYPE ev, void *event_data)
{


}
30007b34:	e12fff1e 	bx	lr

30007b38 <_trace_int_msg_exhausted>:
void _trace_int_msg_exhausted()
{



}
30007b38:	e12fff1e 	bx	lr

30007b3c <_trace_int_msg_post>:

void _trace_int_msg_post(RAW_U8 type, void *p_obj, void *p_void, RAW_U32 msg_size, RAW_U32 flags, RAW_U8 opt)
{


}
30007b3c:	e12fff1e 	bx	lr

30007b40 <_trace_semaphore_create>:

void _trace_semaphore_create(RAW_TASK_OBJ *task, RAW_SEMAPHORE *semaphore_obj)
{


}
30007b40:	e12fff1e 	bx	lr

30007b44 <_trace_semaphore_overflow>:

void _trace_semaphore_overflow(RAW_TASK_OBJ *task, RAW_SEMAPHORE *semaphore_obj)
{


}
30007b44:	e12fff1e 	bx	lr

30007b48 <_trace_semaphore_delete>:

void _trace_semaphore_delete(RAW_TASK_OBJ *task, RAW_SEMAPHORE *semaphore_obj)
{


}
30007b48:	e12fff1e 	bx	lr

30007b4c <_trace_semaphore_get_success>:

void _trace_semaphore_get_success(RAW_TASK_OBJ *task, RAW_SEMAPHORE *semaphore_obj)
{


}
30007b4c:	e12fff1e 	bx	lr

30007b50 <_trace_semaphore_get_block>:

void _trace_semaphore_get_block(RAW_TASK_OBJ *task, RAW_SEMAPHORE *semaphore_obj, RAW_TICK_TYPE wait_option)
{


}
30007b50:	e12fff1e 	bx	lr

30007b54 <_trace_sem_wake_task>:

void _trace_sem_wake_task(RAW_TASK_OBJ *task, RAW_TASK_OBJ *task_waked_up, RAW_U8 opt_wake_all)
{

}
30007b54:	e12fff1e 	bx	lr

30007b58 <_trace_semaphore_count_increase>:

void _trace_semaphore_count_increase(RAW_TASK_OBJ *task, RAW_SEMAPHORE *semaphore_obj)
{


}
30007b58:	e12fff1e 	bx	lr

30007b5c <_trace_queue_create>:


void _trace_queue_create(RAW_TASK_OBJ *task, RAW_QUEUE *queue_obj)
{

}
30007b5c:	e12fff1e 	bx	lr

30007b60 <_trace_queue_msg_post>:

void _trace_queue_msg_post(RAW_TASK_OBJ *task, RAW_QUEUE *queue_obj, void *msg, RAW_U8 opt_send_method)

{

}
30007b60:	e12fff1e 	bx	lr

30007b64 <_trace_queue_wake_task>:

void _trace_queue_wake_task(RAW_TASK_OBJ *task, RAW_TASK_OBJ *task_waked_up, void *msg, RAW_U8 opt_wake_all)
{
}
30007b64:	e12fff1e 	bx	lr

30007b68 <_trace_queue_get_msg>:


void  _trace_queue_get_msg(RAW_TASK_OBJ *task, RAW_QUEUE *queue_obj, RAW_TICK_TYPE wait_option, void *msg)
{

}
30007b68:	e12fff1e 	bx	lr

30007b6c <_trace_queue_msg_max>:


void _trace_queue_msg_max(RAW_TASK_OBJ *task, RAW_QUEUE *queue_obj, void *msg, RAW_U8 opt_send_method)
{

}
30007b6c:	e12fff1e 	bx	lr

30007b70 <_trace_queue_get_block>:
void _trace_queue_get_block(RAW_TASK_OBJ *task, RAW_QUEUE *queue_obj, RAW_TICK_TYPE wait_option)
{



}
30007b70:	e12fff1e 	bx	lr

30007b74 <_trace_queue_flush>:
void _trace_queue_flush(RAW_TASK_OBJ *task, RAW_QUEUE *queue_obj)
{



}
30007b74:	e12fff1e 	bx	lr

30007b78 <_trace_queue_delete>:

void _trace_queue_delete(RAW_TASK_OBJ *task, RAW_QUEUE *queue_obj)
{


}
30007b78:	e12fff1e 	bx	lr

30007b7c <_trace_mutex_create>:


void _trace_mutex_create(RAW_TASK_OBJ *task,RAW_MUTEX *mutex_ptr, RAW_U8 *name_ptr, RAW_U8 policy, RAW_U8 ceiling_prio)
{

}
30007b7c:	e12fff1e 	bx	lr

30007b80 <_trace_mutex_release>:


void _trace_mutex_release(RAW_TASK_OBJ *task, RAW_TASK_OBJ *tcb, RAW_U8 newpri)
{

}
30007b80:	e12fff1e 	bx	lr

30007b84 <_trace_mutex_ex_ce_pri>:


void _trace_mutex_ex_ce_pri(RAW_TASK_OBJ *task, RAW_MUTEX *mutex_obj, RAW_TICK_TYPE wait_option)
{
}
30007b84:	e12fff1e 	bx	lr

30007b88 <_trace_mutex_get>:


void _trace_mutex_get(RAW_TASK_OBJ *task, RAW_MUTEX *mutex_obj, RAW_TICK_TYPE wait_option)
{

}
30007b88:	e12fff1e 	bx	lr

30007b8c <_trace_task_pri_inv>:

void _trace_task_pri_inv(RAW_TASK_OBJ *task, RAW_TASK_OBJ *mtxtsk)
{

}
30007b8c:	e12fff1e 	bx	lr

30007b90 <_trace_mutex_get_block>:

void _trace_mutex_get_block(RAW_TASK_OBJ *task, RAW_MUTEX *mutex_obj, RAW_TICK_TYPE wait_option)
{


}
30007b90:	e12fff1e 	bx	lr

30007b94 <_trace_mutex_release_success>:

void _trace_mutex_release_success(RAW_TASK_OBJ *task, RAW_MUTEX *mutex_obj)
{
}
30007b94:	e12fff1e 	bx	lr

30007b98 <_trace_mutex_wake_task>:

void _trace_mutex_wake_task(RAW_TASK_OBJ *task, RAW_TASK_OBJ *task_waked_up)
{
}
30007b98:	e12fff1e 	bx	lr

30007b9c <_trace_mutex_delete>:


void _trace_mutex_delete(RAW_TASK_OBJ *task, RAW_MUTEX *mutex_obj)
{

}
30007b9c:	e12fff1e 	bx	lr

30007ba0 <_trace_task_stack_space>:

void _trace_task_stack_space(RAW_TASK_OBJ *task_obj)
{


}
30007ba0:	e12fff1e 	bx	lr

30007ba4 <_trace_block_no_memory>:

void _trace_block_no_memory(RAW_TASK_OBJ *task_obj, MEM_POOL *pool_obj)
{

	
}
30007ba4:	e12fff1e 	bx	lr

30007ba8 <_trace_block_pool_create>:


void _trace_block_pool_create(RAW_TASK_OBJ *task_obj, MEM_POOL *pool_obj)
{

}
30007ba8:	e12fff1e 	bx	lr

30007bac <_trace_byte_no_memory>:
{

	task_obj = task_obj;
	pool_obj = pool_obj;

}
30007bac:	e12fff1e 	bx	lr

30007bb0 <_trace_event_create>:


void _trace_event_create(RAW_TASK_OBJ *task_obj, RAW_EVENT *event_obj, RAW_U8 *name, RAW_U32 flags_init)
{

}
30007bb0:	e12fff1e 	bx	lr

30007bb4 <_trace_event_get>:


void _trace_event_get(RAW_TASK_OBJ *task_obj, RAW_EVENT *event_obj)
{

}
30007bb4:	e12fff1e 	bx	lr

30007bb8 <_trace_event_get_block>:

void _trace_event_get_block(RAW_TASK_OBJ *task_obj, RAW_EVENT *event_obj, RAW_TICK_TYPE wait_option)
{

	
}
30007bb8:	e12fff1e 	bx	lr

30007bbc <_trace_event_wake>:

void _trace_event_wake(RAW_TASK_OBJ *task_obj, RAW_TASK_OBJ *task)
{


}
30007bbc:	e12fff1e 	bx	lr

30007bc0 <_trace_event_delete>:

void _trace_event_delete(RAW_TASK_OBJ *task_obj, RAW_EVENT *event_obj)
{


}
30007bc0:	e12fff1e 	bx	lr

30007bc4 <_trace_queue_size_create>:

void _trace_queue_size_create(RAW_TASK_OBJ *task_obj, RAW_QUEUE_SIZE *queue_size_obj)
{


}
30007bc4:	e12fff1e 	bx	lr

30007bc8 <_trace_queue_size_msg_max>:

void _trace_queue_size_msg_max(RAW_TASK_OBJ *task_obj, RAW_QUEUE_SIZE *queue_size_obj, void *msg, MSG_SIZE_TYPE msg_size, RAW_U8 opt_send_method)
{


}
30007bc8:	e12fff1e 	bx	lr

30007bcc <_trace_queue_size_msg_post>:

void _trace_queue_size_msg_post(RAW_TASK_OBJ *task_obj, RAW_QUEUE_SIZE *queue_size_obj, void *msg, MSG_SIZE_TYPE msg_size, RAW_U8 opt_send_method)
{

	
}
30007bcc:	e12fff1e 	bx	lr

30007bd0 <_trace_queue_size_wake_task>:


void _trace_queue_size_wake_task(RAW_TASK_OBJ *task_obj, RAW_TASK_OBJ *task_waked_up, void *msg, MSG_SIZE_TYPE msg_size, RAW_U8 opt_wake_all)
{
}
30007bd0:	e12fff1e 	bx	lr

30007bd4 <_trace_queue_size_get_msg>:


void _trace_queue_size_get_msg(RAW_TASK_OBJ *task_obj, RAW_QUEUE_SIZE *queue_size_obj, RAW_TICK_TYPE wait_option, void *msg, RAW_U32 msg_size)
{

}
30007bd4:	e12fff1e 	bx	lr

30007bd8 <_trace_queue_size_get_block>:

void _trace_queue_size_get_block(RAW_TASK_OBJ *task_obj, RAW_QUEUE_SIZE *queue_size_obj, RAW_TICK_TYPE wait_option)
{

}
30007bd8:	e12fff1e 	bx	lr

30007bdc <_trace_queue_size_flush>:

void _trace_queue_size_flush(RAW_TASK_OBJ *task_obj, RAW_QUEUE_SIZE *queue_size_obj)
{


}
30007bdc:	e12fff1e 	bx	lr

30007be0 <_trace_queue_size_delete>:

void _trace_queue_size_delete(RAW_TASK_OBJ *task_obj, RAW_QUEUE_SIZE *queue_size_obj)
{


}
30007be0:	e12fff1e 	bx	lr

30007be4 <_trace_queue_buffer_create>:

void _trace_queue_buffer_create(RAW_TASK_OBJ *task_obj, RAW_QUEUE_BUFFER *queue_buffer_obj)
{


}
30007be4:	e12fff1e 	bx	lr

30007be8 <_trace_buffer_max>:


void _trace_buffer_max(RAW_TASK_OBJ *task_obj, RAW_QUEUE_BUFFER *queue_buffer_obj, RAW_VOID *p_void, MSG_SIZE_TYPE msg_size, RAW_U8 opt_send_method)
{
	
}
30007be8:	e12fff1e 	bx	lr

30007bec <_trace_buffer_post>:

void _trace_buffer_post(RAW_TASK_OBJ *task_obj, RAW_QUEUE_BUFFER *queue_buffer_obj, RAW_VOID *p_void, MSG_SIZE_TYPE msg_size, RAW_U8 opt_send_method)
{


}
30007bec:	e12fff1e 	bx	lr

30007bf0 <_trace_queue_buffer_wake_task>:

void _trace_queue_buffer_wake_task(RAW_TASK_OBJ *task_obj, RAW_TASK_OBJ *task_waked_up, RAW_VOID *p_void, MSG_SIZE_TYPE msg_size, RAW_U8 opt_send_method)
{

	
}
30007bf0:	e12fff1e 	bx	lr

30007bf4 <_trace_queue_buffer_get_block>:


void _trace_queue_buffer_get_block(RAW_TASK_OBJ *task_obj, RAW_QUEUE_BUFFER *queue_buffer_obj, RAW_TICK_TYPE wait_option)
{

}
30007bf4:	e12fff1e 	bx	lr

30007bf8 <OS_CPU_SR_Save>:
#define MODEMASK        0x1f
#define NOINT           0xc0


OS_CPU_SR_Save:
        MRS     R0, CPSR                                @ Set IRQ and FIQ bits in CPSR to disable all interrupts
30007bf8:	e10f0000 	mrs	r0, CPSR
        ORR     R1, R0, #0xC0
30007bfc:	e38010c0 	orr	r1, r0, #192	; 0xc0
        MSR     CPSR_c, R1
30007c00:	e121f001 	msr	CPSR_c, r1
        MRS     R1, CPSR                                @Confirm that CPSR contains the proper interrupt disable flags
30007c04:	e10f1000 	mrs	r1, CPSR
        AND     R1, R1, #0xC0
30007c08:	e20110c0 	and	r1, r1, #192	; 0xc0
        CMP     R1, #0xC0
30007c0c:	e35100c0 	cmp	r1, #192	; 0xc0
        BNE     OS_CPU_SR_Save                          @ Not properly disabled (try again)
30007c10:	1afffff8 	bne	30007bf8 <OS_CPU_SR_Save>
        MOV     PC, LR                                  @ Disabled, return the original CPSR contents in R0
30007c14:	e1a0f00e 	mov	pc, lr

30007c18 <OS_CPU_SR_Restore>:


OS_CPU_SR_Restore:
        MSR     CPSR_c, R0
30007c18:	e121f000 	msr	CPSR_c, r0
        MOV     PC, LR
30007c1c:	e1a0f00e 	mov	pc, lr

30007c20 <raw_start_first_task>:



raw_start_first_task:
        MSR             CPSR_cxsf,#0x13|0xc0     @Switch to SVC mode with IRQ&FIQ disable
30007c20:	e32ff0d3 	msr	CPSR_fsxc, #211	; 0xd3
        BL              task_switch_hook            @Call user define Task switch hook
30007c24:	ebffffb8 	bl	30007b0c <task_switch_hook>


        @----------------------------------------------------------------------------------
        @               SP = raw_task_active->task_stack;
        @----------------------------------------------------------------------------------
        LDR     R0, =raw_task_active
30007c28:	e59f0080 	ldr	r0, [pc, #128]	; 30007cb0 <raw_int_switch+0x28>
        LDR     R0, [R0]
30007c2c:	e5900000 	ldr	r0, [r0]
        LDR     SP, [R0]
30007c30:	e590d000 	ldr	sp, [r0]

        @----------------------------------------------------------------------------------
        @ Prepare to return to proper mode
        @----------------------------------------------------------------------------------
        LDMFD   SP!, {R0}
30007c34:	e8bd0001 	pop	{r0}
        MSR     SPSR_cxsf, R0
30007c38:	e16ff000 	msr	SPSR_fsxc, r0
        LDMFD   SP!, {R0-R12, LR, PC}^
30007c3c:	e8fddfff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}^

30007c40 <port_task_switch>:


port_task_switch:
        STMFD   SP!, {LR}           @PC
30007c40:	e92d4000 	push	{lr}
        STMFD   SP!, {R0-R12, LR}   @R0-R12 LR
30007c44:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
        MRS     R0,  CPSR       @Push CPSR
30007c48:	e10f0000 	mrs	r0, CPSR
        STMFD   SP!, {R0}
30007c4c:	e92d0001 	push	{r0}

        @----------------------------------------------------------------------------------
        @               raw_task_active->task_stack = SP
        @----------------------------------------------------------------------------------
        LDR             R0, =raw_task_active
30007c50:	e59f0058 	ldr	r0, [pc, #88]	; 30007cb0 <raw_int_switch+0x28>
        LDR             R0, [R0]
30007c54:	e5900000 	ldr	r0, [r0]
        STR             SP, [R0]
30007c58:	e580d000 	str	sp, [r0]

        @----------------------------------------------------------------------------------
        @ task_switch_hook();
        @---------------------------------------------------------------------------------
        BL              task_switch_hook
30007c5c:	ebffffaa 	bl	30007b0c <task_switch_hook>

        @----------------------------------------------------------------------------------
        @ raw_task_active= high_ready_obj;
        @----------------------------------------------------------------------------------
        LDR             R0, =high_ready_obj
30007c60:	e59f004c 	ldr	r0, [pc, #76]	; 30007cb4 <raw_int_switch+0x2c>
        LDR             R1, =raw_task_active
30007c64:	e59f1044 	ldr	r1, [pc, #68]	; 30007cb0 <raw_int_switch+0x28>
        LDR             R0, [R0]
30007c68:	e5900000 	ldr	r0, [r0]
        STR             R0, [R1]
30007c6c:	e5810000 	str	r0, [r1]


        @----------------------------------------------------------------------------------
        @  high_ready_obj->task_stack;
        @----------------------------------------------------------------------------------
        LDR             R0, =high_ready_obj
30007c70:	e59f003c 	ldr	r0, [pc, #60]	; 30007cb4 <raw_int_switch+0x2c>
        LDR             R0, [R0]
30007c74:	e5900000 	ldr	r0, [r0]
        LDR             SP, [R0]
30007c78:	e590d000 	ldr	sp, [r0]

        @----------------------------------------------------------------------------------
        @Restore New task context
        @----------------------------------------------------------------------------------
        LDMFD   SP!, {R0}               @POP CPSR
30007c7c:	e8bd0001 	pop	{r0}
        MSR     SPSR_cxsf, R0
30007c80:	e16ff000 	msr	SPSR_fsxc, r0
        LDMFD   SP!, {R0-R12, LR, PC}^
30007c84:	e8fddfff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}^

30007c88 <raw_int_switch>:
        @BL             task_switch_hook

        @----------------------------------------------------------------------------------
        @ raw_task_active = high_ready_obj;
        @----------------------------------------------------------------------------------
        LDR             R0, =high_ready_obj
30007c88:	e59f0024 	ldr	r0, [pc, #36]	; 30007cb4 <raw_int_switch+0x2c>
        LDR             R1, =raw_task_active
30007c8c:	e59f101c 	ldr	r1, [pc, #28]	; 30007cb0 <raw_int_switch+0x28>
        LDR             R0, [R0]
30007c90:	e5900000 	ldr	r0, [r0]
        STR             R0, [R1]
30007c94:	e5810000 	str	r0, [r1]


        @----------------------------------------------------------------------------------
        @               SP = high_ready_obj->task_stack;
        @----------------------------------------------------------------------------------
        LDR             R0, =high_ready_obj
30007c98:	e59f0014 	ldr	r0, [pc, #20]	; 30007cb4 <raw_int_switch+0x2c>
        LDR             R0, [R0]
30007c9c:	e5900000 	ldr	r0, [r0]
        LDR             SP, [R0]
30007ca0:	e590d000 	ldr	sp, [r0]

        @----------------------------------------------------------------------------------
        @ Restore New Task context
        @----------------------------------------------------------------------------------
        LDMFD   SP!, {R0}              @POP CPSR
30007ca4:	e8bd0001 	pop	{r0}
        MSR     SPSR_cxsf, R0
30007ca8:	e16ff000 	msr	SPSR_fsxc, r0
        LDMFD   SP!, {R0-R12, LR, PC}^
30007cac:	e8fddfff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}^
30007cb0:	30013838 	andcc	r3, r1, r8, lsr r8
30007cb4:	30013e64 	andcc	r3, r1, r4, ror #28

Disassembly of section .rodata:

30007cb8 <init>:
30007cb8:	300000b0 	strhcc	r0, [r0], -r0
30007cbc:	00000000 	andeq	r0, r0, r0

Disassembly of section .rodata.str1.4:

30007cc0 <.rodata.str1.4>:
30007cc0:	6c6c6568 	cfstr64vs	mvdx6, [ip], #-416	; 0xfffffe60
30007cc4:	726f776f 	rsbvc	r7, pc, #29097984	; 0x1bc0000
30007cc8:	000a646c 	andeq	r6, sl, ip, ror #8
30007ccc:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
30007cd0:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xd5f
30007cd4:	0000000a 	andeq	r0, r0, sl
30007cd8:	33323130 	teqcc	r2, #12
30007cdc:	37363534 	undefined instruction 0x37363534
30007ce0:	62613938 	rsbvs	r3, r1, #917504	; 0xe0000
30007ce4:	66656463 	strbtvs	r6, [r5], -r3, ror #8
30007ce8:	00000000 	andeq	r0, r0, r0
30007cec:	656c6469 	strbvs	r6, [ip, #-1129]!	; 0x469
30007cf0:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
30007cf4:	0000006b 	andeq	r0, r0, fp, rrx
30007cf8:	6b736174 	blvs	31ce02d0 <_SVC_STACK+0x14e02d4>
30007cfc:	6f5f305f 	svcvs	0x005f305f
30007d00:	63656a62 	cmnvs	r5, #401408	; 0x62000
30007d04:	00000074 	andeq	r0, r0, r4, ror r0
30007d08:	6b636974 	blvs	318e22e0 <_SVC_STACK+0x10e22e4>
30007d0c:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
30007d10:	626f5f6b 	rsbvs	r5, pc, #428	; 0x1ac
30007d14:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
30007d18:	00000000 	andeq	r0, r0, r0
30007d1c:	6b636974 	blvs	318e22f4 <_SVC_STACK+0x10e22f8>
30007d20:	6d65735f 	stclvs	3, cr7, [r5, #-380]!	; 0xfffffe84
30007d24:	6f687061 	svcvs	0x00687061
30007d28:	6f5f6572 	svcvs	0x005f6572
30007d2c:	00006a62 	andeq	r6, r0, r2, ror #20
30007d30:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
30007d34:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
30007d38:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
30007d3c:	00000000 	andeq	r0, r0, r0
30007d40:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
30007d44:	65735f72 	ldrbvs	r5, [r3, #-3954]!	; 0xf72
30007d48:	0000006d 	andeq	r0, r0, sp, rrx
30007d4c:	6b736174 	blvs	31ce0324 <_SVC_STACK+0x14e0328>
30007d50:	00000031 	andeq	r0, r0, r1, lsr r0
30007d54:	6b736174 	blvs	31ce032c <_SVC_STACK+0x14e0330>
30007d58:	00000032 	andeq	r0, r0, r2, lsr r0
30007d5c:	6b736174 	blvs	31ce0334 <_SVC_STACK+0x14e0338>
30007d60:	00000033 	andeq	r0, r0, r3, lsr r0
30007d64:	00206f67 	eoreq	r6, r0, r7, ror #30
30007d68:	20657962 	rsbcs	r7, r5, r2, ror #18
30007d6c:	00000000 	andeq	r0, r0, r0
30007d70:	00206968 	eoreq	r6, r0, r8, ror #18
30007d74:	316d6573 	smccc	54867	; 0xd653
30007d78:	00000000 	andeq	r0, r0, r0
30007d7c:	20746567 	rsbscs	r6, r4, r7, ror #10
30007d80:	00000000 	andeq	r0, r0, r0
30007d84:	65766967 	ldrbvs	r6, [r6, #-2407]!	; 0x967
30007d88:	00000020 	andeq	r0, r0, r0, lsr #32
30007d8c:	6574756d 	ldrbvs	r7, [r4, #-1389]!	; 0x56d
30007d90:	00003178 	andeq	r3, r0, r8, ror r1
30007d94:	61656c63 	cmnvs	r5, r3, ror #24
30007d98:	0000206e 	andeq	r2, r0, lr, rrx
30007d9c:	20746573 	rsbscs	r6, r4, r3, ror r5
30007da0:	00000000 	andeq	r0, r0, r0
30007da4:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
30007da8:	00003172 	andeq	r3, r0, r2, ror r1
30007dac:	00002061 	andeq	r2, r0, r1, rrx
30007db0:	00002062 	andeq	r2, r0, r2, rrx
30007db4:	00002063 	andeq	r2, r0, r3, rrx
30007db8:	6c6f6f70 	stclvs	15, cr6, [pc], #-448	; 0xfffffe40
30007dbc:	6f6c625f 	svcvs	0x006c625f
30007dc0:	00316b63 	eorseq	r6, r1, r3, ror #22
30007dc4:	6f727265 	svcvs	0x00727265
30007dc8:	00002072 	andeq	r2, r0, r2, ror r0
30007dcc:	00206b6f 	eoreq	r6, r0, pc, ror #22
30007dd0:	6c6f6f70 	stclvs	15, cr6, [pc], #-448	; 0xfffffe40
30007dd4:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0x25f
30007dd8:	00003165 	andeq	r3, r0, r5, ror #2
30007ddc:	20316b6f 	eorscs	r6, r1, pc, ror #22
30007de0:	00000000 	andeq	r0, r0, r0
30007de4:	6f727265 	svcvs	0x00727265
30007de8:	00203172 	eoreq	r3, r0, r2, ror r1
30007dec:	20326b6f 	eorscs	r6, r2, pc, ror #22
30007df0:	00000000 	andeq	r0, r0, r0
30007df4:	6f727265 	svcvs	0x00727265
30007df8:	00203272 	eoreq	r3, r0, r2, ror r2

Disassembly of section .data:

30007e00 <digits>:
30007e00:	30007cd8 	ldrdcc	r7, [r0], -r8

Disassembly of section .bss:

30007e20 <test_switch>:
30007e20:	00000000 	andeq	r0, r0, r0

30007e24 <test_task_obj>:
	...

30007f68 <test_task_stack1>:
	...

30008f68 <test_task_stack2>:
	...

30009f68 <test_task_stack3>:
	...

3000af68 <s1>:
	...

3000af80 <test_task_obj>:
	...

3000b058 <test_task_stack1>:
	...

3000c058 <test_task_stack2>:
	...

3000d058 <m1>:
	...

3000d074 <test_task_obj>:
	...

3000d14c <test_task_stack1>:
	...

3000e14c <test_task_stack2>:
	...

3000f14c <flag>:
3000f14c:	00000000 	andeq	r0, r0, r0

3000f150 <tm1>:
	...

3000f17c <test_task_obj>:
	...

3000f1e8 <test_task_stack1>:
	...

300101e8 <count>:
300101e8:	00000000 	andeq	r0, r0, r0

300101ec <mem_pool>:
	...

30010208 <buffer>:
	...

30010608 <test_task_obj>:
	...

30010674 <test_task_stack1>:
	...

30011674 <count>:
30011674:	00000000 	andeq	r0, r0, r0

30011678 <byte_pool>:
	...

30011698 <buffer>:
	...

30011a98 <test_task_obj>:
	...

30011b04 <test_task_stack1>:
	...

30012b04 <count>:
30012b04:	00000000 	andeq	r0, r0, r0

30012b08 <numbers>:
	...

30012b4c <msg_event_handler>:
30012b4c:	00000000 	andeq	r0, r0, r0

30012b50 <task_0_events>:
30012b50:	00000000 	andeq	r0, r0, r0

30012b54 <tick_semaphore_obj>:
	...

30012b6c <idle_task_exit>:
30012b6c:	00000000 	andeq	r0, r0, r0

30012b70 <raw_timer_ctrl>:
30012b70:	00000000 	andeq	r0, r0, r0

30012b74 <tick_head>:
	...

30012bb4 <idle_stack>:
	...

30012fb4 <system_debug>:
	...

30012fc0 <tick_task_stack>:
	...

300133c0 <raw_os_active>:
300133c0:	00000000 	andeq	r0, r0, r0

300133c4 <timer_task_stack>:
	...

300137c4 <raw_timer_count>:
300137c4:	00000000 	andeq	r0, r0, r0

300137c8 <tick_task_obj>:
	...

30013834 <raw_tick_count>:
30013834:	00000000 	andeq	r0, r0, r0

30013838 <raw_task_active>:
30013838:	00000000 	andeq	r0, r0, r0

3001383c <task_0_event_end>:
3001383c:	00000000 	andeq	r0, r0, r0

30013840 <free_object_int_msg>:
30013840:	00000000 	andeq	r0, r0, r0

30013844 <peak_events>:
	...

30013846 <task_0_event_head>:
	...

30013848 <int_msg_full>:
30013848:	00000000 	andeq	r0, r0, r0

3001384c <task_0_stack>:
	...

30013c4c <raw_ready_queue>:
	...

30013e48 <timer_sem>:
	...

30013e60 <task_0_exit>:
	...

30013e61 <raw_int_nesting>:
30013e61:	00000000 	andeq	r0, r0, r0

30013e64 <high_ready_obj>:
30013e64:	00000000 	andeq	r0, r0, r0

30013e68 <raw_idle_obj>:
	...

30013ed4 <task_0_events_queue>:
	...

30014054 <timer_head>:
	...

30014074 <raw_timer_obj>:
	...

300140e0 <object_int_msg>:
	...

300142c0 <raw_sched_lock>:
300142c0:	00000000 	andeq	r0, r0, r0

300142c4 <task_0_event_handler>:
300142c4:	00000000 	andeq	r0, r0, r0

300142c8 <raw_task_0_obj>:
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002541 	andeq	r2, r0, r1, asr #10
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	0000001b 	andeq	r0, r0, fp, lsl r0
  10:	00543405 	subseq	r3, r4, r5, lsl #8
  14:	01080206 	tsteq	r8, r6, lsl #4
  18:	04120109 	ldreq	r0, [r2], #-265	; 0x109
  1c:	01150114 	tsteq	r5, r4, lsl r1
  20:	01180317 	tsteq	r8, r7, lsl r3
  24:	Address 0x00000024 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <MEM_SIZE+0x8d0d24>
   4:	74632820 	strbtvc	r2, [r3], #-2080	; 0x820
   8:	312d676e 	teqcc	sp, lr, ror #14
   c:	312e362e 	teqcc	lr, lr, lsr #12
  10:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  14:	00332e34 	eorseq	r2, r3, r4, lsr lr

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000045 	andeq	r0, r0, r5, asr #32
       4:	001d0002 	andseq	r0, sp, r2
       8:	01020000 	tsteq	r2, r0
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	tsteq	r0, r0
      18:	00010000 	andeq	r0, r1, r0
      1c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
      20:	0000732e 	andeq	r7, r0, lr, lsr #6
      24:	00000000 	andeq	r0, r0, r0
      28:	00400205 	subeq	r0, r0, r5, lsl #4
      2c:	1d033000 	stcne	0, cr3, [r3]
      30:	2f2f2f01 	svccs	0x002f2f01
      34:	2f2f2f2f 	svccs	0x002f2f2f
      38:	2f2f2f2f 	svccs	0x002f2f2f
      3c:	302f2f31 	eorcc	r2, pc, r1, lsr pc
      40:	312f2f2f 	teqcc	pc, pc, lsr #30
      44:	01001202 	tsteq	r0, r2, lsl #4
      48:	00003a01 	andeq	r3, r0, r1, lsl #20
      4c:	1e000200 	cdpne	2, 0, cr0, cr0, cr0, {0}
      50:	02000000 	andeq	r0, r0, #0
      54:	0d0efb01 	vstreq	d15, [lr, #-4]
      58:	01010100 	tsteq	r1, r0, lsl #2
      5c:	00000001 	andeq	r0, r0, r1
      60:	01000001 	tsteq	r0, r1
      64:	61747300 	cmnvs	r4, r0, lsl #6
      68:	732e7472 	teqvc	lr, #1912602624	; 0x72000000
      6c:	00000000 	andeq	r0, r0, r0
      70:	02050000 	andeq	r0, r5, #0
      74:	30000000 	andcc	r0, r0, r0
      78:	2f011203 	svccs	0x00011203
      7c:	2f2f2f2f 	svccs	0x002f2f2f
      80:	12022f2f 	andne	r2, r2, #188	; 0xbc
      84:	60010100 	andvs	r0, r1, r0, lsl #2
      88:	02000000 	andeq	r0, r0, #0
      8c:	00001d00 	andeq	r1, r0, r0, lsl #26
      90:	fb010200 	blx	4089a <DISABLE_IRQ+0x4081a>
      94:	01000d0e 	tsteq	r0, lr, lsl #26
      98:	00010101 	andeq	r0, r1, r1, lsl #2
      9c:	00010000 	andeq	r0, r1, r0
      a0:	62000100 	andvs	r0, r0, #0
      a4:	2e746f6f 	cdpcs	15, 7, cr6, cr4, cr15, {3}
      a8:	00000063 	andeq	r0, r0, r3, rrx
      ac:	05000000 	streq	r0, [r0]
      b0:	0000b002 	andeq	fp, r0, r2
      b4:	4d011930 	stcmi	9, cr1, [r1, #-192]	; 0xffffff40
      b8:	014c6949 	cmpeq	ip, r9, asr #18
      bc:	5169494d 	cmnpl	r9, sp, asr #18
      c0:	4a7a0318 	bmi	1e80d28 <MEM_SIZE+0x1680d28>
      c4:	09034b34 	stmdbeq	r3, {r2, r4, r5, r8, r9, fp, lr}
      c8:	2e77032e 	cdpcs	3, 7, cr0, cr7, cr14, {1}
      cc:	4c68674b 	stclmi	7, cr6, [r8], #-300	; 0xfffffed4
      d0:	302f6867 	eorcc	r6, pc, r7, ror #16
      d4:	494b306a 	stmdbmi	fp, {r1, r3, r5, r6, ip, sp}^
      d8:	5a032f69 	bpl	cbe84 <DISABLE_IRQ+0xcbe04>
      dc:	29034966 	stmdbcs	r3, {r1, r2, r5, r6, r8, fp, lr}
      e0:	30302f66 	eorscc	r2, r0, r6, ror #30
      e4:	0a022f36 	beq	8bdc4 <DISABLE_IRQ+0x8bd44>
      e8:	57010100 	strpl	r0, [r1, -r0, lsl #2]
      ec:	02000000 	andeq	r0, r0, #0
      f0:	00002100 	andeq	r2, r0, r0, lsl #2
      f4:	fb010200 	blx	408fe <DISABLE_IRQ+0x4087e>
      f8:	01000d0e 	tsteq	r0, lr, lsl #26
      fc:	00010101 	andeq	r0, r1, r1, lsl #2
     100:	00010000 	andeq	r0, r1, r0
     104:	61000100 	tstvs	r0, r0, lsl #2
     108:	726f6e62 	rsbvc	r6, pc, #1568	; 0x620
     10c:	2e6c616d 	powcsez	f6, f4, #5.0
     110:	00000073 	andeq	r0, r0, r3, ror r0
     114:	05000000 	streq	r0, [r0]
     118:	0001d402 	andeq	sp, r1, r2, lsl #8
     11c:	012a0330 	teqeq	sl, r0, lsr r3
     120:	31313131 	teqcc	r1, r1, lsr r1
     124:	2f2f3432 	svccs	0x002f3432
     128:	2f323230 	svccs	0x00323230
     12c:	302f2f30 	eorcc	r2, pc, r0, lsr pc
     130:	2f2f2f30 	svccs	0x002f2f30
     134:	2f2f2f30 	svccs	0x002f2f30
     138:	3030312f 	eorscc	r3, r0, pc, lsr #2
     13c:	2f2f302f 	svccs	0x002f302f
     140:	00060232 	andeq	r0, r6, r2, lsr r2
     144:	00750101 	rsbseq	r0, r5, r1, lsl #2
     148:	00020000 	andeq	r0, r2, r0
     14c:	0000001c 	andeq	r0, r0, ip, lsl r0
     150:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     154:	0101000d 	tsteq	r1, sp
     158:	00000101 	andeq	r0, r0, r1, lsl #2
     15c:	00000100 	andeq	r0, r0, r0, lsl #2
     160:	6d6d0001 	stclvs	0, cr0, [sp, #-4]!
     164:	00632e75 	rsbeq	r2, r3, r5, ror lr
     168:	00000000 	andeq	r0, r0, r0
     16c:	64020500 	strvs	r0, [r2], #-1280	; 0x500
     170:	03300002 	teqeq	r0, #2
     174:	0315011b 	tsteq	r5, #-1073741818	; 0xc0000006
     178:	4c20080e 	stcmi	8, cr0, [r0], #-56	; 0xffffffc8
     17c:	014d4d01 	cmpeq	sp, r1, lsl #26
     180:	34014c85 	strcc	r4, [r1], #-3205	; 0xc85
     184:	034f2934 	movteq	r2, #63796	; 0xf934
     188:	33302e79 	teqcc	r0, #1936	; 0x790
     18c:	352e7903 	strcc	r7, [lr, #-2307]!	; 0x903
     190:	032e7903 	teqeq	lr, #49152	; 0xc000
     194:	1f034a71 	svcne	0x00034a71
     198:	4a79034a 	bmi	1e40ec8 <MEM_SIZE+0x1640ec8>
     19c:	79034f30 	stmdbvc	r3, {r4, r5, r8, r9, sl, fp, lr}
     1a0:	7903352e 	stmdbvc	r3, {r1, r2, r3, r5, r8, sl, ip, sp}
     1a4:	4a0a032e 	bmi	280e64 <DISABLE_IRQ+0x280de4>
     1a8:	034f4534 	movteq	r4, #62772	; 0xf534
     1ac:	33302e79 	teqcc	r0, #1936	; 0x790
     1b0:	352e7903 	strcc	r7, [lr, #-2307]!	; 0x903
     1b4:	032e7903 	teqeq	lr, #49152	; 0xc000
     1b8:	02022e09 	andeq	r2, r2, #144	; 0x90
     1bc:	fe010100 	cdp2	1, 0, cr0, cr1, cr0, {0}
     1c0:	02000000 	andeq	r0, r0, #0
     1c4:	00002d00 	andeq	r2, r0, r0, lsl #26
     1c8:	fb010200 	blx	409d2 <DISABLE_IRQ+0x40952>
     1cc:	01000d0e 	tsteq	r0, lr, lsl #26
     1d0:	00010101 	andeq	r0, r1, r1, lsl #2
     1d4:	00010000 	andeq	r0, r1, r0
     1d8:	002e0100 	eoreq	r0, lr, r0, lsl #2
     1dc:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
     1e0:	632e746e 	teqvs	lr, #1845493760	; 0x6e000000
     1e4:	00000000 	andeq	r0, r0, r0
     1e8:	5f776172 	svcpl	0x00776172
     1ec:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
     1f0:	00010068 	andeq	r0, r1, r8, rrx
     1f4:	05000000 	streq	r0, [r0]
     1f8:	00035002 	andeq	r5, r3, r2
     1fc:	00cf0330 	sbceq	r0, pc, r0, lsr r3
     200:	65670101 	strbvs	r0, [r7, #-257]!	; 0x101
     204:	6c16304d 	ldcvs	0, cr3, [r6], {77}	; 0x4d
     208:	3d082d9f 	stccc	13, cr2, [r8, #-636]	; 0xfffffd84
     20c:	4b314b2d 	blmi	c52ec8 <MEM_SIZE+0x452ec8>
     210:	2f4d3065 	svccs	0x004d3065
     214:	03302c4b 	teqeq	r0, #19200	; 0x4b00
     218:	1b03666b 	blne	d9bcc <DISABLE_IRQ+0xd9b4c>
     21c:	034d652e 	movteq	r6, #54574	; 0xd52e
     220:	034b4a74 	movteq	r4, #47732	; 0xba74
     224:	4b15ba0d 	blmi	56ea60 <DISABLE_IRQ+0x56e9e0>
     228:	6bb9672f 	blvs	fee59eec <rEINTPEND+0xa8e59e44>
     22c:	4c4f494b 	mcrrmi	9, 4, r4, pc, cr11
     230:	71036751 	tstvc	r3, r1, asr r7
     234:	03014c02 	movweq	r4, #7170	; 0x1c02
     238:	03834a11 	orreq	r4, r3, #69632	; 0x11000
     23c:	03c12e18 	biceq	r2, r1, #384	; 0x180
     240:	32832e64 	addcc	r2, r3, #1600	; 0x640
     244:	2e0b03bb 	mcrcs	3, 0, r0, cr11, cr11, {5}
     248:	2e7903bb 	mrccs	3, 3, r0, cr9, cr11, {5}
     24c:	2e1903bb 	mrccs	3, 0, r0, cr9, cr11, {5}
     250:	2b4d2b4a 	blcs	134af80 <MEM_SIZE+0xb4af80>
     254:	292e0a03 	stmdbcs	lr!, {r0, r1, r9, fp}
     258:	034d322c 	movteq	r3, #53804	; 0xd22c
     25c:	032b2e79 	teqeq	fp, #1936	; 0x790
     260:	69312e0a 	ldmdbvs	r1!, {r1, r3, r9, sl, fp, sp}
     264:	4d4c312b 	stfmie	f3, [ip, #-172]	; 0xffffff54
     268:	827f8603 	rsbshi	r8, pc, #3145728	; 0x300000
     26c:	fc036567 	stc2	5, cr6, [r3], {103}	; 0x67
     270:	77034a00 	strvc	r4, [r3, -r0, lsl #20]
     274:	2e032a2e 	vmlacs.f32	s4, s6, s29
     278:	302f4b66 	eorcc	r4, pc, r6, ror #22
     27c:	825a0331 	subshi	r0, sl, #-1006632960	; 0xc4000000
     280:	4c504f4c 	mrrcmi	15, 4, r4, r0, cr12
     284:	4c4c4c4c 	mcrrmi	12, 4, r4, ip, cr12
     288:	5903304d 	stmdbpl	r3, {r0, r2, r3, r6, ip, sp}
     28c:	2e270366 	cdpcs	3, 2, cr0, cr7, cr6, {3}
     290:	2f4a6703 	svccs	0x004a6703
     294:	2e70032f 	cdpcs	3, 7, cr0, cr0, cr15, {1}
     298:	4d2e1103 	stfmis	f1, [lr, #-12]!
     29c:	2df32f2d 	ldclcs	15, cr2, [r3, #180]!	; 0xb4
     2a0:	034a6c03 	movteq	r6, #44035	; 0xac03
     2a4:	03804a23 	orreq	r4, r0, #143360	; 0x23000
     2a8:	0d038213 	sfmeq	f0, 1, [r3, #-76]	; (stceq 2, cr8, [r3, #-76])	; 0xffffffb4
     2ac:	03194c2e 	tsteq	r9, #11776	; 0x2e00
     2b0:	2e2e7eb3 	mcrcs	14, 1, r7, cr14, cr3, {5}
     2b4:	499f304e 	ldmibmi	pc, {r1, r2, r3, r6, ip, sp}
     2b8:	2f862d4b 	svccs	0x00862d4b
     2bc:	01000402 	tsteq	r0, r2, lsl #8
     2c0:	00004501 	andeq	r4, r0, r1, lsl #10
     2c4:	22000200 	andcs	r0, r0, #0
     2c8:	02000000 	andeq	r0, r0, #0
     2cc:	0d0efb01 	vstreq	d15, [lr, #-4]
     2d0:	01010100 	tsteq	r1, r0, lsl #2
     2d4:	00000001 	andeq	r0, r0, r1
     2d8:	01000001 	tsteq	r0, r1
     2dc:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
     2e0:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
     2e4:	632e7470 	teqvs	lr, #1879048192	; 0x70000000
     2e8:	00000000 	andeq	r0, r0, r0
     2ec:	02050000 	andeq	r0, r5, #0
     2f0:	30000800 	andcc	r0, r0, r0, lsl #16
     2f4:	4c6c2f1a 	stclmi	15, cr2, [ip], #-104	; 0xffffff98
     2f8:	134c6c2f 	movtne	r6, #52271	; 0xcc2f
     2fc:	8313309f 	tsthi	r3, #159	; 0x9f
     300:	684b302c 	stmdavs	fp, {r2, r3, r5, ip, sp}^
     304:	0004022f 	andeq	r0, r4, pc, lsr #4
     308:	01630101 	cmneq	r3, r1, lsl #2
     30c:	00020000 	andeq	r0, r2, r0
     310:	000000d2 	ldrdeq	r0, [r0], -r2
     314:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     318:	0101000d 	tsteq	r1, sp
     31c:	00000101 	andeq	r0, r0, r1, lsl #2
     320:	00000100 	andeq	r0, r0, r0, lsl #2
     324:	00002e01 	andeq	r2, r0, r1, lsl #28
     328:	5f776172 	svcpl	0x00776172
     32c:	636f6c62 	cmnvs	pc, #25088	; 0x6200
     330:	00632e6b 	rsbeq	r2, r3, fp, ror #28
     334:	72000000 	andvc	r0, r0, #0
     338:	745f7761 	ldrbvc	r7, [pc], #1889	; 340 <DISABLE_IRQ+0x2c0>
     33c:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     340:	00010068 	andeq	r0, r1, r8, rrx
     344:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     348:	7570635f 	ldrbvc	r6, [r0, #-863]!	; 0x35f
     34c:	0100682e 	tsteq	r0, lr, lsr #16
     350:	61720000 	cmnvs	r2, r0
     354:	6e695f77 	mcrvs	15, 3, r5, cr9, cr7, {3}
     358:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
     35c:	745f6c61 	ldrbvc	r6, [pc], #3169	; 364 <DISABLE_IRQ+0x2e4>
     360:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     364:	00010068 	andeq	r0, r1, r8, rrx
     368:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     36c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
     370:	2e6d6574 	mcrcs	5, 3, r6, cr13, cr4, {3}
     374:	00010068 	andeq	r0, r1, r8, rrx
     378:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     37c:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
     380:	00682e74 	rsbeq	r2, r8, r4, ror lr
     384:	72000001 	andvc	r0, r0, #1
     388:	6f5f7761 	svcvs	0x005f7761
     38c:	682e6a62 	stmdavs	lr!, {r1, r5, r6, r9, fp, sp, lr}
     390:	00000100 	andeq	r0, r0, r0, lsl #2
     394:	5f776172 	svcpl	0x00776172
     398:	6574756d 	ldrbvs	r7, [r4, #-1389]!	; 0x56d
     39c:	00682e78 	rsbeq	r2, r8, r8, ror lr
     3a0:	72000001 	andvc	r0, r0, #1
     3a4:	715f7761 	cmpvc	pc, r1, ror #14
     3a8:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     3ac:	7a69735f 	bvc	1a5d130 <MEM_SIZE+0x125d130>
     3b0:	00682e65 	rsbeq	r2, r8, r5, ror #28
     3b4:	72000001 	andvc	r0, r0, #1
     3b8:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
     3bc:	682e6d65 	stmdavs	lr!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}
     3c0:	00000100 	andeq	r0, r0, r0, lsl #2
     3c4:	5f776172 	svcpl	0x00776172
     3c8:	636f6c62 	cmnvs	pc, #25088	; 0x6200
     3cc:	00682e6b 	rsbeq	r2, r8, fp, ror #28
     3d0:	72000001 	andvc	r0, r0, #1
     3d4:	695f7761 	ldmdbvs	pc, {r0, r5, r6, r8, r9, sl, ip, sp, lr}^
     3d8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     3dc:	2e6c616e 	powcsez	f6, f4, #0.5
     3e0:	00010068 	andeq	r0, r1, r8, rrx
     3e4:	05000000 	streq	r0, [r0]
     3e8:	00088002 	andeq	r8, r8, r2
     3ec:	01fd0330 	mvnseq	r0, r0, lsr r3
     3f0:	79033501 	stmdbvc	r3, {r0, r8, sl, ip, sp}
     3f4:	5132352e 	teqpl	r2, lr, lsr #10
     3f8:	03821703 	orreq	r1, r2, #786432	; 0xc0000
     3fc:	0b034a6e 	bleq	d2dbc <DISABLE_IRQ+0xd2d3c>
     400:	2e7a032e 	cdpcs	3, 7, cr0, cr10, cr14, {1}
     404:	2e7a0334 	mrccs	3, 3, r0, cr10, cr4, {1}
     408:	4d332b34 	vldmdbmi	r3!, {d2-d27}
     40c:	667f8803 	ldrbtvs	r8, [pc], -r3, lsl #16
     410:	032e0a03 	teqeq	lr, #12288	; 0x3000
     414:	0a032e76 	beq	cbdf4 <DISABLE_IRQ+0xcbd74>
     418:	036d4e2e 	cmneq	sp, #736	; 0x2e0
     41c:	5f038226 	svcpl	0x00038226
     420:	312b4d82 	smlawbcc	fp, r2, sp, r4
     424:	31342b6c 	teqcc	r4, ip, ror #22
     428:	032e7703 	teqeq	lr, #786432	; 0xc0000
     42c:	0e032e09 	cdpeq	14, 0, cr2, cr3, cr9, {0}
     430:	79034c4a 	stmdbvc	r3, {r1, r3, r6, sl, fp, lr}
     434:	da03302e 	ble	cc4f4 <DISABLE_IRQ+0xcc474>
     438:	032ed67e 	teqeq	lr, #132120576	; 0x7e00000
     43c:	6b6b4a0b 	blvs	1ad2c70 <MEM_SIZE+0x12d2c70>
     440:	03660903 	cmneq	r6, #49152	; 0xc000
     444:	0e034a0b 	vmlaeq.f32	s8, s6, s22
     448:	03352966 	teqeq	r5, #1671168	; 0x198000
     44c:	0a032e76 	beq	cbe2c <DISABLE_IRQ+0xcbdac>
     450:	1e084e2e 	cdpne	14, 0, cr4, cr8, cr14, {1}
     454:	3030624c 	eorscc	r6, r0, ip, asr #4
     458:	2e760334 	mrccs	3, 3, r0, cr6, cr4, {1}
     45c:	032e1403 	teqeq	lr, #50331648	; 0x3000000
     460:	322c4a09 	eorcc	r4, ip, #36864	; 0x9000
     464:	2e7a032c 	cdpcs	3, 7, cr0, cr10, cr12, {1}
     468:	48863430 	stmmi	r6, {r4, r5, sl, ip, sp}
     46c:	01000602 	tsteq	r0, r2, lsl #12
     470:	0001cc01 	andeq	ip, r1, r1, lsl #24
     474:	d0000200 	andle	r0, r0, r0, lsl #4
     478:	02000000 	andeq	r0, r0, #0
     47c:	0d0efb01 	vstreq	d15, [lr, #-4]
     480:	01010100 	tsteq	r1, r0, lsl #2
     484:	00000001 	andeq	r0, r0, r1
     488:	01000001 	tsteq	r0, r1
     48c:	7200002e 	andvc	r0, r0, #46	; 0x2e
     490:	625f7761 	subsvs	r7, pc, #25427968	; 0x1840000
     494:	2e657479 	mcrcs	4, 3, r7, cr5, cr9, {3}
     498:	00000063 	andeq	r0, r0, r3, rrx
     49c:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     4a0:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     4a4:	00682e65 	rsbeq	r2, r8, r5, ror #28
     4a8:	72000001 	andvc	r0, r0, #1
     4ac:	635f7761 	cmpvs	pc, #25427968	; 0x1840000
     4b0:	682e7570 	stmdavs	lr!, {r4, r5, r6, r8, sl, ip, sp, lr}
     4b4:	00000100 	andeq	r0, r0, r0, lsl #2
     4b8:	5f776172 	svcpl	0x00776172
     4bc:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
     4c0:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
     4c4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     4c8:	00682e65 	rsbeq	r2, r8, r5, ror #28
     4cc:	72000001 	andvc	r0, r0, #1
     4d0:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
     4d4:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
     4d8:	00682e6d 	rsbeq	r2, r8, sp, ror #28
     4dc:	72000001 	andvc	r0, r0, #1
     4e0:	6c5f7761 	mrrcvs	7, 6, r7, pc, cr1
     4e4:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
     4e8:	00010068 	andeq	r0, r1, r8, rrx
     4ec:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     4f0:	6a626f5f 	bvs	189c274 <MEM_SIZE+0x109c274>
     4f4:	0100682e 	tsteq	r0, lr, lsr #16
     4f8:	61720000 	cmnvs	r2, r0
     4fc:	756d5f77 	strbvc	r5, [sp, #-3959]!	; 0xf77
     500:	2e786574 	mrccs	5, 3, r6, cr8, cr4, {3}
     504:	00010068 	andeq	r0, r1, r8, rrx
     508:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     50c:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
     510:	735f6575 	cmpvc	pc, #490733568	; 0x1d400000
     514:	2e657a69 	vnmulcs.f32	s15, s10, s19
     518:	00010068 	andeq	r0, r1, r8, rrx
     51c:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     520:	6d65735f 	stclvs	3, cr7, [r5, #-380]!	; 0xfffffe84
     524:	0100682e 	tsteq	r0, lr, lsr #16
     528:	61720000 	cmnvs	r2, r0
     52c:	79625f77 	stmdbvc	r2!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     530:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     534:	00000100 	andeq	r0, r0, r0, lsl #2
     538:	5f776172 	svcpl	0x00776172
     53c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
     540:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
     544:	0100682e 	tsteq	r0, lr, lsr #16
     548:	00000000 	andeq	r0, r0, r0
     54c:	0a700205 	beq	1c00d68 <MEM_SIZE+0x1400d68>
     550:	39033000 	stmdbcc	r3, {ip, sp}
     554:	79031901 	stmdbvc	r3, {r0, r8, fp, ip}
     558:	5033352e 	eorspl	r3, r3, lr, lsr #10
     55c:	51660b03 	cmnpl	r6, r3, lsl #22
     560:	2a4a1203 	bcs	1284d74 <MEM_SIZE+0xa84d74>
     564:	2f2d514b 	svccs	0x002d514b
     568:	2e790336 	mrccs	3, 3, r0, cr9, cr6, {1}
     56c:	66033035 	undefined instruction 0x66033035
     570:	032f2f2e 	teqeq	pc, #184	; 0xb8
     574:	33312e10 	teqcc	r1, #256	; 0x100
     578:	a003484e 	andge	r4, r3, lr, asr #16
     57c:	0336ba02 	teqeq	r6, #8192	; 0x2000
     580:	33362e78 	teqcc	r6, #1920	; 0x780
     584:	821c0351 	andshi	r0, ip, #1140850689	; 0x44000001
     588:	47666d03 	strbmi	r6, [r6, -r3, lsl #26]!
     58c:	032e0903 	teqeq	lr, #49152	; 0xc000
     590:	09032e77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp}
     594:	7a03312e 	bvc	cca54 <DISABLE_IRQ+0xcc9d4>
     598:	7a03342e 	bvc	cd658 <DISABLE_IRQ+0xcd5d8>
     59c:	034e342e 	movteq	r3, #58414	; 0xe42e
     5a0:	34342e76 	ldrtcc	r2, [r4], #-3702	; 0xe76
     5a4:	7ef0034c 	cdpvc	3, 15, cr0, cr0, cr12, {2}
     5a8:	2e0a039e 	mcrcs	3, 0, r0, cr10, cr14, {4}
     5ac:	2e2e7603 	cfmadda32cs	mvax0, mvax7, mvfx14, mvfx3
     5b0:	332e0a03 	teqcc	lr, #12288	; 0x3000
     5b4:	82380351 	eorshi	r0, r8, #1140850689	; 0x44000001
     5b8:	30824f03 	addcc	r4, r2, r3, lsl #30
     5bc:	2e7fa003 	cdpcs	0, 7, cr10, cr15, cr3, {0}
     5c0:	4a00e003 	bmi	385d4 <DISABLE_IRQ+0x38554>
     5c4:	c303332c 	movwgt	r3, #13100	; 0x332c
     5c8:	eb032e7e 	bl	cbfc8 <DISABLE_IRQ+0xcbf48>
     5cc:	d2032e00 	andle	r2, r3, #0
     5d0:	31342e00 	teqcc	r4, r0, lsl #28
     5d4:	4a7ea703 	bmi	1faa1e8 <MEM_SIZE+0x17aa1e8>
     5d8:	03312b31 	teqeq	r1, #50176	; 0xc400
     5dc:	2f2d4a0a 	svccs	0x002d4a0a
     5e0:	4a00c003 	bmi	305f4 <DISABLE_IRQ+0x30574>
     5e4:	3169322f 	cmncc	r9, pc, lsr #4
     5e8:	2d6b312b 	stfcse	f3, [fp, #-172]!	; 0xffffff54
     5ec:	0331312f 	teqeq	r1, #-1073741813	; 0xc000000b
     5f0:	034a7fb0 	movteq	r7, #44976	; 0xafb0
     5f4:	4a036636 	bmi	d9ed4 <DISABLE_IRQ+0xd9e54>
     5f8:	4e31332e 	cdpmi	3, 3, cr3, cr1, cr14, {1}
     5fc:	034a0d03 	movteq	r0, #44291	; 0xad03
     600:	322b6613 	eorcc	r6, fp, #19922944	; 0x1300000
     604:	00d2032d 	sbcseq	r0, r2, sp, lsr #6
     608:	00ce034a 	sbceq	r0, lr, sl, asr #6
     60c:	0f034d4a 	svceq	0x00034d4a
     610:	33293366 	teqcc	r9, #-1744830463	; 0x98000001
     614:	ba034c69 	blt	d37c0 <DISABLE_IRQ+0xd3740>
     618:	33292e7e 	teqcc	r9, #2016	; 0x7e0
     61c:	c6033329 	strgt	r3, [r3], -r9, lsr #6
     620:	ec034a01 	stc	10, cr4, [r3], {1}
     624:	694d4a7e 	stmdbvs	sp, {r1, r2, r3, r4, r5, r6, r9, fp, lr}^
     628:	322a314e 	eorcc	r3, sl, #-2147483629	; 0x80000013
     62c:	3231514d 	eorscc	r5, r1, #1073741843	; 0x40000013
     630:	6610032a 	ldrvs	r0, [r0], -sl, lsr #6
     634:	6600ce03 	strvs	ip, [r0], -r3, lsl #28
     638:	50312b31 	eorspl	r2, r1, r1, lsr fp
     63c:	01000c02 	tsteq	r0, r2, lsl #24
     640:	0001eb01 	andeq	lr, r1, r1, lsl #22
     644:	d2000200 	andle	r0, r0, #0
     648:	02000000 	andeq	r0, r0, #0
     64c:	0d0efb01 	vstreq	d15, [lr, #-4]
     650:	01010100 	tsteq	r1, r0, lsl #2
     654:	00000001 	andeq	r0, r0, r1
     658:	01000001 	tsteq	r0, r1
     65c:	7200002e 	andvc	r0, r0, #46	; 0x2e
     660:	655f7761 	ldrbvs	r7, [pc, #-1889]	; ffffff07 <rEINTPEND+0xa9fffe5f>
     664:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
     668:	0000632e 	andeq	r6, r0, lr, lsr #6
     66c:	61720000 	cmnvs	r2, r0
     670:	696c5f77 	stmdbvs	ip!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     674:	682e7473 	stmdavs	lr!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
     678:	00000100 	andeq	r0, r0, r0, lsl #2
     67c:	5f776172 	svcpl	0x00776172
     680:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     684:	0100682e 	tsteq	r0, lr, lsr #16
     688:	61720000 	cmnvs	r2, r0
     68c:	70635f77 	rsbvc	r5, r3, r7, ror pc
     690:	00682e75 	rsbeq	r2, r8, r5, ror lr
     694:	72000001 	andvc	r0, r0, #1
     698:	695f7761 	ldmdbvs	pc, {r0, r5, r6, r8, r9, sl, ip, sp, lr}^
     69c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     6a0:	5f6c616e 	svcpl	0x006c616e
     6a4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     6a8:	0100682e 	tsteq	r0, lr, lsr #16
     6ac:	61720000 	cmnvs	r2, r0
     6b0:	79735f77 	ldmdbvc	r3!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     6b4:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     6b8:	0100682e 	tsteq	r0, lr, lsr #16
     6bc:	61720000 	cmnvs	r2, r0
     6c0:	626f5f77 	rsbvs	r5, pc, #476	; 0x1dc
     6c4:	00682e6a 	rsbeq	r2, r8, sl, ror #28
     6c8:	72000001 	andvc	r0, r0, #1
     6cc:	6d5f7761 	ldclvs	7, cr7, [pc, #-388]	; 0xfffffe7c
     6d0:	78657475 	stmdavc	r5!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
     6d4:	0100682e 	tsteq	r0, lr, lsr #16
     6d8:	61720000 	cmnvs	r2, r0
     6dc:	75715f77 	ldrbvc	r5, [r1, #-3959]!	; 0xf77
     6e0:	5f657565 	svcpl	0x00657565
     6e4:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
     6e8:	0100682e 	tsteq	r0, lr, lsr #16
     6ec:	61720000 	cmnvs	r2, r0
     6f0:	65735f77 	ldrbvs	r5, [r3, #-3959]!	; 0xf77
     6f4:	00682e6d 	rsbeq	r2, r8, sp, ror #28
     6f8:	72000001 	andvc	r0, r0, #1
     6fc:	655f7761 	ldrbvs	r7, [pc, #-1889]	; ffffffa3 <rEINTPEND+0xa9fffefb>
     700:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
     704:	0100682e 	tsteq	r0, lr, lsr #16
     708:	61720000 	cmnvs	r2, r0
     70c:	6e695f77 	mcrvs	15, 3, r5, cr9, cr7, {3}
     710:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
     714:	682e6c61 	stmdavs	lr!, {r0, r5, r6, sl, fp, sp, lr}
     718:	00000100 	andeq	r0, r0, r0, lsl #2
     71c:	02050000 	andeq	r0, r5, #0
     720:	30000da0 	andcc	r0, r0, r0, lsr #27
     724:	0103bc03 	tsteq	r3, r3, lsl #24
     728:	23036a35 	movwcs	r6, #14901	; 0x3a35
     72c:	4a65039e 	bmi	19415ac <MEM_SIZE+0x11415ac>
     730:	020468bc 	andeq	r6, r4, #12320768	; 0xbc0000
     734:	087ce703 	ldmdaeq	ip!, {r0, r1, r8, r9, sl, sp, lr, pc}^
     738:	03010490 	movweq	r0, #5264	; 0x1490
     73c:	302e03a0 	eorcc	r0, lr, r0, lsr #7
     740:	0302044c 	movweq	r0, #9292	; 0x244c
     744:	044a7cdc 	strbeq	r7, [sl], #-3292	; 0xcdc
     748:	03a20301 	undefined instruction 0x03a20301
     74c:	4c64512e 	stfmie	f5, [r4], #-184	; 0xffffff48
     750:	034c84bc 	movteq	r8, #50364	; 0xc4bc
     754:	9a032e7a 	bls	cc144 <DISABLE_IRQ+0xcc0c4>
     758:	0e039e7e 	mcreq	14, 0, r9, cr3, cr14, {3}
     75c:	2e72032e 	cdpcs	3, 7, cr0, cr2, cr14, {1}
     760:	a0660e03 	rsbge	r0, r6, r3, lsl #28
     764:	00d10368 	sbcseq	r0, r1, r8, ror #6
     768:	b7032008 	strlt	r2, [r3, -r8]
     76c:	0b034a7f 	bleq	d3170 <DISABLE_IRQ+0xd30f0>
     770:	342b314a 	strtcc	r3, [fp], #-330	; 0x14a
     774:	342e7a03 	strtcc	r7, [lr], #-2563	; 0xa03
     778:	032e2503 	teqeq	lr, #12582912	; 0xc00000
     77c:	79034a62 	stmdbvc	r3, {r1, r5, r6, r9, fp, lr}
     780:	2c316882 	ldccs	8, cr6, [r1], #-520	; 0xfffffdf8
     784:	4a0e0330 	bmi	38144c <DISABLE_IRQ+0x3813cc>
     788:	31660d03 	cmncc	r6, r3, lsl #26
     78c:	0330312b 	teqeq	r0, #-1073741814	; 0xc000000a
     790:	2503665b 	strcs	r6, [r3, #-1627]	; 0x65b
     794:	2e5b032e 	cdpcs	3, 5, cr0, cr11, cr14, {1}
     798:	082e2f03 	stmdaeq	lr!, {r0, r1, r8, r9, sl, fp, sp}
     79c:	b4036822 	strlt	r6, [r3], #-2082	; 0x822
     7a0:	0a03667f 	beq	da1a4 <DISABLE_IRQ+0xda124>
     7a4:	302c3066 	eorcc	r3, ip, r6, rrx
     7a8:	3c03302c 	stccc	0, cr3, [r3], {44}	; 0x2c
     7ac:	30035808 	andcc	r5, r3, r8, lsl #16
     7b0:	2e2a3282 	cdpcs	2, 2, cr3, cr10, cr2, {4}
     7b4:	09034e4e 	stmdbeq	r3, {r1, r2, r3, r6, r9, sl, fp, lr}
     7b8:	820903ba 	andhi	r0, r9, #-402653182	; 0xe8000002
     7bc:	03c12948 	biceq	r2, r1, #1179648	; 0x120000
     7c0:	36827dda 	pkhtbcc	r7, r2, sl, asr #27
     7c4:	8a2e7803 	bhi	b9e7d8 <MEM_SIZE+0x39e7d8>
     7c8:	bcdea44f 	cfldrdlt	mvd10, [lr], {79}	; 0x4f
     7cc:	00de0368 	sbcseq	r0, lr, r8, ror #6
     7d0:	a2032008 	andge	r2, r3, #8
     7d4:	4c6c667f 	stclmi	6, cr6, [ip], #-508	; 0xfffffe04
     7d8:	4b822c03 	blmi	fe08b7ec <rEINTPEND+0xa808b744>
     7dc:	58086103 	stmdapl	r8, {r0, r1, r8, sp, lr}
     7e0:	2b661103 	blcs	1984bf4 <MEM_SIZE+0x1184bf4>
     7e4:	08691431 	stmdaeq	r9!, {r0, r4, r5, sl, ip}^
     7e8:	0a03a022 	beq	e8878 <DISABLE_IRQ+0xe87f8>
     7ec:	0872032e 	ldmdaeq	r2!, {r1, r2, r3, r5, r8, r9}^
     7f0:	4a090358 	bmi	241558 <DISABLE_IRQ+0x2414d8>
     7f4:	322a326e 	eorcc	r3, sl, #-536870906	; 0xe0000006
     7f8:	312f2c2c 	teqcc	pc, ip, lsr #24
     7fc:	3184f42f 	orrcc	pc, r4, pc, lsr #8
     800:	30a14f69 	adccc	r4, r1, r9, ror #30
     804:	034d2b31 	movteq	r2, #56113	; 0xdb31
     808:	03200869 	teqeq	r0, #6881280	; 0x690000
     80c:	c0034a17 	andgt	r4, r3, r7, lsl sl
     810:	2a169e7e 	bcs	5a8210 <DISABLE_IRQ+0x5a8190>
     814:	0c034e2e 	stceq	14, cr4, [r3], {46}	; 0x2e
     818:	2933474a 	ldmdbcs	r3!, {r1, r3, r6, r8, r9, sl, lr}
     81c:	02042a33 	andeq	r2, r4, #208896	; 0x33000
     820:	2f2e6f03 	svccs	0x002e6f03
     824:	11030104 	tstne	r3, r4, lsl #2
     828:	0285312e 	addeq	r3, r5, #-2147483637	; 0x8000000b
     82c:	01010006 	tsteq	r1, r6
     830:	000000e2 	andeq	r0, r0, r2, ror #1
     834:	00b20002 	adcseq	r0, r2, r2
     838:	01020000 	tsteq	r2, r0
     83c:	000d0efb 	strdeq	r0, [sp], -fp
     840:	01010101 	tsteq	r1, r1, lsl #2
     844:	01000000 	tsteq	r0, r0
     848:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
     84c:	61720000 	cmnvs	r2, r0
     850:	64695f77 	strbtvs	r5, [r9], #-3959	; 0xf77
     854:	632e656c 	teqvs	lr, #452984832	; 0x1b000000
     858:	00000000 	andeq	r0, r0, r0
     85c:	5f776172 	svcpl	0x00776172
     860:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     864:	0100682e 	tsteq	r0, lr, lsr #16
     868:	61720000 	cmnvs	r2, r0
     86c:	70635f77 	rsbvc	r5, r3, r7, ror pc
     870:	00682e75 	rsbeq	r2, r8, r5, ror lr
     874:	72000001 	andvc	r0, r0, #1
     878:	695f7761 	ldmdbvs	pc, {r0, r5, r6, r8, r9, sl, ip, sp, lr}^
     87c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     880:	5f6c616e 	svcpl	0x006c616e
     884:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     888:	0100682e 	tsteq	r0, lr, lsr #16
     88c:	61720000 	cmnvs	r2, r0
     890:	696c5f77 	stmdbvs	ip!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     894:	682e7473 	stmdavs	lr!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
     898:	00000100 	andeq	r0, r0, r0, lsl #2
     89c:	5f776172 	svcpl	0x00776172
     8a0:	2e6a626f 	cdpcs	2, 6, cr6, cr10, cr15, {3}
     8a4:	00010068 	andeq	r0, r1, r8, rrx
     8a8:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     8ac:	74756d5f 	ldrbtvc	r6, [r5], #-3423	; 0xd5f
     8b0:	682e7865 	stmdavs	lr!, {r0, r2, r5, r6, fp, ip, sp, lr}
     8b4:	00000100 	andeq	r0, r0, r0, lsl #2
     8b8:	5f776172 	svcpl	0x00776172
     8bc:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
     8c0:	69735f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     8c4:	682e657a 	stmdavs	lr!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}
     8c8:	00000100 	andeq	r0, r0, r0, lsl #2
     8cc:	5f776172 	svcpl	0x00776172
     8d0:	2e6d6573 	mcrcs	5, 3, r6, cr13, cr3, {3}
     8d4:	00010068 	andeq	r0, r1, r8, rrx
     8d8:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     8dc:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
     8e0:	616e7265 	cmnvs	lr, r5, ror #4
     8e4:	00682e6c 	rsbeq	r2, r8, ip, ror #28
     8e8:	00000001 	andeq	r0, r0, r1
     8ec:	64020500 	strvs	r0, [r2], #-1280	; 0x500
     8f0:	03300013 	teqeq	r0, #19
     8f4:	0a030123 	beq	c0d88 <DISABLE_IRQ+0xc0d08>
     8f8:	4d324f2e 	ldcmi	15, cr4, [r2, #-184]!	; 0xffffff48
     8fc:	034e2d2f 	movteq	r2, #60719	; 0xed2f
     900:	304c6615 	subcc	r6, ip, r5, lsl r6
     904:	034a1403 	movteq	r1, #41987	; 0xa403
     908:	31362e6c 	teqcc	r6, ip, ror #28
     90c:	2e0b032f 	cdpcs	3, 0, cr0, cr11, cr15, {1}
     910:	00040230 	andeq	r0, r4, r0, lsr r2
     914:	00190101 	andseq	r0, r9, r1, lsl #2
     918:	00020000 	andeq	r0, r2, r0
     91c:	00000013 	andeq	r0, r0, r3, lsl r0
     920:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     924:	0101000d 	tsteq	r1, sp
     928:	00000101 	andeq	r0, r0, r1, lsl #2
     92c:	00000100 	andeq	r0, r0, r0, lsl #2
     930:	f8000001 	undefined instruction 0xf8000001
     934:	02000001 	andeq	r0, r0, #1
     938:	0000d400 	andeq	sp, r0, r0, lsl #8
     93c:	fb010200 	blx	41146 <DISABLE_IRQ+0x410c6>
     940:	01000d0e 	tsteq	r0, lr, lsl #26
     944:	00010101 	andeq	r0, r1, r1, lsl #2
     948:	00010000 	andeq	r0, r1, r0
     94c:	002e0100 	eoreq	r0, lr, r0, lsl #2
     950:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     954:	75716d5f 	ldrbvc	r6, [r1, #-3423]!	; 0xd5f
     958:	2e657565 	cdpcs	5, 6, cr7, cr5, cr5, {3}
     95c:	00000063 	andeq	r0, r0, r3, rrx
     960:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     964:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
     968:	00682e74 	rsbeq	r2, r8, r4, ror lr
     96c:	72000001 	andvc	r0, r0, #1
     970:	745f7761 	ldrbvc	r7, [pc], #1889	; 978 <DISABLE_IRQ+0x8f8>
     974:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     978:	00010068 	andeq	r0, r1, r8, rrx
     97c:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     980:	7570635f 	ldrbvc	r6, [r0, #-863]!	; 0x35f
     984:	0100682e 	tsteq	r0, lr, lsr #16
     988:	61720000 	cmnvs	r2, r0
     98c:	6e695f77 	mcrvs	15, 3, r5, cr9, cr7, {3}
     990:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
     994:	745f6c61 	ldrbvc	r6, [pc], #3169	; 99c <DISABLE_IRQ+0x91c>
     998:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     99c:	00010068 	andeq	r0, r1, r8, rrx
     9a0:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     9a4:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
     9a8:	2e6d6574 	mcrcs	5, 3, r6, cr13, cr4, {3}
     9ac:	00010068 	andeq	r0, r1, r8, rrx
     9b0:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     9b4:	6a626f5f 	bvs	189c738 <MEM_SIZE+0x109c738>
     9b8:	0100682e 	tsteq	r0, lr, lsr #16
     9bc:	61720000 	cmnvs	r2, r0
     9c0:	756d5f77 	strbvc	r5, [sp, #-3959]!	; 0xf77
     9c4:	2e786574 	mrccs	5, 3, r6, cr8, cr4, {3}
     9c8:	00010068 	andeq	r0, r1, r8, rrx
     9cc:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     9d0:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
     9d4:	735f6575 	cmpvc	pc, #490733568	; 0x1d400000
     9d8:	2e657a69 	vnmulcs.f32	s15, s10, s19
     9dc:	00010068 	andeq	r0, r1, r8, rrx
     9e0:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     9e4:	6d65735f 	stclvs	3, cr7, [r5, #-380]!	; 0xfffffe84
     9e8:	0100682e 	tsteq	r0, lr, lsr #16
     9ec:	61720000 	cmnvs	r2, r0
     9f0:	716d5f77 	smcvc	54775	; 0xd5f7
     9f4:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     9f8:	0100682e 	tsteq	r0, lr, lsr #16
     9fc:	61720000 	cmnvs	r2, r0
     a00:	6e695f77 	mcrvs	15, 3, r5, cr9, cr7, {3}
     a04:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
     a08:	682e6c61 	stmdavs	lr!, {r0, r5, r6, sl, fp, sp, lr}
     a0c:	00000100 	andeq	r0, r0, r0, lsl #2
     a10:	02050000 	andeq	r0, r5, #0
     a14:	300013cc 	andcc	r1, r0, ip, asr #7
     a18:	03013703 	movweq	r3, #5891	; 0x1703
     a1c:	75032e0e 	strvc	r2, [r3, #-3598]	; 0xe0e
     a20:	2b312f4a 	blcs	c4c750 <MEM_SIZE+0x44c750>
     a24:	36312b2f 	ldrtcc	r2, [r1], -pc, lsr #22
     a28:	2f2e7a03 	svccs	0x002e7a03
     a2c:	71030204 	tstvc	r3, r4, lsl #4
     a30:	01042f2e 	tsteq	r4, lr, lsr #30
     a34:	322e1203 	eorcc	r1, lr, #805306368	; 0x30000000
     a38:	6603a203 	strvs	sl, [r3], -r3, lsl #4
     a3c:	2e7a0334 	mrccs	3, 3, r0, cr10, cr4, {1}
     a40:	4a0a0334 	bmi	281718 <DISABLE_IRQ+0x281698>
     a44:	03820f03 	orreq	r0, r2, #12
     a48:	4b846676 	blmi	fe11a428 <rEINTPEND+0xa811a380>
     a4c:	2d2f2f2d 	stccs	15, cr2, [pc, #-180]!	; 0xffffff4c
     a50:	034c4c2f 	movteq	r4, #52271	; 0xcc2f
     a54:	342e7eeb 	strtcc	r7, [lr], #-3819	; 0xeeb
     a58:	0a03a36d 	beq	e9814 <DISABLE_IRQ+0xe9794>
     a5c:	2dbc4582 	cfldr32cs	mvfx4, [ip, #520]!	; 0x208
     a60:	081c032f 	ldmdaeq	ip, {r0, r1, r2, r3, r5, r8, r9}
     a64:	a36d35ac 	cmnge	sp, #721420288	; 0x2b000000
     a68:	03821703 	orreq	r1, r2, #786432	; 0xc0000
     a6c:	02044a71 	andeq	r4, r4, #462848	; 0x71000
     a70:	ba7cf903 	blt	1f3ee84 <MEM_SIZE+0x173ee84>
     a74:	89030104 	stmdbhi	r3, {r2, r8}
     a78:	4b312e03 	blmi	c4c28c <MEM_SIZE+0x44c28c>
     a7c:	f3030204 	vhsub.u8	d0, d3, d4
     a80:	01044a7c 	tsteq	r4, ip, ror sl
     a84:	2e038c03 	cdpcs	12, 0, cr8, cr3, cr3, {0}
     a88:	4c22084e 	stcmi	8, cr0, [r2], #-312	; 0xfffffec8
     a8c:	7ea7032a 	cdpvc	3, 10, cr0, cr7, cr10, {1}
     a90:	78033682 	stmdavc	r3, {r1, r7, r9, sl, ip, sp}
     a94:	506e2e2e 	rsbpl	r2, lr, lr, lsr #28
     a98:	cb03a36d 	blgt	e9854 <DISABLE_IRQ+0xe97d4>
     a9c:	ba038200 	blt	e12a4 <DISABLE_IRQ+0xe1224>
     aa0:	034d827f 	movteq	r8, #53887	; 0xd27f
     aa4:	0a038211 	beq	e12f0 <DISABLE_IRQ+0xe1270>
     aa8:	302d854a 	eorcc	r8, sp, sl, asr #10
     aac:	72034b30 	andvc	r4, r3, #49152	; 0xc000
     ab0:	30302d2e 	eorscc	r2, r0, lr, lsr #26
     ab4:	2e6a034b 	cdpcs	3, 6, cr0, cr10, cr11, {2}
     ab8:	2f2f2d68 	svccs	0x002f2d68
     abc:	682f302c 	stmdavs	pc!, {r2, r3, r5, ip, sp}
     ac0:	19038430 	stmdbne	r3, {r4, r5, sl, pc}
     ac4:	672d672e 	strvs	r6, [sp, -lr, lsr #14]!
     ac8:	4c5a0883 	mrrcmi	8, 8, r0, sl, cr3
     acc:	0b036930 	bleq	daf94 <DISABLE_IRQ+0xdaf14>
     ad0:	302d2f66 	eorcc	r2, sp, r6, ror #30
     ad4:	034a6a03 	movteq	r6, #43523	; 0xaa03
     ad8:	2d68660b 	stclcs	6, cr6, [r8, #-44]!	; 0xffffffd4
     adc:	302c2f2f 	eorcc	r2, ip, pc, lsr #30
     ae0:	7efb032f 	cdpvc	3, 15, cr0, cr11, cr15, {1}
     ae4:	7fa403d6 	svcvc	0x00a403d6
     ae8:	00dc032e 	sbcseq	r0, ip, lr, lsr #6
     aec:	7fa4032e 	svcvc	0x00a4032e
     af0:	03a4512e 	undefined instruction 0x03a4512e
     af4:	038200d5 	orreq	r0, r2, #213	; 0xd5
     af8:	d8667fb1 	stmdale	r6!, {r0, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}^
     afc:	312f2cc1 	smlawtcc	pc, r1, ip, r2
     b00:	82720330 	rsbshi	r0, r2, #-1073741824	; 0xc0000000
     b04:	bd662103 	stflte	f2, [r6, #-12]!
     b08:	0330f484 	teqpeq	r0, #-2080374784	; 0x84000000
     b0c:	032f6666 	teqeq	pc, #106954752	; 0x6600000
     b10:	2d2fba44 	vstmdbcs	pc!, {s22-s89}
     b14:	2de6084b 	stclcs	8, cr0, [r6, #300]!	; 0x12c
     b18:	502d2f2d 	eorpl	r2, sp, sp, lsr #30
     b1c:	0333302c 	teqeq	r3, #44	; 0x2c
     b20:	31322e79 	teqcc	r2, r9, ror lr
     b24:	032e3c03 	teqeq	lr, #768	; 0x300
     b28:	08026609 	stmdaeq	r2, {r0, r3, r9, sl, sp, lr}
     b2c:	b2010100 	andlt	r0, r1, #0
     b30:	02000002 	andeq	r0, r0, #2
     b34:	0000c300 	andeq	ip, r0, r0, lsl #6
     b38:	fb010200 	blx	41342 <DISABLE_IRQ+0x412c2>
     b3c:	01000d0e 	tsteq	r0, lr, lsl #26
     b40:	00010101 	andeq	r0, r1, r1, lsl #2
     b44:	00010000 	andeq	r0, r1, r0
     b48:	002e0100 	eoreq	r0, lr, r0, lsl #2
     b4c:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     b50:	74756d5f 	ldrbtvc	r6, [r5], #-3423	; 0xd5f
     b54:	632e7865 	teqvs	lr, #6619136	; 0x650000
     b58:	00000000 	andeq	r0, r0, r0
     b5c:	5f776172 	svcpl	0x00776172
     b60:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
     b64:	0100682e 	tsteq	r0, lr, lsr #16
     b68:	61720000 	cmnvs	r2, r0
     b6c:	79745f77 	ldmdbvc	r4!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     b70:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     b74:	00000100 	andeq	r0, r0, r0, lsl #2
     b78:	5f776172 	svcpl	0x00776172
     b7c:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
     b80:	00010068 	andeq	r0, r1, r8, rrx
     b84:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     b88:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
     b8c:	616e7265 	cmnvs	lr, r5, ror #4
     b90:	79745f6c 	ldmdbvc	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     b94:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     b98:	00000100 	andeq	r0, r0, r0, lsl #2
     b9c:	5f776172 	svcpl	0x00776172
     ba0:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0x973
     ba4:	682e6d65 	stmdavs	lr!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}
     ba8:	00000100 	andeq	r0, r0, r0, lsl #2
     bac:	5f776172 	svcpl	0x00776172
     bb0:	2e6a626f 	cdpcs	2, 6, cr6, cr10, cr15, {3}
     bb4:	00010068 	andeq	r0, r1, r8, rrx
     bb8:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     bbc:	74756d5f 	ldrbtvc	r6, [r5], #-3423	; 0xd5f
     bc0:	682e7865 	stmdavs	lr!, {r0, r2, r5, r6, fp, ip, sp, lr}
     bc4:	00000100 	andeq	r0, r0, r0, lsl #2
     bc8:	5f776172 	svcpl	0x00776172
     bcc:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
     bd0:	69735f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     bd4:	682e657a 	stmdavs	lr!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}
     bd8:	00000100 	andeq	r0, r0, r0, lsl #2
     bdc:	5f776172 	svcpl	0x00776172
     be0:	2e6d6573 	mcrcs	5, 3, r6, cr13, cr3, {3}
     be4:	00010068 	andeq	r0, r1, r8, rrx
     be8:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     bec:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
     bf0:	616e7265 	cmnvs	lr, r5, ror #4
     bf4:	00682e6c 	rsbeq	r2, r8, ip, ror #28
     bf8:	00000001 	andeq	r0, r0, r1
     bfc:	70020500 	andvc	r0, r2, r0, lsl #10
     c00:	03300019 	teqeq	r0, #25
     c04:	030100f0 	movweq	r0, #4336	; 0x10f0
     c08:	77030109 	strvc	r0, [r3, -r9, lsl #2]
     c0c:	2e0b032e 	cdpcs	3, 0, cr0, cr11, cr14, {1}
     c10:	0b03694d 	bleq	db14c <DISABLE_IRQ+0xdb0cc>
     c14:	2f4dd72e 	svccs	0x004dd72e
     c18:	2e100345 	cdpcs	3, 1, cr0, cr0, cr5, {2}
     c1c:	4b4a7003 	blmi	129cc30 <MEM_SIZE+0xa9cc30>
     c20:	ad030204 	sfmge	f0, 4, [r3, #-16]	; (stcge 2, cr0, [r3, #-16])
     c24:	0104667f 	tsteq	r4, pc, ror r6
     c28:	2e00de03 	cdpcs	14, 0, cr13, cr0, cr3, {0}
     c2c:	2e700332 	mrccs	3, 3, r0, cr0, cr2, {1}
     c30:	032e1003 	teqeq	lr, #3
     c34:	20034a70 	andcs	r4, r3, r0, ror sl
     c38:	2a32304a 	bcs	c8cd68 <MEM_SIZE+0x48cd68>
     c3c:	4c03304e 	stcmi	0, cr3, [r3], {78}	; 0x4e
     c40:	032d4b4a 	teqeq	sp, #75776	; 0x12800
     c44:	354a00c1 	strbcc	r0, [sl, #-193]	; 0xc1
     c48:	032e7903 	teqeq	lr, #49152	; 0xc000
     c4c:	4b672e0b 	blmi	19cc480 <MEM_SIZE+0x11cc480>
     c50:	15038450 	strne	r8, [r3, #-1104]	; 0x450
     c54:	4a74032e 	bmi	1d01914 <MEM_SIZE+0x1501914>
     c58:	034a6e03 	movteq	r6, #44547	; 0xae03
     c5c:	68684a21 	stmdavs	r8!, {r0, r5, r9, fp, lr}^
     c60:	030204a1 	movweq	r0, #9377	; 0x24a1
     c64:	044a7ec5 	strbeq	r7, [sl], #-3781	; 0xec5
     c68:	01a10301 	undefined instruction 0x01a10301
     c6c:	7103322e 	tstvc	r3, lr, lsr #4
     c70:	b7034b4a 	strlt	r4, [r3, -sl, asr #22]
     c74:	6c354a03 	ldcvs	10, cr4, [r5], #-12
     c78:	180368bc 	stmdane	r3, {r2, r3, r4, r5, r7, fp, sp, lr}
     c7c:	70032008 	andvc	r2, r3, r8
     c80:	2c302c4a 	ldccs	12, cr2, [r0], #-296	; 0xfffffed8
     c84:	02042f30 	andeq	r2, r4, #192	; 0xc0
     c88:	4a7b9803 	bmi	1ee6c9c <MEM_SIZE+0x16e6c9c>
     c8c:	ec030104 	stfs	f0, [r3], {4}
     c90:	044b2e04 	strbeq	r2, [fp], #-3588	; 0xe04
     c94:	7b930302 	blvc	fe4c18a4 <rEINTPEND+0xa84c17fc>
     c98:	0301044a 	movweq	r0, #5194	; 0x144a
     c9c:	4e2e04ec 	cdpmi	4, 2, cr0, cr14, cr12, {7}
     ca0:	4c842208 	sfmmi	f2, 4, [r4], {8}	; (stcmi 2, cr2, [r4], {8})
     ca4:	032e6903 	teqeq	lr, #49152	; 0xc000
     ca8:	fd036611 	stc2	6, cr6, [r3, #-68]	; 0xffffffbc
     cac:	3016827c 	andscc	r8, r6, ip, ror r2
     cb0:	84316768 	ldrthi	r6, [r1], #-1896	; 0x768
     cb4:	017a0350 	cmneq	sl, r0, asr r3
     cb8:	322e4703 	eorcc	r4, lr, #786432	; 0xc0000
     cbc:	661e0330 	undefined instruction 0x661e0330
     cc0:	674a6403 	strbvs	r6, [sl, -r3, lsl #8]
     cc4:	820a0330 	andhi	r0, sl, #-1073741824	; 0xc0000000
     cc8:	4a0d034c 	bmi	341a00 <DISABLE_IRQ+0x341980>
     ccc:	032e7303 	teqeq	lr, #201326592	; 0xc000000
     cd0:	bc032e79 	stclt	14, cr2, [r3], {121}	; 0x79
     cd4:	2f338202 	svccs	0x00338202
     cd8:	034a1d03 	movteq	r1, #44291	; 0xad03
     cdc:	02044a63 	andeq	r4, r4, #405504	; 0x63000
     ce0:	667bec03 	ldrbtvs	lr, [fp], -r3, lsl #24
     ce4:	95030104 	strls	r0, [r3, #-260]	; 0x104
     ce8:	2a342e04 	bcs	d0c500 <MEM_SIZE+0x50c500>
     cec:	2e130335 	mrccs	3, 0, r0, cr3, cr5, {1}
     cf0:	352e6603 	strcc	r6, [lr, #-1539]!	; 0x603
     cf4:	2f2f2d32 	svccs	0x002f2d32
     cf8:	03866730 	orreq	r6, r6, #12582912	; 0xc00000
     cfc:	22034a6a 	andcs	r4, r3, #434176	; 0x6a000
     d00:	7ef8034a 	cdpvc	3, 15, cr0, cr8, cr10, {2}
     d04:	2e09034a 	cdpcs	3, 0, cr0, cr9, cr10, {2}
     d08:	00cf036a 	sbceq	r0, pc, sl, ror #6
     d0c:	7fb8039e 	svcvc	0x00b8039e
     d10:	0868bc4a 	stmdaeq	r8!, {r1, r3, r6, sl, fp, ip, sp, pc}^
     d14:	94089f96 	strls	r9, [r8], #-3990	; 0xf96
     d18:	30302c68 	eorscc	r2, r0, r8, ror #24
     d1c:	02044108 	andeq	r4, r4, #2
     d20:	4a7ca603 	bmi	1f2a534 <MEM_SIZE+0x172a534>
     d24:	dd030104 	stfles	f0, [r3, #-16]
     d28:	0f032e03 	svceq	0x00032e03
     d2c:	304e314a 	subcc	r3, lr, sl, asr #2
     d30:	2c312f2c 	ldccs	15, cr2, [r1], #-176	; 0xffffff50
     d34:	03332930 	teqeq	r3, #786432	; 0xc0000
     d38:	08682e0b 	stmdaeq	r8!, {r0, r1, r3, r9, sl, fp, sp}^
     d3c:	4d034c22 	stcmi	12, cr4, [r3, #-136]	; 0xffffff78
     d40:	660e032e 	strvs	r0, [lr], -lr, lsr #6
     d44:	84d82f2d 	ldrbhi	r2, [r8], #3885	; 0xf2d
     d48:	032e1d03 	teqeq	lr, #192	; 0xc0
     d4c:	03854a75 	orreq	r4, r5, #479232	; 0x75000
     d50:	c1036667 	tstgt	r3, r7, ror #12
     d54:	09039e7e 	stmdbeq	r3, {r1, r2, r3, r4, r5, r6, r9, sl, fp, ip, pc}
     d58:	2e77032e 	cdpcs	3, 7, cr0, cr7, cr14, {1}
     d5c:	4f2e0903 	svcmi	0x002e0903
     d60:	9e00e903 	cdpls	9, 0, cr14, cr0, cr3, {0}
     d64:	4a7f9f03 	bmi	1fe8978 <MEM_SIZE+0x17e8978>
     d68:	950868bc 	strls	r6, [r8, #-2236]	; 0x8bc
     d6c:	660f03a6 	strvs	r0, [pc], -r6, lsr #7
     d70:	4c4a1a03 	mcrrmi	10, 0, r1, sl, cr3
     d74:	50035f08 	andpl	r5, r3, r8, lsl #30
     d78:	f4845808 	vst1.32	{d5[0]}, [r4], r8
     d7c:	2e73039f 	mrccs	3, 3, r0, cr3, cr15, {4}
     d80:	08170367 	ldmdaeq	r7, {r0, r1, r2, r5, r6, r8, r9}
     d84:	2f2c303c 	svccs	0x002c303c
     d88:	29302c31 	ldmdbcs	r0!, {r0, r4, r5, sl, fp, sp}
     d8c:	2e0a0333 	mcrcs	3, 0, r0, cr10, cr3, {1}
     d90:	35a02208 	strcc	r2, [r0, #520]!	; 0x208
     d94:	03660c03 	cmneq	r6, #768	; 0x300
     d98:	08684a0c 	stmdaeq	r8!, {r2, r3, r9, fp, lr}^
     d9c:	68318522 	ldmdavs	r1!, {r1, r5, r8, sl, pc}
     da0:	2e7fb503 	cdpcs	5, 7, cr11, cr15, cr3, {0}
     da4:	034a7703 	movteq	r7, #42755	; 0xa703
     da8:	78036625 	stmdavc	r3, {r0, r2, r5, r9, sl, sp, lr}
     dac:	2a03854a 	bcs	e22dc <DISABLE_IRQ+0xe225c>
     db0:	4a740382 	bmi	1d01bc0 <MEM_SIZE+0x1501bc0>
     db4:	f2036784 	vabd.s8	d6, d19, d4
     db8:	3320087c 	teqcc	r0, #8126464	; 0x7c0000
     dbc:	4e6b2e29 	cdpmi	14, 6, cr2, cr11, cr9, {1}
     dc0:	03820903 	orreq	r0, r2, #49152	; 0xc000
     dc4:	7a032e0a 	bvc	cc5f4 <DISABLE_IRQ+0xcc574>
     dc8:	0302042e 	movweq	r0, #9262	; 0x242e
     dcc:	042f2e67 	strteq	r2, [pc], #3687	; dd4 <DISABLE_IRQ+0xd54>
     dd0:	2e140301 	cdpcs	3, 1, cr0, cr4, cr1, {0}
     dd4:	3231302f 	eorscc	r3, r1, #47	; 0x2f
     dd8:	66090330 	undefined instruction 0x66090330
     ddc:	da312b4c 	ble	c4bb14 <MEM_SIZE+0x44bb14>
     de0:	01000802 	tsteq	r0, r2, lsl #16
     de4:	0000a801 	andeq	sl, r0, r1, lsl #16
     de8:	a2000200 	andge	r0, r0, #0
     dec:	02000000 	andeq	r0, r0, #0
     df0:	0d0efb01 	vstreq	d15, [lr, #-4]
     df4:	01010100 	tsteq	r1, r0, lsl #2
     df8:	00000001 	andeq	r0, r0, r1
     dfc:	01000001 	tsteq	r0, r1
     e00:	7200002e 	andvc	r0, r0, #46	; 0x2e
     e04:	745f7761 	ldrbvc	r7, [pc], #1889	; e0c <DISABLE_IRQ+0xd8c>
     e08:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     e0c:	00010068 	andeq	r0, r1, r8, rrx
     e10:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     e14:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
     e18:	616e7265 	cmnvs	lr, r5, ror #4
     e1c:	79745f6c 	ldmdbvc	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     e20:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     e24:	00000100 	andeq	r0, r0, r0, lsl #2
     e28:	5f776172 	svcpl	0x00776172
     e2c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
     e30:	0100682e 	tsteq	r0, lr, lsr #16
     e34:	61720000 	cmnvs	r2, r0
     e38:	626f5f77 	rsbvs	r5, pc, #476	; 0x1dc
     e3c:	00682e6a 	rsbeq	r2, r8, sl, ror #28
     e40:	72000001 	andvc	r0, r0, #1
     e44:	6d5f7761 	ldclvs	7, cr7, [pc, #-388]	; 0xfffffe7c
     e48:	78657475 	stmdavc	r5!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
     e4c:	0100682e 	tsteq	r0, lr, lsr #16
     e50:	61720000 	cmnvs	r2, r0
     e54:	75715f77 	ldrbvc	r5, [r1, #-3959]!	; 0xf77
     e58:	5f657565 	svcpl	0x00657565
     e5c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
     e60:	0100682e 	tsteq	r0, lr, lsr #16
     e64:	61720000 	cmnvs	r2, r0
     e68:	65735f77 	ldrbvs	r5, [r3, #-3959]!	; 0xf77
     e6c:	00682e6d 	rsbeq	r2, r8, sp, ror #28
     e70:	72000001 	andvc	r0, r0, #1
     e74:	745f7761 	ldrbvc	r7, [pc], #1889	; e7c <DISABLE_IRQ+0xdfc>
     e78:	5f6b7361 	svcpl	0x006b7361
     e7c:	00682e30 	rsbeq	r2, r8, r0, lsr lr
     e80:	72000001 	andvc	r0, r0, #1
     e84:	6f5f7761 	svcvs	0x005f7761
     e88:	632e6a62 	teqvs	lr, #401408	; 0x62000
     e8c:	00000000 	andeq	r0, r0, r0
     e90:	00030600 	andeq	r0, r3, r0, lsl #12
     e94:	b5000200 	strlt	r0, [r0, #-512]	; 0x200
     e98:	02000000 	andeq	r0, r0, #0
     e9c:	0d0efb01 	vstreq	d15, [lr, #-4]
     ea0:	01010100 	tsteq	r1, r0, lsl #2
     ea4:	00000001 	andeq	r0, r0, r1
     ea8:	01000001 	tsteq	r0, r1
     eac:	7200002e 	andvc	r0, r0, #46	; 0x2e
     eb0:	705f7761 	subsvc	r7, pc, r1, ror #14
     eb4:	2e646e65 	cdpcs	14, 6, cr6, cr4, cr5, {3}
     eb8:	00000063 	andeq	r0, r0, r3, rrx
     ebc:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     ec0:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
     ec4:	00682e74 	rsbeq	r2, r8, r4, ror lr
     ec8:	72000001 	andvc	r0, r0, #1
     ecc:	745f7761 	ldrbvc	r7, [pc], #1889	; ed4 <DISABLE_IRQ+0xe54>
     ed0:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     ed4:	00010068 	andeq	r0, r1, r8, rrx
     ed8:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     edc:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
     ee0:	616e7265 	cmnvs	lr, r5, ror #4
     ee4:	79745f6c 	ldmdbvc	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     ee8:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     eec:	00000100 	andeq	r0, r0, r0, lsl #2
     ef0:	5f776172 	svcpl	0x00776172
     ef4:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0x973
     ef8:	682e6d65 	stmdavs	lr!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}
     efc:	00000100 	andeq	r0, r0, r0, lsl #2
     f00:	5f776172 	svcpl	0x00776172
     f04:	2e6a626f 	cdpcs	2, 6, cr6, cr10, cr15, {3}
     f08:	00010068 	andeq	r0, r1, r8, rrx
     f0c:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     f10:	74756d5f 	ldrbtvc	r6, [r5], #-3423	; 0xd5f
     f14:	682e7865 	stmdavs	lr!, {r0, r2, r5, r6, fp, ip, sp, lr}
     f18:	00000100 	andeq	r0, r0, r0, lsl #2
     f1c:	5f776172 	svcpl	0x00776172
     f20:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
     f24:	69735f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     f28:	682e657a 	stmdavs	lr!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}
     f2c:	00000100 	andeq	r0, r0, r0, lsl #2
     f30:	5f776172 	svcpl	0x00776172
     f34:	2e6d6573 	mcrcs	5, 3, r6, cr13, cr3, {3}
     f38:	00010068 	andeq	r0, r1, r8, rrx
     f3c:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     f40:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
     f44:	616e7265 	cmnvs	lr, r5, ror #4
     f48:	00682e6c 	rsbeq	r2, r8, ip, ror #28
     f4c:	00000001 	andeq	r0, r0, r1
     f50:	7c020500 	cfstr32vc	mvfx0, [r2], {0}
     f54:	03300022 	teqeq	r0, #34	; 0x22
     f58:	8615011f 	undefined instruction 0x8615011f
     f5c:	0b030204 	bleq	c1774 <DISABLE_IRQ+0xc16f4>
     f60:	0301042e 	movweq	r0, #5166	; 0x142e
     f64:	2d362e6d 	ldccs	14, cr2, [r6, #-436]!	; 0xfffffe4c
     f68:	0c030204 	sfmeq	f0, 4, [r3], {4}	; (stceq 2, cr0, [r3], {4})
     f6c:	042f2d2e 	strteq	r2, [pc], #3374	; f74 <DISABLE_IRQ+0xef4>
     f70:	2e740301 	cdpcs	3, 7, cr0, cr4, cr1, {0}
     f74:	2e330332 	mrccs	3, 1, r0, cr3, cr2, {1}
     f78:	7703302f 	strvc	r3, [r3, -pc, lsr #32]
     f7c:	03020466 	movweq	r0, #9318	; 0x2466
     f80:	302f2e6f 	eorcc	r2, pc, pc, ror #28
     f84:	01042d2f 	tsteq	r4, pc, lsr #26
     f88:	2d2e0a03 	vstmdbcs	lr!, {s0-s2}
     f8c:	820d0333 	andhi	r0, sp, #-872415232	; 0xcc000000
     f90:	3050314b 	subscc	r3, r0, fp, asr #2
     f94:	03020430 	movweq	r0, #9264	; 0x2430
     f98:	2d4b2e54 	stclcs	14, cr2, [fp, #-336]	; 0xfffffeb0
     f9c:	2d312c31 	ldccs	12, cr2, [r1, #-196]!	; 0xffffff3c
     fa0:	0a030104 	beq	c13b8 <DISABLE_IRQ+0xc1338>
     fa4:	03332d2e 	teqeq	r3, #2944	; 0xb80
     fa8:	334c9e1f 	movtcc	r9, #52767	; 0xce1f
     fac:	5c03304f 	stcpl	0, cr3, [r3], {79}	; 0x4f
     fb0:	030204ba 	movweq	r0, #9402	; 0x24ba
     fb4:	302f6666 	eorcc	r6, pc, r6, ror #12
     fb8:	01042d2f 	tsteq	r4, pc, lsr #26
     fbc:	2d2e0a03 	vstmdbcs	lr!, {s0-s2}
     fc0:	9e0d0333 	mcrls	3, 0, r0, cr13, cr3, {1}
     fc4:	2e27034b 	cdpcs	3, 2, cr0, cr7, cr11, {2}
     fc8:	ba030204 	blt	c17e0 <DISABLE_IRQ+0xc1760>
     fcc:	01044a7f 	tsteq	r4, pc, ror sl
     fd0:	044a2c03 	strbeq	r2, [sl], #-3075	; 0xc03
     fd4:	2e540302 	cdpcs	3, 5, cr0, cr4, cr2, {0}
     fd8:	2d4d2c31 	stclcs	12, cr2, [sp, #-196]	; 0xffffff3c
     fdc:	0a030104 	beq	c13f4 <DISABLE_IRQ+0xc1374>
     fe0:	03332d2e 	teqeq	r3, #2944	; 0xb80
     fe4:	034c9e1f 	movteq	r9, #52767	; 0xce1f
     fe8:	0204663f 	andeq	r6, r4, #66060288	; 0x3f00000
     fec:	017f9a03 	cmneq	pc, r3, lsl #20
     ff0:	e6030104 	str	r0, [r3], -r4, lsl #2
     ff4:	04304a00 	ldrteq	r4, [r0], #-2560	; 0xa00
     ff8:	7f980302 	svcvc	0x00980302
     ffc:	74032f2e 	strvc	r2, [r3], #-3886	; 0xf2e
    1000:	2e0c034a 	cdpcs	3, 0, cr0, cr12, cr10, {2}
    1004:	2f2e7403 	svccs	0x002e7403
    1008:	042f3149 	strteq	r3, [pc], #329	; 1010 <DISABLE_IRQ+0xf90>
    100c:	00f40301 	rscseq	r0, r4, r1, lsl #6
    1010:	0316502e 	tsteq	r6, #46	; 0x2e
    1014:	7703660b 	strvc	r6, [r3, -fp, lsl #12]
    1018:	2e09032e 	cdpcs	3, 0, cr0, cr9, cr14, {1}
    101c:	034a7703 	movteq	r7, #42755	; 0xa703
    1020:	77032e09 	strvc	r2, [r3, -r9, lsl #28]
    1024:	2e09034a 	cdpcs	3, 0, cr0, cr9, cr10, {2}
    1028:	9e01c603 	cfmadd32ls	mvax0, mvfx12, mvfx1, mvfx3
    102c:	03020414 	movweq	r0, #9236	; 0x2414
    1030:	67827db6 	undefined instruction 0x67827db6
    1034:	64030104 	strvs	r0, [r3], #-260	; 0x104
    1038:	0302042e 	movweq	r0, #9262	; 0x242e
    103c:	01042e1c 	tsteq	r4, ip, lsl lr
    1040:	2b2e6403 	blcs	b9a054 <MEM_SIZE+0x39a054>
    1044:	02049f31 	andeq	r9, r4, #196	; 0xc4
    1048:	04660f03 	strbteq	r0, [r6], #-3843	; 0xf03
    104c:	2e760301 	cdpcs	3, 7, cr0, cr6, cr1, {0}
    1050:	0a030204 	beq	c1868 <DISABLE_IRQ+0xc17e8>
    1054:	312c312e 	teqcc	ip, lr, lsr #2
    1058:	0301042d 	movweq	r0, #5165	; 0x142d
    105c:	b7034a6d 	strlt	r4, [r3, -sp, ror #20]
    1060:	2d2f4a02 	vstmdbcs	pc!, {s8-s9}
    1064:	0302042f 	movweq	r0, #9263	; 0x242f
    1068:	20087de3 	andcs	r7, r8, r3, ror #27
    106c:	0301044b 	movweq	r0, #5195	; 0x144b
    1070:	034a02ae 	movteq	r0, #41646	; 0xa2ae
    1074:	2b4e4a0b 	blcs	13938a8 <MEM_SIZE+0xb938a8>
    1078:	0204324d 	andeq	r3, r4, #-805306364	; 0xd0000004
    107c:	4a7dbe03 	bmi	1f70890 <MEM_SIZE+0x1770890>
    1080:	a4030104 	strge	r0, [r3], #-260	; 0x104
    1084:	02042e02 	andeq	r2, r4, #32
    1088:	2e7ddc03 	cdpcs	12, 7, cr13, cr13, cr3, {0}
    108c:	0301042f 	movweq	r0, #5167	; 0x142f
    1090:	042e02a3 	strteq	r0, [lr], #-675	; 0x2a3
    1094:	7ddd0302 	ldclvc	3, cr0, [sp, #8]
    1098:	0301042e 	movweq	r0, #5166	; 0x142e
    109c:	2f2e02a3 	svccs	0x002e02a3
    10a0:	7ef2034c 	cdpvc	3, 15, cr0, cr2, cr12, {2}
    10a4:	312b314a 	teqcc	fp, sl, asr #2
    10a8:	e4030204 	str	r0, [r3], #-516	; 0x204
    10ac:	4b20087e 	blmi	8032ac <MEM_SIZE+0x32ac>
    10b0:	b0030104 	andlt	r0, r3, r4, lsl #2
    10b4:	0e034a01 	vmlaeq.f32	s8, s6, s2
    10b8:	2b314c4a 	blcs	c541e8 <MEM_SIZE+0x4541e8>
    10bc:	03020436 	movweq	r0, #9270	; 0x2436
    10c0:	044a7eb7 	strbeq	r7, [sl], #-3767	; 0xeb7
    10c4:	01a50301 	undefined instruction 0x01a50301
    10c8:	0302042e 	movweq	r0, #9262	; 0x242e
    10cc:	2f2e7edb 	svccs	0x002e7edb
    10d0:	a4030104 	strge	r0, [r3], #-260	; 0x104
    10d4:	02042e01 	andeq	r2, r4, #16
    10d8:	2e7edc03 	cdpcs	12, 7, cr13, cr14, cr3, {0}
    10dc:	a4030104 	strge	r0, [r3], #-260	; 0x104
    10e0:	4c302e01 	ldcmi	14, cr2, [r0], #-4
    10e4:	154a3703 	strbne	r3, [sl, #-1795]	; 0x703
    10e8:	0310332d 	tsteq	r0, #-1275068416	; 0xb4000000
    10ec:	31142e72 	tstcc	r4, r2, ror lr
    10f0:	2e750311 	mrccs	3, 3, r0, cr5, cr1, {0}
    10f4:	ee031114 	mcr	1, 0, r1, cr3, cr4, {0}
    10f8:	02042e7e 	andeq	r2, r4, #2016	; 0x7e0
    10fc:	042e4103 	strteq	r4, [lr], #-259	; 0x103
    1100:	00c20301 	sbceq	r0, r2, r1, lsl #6
    1104:	0302042e 	movweq	r0, #9262	; 0x242e
    1108:	042e7fbe 	strteq	r7, [lr], #-4030	; 0xfbe
    110c:	2e3f0301 	cdpcs	3, 3, cr0, cr15, cr1, {0}
    1110:	41030204 	tstmi	r3, r4, lsl #4
    1114:	0301042e 	movweq	r0, #5166	; 0x142e
    1118:	042e00c7 	strteq	r0, [lr], #-199	; 0xc7
    111c:	7fba0302 	svcvc	0x00ba0302
    1120:	0301044a 	movweq	r0, #5194	; 0x144a
    1124:	042e00c6 	strteq	r0, [lr], #-198	; 0xc6
    1128:	7fba0302 	svcvc	0x00ba0302
    112c:	0301044a 	movweq	r0, #5194	; 0x144a
    1130:	032e00c6 	teqeq	lr, #198	; 0xc6
    1134:	93032e1a 	movwls	r2, #15898	; 0x3e1a
    1138:	322f4a7f 	eorcc	r4, pc, #520192	; 0x7f000
    113c:	9e00d703 	cdpls	7, 0, cr13, cr0, cr3, {0}
    1140:	032f696b 	teqeq	pc, #1753088	; 0x1ac000
    1144:	03660192 	cmneq	r6, #-2147483612	; 0x80000024
    1148:	7403010c 	strvc	r0, [r3], #-268	; 0x10c
    114c:	2e0f032e 	cdpcs	3, 0, cr0, cr15, cr14, {1}
    1150:	032e7103 	teqeq	lr, #-1073741824	; 0xc0000000
    1154:	2b344a09 	blcs	d13980 <MEM_SIZE+0x513980>
    1158:	682e0a03 	stmdavs	lr!, {r0, r1, r9, fp}
    115c:	db03684f 	blle	db2a0 <DISABLE_IRQ+0xdb220>
    1160:	312b667d 	teqcc	fp, sp, ror r6
    1164:	030204bb 	movweq	r0, #9403	; 0x24bb
    1168:	0104660f 	tsteq	r4, pc, lsl #12
    116c:	042e7603 	strteq	r7, [lr], #-1539	; 0x603
    1170:	2e0a0302 	cdpcs	3, 0, cr0, cr10, cr2, {0}
    1174:	2d312c31 	ldccs	12, cr2, [r1, #-196]!	; 0xffffff3c
    1178:	a0030104 	andge	r0, r3, r4, lsl #2
    117c:	cd032e02 	stcgt	14, cr2, [r3, #-8]
    1180:	0204667d 	andeq	r6, r4, #131072000	; 0x7d00000
    1184:	044a1003 	strbeq	r1, [sl], #-3
    1188:	02970301 	addseq	r0, r7, #67108864	; 0x4000000
    118c:	0302042e 	movweq	r0, #9262	; 0x242e
    1190:	2d2e7dea 	stccs	13, cr7, [lr, #-936]!	; 0xfffffc58
    1194:	06022f31 	undefined instruction 0x06022f31
    1198:	5c010100 	stfpls	f0, [r1], {0}
    119c:	02000002 	andeq	r0, r0, #2
    11a0:	0000e000 	andeq	lr, r0, r0
    11a4:	fb010200 	blx	419ae <DISABLE_IRQ+0x4192e>
    11a8:	01000d0e 	tsteq	r0, lr, lsl #26
    11ac:	00010101 	andeq	r0, r1, r1, lsl #2
    11b0:	00010000 	andeq	r0, r1, r0
    11b4:	002e0100 	eoreq	r0, lr, r0, lsl #2
    11b8:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    11bc:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
    11c0:	625f6575 	subsvs	r6, pc, #490733568	; 0x1d400000
    11c4:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    11c8:	00632e72 	rsbeq	r2, r3, r2, ror lr
    11cc:	72000000 	andvc	r0, r0, #0
    11d0:	6c5f7761 	mrrcvs	7, 6, r7, pc, cr1
    11d4:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
    11d8:	00010068 	andeq	r0, r1, r8, rrx
    11dc:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    11e0:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    11e4:	00682e65 	rsbeq	r2, r8, r5, ror #28
    11e8:	72000001 	andvc	r0, r0, #1
    11ec:	635f7761 	cmpvs	pc, #25427968	; 0x1840000
    11f0:	682e7570 	stmdavs	lr!, {r4, r5, r6, r8, sl, ip, sp, lr}
    11f4:	00000100 	andeq	r0, r0, r0, lsl #2
    11f8:	5f776172 	svcpl	0x00776172
    11fc:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    1200:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    1204:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    1208:	00682e65 	rsbeq	r2, r8, r5, ror #28
    120c:	72000001 	andvc	r0, r0, #1
    1210:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
    1214:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    1218:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    121c:	72000001 	andvc	r0, r0, #1
    1220:	6f5f7761 	svcvs	0x005f7761
    1224:	682e6a62 	stmdavs	lr!, {r1, r5, r6, r9, fp, sp, lr}
    1228:	00000100 	andeq	r0, r0, r0, lsl #2
    122c:	5f776172 	svcpl	0x00776172
    1230:	6574756d 	ldrbvs	r7, [r4, #-1389]!	; 0x56d
    1234:	00682e78 	rsbeq	r2, r8, r8, ror lr
    1238:	72000001 	andvc	r0, r0, #1
    123c:	715f7761 	cmpvc	pc, r1, ror #14
    1240:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1244:	7a69735f 	bvc	1a5dfc8 <MEM_SIZE+0x125dfc8>
    1248:	00682e65 	rsbeq	r2, r8, r5, ror #28
    124c:	72000001 	andvc	r0, r0, #1
    1250:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
    1254:	682e6d65 	stmdavs	lr!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}
    1258:	00000100 	andeq	r0, r0, r0, lsl #2
    125c:	5f776172 	svcpl	0x00776172
    1260:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    1264:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xf65
    1268:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    126c:	0100682e 	tsteq	r0, lr, lsr #16
    1270:	61720000 	cmnvs	r2, r0
    1274:	6e695f77 	mcrvs	15, 3, r5, cr9, cr7, {3}
    1278:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    127c:	682e6c61 	stmdavs	lr!, {r0, r5, r6, sl, fp, sp, lr}
    1280:	00000100 	andeq	r0, r0, r0, lsl #2
    1284:	02050000 	andeq	r0, r5, #0
    1288:	300027a8 	andcc	r2, r0, r8, lsr #15
    128c:	0104cb03 	tsteq	r4, r3, lsl #22
    1290:	334f2933 	movtcc	r2, #63795	; 0xf933
    1294:	6830514f 	ldmdavs	r0!, {r0, r1, r2, r3, r6, r8, ip, lr}
    1298:	484a0c03 	stmdami	sl, {r0, r1, sl, fp}^
    129c:	4c4a7a03 	mcrrmi	10, 0, r7, sl, cr3
    12a0:	d9034c4c 	stmdble	r3, {r2, r3, r6, sl, fp, lr}
    12a4:	03342e7e 	teqeq	r4, #2016	; 0x7e0
    12a8:	88342e7a 	ldmdahi	r4!, {r1, r3, r4, r5, r6, r9, sl, fp, sp}
    12ac:	0368bc6d 	cmneq	r8, #27904	; 0x6d00
    12b0:	4620080c 	strtmi	r0, [r0], -ip, lsl #16
    12b4:	302a322a 	eorcc	r3, sl, sl, lsr #4
    12b8:	7803312d 	stmdavc	r3, {r0, r2, r3, r5, r8, ip, sp}
    12bc:	1d036ef2 	stcne	14, cr6, [r3, #-968]	; 0xfffffc38
    12c0:	036b359e 	cmneq	fp, #662700032	; 0x27800000
    12c4:	69039e1f 	stmdbvs	r3, {r0, r1, r2, r3, r4, r9, sl, fp, ip, pc}
    12c8:	0468bc4a 	strbteq	fp, [r8], #-3146	; 0xc4a
    12cc:	7c9e0302 	ldcvc	3, cr0, [lr], {2}
    12d0:	01049008 	tsteq	r4, r8
    12d4:	2e03e803 	cdpcs	8, 0, cr14, cr3, cr3, {0}
    12d8:	02044b31 	andeq	r4, r4, #50176	; 0xc400
    12dc:	4a7c9403 	bmi	1f262f0 <MEM_SIZE+0x17262f0>
    12e0:	eb030104 	bl	c16f8 <DISABLE_IRQ+0xc1678>
    12e4:	084e2e03 	stmdaeq	lr, {r0, r1, r9, sl, fp, sp}^
    12e8:	032a4c22 	teqeq	sl, #8704	; 0x2200
    12ec:	52827ebc 	addpl	r7, r2, #3008	; 0xbc0
    12f0:	362e7803 	strtcc	r7, [lr], -r3, lsl #16
    12f4:	362e7803 	strtcc	r7, [lr], -r3, lsl #16
    12f8:	522e7803 	eorpl	r7, lr, #196608	; 0x30000
    12fc:	bc6d6c50 	stcllt	12, cr6, [sp], #-320	; 0xfffffec0
    1300:	08290368 	stmdaeq	r9!, {r3, r5, r6, r8, r9}
    1304:	7d820320 	stcvc	3, cr0, [r2, #128]	; 0x80
    1308:	02d90366 	sbcseq	r0, r9, #-1744830463	; 0x98000001
    130c:	7e9b032e 	cdpvc	3, 9, cr0, cr11, cr14, {1}
    1310:	2b352f66 	blcs	d4d0b0 <MEM_SIZE+0x54d0b0>
    1314:	036e4633 	cmneq	lr, #53477376	; 0x3300000
    1318:	03362e78 	teqeq	r6, #1920	; 0x780
    131c:	50362e78 	eorspl	r2, r6, r8, ror lr
    1320:	2f2d2f83 	svccs	0x002d2f83
    1324:	01cd034e 	biceq	r0, sp, lr, asr #6
    1328:	7803302e 	stmdavc	r3, {r1, r2, r3, r5, ip, sp}
    132c:	0f035808 	svceq	0x00035808
    1330:	9d034c66 	stcls	12, cr4, [r3, #-408]	; 0xfffffe68
    1334:	a03c087e 	eorsge	r0, ip, lr, ror r8
    1338:	d8032f81 	stmdale	r3, {r0, r7, r8, r9, sl, fp, sp}
    133c:	0d034a01 	vstreq	s8, [r3, #-4]
    1340:	6c380866 	ldcvs	8, cr0, [r8], #-408	; 0xfffffe68
    1344:	2d2f2d2f 	stccs	13, cr2, [pc, #-188]!	; 0xffffff44
    1348:	30f4302f 	rscscc	r3, r4, pc, lsr #32
    134c:	77033069 	strvc	r3, [r3, -r9, rrx]
    1350:	7ea5039e 	mcrvc	3, 5, r0, cr5, cr14, {4}
    1354:	7903359e 	stmdbvc	r3, {r1, r2, r3, r4, r7, r8, sl, ip, sp}
    1358:	a0892e2e 	addge	r2, r9, lr, lsr #28
    135c:	08320368 	ldmdaeq	r2!, {r3, r5, r6, r8, r9}
    1360:	7ea70320 	cdpvc	3, 10, cr0, cr7, cr0, {1}
    1364:	01ad0366 	undefined instruction 0x01ad0366
    1368:	f4f4682e 	undefined instruction 0xf4f4682e
    136c:	042e7403 	strteq	r7, [lr], #-1027	; 0x403
    1370:	7eec0302 	cdpvc	3, 14, cr0, cr12, cr2, {0}
    1374:	03010466 	movweq	r0, #5222	; 0x1466
    1378:	032e0198 	teqeq	lr, #38	; 0x26
    137c:	83304a1f 	teqhi	r0, #126976	; 0x1f000
    1380:	f4f44c30 	undefined instruction 0xf4f44c30
    1384:	2e59034b 	cdpcs	3, 5, cr0, cr9, cr11, {2}
    1388:	034a2203 	movteq	r2, #41475	; 0xa203
    138c:	09034a69 	stmdbeq	r3, {r0, r3, r5, r6, r9, fp, lr}
    1390:	f422084a 	vld2.16	{d0-d1}, [r2], sl
    1394:	2e7f9803 	cdpcs	8, 7, cr9, cr15, cr3, {0}
    1398:	4c312f62 	ldcmi	15, cr2, [r1], #-392	; 0xfffffe78
    139c:	4e2f2d30 	mcrmi	13, 1, r2, cr15, cr0, {1}
    13a0:	2c304ba5 	ldccs	11, cr4, [r0], #-660	; 0xfffffd6c
    13a4:	ce034e30 	mcrgt	14, 0, r4, cr3, cr0, {1}
    13a8:	a5034a00 	strge	r4, [r3, #-2560]	; 0xa00
    13ac:	65a04a7f 	strvs	r4, [r0, #2687]!	; 0xa7f
    13b0:	018d032f 	orreq	r0, sp, pc, lsr #6
    13b4:	2e293382 	cdpcs	3, 2, cr3, cr9, cr2, {4}
    13b8:	036c4f4f 	cmneq	ip, #316	; 0x13c
    13bc:	68f98209 	ldmvs	r9!, {r0, r3, r9, pc}^
    13c0:	03dd2948 	bicseq	r2, sp, #1179648	; 0x120000
    13c4:	189e7e8a 	ldmne	lr, {r1, r3, r7, r9, sl, fp, ip, sp, lr}
    13c8:	342e7a03 	strtcc	r7, [lr], #-2563	; 0xa03
    13cc:	6d306d4f 	ldcvs	13, cr6, [r0, #-316]!	; 0xfffffec4
    13d0:	03661803 	cmneq	r6, #196608	; 0x30000
    13d4:	49334a75 	ldmdbmi	r3!, {r0, r2, r4, r5, r6, r9, fp, lr}
    13d8:	302e7903 	eorcc	r7, lr, r3, lsl #18
    13dc:	03362a32 	teqeq	r6, #204800	; 0x32000
    13e0:	03302e75 	teqeq	r0, #1872	; 0x750
    13e4:	02042e09 	andeq	r2, r4, #144	; 0x90
    13e8:	2e7fb703 	cdpcs	7, 7, cr11, cr15, cr3, {0}
    13ec:	0301042f 	movweq	r0, #5167	; 0x142f
    13f0:	2f2e00c1 	svccs	0x002e00c1
    13f4:	04026834 	streq	r6, [r2], #-2100	; 0x834
    13f8:	92010100 	andls	r0, r1, #0
    13fc:	02000002 	andeq	r0, r0, #2
    1400:	0000d200 	andeq	sp, r0, r0, lsl #4
    1404:	fb010200 	blx	41c0e <DISABLE_IRQ+0x41b8e>
    1408:	01000d0e 	tsteq	r0, lr, lsl #26
    140c:	00010101 	andeq	r0, r1, r1, lsl #2
    1410:	00010000 	andeq	r0, r1, r0
    1414:	002e0100 	eoreq	r0, lr, r0, lsl #2
    1418:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    141c:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
    1420:	632e6575 	teqvs	lr, #490733568	; 0x1d400000
    1424:	00000000 	andeq	r0, r0, r0
    1428:	5f776172 	svcpl	0x00776172
    142c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
    1430:	0100682e 	tsteq	r0, lr, lsr #16
    1434:	61720000 	cmnvs	r2, r0
    1438:	79745f77 	ldmdbvc	r4!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    143c:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    1440:	00000100 	andeq	r0, r0, r0, lsl #2
    1444:	5f776172 	svcpl	0x00776172
    1448:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    144c:	00010068 	andeq	r0, r1, r8, rrx
    1450:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1454:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
    1458:	616e7265 	cmnvs	lr, r5, ror #4
    145c:	79745f6c 	ldmdbvc	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1460:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    1464:	00000100 	andeq	r0, r0, r0, lsl #2
    1468:	5f776172 	svcpl	0x00776172
    146c:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0x973
    1470:	682e6d65 	stmdavs	lr!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}
    1474:	00000100 	andeq	r0, r0, r0, lsl #2
    1478:	5f776172 	svcpl	0x00776172
    147c:	2e6a626f 	cdpcs	2, 6, cr6, cr10, cr15, {3}
    1480:	00010068 	andeq	r0, r1, r8, rrx
    1484:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1488:	74756d5f 	ldrbtvc	r6, [r5], #-3423	; 0xd5f
    148c:	682e7865 	stmdavs	lr!, {r0, r2, r5, r6, fp, ip, sp, lr}
    1490:	00000100 	andeq	r0, r0, r0, lsl #2
    1494:	5f776172 	svcpl	0x00776172
    1498:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    149c:	69735f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    14a0:	682e657a 	stmdavs	lr!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}
    14a4:	00000100 	andeq	r0, r0, r0, lsl #2
    14a8:	5f776172 	svcpl	0x00776172
    14ac:	2e6d6573 	mcrcs	5, 3, r6, cr13, cr3, {3}
    14b0:	00010068 	andeq	r0, r1, r8, rrx
    14b4:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    14b8:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
    14bc:	682e6575 	stmdavs	lr!, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    14c0:	00000100 	andeq	r0, r0, r0, lsl #2
    14c4:	5f776172 	svcpl	0x00776172
    14c8:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    14cc:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    14d0:	0100682e 	tsteq	r0, lr, lsr #16
    14d4:	00000000 	andeq	r0, r0, r0
    14d8:	2fa00205 	svccs	0x00a00205
    14dc:	b2033000 	andlt	r3, r3, #0
    14e0:	03350105 	teqeq	r5, #1073741825	; 0x40000001
    14e4:	50352e79 	eorspl	r2, r5, r9, ror lr
    14e8:	30660903 	rsbcc	r0, r6, r3, lsl #18
    14ec:	4a130368 	bmi	4c2294 <DISABLE_IRQ+0x4c2214>
    14f0:	034a7a03 	movteq	r7, #43523	; 0xaa03
    14f4:	2f2f2e79 	svccs	0x002f2e79
    14f8:	2f2f2f2f 	svccs	0x002f2f2f
    14fc:	2e79032f 	cdpcs	3, 7, cr0, cr9, cr15, {1}
    1500:	2f2f2f2f 	svccs	0x002f2f2f
    1504:	4c312f2f 	ldcmi	15, cr2, [r1], #-188	; 0xffffff44
    1508:	2e7da803 	cdpcs	8, 7, cr10, cr13, cr3, {0}
    150c:	2e790335 	mrccs	3, 3, r0, cr9, cr5, {1}
    1510:	14034f35 	strne	r4, [r3], #-3893	; 0xf35
    1514:	4a74039e 	bmi	1d02394 <MEM_SIZE+0x1502394>
    1518:	950868bc 	strls	r6, [r8, #-2236]	; 0x8bc
    151c:	ca032f2d 	bgt	cd1d8 <DISABLE_IRQ+0xcd158>
    1520:	35ac0801 	strcc	r0, [ip, #2049]!	; 0x801
    1524:	9e21036b 	cdpls	3, 2, cr0, cr1, cr11, {3}
    1528:	bc4a6703 	mcrrlt	7, 0, r6, sl, cr3
    152c:	03020468 	movweq	r0, #9320	; 0x2468
    1530:	90087bb6 	undefined instruction 0x90087bb6
    1534:	d0030104 	andle	r0, r3, r4, lsl #2
    1538:	4b312e04 	blmi	c4cd50 <MEM_SIZE+0x44cd50>
    153c:	ac030204 	sfmge	f0, 4, [r3], {4}	; (stcge 2, cr0, [r3], {4})
    1540:	01044a7b 	tsteq	r4, fp, ror sl
    1544:	2e04d303 	cdpcs	3, 0, cr13, cr4, cr3, {0}
    1548:	8422084e 	strthi	r0, [r2], #-2126	; 0x84e
    154c:	2e7a034c 	cdpcs	3, 7, cr0, cr10, cr12, {2}
    1550:	9e7f9f03 	cdpls	15, 7, cr9, cr15, cr3, {0}
    1554:	1a036b34 	bne	dc22c <DISABLE_IRQ+0xdc1ac>
    1558:	4a6e039e 	bmi	1b823d8 <MEM_SIZE+0x13823d8>
    155c:	0a0368bc 	beq	db854 <DISABLE_IRQ+0xdb7d4>
    1560:	33299008 	teqcc	r9, #8
    1564:	332b302a 	teqcc	fp, #42	; 0x2a
    1568:	032b9fbc 	teqeq	fp, #752	; 0x2f0
    156c:	039e7ef6 	orrseq	r7, lr, #3936	; 0xf60
    1570:	77032e09 	strvc	r2, [r3, -r9, lsl #28]
    1574:	2e09032e 	cdpcs	3, 0, cr0, cr9, cr14, {1}
    1578:	032e7703 	teqeq	lr, #786432	; 0xc0000
    157c:	77032e09 	strvc	r2, [r3, -r9, lsl #28]
    1580:	2e09032e 	cdpcs	3, 0, cr0, cr9, cr14, {1}
    1584:	bc6d6c50 	stcllt	12, cr6, [sp], #-320	; 0xfffffec0
    1588:	08310368 	ldmdaeq	r1!, {r3, r5, r6, r8, r9}
    158c:	4a540320 	bmi	1502214 <MEM_SIZE+0xd02214>
    1590:	032c3068 	teqeq	ip, #104	; 0x68
    1594:	79032e09 	stmdbvc	r3, {r0, r3, r9, sl, fp, sp}
    1598:	31322c2e 	teqcc	r2, lr, lsr #24
    159c:	302c352b 	eorcc	r3, ip, fp, lsr #10
    15a0:	6a03d8f4 	bvs	f7978 <DISABLE_IRQ+0xf78f8>
    15a4:	661b032e 	ldrvs	r0, [fp], -lr, lsr #6
    15a8:	087a0351 	ldmdaeq	sl!, {r0, r4, r6, r8, r9}^
    15ac:	75032fac 	strvc	r2, [r3, #-4012]	; 0xfac
    15b0:	0b033c08 	bleq	d05d8 <DISABLE_IRQ+0xd0558>
    15b4:	a0686b4a 	rsbge	r6, r8, sl, asr #22
    15b8:	4b3084f4 	blmi	c22990 <MEM_SIZE+0x422990>
    15bc:	2e770368 	cdpcs	3, 7, cr0, cr7, cr8, {3}
    15c0:	9e7cd503 	cdpls	5, 7, cr13, cr12, cr3, {0}
    15c4:	a0872933 	addge	r2, r7, r3, lsr r9
    15c8:	00da0368 	sbcseq	r0, sl, r8, ror #6
    15cc:	ac032008 	stcge	0, cr2, [r3], {8}
    15d0:	f4844a7f 	vst3.32	undefined instruction 0xf4844a7f
    15d4:	2e7403d8 	mrccs	3, 3, r0, cr4, cr8, {6}
    15d8:	4f030204 	svcmi	0x00030204
    15dc:	03010466 	movweq	r0, #5222	; 0x1466
    15e0:	032e00c2 	teqeq	lr, #194	; 0xc2
    15e4:	686a4a30 	stmdavs	sl!, {r4, r5, r9, fp, lr}^
    15e8:	88030204 	stmdahi	r3, {r2, r9}
    15ec:	0104ba7f 	tsteq	r4, pc, ror sl
    15f0:	2e00f403 	cdpcs	4, 0, cr15, cr0, cr3, {0}
    15f4:	084a1303 	stmdaeq	sl, {r0, r1, r8, r9, ip}^
    15f8:	af034b22 	svcge	0x00034b22
    15fc:	c8032e7f 	stmdagt	r3, {r0, r1, r2, r3, r4, r5, r6, r9, sl, fp, sp}
    1600:	f6684a00 	undefined instruction 0xf6684a00
    1604:	2b4a4003 	blcs	1291618 <MEM_SIZE+0xa91618>
    1608:	03313031 	teqeq	r1, #49	; 0x31
    160c:	03362e78 	teqeq	r6, #1920	; 0x780
    1610:	31672e0f 	cmncc	r7, pc, lsl #28
    1614:	332d322b 	teqcc	sp, #-1342177278	; 0xb0000002
    1618:	694c2308 	stmdbvs	ip, {r3, r8, r9, sp}^
    161c:	2e7603d8 	mrccs	3, 3, r0, cr6, cr8, {6}
    1620:	304a6a03 	subcc	r6, sl, r3, lsl #20
    1624:	322c302c 	eorcc	r3, ip, #44	; 0x2c
    1628:	9e01c503 	cfsh32ls	mvfx12, mvfx1, #3
    162c:	4d2e2b31 	fstmdbxmi	lr!, {d2-d25}	;@ Deprecated
    1630:	66090350 	undefined instruction 0x66090350
    1634:	0348308a 	movteq	r3, #32906	; 0x808a
    1638:	03fa2e7a 	mvnseq	r2, #1952	; 0x7a0
    163c:	31827fac 	orrcc	r7, r2, ip, lsr #31
    1640:	50312e2b 	eorspl	r2, r1, fp, lsr #28
    1644:	f9660903 	undefined instruction 0xf9660903
    1648:	dd294868 	stcle	8, cr4, [r9, #-416]!	; 0xfffffe60
    164c:	9e7fae03 	cdpls	14, 7, cr10, cr15, cr3, {0}
    1650:	322e2a32 	eorcc	r2, lr, #204800	; 0x32000
    1654:	66090350 	undefined instruction 0x66090350
    1658:	294983f9 	stmdbcs	r9, {r0, r3, r4, r5, r6, r7, r8, r9, pc}^
    165c:	7eb903dc 	mrcvc	3, 5, r0, cr9, cr12, {6}
    1660:	3329179e 	teqcc	r9, #41418752	; 0x2780000
    1664:	14036b4f 	strne	r6, [r3], #-2895	; 0xb4f
    1668:	2e770366 	cdpcs	3, 7, cr0, cr7, cr6, {3}
    166c:	2a2e0903 	bcs	b83a80 <MEM_SIZE+0x383a80>
    1670:	2e09032b 	cdpcs	3, 0, cr0, cr9, cr11, {1}
    1674:	2d2e7503 	cfstr32cs	mvfx7, [lr, #-12]!
    1678:	04353031 	ldrteq	r3, [r5], #-49	; 0x31
    167c:	2e550302 	cdpcs	3, 5, cr0, cr5, cr2, {0}
    1680:	0301042f 	movweq	r0, #5167	; 0x142f
    1684:	31302e20 	teqcc	r0, r0, lsr #28
    1688:	69312f2f 	ldmdbvs	r1!, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
    168c:	01000602 	tsteq	r0, r2, lsl #12
    1690:	00029a01 	andeq	r9, r2, r1, lsl #20
    1694:	c8000200 	stmdagt	r0, {r9}
    1698:	02000000 	andeq	r0, r0, #0
    169c:	0d0efb01 	vstreq	d15, [lr, #-4]
    16a0:	01010100 	tsteq	r1, r0, lsl #2
    16a4:	00000001 	andeq	r0, r0, r1
    16a8:	01000001 	tsteq	r0, r1
    16ac:	7200002e 	andvc	r0, r0, #46	; 0x2e
    16b0:	715f7761 	cmpvc	pc, r1, ror #14
    16b4:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    16b8:	7a69735f 	bvc	1a5e43c <MEM_SIZE+0x125e43c>
    16bc:	00632e65 	rsbeq	r2, r3, r5, ror #28
    16c0:	72000000 	andvc	r0, r0, #0
    16c4:	6c5f7761 	mrrcvs	7, 6, r7, pc, cr1
    16c8:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
    16cc:	00010068 	andeq	r0, r1, r8, rrx
    16d0:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    16d4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    16d8:	00682e65 	rsbeq	r2, r8, r5, ror #28
    16dc:	72000001 	andvc	r0, r0, #1
    16e0:	635f7761 	cmpvs	pc, #25427968	; 0x1840000
    16e4:	682e7570 	stmdavs	lr!, {r4, r5, r6, r8, sl, ip, sp, lr}
    16e8:	00000100 	andeq	r0, r0, r0, lsl #2
    16ec:	5f776172 	svcpl	0x00776172
    16f0:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    16f4:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    16f8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    16fc:	00682e65 	rsbeq	r2, r8, r5, ror #28
    1700:	72000001 	andvc	r0, r0, #1
    1704:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
    1708:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    170c:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    1710:	72000001 	andvc	r0, r0, #1
    1714:	6f5f7761 	svcvs	0x005f7761
    1718:	682e6a62 	stmdavs	lr!, {r1, r5, r6, r9, fp, sp, lr}
    171c:	00000100 	andeq	r0, r0, r0, lsl #2
    1720:	5f776172 	svcpl	0x00776172
    1724:	6574756d 	ldrbvs	r7, [r4, #-1389]!	; 0x56d
    1728:	00682e78 	rsbeq	r2, r8, r8, ror lr
    172c:	72000001 	andvc	r0, r0, #1
    1730:	715f7761 	cmpvc	pc, r1, ror #14
    1734:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1738:	7a69735f 	bvc	1a5e4bc <MEM_SIZE+0x125e4bc>
    173c:	00682e65 	rsbeq	r2, r8, r5, ror #28
    1740:	72000001 	andvc	r0, r0, #1
    1744:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
    1748:	682e6d65 	stmdavs	lr!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}
    174c:	00000100 	andeq	r0, r0, r0, lsl #2
    1750:	5f776172 	svcpl	0x00776172
    1754:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    1758:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    175c:	0100682e 	tsteq	r0, lr, lsr #16
    1760:	00000000 	andeq	r0, r0, r0
    1764:	39340205 	ldmdbcc	r4!, {r0, r2, r9}
    1768:	d0033000 	andle	r3, r3, r0
    176c:	03340105 	teqeq	r4, #1073741825	; 0x40000001
    1770:	4f6c2e7a 	svcmi	0x006c2e7a
    1774:	6830524f 	ldmdavs	r0!, {r0, r1, r2, r3, r6, r9, ip, lr}
    1778:	484a0c03 	stmdami	sl, {r0, r1, sl, fp}^
    177c:	834a7a03 	movthi	r7, #43523	; 0xaa03
    1780:	034c4c4b 	movteq	r4, #52299	; 0xcc4b
    1784:	352e7f94 	strcc	r7, [lr, #-3988]!	; 0xf94
    1788:	9e20036b 	cdpls	3, 2, cr0, cr0, cr11, {3}
    178c:	bc4a6803 	mcrrlt	8, 0, r6, sl, cr3
    1790:	03020468 	movweq	r0, #9320	; 0x2468
    1794:	90087b98 	mulls	r8, r8, fp
    1798:	ee030104 	adfs	f0, f3, f4
    179c:	4b302e04 	blmi	c0cfb4 <MEM_SIZE+0x40cfb4>
    17a0:	8f030204 	svchi	0x00030204
    17a4:	01044a7b 	tsteq	r4, fp, ror sl
    17a8:	2e04f003 	cdpcs	0, 0, cr15, cr4, cr3, {0}
    17ac:	8422084e 	strthi	r0, [r2], #-2126	; 0x84e
    17b0:	2e7a034c 	cdpcs	3, 7, cr0, cr10, cr12, {2}
    17b4:	9e7f9503 	cdpls	5, 7, cr9, cr15, cr3, {0}
    17b8:	22036b36 	andcs	r6, r3, #55296	; 0xd800
    17bc:	4a66039e 	bmi	198263c <MEM_SIZE+0x118263c>
    17c0:	940868bc 	strls	r6, [r8], #-2236	; 0x8bc
    17c4:	31294f69 	teqcc	r9, r9, ror #30
    17c8:	32312a32 	eorscc	r2, r1, #204800	; 0x32000
    17cc:	2aa02208 	bcs	fe809ff4 <rEINTPEND+0xa8809f4c>
    17d0:	9e7d9d03 	cdpls	13, 7, cr9, cr13, cr3, {0}
    17d4:	034a0c03 	movteq	r0, #44035	; 0xac03
    17d8:	0c032e74 	stceq	14, cr2, [r3], {116}	; 0x74
    17dc:	2e74032e 	cdpcs	3, 7, cr0, cr4, cr14, {1}
    17e0:	032e0c03 	teqeq	lr, #768	; 0x300
    17e4:	0c032e74 	stceq	14, cr2, [r3], {116}	; 0x74
    17e8:	4f6b504a 	svcmi	0x006b504a
    17ec:	0368bd51 	cmneq	r8, #5184	; 0x1440
    17f0:	200800cb 	andcs	r0, r8, fp, asr #1
    17f4:	03667a03 	cmneq	r6, #12288	; 0x3000
    17f8:	33684a40 	cmncc	r8, #262144	; 0x40000
    17fc:	3129332b 	teqcc	r9, fp, lsr #6
    1800:	2e780332 	mrccs	3, 3, r0, cr8, cr2, {1}
    1804:	34293336 	strtcc	r3, [r9], #-822	; 0x336
    1808:	032e7203 	teqeq	lr, #805306368	; 0x30000000
    180c:	312b2e15 	teqcc	fp, r5, lsl lr
    1810:	302c312b 	eorcc	r3, ip, fp, lsr #2
    1814:	032208bc 	teqeq	r2, #12320768	; 0xbc0000
    1818:	25032e5f 	strcs	r2, [r3, #-3679]	; 0xe5f
    181c:	4a0a0366 	bmi	2825bc <DISABLE_IRQ+0x28253c>
    1820:	c8087903 	stmdagt	r8, {r0, r1, r8, fp, ip, sp, lr}
    1824:	7303312d 	movwvc	r3, #12589	; 0x312d
    1828:	0d033c08 	stceq	12, cr3, [r3, #-32]	; 0xffffffe0
    182c:	a0686b4a 	rsbge	r6, r8, sl, asr #22
    1830:	693084f4 	ldmdbvs	r0!, {r2, r4, r5, r6, r7, sl, pc}
    1834:	7a033430 	bvc	ce8fc <DISABLE_IRQ+0xce87c>
    1838:	7a03352e 	bvc	cecf8 <DISABLE_IRQ+0xcec78>
    183c:	2d2f2d2e 	stccs	13, cr2, [pc, #-184]!	; 0xffffff48
    1840:	4a6f0334 	bmi	1bc2518 <MEM_SIZE+0x13c2518>
    1844:	9e7e9403 	cdpls	4, 7, cr9, cr14, cr3, {0}
    1848:	032e0903 	teqeq	lr, #49152	; 0xc000
    184c:	032e2e77 	teqeq	lr, #1904	; 0x770
    1850:	68a09e09 	stmiavs	r0!, {r0, r3, r9, sl, fp, ip, pc}
    1854:	0800dd03 	stmdaeq	r0, {r0, r1, r8, sl, fp, ip, lr, pc}
    1858:	7faa0320 	svcvc	0x00aa0320
    185c:	f4f48466 	undefined instruction 0xf4f48466
    1860:	042e7303 	strteq	r7, [lr], #-771	; 0x303
    1864:	7fb40302 	svcvc	0x00b40302
    1868:	03010466 	movweq	r0, #5222	; 0x1466
    186c:	032e00de 	teqeq	lr, #222	; 0xde
    1870:	84694a36 	strbthi	r4, [r9], #-2614	; 0xa36
    1874:	e7030204 	str	r0, [r3, -r4, lsl #4]
    1878:	0104d67e 	tsteq	r4, lr, ror r6
    187c:	2e019603 	cfmadd32cs	mvax0, mvfx9, mvfx1, mvfx3
    1880:	084a0f03 	stmdaeq	sl, {r0, r1, r8, r9, sl, fp}^
    1884:	ad034b22 	vstrge	d4, [r3, #-136]	; 0xffffff78
    1888:	cb032e7f 	blgt	cd28c <DISABLE_IRQ+0xcd20c>
    188c:	08844a00 	stmeq	r4, {r9, fp, lr}
    1890:	7fbc0323 	svcvc	0x00bc0323
    1894:	322b324a 	eorcc	r3, fp, #-1610612732	; 0xa0000004
    1898:	032c332a 	teqeq	ip, #-1476395008	; 0xa8000000
    189c:	36312e09 	ldrtcc	r2, [r1], -r9, lsl #28
    18a0:	2f2e7803 	svccs	0x002e7803
    18a4:	2e7a0351 	mrccs	3, 3, r0, cr10, cr1, {2}
    18a8:	2e090335 	mcrcs	3, 0, r0, cr9, cr5, {1}
    18ac:	2a30302c 	bcs	c0d964 <MEM_SIZE+0x40d964>
    18b0:	2c2e0b03 	stccs	11, cr0, [lr], #-12
    18b4:	d8312b30 	ldmdale	r1!, {r4, r5, r8, r9, fp, sp}
    18b8:	c9032af4 	stmdbgt	r3, {r2, r4, r5, r6, r7, r9, fp, sp}
    18bc:	2b318202 	blcs	c620cc <MEM_SIZE+0x4620cc>
    18c0:	0350692e 	cmpeq	r0, #753664	; 0xb8000
    18c4:	67896609 	strvs	r6, [r9, r9, lsl #12]
    18c8:	03667a03 	cmneq	r6, #12288	; 0x3000
    18cc:	3c087fb3 	stccc	15, cr7, [r8], {179}	; 0xb3
    18d0:	4d2e2b31 	fstmdbxmi	lr!, {d2-d25}	;@ Deprecated
    18d4:	660a0350 	undefined instruction 0x660a0350
    18d8:	7a03bbf9 	bvc	f08c4 <DISABLE_IRQ+0xf0844>
    18dc:	7fad0366 	svcvc	0x00ad0366
    18e0:	2b313c08 	blcs	c50908 <MEM_SIZE+0x450908>
    18e4:	03504d2e 	cmpeq	r0, #2944	; 0xb80
    18e8:	bbf9660a 	bllt	ffe5b118 <rEINTPEND+0xa9e5b070>
    18ec:	03667a03 	cmneq	r6, #12288	; 0x3000
    18f0:	3c087d89 	stccc	13, cr7, [r8], {137}	; 0x89
    18f4:	2e78031a 	mrccs	3, 3, r0, cr8, cr10, {0}
    18f8:	036b4f36 	cmneq	fp, #216	; 0xd8
    18fc:	73036617 	movwvc	r6, #13847	; 0x3617
    1900:	2e0d032e 	cdpcs	3, 0, cr0, cr13, cr14, {1}
    1904:	042e7203 	strteq	r7, [lr], #-515	; 0x203
    1908:	2e5f0302 	cdpcs	3, 5, cr0, cr15, cr2, {0}
    190c:	0301042f 	movweq	r0, #5167	; 0x142f
    1910:	2f302e21 	svccs	0x00302e21
    1914:	48352f30 	ldmdami	r5!, {r4, r5, r8, r9, sl, fp, sp}
    1918:	2f2f3030 	svccs	0x002f3030
    191c:	2e790331 	mrccs	3, 3, r0, cr9, cr1, {1}
    1920:	32660b03 	rsbcc	r0, r6, #3072	; 0xc00
    1924:	312f2c2c 	teqcc	pc, ip, lsr #24
    1928:	0602a230 	undefined instruction 0x0602a230
    192c:	47010100 	strmi	r0, [r1, -r0, lsl #2]
    1930:	02000001 	andeq	r0, r0, #1
    1934:	0000c300 	andeq	ip, r0, r0, lsl #6
    1938:	fb010200 	blx	42142 <DISABLE_IRQ+0x420c2>
    193c:	01000d0e 	tsteq	r0, lr, lsl #26
    1940:	00010101 	andeq	r0, r1, r1, lsl #2
    1944:	00010000 	andeq	r0, r1, r0
    1948:	002e0100 	eoreq	r0, lr, r0, lsl #2
    194c:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1950:	6863735f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    1954:	632e6465 	teqvs	lr, #1694498816	; 0x65000000
    1958:	00000000 	andeq	r0, r0, r0
    195c:	5f776172 	svcpl	0x00776172
    1960:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
    1964:	0100682e 	tsteq	r0, lr, lsr #16
    1968:	61720000 	cmnvs	r2, r0
    196c:	79745f77 	ldmdbvc	r4!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1970:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    1974:	00000100 	andeq	r0, r0, r0, lsl #2
    1978:	5f776172 	svcpl	0x00776172
    197c:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    1980:	00010068 	andeq	r0, r1, r8, rrx
    1984:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1988:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
    198c:	616e7265 	cmnvs	lr, r5, ror #4
    1990:	79745f6c 	ldmdbvc	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1994:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    1998:	00000100 	andeq	r0, r0, r0, lsl #2
    199c:	5f776172 	svcpl	0x00776172
    19a0:	2e6a626f 	cdpcs	2, 6, cr6, cr10, cr15, {3}
    19a4:	00010068 	andeq	r0, r1, r8, rrx
    19a8:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    19ac:	74756d5f 	ldrbtvc	r6, [r5], #-3423	; 0xd5f
    19b0:	682e7865 	stmdavs	lr!, {r0, r2, r5, r6, fp, ip, sp, lr}
    19b4:	00000100 	andeq	r0, r0, r0, lsl #2
    19b8:	5f776172 	svcpl	0x00776172
    19bc:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    19c0:	69735f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    19c4:	682e657a 	stmdavs	lr!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}
    19c8:	00000100 	andeq	r0, r0, r0, lsl #2
    19cc:	5f776172 	svcpl	0x00776172
    19d0:	2e6d6573 	mcrcs	5, 3, r6, cr13, cr3, {3}
    19d4:	00010068 	andeq	r0, r1, r8, rrx
    19d8:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    19dc:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
    19e0:	616e7265 	cmnvs	lr, r5, ror #4
    19e4:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    19e8:	72000001 	andvc	r0, r0, #1
    19ec:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
    19f0:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    19f4:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    19f8:	00000001 	andeq	r0, r0, r1
    19fc:	c4020500 	strgt	r0, [r2], #-1280	; 0x500
    1a00:	03300042 	teqeq	r0, #66	; 0x42
    1a04:	360101a5 	strcc	r0, [r1], -r5, lsr #3
    1a08:	362e7803 	strtcc	r7, [lr], -r3, lsl #16
    1a0c:	02043048 	andeq	r3, r4, #72	; 0x48
    1a10:	667f8d03 	ldrbtvs	r8, [pc], -r3, lsl #26
    1a14:	f1030104 	undefined instruction 0xf1030104
    1a18:	51332e00 	teqpl	r3, r0, lsl #28
    1a1c:	676d6e31 	undefined instruction 0x676d6e31
    1a20:	2f322a32 	svccs	0x00322a32
    1a24:	9f660a03 	svcls	0x00660a03
    1a28:	6b4a7a03 	blvs	12a023c <MEM_SIZE+0xaa023c>
    1a2c:	302c302c 	eorcc	r3, ip, ip, lsr #32
    1a30:	d67fb003 	ldrbtle	fp, [pc], -r3
    1a34:	9e130330 	mrcls	3, 0, r0, cr3, cr0, {1}
    1a38:	4d4a6f03 	stclmi	15, cr6, [sl, #-12]
    1a3c:	09034c83 	stmdbeq	r3, {r0, r1, r7, sl, fp, lr}
    1a40:	7fb2034a 	svcvc	0x00b2034a
    1a44:	67304c9e 	undefined instruction 0x67304c9e
    1a48:	0302044d 	movweq	r0, #9293	; 0x244d
    1a4c:	01042e5a 	tsteq	r4, sl, asr lr
    1a50:	042e3203 	strteq	r3, [lr], #-515	; 0x203
    1a54:	2e4f0302 	cdpcs	3, 4, cr0, cr15, cr2, {0}
    1a58:	0301042d 	movweq	r0, #5165	; 0x142d
    1a5c:	08322e2e 	ldmdaeq	r2!, {r1, r2, r3, r5, r9, sl, fp, sp}
    1a60:	323232b1 	eorscc	r3, r2, #268435467	; 0x1000000b
    1a64:	087fad03 	ldmdaeq	pc!, {r0, r1, r8, sl, fp, sp, pc}^
    1a68:	14033258 	strne	r3, [r3], #-600	; 0x258
    1a6c:	4a7003f2 	bmi	1c02a3c <MEM_SIZE+0x1402a3c>
    1a70:	30bf4d4c 	adcscc	r4, pc, ip, asr #26
    1a74:	00100230 	andseq	r0, r0, r0, lsr r2
    1a78:	01fb0101 	mvnseq	r0, r1, lsl #2
    1a7c:	00020000 	andeq	r0, r2, r0
    1a80:	000000c1 	andeq	r0, r0, r1, asr #1
    1a84:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1a88:	0101000d 	tsteq	r1, sp
    1a8c:	00000101 	andeq	r0, r0, r1, lsl #2
    1a90:	00000100 	andeq	r0, r0, r0, lsl #2
    1a94:	00002e01 	andeq	r2, r0, r1, lsl #28
    1a98:	5f776172 	svcpl	0x00776172
    1a9c:	2e6d6573 	mcrcs	5, 3, r6, cr13, cr3, {3}
    1aa0:	00000063 	andeq	r0, r0, r3, rrx
    1aa4:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1aa8:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
    1aac:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1ab0:	72000001 	andvc	r0, r0, #1
    1ab4:	745f7761 	ldrbvc	r7, [pc], #1889	; 1abc <DISABLE_IRQ+0x1a3c>
    1ab8:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    1abc:	00010068 	andeq	r0, r1, r8, rrx
    1ac0:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1ac4:	7570635f 	ldrbvc	r6, [r0, #-863]!	; 0x35f
    1ac8:	0100682e 	tsteq	r0, lr, lsr #16
    1acc:	61720000 	cmnvs	r2, r0
    1ad0:	6e695f77 	mcrvs	15, 3, r5, cr9, cr7, {3}
    1ad4:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    1ad8:	745f6c61 	ldrbvc	r6, [pc], #3169	; 1ae0 <DISABLE_IRQ+0x1a60>
    1adc:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    1ae0:	00010068 	andeq	r0, r1, r8, rrx
    1ae4:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1ae8:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    1aec:	2e6d6574 	mcrcs	5, 3, r6, cr13, cr4, {3}
    1af0:	00010068 	andeq	r0, r1, r8, rrx
    1af4:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1af8:	6a626f5f 	bvs	189d87c <MEM_SIZE+0x109d87c>
    1afc:	0100682e 	tsteq	r0, lr, lsr #16
    1b00:	61720000 	cmnvs	r2, r0
    1b04:	756d5f77 	strbvc	r5, [sp, #-3959]!	; 0xf77
    1b08:	2e786574 	mrccs	5, 3, r6, cr8, cr4, {3}
    1b0c:	00010068 	andeq	r0, r1, r8, rrx
    1b10:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1b14:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
    1b18:	735f6575 	cmpvc	pc, #490733568	; 0x1d400000
    1b1c:	2e657a69 	vnmulcs.f32	s15, s10, s19
    1b20:	00010068 	andeq	r0, r1, r8, rrx
    1b24:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1b28:	6d65735f 	stclvs	3, cr7, [r5, #-380]!	; 0xfffffe84
    1b2c:	0100682e 	tsteq	r0, lr, lsr #16
    1b30:	61720000 	cmnvs	r2, r0
    1b34:	6e695f77 	mcrvs	15, 3, r5, cr9, cr7, {3}
    1b38:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    1b3c:	682e6c61 	stmdavs	lr!, {r0, r5, r6, sl, fp, sp, lr}
    1b40:	00000100 	andeq	r0, r0, r0, lsl #2
    1b44:	02050000 	andeq	r0, r5, #0
    1b48:	30004510 	andcc	r4, r0, r0, lsl r5
    1b4c:	0103a103 	tsteq	r3, r3, lsl #2
    1b50:	032e0903 	teqeq	lr, #49152	; 0xc000
    1b54:	09032e77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp}
    1b58:	27034f2e 	strcs	r4, [r3, -lr, lsr #30]
    1b5c:	4a60039e 	bmi	18029dc <MEM_SIZE+0x10029dc>
    1b60:	940868bc 	strls	r6, [r8], #-2236	; 0x8bc
    1b64:	03666803 	cmneq	r6, #196608	; 0x30000
    1b68:	37086626 	strcc	r6, [r8, -r6, lsr #12]
    1b6c:	032e0b03 	teqeq	lr, #3072	; 0xc00
    1b70:	03ac087a 	undefined instruction 0x03ac087a
    1b74:	339e7ec5 	orrscc	r7, lr, #3152	; 0xc50
    1b78:	034f3329 	movteq	r3, #62249	; 0xf329
    1b7c:	74039e13 	strvc	r9, [r3], #-3603	; 0xe13
    1b80:	0868bc4a 	stmdaeq	r8!, {r1, r3, r6, sl, fp, ip, sp, pc}^
    1b84:	032f2d95 	teqeq	pc, #9536	; 0x2540
    1b88:	ac0801c2 	stfges	f0, [r8], {194}	; 0xc2
    1b8c:	1e036b35 	vmovne.16	d3[0], r6
    1b90:	4a69039e 	bmi	1a42a10 <MEM_SIZE+0x1242a10>
    1b94:	020468bc 	andeq	r6, r4, #12320768	; 0xbc0000
    1b98:	087cb603 	ldmdaeq	ip!, {r0, r1, r9, sl, ip, sp, pc}^
    1b9c:	03010490 	movweq	r0, #5264	; 0x1490
    1ba0:	302e03d0 	ldrdcc	r0, [lr], -r0
    1ba4:	0302044b 	movweq	r0, #9291	; 0x244b
    1ba8:	044a7cad 	strbeq	r7, [sl], #-3245	; 0xcad
    1bac:	03d20301 	bicseq	r0, r2, #67108864	; 0x4000000
    1bb0:	22084e2e 	andcs	r4, r8, #736	; 0x2e0
    1bb4:	7a034c84 	bvc	d4dcc <DISABLE_IRQ+0xd4d4c>
    1bb8:	7ebe032e 	cdpvc	3, 11, cr0, cr14, cr14, {1}
    1bbc:	7803369e 	stmdavc	r3, {r1, r2, r3, r4, r7, r9, sl, ip, sp}
    1bc0:	0351362e 	cmpeq	r1, #48234496	; 0x2e00000
    1bc4:	5d039e2a 	stcpl	14, cr9, [r3, #-168]	; 0xffffff58
    1bc8:	0868bc4a 	stmdaeq	r8!, {r1, r3, r6, sl, fp, ip, sp, pc}^
    1bcc:	302c6994 	mlacc	ip, r4, r9, r6
    1bd0:	9fbb302c 	svcls	0x00bb302c
    1bd4:	40084c32 	andmi	r4, r8, r2, lsr ip
    1bd8:	3c087403 	cfstrscc	mvf7, [r8], {3}
    1bdc:	f49f6c52 	undefined instruction 0xf49f6c52
    1be0:	03673084 	cmneq	r7, #132	; 0x84
    1be4:	de032e79 	mcrle	14, 0, r2, cr3, cr9, {3}
    1be8:	29339e7d 	ldmdbcs	r3!, {r0, r2, r3, r4, r5, r6, r9, sl, fp, ip, pc}
    1bec:	0368a04f 	cmneq	r8, #79	; 0x4f
    1bf0:	0420083e 	strteq	r0, [r0], #-2110	; 0x83e
    1bf4:	7f970302 	svcvc	0x00970302
    1bf8:	0301044a 	movweq	r0, #5194	; 0x144a
    1bfc:	19032e32 	stmdbne	r3, {r1, r4, r5, r9, sl, fp, sp}
    1c00:	044d6a4a 	strbeq	r6, [sp], #-2634	; 0xa4a
    1c04:	7fae0302 	svcvc	0x00ae0302
    1c08:	0301049e 	movweq	r0, #5278	; 0x149e
    1c0c:	032e00cd 	teqeq	lr, #205	; 0xcd
    1c10:	22084a14 	andcs	r4, r8, #81920	; 0x14000
    1c14:	2e46034c 	cdpcs	3, 4, cr0, cr6, cr12, {2}
    1c18:	4c663003 	stclmi	0, cr3, [r6], #-12
    1c1c:	4a5303da 	bmi	14c2b8c <MEM_SIZE+0xcc2b8c>
    1c20:	2c660a03 	stclcs	10, cr0, [r6], #-12
    1c24:	bd302c30 	ldclt	12, cr2, [r0, #-192]!	; 0xffffff40
    1c28:	039f694c 	orrseq	r6, pc, #1245184	; 0x130000
    1c2c:	9ff32e6f 	svcls	0x00f32e6f
    1c30:	4a780334 	bmi	1e02908 <MEM_SIZE+0x1602908>
    1c34:	8200f203 	andhi	pc, r0, #805306368	; 0x30000000
    1c38:	03322a32 	teqeq	r2, #204800	; 0x32000
    1c3c:	30884a0a 	addcc	r4, r8, sl, lsl #20
    1c40:	03dd2948 	bicseq	r2, sp, #1179648	; 0x120000
    1c44:	2a328241 	bcs	ca2550 <MEM_SIZE+0x4a2550>
    1c48:	4a090332 	bmi	242918 <DISABLE_IRQ+0x242898>
    1c4c:	29492ff8 	stmdbcs	r9, {r3, r4, r5, r6, r7, r8, r9, sl, fp, sp}^
    1c50:	7ee803f8 	mcrvc	3, 7, r0, cr8, cr8, {7}
    1c54:	3329179e 	teqcc	r9, #41418752	; 0x2780000
    1c58:	6610034f 	ldrvs	r0, [r0], -pc, asr #6
    1c5c:	2e790331 	mrccs	3, 3, r0, cr9, cr1, {1}
    1c60:	2c2e0903 	stccs	9, cr0, [lr], #-12
    1c64:	04352c2b 	ldrteq	r2, [r5], #-3115	; 0xc2b
    1c68:	2e5c0302 	cdpcs	3, 5, cr0, cr12, cr2, {0}
    1c6c:	0301042f 	movweq	r0, #5167	; 0x142f
    1c70:	6a322e1f 	bvs	c8d4f4 <MEM_SIZE+0x48d4f4>
    1c74:	01000602 	tsteq	r0, r2, lsl #12
    1c78:	00001901 	andeq	r1, r0, r1, lsl #18
    1c7c:	13000200 	movwne	r0, #512	; 0x200
    1c80:	02000000 	andeq	r0, r0, #0
    1c84:	0d0efb01 	vstreq	d15, [lr, #-4]
    1c88:	01010100 	tsteq	r1, r0, lsl #2
    1c8c:	00000001 	andeq	r0, r0, r1
    1c90:	01000001 	tsteq	r0, r1
    1c94:	017f0000 	cmneq	pc, r0
    1c98:	00020000 	andeq	r0, r2, r0
    1c9c:	000000c4 	andeq	r0, r0, r4, asr #1
    1ca0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1ca4:	0101000d 	tsteq	r1, sp
    1ca8:	00000101 	andeq	r0, r0, r1, lsl #2
    1cac:	00000100 	andeq	r0, r0, r0, lsl #2
    1cb0:	00002e01 	andeq	r2, r0, r1, lsl #28
    1cb4:	5f776172 	svcpl	0x00776172
    1cb8:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0x973
    1cbc:	632e6d65 	teqvs	lr, #6464	; 0x1940
    1cc0:	00000000 	andeq	r0, r0, r0
    1cc4:	5f776172 	svcpl	0x00776172
    1cc8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    1ccc:	0100682e 	tsteq	r0, lr, lsr #16
    1cd0:	61720000 	cmnvs	r2, r0
    1cd4:	70635f77 	rsbvc	r5, r3, r7, ror pc
    1cd8:	00682e75 	rsbeq	r2, r8, r5, ror lr
    1cdc:	72000001 	andvc	r0, r0, #1
    1ce0:	695f7761 	ldmdbvs	pc, {r0, r5, r6, r8, r9, sl, ip, sp, lr}^
    1ce4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1ce8:	5f6c616e 	svcpl	0x006c616e
    1cec:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    1cf0:	0100682e 	tsteq	r0, lr, lsr #16
    1cf4:	61720000 	cmnvs	r2, r0
    1cf8:	79735f77 	ldmdbvc	r3!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1cfc:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1d00:	0100682e 	tsteq	r0, lr, lsr #16
    1d04:	61720000 	cmnvs	r2, r0
    1d08:	696c5f77 	stmdbvs	ip!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1d0c:	682e7473 	stmdavs	lr!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
    1d10:	00000100 	andeq	r0, r0, r0, lsl #2
    1d14:	5f776172 	svcpl	0x00776172
    1d18:	2e6a626f 	cdpcs	2, 6, cr6, cr10, cr15, {3}
    1d1c:	00010068 	andeq	r0, r1, r8, rrx
    1d20:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1d24:	74756d5f 	ldrbtvc	r6, [r5], #-3423	; 0xd5f
    1d28:	682e7865 	stmdavs	lr!, {r0, r2, r5, r6, fp, ip, sp, lr}
    1d2c:	00000100 	andeq	r0, r0, r0, lsl #2
    1d30:	5f776172 	svcpl	0x00776172
    1d34:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    1d38:	69735f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    1d3c:	682e657a 	stmdavs	lr!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}
    1d40:	00000100 	andeq	r0, r0, r0, lsl #2
    1d44:	5f776172 	svcpl	0x00776172
    1d48:	2e6d6573 	mcrcs	5, 3, r6, cr13, cr3, {3}
    1d4c:	00010068 	andeq	r0, r1, r8, rrx
    1d50:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1d54:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
    1d58:	616e7265 	cmnvs	lr, r5, ror #4
    1d5c:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    1d60:	00000001 	andeq	r0, r0, r1
    1d64:	84020500 	strhi	r0, [r2], #-1280	; 0x500
    1d68:	0330004c 	teqeq	r0, #76	; 0x4c
    1d6c:	010101f9 	strdeq	r0, [r1, -r9]
    1d70:	f6196a32 	undefined instruction 0xf6196a32
    1d74:	034a0f03 	movteq	r0, #44803	; 0xaf03
    1d78:	71032e0f 	tstvc	r3, pc, lsl #28
    1d7c:	4a72032e 	bmi	1c82a3c <MEM_SIZE+0x1482a3c>
    1d80:	032e0e03 	teqeq	lr, #48	; 0x30
    1d84:	034f2e6d 	movteq	r2, #65133	; 0xfe6d
    1d88:	158200c8 	strne	r0, [r2, #200]	; 0xc8
    1d8c:	32504868 	subscc	r4, r0, #6815744	; 0x680000
    1d90:	50646816 	rsbpl	r6, r4, r6, lsl r8
    1d94:	032e0903 	teqeq	lr, #49152	; 0xc000
    1d98:	032b0109 	teqeq	fp, #1073741826	; 0x40000002
    1d9c:	34342e7a 	ldrtcc	r2, [r4], #-3706	; 0xe7a
    1da0:	034b326e 	movteq	r3, #45678	; 0xb26e
    1da4:	13032e3a 	movwne	r2, #15930	; 0x3e3a
    1da8:	7fb3034a 	svcvc	0x00b3034a
    1dac:	00c8032e 	sbceq	r0, r8, lr, lsr #6
    1db0:	0331309e 	teqeq	r1, #158	; 0x9e
    1db4:	032e7fb2 	teqeq	lr, #712	; 0x2c8
    1db8:	032e00d1 	teqeq	lr, #209	; 0xd1
    1dbc:	032e7faf 	teqeq	lr, #700	; 0x2bc
    1dc0:	034a00d6 	movteq	r0, #41174	; 0xa0d6
    1dc4:	334a7fb0 	movtcc	r7, #44976	; 0xafb0
    1dc8:	2f302f67 	svccs	0x00302f67
    1dcc:	2f2f302f 	svccs	0x002f302f
    1dd0:	302f2f30 	eorcc	r2, pc, r0, lsr pc
    1dd4:	2e1f032f 	cdpcs	3, 1, cr0, cr15, cr15, {1}
    1dd8:	667e8b03 	ldrbtvs	r8, [lr], -r3, lsl #22
    1ddc:	672fa331 	undefined instruction 0x672fa331
    1de0:	00e1034d 	rsceq	r0, r1, sp, asr #6
    1de4:	312b3166 	teqcc	fp, r6, ror #2
    1de8:	03820b03 	orreq	r0, r2, #3072	; 0xc00
    1dec:	49bc4a7a 	ldmibmi	ip!, {r1, r3, r4, r5, r6, r9, fp, lr}
    1df0:	7eab034b 	cdpvc	3, 10, cr0, cr11, cr11, {2}
    1df4:	0d03ac08 	stceq	12, cr10, [r3, #-32]	; 0xffffffe0
    1df8:	8751332e 	ldrbhi	r3, [r1, -lr, lsr #6]
    1dfc:	7f9f0330 	svcvc	0x009f0330
    1e00:	2b313282 	blcs	c4e810 <MEM_SIZE+0x44e810>
    1e04:	2c4c6b31 	vmovcs	d17, r6, ip
    1e08:	4d8a3330 	stcmi	3, cr3, [sl, #192]	; 0xc0
    1e0c:	4c3031bf 	ldfmis	f3, [r0], #-764	; 0xfffffd04
    1e10:	4b4a7503 	blmi	129f224 <MEM_SIZE+0xa9f224>
    1e14:	01000c02 	tsteq	r0, r2, lsl #24
    1e18:	00043a01 	andeq	r3, r4, r1, lsl #20
    1e1c:	e0000200 	and	r0, r0, r0, lsl #4
    1e20:	02000000 	andeq	r0, r0, #0
    1e24:	0d0efb01 	vstreq	d15, [lr, #-4]
    1e28:	01010100 	tsteq	r1, r0, lsl #2
    1e2c:	00000001 	andeq	r0, r0, r1
    1e30:	01000001 	tsteq	r0, r1
    1e34:	7200002e 	andvc	r0, r0, #46	; 0x2e
    1e38:	745f7761 	ldrbvc	r7, [pc], #1889	; 1e40 <DISABLE_IRQ+0x1dc0>
    1e3c:	2e6b7361 	cdpcs	3, 6, cr7, cr11, cr1, {3}
    1e40:	00000063 	andeq	r0, r0, r3, rrx
    1e44:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1e48:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
    1e4c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1e50:	72000001 	andvc	r0, r0, #1
    1e54:	745f7761 	ldrbvc	r7, [pc], #1889	; 1e5c <DISABLE_IRQ+0x1ddc>
    1e58:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    1e5c:	00010068 	andeq	r0, r1, r8, rrx
    1e60:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1e64:	7570635f 	ldrbvc	r6, [r0, #-863]!	; 0x35f
    1e68:	0100682e 	tsteq	r0, lr, lsr #16
    1e6c:	61720000 	cmnvs	r2, r0
    1e70:	6e695f77 	mcrvs	15, 3, r5, cr9, cr7, {3}
    1e74:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    1e78:	745f6c61 	ldrbvc	r6, [pc], #3169	; 1e80 <DISABLE_IRQ+0x1e00>
    1e7c:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    1e80:	00010068 	andeq	r0, r1, r8, rrx
    1e84:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1e88:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    1e8c:	2e6d6574 	mcrcs	5, 3, r6, cr13, cr4, {3}
    1e90:	00010068 	andeq	r0, r1, r8, rrx
    1e94:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1e98:	6a626f5f 	bvs	189dc1c <MEM_SIZE+0x109dc1c>
    1e9c:	0100682e 	tsteq	r0, lr, lsr #16
    1ea0:	61720000 	cmnvs	r2, r0
    1ea4:	756d5f77 	strbvc	r5, [sp, #-3959]!	; 0xf77
    1ea8:	2e786574 	mrccs	5, 3, r6, cr8, cr4, {3}
    1eac:	00010068 	andeq	r0, r1, r8, rrx
    1eb0:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1eb4:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
    1eb8:	735f6575 	cmpvc	pc, #490733568	; 0x1d400000
    1ebc:	2e657a69 	vnmulcs.f32	s15, s10, s19
    1ec0:	00010068 	andeq	r0, r1, r8, rrx
    1ec4:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1ec8:	6d65735f 	stclvs	3, cr7, [r5, #-380]!	; 0xfffffe84
    1ecc:	0100682e 	tsteq	r0, lr, lsr #16
    1ed0:	61720000 	cmnvs	r2, r0
    1ed4:	61745f77 	cmnvs	r4, r7, ror pc
    1ed8:	682e6b73 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
    1edc:	00000100 	andeq	r0, r0, r0, lsl #2
    1ee0:	5f776172 	svcpl	0x00776172
    1ee4:	6b736174 	blvs	1cda4bc <MEM_SIZE+0x14da4bc>
    1ee8:	682e305f 	stmdavs	lr!, {r0, r1, r2, r3, r4, r6, ip, sp}
    1eec:	00000100 	andeq	r0, r0, r0, lsl #2
    1ef0:	5f776172 	svcpl	0x00776172
    1ef4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    1ef8:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    1efc:	0100682e 	tsteq	r0, lr, lsr #16
    1f00:	00000000 	andeq	r0, r0, r0
    1f04:	4f7c0205 	svcmi	0x007c0205
    1f08:	ee033000 	cdp	0, 0, cr3, cr3, cr0, {0}
    1f0c:	6a180101 	bvs	602318 <DISABLE_IRQ+0x602298>
    1f10:	2d83306e 	stccs	0, cr3, [r3, #440]	; 0x1b8
    1f14:	4f660e03 	svcmi	0x00660e03
    1f18:	2e078603 	cfmadd32cs	mvax0, mvfx8, mvfx7, mvfx3
    1f1c:	a5033001 	strge	r3, [r3, #-1]
    1f20:	32014a02 	andcc	r4, r1, #8192	; 0x2000
    1f24:	6600d703 	strvs	sp, [r0], -r3, lsl #14
    1f28:	03013903 	movweq	r3, #6403	; 0x1903
    1f2c:	2e667cbb 	mcrcs	12, 3, r7, cr6, cr11, {5}
    1f30:	2f2f2d6a 	svccs	0x002f2d6a
    1f34:	7998032f 	ldmibvc	r8, {r0, r1, r2, r3, r5, r8, r9}
    1f38:	03a4334a 	undefined instruction 0x03a4334a
    1f3c:	2f459e0d 	svccs	0x00459e0d
    1f40:	df034c67 	svcle	0x00034c67
    1f44:	29336607 	ldmdbcs	r3!, {r0, r1, r2, r9, sl, sp, lr}
    1f48:	034f3333 	movteq	r3, #62259	; 0xf333
    1f4c:	7a039e0e 	bvc	e978c <DISABLE_IRQ+0xe970c>
    1f50:	034bbb4a 	movteq	fp, #47946	; 0xbb4a
    1f54:	22027fb4 	andcs	r7, r2, #720	; 0x2d0
    1f58:	33293301 	teqcc	r9, #67108864	; 0x4000000
    1f5c:	8213034f 	andshi	r0, r3, #1006632961	; 0x3c000001
    1f60:	a6667203 	strbtge	r7, [r6], -r3, lsl #4
    1f64:	ab034bd7 	blge	d4ec8 <DISABLE_IRQ+0xd4e48>
    1f68:	33c8087f 	biccc	r0, r8, #8323072	; 0x7f0000
    1f6c:	034e3329 	movteq	r3, #58153	; 0xe329
    1f70:	6a039e1d 	bvs	e97ec <DISABLE_IRQ+0xe976c>
    1f74:	0a03bd4a 	beq	f14a4 <DISABLE_IRQ+0xf1424>
    1f78:	302c502e 	eorcc	r5, ip, lr, lsr #32
    1f7c:	08028803 	stmdaeq	r2, {r0, r1, fp, pc}
    1f80:	780336c8 	stmdavc	r3, {r3, r6, r7, r9, sl, ip, sp}
    1f84:	7803362e 	stmdavc	r3, {r1, r2, r3, r5, r9, sl, ip, sp}
    1f88:	7803362e 	stmdavc	r3, {r1, r2, r3, r5, r9, sl, ip, sp}
    1f8c:	2003362e 	andcs	r3, r3, lr, lsr #12
    1f90:	4a67034a 	bmi	19c2cc0 <MEM_SIZE+0x11c2cc0>
    1f94:	2f4e31bb 	svccs	0x004e31bb
    1f98:	4d13302b 	ldcmi	0, cr3, [r3, #-172]	; 0xffffff54
    1f9c:	6677034b 	ldrbtvs	r0, [r7], -fp, asr #6
    1fa0:	084a0f03 	stmdaeq	sl, {r0, r1, r8, r9, sl, fp}^
    1fa4:	032a4c22 	teqeq	sl, #8704	; 0x2200
    1fa8:	348276e7 	strcc	r7, [r2], #1767	; 0x6e7
    1fac:	9e0b03a4 	cdpls	3, 0, cr0, cr11, cr4, {5}
    1fb0:	03672f50 	cmneq	r7, #320	; 0x140
    1fb4:	61034a18 	tstvs	r3, r8, lsl sl
    1fb8:	2e1c034a 	cdpcs	3, 1, cr0, cr12, cr10, {2}
    1fbc:	07bc034c 	ldreq	r0, [ip, ip, asr #6]!
    1fc0:	036b3366 	cmneq	fp, #-1744830463	; 0x98000001
    1fc4:	039e00c5 	orrseq	r0, lr, #197	; 0xc5
    1fc8:	03bc4a42 	undefined instruction 0x03bc4a42
    1fcc:	4b74080d 	blmi	1d04008 <MEM_SIZE+0x1504008>
    1fd0:	21034b67 	tstcs	r3, r7, ror #22
    1fd4:	4d23084a 	stcmi	8, cr0, [r3, #-296]!	; 0xfffffed8
    1fd8:	4b034c4c 	blmi	d5110 <DISABLE_IRQ+0xd5090>
    1fdc:	03674b2e 	cmneq	r7, #47104	; 0xb800
    1fe0:	02042e12 	andeq	r2, r4, #288	; 0x120
    1fe4:	4a75c703 	bmi	1d73bf8 <MEM_SIZE+0x1573bf8>
    1fe8:	bd030104 	stflts	f0, [r3, #-16]
    1fec:	02042e0a 	andeq	r2, r4, #160	; 0xa0
    1ff0:	2e75c303 	cdpcs	3, 7, cr12, cr5, cr3, {0}
    1ff4:	0301042f 	movweq	r0, #5167	; 0x142f
    1ff8:	042e0abc 	strteq	r0, [lr], #-2748	; 0xabc
    1ffc:	75c40302 	strbvc	r0, [r4, #770]	; 0x302
    2000:	0301042e 	movweq	r0, #5166	; 0x142e
    2004:	312e0abc 	undefined instruction 0x312e0abc
    2008:	2c4b2f4d 	mcrrcs	15, 4, r2, fp, cr13
    200c:	5d083232 	sfmpl	f3, 4, [r8, #-200]	; (stcpl 2, cr3, [r8, #-200])	; 0xffffff38
    2010:	7ced0345 	stclvc	3, cr0, [sp], #276	; 0x114
    2014:	a66b33ba 	undefined instruction 0xa66b33ba
    2018:	00d5036d 	sbcseq	r0, r5, sp, ror #6
    201c:	b2032f4a 	andlt	r2, r3, #296	; 0x128
    2020:	88bc4a7f 	ldmhi	ip!, {r0, r1, r2, r3, r4, r5, r6, r9, fp, lr}
    2024:	0879034d 	ldmdaeq	r9!, {r0, r2, r3, r6, r8, r9}^
    2028:	08110374 	ldmdaeq	r1, {r2, r4, r5, r6, r8, r9}
    202c:	4a1b033c 	bmi	6c2d24 <DISABLE_IRQ+0x6c2ca4>
    2030:	312c5046 	teqcc	ip, r6, asr #32
    2034:	2e790335 	mrccs	3, 3, r0, cr9, cr5, {1}
    2038:	f4030204 	vst1.8	{d0-d3}, [r3], r4
    203c:	01042e77 	tsteq	r4, r7, ror lr
    2040:	2e089303 	cdpcs	3, 0, cr9, cr8, cr3, {0}
    2044:	ed030204 	sfm	f0, 4, [r3, #-16]	; (stc 2, cr0, [r3, #-16])
    2048:	042f2e77 	strteq	r2, [pc], #3703	; 2050 <DISABLE_IRQ+0x1fd0>
    204c:	08920301 	ldmeq	r2, {r0, r8, r9}
    2050:	0302042e 	movweq	r0, #9262	; 0x242e
    2054:	042e77ee 	strteq	r7, [lr], #-2030	; 0x7ee
    2058:	08920301 	ldmeq	r2, {r0, r8, r9}
    205c:	4e4dbc2e 	cdpmi	12, 4, cr11, cr13, cr14, {1}
    2060:	034a0a03 	movteq	r0, #43523	; 0xaa03
    2064:	02042e4f 	andeq	r2, r4, #1264	; 0x4f0
    2068:	4a788b03 	bmi	1e24c7c <MEM_SIZE+0x1624c7c>
    206c:	f9030104 	undefined instruction 0xf9030104
    2070:	02042e07 	andeq	r2, r4, #112	; 0x70
    2074:	2e788703 	cdpcs	7, 7, cr8, cr8, cr3, {0}
    2078:	0301042f 	movweq	r0, #5167	; 0x142f
    207c:	314a07f8 	strdcc	r0, [sl, #-120]	; 0xffffff88
    2080:	672e6a03 	strvs	r6, [lr, -r3, lsl #20]!
    2084:	032e1903 	teqeq	lr, #49152	; 0xc000
    2088:	03580813 	cmpeq	r8, #1245184	; 0x130000
    208c:	ef034a6d 	svc	0x00034a6d
    2090:	2a32f27d 	bcs	cbea8c <MEM_SIZE+0x4bea8c>
    2094:	03322a32 	teqeq	r2, #204800	; 0x32000
    2098:	50034a30 	andpl	r4, r3, r0, lsr sl
    209c:	8216034a 	andshi	r0, r6, #671088641	; 0x28000001
    20a0:	a14a6a03 	cmpge	sl, r3, lsl #20
    20a4:	6d302c69 	ldcvs	12, cr2, [r0, #-420]!	; 0xfffffe5c
    20a8:	2f9e1103 	svccs	0x009e1103
    20ac:	0385312f 	orreq	r3, r5, #-1073741813	; 0xc000000b
    20b0:	c4032e61 	strgt	r2, [r3], #-3681	; 0xe61
    20b4:	0a03d600 	beq	f78bc <DISABLE_IRQ+0xf783c>
    20b8:	2e76032e 	cdpcs	3, 7, cr0, cr6, cr14, {1}
    20bc:	032e0a03 	teqeq	lr, #12288	; 0x3000
    20c0:	0a032e76 	beq	cdaa0 <DISABLE_IRQ+0xcda20>
    20c4:	2e76032e 	cdpcs	3, 7, cr0, cr6, cr14, {1}
    20c8:	4f4a0a03 	svcmi	0x004a0a03
    20cc:	4f6d524f 	svcmi	0x006d524f
    20d0:	504a0903 	subpl	r0, sl, r3, lsl #18
    20d4:	302c84bf 	undefined instruction 0x302c84bf
    20d8:	084a1d03 	stmdaeq	sl, {r0, r1, r8, sl, fp, ip}^
    20dc:	03643021 	cmneq	r4, #33	; 0x21
    20e0:	7803826e 	stmdavc	r3, {r1, r2, r3, r5, r6, r9, pc}
    20e4:	2e0a032e 	cdpcs	3, 0, cr0, cr10, cr14, {1}
    20e8:	2c4c302c 	mcrrcs	0, 2, r3, ip, cr12
    20ec:	68f43230 	ldmvs	r4!, {r4, r5, r9, ip, sp}^
    20f0:	032f314c 	teqeq	pc, #19
    20f4:	8a034a76 	bhi	d4ad4 <DISABLE_IRQ+0xd4a54>
    20f8:	2a32827e 	bcs	ca2af8 <MEM_SIZE+0x4a2af8>
    20fc:	1903a032 	stmdbne	r3, {r1, r4, r5, sp, pc}
    2100:	2c687408 	cfstrdcs	mvd7, [r8], #-32	; 0xffffffe0
    2104:	4a210332 	bmi	842dd4 <MEM_SIZE+0x42dd4>
    2108:	4e842208 	cdpmi	2, 8, cr2, cr4, cr8, {0}
    210c:	034a7203 	movteq	r7, #41475	; 0xa203
    2110:	0358084e 	cmpeq	r8, #5111808	; 0x4e0000
    2114:	68580828 	ldmdavs	r8, {r3, r5, fp}^
    2118:	0d03312c 	stfeqs	f3, [r3, #-176]	; 0xffffff50
    211c:	ba4e034a 	blt	1382e4c <MEM_SIZE+0xb82e4c>
    2120:	31302c68 	teqcc	r0, r8, ror #24
    2124:	8212032f 	andshi	r0, r2, #-1140850688	; 0xbc000000
    2128:	03312c68 	teqeq	r1, #26624	; 0x6800
    212c:	3203665f 	andcc	r6, r3, #99614720	; 0x5f00000
    2130:	7fad0366 	svcvc	0x00ad0366
    2134:	312b31ba 	undefined instruction 0x312b31ba
    2138:	2949f952 	stmdbcs	r9, {r1, r4, r6, r8, fp, ip, sp, lr, pc}^
    213c:	7f8e03f8 	svcvc	0x008e03f8
    2140:	312b319e 	undefined instruction 0x312b319e
    2144:	6b682c4c 	blvs	1a0d27c <MEM_SIZE+0x120d27c>
    2148:	034b7c08 	movteq	r7, #48136	; 0xbc08
    214c:	22084a22 	andcs	r4, r8, #139264	; 0x22000
    2150:	4a0c0369 	bmi	302efc <DISABLE_IRQ+0x302e7c>
    2154:	034a6a03 	movteq	r6, #43523	; 0xaa03
    2158:	4b58085c 	blmi	16042d0 <MEM_SIZE+0xe042d0>
    215c:	6627034b 	strtvs	r0, [r7], -fp, asr #6
    2160:	4bba6203 	blmi	fee9a974 <rEINTPEND+0xa8e9a8cc>
    2164:	4b4b324b 	blmi	12cea98 <MEM_SIZE+0xacea98>
    2168:	2f2d6734 	svccs	0x002d6734
    216c:	085f0330 	ldmdaeq	pc, {r4, r5, r8, r9}^
    2170:	08290358 	stmdaeq	r9!, {r3, r4, r6, r8, r9}
    2174:	6678033c 	undefined instruction 0x6678033c
    2178:	ba7fb503 	blt	1fef58c <MEM_SIZE+0x17ef58c>
    217c:	88322a16 	ldmdahi	r2!, {r1, r2, r4, r9, fp, sp}
    2180:	30506c6c 	subscc	r6, r0, ip, ror #24
    2184:	7eda032c 	cdpvc	3, 13, cr0, cr10, cr12, {1}
    2188:	7903354a 	stmdbvc	r3, {r1, r3, r6, r8, sl, ip, sp}
    218c:	2a03352e 	bcs	cf64c <DISABLE_IRQ+0xcf5cc>
    2190:	4a5d0382 	bmi	1742fa0 <MEM_SIZE+0xf42fa0>
    2194:	0b034dbc 	bleq	d588c <DISABLE_IRQ+0xd580c>
    2198:	08853c08 	stmeq	r5, {r3, sl, fp, ip, sp}
    219c:	03683022 	cmneq	r8, #34	; 0x22
    21a0:	7403827a 	strvc	r8, [r3], #-634	; 0x27a
    21a4:	302c684a 	eorcc	r6, ip, sl, asr #16
    21a8:	f2320330 	vcge.s<illegal width 64>	d0, d2, d16
    21ac:	6d87a535 	cfstr32vs	mvfx10, [r7, #212]	; 0xd4
    21b0:	036ecb08 	cmneq	lr, #8192	; 0x2000
    21b4:	9903667a 	stmdbls	r3, {r1, r3, r4, r5, r6, r9, sl, sp, lr}
    21b8:	0336827c 	teqeq	r6, #-1073741817	; 0xc0000007
    21bc:	c22e2e78 	eorgt	r2, lr, #1920	; 0x780
    21c0:	6a4e6a4e 	bvs	139cb00 <MEM_SIZE+0xb9cb00>
    21c4:	9e00f103 	mvflss	f7, f3
    21c8:	667f9603 	ldrbtvs	r9, [pc], -r3, lsl #12
    21cc:	4a0e03bc 	bmi	3830c4 <DISABLE_IRQ+0x383044>
    21d0:	0850894c 	ldmdaeq	r0, {r2, r3, r6, r8, fp, pc}^
    21d4:	1a03865a 	bne	e3b44 <DISABLE_IRQ+0xe3ac4>
    21d8:	2e66032e 	cdpcs	3, 6, cr0, cr6, cr14, {1}
    21dc:	4a7a0335 	bmi	1e82eb8 <MEM_SIZE+0x1682eb8>
    21e0:	03343134 	teqeq	r4, #13
    21e4:	03302e7a 	teqeq	r0, #1952	; 0x7a0
    21e8:	322a4a09 	eorcc	r4, sl, #36864	; 0x9000
    21ec:	3533292f 	ldrcc	r2, [r3, #-2351]!	; 0x92f
    21f0:	4d6c4967 	stclmi	9, cr4, [ip, #-412]!	; 0xfffffe64
    21f4:	31312d9f 	undefined instruction 0x31312d9f
    21f8:	30322c2c 	eorscc	r2, r2, ip, lsr #24
    21fc:	88030204 	stmdahi	r3, {r2, r9}
    2200:	01049e7f 	tsteq	r4, pc, ror lr
    2204:	2e00fb03 	vmlacs.f64	d15, d0, d3
    2208:	85030204 	strhi	r0, [r3, #-516]	; 0x204
    220c:	01042e7f 	tsteq	r4, pc, ror lr
    2210:	2e00fe03 	cdpcs	14, 0, cr15, cr0, cr3, {0}
    2214:	82030204 	andhi	r0, r3, #1073741824	; 0x40000000
    2218:	312f2e7f 	teqcc	pc, pc, ror lr
    221c:	0301042d 	movweq	r0, #5165	; 0x142d
    2220:	322e00fb 	eorcc	r0, lr, #251	; 0xfb
    2224:	7fa60383 	svcvc	0x00a60383
    2228:	03845808 	orreq	r5, r4, #524288	; 0x80000
    222c:	3c0800df 	stccc	0, cr0, [r8], {223}	; 0xdf
    2230:	4a7faf03 	bmi	1fede44 <MEM_SIZE+0x17ede44>
    2234:	0800c603 	stmdaeq	r0, {r0, r1, r9, sl, lr, pc}
    2238:	8245033c 	subhi	r0, r5, #-268435456	; 0xf0000000
    223c:	4a00c303 	bmi	32e50 <DISABLE_IRQ+0x32dd0>
    2240:	03672208 	cmneq	r7, #-2147483648	; 0x80000000
    2244:	b6036679 	undefined instruction 0xb6036679
    2248:	ce03667f 	mcrgt	6, 0, r6, cr3, cr15, {3}
    224c:	a4036600 	strge	r6, [r3], #-1536	; 0x600
    2250:	14024a7f 	strne	r4, [r2], #-2687	; 0xa7f
    2254:	7f010100 	svcvc	0x00010100
    2258:	02000002 	andeq	r0, r0, #2
    225c:	00010800 	andeq	r0, r1, r0, lsl #16
    2260:	fb010200 	blx	42a6a <DISABLE_IRQ+0x429ea>
    2264:	01000d0e 	tsteq	r0, lr, lsl #26
    2268:	00010101 	andeq	r0, r1, r1, lsl #2
    226c:	00010000 	andeq	r0, r1, r0
    2270:	002e0100 	eoreq	r0, lr, r0, lsl #2
    2274:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    2278:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
    227c:	2e305f6b 	cdpcs	15, 3, cr5, cr0, cr11, {3}
    2280:	00000063 	andeq	r0, r0, r3, rrx
    2284:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    2288:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    228c:	00682e65 	rsbeq	r2, r8, r5, ror #28
    2290:	72000001 	andvc	r0, r0, #1
    2294:	635f7761 	cmpvs	pc, #25427968	; 0x1840000
    2298:	682e7570 	stmdavs	lr!, {r4, r5, r6, r8, sl, ip, sp, lr}
    229c:	00000100 	andeq	r0, r0, r0, lsl #2
    22a0:	5f776172 	svcpl	0x00776172
    22a4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    22a8:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    22ac:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    22b0:	00682e65 	rsbeq	r2, r8, r5, ror #28
    22b4:	72000001 	andvc	r0, r0, #1
    22b8:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
    22bc:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    22c0:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    22c4:	72000001 	andvc	r0, r0, #1
    22c8:	6c5f7761 	mrrcvs	7, 6, r7, pc, cr1
    22cc:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
    22d0:	00010068 	andeq	r0, r1, r8, rrx
    22d4:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    22d8:	6a626f5f 	bvs	189e05c <MEM_SIZE+0x109e05c>
    22dc:	0100682e 	tsteq	r0, lr, lsr #16
    22e0:	61720000 	cmnvs	r2, r0
    22e4:	756d5f77 	strbvc	r5, [sp, #-3959]!	; 0xf77
    22e8:	2e786574 	mrccs	5, 3, r6, cr8, cr4, {3}
    22ec:	00010068 	andeq	r0, r1, r8, rrx
    22f0:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    22f4:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
    22f8:	735f6575 	cmpvc	pc, #490733568	; 0x1d400000
    22fc:	2e657a69 	vnmulcs.f32	s15, s10, s19
    2300:	00010068 	andeq	r0, r1, r8, rrx
    2304:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    2308:	6d65735f 	stclvs	3, cr7, [r5, #-380]!	; 0xfffffe84
    230c:	0100682e 	tsteq	r0, lr, lsr #16
    2310:	61720000 	cmnvs	r2, r0
    2314:	75715f77 	ldrbvc	r5, [r1, #-3959]!	; 0xf77
    2318:	2e657565 	cdpcs	5, 6, cr7, cr5, cr5, {3}
    231c:	00010068 	andeq	r0, r1, r8, rrx
    2320:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    2324:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
    2328:	625f6575 	subsvs	r6, pc, #490733568	; 0x1d400000
    232c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    2330:	00682e72 	rsbeq	r2, r8, r2, ror lr
    2334:	72000001 	andvc	r0, r0, #1
    2338:	655f7761 	ldrbvs	r7, [pc, #-1889]	; 1bdf <DISABLE_IRQ+0x1b5f>
    233c:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
    2340:	0100682e 	tsteq	r0, lr, lsr #16
    2344:	61720000 	cmnvs	r2, r0
    2348:	61745f77 	cmnvs	r4, r7, ror pc
    234c:	305f6b73 	subscc	r6, pc, r3, ror fp
    2350:	0100682e 	tsteq	r0, lr, lsr #16
    2354:	61720000 	cmnvs	r2, r0
    2358:	6e695f77 	mcrvs	15, 3, r5, cr9, cr7, {3}
    235c:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    2360:	682e6c61 	stmdavs	lr!, {r0, r5, r6, sl, fp, sp, lr}
    2364:	00000100 	andeq	r0, r0, r0, lsl #2
    2368:	02050000 	andeq	r0, r5, #0
    236c:	30006190 	mulcc	r0, r0, r1
    2370:	0104bf03 	tsteq	r4, r3, lsl #30
    2374:	08312b31 	ldmdaeq	r1!, {r0, r4, r5, r8, r9, fp, sp}
    2378:	7fa803af 	svcvc	0x00a803af
    237c:	00d8034a 	sbcseq	r0, r8, sl, asr #6
    2380:	7fa4032e 	svcvc	0x00a4032e
    2384:	322a4e2e 	eorcc	r4, sl, #736	; 0x2e0
    2388:	00cf0368 	sbceq	r0, pc, r8, ror #6
    238c:	7fb1032e 	svcvc	0x00b1032e
    2390:	00cf032e 	sbceq	r0, pc, lr, lsr #6
    2394:	7fba032e 	svcvc	0x00ba032e
    2398:	0329312e 	teqeq	r9, #-2147483637	; 0x8000000b
    239c:	cb034a09 	blgt	d4bc8 <DISABLE_IRQ+0xd4b48>
    23a0:	ab034a00 	blge	d4ba8 <DISABLE_IRQ+0xd4b28>
    23a4:	6d90087e 	ldcvs	8, cr0, [r0, #504]	; 0x1f8
    23a8:	0800c403 	stmdaeq	r0, {r0, r1, sl, lr, pc}
    23ac:	821803c8 	andshi	r0, r8, #536870915	; 0x20000003
    23b0:	30306730 	eorscc	r6, r0, r0, lsr r7
    23b4:	667fb803 	ldrbtvs	fp, [pc], -r3, lsl #16
    23b8:	319f319f 	undefined instruction 0x319f319f
    23bc:	039f359f 	orrseq	r3, pc, #666894336	; 0x27c00000
    23c0:	31672e62 	cmncc	r7, r2, ror #28
    23c4:	2e720367 	cdpcs	3, 7, cr0, cr2, cr7, {3}
    23c8:	2e2e034b 	cdpcs	3, 2, cr0, cr14, cr11, {2}
    23cc:	31d731d7 	ldrsbcc	r3, [r7, #23]
    23d0:	7cea03d7 	stclvc	3, cr0, [sl], #860	; 0x35c
    23d4:	33322e4a 	teqcc	r2, #1184	; 0x4a0
    23d8:	03314f51 	teqeq	r1, #324	; 0x144
    23dc:	036601a4 	cmneq	r6, #41	; 0x29
    23e0:	2c304a0a 	ldccs	10, cr4, [r0], #-40	; 0xffffffd8
    23e4:	33c14c30 	biccc	r4, r1, #12288	; 0x3000
    23e8:	032e0c03 	teqeq	lr, #768	; 0x300
    23ec:	2c302e6d 	ldccs	14, cr2, [r0], #-436	; 0xfffffe4c
    23f0:	332c3030 	teqcc	ip, #48	; 0x30
    23f4:	5161362b 	cmnpl	r1, fp, lsr #12
    23f8:	362b2c2c 	strtcc	r2, [fp], -ip, lsr #24
    23fc:	31302c50 	teqcc	r0, r0, asr ip
    2400:	309e6803 	addscc	r6, lr, r3, lsl #16
    2404:	2c30302c 	ldccs	0, cr3, [r0], #-176	; 0xffffff50
    2408:	2c2e1e03 	stccs	14, cr1, [lr], #-12
    240c:	03302f30 	teqeq	r0, #192	; 0xc0
    2410:	03200809 	teqeq	r0, #589824	; 0x90000
    2414:	0b036612 	bleq	dbc64 <DISABLE_IRQ+0xdbbe4>
    2418:	4a63032e 	bmi	18c30d8 <MEM_SIZE+0x10c30d8>
    241c:	4d2e0f03 	stcmi	15, cr0, [lr, #-12]!
    2420:	032e1803 	teqeq	lr, #196608	; 0x30000
    2424:	0b032e68 	bleq	cddcc <DISABLE_IRQ+0xcdd4c>
    2428:	2a342c4a 	bcs	d0d558 <MEM_SIZE+0x50d558>
    242c:	3230464e 	eorscc	r4, r0, #81788928	; 0x4e00000
    2430:	3147342c 	cmpcc	r7, ip, lsr #8
    2434:	9e630331 	mcrls	3, 3, r0, cr3, cr1, {1}
    2438:	03302c30 	teqeq	r0, #12288	; 0x3000
    243c:	74032e0c 	strvc	r2, [r3], #-3596	; 0xe0c
    2440:	2e23032e 	cdpcs	3, 2, cr0, cr3, cr14, {1}
    2444:	35302c30 	ldrcc	r2, [r0, #-3120]!	; 0xc30
    2448:	2b312b31 	blcs	c4d114 <MEM_SIZE+0x44d114>
    244c:	354d2b69 	strbcc	r2, [sp, #-2921]	; 0xb69
    2450:	44035231 	strmi	r5, [r3], #-561	; 0x231
    2454:	032f6766 	teqeq	pc, #26738688	; 0x1980000
    2458:	20087eb9 	undefined instruction 0x20087eb9
    245c:	3329332e 	teqcc	r9, #-1207959552	; 0xb8000000
    2460:	33293329 	teqcc	r9, #-1543503872	; 0xa4000000
    2464:	034a3803 	movteq	r3, #43011	; 0xa803
    2468:	2b314a4e 	blcs	c54da8 <MEM_SIZE+0x454da8>
    246c:	66090331 	undefined instruction 0x66090331
    2470:	4d2b312b 	stfmis	f3, [fp, #-172]!	; 0xffffff54
    2474:	7903312f 	stmdbvc	r3, {r0, r1, r2, r3, r5, r8, ip, sp}
    2478:	0f03352e 	svceq	0x0003352e
    247c:	2f2d9f2e 	svccs	0x002d9f2e
    2480:	6a35322d 	bvs	d4ed3c <MEM_SIZE+0x54ed3c>
    2484:	312d302a 	teqcc	sp, sl, lsr #32
    2488:	2e54034c 	cdpcs	3, 5, cr0, cr4, cr12, {2}
    248c:	0c039f2f 	stceq	15, cr9, [r3], {47}	; 0x2f
    2490:	2c684c2e 	stclcs	12, cr4, [r8], #-184	; 0xffffff48
    2494:	00c80332 	sbceq	r0, r8, r2, lsr r3
    2498:	2f142008 	svccs	0x00142008
    249c:	2e650311 	mcrcs	3, 3, r0, cr5, cr1, {0}
    24a0:	03112f14 	tsteq	r1, #80	; 0x50
    24a4:	4a2e02c5 	bmi	b82fc0 <MEM_SIZE+0x382fc0>
    24a8:	140330bf 	strne	r3, [r3], #-191	; 0xbf
    24ac:	2e790382 	cdpcs	3, 7, cr0, cr9, cr2, {4}
    24b0:	29342a33 	ldmdbcs	r4!, {r0, r1, r4, r5, r9, fp, sp}
    24b4:	30332f2f 	eorscc	r2, r3, pc, lsr #30
    24b8:	034868bc 	movteq	r6, #35004	; 0x88bc
    24bc:	30842e68 	addcc	r2, r4, r8, ror #28
    24c0:	032e1603 	teqeq	lr, #3145728	; 0x300000
    24c4:	33d67ca7 	bicscc	r7, r6, #42752	; 0xa700
    24c8:	9e0e0389 	cdpls	3, 0, cr0, cr14, cr9, {4}
    24cc:	03666d03 	cmneq	r6, #192	; 0xc0
    24d0:	6d039e13 	stcvs	14, cr9, [r3, #-76]	; 0xffffffb4
    24d4:	0008022e 	andeq	r0, r8, lr, lsr #4
    24d8:	00ec0101 	rsceq	r0, ip, r1, lsl #2
    24dc:	00020000 	andeq	r0, r2, r0
    24e0:	000000b0 	strheq	r0, [r0], -r0
    24e4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    24e8:	0101000d 	tsteq	r1, sp
    24ec:	00000101 	andeq	r0, r0, r1, lsl #2
    24f0:	00000100 	andeq	r0, r0, r0, lsl #2
    24f4:	00002e01 	andeq	r2, r0, r1, lsl #28
    24f8:	5f776172 	svcpl	0x00776172
    24fc:	6b736174 	blvs	1cdaad4 <MEM_SIZE+0x14daad4>
    2500:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
    2504:	735f6575 	cmpvc	pc, #490733568	; 0x1d400000
    2508:	2e657a69 	vnmulcs.f32	s15, s10, s19
    250c:	00000063 	andeq	r0, r0, r3, rrx
    2510:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    2514:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    2518:	00682e65 	rsbeq	r2, r8, r5, ror #28
    251c:	72000001 	andvc	r0, r0, #1
    2520:	695f7761 	ldmdbvs	pc, {r0, r5, r6, r8, r9, sl, ip, sp, lr}^
    2524:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2528:	5f6c616e 	svcpl	0x006c616e
    252c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    2530:	0100682e 	tsteq	r0, lr, lsr #16
    2534:	61720000 	cmnvs	r2, r0
    2538:	696c5f77 	stmdbvs	ip!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    253c:	682e7473 	stmdavs	lr!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
    2540:	00000100 	andeq	r0, r0, r0, lsl #2
    2544:	5f776172 	svcpl	0x00776172
    2548:	2e6a626f 	cdpcs	2, 6, cr6, cr10, cr15, {3}
    254c:	00010068 	andeq	r0, r1, r8, rrx
    2550:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    2554:	74756d5f 	ldrbtvc	r6, [r5], #-3423	; 0xd5f
    2558:	682e7865 	stmdavs	lr!, {r0, r2, r5, r6, fp, ip, sp, lr}
    255c:	00000100 	andeq	r0, r0, r0, lsl #2
    2560:	5f776172 	svcpl	0x00776172
    2564:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    2568:	69735f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    256c:	682e657a 	stmdavs	lr!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}
    2570:	00000100 	andeq	r0, r0, r0, lsl #2
    2574:	5f776172 	svcpl	0x00776172
    2578:	2e6d6573 	mcrcs	5, 3, r6, cr13, cr3, {3}
    257c:	00010068 	andeq	r0, r1, r8, rrx
    2580:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    2584:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
    2588:	616e7265 	cmnvs	lr, r5, ror #4
    258c:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    2590:	00000001 	andeq	r0, r0, r1
    2594:	54020500 	strpl	r0, [r2], #-1280	; 0x500
    2598:	03300068 	teqeq	r0, #104	; 0x68
    259c:	300101ed 	andcc	r0, r1, sp, ror #3
    25a0:	4a62034c 	bmi	18832d8 <MEM_SIZE+0x10832d8>
    25a4:	65034b30 	strvs	r4, [r3, #-2864]	; 0xb30
    25a8:	034c304a 	movteq	r3, #49226	; 0xc04a
    25ac:	4b304a63 	blmi	c14f40 <MEM_SIZE+0x414f40>
    25b0:	304a5803 	subcc	r5, sl, r3, lsl #16
    25b4:	4a60034b 	bmi	18032e8 <MEM_SIZE+0x10032e8>
    25b8:	302e2c14 	eorcc	r2, lr, r4, lsl ip
    25bc:	03834c2c 	orreq	r4, r3, #11264	; 0x2c00
    25c0:	304c6653 	subcc	r6, ip, r3, asr r6
    25c4:	000402a0 	andeq	r0, r4, r0, lsr #5
    25c8:	00db0101 	sbcseq	r0, fp, r1, lsl #2
    25cc:	00020000 	andeq	r0, r2, r0
    25d0:	000000a9 	andeq	r0, r0, r9, lsr #1
    25d4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    25d8:	0101000d 	tsteq	r1, sp
    25dc:	00000101 	andeq	r0, r0, r1, lsl #2
    25e0:	00000100 	andeq	r0, r0, r0, lsl #2
    25e4:	00002e01 	andeq	r2, r0, r1, lsl #28
    25e8:	5f776172 	svcpl	0x00776172
    25ec:	6b736174 	blvs	1cdabc4 <MEM_SIZE+0x14dabc4>
    25f0:	6d65735f 	stclvs	3, cr7, [r5, #-380]!	; 0xfffffe84
    25f4:	0000632e 	andeq	r6, r0, lr, lsr #6
    25f8:	61720000 	cmnvs	r2, r0
    25fc:	79745f77 	ldmdbvc	r4!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2600:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    2604:	00000100 	andeq	r0, r0, r0, lsl #2
    2608:	5f776172 	svcpl	0x00776172
    260c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    2610:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    2614:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    2618:	00682e65 	rsbeq	r2, r8, r5, ror #28
    261c:	72000001 	andvc	r0, r0, #1
    2620:	6c5f7761 	mrrcvs	7, 6, r7, pc, cr1
    2624:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
    2628:	00010068 	andeq	r0, r1, r8, rrx
    262c:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    2630:	6a626f5f 	bvs	189e3b4 <MEM_SIZE+0x109e3b4>
    2634:	0100682e 	tsteq	r0, lr, lsr #16
    2638:	61720000 	cmnvs	r2, r0
    263c:	756d5f77 	strbvc	r5, [sp, #-3959]!	; 0xf77
    2640:	2e786574 	mrccs	5, 3, r6, cr8, cr4, {3}
    2644:	00010068 	andeq	r0, r1, r8, rrx
    2648:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    264c:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
    2650:	735f6575 	cmpvc	pc, #490733568	; 0x1d400000
    2654:	2e657a69 	vnmulcs.f32	s15, s10, s19
    2658:	00010068 	andeq	r0, r1, r8, rrx
    265c:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    2660:	6d65735f 	stclvs	3, cr7, [r5, #-380]!	; 0xfffffe84
    2664:	0100682e 	tsteq	r0, lr, lsr #16
    2668:	61720000 	cmnvs	r2, r0
    266c:	6e695f77 	mcrvs	15, 3, r5, cr9, cr7, {3}
    2670:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    2674:	682e6c61 	stmdavs	lr!, {r0, r5, r6, sl, fp, sp, lr}
    2678:	00000100 	andeq	r0, r0, r0, lsl #2
    267c:	02050000 	andeq	r0, r5, #0
    2680:	30006914 	andcc	r6, r0, r4, lsl r9
    2684:	01019b03 	tsteq	r1, r3, lsl #22
    2688:	69034b2f 	stmdbvs	r3, {r0, r1, r2, r3, r5, r8, r9, fp, lr}
    268c:	034b2f4a 	movteq	r2, #48970	; 0xbf4a
    2690:	2d134a66 	vldrcs	s8, [r3, #-408]	; 0xfffffe68
    2694:	4b2f2d2f 	blmi	bcdb58 <MEM_SIZE+0x3cdb58>
    2698:	2f665f03 	svccs	0x00665f03
    269c:	4a66034b 	bmi	19833d0 <MEM_SIZE+0x11833d0>
    26a0:	83302d2f 	teqhi	r0, #3008	; 0xbc0
    26a4:	01000402 	tsteq	r0, r2, lsl #8
    26a8:	00020701 	andeq	r0, r2, r1, lsl #14
    26ac:	c2000200 	andgt	r0, r0, #0
    26b0:	02000000 	andeq	r0, r0, #0
    26b4:	0d0efb01 	vstreq	d15, [lr, #-4]
    26b8:	01010100 	tsteq	r1, r0, lsl #2
    26bc:	00000001 	andeq	r0, r0, r1
    26c0:	01000001 	tsteq	r0, r1
    26c4:	7200002e 	andvc	r0, r0, #46	; 0x2e
    26c8:	745f7761 	ldrbvc	r7, [pc], #1889	; 26d0 <DISABLE_IRQ+0x2650>
    26cc:	2e6b6369 	cdpcs	3, 6, cr6, cr11, cr9, {3}
    26d0:	00000063 	andeq	r0, r0, r3, rrx
    26d4:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    26d8:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
    26dc:	00682e74 	rsbeq	r2, r8, r4, ror lr
    26e0:	72000001 	andvc	r0, r0, #1
    26e4:	745f7761 	ldrbvc	r7, [pc], #1889	; 26ec <DISABLE_IRQ+0x266c>
    26e8:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    26ec:	00010068 	andeq	r0, r1, r8, rrx
    26f0:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    26f4:	7570635f 	ldrbvc	r6, [r0, #-863]!	; 0x35f
    26f8:	0100682e 	tsteq	r0, lr, lsr #16
    26fc:	61720000 	cmnvs	r2, r0
    2700:	6e695f77 	mcrvs	15, 3, r5, cr9, cr7, {3}
    2704:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    2708:	745f6c61 	ldrbvc	r6, [pc], #3169	; 2710 <DISABLE_IRQ+0x2690>
    270c:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    2710:	00010068 	andeq	r0, r1, r8, rrx
    2714:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    2718:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    271c:	2e6d6574 	mcrcs	5, 3, r6, cr13, cr4, {3}
    2720:	00010068 	andeq	r0, r1, r8, rrx
    2724:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    2728:	6a626f5f 	bvs	189e4ac <MEM_SIZE+0x109e4ac>
    272c:	0100682e 	tsteq	r0, lr, lsr #16
    2730:	61720000 	cmnvs	r2, r0
    2734:	756d5f77 	strbvc	r5, [sp, #-3959]!	; 0xf77
    2738:	2e786574 	mrccs	5, 3, r6, cr8, cr4, {3}
    273c:	00010068 	andeq	r0, r1, r8, rrx
    2740:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    2744:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
    2748:	735f6575 	cmpvc	pc, #490733568	; 0x1d400000
    274c:	2e657a69 	vnmulcs.f32	s15, s10, s19
    2750:	00010068 	andeq	r0, r1, r8, rrx
    2754:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    2758:	6d65735f 	stclvs	3, cr7, [r5, #-380]!	; 0xfffffe84
    275c:	0100682e 	tsteq	r0, lr, lsr #16
    2760:	61720000 	cmnvs	r2, r0
    2764:	6e695f77 	mcrvs	15, 3, r5, cr9, cr7, {3}
    2768:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    276c:	682e6c61 	stmdavs	lr!, {r0, r5, r6, sl, fp, sp, lr}
    2770:	00000100 	andeq	r0, r0, r0, lsl #2
    2774:	02050000 	andeq	r0, r5, #0
    2778:	30006998 	mulcc	r0, r8, r9
    277c:	01011f03 	tsteq	r1, r3, lsl #30
    2780:	0302042d 	movweq	r0, #9261	; 0x242d
    2784:	042f2e12 	strteq	r2, [pc], #3602	; 278c <DISABLE_IRQ+0x270c>
    2788:	4a710301 	bmi	1c43394 <MEM_SIZE+0x1443394>
    278c:	4a20034e 	bmi	8034cc <MEM_SIZE+0x34cc>
    2790:	30332917 	eorscc	r2, r3, r7, lsl r9
    2794:	2d2f2a32 	vstmdbcs	pc!, {s4-s53}
    2798:	2e620332 	mcrcs	3, 3, r0, cr2, cr2, {1}
    279c:	032e1e03 	teqeq	lr, #48	; 0x30
    27a0:	1a032e62 	bne	ce130 <DISABLE_IRQ+0xce0b0>
    27a4:	2e66032e 	cdpcs	3, 6, cr0, cr6, cr14, {1}
    27a8:	030204a4 	movweq	r0, #9380	; 0x24a4
    27ac:	0104820c 	tsteq	r4, ip, lsl #4
    27b0:	042e7903 	strteq	r7, [lr], #-2307	; 0x903
    27b4:	2c313502 	cfldr32cs	mvfx3, [r1], #-8
    27b8:	01042d31 	tsteq	r4, r1, lsr sp
    27bc:	322e0d03 	eorcc	r0, lr, #192	; 0xc0
    27c0:	034a5a03 	movteq	r5, #43523	; 0xaa03
    27c4:	0415822b 	ldreq	r8, [r5], #-555	; 0x22b
    27c8:	666f0302 	strbtvs	r0, [pc], -r2, lsl #6
    27cc:	03010467 	movweq	r0, #5223	; 0x1467
    27d0:	9d034a14 	vstrls	s8, [r3, #-80]	; 0xffffffb0
    27d4:	2b316601 	blcs	c5bfe0 <MEM_SIZE+0x45bfe0>
    27d8:	a0cb0831 	sbcge	r0, fp, r1, lsr r8
    27dc:	087ef603 	ldmdaeq	lr!, {r0, r1, r9, sl, ip, sp, lr, pc}^
    27e0:	2e0b0320 	cdpcs	3, 0, cr0, cr11, cr0, {1}
    27e4:	30682c68 	rsbcc	r2, r8, r8, ror #24
    27e8:	2d2f302c 	stccs	0, cr3, [pc, #-176]!	; 0xffffff50
    27ec:	2e780334 	mrccs	3, 3, r0, cr8, cr4, {1}
    27f0:	4f323036 	svcmi	0x00323036
    27f4:	032e1103 	teqeq	lr, #-1073741824	; 0xc0000000
    27f8:	5a032e10 	bpl	ce040 <DISABLE_IRQ+0xcdfc0>
    27fc:	4403302e 	strmi	r3, [r3], #-46	; 0x2e
    2800:	02045808 	andeq	r5, r4, #524288	; 0x80000
    2804:	67666f03 	strbvs	r6, [r6, -r3, lsl #30]!
    2808:	14030104 	strne	r0, [r3], #-260	; 0x104
    280c:	0302044a 	movweq	r0, #9290	; 0x244a
    2810:	01042e6b 	tsteq	r4, fp, ror #28
    2814:	2e00ed03 	cdpcs	13, 0, cr14, cr0, cr3, {0}
    2818:	93030204 	movwls	r0, #12804	; 0x3204
    281c:	042f2e7f 	strteq	r2, [pc], #3711	; 2824 <DISABLE_IRQ+0x27a4>
    2820:	00ec0301 	rsceq	r0, ip, r1, lsl #6
    2824:	2f2c334a 	svccs	0x002c334a
    2828:	4c2e5403 	cfstrsmi	mvf5, [lr], #-12
    282c:	00cd034e 	sbceq	r0, sp, lr, asr #6
    2830:	03210882 	teqeq	r1, #8519680	; 0x820000
    2834:	034a7ef8 	movteq	r7, #44792	; 0xaef8
    2838:	032e00e6 	teqeq	lr, #230	; 0xe6
    283c:	032e7f9a 	teqeq	lr, #616	; 0x268
    2840:	032e00e7 	teqeq	lr, #231	; 0xe7
    2844:	042e7f99 	strteq	r7, [lr], #-3993	; 0xf99
    2848:	2e6f0302 	cdpcs	3, 6, cr0, cr15, cr2, {0}
    284c:	03010467 	movweq	r0, #5223	; 0x1467
    2850:	03464a14 	movteq	r4, #27156	; 0x6a14
    2854:	41032e3f 	tstmi	r3, pc, lsr lr
    2858:	00c0032e 	sbceq	r0, r0, lr, lsr #6
    285c:	2e40032e 	cdpcs	3, 4, cr0, cr0, cr14, {1}
    2860:	6f030204 	svcvs	0x00030204
    2864:	0104672e 	tsteq	r4, lr, lsr #14
    2868:	034a1403 	movteq	r1, #41987	; 0xa403
    286c:	03672e3e 	cmneq	r7, #992	; 0x3e0
    2870:	042e7fbd 	strteq	r7, [lr], #-4029	; 0xfbd
    2874:	666f0302 	strbtvs	r0, [pc], -r2, lsl #6
    2878:	03010467 	movweq	r0, #5223	; 0x1467
    287c:	02044a14 	andeq	r4, r4, #81920	; 0x14000
    2880:	042e6b03 	strteq	r6, [lr], #-2819	; 0xb03
    2884:	00db0301 	sbcseq	r0, fp, r1, lsl #6
    2888:	0302042e 	movweq	r0, #9262	; 0x242e
    288c:	2f2e7fa5 	svccs	0x002e7fa5
    2890:	da030104 	ble	c2ca8 <DISABLE_IRQ+0xc2c28>
    2894:	02042e00 	andeq	r2, r4, #0
    2898:	2e7fa603 	cdpcs	6, 7, cr10, cr15, cr3, {0}
    289c:	da030104 	ble	c2cb4 <DISABLE_IRQ+0xc2c34>
    28a0:	4f312e00 	svcmi	0x00312e00
    28a4:	03302f2c 	teqeq	r0, #176	; 0xb0
    28a8:	4fc02e34 	svcmi	0x00c02e34
    28ac:	02674b4c 	rsbeq	r4, r7, #77824	; 0x13000
    28b0:	01010006 	tsteq	r1, r6
    28b4:	00000242 	andeq	r0, r0, r2, asr #4
    28b8:	00c50002 	sbceq	r0, r5, r2
    28bc:	01020000 	tsteq	r2, r0
    28c0:	000d0efb 	strdeq	r0, [sp], -fp
    28c4:	01010101 	tsteq	r1, r1, lsl #2
    28c8:	01000000 	tsteq	r0, r0
    28cc:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    28d0:	61720000 	cmnvs	r2, r0
    28d4:	69745f77 	ldmdbvs	r4!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    28d8:	2e72656d 	cdpcs	5, 7, cr6, cr2, cr13, {3}
    28dc:	00000063 	andeq	r0, r0, r3, rrx
    28e0:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    28e4:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
    28e8:	00682e74 	rsbeq	r2, r8, r4, ror lr
    28ec:	72000001 	andvc	r0, r0, #1
    28f0:	745f7761 	ldrbvc	r7, [pc], #1889	; 28f8 <DISABLE_IRQ+0x2878>
    28f4:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    28f8:	00010068 	andeq	r0, r1, r8, rrx
    28fc:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    2900:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
    2904:	616e7265 	cmnvs	lr, r5, ror #4
    2908:	79745f6c 	ldmdbvc	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    290c:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    2910:	00000100 	andeq	r0, r0, r0, lsl #2
    2914:	5f776172 	svcpl	0x00776172
    2918:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0x973
    291c:	682e6d65 	stmdavs	lr!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}
    2920:	00000100 	andeq	r0, r0, r0, lsl #2
    2924:	5f776172 	svcpl	0x00776172
    2928:	2e6a626f 	cdpcs	2, 6, cr6, cr10, cr15, {3}
    292c:	00010068 	andeq	r0, r1, r8, rrx
    2930:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    2934:	74756d5f 	ldrbtvc	r6, [r5], #-3423	; 0xd5f
    2938:	682e7865 	stmdavs	lr!, {r0, r2, r5, r6, fp, ip, sp, lr}
    293c:	00000100 	andeq	r0, r0, r0, lsl #2
    2940:	5f776172 	svcpl	0x00776172
    2944:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    2948:	69735f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    294c:	682e657a 	stmdavs	lr!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}
    2950:	00000100 	andeq	r0, r0, r0, lsl #2
    2954:	5f776172 	svcpl	0x00776172
    2958:	2e6d6573 	mcrcs	5, 3, r6, cr13, cr3, {3}
    295c:	00010068 	andeq	r0, r1, r8, rrx
    2960:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    2964:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    2968:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
    296c:	00000100 	andeq	r0, r0, r0, lsl #2
    2970:	5f776172 	svcpl	0x00776172
    2974:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    2978:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    297c:	0100682e 	tsteq	r0, lr, lsr #16
    2980:	00000000 	andeq	r0, r0, r0
    2984:	6d240205 	sfmvs	f0, 4, [r4, #-20]!	; (stcvs 2, cr0, [r4, #-20]!)	; 0xffffffec
    2988:	b9033000 	stmdblt	r3, {ip, sp}
    298c:	812f0104 	teqhi	pc, r4, lsl #2
    2990:	0302042d 	movweq	r0, #9261	; 0x242d
    2994:	2f2e7bf8 	svccs	0x002e7bf8
    2998:	72030104 	andvc	r0, r3, #1
    299c:	049c034a 	ldreq	r0, [ip], #842	; 0x34a
    29a0:	84cd084a 	strbhi	r0, [sp], #2122	; 0x84a
    29a4:	58086503 	stmdapl	r8, {r0, r1, r8, sl, sp, lr}
    29a8:	4c2f2d13 	stcmi	13, cr2, [pc], #-76	; 0xffffffb4
    29ac:	3015302c 	andscc	r3, r5, ip, lsr #32
    29b0:	0330302c 	teqeq	r0, #44	; 0x2c
    29b4:	36827f84 	strcc	r7, [r2], r4, lsl #31
    29b8:	9e7d8f03 	cdpls	15, 7, cr8, cr13, cr3, {0}
    29bc:	2e03a003 	cdpcs	0, 0, cr10, cr3, cr3, {0}
    29c0:	682e5703 	stmdavs	lr!, {r0, r1, r8, r9, sl, ip, lr}
    29c4:	2c304c31 	ldccs	12, cr4, [r0], #-196	; 0xffffff3c
    29c8:	2e770335 	mrccs	3, 3, r0, cr7, cr5, {1}
    29cc:	352e0903 	strcc	r0, [lr, #-2307]!	; 0x903
    29d0:	322a312b 	eorcc	r3, sl, #-1073741814	; 0xc000000a
    29d4:	2e7cef03 	cdpcs	15, 7, cr14, cr12, cr3, {0}
    29d8:	4b6b0204 	blmi	1ac31f0 <MEM_SIZE+0x12c31f0>
    29dc:	03490104 	movteq	r0, #37124	; 0x9104
    29e0:	032e0392 	teqeq	lr, #1207959554	; 0x48000002
    29e4:	72034a0e 	andvc	r4, r3, #57344	; 0xe000
    29e8:	0330332e 	teqeq	r0, #-1207959552	; 0xb8000000
    29ec:	03667cce 	cmneq	r6, #52736	; 0xce00
    29f0:	032e03ae 	teqeq	lr, #-1207959550	; 0xb8000002
    29f4:	032e7cd2 	teqeq	lr, #53760	; 0xd200
    29f8:	032e03b0 	teqeq	lr, #-1073741822	; 0xc0000002
    29fc:	a42e7cd0 	strtge	r7, [lr], #-3280	; 0xcd0
    2a00:	2f8a0204 	svccs	0x008a0204
    2a04:	2d2f312d 	stfcss	f3, [pc, #-180]!	; 0xffffff4c
    2a08:	ae030104 	adfges	f0, f3, f4
    2a0c:	034c2e03 	movteq	r2, #52739	; 0xce03
    2a10:	4751665d 	undefined instruction 0x4751665d
    2a14:	03322a31 	teqeq	r2, #200704	; 0x31000
    2a18:	03302e33 	teqeq	r0, #816	; 0x330
    2a1c:	032e7ca6 	teqeq	lr, #42496	; 0xa600
    2a20:	329e02c9 	addscc	r0, lr, #-1879048180	; 0x9000000c
    2a24:	1303a56a 	movwne	sl, #13674	; 0x356a
    2a28:	4a720382 	bmi	1c83838 <MEM_SIZE+0x1483838>
    2a2c:	7db10388 	ldcvc	3, cr0, [r1, #544]!	; 0x220
    2a30:	02d0032e 	sbcseq	r0, r0, #-1207959552	; 0xb8000000
    2a34:	7db0032e 	ldcvc	3, cr0, [r0, #184]!	; 0xb8
    2a38:	4f02042e 	svcmi	0x0002042e
    2a3c:	4901044b 	stmdbmi	r1, {r0, r1, r3, r6, sl}
    2a40:	2e02cd03 	cdpcs	13, 0, cr12, cr2, cr3, {0}
    2a44:	a2034c4b 	andge	r4, r3, #19200	; 0x4b00
    2a48:	6a324a7f 	bvs	c9544c <MEM_SIZE+0x49544c>
    2a4c:	821603a6 	andshi	r0, r6, #-1744830462	; 0x98000002
    2a50:	6a4a7003 	bvs	129ea64 <MEM_SIZE+0xa9ea64>
    2a54:	7dea034f 	stclvc	3, cr0, [sl, #316]!	; 0x13c
    2a58:	6b02042e 	blvs	83b18 <DISABLE_IRQ+0x83a98>
    2a5c:	4901044b 	stmdbmi	r1, {r0, r1, r3, r6, sl}
    2a60:	2e029303 	cdpcs	3, 0, cr9, cr2, cr3, {0}
    2a64:	9e034c4b 	cdpls	12, 0, cr4, cr3, cr11, {2}
    2a68:	2a32827f 	bcs	ca346c <MEM_SIZE+0x4a346c>
    2a6c:	03a64f32 	undefined instruction 0x03a64f32
    2a70:	72038215 	andvc	r8, r3, #1342177281	; 0x50000001
    2a74:	2d688a66 	vstmdbcs	r8!, {s17-s118}
    2a78:	4c302d2f 	ldcmi	13, cr2, [r0], #-188	; 0xffffff44
    2a7c:	4a7f9203 	bmi	1fe7290 <MEM_SIZE+0x17e7290>
    2a80:	09036a33 	stmdbeq	r3, {r0, r1, r4, r5, r9, fp, sp, lr}
    2a84:	821f039e 	andshi	r0, pc, #2013265922	; 0x78000002
    2a88:	6b4a6703 	blvs	129c69c <MEM_SIZE+0xa9c69c>
    2a8c:	6b2f304f 	blvs	bcebd0 <MEM_SIZE+0x3cebd0>
    2a90:	d2033329 	andle	r3, r3, #-1543503872	; 0xa4000000
    2a94:	a903667e 	stmdbge	r3, {r1, r2, r3, r4, r5, r6, r9, sl, sp, lr}
    2a98:	d7032e01 	strle	r2, [r3, -r1, lsl #28]
    2a9c:	ac032e7e 	stcge	14, cr2, [r3], {126}	; 0x7e
    2aa0:	d4032e01 	strle	r2, [r3], #-3585	; 0xe01
    2aa4:	04a42e7e 	strteq	r2, [r4], #3710	; 0xe7e
    2aa8:	2d2f8a02 	vstmdbcs	pc!, {s16-s17}
    2aac:	01042f31 	tsteq	r4, r1, lsr pc
    2ab0:	2e019f03 	cdpcs	15, 0, cr9, cr1, cr3, {0}
    2ab4:	e0030204 	and	r0, r3, r4, lsl #4
    2ab8:	01042e7e 	tsteq	r4, lr, ror lr
    2abc:	2e01a003 	cdpcs	0, 0, cr10, cr1, cr3, {0}
    2ac0:	cc034c2f 	stcgt	12, cr4, [r3], {47}	; 0x2f
    2ac4:	3e03667e 	mcrcc	6, 0, r6, cr3, cr14, {3}
    2ac8:	4e2a329e 	mcrmi	2, 1, r3, cr10, cr14, {4}
    2acc:	036b6a4e 	cmneq	fp, #319488	; 0x4e000
    2ad0:	77039e13 	smladvc	r3, r3, lr, r9
    2ad4:	03312c4a 	teqeq	r1, #18944	; 0x4a00
    2ad8:	76032e0a 	strvc	r2, [r3], -sl, lsl #28
    2adc:	7903312e 	stmdbvc	r3, {r1, r2, r3, r5, r8, ip, sp}
    2ae0:	3129352e 	teqcc	r9, lr, lsr #10
    2ae4:	0204302f 	andeq	r3, r4, #47	; 0x2f
    2ae8:	2e7f9b03 	vaddcs.f64	d25, d15, d3
    2aec:	0301042f 	movweq	r0, #5167	; 0x142f
    2af0:	502e00ea 	eorpl	r0, lr, sl, ror #1
    2af4:	000a0246 	andeq	r0, sl, r6, asr #4
    2af8:	00c60101 	sbceq	r0, r6, r1, lsl #2
    2afc:	00020000 	andeq	r0, r2, r0
    2b00:	00000094 	muleq	r0, r4, r0
    2b04:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    2b08:	0101000d 	tsteq	r1, sp
    2b0c:	00000101 	andeq	r0, r0, r1, lsl #2
    2b10:	00000100 	andeq	r0, r0, r0, lsl #2
    2b14:	00002e01 	andeq	r2, r0, r1, lsl #28
    2b18:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
    2b1c:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
    2b20:	00632e6b 	rsbeq	r2, r3, fp, ror #28
    2b24:	72000000 	andvc	r0, r0, #0
    2b28:	745f7761 	ldrbvc	r7, [pc], #1889	; 2b30 <DISABLE_IRQ+0x2ab0>
    2b2c:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    2b30:	00010068 	andeq	r0, r1, r8, rrx
    2b34:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    2b38:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
    2b3c:	616e7265 	cmnvs	lr, r5, ror #4
    2b40:	79745f6c 	ldmdbvc	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    2b44:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    2b48:	00000100 	andeq	r0, r0, r0, lsl #2
    2b4c:	5f776172 	svcpl	0x00776172
    2b50:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
    2b54:	0100682e 	tsteq	r0, lr, lsr #16
    2b58:	61720000 	cmnvs	r2, r0
    2b5c:	626f5f77 	rsbvs	r5, pc, #476	; 0x1dc
    2b60:	00682e6a 	rsbeq	r2, r8, sl, ror #28
    2b64:	72000001 	andvc	r0, r0, #1
    2b68:	6d5f7761 	ldclvs	7, cr7, [pc, #-388]	; 0xfffffe7c
    2b6c:	78657475 	stmdavc	r5!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
    2b70:	0100682e 	tsteq	r0, lr, lsr #16
    2b74:	61720000 	cmnvs	r2, r0
    2b78:	75715f77 	ldrbvc	r5, [r1, #-3959]!	; 0xf77
    2b7c:	5f657565 	svcpl	0x00657565
    2b80:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    2b84:	0100682e 	tsteq	r0, lr, lsr #16
    2b88:	61720000 	cmnvs	r2, r0
    2b8c:	65735f77 	ldrbvs	r5, [r3, #-3959]!	; 0xf77
    2b90:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    2b94:	00000001 	andeq	r0, r0, r1
    2b98:	80020500 	andhi	r0, r2, r0, lsl #10
    2b9c:	03300072 	teqeq	r0, #114	; 0x72
    2ba0:	2c30012a 	ldfcss	f0, [r0], #-168	; 0xffffff58
    2ba4:	4c2c6d30 	stcmi	13, cr6, [ip], #-192	; 0xffffff40
    2ba8:	088729f7 	stmeq	r7, {r0, r1, r2, r4, r5, r6, r7, r8, fp, sp}
    2bac:	035d0840 	cmpeq	sp, #4194304	; 0x400000
    2bb0:	3174085e 	cmncc	r4, lr, asr r8
    2bb4:	82720367 	rsbshi	r0, r2, #-1677721599	; 0x9c000001
    2bb8:	73036731 	movwvc	r6, #14129	; 0x3731
    2bbc:	02673182 	rsbeq	r3, r7, #-2147483616	; 0x80000020
    2bc0:	01010008 	tsteq	r1, r8
    2bc4:	000000c2 	andeq	r0, r0, r2, asr #1
    2bc8:	00930002 	addseq	r0, r3, r2
    2bcc:	01020000 	tsteq	r2, r0
    2bd0:	000d0efb 	strdeq	r0, [sp], -fp
    2bd4:	01010101 	tsteq	r1, r1, lsl #2
    2bd8:	01000000 	tsteq	r0, r0
    2bdc:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    2be0:	65740000 	ldrbvs	r0, [r4]!
    2be4:	735f7473 	cmpvc	pc, #1929379840	; 0x73000000
    2be8:	632e6d65 	teqvs	lr, #6464	; 0x1940
    2bec:	00000000 	andeq	r0, r0, r0
    2bf0:	5f776172 	svcpl	0x00776172
    2bf4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    2bf8:	0100682e 	tsteq	r0, lr, lsr #16
    2bfc:	61720000 	cmnvs	r2, r0
    2c00:	6e695f77 	mcrvs	15, 3, r5, cr9, cr7, {3}
    2c04:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    2c08:	745f6c61 	ldrbvc	r6, [pc], #3169	; 2c10 <DISABLE_IRQ+0x2b90>
    2c0c:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    2c10:	00010068 	andeq	r0, r1, r8, rrx
    2c14:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    2c18:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
    2c1c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2c20:	72000001 	andvc	r0, r0, #1
    2c24:	6f5f7761 	svcvs	0x005f7761
    2c28:	682e6a62 	stmdavs	lr!, {r1, r5, r6, r9, fp, sp, lr}
    2c2c:	00000100 	andeq	r0, r0, r0, lsl #2
    2c30:	5f776172 	svcpl	0x00776172
    2c34:	6574756d 	ldrbvs	r7, [r4, #-1389]!	; 0x56d
    2c38:	00682e78 	rsbeq	r2, r8, r8, ror lr
    2c3c:	72000001 	andvc	r0, r0, #1
    2c40:	715f7761 	cmpvc	pc, r1, ror #14
    2c44:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    2c48:	7a69735f 	bvc	1a5f9cc <MEM_SIZE+0x125f9cc>
    2c4c:	00682e65 	rsbeq	r2, r8, r5, ror #28
    2c50:	72000001 	andvc	r0, r0, #1
    2c54:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
    2c58:	682e6d65 	stmdavs	lr!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}
    2c5c:	00000100 	andeq	r0, r0, r0, lsl #2
    2c60:	02050000 	andeq	r0, r5, #0
    2c64:	300073bc 	undefined instruction 0x300073bc
    2c68:	30012703 	andcc	r2, r1, r3, lsl #14
    2c6c:	326b302c 	rsbcc	r3, fp, #44	; 0x2c
    2c70:	4c30482c 	ldcmi	8, cr4, [r0], #-176	; 0xffffff50
    2c74:	7a087908 	bvc	22109c <DISABLE_IRQ+0x22101c>
    2c78:	74085c03 	strvc	r5, [r8], #-3075	; 0xc03
    2c7c:	03684b31 	cmneq	r8, #50176	; 0xc400
    2c80:	67329e6e 	ldrvs	r9, [r2, -lr, ror #28]!
    2c84:	000a0268 	andeq	r0, sl, r8, ror #4
    2c88:	00d30101 	sbcseq	r0, r3, r1, lsl #2
    2c8c:	00020000 	andeq	r0, r2, r0
    2c90:	00000095 	muleq	r0, r5, r0
    2c94:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    2c98:	0101000d 	tsteq	r1, sp
    2c9c:	00000101 	andeq	r0, r0, r1, lsl #2
    2ca0:	00000100 	andeq	r0, r0, r0, lsl #2
    2ca4:	00002e01 	andeq	r2, r0, r1, lsl #28
    2ca8:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
    2cac:	74756d5f 	ldrbtvc	r6, [r5], #-3423	; 0xd5f
    2cb0:	632e7865 	teqvs	lr, #6619136	; 0x650000
    2cb4:	00000000 	andeq	r0, r0, r0
    2cb8:	5f776172 	svcpl	0x00776172
    2cbc:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    2cc0:	0100682e 	tsteq	r0, lr, lsr #16
    2cc4:	61720000 	cmnvs	r2, r0
    2cc8:	6e695f77 	mcrvs	15, 3, r5, cr9, cr7, {3}
    2ccc:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    2cd0:	745f6c61 	ldrbvc	r6, [pc], #3169	; 2cd8 <DISABLE_IRQ+0x2c58>
    2cd4:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    2cd8:	00010068 	andeq	r0, r1, r8, rrx
    2cdc:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    2ce0:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
    2ce4:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2ce8:	72000001 	andvc	r0, r0, #1
    2cec:	6f5f7761 	svcvs	0x005f7761
    2cf0:	682e6a62 	stmdavs	lr!, {r1, r5, r6, r9, fp, sp, lr}
    2cf4:	00000100 	andeq	r0, r0, r0, lsl #2
    2cf8:	5f776172 	svcpl	0x00776172
    2cfc:	6574756d 	ldrbvs	r7, [r4, #-1389]!	; 0x56d
    2d00:	00682e78 	rsbeq	r2, r8, r8, ror lr
    2d04:	72000001 	andvc	r0, r0, #1
    2d08:	715f7761 	cmpvc	pc, r1, ror #14
    2d0c:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    2d10:	7a69735f 	bvc	1a5fa94 <MEM_SIZE+0x125fa94>
    2d14:	00682e65 	rsbeq	r2, r8, r5, ror #28
    2d18:	72000001 	andvc	r0, r0, #1
    2d1c:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
    2d20:	682e6d65 	stmdavs	lr!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}
    2d24:	00000100 	andeq	r0, r0, r0, lsl #2
    2d28:	02050000 	andeq	r0, r5, #0
    2d2c:	300074dc 	ldrdcc	r7, [r0], -ip
    2d30:	30013703 	andcc	r3, r1, r3, lsl #14
    2d34:	336b302c 	cmncc	fp, #44	; 0x2c
    2d38:	4d30642b 	cfldrsmi	mvf6, [r0, #-172]!	; 0xffffff54
    2d3c:	7a087908 	bvc	221164 <DISABLE_IRQ+0x2210e4>
    2d40:	74085403 	strvc	r5, [r8], #-1027	; 0x403
    2d44:	03502c52 	cmpeq	r0, #20992	; 0x5200
    2d48:	69684a78 	stmdbvs	r8!, {r3, r4, r5, r6, r9, fp, lr}^
    2d4c:	64032f2d 	strvs	r2, [r3], #-3885	; 0xf2d
    2d50:	502c52ba 	undefined instruction 0x502c52ba
    2d54:	4a76034c 	bmi	1d83a8c <MEM_SIZE+0x1583a8c>
    2d58:	2f2d6968 	svccs	0x002d6968
    2d5c:	01000c02 	tsteq	r0, r2, lsl #24
    2d60:	0000d501 	andeq	sp, r0, r1, lsl #10
    2d64:	a4000200 	strge	r0, [r0], #-512	; 0x200
    2d68:	02000000 	andeq	r0, r0, #0
    2d6c:	0d0efb01 	vstreq	d15, [lr, #-4]
    2d70:	01010100 	tsteq	r1, r0, lsl #2
    2d74:	00000001 	andeq	r0, r0, r1
    2d78:	01000001 	tsteq	r0, r1
    2d7c:	7400002e 	strvc	r0, [r0], #-46	; 0x2e
    2d80:	5f747365 	svcpl	0x00747365
    2d84:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    2d88:	00632e72 	rsbeq	r2, r3, r2, ror lr
    2d8c:	72000000 	andvc	r0, r0, #0
    2d90:	745f7761 	ldrbvc	r7, [pc], #1889	; 2d98 <DISABLE_IRQ+0x2d18>
    2d94:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    2d98:	00010068 	andeq	r0, r1, r8, rrx
    2d9c:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    2da0:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
    2da4:	616e7265 	cmnvs	lr, r5, ror #4
    2da8:	79745f6c 	ldmdbvc	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    2dac:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    2db0:	00000100 	andeq	r0, r0, r0, lsl #2
    2db4:	5f776172 	svcpl	0x00776172
    2db8:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
    2dbc:	0100682e 	tsteq	r0, lr, lsr #16
    2dc0:	61720000 	cmnvs	r2, r0
    2dc4:	626f5f77 	rsbvs	r5, pc, #476	; 0x1dc
    2dc8:	00682e6a 	rsbeq	r2, r8, sl, ror #28
    2dcc:	72000001 	andvc	r0, r0, #1
    2dd0:	6d5f7761 	ldclvs	7, cr7, [pc, #-388]	; 0xfffffe7c
    2dd4:	78657475 	stmdavc	r5!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
    2dd8:	0100682e 	tsteq	r0, lr, lsr #16
    2ddc:	61720000 	cmnvs	r2, r0
    2de0:	75715f77 	ldrbvc	r5, [r1, #-3959]!	; 0xf77
    2de4:	5f657565 	svcpl	0x00657565
    2de8:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    2dec:	0100682e 	tsteq	r0, lr, lsr #16
    2df0:	61720000 	cmnvs	r2, r0
    2df4:	65735f77 	ldrbvs	r5, [r3, #-3959]!	; 0xf77
    2df8:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    2dfc:	72000001 	andvc	r0, r0, #1
    2e00:	745f7761 	ldrbvc	r7, [pc], #1889	; 2e08 <DISABLE_IRQ+0x2d88>
    2e04:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    2e08:	0100682e 	tsteq	r0, lr, lsr #16
    2e0c:	00000000 	andeq	r0, r0, r0
    2e10:	76540205 	ldrbvc	r0, [r4], -r5, lsl #4
    2e14:	2c033000 	stccs	0, cr3, [r3], {0}
    2e18:	302c3001 	eorcc	r3, ip, r1
    2e1c:	f44c2c6d 	undefined instruction 0xf44c2c6d
    2e20:	65039308 	strvs	r9, [r3, #-776]	; 0x308
    2e24:	03303c08 	teqeq	r0, #2048	; 0x800
    2e28:	63159e6d 	tstvs	r5, #1744	; 0x6d0
    2e2c:	302ca031 	eorcc	sl, ip, r1, lsr r0
    2e30:	4767be31 	undefined instruction 0x4767be31
    2e34:	00120262 	andseq	r0, r2, r2, ror #4
    2e38:	00ed0101 	rsceq	r0, sp, r1, lsl #2
    2e3c:	00020000 	andeq	r0, r2, r0
    2e40:	000000b4 	strheq	r0, [r0], -r4
    2e44:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    2e48:	0101000d 	tsteq	r1, sp
    2e4c:	00000101 	andeq	r0, r0, r1, lsl #2
    2e50:	00000100 	andeq	r0, r0, r0, lsl #2
    2e54:	00002e01 	andeq	r2, r0, r1, lsl #28
    2e58:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
    2e5c:	6f6c625f 	svcvs	0x006c625f
    2e60:	632e6b63 	teqvs	lr, #101376	; 0x18c00
    2e64:	00000000 	andeq	r0, r0, r0
    2e68:	5f776172 	svcpl	0x00776172
    2e6c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    2e70:	0100682e 	tsteq	r0, lr, lsr #16
    2e74:	61720000 	cmnvs	r2, r0
    2e78:	6e695f77 	mcrvs	15, 3, r5, cr9, cr7, {3}
    2e7c:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    2e80:	745f6c61 	ldrbvc	r6, [pc], #3169	; 2e88 <DISABLE_IRQ+0x2e08>
    2e84:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    2e88:	00010068 	andeq	r0, r1, r8, rrx
    2e8c:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    2e90:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
    2e94:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2e98:	72000001 	andvc	r0, r0, #1
    2e9c:	6f5f7761 	svcvs	0x005f7761
    2ea0:	682e6a62 	stmdavs	lr!, {r1, r5, r6, r9, fp, sp, lr}
    2ea4:	00000100 	andeq	r0, r0, r0, lsl #2
    2ea8:	5f776172 	svcpl	0x00776172
    2eac:	6574756d 	ldrbvs	r7, [r4, #-1389]!	; 0x56d
    2eb0:	00682e78 	rsbeq	r2, r8, r8, ror lr
    2eb4:	72000001 	andvc	r0, r0, #1
    2eb8:	715f7761 	cmpvc	pc, r1, ror #14
    2ebc:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    2ec0:	7a69735f 	bvc	1a5fc44 <MEM_SIZE+0x125fc44>
    2ec4:	00682e65 	rsbeq	r2, r8, r5, ror #28
    2ec8:	72000001 	andvc	r0, r0, #1
    2ecc:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
    2ed0:	682e6d65 	stmdavs	lr!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}
    2ed4:	00000100 	andeq	r0, r0, r0, lsl #2
    2ed8:	5f776172 	svcpl	0x00776172
    2edc:	636f6c62 	cmnvs	pc, #25088	; 0x6200
    2ee0:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    2ee4:	72000001 	andvc	r0, r0, #1
    2ee8:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
    2eec:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    2ef0:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    2ef4:	00000001 	andeq	r0, r0, r1
    2ef8:	98020500 	stmdals	r2, {r8, sl}
    2efc:	03300077 	teqeq	r0, #119	; 0x77
    2f00:	2c300128 	ldfcss	f0, [r0], #-160	; 0xffffff60
    2f04:	312b6e30 	teqcc	fp, r0, lsr lr
    2f08:	0a03312b 	beq	cf3bc <DISABLE_IRQ+0xcf33c>
    2f0c:	037708d6 	cmneq	r7, #14024704	; 0xd60000
    2f10:	03676679 	cmneq	r7, #126877696	; 0x7900000
    2f14:	5166f259 	msrpl	SPSR_sx, r9, asr r2
    2f18:	2c302c30 	ldccs	12, cr2, [r0], #-192	; 0xffffff40
    2f1c:	76033430 	undefined instruction 0x76033430
    2f20:	7903894a 	stmdbvc	r3, {r1, r3, r6, r8, fp, pc}
    2f24:	0c02354a 	cfstr32eq	mvfx3, [r2], {74}	; 0x4a
    2f28:	fa010100 	blx	43330 <DISABLE_IRQ+0x432b0>
    2f2c:	02000000 	andeq	r0, r0, #0
    2f30:	0000b200 	andeq	fp, r0, r0, lsl #4
    2f34:	fb010200 	blx	4373e <DISABLE_IRQ+0x436be>
    2f38:	01000d0e 	tsteq	r0, lr, lsl #26
    2f3c:	00010101 	andeq	r0, r1, r1, lsl #2
    2f40:	00010000 	andeq	r0, r1, r0
    2f44:	002e0100 	eoreq	r0, lr, r0, lsl #2
    2f48:	73657400 	cmnvc	r5, #0
    2f4c:	79625f74 	stmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2f50:	632e6574 	teqvs	lr, #486539264	; 0x1d000000
    2f54:	00000000 	andeq	r0, r0, r0
    2f58:	5f776172 	svcpl	0x00776172
    2f5c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    2f60:	0100682e 	tsteq	r0, lr, lsr #16
    2f64:	61720000 	cmnvs	r2, r0
    2f68:	6e695f77 	mcrvs	15, 3, r5, cr9, cr7, {3}
    2f6c:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    2f70:	745f6c61 	ldrbvc	r6, [pc], #3169	; 2f78 <DISABLE_IRQ+0x2ef8>
    2f74:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    2f78:	00010068 	andeq	r0, r1, r8, rrx
    2f7c:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    2f80:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
    2f84:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2f88:	72000001 	andvc	r0, r0, #1
    2f8c:	6f5f7761 	svcvs	0x005f7761
    2f90:	682e6a62 	stmdavs	lr!, {r1, r5, r6, r9, fp, sp, lr}
    2f94:	00000100 	andeq	r0, r0, r0, lsl #2
    2f98:	5f776172 	svcpl	0x00776172
    2f9c:	6574756d 	ldrbvs	r7, [r4, #-1389]!	; 0x56d
    2fa0:	00682e78 	rsbeq	r2, r8, r8, ror lr
    2fa4:	72000001 	andvc	r0, r0, #1
    2fa8:	715f7761 	cmpvc	pc, r1, ror #14
    2fac:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    2fb0:	7a69735f 	bvc	1a5fd34 <MEM_SIZE+0x125fd34>
    2fb4:	00682e65 	rsbeq	r2, r8, r5, ror #28
    2fb8:	72000001 	andvc	r0, r0, #1
    2fbc:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
    2fc0:	682e6d65 	stmdavs	lr!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}
    2fc4:	00000100 	andeq	r0, r0, r0, lsl #2
    2fc8:	5f776172 	svcpl	0x00776172
    2fcc:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
    2fd0:	0100682e 	tsteq	r0, lr, lsr #16
    2fd4:	61720000 	cmnvs	r2, r0
    2fd8:	79735f77 	ldmdbvc	r3!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2fdc:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    2fe0:	0100682e 	tsteq	r0, lr, lsr #16
    2fe4:	00000000 	andeq	r0, r0, r0
    2fe8:	78ac0205 	stmiavc	ip!, {r0, r2, r9}
    2fec:	32033000 	andcc	r3, r3, #0
    2ff0:	302c3001 	eorcc	r3, ip, r1
    2ff4:	63312b6e 	teqvs	r1, #112640	; 0x1b800
    2ff8:	66090331 	undefined instruction 0x66090331
    2ffc:	79039308 	stmdbvc	r3, {r3, r8, r9, ip, pc}
    3000:	4e036766 	cdpmi	7, 0, cr6, cr3, cr6, {3}
    3004:	305166f2 	ldrshcc	r6, [r1], #-98	; 0xffffff9e
    3008:	302c302c 	eorcc	r3, ip, ip, lsr #32
    300c:	03a54c34 	undefined instruction 0x03a54c34
    3010:	30304a79 	eorscc	r4, r0, r9, ror sl
    3014:	302c302c 	eorcc	r3, ip, ip, lsr #32
    3018:	4a6a0334 	bmi	1a83cf0 <MEM_SIZE+0x1283cf0>
    301c:	4a7903a5 	bmi	1e43eb8 <MEM_SIZE+0x1643eb8>
    3020:	4a0c0335 	bmi	303cfc <DISABLE_IRQ+0x303c7c>
    3024:	01001002 	tsteq	r0, r2
    3028:	00009e01 	andeq	r9, r0, r1, lsl #28
    302c:	3b000200 	blcc	3834 <DISABLE_IRQ+0x37b4>
    3030:	02000000 	andeq	r0, r0, #0
    3034:	0d0efb01 	vstreq	d15, [lr, #-4]
    3038:	01010100 	tsteq	r1, r0, lsl #2
    303c:	00000001 	andeq	r0, r0, r1
    3040:	01000001 	tsteq	r0, r1
    3044:	7000002e 	andvc	r0, r0, lr, lsr #32
    3048:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
    304c:	00000063 	andeq	r0, r0, r3, rrx
    3050:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    3054:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    3058:	00682e65 	rsbeq	r2, r8, r5, ror #28
    305c:	72000001 	andvc	r0, r0, #1
    3060:	745f7761 	ldrbvc	r7, [pc], #1889	; 3068 <DISABLE_IRQ+0x2fe8>
    3064:	2e6b7361 	cdpcs	3, 6, cr7, cr11, cr1, {3}
    3068:	00010068 	andeq	r0, r1, r8, rrx
    306c:	05000000 	streq	r0, [r0]
    3070:	007a1002 	rsbseq	r1, sl, r2
    3074:	2c141830 	ldccs	8, cr1, [r4], {48}	; 0x30
    3078:	2f2f3230 	svccs	0x002f3230
    307c:	032f2f2f 	teqeq	pc, #188	; 0xbc
    3080:	0c032e75 	stceq	14, cr2, [r3], {117}	; 0x75
    3084:	2d332a2e 	vldmdbcs	r3!, {s4-s49}
    3088:	2d302d30 	ldccs	13, cr2, [r0, #-192]!	; 0xffffff40
    308c:	2d302d30 	ldccs	13, cr2, [r0, #-192]!	; 0xffffff40
    3090:	03304930 	teqeq	r0, #786432	; 0xc0000
    3094:	2b322e72 	blcs	c8ea64 <MEM_SIZE+0x48ea64>
    3098:	032e0d03 	teqeq	lr, #192	; 0xc0
    309c:	79032e7a 	stmdbvc	r3, {r1, r3, r4, r5, r6, r9, sl, fp, sp}
    30a0:	2f2f2f2e 	svccs	0x002f2f2e
    30a4:	2f2f2a33 	svccs	0x002f2a33
    30a8:	302d302f 	eorcc	r3, sp, pc, lsr #32
    30ac:	302d302d 	eorcc	r3, sp, sp, lsr #32
    30b0:	302d302d 	eorcc	r3, sp, sp, lsr #32
    30b4:	312b322d 	teqcc	fp, sp, lsr #4
    30b8:	1432146c 	ldrtne	r1, [r2], #-1132	; 0x46c
    30bc:	14311431 	ldrtne	r1, [r1], #-1073	; 0x431
    30c0:	14321431 	ldrtne	r1, [r2], #-1073	; 0x431
    30c4:	02021431 	andeq	r1, r2, #822083584	; 0x31000000
    30c8:	77010100 	strvc	r0, [r1, -r0, lsl #2]
    30cc:	02000001 	andeq	r0, r0, #1
    30d0:	0000f100 	andeq	pc, r0, r0, lsl #2
    30d4:	fb010200 	blx	438de <DISABLE_IRQ+0x4385e>
    30d8:	01000d0e 	tsteq	r0, lr, lsl #26
    30dc:	00010101 	andeq	r0, r1, r1, lsl #2
    30e0:	00010000 	andeq	r0, r1, r0
    30e4:	002e0100 	eoreq	r0, lr, r0, lsl #2
    30e8:	61727400 	cmnvs	r2, r0, lsl #8
    30ec:	632e6563 	teqvs	lr, #415236096	; 0x18c00000
    30f0:	00000000 	andeq	r0, r0, r0
    30f4:	5f776172 	svcpl	0x00776172
    30f8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    30fc:	0100682e 	tsteq	r0, lr, lsr #16
    3100:	61720000 	cmnvs	r2, r0
    3104:	6e695f77 	mcrvs	15, 3, r5, cr9, cr7, {3}
    3108:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    310c:	745f6c61 	ldrbvc	r6, [pc], #3169	; 3114 <DISABLE_IRQ+0x3094>
    3110:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    3114:	00010068 	andeq	r0, r1, r8, rrx
    3118:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    311c:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
    3120:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3124:	72000001 	andvc	r0, r0, #1
    3128:	6f5f7761 	svcvs	0x005f7761
    312c:	682e6a62 	stmdavs	lr!, {r1, r5, r6, r9, fp, sp, lr}
    3130:	00000100 	andeq	r0, r0, r0, lsl #2
    3134:	5f776172 	svcpl	0x00776172
    3138:	6574756d 	ldrbvs	r7, [r4, #-1389]!	; 0x56d
    313c:	00682e78 	rsbeq	r2, r8, r8, ror lr
    3140:	72000001 	andvc	r0, r0, #1
    3144:	715f7761 	cmpvc	pc, r1, ror #14
    3148:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    314c:	7a69735f 	bvc	1a5fed0 <MEM_SIZE+0x125fed0>
    3150:	00682e65 	rsbeq	r2, r8, r5, ror #28
    3154:	72000001 	andvc	r0, r0, #1
    3158:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
    315c:	682e6d65 	stmdavs	lr!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}
    3160:	00000100 	andeq	r0, r0, r0, lsl #2
    3164:	5f776172 	svcpl	0x00776172
    3168:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    316c:	00682e65 	rsbeq	r2, r8, r5, ror #28
    3170:	72000001 	andvc	r0, r0, #1
    3174:	715f7761 	cmpvc	pc, r1, ror #14
    3178:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    317c:	6675625f 	undefined instruction 0x6675625f
    3180:	2e726566 	cdpcs	5, 7, cr6, cr2, cr6, {3}
    3184:	00010068 	andeq	r0, r1, r8, rrx
    3188:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    318c:	6576655f 	ldrbvs	r6, [r6, #-1375]!	; 0x55f
    3190:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3194:	00000100 	andeq	r0, r0, r0, lsl #2
    3198:	5f776172 	svcpl	0x00776172
    319c:	636f6c62 	cmnvs	pc, #25088	; 0x6200
    31a0:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    31a4:	72000001 	andvc	r0, r0, #1
    31a8:	625f7761 	subsvs	r7, pc, #25427968	; 0x1840000
    31ac:	2e657479 	mcrcs	4, 3, r7, cr5, cr9, {3}
    31b0:	00010068 	andeq	r0, r1, r8, rrx
    31b4:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    31b8:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
    31bc:	2e305f6b 	cdpcs	15, 3, cr5, cr0, cr11, {3}
    31c0:	00010068 	andeq	r0, r1, r8, rrx
    31c4:	05000000 	streq	r0, [r0]
    31c8:	007b1002 	rsbseq	r1, fp, r2
    31cc:	31151730 	tstcc	r5, r0, lsr r7
    31d0:	32143115 	andscc	r3, r4, #1073741829	; 0x40000005
    31d4:	32153214 	andscc	r3, r5, #1073741825	; 0x40000001
    31d8:	32153213 	andscc	r3, r5, #805306369	; 0x30000001
    31dc:	32153215 	andscc	r3, r5, #1342177281	; 0x50000001
    31e0:	32163115 	andscc	r3, r6, #1073741829	; 0x40000005
    31e4:	33153115 	tstcc	r5, #1073741829	; 0x40000005
    31e8:	32153115 	andscc	r3, r5, #1073741829	; 0x40000005
    31ec:	31153215 	tstcc	r5, r5, lsl r2
    31f0:	32153214 	andscc	r3, r5, #1073741825	; 0x40000001
    31f4:	31143314 	tstcc	r4, r4, lsl r3
    31f8:	32143313 	andscc	r3, r4, #1275068416	; 0x4c000000
    31fc:	32163214 	andscc	r3, r6, #1073741825	; 0x40000001
    3200:	32153216 	andscc	r3, r5, #1610612737	; 0x60000001
    3204:	32143214 	andscc	r3, r4, #1073741825	; 0x40000001
    3208:	31143213 	tstcc	r4, r3, lsl r2
    320c:	31153314 	tstcc	r5, r4, lsl r3
    3210:	32133113 	andscc	r3, r3, #-1073741820	; 0xc0000004
    3214:	32153114 	andscc	r3, r5, #5
    3218:	32143215 	andscc	r3, r4, #1342177281	; 0x50000001
    321c:	32143217 	andscc	r3, r4, #1879048193	; 0x70000001
    3220:	32153214 	andscc	r3, r5, #1073741825	; 0x40000001
    3224:	32153215 	andscc	r3, r5, #1342177281	; 0x50000001
    3228:	31153215 	tstcc	r5, r5, lsl r2
    322c:	32133215 	andscc	r3, r3, #1342177281	; 0x50000001
    3230:	31143114 	tstcc	r4, r4, lsl r1
    3234:	32153115 	andscc	r3, r5, #1073741829	; 0x40000005
    3238:	31143215 	tstcc	r4, r5, lsl r2
    323c:	32153215 	andscc	r3, r5, #1342177281	; 0x50000001
    3240:	00020214 	andeq	r0, r2, r4, lsl r2
    3244:	00600101 	rsbeq	r0, r0, r1, lsl #2
    3248:	00020000 	andeq	r0, r2, r0
    324c:	0000001c 	andeq	r0, r0, ip, lsl r0
    3250:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3254:	0101000d 	tsteq	r1, sp
    3258:	00000101 	andeq	r0, r0, r1, lsl #2
    325c:	00000100 	andeq	r0, r0, r0, lsl #2
    3260:	70630001 	rsbvc	r0, r3, r1
    3264:	00732e75 	rsbseq	r2, r3, r5, ror lr
    3268:	00000000 	andeq	r0, r0, r0
    326c:	f8020500 	undefined instruction 0xf8020500
    3270:	0330007b 	teqeq	r0, #123	; 0x7b
    3274:	2f2f0119 	svccs	0x002f0119
    3278:	2f2f2f2f 	svccs	0x002f2f2f
    327c:	332f322f 	teqcc	pc, #-268435454	; 0xf0000002
    3280:	2f2f342f 	svccs	0x002f342f
    3284:	322f2f33 	eorcc	r2, pc, #204	; 0xcc
    3288:	332f2f2f 	teqcc	pc, #188	; 0xbc
    328c:	33332f2f 	teqcc	r3, #188	; 0xbc
    3290:	342f2f2f 	strtcc	r2, [pc], #3887	; 3298 <DISABLE_IRQ+0x3218>
    3294:	2f332f2f 	svccs	0x00332f2f
    3298:	2e0a032f 	cdpcs	3, 0, cr0, cr10, cr15, {1}
    329c:	342f2f2f 	strtcc	r2, [pc], #3887	; 32a4 <DISABLE_IRQ+0x3224>
    32a0:	2f332f2f 	svccs	0x00332f2f
    32a4:	0006022f 	andeq	r0, r6, pc, lsr #4
    32a8:	Address 0x000032a8 is out of bounds.


Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000051 	andeq	r0, r0, r1, asr r0
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	tsteq	r4, r0
       c:	00000000 	andeq	r0, r0, r0
      10:	30000040 	andcc	r0, r0, r0, asr #32
      14:	300000b0 	strhcc	r0, [r0], -r0
      18:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
      1c:	2f00732e 	svccs	0x0000732e
      20:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
      24:	6165722f 	cmnvs	r5, pc, lsr #4
      28:	6c69736c 	stclvs	3, cr7, [r9], #-432	; 0xfffffe50
      2c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
      30:	706f746b 	rsbvc	r7, pc, fp, ror #8
      34:	646f632f 	strbtvs	r6, [pc], #815	; 3c <MOD_MASK+0x1d>
      38:	69672f65 	stmdbvs	r7!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
      3c:	62756874 	rsbsvs	r6, r5, #7602176	; 0x740000
      40:	7761722f 	strbvc	r7, [r1, -pc, lsr #4]!
      44:	4700736f 	strmi	r7, [r0, -pc, ror #6]
      48:	4120554e 	teqmi	r0, lr, asr #10
      4c:	2e322053 	mrccs	0, 1, r2, cr2, cr3, {2}
      50:	01003032 	tsteq	r0, r2, lsr r0
      54:	00005280 	andeq	r5, r0, r0, lsl #5
      58:	14000200 	strne	r0, [r0], #-512	; 0x200
      5c:	04000000 	streq	r0, [r0]
      60:	00004901 	andeq	r4, r0, r1, lsl #18
      64:	00000000 	andeq	r0, r0, r0
      68:	00004030 	andeq	r4, r0, r0, lsr r0
      6c:	61747330 	cmnvs	r4, r0, lsr r3
      70:	732e7472 	teqvc	lr, #1912602624	; 0x72000000
      74:	6f682f00 	svcvs	0x00682f00
      78:	722f656d 	eorvc	r6, pc, #457179136	; 0x1b400000
      7c:	736c6165 	cmnvc	ip, #1073741849	; 0x40000019
      80:	442f6c69 	strtmi	r6, [pc], #3177	; 88 <DISABLE_IRQ+0x8>
      84:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
      88:	632f706f 	teqvs	pc, #111	; 0x6f
      8c:	2f65646f 	svccs	0x0065646f
      90:	68746967 	ldmdavs	r4!, {r0, r1, r2, r5, r6, r8, fp, sp, lr}^
      94:	722f6275 	eorvc	r6, pc, #1342177287	; 0x50000007
      98:	736f7761 	cmnvc	pc, #25427968	; 0x1840000
      9c:	554e4700 	strbpl	r4, [lr, #-1792]	; 0x700
      a0:	20534120 	subscs	r4, r3, r0, lsr #2
      a4:	30322e32 	eorscc	r2, r2, r2, lsr lr
      a8:	63800100 	orrvs	r0, r0, #0
      ac:	02000001 	andeq	r0, r0, #1
      b0:	00002800 	andeq	r2, r0, r0, lsl #16
      b4:	4d010400 	cfstrsmi	mvf0, [r1]
      b8:	01000000 	tsteq	r0, r0
      bc:	000000b8 	strheq	r0, [r0], -r8
      c0:	00000063 	andeq	r0, r0, r3, rrx
      c4:	300000b0 	strhcc	r0, [r0], -r0
      c8:	300001d4 	ldrdcc	r0, [r0], -r4
      cc:	00000087 	andeq	r0, r0, r7, lsl #1
      d0:	a0060102 	andge	r0, r6, r2, lsl #2
      d4:	02000000 	andeq	r0, r0, #0
      d8:	009e0801 	addseq	r0, lr, r1, lsl #16
      dc:	02020000 	andeq	r0, r2, #0
      e0:	00008b07 	andeq	r8, r0, r7, lsl #22
      e4:	05020200 	streq	r0, [r2, #-512]	; 0x200
      e8:	00000059 	andeq	r0, r0, r9, asr r0
      ec:	37070402 	strcc	r0, [r7, -r2, lsl #8]
      f0:	03000000 	movweq	r0, #0
      f4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
      f8:	08020074 	stmdaeq	r2, {r2, r4, r5, r6}
      fc:	00000005 	andeq	r0, r0, r5
     100:	07080200 	streq	r0, [r8, -r0, lsl #4]
     104:	0000002d 	andeq	r0, r0, sp, lsr #32
     108:	05070404 	streq	r0, [r7, #-1028]	; 0x404
     10c:	00000019 	andeq	r0, r0, r9, lsl r0
     110:	006b0401 	rsbeq	r0, fp, r1, lsl #8
     114:	04060000 	streq	r0, [r6]
     118:	00000071 	andeq	r0, r0, r1, ror r0
     11c:	01080107 	tsteq	r8, r7, lsl #2
     120:	00000044 	andeq	r0, r0, r4, asr #32
     124:	01010f01 	tsteq	r1, r1, lsl #30
     128:	0000008b 	andeq	r0, r0, fp, lsl #1
     12c:	01007009 	tsteq	r0, r9
     130:	00008b10 	andeq	r8, r0, r0, lsl fp
     134:	04060000 	streq	r0, [r6]
     138:	00000091 	muleq	r0, r1, r0
     13c:	0000960a 	andeq	r9, r0, sl, lsl #12
     140:	08010200 	stmdaeq	r1, {r9}
     144:	000000a7 	andeq	r0, r0, r7, lsr #1
     148:	000e010b 	andeq	r0, lr, fp, lsl #2
     14c:	08010000 	stmdaeq	r1, {}
     150:	0000b001 	andeq	fp, r0, r1
     154:	0000d430 	andeq	sp, r0, r0, lsr r4
     158:	be5d0130 	mrclt	1, 2, r0, cr13, cr0, {1}
     15c:	09000000 	stmdbeq	r0, {}
     160:	09010070 	stmdbeq	r1, {r4, r5, r6}
     164:	0000008b 	andeq	r0, r0, fp, lsl #1
     168:	00730c00 	rsbseq	r0, r3, r0, lsl #24
     16c:	00d40000 	sbcseq	r0, r4, r0
     170:	00f83000 	rscseq	r3, r8, r0
     174:	5d013000 	stcpl	0, cr3, [r1]
     178:	000000d7 	ldrdeq	r0, [r0], -r7
     17c:	0000810d 	andeq	r8, r0, sp, lsl #2
     180:	010e0000 	tsteq	lr, r0
     184:	00002392 	muleq	r0, r2, r3
     188:	f8011b01 	undefined instruction 0xf8011b01
     18c:	68300000 	ldmdavs	r0!, {}
     190:	00300001 	eorseq	r0, r0, r1
     194:	0f000000 	svceq	0x00000000
     198:	00002301 	andeq	r2, r0, r1, lsl #6
     19c:	01320100 	teqeq	r2, r0, lsl #2
     1a0:	30000168 	andcc	r0, r0, r8, ror #2
     1a4:	300001d4 	ldrdcc	r0, [r0], -r4
     1a8:	0000001f 	andeq	r0, r0, pc, lsl r0
     1ac:	0000012e 	andeq	r0, r0, lr, lsr #2
     1b0:	01006909 	tsteq	r0, r9, lsl #18
     1b4:	00004833 	andeq	r4, r0, r3, lsr r8
     1b8:	00731000 	rsbseq	r1, r3, r0
     1bc:	01980000 	orrseq	r0, r8, r0
     1c0:	01ac3000 	undefined instruction 0x01ac3000
     1c4:	39013000 	stmdbcc	r1, {ip, sp}
     1c8:	00019811 	andeq	r9, r1, r1, lsl r8
     1cc:	0001ac30 	andeq	sl, r1, r0, lsr ip
     1d0:	00810d30 	addeq	r0, r1, r0, lsr sp
     1d4:	00000000 	andeq	r0, r0, r0
     1d8:	00601200 	rsbeq	r1, r0, r0, lsl #4
     1dc:	013e0000 	teqeq	lr, r0
     1e0:	5d130000 	ldcpl	0, cr0, [r3]
     1e4:	01000000 	tsteq	r0, r0
     1e8:	202f1400 	eorcs	r1, pc, r0, lsl #8
     1ec:	16010000 	strne	r0, [r1], -r0
     1f0:	0000014f 	andeq	r0, r0, pc, asr #2
     1f4:	7cb80305 	ldcvc	3, cr0, [r8], #20
     1f8:	2e0a3000 	cdpcs	0, 0, cr3, cr10, cr0, {0}
     1fc:	15000001 	strne	r0, [r0, #-1]
     200:	000000ac 	andeq	r0, r0, ip, lsr #1
     204:	00483001 	subeq	r3, r8, r1
     208:	05010000 	streq	r0, [r1]
     20c:	007e2003 	rsbseq	r2, lr, r3
     210:	00550030 	subseq	r0, r5, r0, lsr r0
     214:	00020000 	andeq	r0, r2, r0
     218:	00000142 	andeq	r0, r0, r2, asr #2
     21c:	00eb0104 	rsceq	r0, fp, r4, lsl #2
     220:	01d40000 	bicseq	r0, r4, r0
     224:	02643000 	rsbeq	r3, r4, #0
     228:	62613000 	rsbvs	r3, r1, #0
     22c:	6d726f6e 	ldclvs	15, cr6, [r2, #-440]!	; 0xfffffe48
     230:	732e6c61 	teqvc	lr, #24832	; 0x6100
     234:	6f682f00 	svcvs	0x00682f00
     238:	722f656d 	eorvc	r6, pc, #457179136	; 0x1b400000
     23c:	736c6165 	cmnvc	ip, #1073741849	; 0x40000019
     240:	442f6c69 	strtmi	r6, [pc], #3177	; 248 <DISABLE_IRQ+0x1c8>
     244:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
     248:	632f706f 	teqvs	pc, #111	; 0x6f
     24c:	2f65646f 	svccs	0x0065646f
     250:	68746967 	ldmdavs	r4!, {r0, r1, r2, r5, r6, r8, fp, sp, lr}^
     254:	722f6275 	eorvc	r6, pc, #1342177287	; 0x50000007
     258:	736f7761 	cmnvc	pc, #25427968	; 0x1840000
     25c:	554e4700 	strbpl	r4, [lr, #-1792]	; 0x700
     260:	20534120 	subscs	r4, r3, r0, lsr #2
     264:	30322e32 	eorscc	r2, r2, r2, lsr lr
     268:	2f800100 	svccs	0x00800100
     26c:	02000001 	andeq	r0, r0, #1
     270:	00015600 	andeq	r5, r1, r0, lsl #12
     274:	4d010400 	cfstrsmi	mvf0, [r1]
     278:	01000000 	tsteq	r0, r0
     27c:	000000dc 	ldrdeq	r0, [r0], -ip
     280:	00000063 	andeq	r0, r0, r3, rrx
     284:	30000264 	andcc	r0, r0, r4, ror #4
     288:	30000350 	andcc	r0, r0, r0, asr r3
     28c:	00000146 	andeq	r0, r0, r6, asr #2
     290:	00f20102 	rscseq	r0, r2, r2, lsl #2
     294:	2f010000 	svccs	0x00010000
     298:	00004301 	andeq	r4, r0, r1, lsl #6
     29c:	00430100 	subeq	r0, r3, r0, lsl #2
     2a0:	03030000 	movweq	r0, #12288	; 0x3000
     2a4:	01000001 	tsteq	r0, r1
     2a8:	0000432f 	andeq	r4, r0, pc, lsr #6
     2ac:	04040000 	streq	r0, [r4]
     2b0:	00003707 	andeq	r3, r0, r7, lsl #14
     2b4:	e2010200 	and	r0, r1, #0
     2b8:	01000000 	tsteq	r0, r0
     2bc:	00430134 	subeq	r0, r3, r4, lsr r1
     2c0:	73010000 	movwvc	r0, #4096	; 0x1000
     2c4:	03000000 	movweq	r0, #0
     2c8:	000000bf 	strheq	r0, [r0], -pc
     2cc:	00433401 	subeq	r3, r3, r1, lsl #8
     2d0:	fd030000 	stc2	0, cr0, [r3]
     2d4:	01000000 	tsteq	r0, r0
     2d8:	00004335 	andeq	r4, r0, r5, lsr r3
     2dc:	01050000 	tsteq	r5, r0
     2e0:	000000c5 	andeq	r0, r0, r5, asr #1
     2e4:	64011c01 	strvs	r1, [r1], #-3073	; 0xc01
     2e8:	90300002 	eorsls	r0, r0, r2
     2ec:	01300002 	teqeq	r0, r2
     2f0:	0000965d 	andeq	r9, r0, sp, asr r6
     2f4:	74740600 	ldrbtvc	r0, [r4], #-1536	; 0x600
     2f8:	1d010062 	stcne	0, cr0, [r1, #-392]	; 0xfffffe78
     2fc:	00000043 	andeq	r0, r0, r3, asr #32
     300:	00250700 	eoreq	r0, r5, r0, lsl #14
     304:	02900000 	addseq	r0, r0, #0
     308:	02a03000 	adceq	r3, r0, #0
     30c:	5d013000 	stcpl	0, cr3, [r1]
     310:	000000b3 	strheq	r0, [r0], -r3
     314:	00003708 	andeq	r3, r0, r8, lsl #14
     318:	00003e00 	andeq	r3, r0, r0, lsl #28
     31c:	4a070000 	bmi	1c0324 <DISABLE_IRQ+0x1c02a4>
     320:	a0000000 	andge	r0, r0, r0
     324:	b8300002 	ldmdalt	r0!, {r1}
     328:	01300002 	teqeq	r0, r2
     32c:	0000d95d 	andeq	sp, r0, sp, asr r9
     330:	005c0800 	subseq	r0, ip, r0, lsl #16
     334:	00510000 	subseq	r0, r1, r0
     338:	67080000 	strvs	r0, [r8, -r0]
     33c:	64000000 	strvs	r0, [r0]
     340:	00000000 	andeq	r0, r0, r0
     344:	00cf0105 	sbceq	r0, pc, r5, lsl #2
     348:	3a010000 	bcc	40350 <DISABLE_IRQ+0x402d0>
     34c:	0002b801 	andeq	fp, r2, r1, lsl #16
     350:	00035030 	andeq	r5, r3, r0, lsr r0
     354:	2b5d0130 	blcs	174081c <MEM_SIZE+0xf4081c>
     358:	09000001 	stmdbeq	r0, {r0}
     35c:	00657470 	rsbeq	r7, r5, r0, ror r4
     360:	00433b01 	subeq	r3, r3, r1, lsl #22
     364:	00770000 	rsbseq	r0, r7, r0
     368:	e90a0000 	stmdb	sl, {}
     36c:	01000000 	tsteq	r0, r0
     370:	0000433c 	andeq	r4, r0, ip, lsr r3
     374:	006a0b00 	rsbeq	r0, sl, r0, lsl #22
     378:	012b3d01 	teqeq	fp, r1, lsl #26
     37c:	53010000 	movwpl	r0, #4096	; 0x1000
     380:	0000250c 	andeq	r2, r0, ip, lsl #10
     384:	0002ec00 	andeq	lr, r2, r0, lsl #24
     388:	0002f430 	andeq	pc, r2, r0, lsr r4
     38c:	0d490130 	stfeqe	f0, [r9, #-192]	; 0xffffff40
     390:	000000a9 	andeq	r0, r0, r9, lsr #1
     394:	040e0000 	streq	r0, [lr]
     398:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
     39c:	03e60000 	mvneq	r0, #0
     3a0:	00020000 	andeq	r0, r2, r0
     3a4:	0000021f 	andeq	r0, r0, pc, lsl r2
     3a8:	004d0104 	subeq	r0, sp, r4, lsl #2
     3ac:	2a010000 	bcs	403b4 <DISABLE_IRQ+0x40334>
     3b0:	63000001 	movwvs	r0, #1
     3b4:	50000000 	andpl	r0, r0, r0
     3b8:	00300003 	eorseq	r0, r0, r3
     3bc:	bf300008 	svclt	0x00300008
     3c0:	02000001 	andeq	r0, r0, #1
     3c4:	00a00601 	adceq	r0, r0, r1, lsl #12
     3c8:	01020000 	tsteq	r2, r0
     3cc:	00009e08 	andeq	r9, r0, r8, lsl #28
     3d0:	07020200 	streq	r0, [r2, -r0, lsl #4]
     3d4:	0000008b 	andeq	r0, r0, fp, lsl #1
     3d8:	59050202 	stmdbpl	r5, {r1, r9}
     3dc:	02000000 	andeq	r0, r0, #0
     3e0:	00370704 	eorseq	r0, r7, r4, lsl #14
     3e4:	04030000 	streq	r0, [r3]
     3e8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
     3ec:	05080200 	streq	r0, [r8, #-512]	; 0x200
     3f0:	00000000 	andeq	r0, r0, r0
     3f4:	2d070802 	stccs	8, cr0, [r7, #-8]
     3f8:	04000000 	streq	r0, [r0]
     3fc:	00000132 	andeq	r0, r0, r2, lsr r1
     400:	00412202 	subeq	r2, r1, r2, lsl #4
     404:	04050000 	streq	r0, [r5]
     408:	04040607 	streq	r0, [r4], #-1543	; 0x607
     40c:	00000141 	andeq	r0, r0, r1, asr #2
     410:	00780401 	rsbseq	r0, r8, r1, lsl #8
     414:	04070000 	streq	r0, [r7]
     418:	0000007e 	andeq	r0, r0, lr, ror r0
     41c:	a7080102 	strge	r0, [r8, -r2, lsl #2]
     420:	08000000 	stmdaeq	r0, {}
     424:	001c3901 	andseq	r3, ip, r1, lsl #18
     428:	014d0100 	cmpeq	sp, r0, lsl #2
     42c:	0000006b 	andeq	r0, r0, fp, rrx
     430:	0000cd01 	andeq	ip, r0, r1, lsl #26
     434:	01490900 	cmpeq	r9, r0, lsl #18
     438:	4d010000 	stcmi	0, cr0, [r1]
     43c:	0000006b 	andeq	r0, r0, fp, rrx
     440:	6372730a 	cmnvs	r2, #671088640	; 0x28000000
     444:	cd4d0100 	stfgte	f0, [sp]
     448:	09000000 	stmdbeq	r0, {}
     44c:	00000447 	andeq	r0, r0, r7, asr #8
     450:	00414d01 	subeq	r4, r1, r1, lsl #26
     454:	740b0000 	strvc	r0, [fp]
     458:	0100706d 	tsteq	r0, sp, rrx
     45c:	0000784f 	andeq	r7, r0, pc, asr #16
     460:	00730b00 	rsbseq	r0, r3, r0, lsl #22
     464:	00784f01 	rsbseq	r4, r8, r1, lsl #30
     468:	07000000 	streq	r0, [r0, -r0]
     46c:	0000d304 	andeq	sp, r0, r4, lsl #6
     470:	010d0c00 	tsteq	sp, r0, lsl #24
     474:	00000169 	andeq	r0, r0, r9, ror #2
     478:	0101f601 	tstpeq	r1, r1, lsl #12
     47c:	000000ef 	andeq	r0, r0, pc, ror #1
     480:	746d660a 	strbtvc	r6, [sp], #-1546	; 0x60a
     484:	eff60100 	svc	0x00f60100
     488:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     48c:	f5040700 	undefined instruction 0xf5040700
     490:	0f000000 	svceq	0x00000000
     494:	0000007e 	andeq	r0, r0, lr, ror r0
     498:	00008510 	andeq	r8, r0, r0, lsl r5
     49c:	00035000 	andeq	r5, r3, r0
     4a0:	00037430 	andeq	r7, r3, r0, lsr r4
     4a4:	2f5d0130 	svccs	0x005d0130
     4a8:	11000001 	tstne	r0, r1
     4ac:	00000097 	muleq	r0, r7, r0
     4b0:	000000a0 	andeq	r0, r0, r0, lsr #1
     4b4:	0000a212 	andeq	sl, r0, r2, lsl r2
     4b8:	12510100 	subsne	r0, r1, #0
     4bc:	000000ad 	andeq	r0, r0, sp, lsr #1
     4c0:	b8135201 	ldmdalt	r3, {r0, r9, ip, lr}
     4c4:	13000000 	movwne	r0, #0
     4c8:	000000c3 	andeq	r0, r0, r3, asr #1
     4cc:	5d011400 	cfstrspl	mvf1, [r1]
     4d0:	01000001 	tsteq	r0, r1
     4d4:	00780155 	rsbseq	r0, r8, r5, asr r1
     4d8:	03740000 	cmneq	r4, #0
     4dc:	04503000 	ldrbeq	r3, [r0]
     4e0:	5d013000 	stcpl	0, cr3, [r1]
     4e4:	0000019f 	muleq	r0, pc, r1
     4e8:	72747315 	rsbsvc	r7, r4, #1409286144	; 0x54000000
     4ec:	78550100 	ldmdavc	r5, {r8}^
     4f0:	b3000000 	movwlt	r0, #0
     4f4:	15000000 	strne	r0, [r0]
     4f8:	006d756e 	rsbeq	r7, sp, lr, ror #10
     4fc:	00485501 	subeq	r5, r8, r1, lsl #10
     500:	00d10000 	sbcseq	r0, r1, r0
     504:	30160000 	andscc	r0, r6, r0
     508:	01000006 	tsteq	r0, r6
     50c:	00004855 	andeq	r4, r0, r5, asr r8
     510:	0000ef00 	andeq	lr, r0, r0, lsl #30
     514:	0e101600 	cfmsub32eq	mvax0, mvfx1, mvfx0, mvfx0
     518:	55010000 	strpl	r0, [r1]
     51c:	00000041 	andeq	r0, r0, r1, asr #32
     520:	00000102 	andeq	r0, r0, r2, lsl #2
     524:	01006917 	tsteq	r0, r7, lsl r9
     528:	00004856 	andeq	r4, r0, r6, asr r8
     52c:	00012b00 	andeq	r2, r1, r0, lsl #22
     530:	01771800 	cmneq	r7, r0, lsl #16
     534:	57010000 	strpl	r0, [r1, -r0]
     538:	00000048 	andeq	r0, r0, r8, asr #32
     53c:	86011400 	strhi	r1, [r1], -r0, lsl #8
     540:	01000001 	tsteq	r0, r1
     544:	00480174 	subeq	r0, r8, r4, ror r1
     548:	04500000 	ldrbeq	r0, [r0]
     54c:	05f83000 	ldrbeq	r3, [r8]!
     550:	5d013000 	stcpl	0, cr3, [r1]
     554:	000001e2 	andeq	r0, r0, r2, ror #3
     558:	746d6615 	strbtvc	r6, [sp], #-1557	; 0x615
     55c:	ef740100 	svc	0x00740100
     560:	49000000 	stmdbmi	r0, {}
     564:	19000001 	stmdbne	r0, {r0}
     568:	00000e10 	andeq	r0, r0, r0, lsl lr
     56c:	01e27401 	mvneq	r7, r1, lsl #8
     570:	51010000 	tstpl	r1, r0
     574:	00194118 	andseq	r4, r9, r8, lsl r1
     578:	ef750100 	svc	0x00750100
     57c:	00000000 	andeq	r0, r0, r0
     580:	00410407 	subeq	r0, r1, r7, lsl #8
     584:	011a0000 	tsteq	sl, r0
     588:	00000109 	andeq	r0, r0, r9, lsl #2
     58c:	4801b101 	stmdami	r1, {r0, r8, ip, sp, pc}
     590:	f8000000 	undefined instruction 0xf8000000
     594:	9c300005 	ldcls	0, cr0, [r0], #-20	; 0xffffffec
     598:	01300007 	teqeq	r0, r7
     59c:	f8000002 	undefined instruction 0xf8000002
     5a0:	15000002 	strne	r0, [r0, #-2]
     5a4:	00667562 	rsbeq	r7, r6, r2, ror #10
     5a8:	0078b101 	rsbseq	fp, r8, r1, lsl #2
     5ac:	022c0000 	eoreq	r0, ip, #0
     5b0:	1b160000 	blne	5805b8 <DISABLE_IRQ+0x580538>
     5b4:	01000018 	tsteq	r0, r8, lsl r0
     5b8:	000048b1 	undefined instruction 0x000048b1
     5bc:	00024a00 	andeq	r4, r2, r0, lsl #20
     5c0:	6d661500 	cfstr64vs	mvdx1, [r6]
     5c4:	b1010074 	tstlt	r1, r4, ror r0
     5c8:	000000ef 	andeq	r0, r0, pc, ror #1
     5cc:	00000268 	andeq	r0, r0, r8, ror #4
     5d0:	00011316 	andeq	r1, r1, r6, lsl r3
     5d4:	6db10100 	ldfvss	f0, [r1]
     5d8:	86000000 	strhi	r0, [r0], -r0
     5dc:	17000002 	strne	r0, [r0, -r2]
     5e0:	006d756e 	rsbeq	r7, sp, lr, ror #10
     5e4:	0048b201 	subeq	fp, r8, r1, lsl #4
     5e8:	02a40000 	adceq	r0, r4, #0
     5ec:	731b0000 	tstvc	fp, #0
     5f0:	01007274 	tsteq	r0, r4, ror r2
     5f4:	000078b3 	undefined instruction 0x000078b3
     5f8:	1b590100 	blne	1640a00 <MEM_SIZE+0xe40a00>
     5fc:	00646e65 	rsbeq	r6, r4, r5, ror #28
     600:	0078b301 	rsbseq	fp, r8, r1, lsl #6
     604:	56010000 	strpl	r0, [r1], -r0
     608:	0100630b 	tsteq	r0, fp, lsl #6
     60c:	00007eb3 	undefined instruction 0x00007eb3
     610:	00731700 	rsbseq	r1, r3, r0, lsl #14
     614:	0078b301 	rsbseq	fp, r8, r1, lsl #6
     618:	02cd0000 	sbceq	r0, sp, #0
     61c:	4e180000 	cdpmi	0, 1, cr0, cr8, cr0, {0}
     620:	01000001 	tsteq	r0, r1
     624:	000048b4 	undefined instruction 0x000048b4
     628:	01581c00 	cmpeq	r8, r0, lsl #24
     62c:	b5010000 	strlt	r0, [r1]
     630:	00000041 	andeq	r0, r0, r1, asr #32
     634:	00000301 	andeq	r0, r0, r1, lsl #6
     638:	0000001d 	andeq	r0, r0, sp, lsl r0
     63c:	01391800 	teqeq	r9, r0, lsl #16
     640:	c0010000 	andgt	r0, r1, r0
     644:	000000ef 	andeq	r0, r0, pc, ror #1
     648:	0006541e 	andeq	r5, r6, lr, lsl r4
     64c:	00069030 	andeq	r9, r6, r0, lsr r0
     650:	01531830 	cmpeq	r3, r0, lsr r8
     654:	c6010000 	strgt	r0, [r1], -r0
     658:	00000048 	andeq	r0, r0, r8, asr #32
     65c:	0000851f 	andeq	r8, r0, pc, lsl r5
     660:	00066c00 	andeq	r6, r6, r0, lsl #24
     664:	00068c30 	andeq	r8, r6, r0, lsr ip
     668:	11ca0130 	bicne	r0, sl, r0, lsr r1
     66c:	0000011d 	andeq	r0, r0, sp, lsl r1
     670:	00000339 	andeq	r0, r0, r9, lsr r3
     674:	00011620 	andeq	r1, r1, r0, lsr #12
     678:	010d2000 	tsteq	sp, r0
     67c:	6c1e0000 	ldcvs	0, cr0, [lr], {0}
     680:	8c300006 	ldchi	0, cr0, [r0], #-24	; 0xffffffe8
     684:	13300006 	teqne	r0, #6
     688:	000000b8 	strheq	r0, [r0], -r8
     68c:	0000c313 	andeq	ip, r0, r3, lsl r3
     690:	00000000 	andeq	r0, r0, r0
     694:	d4210000 	strtle	r0, [r1]
     698:	9c000000 	stcls	0, cr0, [r0], {0}
     69c:	a8300007 	ldmdage	r0!, {r0, r1, r2}
     6a0:	57300007 	ldrpl	r0, [r0, -r7]!
     6a4:	17000003 	strne	r0, [r0, -r3]
     6a8:	12000003 	andne	r0, r0, #3
     6ac:	000000e2 	andeq	r0, r0, r2, ror #1
     6b0:	0e009102 	mvfeqs	f1, f2
     6b4:	64012200 	strvs	r2, [r1], #-512	; 0x200
     6b8:	01000001 	tsteq	r0, r1
     6bc:	a8010106 	stmdage	r1, {r1, r2, r8}
     6c0:	ac300007 	ldcge	0, cr0, [r0], #-28	; 0xffffffe4
     6c4:	01300007 	teqeq	r0, r7
     6c8:	0003585d 	andeq	r5, r3, sp, asr r8
     6cc:	00702300 	rsbseq	r2, r0, r0, lsl #6
     6d0:	78010701 	stmdavc	r1, {r0, r8, r9, sl}
     6d4:	23000000 	movwcs	r0, #0
     6d8:	08010063 	stmdaeq	r1, {r0, r1, r5, r6}
     6dc:	00007e01 	andeq	r7, r0, r1, lsl #28
     6e0:	00642300 	rsbeq	r2, r4, r0, lsl #6
     6e4:	48010901 	stmdami	r1, {r0, r8, fp}
     6e8:	23000000 	movwcs	r0, #0
     6ec:	0a01006b 	beq	408a0 <DISABLE_IRQ+0x40820>
     6f0:	00004801 	andeq	r4, r0, r1, lsl #16
     6f4:	01240000 	teqeq	r4, r0
     6f8:	0000011f 	andeq	r0, r0, pc, lsl r1
     6fc:	ac014001 	stcge	0, cr4, [r1], {1}
     700:	00300007 	eorseq	r0, r0, r7
     704:	76300008 	ldrtvc	r0, [r0], -r8
     708:	99000003 	stmdbls	r0, {r0, r1}
     70c:	15000003 	strne	r0, [r0, #-3]
     710:	40010070 	andmi	r0, r1, r0, ror r0
     714:	00000078 	andeq	r0, r0, r8, ror r0
     718:	00000395 	muleq	r0, r5, r3
     71c:	6d756e15 	ldclvs	14, cr6, [r5, #-84]!	; 0xffffffac
     720:	48400100 	stmdami	r0, {r8}^
     724:	c9000000 	stmdbgt	r0, {}
     728:	18000003 	stmdane	r0, {r0, r1}
     72c:	00000118 	andeq	r0, r0, r8, lsl r1
     730:	005d4201 	subseq	r4, sp, r1, lsl #4
     734:	25000000 	strcs	r0, [r0]
     738:	0000007e 	andeq	r0, r0, lr, ror r0
     73c:	000003aa 	andeq	r0, r0, sl, lsr #7
     740:	00006826 	andeq	r6, r0, r6, lsr #16
     744:	0003ff00 	andeq	pc, r3, r0, lsl #30
     748:	00017c18 	andeq	r7, r1, r8, lsl ip
     74c:	990d0100 	stmdbls	sp, {r8}
     750:	27000003 	strcs	r0, [r0, -r3]
     754:	00000170 	andeq	r0, r0, r0, ror r1
     758:	00ef0a01 	rsceq	r0, pc, r1, lsl #20
     75c:	05010000 	streq	r0, [r1]
     760:	007e0003 	rsbseq	r0, lr, r3
     764:	007e2530 	rsbseq	r2, lr, r0, lsr r5
     768:	03d70000 	bicseq	r0, r7, #0
     76c:	68280000 	stmdavs	r8!, {}
     770:	43000000 	movwmi	r0, #0
     774:	0b132700 	bleq	4ca37c <DISABLE_IRQ+0x4ca2fc>
     778:	0b010000 	bleq	40780 <DISABLE_IRQ+0x40700>
     77c:	000003c7 	andeq	r0, r0, r7, asr #7
     780:	08030501 	stmdaeq	r3, {r0, r8, sl}
     784:	0030012b 	eorseq	r0, r0, fp, lsr #2
     788:	0000009d 	muleq	r0, sp, r0
     78c:	042c0002 	strteq	r0, [ip], #-2
     790:	01040000 	tsteq	r4, r0
     794:	0000004d 	andeq	r0, r0, sp, asr #32
     798:	00019b01 	andeq	r9, r1, r1, lsl #22
     79c:	00006300 	andeq	r6, r0, r0, lsl #6
     7a0:	00080000 	andeq	r0, r8, r0
     7a4:	00088030 	andeq	r8, r8, r0, lsr r0
     7a8:	0002c130 	andeq	ip, r2, r0, lsr r1
     7ac:	b1010200 	tstlt	r1, r0, lsl #4
     7b0:	01000001 	tsteq	r0, r1
     7b4:	08000109 	stmdaeq	r0, {r0, r3, r8}
     7b8:	08183000 	ldmdaeq	r8, {ip, sp}
     7bc:	03f23000 	mvnseq	r3, #0
     7c0:	01020000 	tsteq	r2, r0
     7c4:	000001cf 	andeq	r0, r0, pc, asr #3
     7c8:	18011201 	stmdane	r1, {r0, r9, ip}
     7cc:	30300008 	eorscc	r0, r0, r8
     7d0:	11300008 	teqne	r0, r8
     7d4:	03000004 	movweq	r0, #4
     7d8:	0001a701 	andeq	sl, r1, r1, lsl #14
     7dc:	011b0100 	tsteq	fp, r0, lsl #2
     7e0:	30000830 	andcc	r0, r0, r0, lsr r8
     7e4:	30000848 	andcc	r0, r0, r8, asr #16
     7e8:	00745d01 	rsbseq	r5, r4, r1, lsl #26
     7ec:	94040000 	strls	r0, [r4]
     7f0:	01000001 	tsteq	r0, r1
     7f4:	0000741b 	andeq	r7, r0, fp, lsl r4
     7f8:	00500100 	subseq	r0, r0, r0, lsl #2
     7fc:	37070405 	strcc	r0, [r7, -r5, lsl #8]
     800:	06000000 	streq	r0, [r0], -r0
     804:	0001bc01 	andeq	fp, r1, r1, lsl #24
     808:	011f0100 	tsteq	pc, r0, lsl #2
     80c:	30000848 	andcc	r0, r0, r8, asr #16
     810:	30000880 	andcc	r0, r0, r0, lsl #17
     814:	00000430 	andeq	r0, r0, r0, lsr r4
     818:	706d7407 	rsbvc	r7, sp, r7, lsl #8
     81c:	74200100 	strtvc	r0, [r0], #-256	; 0x100
     820:	4f000000 	svcmi	0x00000000
     824:	00000004 	andeq	r0, r0, r4
     828:	00085d00 	andeq	r5, r8, r0, lsl #26
     82c:	aa000200 	bge	1034 <DISABLE_IRQ+0xfb4>
     830:	04000004 	streq	r0, [r0], #-4
     834:	00004d01 	andeq	r4, r0, r1, lsl #26
     838:	02000100 	andeq	r0, r0, #0
     83c:	00630000 	rsbeq	r0, r3, r0
     840:	08800000 	stmeq	r0, {}
     844:	0a703000 	beq	1c0c84c <MEM_SIZE+0x140c84c>
     848:	030a3000 	movweq	r3, #40960	; 0xa000
     84c:	64020000 	strvs	r0, [r2]
     850:	02000005 	andeq	r0, r0, #5
     854:	06010321 	streq	r0, [r1], -r1, lsr #6
     858:	000000a0 	andeq	r0, r0, r0, lsr #1
     85c:	9e080103 	adflse	f0, f0, f3
     860:	04000000 	streq	r0, [r0]
     864:	000004f7 	strdeq	r0, [r0], -r7
     868:	00332402 	eorseq	r2, r3, r2, lsl #8
     86c:	fb040000 	blx	100876 <DISABLE_IRQ+0x1007f6>
     870:	0200000a 	andeq	r0, r0, #10
     874:	00005026 	andeq	r5, r0, r6, lsr #32
     878:	07020300 	streq	r0, [r2, -r0, lsl #6]
     87c:	0000008b 	andeq	r0, r0, fp, lsl #1
     880:	59050203 	stmdbpl	r5, {r0, r1, r9}
     884:	04000000 	streq	r0, [r0]
     888:	00000338 	andeq	r0, r0, r8, lsr r3
     88c:	00692802 	rsbeq	r2, r9, r2, lsl #16
     890:	04030000 	streq	r0, [r3]
     894:	00003707 	andeq	r3, r0, r7, lsl #14
     898:	05040500 	streq	r0, [r4, #-1280]	; 0x500
     89c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     8a0:	00050803 	andeq	r0, r5, r3, lsl #16
     8a4:	03000000 	movweq	r0, #0
     8a8:	002d0708 	eoreq	r0, sp, r8, lsl #14
     8ac:	9f040000 	svcls	0x00040000
     8b0:	02000003 	andeq	r0, r0, #3
     8b4:	0000692d 	andeq	r6, r0, sp, lsr #18
     8b8:	01320400 	teqeq	r2, r0, lsl #8
     8bc:	22030000 	andcs	r0, r3, #0
     8c0:	00000069 	andeq	r0, r0, r9, rrx
     8c4:	000a2704 	andeq	r2, sl, r4, lsl #14
     8c8:	5e2a0400 	cdppl	4, 2, cr0, cr10, cr0, {0}
     8cc:	04000000 	streq	r0, [r0]
     8d0:	00000829 	andeq	r0, r0, r9, lsr #16
     8d4:	005e2c04 	subseq	r2, lr, r4, lsl #24
     8d8:	04060000 	streq	r0, [r6]
     8dc:	02564305 	subseq	r4, r6, #335544320	; 0x14000000
     8e0:	b5070000 	strlt	r0, [r7]
     8e4:	0000000b 	andeq	r0, r0, fp
     8e8:	000b6e07 	andeq	r6, fp, r7, lsl #28
     8ec:	aa070100 	bge	1c0cf4 <DISABLE_IRQ+0x1c0c74>
     8f0:	02000003 	andeq	r0, r0, #3
     8f4:	00092107 	andeq	r2, r9, r7, lsl #2
     8f8:	35070300 	strcc	r0, [r7, #-768]	; 0x300
     8fc:	04000006 	streq	r0, [r0], #-6
     900:	000a3507 	andeq	r3, sl, r7, lsl #10
     904:	d4070500 	strle	r0, [r7], #-1280	; 0x500
     908:	0600000a 	streq	r0, [r0], -sl
     90c:	0002ac07 	andeq	sl, r2, r7, lsl #24
     910:	e3070700 	movw	r0, #30464	; 0x7700
     914:	08000006 	stmdaeq	r0, {r1, r2}
     918:	0001ee07 	andeq	lr, r1, r7, lsl #28
     91c:	cd070900 	stcgt	9, cr0, [r7]
     920:	0a000008 	beq	948 <DISABLE_IRQ+0x8c8>
     924:	000ba107 	andeq	sl, fp, r7, lsl #2
     928:	80070b00 	andhi	r0, r7, r0, lsl #22
     92c:	0c000004 	stceq	0, cr0, [r0], {4}
     930:	0008bc07 	andeq	fp, r8, r7, lsl #24
     934:	05070d00 	streq	r0, [r7, #-3328]	; 0xd00
     938:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
     93c:	0006d007 	andeq	sp, r6, r7
     940:	40070f00 	andmi	r0, r7, r0, lsl #30
     944:	10000003 	andne	r0, r0, r3
     948:	00096a07 	andeq	r6, r9, r7, lsl #20
     94c:	39071100 	stmdbcc	r7, {r8, ip}
     950:	1200000b 	andne	r0, r0, #11
     954:	00060e07 	andeq	r0, r6, r7, lsl #28
     958:	be071300 	cdplt	3, 0, cr1, cr7, cr0, {0}
     95c:	14000002 	strne	r0, [r0], #-2
     960:	00069007 	andeq	r9, r6, r7
     964:	e5071500 	str	r1, [r7, #-1280]	; 0x500
     968:	16000008 	strne	r0, [r0], -r8
     96c:	0002d007 	andeq	sp, r2, r7
     970:	0a071700 	beq	1c6578 <DISABLE_IRQ+0x1c64f8>
     974:	18000009 	stmdane	r0, {r0, r3}
     978:	00021507 	andeq	r1, r2, r7, lsl #10
     97c:	76071900 	strvc	r1, [r7], -r0, lsl #18
     980:	1a000007 	bne	9a4 <DISABLE_IRQ+0x924>
     984:	0002f007 	andeq	pc, r2, r7
     988:	c1071b00 	tstgt	r7, r0, lsl #22
     98c:	1c00000b 	stcne	0, cr0, [r0], {11}
     990:	00040507 	andeq	r0, r4, r7, lsl #10
     994:	10071d00 	andne	r1, r7, r0, lsl #26
     998:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
     99c:	00093207 	andeq	r3, r9, r7, lsl #4
     9a0:	67071f00 	strvs	r1, [r7, -r0, lsl #30]
     9a4:	20000002 	andcs	r0, r0, r2
     9a8:	0005b107 	andeq	fp, r5, r7, lsl #2
     9ac:	44072100 	strmi	r2, [r7], #-256	; 0x100
     9b0:	22000006 	andcs	r0, r0, #6
     9b4:	0007ff07 	andeq	pc, r7, r7, lsl #30
     9b8:	ba072300 	blt	1c95c0 <DISABLE_IRQ+0x1c9540>
     9bc:	24000003 	strcs	r0, [r0], #-3
     9c0:	00089907 	andeq	r9, r8, r7, lsl #18
     9c4:	4b072500 	blmi	1c9dcc <DISABLE_IRQ+0x1c9d4c>
     9c8:	2600000b 	strcs	r0, [r0], -fp
     9cc:	00088307 	andeq	r8, r8, r7, lsl #6
     9d0:	3e072700 	cdpcc	7, 0, cr2, cr7, cr0, {0}
     9d4:	28000002 	stmdacs	r0, {r1}
     9d8:	0009b707 	andeq	fp, r9, r7, lsl #14
     9dc:	e5072900 	str	r2, [r7, #-2304]	; 0x900
     9e0:	2a00000a 	bcs	a10 <DISABLE_IRQ+0x990>
     9e4:	000a8707 	andeq	r8, sl, r7, lsl #14
     9e8:	48072b00 	stmdami	r7, {r8, r9, fp, sp}
     9ec:	2c000009 	stccs	0, cr0, [r0], {9}
     9f0:	0009f507 	andeq	pc, r9, r7, lsl #10
     9f4:	c7072d00 	strgt	r2, [r7, -r0, lsl #26]
     9f8:	2e000009 	cdpcs	0, 0, cr0, cr0, cr9, {0}
     9fc:	0003cf07 	andeq	ip, r3, r7, lsl #30
     a00:	a7072f00 	strge	r2, [r7, -r0, lsl #30]
     a04:	30000006 	andcc	r0, r0, r6
     a08:	00041307 	andeq	r1, r4, r7, lsl #6
     a0c:	89073100 	stmdbhi	r7, {r8, ip, sp}
     a10:	32000009 	andcc	r0, r0, #9
     a14:	00035207 	andeq	r5, r3, r7, lsl #4
     a18:	fd073300 	stc2	3, cr3, [r7]
     a1c:	34000005 	strcc	r0, [r0], #-5
     a20:	000bd507 	andeq	sp, fp, r7, lsl #10
     a24:	e1073500 	tst	r7, r0, lsl #10
     a28:	36000004 	strcc	r0, [r0], -r4
     a2c:	0007a807 	andeq	sl, r7, r7, lsl #16
     a30:	92073700 	andls	r3, r7, #0
     a34:	38000007 	stmdacc	r0, {r0, r1, r2}
     a38:	00031607 	andeq	r1, r3, r7, lsl #12
     a3c:	f3073900 	vmls.i8	d3, d7, d0
     a40:	3a000006 	bcc	a60 <DISABLE_IRQ+0x9e0>
     a44:	0003e207 	andeq	lr, r3, r7, lsl #4
     a48:	bc073b00 	stclt	11, cr3, [r7], {0}
     a4c:	3c000006 	stccc	0, cr0, [r0], {6}
     a50:	00050f07 	andeq	r0, r5, r7, lsl #30
     a54:	6d073d00 	stcvs	13, cr3, [r7]
     a58:	3e000005 	cdpcc	0, 0, cr0, cr0, cr5, {0}
     a5c:	0004cb07 	andeq	ip, r4, r7, lsl #22
     a60:	6e073f00 	cdpvs	15, 0, cr3, cr7, cr0, {0}
     a64:	c0000003 	andgt	r0, r0, r3
     a68:	058b0700 	streq	r0, [fp, #1792]	; 0x700
     a6c:	00c10000 	sbceq	r0, r1, r0
     a70:	00083707 	andeq	r3, r8, r7, lsl #14
     a74:	0700c200 	streq	ip, [r0, -r0, lsl #4]
     a78:	00000674 	andeq	r0, r0, r4, ror r6
     a7c:	060000c3 	streq	r0, [r0], -r3, asr #1
     a80:	a7b50504 	ldrge	r0, [r5, r4, lsl #10]!
     a84:	07000002 	streq	r0, [r0, -r2]
     a88:	000009e4 	andeq	r0, r0, r4, ror #19
     a8c:	04570711 	ldrbeq	r0, [r7], #-1809	; 0x711
     a90:	07120000 	ldreq	r0, [r2, -r0]
     a94:	000001db 	ldrdeq	r0, [r0], -fp
     a98:	07c30713 	bfieq	r0, r3, (invalid: 14:3)
     a9c:	07140000 	ldreq	r0, [r4, -r0]
     aa0:	00000733 	andeq	r0, r0, r3, lsr r7
     aa4:	0a440715 	beq	1102700 <MEM_SIZE+0x902700>
     aa8:	07160000 	ldreq	r0, [r6, -r0]
     aac:	00000b8e 	andeq	r0, r0, lr, lsl #23
     ab0:	05c90717 	strbeq	r0, [r9, #1815]	; 0x717
     ab4:	07180000 	ldreq	r0, [r8, -r0]
     ab8:	000008a9 	andeq	r0, r0, r9, lsr #17
     abc:	08500719 	ldmdaeq	r0, {r0, r3, r4, r8, r9, sl}^
     ac0:	071a0000 	ldreq	r0, [sl, -r0]
     ac4:	00000717 	andeq	r0, r0, r7, lsl r7
     ac8:	0b1b071b 	bleq	6c273c <DISABLE_IRQ+0x6c26bc>
     acc:	001c0000 	andseq	r0, ip, r0
     ad0:	000c0908 	andeq	r0, ip, r8, lsl #18
     ad4:	23060800 	movwcs	r0, #26624	; 0x6800
     ad8:	000002d0 	ldrdeq	r0, [r0], -r0
     adc:	00031109 	andeq	r1, r3, r9, lsl #2
     ae0:	d0240600 	eorle	r0, r4, r0, lsl #12
     ae4:	02000002 	andeq	r0, r0, #2
     ae8:	81090023 	tsthi	r9, r3, lsr #32
     aec:	06000002 	streq	r0, [r0], -r2
     af0:	0002d025 	andeq	sp, r2, r5, lsr #32
     af4:	04230200 	strteq	r0, [r3], #-512	; 0x200
     af8:	a7040a00 	strge	r0, [r4, -r0, lsl #20]
     afc:	04000002 	streq	r0, [r0], #-2
     b00:	00000c09 	andeq	r0, r0, r9, lsl #24
     b04:	02a72606 	adceq	r2, r7, #6291456	; 0x600000
     b08:	5c080000 	stcpl	0, cr0, [r8], {0}
     b0c:	10000006 	andne	r0, r0, r6
     b10:	03262f07 	teqeq	r6, #28
     b14:	c9090000 	stmdbgt	r9, {}
     b18:	0700000a 	streq	r0, [r0, -sl]
     b1c:	0002d631 	andeq	sp, r2, r1, lsr r6
     b20:	00230200 	eoreq	r0, r3, r0, lsl #4
     b24:	0008e009 	andeq	lr, r8, r9
     b28:	26320700 	ldrtcs	r0, [r2], -r0, lsl #14
     b2c:	02000003 	andeq	r0, r0, #3
     b30:	00090823 	andeq	r0, r9, r3, lsr #16
     b34:	07000009 	streq	r0, [r0, -r9]
     b38:	00003a33 	andeq	r3, r0, r3, lsr sl
     b3c:	0c230200 	sfmeq	f0, 4, [r3]	; (stceq 2, cr0, [r3])
     b40:	00042709 	andeq	r2, r4, r9, lsl #14
     b44:	3a340700 	bcc	d0274c <MEM_SIZE+0x50274c>
     b48:	02000000 	andeq	r0, r0, #0
     b4c:	0a000d23 	beq	3fe0 <DISABLE_IRQ+0x3f60>
     b50:	00003a04 	andeq	r3, r0, r4, lsl #20
     b54:	065c0400 	ldrbeq	r0, [ip], -r0, lsl #8
     b58:	36070000 	strcc	r0, [r7], -r0
     b5c:	000002e1 	andeq	r0, r0, r1, ror #5
     b60:	00099f08 	andeq	r9, r9, r8, lsl #30
     b64:	3a076c00 	bcc	1dbb6c <DISABLE_IRQ+0x1dbaec>
     b68:	000004cc 	andeq	r0, r0, ip, asr #9
     b6c:	00148109 	andseq	r8, r4, r9, lsl #2
     b70:	cc3b0700 	ldcgt	7, cr0, [fp]
     b74:	02000004 	andeq	r0, r0, #4
     b78:	4d090023 	stcmi	0, cr0, [r9, #-140]	; 0xffffff74
     b7c:	07000004 	streq	r0, [r0, -r4]
     b80:	0002d641 	andeq	sp, r2, r1, asr #12
     b84:	04230200 	strteq	r0, [r3], #-512	; 0x200
     b88:	00055209 	andeq	r5, r5, r9, lsl #4
     b8c:	d2450700 	suble	r0, r5, #0
     b90:	02000004 	andeq	r0, r0, #4
     b94:	ef090c23 	svc	0x00090c23
     b98:	0700001a 	smladeq	r0, sl, r0, r0
     b9c:	00005e4b 	andeq	r5, r0, fp, asr #28
     ba0:	10230200 	eorne	r0, r3, r0, lsl #4
     ba4:	00087809 	andeq	r7, r8, r9, lsl #16
     ba8:	5e4c0700 	cdppl	7, 4, cr0, cr12, cr0, {0}
     bac:	02000000 	andeq	r0, r0, #0
     bb0:	35091423 	strcc	r1, [r9, #-1059]	; 0x423
     bb4:	0700001d 	smladeq	r0, sp, r0, r0
     bb8:	00003a4d 	andeq	r3, r0, sp, asr #20
     bbc:	18230200 	stmdane	r3!, {r9}
     bc0:	001e5a09 	andseq	r5, lr, r9, lsl #20
     bc4:	3a510700 	bcc	14427cc <MEM_SIZE+0xc427cc>
     bc8:	02000000 	andeq	r0, r0, #0
     bcc:	64091923 	strvs	r1, [r9], #-2339	; 0x923
     bd0:	07000003 	streq	r0, [r0, -r3]
     bd4:	00003a53 	andeq	r3, r0, r3, asr sl
     bd8:	1a230200 	bne	8c13e0 <MEM_SIZE+0xc13e0>
     bdc:	00043f09 	andeq	r3, r4, r9, lsl #30
     be0:	3a560700 	bcc	15827e8 <MEM_SIZE+0xd827e8>
     be4:	02000000 	andeq	r0, r0, #0
     be8:	ad091b23 	vstrge	d1, [r9, #-140]	; 0xffffff74
     bec:	0700000b 	streq	r0, [r0, -fp]
     bf0:	0005465a 	andeq	r4, r5, sl, asr r6
     bf4:	1c230200 	sfmne	f0, 4, [r3]	; (stcne 2, cr0, [r3])
     bf8:	000bf809 	andeq	pc, fp, r9, lsl #16
     bfc:	d65f0700 	ldrble	r0, [pc], -r0, lsl #14
     c00:	02000002 	andeq	r0, r0, #2
     c04:	03092023 	movweq	r2, #36899	; 0x9023
     c08:	0700000b 	streq	r0, [r0, -fp]
     c0c:	00005e63 	andeq	r5, r0, r3, ror #28
     c10:	28230200 	stmdacs	r3!, {r9}
     c14:	00062509 	andeq	r2, r6, r9, lsl #10
     c18:	4c650700 	stclmi	7, cr0, [r5]
     c1c:	02000005 	andeq	r0, r0, #5
     c20:	6e092c23 	cdpvs	12, 0, cr2, cr9, cr3, {1}
     c24:	07000008 	streq	r0, [r0, -r8]
     c28:	0002d666 	andeq	sp, r2, r6, ror #12
     c2c:	30230200 	eorcc	r0, r3, r0, lsl #4
     c30:	000c0e09 	andeq	r0, ip, r9, lsl #28
     c34:	9b680700 	blls	1a0283c <MEM_SIZE+0x120283c>
     c38:	02000000 	andeq	r0, r0, #0
     c3c:	f3093823 	vsub.i8	d3, d9, d19
     c40:	07000007 	streq	r0, [r0, -r7]
     c44:	00009b69 	andeq	r9, r0, r9, ror #22
     c48:	3c230200 	sfmcc	f0, 4, [r3]	; (stccc 2, cr0, [r3])
     c4c:	0005a709 	andeq	sl, r5, r9, lsl #14
     c50:	526b0700 	rsbpl	r0, fp, #0
     c54:	02000005 	andeq	r0, r0, #5
     c58:	6d0b4023 	stcvs	0, cr4, [fp, #-140]	; 0xffffff74
     c5c:	07006773 	smlsdxeq	r0, r3, r7, r6
     c60:	0004cc6d 	andeq	ip, r4, sp, ror #24
     c64:	44230200 	strtmi	r0, [r3], #-512	; 0x200
     c68:	00163009 	andseq	r3, r6, r9
     c6c:	a6700700 	ldrbtge	r0, [r0], -r0, lsl #14
     c70:	02000000 	andeq	r0, r0, #0
     c74:	db094823 	blle	252d08 <DISABLE_IRQ+0x252c88>
     c78:	07000008 	streq	r0, [r0, -r8]
     c7c:	00032673 	andeq	r2, r3, r3, ror r6
     c80:	4c230200 	sfmmi	f0, 4, [r3]	; (stcmi 2, cr0, [r3])
     c84:	0009ac09 	andeq	sl, r9, r9, lsl #24
     c88:	3a750700 	bcc	1d42890 <MEM_SIZE+0x1542890>
     c8c:	02000000 	andeq	r0, r0, #0
     c90:	e6095023 	str	r5, [r9], -r3, lsr #32
     c94:	07000007 	streq	r0, [r0, -r7]
     c98:	00003a76 	andeq	r3, r0, r6, ror sl
     c9c:	51230200 	teqpl	r3, r0, lsl #4
     ca0:	00053d09 	andeq	r3, r5, r9, lsl #26
     ca4:	58790700 	ldmdapl	r9!, {r8, r9, sl}^
     ca8:	02000005 	andeq	r0, r0, #5
     cac:	b5095423 	strlt	r5, [r9, #-1059]	; 0x423
     cb0:	0700000a 	streq	r0, [r0, -sl]
     cb4:	0005db7c 	andeq	sp, r5, ip, ror fp
     cb8:	58230200 	stmdapl	r3!, {r9}
     cbc:	00022b09 	andeq	r2, r2, r9, lsl #22
     cc0:	18800700 	stmne	r0, {r8, r9, sl}
     cc4:	02000006 	andeq	r0, r0, #6
     cc8:	ad095c23 	stcge	12, cr5, [r9, #-140]	; 0xffffff74
     ccc:	07000004 	streq	r0, [r0, -r4]
     cd0:	00003a84 	andeq	r3, r0, r4, lsl #21
     cd4:	60230200 	eorvs	r0, r3, r0, lsl #4
     cd8:	00025509 	andeq	r5, r2, r9, lsl #10
     cdc:	5e850700 	cdppl	7, 8, cr0, cr5, cr0, {0}
     ce0:	02000000 	andeq	r0, r0, #0
     ce4:	5a096423 	bpl	259d78 <DISABLE_IRQ+0x259cf8>
     ce8:	07000007 	streq	r0, [r0, -r7]
     cec:	0004cc86 	andeq	ip, r4, r6, lsl #25
     cf0:	68230200 	stmdavs	r3!, {r9}
     cf4:	25040a00 	strcs	r0, [r4, #-2560]	; 0xa00
     cf8:	0c000000 	stceq	0, cr0, [r0], {0}
     cfc:	000004cc 	andeq	r0, r0, ip, asr #9
     d00:	000004e2 	andeq	r0, r0, r2, ror #9
     d04:	0004e20d 	andeq	lr, r4, sp, lsl #4
     d08:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     d0c:	2f080704 	svccs	0x00080704
     d10:	1c00000b 	stcne	0, cr0, [r0], {11}
     d14:	05465a07 	strbeq	r5, [r6, #-2567]	; 0xa07
     d18:	36090000 	strcc	r0, [r9], -r0
     d1c:	08000005 	stmdaeq	r0, {r0, r2}
     d20:	00032c27 	andeq	r2, r3, r7, lsr #24
     d24:	00230200 	eoreq	r0, r3, r0, lsl #4
     d28:	00086709 	andeq	r6, r8, r9, lsl #14
     d2c:	912a0800 	teqls	sl, r0, lsl #16
     d30:	02000006 	andeq	r0, r0, #6
     d34:	ad091023 	stcge	0, cr1, [r9, #-140]	; 0xffffff74
     d38:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     d3c:	0005462c 	andeq	r4, r5, ip, lsr #12
     d40:	14230200 	strtne	r0, [r3], #-512	; 0x200
     d44:	0005f609 	andeq	pc, r5, r9, lsl #12
     d48:	3a2e0800 	bcc	b82d50 <MEM_SIZE+0x382d50>
     d4c:	02000000 	andeq	r0, r0, #0
     d50:	73091823 	movwvc	r1, #38947	; 0x9823
     d54:	08000004 	stmdaeq	r0, {r2}
     d58:	00003a2f 	andeq	r3, r0, pc, lsr #20
     d5c:	19230200 	stmdbne	r3!, {r9}
     d60:	00048e09 	andeq	r8, r4, r9, lsl #28
     d64:	3a300800 	bcc	c02d6c <MEM_SIZE+0x402d6c>
     d68:	02000000 	andeq	r0, r0, #0
     d6c:	0a001a23 	beq	7600 <DISABLE_IRQ+0x7580>
     d70:	0004e504 	andeq	lr, r4, r4, lsl #10
     d74:	85040a00 	strhi	r0, [r4, #-2560]	; 0xa00
     d78:	0a000000 	beq	d80 <DISABLE_IRQ+0xd00>
     d7c:	0002d604 	andeq	sp, r2, r4, lsl #12
     d80:	2c040a00 	stccs	10, cr0, [r4], {0}
     d84:	08000003 	stmdaeq	r0, {r0, r1}
     d88:	0000074b 	andeq	r0, r0, fp, asr #14
     d8c:	db7c072c 	blle	1f02a44 <MEM_SIZE+0x1702a44>
     d90:	09000005 	stmdbeq	r0, {r0, r2}
     d94:	00000536 	andeq	r0, r0, r6, lsr r5
     d98:	032c2e09 	teqeq	ip, #144	; 0x90
     d9c:	23020000 	movwcs	r0, #8192	; 0x2000
     da0:	07dd0900 	ldrbeq	r0, [sp, r0, lsl #18]
     da4:	30090000 	andcc	r0, r9, r0
     da8:	00000679 	andeq	r0, r0, r9, ror r6
     dac:	09102302 	ldmdbeq	r0, {r1, r8, r9, sp}
     db0:	000005e4 	andeq	r0, r0, r4, ror #11
     db4:	00a63109 	adceq	r3, r6, r9, lsl #2
     db8:	23020000 	movwcs	r0, #8192	; 0x2000
     dbc:	0b0e0914 	bleq	383214 <DISABLE_IRQ+0x383194>
     dc0:	32090000 	andcc	r0, r9, #0
     dc4:	000000a6 	andeq	r0, r0, r6, lsr #1
     dc8:	09182302 	ldmdbeq	r8, {r1, r8, r9, sp}
     dcc:	000005f0 	strdeq	r0, [r0], -r0
     dd0:	06793409 	ldrbteq	r3, [r9], -r9, lsl #8
     dd4:	23020000 	movwcs	r0, #8192	; 0x2000
     dd8:	014e091c 	cmpeq	lr, ip, lsl r9
     ddc:	35090000 	strcc	r0, [r9]
     de0:	00000679 	andeq	r0, r0, r9, ror r6
     de4:	09202302 	stmdbeq	r0!, {r1, r8, r9, sp}
     de8:	00000527 	andeq	r0, r0, r7, lsr #10
     dec:	00a63609 	adceq	r3, r6, r9, lsl #12
     df0:	23020000 	movwcs	r0, #8192	; 0x2000
     df4:	049b0924 	ldreq	r0, [fp], #2340	; 0x924
     df8:	37090000 	strcc	r0, [r9, -r0]
     dfc:	000000a6 	andeq	r0, r0, r6, lsr #1
     e00:	00282302 	eoreq	r2, r8, r2, lsl #6
     e04:	055e040a 	ldrbeq	r0, [lr, #-1034]	; 0x40a
     e08:	a7080000 	strge	r0, [r8, -r0]
     e0c:	1800000a 	stmdane	r0, {r1, r3}
     e10:	06188007 	ldreq	r8, [r8], -r7
     e14:	36090000 	strcc	r0, [r9], -r0
     e18:	0a000005 	beq	e34 <DISABLE_IRQ+0xdb4>
     e1c:	00032c22 	andeq	r2, r3, r2, lsr #24
     e20:	00230200 	eoreq	r0, r3, r0, lsl #4
     e24:	00044709 	andeq	r4, r4, r9, lsl #14
     e28:	5e230a00 	vmulpl.f32	s0, s6, s0
     e2c:	02000000 	andeq	r0, r0, #0
     e30:	3f091023 	svccc	0x00091023
     e34:	0a00001b 	beq	ea8 <DISABLE_IRQ+0xe28>
     e38:	00068b24 	andeq	r8, r6, r4, lsr #22
     e3c:	14230200 	strtne	r0, [r3], #-512	; 0x200
     e40:	e1040a00 	tst	r4, r0, lsl #20
     e44:	04000005 	streq	r0, [r0], #-5
     e48:	0000099f 	muleq	r0, pc, r9
     e4c:	03378907 	teqeq	r7, #114688	; 0x1c000
     e50:	040a0000 	streq	r0, [sl]
     e54:	000004cc 	andeq	r0, r0, ip, asr #9
     e58:	000b6108 	andeq	r6, fp, r8, lsl #2
     e5c:	21090c00 	tstcs	r9, r0, lsl #24
     e60:	00000666 	andeq	r0, r0, r6, ror #12
     e64:	00031109 	andeq	r1, r3, r9, lsl #2
     e68:	66230900 	strtvs	r0, [r3], -r0, lsl #18
     e6c:	02000006 	andeq	r0, r0, #6
     e70:	dc090023 	stcle	0, cr0, [r9], {35}	; 0x23
     e74:	09000005 	stmdbeq	r0, {r0, r2}
     e78:	00066c24 	andeq	r6, r6, r4, lsr #24
     e7c:	04230200 	strteq	r0, [r3], #-512	; 0x200
     e80:	00163009 	andseq	r3, r6, r9
     e84:	a6250900 	strtge	r0, [r5], -r0, lsl #18
     e88:	02000000 	andeq	r0, r0, #0
     e8c:	0a000823 	beq	2f20 <DISABLE_IRQ+0x2ea0>
     e90:	00062f04 	andeq	r2, r6, r4, lsl #30
     e94:	04040f00 	streq	r0, [r4], #-3840	; 0xf00
     e98:	00000b61 	andeq	r0, r0, r1, ror #22
     e9c:	062f2709 	strteq	r2, [pc], -r9, lsl #14
     ea0:	040a0000 	streq	r0, [sl]
     ea4:	0000066e 	andeq	r0, r0, lr, ror #12
     ea8:	068b0110 	pkhbteq	r0, fp, r0, lsl #2
     eac:	18110000 	ldmdane	r1, {}
     eb0:	00000006 	andeq	r0, r0, r6
     eb4:	067f040a 	ldrbteq	r0, [pc], -sl, lsl #8
     eb8:	040a0000 	streq	r0, [sl]
     ebc:	0000061e 	andeq	r0, r0, lr, lsl r6
     ec0:	00020c08 	andeq	r0, r2, r8, lsl #24
     ec4:	220b1c00 	andcs	r1, fp, #0
     ec8:	000006dc 	ldrdeq	r0, [r0], -ip
     ecc:	00053609 	andeq	r3, r5, r9, lsl #12
     ed0:	2c230b00 	stccs	11, cr0, [r3]
     ed4:	02000003 	andeq	r0, r0, #3
     ed8:	93090023 	movwls	r0, #36899	; 0x9023
     edc:	0b000002 	bleq	eec <DISABLE_IRQ+0xe6c>
     ee0:	00005e26 	andeq	r5, r0, r6, lsr #28
     ee4:	10230200 	eorne	r0, r3, r0, lsl #4
     ee8:	0004c009 	andeq	ip, r4, r9
     eec:	5e270b00 	vmulpl.f64	d0, d7, d0
     ef0:	02000000 	andeq	r0, r0, #0
     ef4:	69091423 	stmdbvs	r9, {r0, r1, r5, sl, ip}
     ef8:	0b00000a 	bleq	f28 <DISABLE_IRQ+0xea8>
     efc:	0003262a 	andeq	r2, r3, sl, lsr #12
     f00:	18230200 	stmdane	r3!, {r9}
     f04:	020c0400 	andeq	r0, ip, #0
     f08:	2c0b0000 	stccs	0, cr0, [fp], {0}
     f0c:	00000697 	muleq	r0, r7, r6
     f10:	0b7c0112 	bleq	1f01360 <MEM_SIZE+0x1701360>
     f14:	fd010000 	stc2	0, cr0, [r1]
     f18:	00004501 	andeq	r4, r0, r1, lsl #10
     f1c:	00088000 	andeq	r8, r8, r0
     f20:	0008e030 	andeq	lr, r8, r0, lsr r0
     f24:	00046230 	andeq	r6, r4, r0, lsr r2
     f28:	00073a00 	andeq	r3, r7, r0, lsl #20
     f2c:	032f1300 	teqeq	pc, #0
     f30:	fd010000 	stc2	0, cr0, [r1]
     f34:	0000073a 	andeq	r0, r0, sl, lsr r7
     f38:	00000481 	andeq	r0, r0, r1, lsl #9
     f3c:	0003fb13 	andeq	pc, r3, r3, lsl fp
     f40:	ccfd0100 	ldfgte	f0, [sp]
     f44:	b5000004 	strlt	r0, [r0, #-4]
     f48:	14000004 	strne	r0, [r0], #-4
     f4c:	0000028a 	andeq	r0, r0, sl, lsl #5
     f50:	0326ff01 	msreq	CPSR_sx, #4
     f54:	18150000 	ldmdane	r5, {}
     f58:	01000001 	tsteq	r0, r1
     f5c:	00900101 	addseq	r0, r0, r1, lsl #2
     f60:	0a000000 	beq	f68 <DISABLE_IRQ+0xee8>
     f64:	0006dc04 	andeq	sp, r6, r4, lsl #24
     f68:	56011200 	strpl	r1, [r1], -r0, lsl #4
     f6c:	0100000a 	tsteq	r0, sl
     f70:	004501ac 	subeq	r0, r5, ip, lsr #3
     f74:	08e00000 	stmiaeq	r0!, {}^
     f78:	09843000 	stmibeq	r4, {ip, sp}
     f7c:	04d33000 	ldrbeq	r3, [r3]
     f80:	07a30000 	streq	r0, [r3, r0]!
     f84:	2f130000 	svccs	0x00130000
     f88:	01000003 	tsteq	r0, r3
     f8c:	00073aac 	andeq	r3, r7, ip, lsr #21
     f90:	0004fe00 	andeq	pc, r4, r0, lsl #28
     f94:	03fb1300 	mvnseq	r1, #0
     f98:	ac010000 	stcge	0, cr0, [r1], {0}
     f9c:	00000629 	andeq	r0, r0, r9, lsr #12
     fa0:	00000532 	andeq	r0, r0, r2, lsr r5
     fa4:	0007ec16 	andeq	lr, r7, r6, lsl ip
     fa8:	45af0100 	strmi	r0, [pc, #256]!	; 10b0 <DISABLE_IRQ+0x1030>
     fac:	01000000 	tsteq	r0, r0
     fb0:	028a1754 	addeq	r1, sl, #22020096	; 0x1500000
     fb4:	b1010000 	tstlt	r1, r0
     fb8:	00000326 	andeq	r0, r0, r6, lsr #6
     fbc:	0000055b 	andeq	r0, r0, fp, asr r5
     fc0:	00011814 	andeq	r1, r1, r4, lsl r8
     fc4:	90b30100 	adcsls	r0, r3, r0, lsl #2
     fc8:	00000000 	andeq	r0, r0, r0
     fcc:	0a110112 	beq	44141c <DISABLE_IRQ+0x44139c>
     fd0:	3a010000 	bcc	40fd8 <DISABLE_IRQ+0x40f58>
     fd4:	00004501 	andeq	r4, r0, r1, lsl #10
     fd8:	00098400 	andeq	r8, r9, r0, lsl #8
     fdc:	000a7030 	andeq	r7, sl, r0, lsr r0
     fe0:	00056e30 	andeq	r6, r5, r0, lsr lr
     fe4:	00085300 	andeq	r5, r8, r0, lsl #6
     fe8:	032f1300 	teqeq	pc, #0
     fec:	3a010000 	bcc	40ff4 <DISABLE_IRQ+0x40f74>
     ff0:	0000073a 	andeq	r0, r0, sl, lsr r7
     ff4:	0000058d 	andeq	r0, r0, sp, lsl #11
     ff8:	00046a13 	andeq	r6, r4, r3, lsl sl
     ffc:	263a0100 	ldrtcs	r0, [sl], -r0, lsl #2
    1000:	ab000003 	blge	1014 <DISABLE_IRQ+0xf94>
    1004:	13000005 	movwne	r0, #5
    1008:	000004c0 	andeq	r0, r0, r0, asr #9
    100c:	005e3a01 	subseq	r3, lr, r1, lsl #20
    1010:	05d40000 	ldrbeq	r0, [r4]
    1014:	47130000 	ldrmi	r0, [r3, -r0]
    1018:	01000005 	tsteq	r0, r5
    101c:	0004cc3a 	andeq	ip, r4, sl, lsr ip
    1020:	0005f200 	andeq	pc, r5, r0, lsl #4
    1024:	0bee1300 	bleq	ffb85c2c <rEINTPEND+0xa9b85b84>
    1028:	3a010000 	bcc	41030 <DISABLE_IRQ+0x40fb0>
    102c:	0000005e 	andeq	r0, r0, lr, asr r0
    1030:	00000610 	andeq	r0, r0, r0, lsl r6
    1034:	000c6217 	andeq	r6, ip, r7, lsl r2
    1038:	5e3d0100 	rsfple	f0, f5, f0
    103c:	46000000 	strmi	r0, [r0], -r0
    1040:	17000006 	strne	r0, [r0, -r6]
    1044:	000003fb 	strdeq	r0, [r0], -fp
    1048:	03263e01 	teqeq	r6, #16
    104c:	06590000 	ldrbeq	r0, [r9], -r0
    1050:	f6170000 	undefined instruction 0xf6170000
    1054:	01000003 	tsteq	r0, r3
    1058:	0003263f 	andeq	r2, r3, pc, lsr r6
    105c:	00067700 	andeq	r7, r6, r0, lsl #14
    1060:	04331700 	ldrteq	r1, [r3], #-1792	; 0x700
    1064:	40010000 	andmi	r0, r1, r0
    1068:	00000326 	andeq	r0, r0, r6, lsr #6
    106c:	000006ab 	andeq	r0, r0, fp, lsr #13
    1070:	0004fe14 	andeq	pc, r4, r4, lsl lr
    1074:	3a410100 	bcc	104147c <MEM_SIZE+0x84147c>
    1078:	00000000 	andeq	r0, r0, r0
    107c:	00038f18 	andeq	r8, r3, r8, lsl pc
    1080:	914a0c00 	cmpls	sl, r0, lsl #24
    1084:	01000006 	tsteq	r0, r6
    1088:	09080001 	stmdbeq	r8, {r0}
    108c:	00020000 	andeq	r0, r2, r0
    1090:	000005db 	ldrdeq	r0, [r0], -fp
    1094:	004d0104 	subeq	r0, sp, r4, lsl #2
    1098:	20010000 	andcs	r0, r1, r0
    109c:	6300000d 	movwvs	r0, #13
    10a0:	70000000 	andvc	r0, r0, r0
    10a4:	a030000a 	eorsge	r0, r0, sl
    10a8:	7130000d 	teqvc	r0, sp
    10ac:	02000004 	andeq	r0, r0, #4
    10b0:	00000564 	andeq	r0, r0, r4, ror #10
    10b4:	01032102 	tsteq	r3, r2, lsl #2
    10b8:	0000a006 	andeq	sl, r0, r6
    10bc:	08010300 	stmdaeq	r1, {r8, r9}
    10c0:	0000009e 	muleq	r0, lr, r0
    10c4:	0004f704 	andeq	pc, r4, r4, lsl #14
    10c8:	33240200 	teqcc	r4, #0
    10cc:	04000000 	streq	r0, [r0]
    10d0:	00000afb 	strdeq	r0, [r0], -fp
    10d4:	00502602 	subseq	r2, r0, r2, lsl #12
    10d8:	02030000 	andeq	r0, r3, #0
    10dc:	00008b07 	andeq	r8, r0, r7, lsl #22
    10e0:	05020300 	streq	r0, [r2, #-768]	; 0x300
    10e4:	00000059 	andeq	r0, r0, r9, asr r0
    10e8:	00033804 	andeq	r3, r3, r4, lsl #16
    10ec:	69280200 	stmdbvs	r8!, {r9}
    10f0:	03000000 	movweq	r0, #0
    10f4:	00370704 	eorseq	r0, r7, r4, lsl #14
    10f8:	04050000 	streq	r0, [r5]
    10fc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    1100:	05080300 	streq	r0, [r8, #-768]	; 0x300
    1104:	00000000 	andeq	r0, r0, r0
    1108:	2d070803 	stccs	8, cr0, [r7, #-12]
    110c:	04000000 	streq	r0, [r0]
    1110:	0000039f 	muleq	r0, pc, r3
    1114:	00692d02 	rsbeq	r2, r9, r2, lsl #26
    1118:	32040000 	andcc	r0, r4, #0
    111c:	03000001 	movweq	r0, #1
    1120:	00006922 	andeq	r6, r0, r2, lsr #18
    1124:	0a270400 	beq	9c212c <MEM_SIZE+0x1c212c>
    1128:	2a040000 	bcs	101130 <DISABLE_IRQ+0x1010b0>
    112c:	0000005e 	andeq	r0, r0, lr, asr r0
    1130:	00082904 	andeq	r2, r8, r4, lsl #18
    1134:	5e2c0400 	cdppl	4, 2, cr0, cr12, cr0, {0}
    1138:	06000000 	streq	r0, [r0], -r0
    113c:	56430504 	strbpl	r0, [r3], -r4, lsl #10
    1140:	07000002 	streq	r0, [r0, -r2]
    1144:	00000bb5 	undefined instruction 0x00000bb5
    1148:	0b6e0700 	bleq	1b82d50 <MEM_SIZE+0x1382d50>
    114c:	07010000 	streq	r0, [r1, -r0]
    1150:	000003aa 	andeq	r0, r0, sl, lsr #7
    1154:	09210702 	stmdbeq	r1!, {r1, r8, r9, sl}
    1158:	07030000 	streq	r0, [r3, -r0]
    115c:	00000635 	andeq	r0, r0, r5, lsr r6
    1160:	0a350704 	beq	d42d78 <MEM_SIZE+0x542d78>
    1164:	07050000 	streq	r0, [r5, -r0]
    1168:	00000ad4 	ldrdeq	r0, [r0], -r4
    116c:	02ac0706 	adceq	r0, ip, #1572864	; 0x180000
    1170:	07070000 	streq	r0, [r7, -r0]
    1174:	000006e3 	andeq	r0, r0, r3, ror #13
    1178:	01ee0708 	mvneq	r0, r8, lsl #14
    117c:	07090000 	streq	r0, [r9, -r0]
    1180:	000008cd 	andeq	r0, r0, sp, asr #17
    1184:	0ba1070a 	bleq	fe842db4 <rEINTPEND+0xa8842d0c>
    1188:	070b0000 	streq	r0, [fp, -r0]
    118c:	00000480 	andeq	r0, r0, r0, lsl #9
    1190:	08bc070c 	ldmeq	ip!, {r2, r3, r8, r9, sl}
    1194:	070d0000 	streq	r0, [sp, -r0]
    1198:	00000705 	andeq	r0, r0, r5, lsl #14
    119c:	06d0070e 	ldrbeq	r0, [r0], lr, lsl #14
    11a0:	070f0000 	streq	r0, [pc, -r0]
    11a4:	00000340 	andeq	r0, r0, r0, asr #6
    11a8:	096a0710 	stmdbeq	sl!, {r4, r8, r9, sl}^
    11ac:	07110000 	ldreq	r0, [r1, -r0]
    11b0:	00000b39 	andeq	r0, r0, r9, lsr fp
    11b4:	060e0712 	undefined instruction 0x060e0712
    11b8:	07130000 	ldreq	r0, [r3, -r0]
    11bc:	000002be 	undefined instruction 0x000002be
    11c0:	06900714 	undefined instruction 0x06900714
    11c4:	07150000 	ldreq	r0, [r5, -r0]
    11c8:	000008e5 	andeq	r0, r0, r5, ror #17
    11cc:	02d00716 	sbcseq	r0, r0, #5767168	; 0x580000
    11d0:	07170000 	ldreq	r0, [r7, -r0]
    11d4:	0000090a 	andeq	r0, r0, sl, lsl #18
    11d8:	02150718 	andseq	r0, r5, #6291456	; 0x600000
    11dc:	07190000 	ldreq	r0, [r9, -r0]
    11e0:	00000776 	andeq	r0, r0, r6, ror r7
    11e4:	02f0071a 	rscseq	r0, r0, #6815744	; 0x680000
    11e8:	071b0000 	ldreq	r0, [fp, -r0]
    11ec:	00000bc1 	andeq	r0, r0, r1, asr #23
    11f0:	0405071c 	streq	r0, [r5], #-1820	; 0x71c
    11f4:	071d0000 	ldreq	r0, [sp, -r0]
    11f8:	00000810 	andeq	r0, r0, r0, lsl r8
    11fc:	0932071e 	ldmdbeq	r2!, {r1, r2, r3, r4, r8, r9, sl}
    1200:	071f0000 	ldreq	r0, [pc, -r0]
    1204:	00000267 	andeq	r0, r0, r7, ror #4
    1208:	05b10720 	ldreq	r0, [r1, #1824]!	; 0x720
    120c:	07210000 	streq	r0, [r1, -r0]!
    1210:	00000644 	andeq	r0, r0, r4, asr #12
    1214:	07ff0722 	ldrbeq	r0, [pc, r2, lsr #14]!
    1218:	07230000 	streq	r0, [r3, -r0]!
    121c:	000003ba 	undefined instruction 0x000003ba
    1220:	08990724 	ldmeq	r9, {r2, r5, r8, r9, sl}
    1224:	07250000 	streq	r0, [r5, -r0]!
    1228:	00000b4b 	andeq	r0, r0, fp, asr #22
    122c:	08830726 	stmeq	r3, {r1, r2, r5, r8, r9, sl}
    1230:	07270000 	streq	r0, [r7, -r0]!
    1234:	0000023e 	andeq	r0, r0, lr, lsr r2
    1238:	09b70728 	ldmibeq	r7!, {r3, r5, r8, r9, sl}
    123c:	07290000 	streq	r0, [r9, -r0]!
    1240:	00000ae5 	andeq	r0, r0, r5, ror #21
    1244:	0a87072a 	beq	fe1c2ef4 <rEINTPEND+0xa81c2e4c>
    1248:	072b0000 	streq	r0, [fp, -r0]!
    124c:	00000948 	andeq	r0, r0, r8, asr #18
    1250:	09f5072c 	ldmibeq	r5!, {r2, r3, r5, r8, r9, sl}^
    1254:	072d0000 	streq	r0, [sp, -r0]!
    1258:	000009c7 	andeq	r0, r0, r7, asr #19
    125c:	03cf072e 	biceq	r0, pc, #12058624	; 0xb80000
    1260:	072f0000 	streq	r0, [pc, -r0]!
    1264:	000006a7 	andeq	r0, r0, r7, lsr #13
    1268:	04130730 	ldreq	r0, [r3], #-1840	; 0x730
    126c:	07310000 	ldreq	r0, [r1, -r0]!
    1270:	00000989 	andeq	r0, r0, r9, lsl #19
    1274:	03520732 	cmpeq	r2, #13107200	; 0xc80000
    1278:	07330000 	ldreq	r0, [r3, -r0]!
    127c:	000005fd 	strdeq	r0, [r0], -sp
    1280:	0bd50734 	bleq	ff542f58 <rEINTPEND+0xa9542eb0>
    1284:	07350000 	ldreq	r0, [r5, -r0]!
    1288:	000004e1 	andeq	r0, r0, r1, ror #9
    128c:	07a80736 	undefined instruction 0x07a80736
    1290:	07370000 	ldreq	r0, [r7, -r0]!
    1294:	00000792 	muleq	r0, r2, r7
    1298:	03160738 	tsteq	r6, #14680064	; 0xe00000
    129c:	07390000 	ldreq	r0, [r9, -r0]!
    12a0:	000006f3 	strdeq	r0, [r0], -r3
    12a4:	03e2073a 	mvneq	r0, #15204352	; 0xe80000
    12a8:	073b0000 	ldreq	r0, [fp, -r0]!
    12ac:	000006bc 	undefined instruction 0x000006bc
    12b0:	050f073c 	streq	r0, [pc, #-1852]	; b7c <DISABLE_IRQ+0xafc>
    12b4:	073d0000 	ldreq	r0, [sp, -r0]!
    12b8:	0000056d 	andeq	r0, r0, sp, ror #10
    12bc:	04cb073e 	strbeq	r0, [fp], #1854	; 0x73e
    12c0:	073f0000 	ldreq	r0, [pc, -r0]!
    12c4:	0000036e 	andeq	r0, r0, lr, ror #6
    12c8:	8b0700c0 	blhi	1c15d0 <DISABLE_IRQ+0x1c1550>
    12cc:	c1000005 	tstgt	r0, r5
    12d0:	08370700 	ldmdaeq	r7!, {r8, r9, sl}
    12d4:	00c20000 	sbceq	r0, r2, r0
    12d8:	00067407 	andeq	r7, r6, r7, lsl #8
    12dc:	0000c300 	andeq	ip, r0, r0, lsl #6
    12e0:	b5050406 	strlt	r0, [r5, #-1030]	; 0x406
    12e4:	000002a7 	andeq	r0, r0, r7, lsr #5
    12e8:	0009e407 	andeq	lr, r9, r7, lsl #8
    12ec:	57071100 	strpl	r1, [r7, -r0, lsl #2]
    12f0:	12000004 	andne	r0, r0, #4
    12f4:	0001db07 	andeq	sp, r1, r7, lsl #22
    12f8:	c3071300 	movwgt	r1, #29440	; 0x7300
    12fc:	14000007 	strne	r0, [r0], #-7
    1300:	00073307 	andeq	r3, r7, r7, lsl #6
    1304:	44071500 	strmi	r1, [r7], #-1280	; 0x500
    1308:	1600000a 	strne	r0, [r0], -sl
    130c:	000b8e07 	andeq	r8, fp, r7, lsl #28
    1310:	c9071700 	stmdbgt	r7, {r8, r9, sl, ip}
    1314:	18000005 	stmdane	r0, {r0, r2}
    1318:	0008a907 	andeq	sl, r8, r7, lsl #18
    131c:	50071900 	andpl	r1, r7, r0, lsl #18
    1320:	1a000008 	bne	1348 <DISABLE_IRQ+0x12c8>
    1324:	00071707 	andeq	r1, r7, r7, lsl #14
    1328:	1b071b00 	blne	1c7f30 <DISABLE_IRQ+0x1c7eb0>
    132c:	1c00000b 	stcne	0, cr0, [r0], {11}
    1330:	0c090800 	stceq	8, cr0, [r9], {0}
    1334:	06080000 	streq	r0, [r8], -r0
    1338:	0002d023 	andeq	sp, r2, r3, lsr #32
    133c:	03110900 	tsteq	r1, #0
    1340:	24060000 	strcs	r0, [r6]
    1344:	000002d0 	ldrdeq	r0, [r0], -r0
    1348:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    134c:	00000281 	andeq	r0, r0, r1, lsl #5
    1350:	02d02506 	sbcseq	r2, r0, #25165824	; 0x1800000
    1354:	23020000 	movwcs	r0, #8192	; 0x2000
    1358:	040a0004 	streq	r0, [sl], #-4
    135c:	000002a7 	andeq	r0, r0, r7, lsr #5
    1360:	000c0904 	andeq	r0, ip, r4, lsl #18
    1364:	a7260600 	strge	r0, [r6, -r0, lsl #12]!
    1368:	08000002 	stmdaeq	r0, {r1}
    136c:	0000065c 	andeq	r0, r0, ip, asr r6
    1370:	262f0710 	undefined instruction 0x262f0710
    1374:	09000003 	stmdbeq	r0, {r0, r1}
    1378:	00000ac9 	andeq	r0, r0, r9, asr #21
    137c:	02d63107 	sbcseq	r3, r6, #-1073741823	; 0xc0000001
    1380:	23020000 	movwcs	r0, #8192	; 0x2000
    1384:	08e00900 	stmiaeq	r0!, {r8, fp}^
    1388:	32070000 	andcc	r0, r7, #0
    138c:	00000326 	andeq	r0, r0, r6, lsr #6
    1390:	09082302 	stmdbeq	r8, {r1, r8, r9, sp}
    1394:	00000900 	andeq	r0, r0, r0, lsl #18
    1398:	003a3307 	eorseq	r3, sl, r7, lsl #6
    139c:	23020000 	movwcs	r0, #8192	; 0x2000
    13a0:	0427090c 	strteq	r0, [r7], #-2316	; 0x90c
    13a4:	34070000 	strcc	r0, [r7]
    13a8:	0000003a 	andeq	r0, r0, sl, lsr r0
    13ac:	000d2302 	andeq	r2, sp, r2, lsl #6
    13b0:	003a040a 	eorseq	r0, sl, sl, lsl #8
    13b4:	5c040000 	stcpl	0, cr0, [r4], {0}
    13b8:	07000006 	streq	r0, [r0, -r6]
    13bc:	0002e136 	andeq	lr, r2, r6, lsr r1
    13c0:	099f0800 	ldmibeq	pc, {fp}
    13c4:	076c0000 	strbeq	r0, [ip, -r0]!
    13c8:	0004cc3a 	andeq	ip, r4, sl, lsr ip
    13cc:	14810900 	strne	r0, [r1], #2304	; 0x900
    13d0:	3b070000 	blcc	1c13d8 <DISABLE_IRQ+0x1c1358>
    13d4:	000004cc 	andeq	r0, r0, ip, asr #9
    13d8:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    13dc:	0000044d 	andeq	r0, r0, sp, asr #8
    13e0:	02d64107 	sbcseq	r4, r6, #-1073741823	; 0xc0000001
    13e4:	23020000 	movwcs	r0, #8192	; 0x2000
    13e8:	05520904 	ldrbeq	r0, [r2, #-2308]	; 0x904
    13ec:	45070000 	strmi	r0, [r7]
    13f0:	000004d2 	ldrdeq	r0, [r0], -r2
    13f4:	090c2302 	stmdbeq	ip, {r1, r8, r9, sp}
    13f8:	00001aef 	andeq	r1, r0, pc, ror #21
    13fc:	005e4b07 	subseq	r4, lr, r7, lsl #22
    1400:	23020000 	movwcs	r0, #8192	; 0x2000
    1404:	08780910 	ldmdaeq	r8!, {r4, r8, fp}^
    1408:	4c070000 	stcmi	0, cr0, [r7], {0}
    140c:	0000005e 	andeq	r0, r0, lr, asr r0
    1410:	09142302 	ldmdbeq	r4, {r1, r8, r9, sp}
    1414:	00001d35 	andeq	r1, r0, r5, lsr sp
    1418:	003a4d07 	eorseq	r4, sl, r7, lsl #26
    141c:	23020000 	movwcs	r0, #8192	; 0x2000
    1420:	1e5a0918 	mrcne	9, 2, r0, cr10, cr8, {0}
    1424:	51070000 	tstpl	r7, r0
    1428:	0000003a 	andeq	r0, r0, sl, lsr r0
    142c:	09192302 	ldmdbeq	r9, {r1, r8, r9, sp}
    1430:	00000364 	andeq	r0, r0, r4, ror #6
    1434:	003a5307 	eorseq	r5, sl, r7, lsl #6
    1438:	23020000 	movwcs	r0, #8192	; 0x2000
    143c:	043f091a 	ldrteq	r0, [pc], #2330	; 1444 <DISABLE_IRQ+0x13c4>
    1440:	56070000 	strpl	r0, [r7], -r0
    1444:	0000003a 	andeq	r0, r0, sl, lsr r0
    1448:	091b2302 	ldmdbeq	fp, {r1, r8, r9, sp}
    144c:	00000bad 	andeq	r0, r0, sp, lsr #23
    1450:	05465a07 	strbeq	r5, [r6, #-2567]	; 0xa07
    1454:	23020000 	movwcs	r0, #8192	; 0x2000
    1458:	0bf8091c 	bleq	ffe038d0 <rEINTPEND+0xa9e03828>
    145c:	5f070000 	svcpl	0x00070000
    1460:	000002d6 	ldrdeq	r0, [r0], -r6
    1464:	09202302 	stmdbeq	r0!, {r1, r8, r9, sp}
    1468:	00000b03 	andeq	r0, r0, r3, lsl #22
    146c:	005e6307 	subseq	r6, lr, r7, lsl #6
    1470:	23020000 	movwcs	r0, #8192	; 0x2000
    1474:	06250928 	strteq	r0, [r5], -r8, lsr #18
    1478:	65070000 	strvs	r0, [r7]
    147c:	0000054c 	andeq	r0, r0, ip, asr #10
    1480:	092c2302 	stmdbeq	ip!, {r1, r8, r9, sp}
    1484:	0000086e 	andeq	r0, r0, lr, ror #16
    1488:	02d66607 	sbcseq	r6, r6, #7340032	; 0x700000
    148c:	23020000 	movwcs	r0, #8192	; 0x2000
    1490:	0c0e0930 	stceq	9, cr0, [lr], {48}	; 0x30
    1494:	68070000 	stmdavs	r7, {}
    1498:	0000009b 	muleq	r0, fp, r0
    149c:	09382302 	ldmdbeq	r8!, {r1, r8, r9, sp}
    14a0:	000007f3 	strdeq	r0, [r0], -r3
    14a4:	009b6907 	addseq	r6, fp, r7, lsl #18
    14a8:	23020000 	movwcs	r0, #8192	; 0x2000
    14ac:	05a7093c 	streq	r0, [r7, #2364]!	; 0x93c
    14b0:	6b070000 	blvs	1c14b8 <DISABLE_IRQ+0x1c1438>
    14b4:	00000552 	andeq	r0, r0, r2, asr r5
    14b8:	0b402302 	bleq	100a0c8 <MEM_SIZE+0x80a0c8>
    14bc:	0067736d 	rsbeq	r7, r7, sp, ror #6
    14c0:	04cc6d07 	strbeq	r6, [ip], #3335	; 0xd07
    14c4:	23020000 	movwcs	r0, #8192	; 0x2000
    14c8:	16300944 	ldrtne	r0, [r0], -r4, asr #18
    14cc:	70070000 	andvc	r0, r7, r0
    14d0:	000000a6 	andeq	r0, r0, r6, lsr #1
    14d4:	09482302 	stmdbeq	r8, {r1, r8, r9, sp}^
    14d8:	000008db 	ldrdeq	r0, [r0], -fp
    14dc:	03267307 	teqeq	r6, #469762048	; 0x1c000000
    14e0:	23020000 	movwcs	r0, #8192	; 0x2000
    14e4:	09ac094c 	stmibeq	ip!, {r2, r3, r6, r8, fp}
    14e8:	75070000 	strvc	r0, [r7]
    14ec:	0000003a 	andeq	r0, r0, sl, lsr r0
    14f0:	09502302 	ldmdbeq	r0, {r1, r8, r9, sp}^
    14f4:	000007e6 	andeq	r0, r0, r6, ror #15
    14f8:	003a7607 	eorseq	r7, sl, r7, lsl #12
    14fc:	23020000 	movwcs	r0, #8192	; 0x2000
    1500:	053d0951 	ldreq	r0, [sp, #-2385]!	; 0x951
    1504:	79070000 	stmdbvc	r7, {}
    1508:	00000558 	andeq	r0, r0, r8, asr r5
    150c:	09542302 	ldmdbeq	r4, {r1, r8, r9, sp}^
    1510:	00000ab5 	undefined instruction 0x00000ab5
    1514:	05db7c07 	ldrbeq	r7, [fp, #3079]	; 0xc07
    1518:	23020000 	movwcs	r0, #8192	; 0x2000
    151c:	022b0958 	eoreq	r0, fp, #1441792	; 0x160000
    1520:	80070000 	andhi	r0, r7, r0
    1524:	00000618 	andeq	r0, r0, r8, lsl r6
    1528:	095c2302 	ldmdbeq	ip, {r1, r8, r9, sp}^
    152c:	000004ad 	andeq	r0, r0, sp, lsr #9
    1530:	003a8407 	eorseq	r8, sl, r7, lsl #8
    1534:	23020000 	movwcs	r0, #8192	; 0x2000
    1538:	02550960 	subseq	r0, r5, #1572864	; 0x180000
    153c:	85070000 	strhi	r0, [r7]
    1540:	0000005e 	andeq	r0, r0, lr, asr r0
    1544:	09642302 	stmdbeq	r4!, {r1, r8, r9, sp}^
    1548:	0000075a 	andeq	r0, r0, sl, asr r7
    154c:	04cc8607 	strbeq	r8, [ip], #1543	; 0x607
    1550:	23020000 	movwcs	r0, #8192	; 0x2000
    1554:	040a0068 	streq	r0, [sl], #-104	; 0x68
    1558:	00000025 	andeq	r0, r0, r5, lsr #32
    155c:	0004cc0c 	andeq	ip, r4, ip, lsl #24
    1560:	0004e200 	andeq	lr, r4, r0, lsl #4
    1564:	04e20d00 	strbteq	r0, [r2], #3328	; 0xd00
    1568:	00000000 	andeq	r0, r0, r0
    156c:	0807040e 	stmdaeq	r7, {r1, r2, r3, sl}
    1570:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1574:	465a071c 	undefined instruction 0x465a071c
    1578:	09000005 	stmdbeq	r0, {r0, r2}
    157c:	00000536 	andeq	r0, r0, r6, lsr r5
    1580:	032c2708 	teqeq	ip, #2097152	; 0x200000
    1584:	23020000 	movwcs	r0, #8192	; 0x2000
    1588:	08670900 	stmdaeq	r7!, {r8, fp}^
    158c:	2a080000 	bcs	201594 <DISABLE_IRQ+0x201514>
    1590:	00000691 	muleq	r0, r1, r6
    1594:	09102302 	ldmdbeq	r0, {r1, r8, r9, sp}
    1598:	00000bad 	andeq	r0, r0, sp, lsr #23
    159c:	05462c08 	strbeq	r2, [r6, #-3080]	; 0xc08
    15a0:	23020000 	movwcs	r0, #8192	; 0x2000
    15a4:	05f60914 	ldrbeq	r0, [r6, #2324]!	; 0x914
    15a8:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    15ac:	0000003a 	andeq	r0, r0, sl, lsr r0
    15b0:	09182302 	ldmdbeq	r8, {r1, r8, r9, sp}
    15b4:	00000473 	andeq	r0, r0, r3, ror r4
    15b8:	003a2f08 	eorseq	r2, sl, r8, lsl #30
    15bc:	23020000 	movwcs	r0, #8192	; 0x2000
    15c0:	048e0919 	streq	r0, [lr], #2329	; 0x919
    15c4:	30080000 	andcc	r0, r8, r0
    15c8:	0000003a 	andeq	r0, r0, sl, lsr r0
    15cc:	001a2302 	andseq	r2, sl, r2, lsl #6
    15d0:	04e5040a 	strbteq	r0, [r5], #1034	; 0x40a
    15d4:	040a0000 	streq	r0, [sl]
    15d8:	00000085 	andeq	r0, r0, r5, lsl #1
    15dc:	02d6040a 	sbcseq	r0, r6, #167772160	; 0xa000000
    15e0:	040a0000 	streq	r0, [sl]
    15e4:	0000032c 	andeq	r0, r0, ip, lsr #6
    15e8:	00074b08 	andeq	r4, r7, r8, lsl #22
    15ec:	7c072c00 	stcvc	12, cr2, [r7], {0}
    15f0:	000005db 	ldrdeq	r0, [r0], -fp
    15f4:	00053609 	andeq	r3, r5, r9, lsl #12
    15f8:	2c2e0900 	stccs	9, cr0, [lr]
    15fc:	02000003 	andeq	r0, r0, #3
    1600:	dd090023 	stcle	0, cr0, [r9, #-140]	; 0xffffff74
    1604:	09000007 	stmdbeq	r0, {r0, r1, r2}
    1608:	00067930 	andeq	r7, r6, r0, lsr r9
    160c:	10230200 	eorne	r0, r3, r0, lsl #4
    1610:	0005e409 	andeq	lr, r5, r9, lsl #8
    1614:	a6310900 	ldrtge	r0, [r1], -r0, lsl #18
    1618:	02000000 	andeq	r0, r0, #0
    161c:	0e091423 	cdpeq	4, 0, cr1, cr9, cr3, {1}
    1620:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    1624:	0000a632 	andeq	sl, r0, r2, lsr r6
    1628:	18230200 	stmdane	r3!, {r9}
    162c:	0005f009 	andeq	pc, r5, r9
    1630:	79340900 	ldmdbvc	r4!, {r8, fp}
    1634:	02000006 	andeq	r0, r0, #6
    1638:	4e091c23 	cdpmi	12, 0, cr1, cr9, cr3, {1}
    163c:	09000001 	stmdbeq	r0, {r0}
    1640:	00067935 	andeq	r7, r6, r5, lsr r9
    1644:	20230200 	eorcs	r0, r3, r0, lsl #4
    1648:	00052709 	andeq	r2, r5, r9, lsl #14
    164c:	a6360900 	ldrtge	r0, [r6], -r0, lsl #18
    1650:	02000000 	andeq	r0, r0, #0
    1654:	9b092423 	blls	24a6e8 <DISABLE_IRQ+0x24a668>
    1658:	09000004 	stmdbeq	r0, {r2}
    165c:	0000a637 	andeq	sl, r0, r7, lsr r6
    1660:	28230200 	stmdacs	r3!, {r9}
    1664:	5e040a00 	vmlapl.f32	s0, s8, s0
    1668:	08000005 	stmdaeq	r0, {r0, r2}
    166c:	00000aa7 	andeq	r0, r0, r7, lsr #21
    1670:	18800718 	stmne	r0, {r3, r4, r8, r9, sl}
    1674:	09000006 	stmdbeq	r0, {r1, r2}
    1678:	00000536 	andeq	r0, r0, r6, lsr r5
    167c:	032c220a 	teqeq	ip, #-1610612736	; 0xa0000000
    1680:	23020000 	movwcs	r0, #8192	; 0x2000
    1684:	04470900 	strbeq	r0, [r7], #-2304	; 0x900
    1688:	230a0000 	movwcs	r0, #40960	; 0xa000
    168c:	0000005e 	andeq	r0, r0, lr, asr r0
    1690:	09102302 	ldmdbeq	r0, {r1, r8, r9, sp}
    1694:	00001b3f 	andeq	r1, r0, pc, lsr fp
    1698:	068b240a 	streq	r2, [fp], sl, lsl #8
    169c:	23020000 	movwcs	r0, #8192	; 0x2000
    16a0:	040a0014 	streq	r0, [sl], #-20
    16a4:	000005e1 	andeq	r0, r0, r1, ror #11
    16a8:	00099f04 	andeq	r9, r9, r4, lsl #30
    16ac:	37890700 	strcc	r0, [r9, r0, lsl #14]
    16b0:	0a000003 	beq	16c4 <DISABLE_IRQ+0x1644>
    16b4:	0004cc04 	andeq	ip, r4, r4, lsl #24
    16b8:	0b610800 	bleq	18436c0 <MEM_SIZE+0x10436c0>
    16bc:	090c0000 	stmdbeq	ip, {}
    16c0:	00066621 	andeq	r6, r6, r1, lsr #12
    16c4:	03110900 	tsteq	r1, #0
    16c8:	23090000 	movwcs	r0, #36864	; 0x9000
    16cc:	00000666 	andeq	r0, r0, r6, ror #12
    16d0:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    16d4:	000005dc 	ldrdeq	r0, [r0], -ip
    16d8:	066c2409 	strbteq	r2, [ip], -r9, lsl #8
    16dc:	23020000 	movwcs	r0, #8192	; 0x2000
    16e0:	16300904 	ldrtne	r0, [r0], -r4, lsl #18
    16e4:	25090000 	strcs	r0, [r9]
    16e8:	000000a6 	andeq	r0, r0, r6, lsr #1
    16ec:	00082302 	andeq	r2, r8, r2, lsl #6
    16f0:	062f040a 	strteq	r0, [pc], -sl, lsl #8
    16f4:	040f0000 	streq	r0, [pc], #0	; 16fc <DISABLE_IRQ+0x167c>
    16f8:	000b6104 	andeq	r6, fp, r4, lsl #2
    16fc:	2f270900 	svccs	0x00270900
    1700:	0a000006 	beq	1720 <DISABLE_IRQ+0x16a0>
    1704:	00066e04 	andeq	r6, r6, r4, lsl #28
    1708:	8b011000 	blhi	45710 <DISABLE_IRQ+0x45690>
    170c:	11000006 	tstne	r0, r6
    1710:	00000618 	andeq	r0, r0, r8, lsl r6
    1714:	7f040a00 	svcvc	0x00040a00
    1718:	0a000006 	beq	1738 <DISABLE_IRQ+0x16b8>
    171c:	00061e04 	andeq	r1, r6, r4, lsl #28
    1720:	0c250800 	stceq	8, cr0, [r5]
    1724:	0b200000 	bleq	80172c <MEM_SIZE+0x172c>
    1728:	0006ea23 	andeq	lr, r6, r3, lsr #20
    172c:	05360900 	ldreq	r0, [r6, #-2304]!	; 0x900
    1730:	240b0000 	strcs	r0, [fp]
    1734:	0000032c 	andeq	r0, r0, ip, lsr #6
    1738:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    173c:	00000c79 	andeq	r0, r0, r9, ror ip
    1740:	005e270b 	subseq	r2, lr, fp, lsl #14
    1744:	23020000 	movwcs	r0, #8192	; 0x2000
    1748:	0cd40910 	ldcleq	9, cr0, [r4], {16}
    174c:	2a0b0000 	bcs	2c1754 <DISABLE_IRQ+0x2c16d4>
    1750:	0000005e 	andeq	r0, r0, lr, asr r0
    1754:	09142302 	ldmdbeq	r4, {r1, r8, r9, sp}
    1758:	00000c45 	andeq	r0, r0, r5, asr #24
    175c:	03262e0b 	teqeq	r6, #176	; 0xb0
    1760:	23020000 	movwcs	r0, #8192	; 0x2000
    1764:	0c9a0918 	ldceq	9, cr0, [sl], {24}
    1768:	310b0000 	tstcc	fp, r0
    176c:	00000691 	muleq	r0, r1, r6
    1770:	001c2302 	andseq	r2, ip, r2, lsl #6
    1774:	000c2504 	andeq	r2, ip, r4, lsl #10
    1778:	97330b00 	ldrls	r0, [r3, -r0, lsl #22]!
    177c:	12000006 	andne	r0, r0, #6
    1780:	000cae01 	andeq	sl, ip, r1, lsl #28
    1784:	01390100 	teqeq	r9, r0, lsl #2
    1788:	00000045 	andeq	r0, r0, r5, asr #32
    178c:	30000a70 	andcc	r0, r0, r0, ror sl
    1790:	30000b0c 	andcc	r0, r0, ip, lsl #22
    1794:	000006be 	undefined instruction 0x000006be
    1798:	00000765 	andeq	r0, r0, r5, ror #14
    179c:	00032f13 	andeq	r2, r3, r3, lsl pc
    17a0:	65390100 	ldrvs	r0, [r9, #-256]!	; 0x100
    17a4:	dd000007 	stcle	0, cr0, [r0, #-28]	; 0xffffffe4
    17a8:	14000006 	strne	r0, [r0], #-6
    17ac:	0000046a 	andeq	r0, r0, sl, ror #8
    17b0:	03263901 	teqeq	r6, #16384	; 0x4000
    17b4:	51010000 	tstpl	r1, r0
    17b8:	00054714 	andeq	r4, r5, r4, lsl r7
    17bc:	cc390100 	ldfgts	f0, [r9]
    17c0:	01000004 	tsteq	r0, r4
    17c4:	0bee1352 	bleq	ffb86514 <rEINTPEND+0xa9b8646c>
    17c8:	39010000 	stmdbcc	r1, {}
    17cc:	0000005e 	andeq	r0, r0, lr, asr r0
    17d0:	00000706 	andeq	r0, r0, r6, lsl #14
    17d4:	0003fb15 	andeq	pc, r3, r5, lsl fp
    17d8:	263c0100 	ldrtcs	r0, [ip], -r0, lsl #2
    17dc:	24000003 	strcs	r0, [r0], #-3
    17e0:	16000007 	strne	r0, [r0], -r7
    17e4:	00000c69 	andeq	r0, r0, r9, ror #24
    17e8:	003a3d01 	eorseq	r3, sl, r1, lsl #26
    17ec:	0a000000 	beq	17f4 <DISABLE_IRQ+0x1774>
    17f0:	0006ea04 	andeq	lr, r6, r4, lsl #20
    17f4:	c3011700 	movwgt	r1, #5888	; 0x1700
    17f8:	0100000c 	tsteq	r0, ip
    17fc:	4501019f 	strmi	r0, [r1, #-415]	; 0x19f
    1800:	0c000000 	stceq	0, cr0, [r0], {0}
    1804:	9830000b 	ldmdals	r0!, {r0, r1, r3}
    1808:	4d30000b 	ldcmi	0, cr0, [r0, #-44]!	; 0xffffffd4
    180c:	c6000007 	strgt	r0, [r0], -r7
    1810:	18000007 	stmdane	r0, {r0, r1, r2}
    1814:	0000032f 	andeq	r0, r0, pc, lsr #6
    1818:	65019f01 	strvs	r9, [r1, #-3841]	; 0xf01
    181c:	78000007 	stmdavc	r0, {r0, r1, r2}
    1820:	18000007 	stmdane	r0, {r0, r1, r2}
    1824:	00000c3a 	andeq	r0, r0, sl, lsr ip
    1828:	6c019f01 	stcvs	15, cr9, [r1], {1}
    182c:	96000006 	strls	r0, [r0], -r6
    1830:	19000007 	stmdbne	r0, {r0, r1, r2}
    1834:	0000028a 	andeq	r0, r0, sl, lsl #5
    1838:	2601a101 	strcs	sl, [r1], -r1, lsl #2
    183c:	bf000003 	svclt	0x00000003
    1840:	1a000007 	bne	1864 <DISABLE_IRQ+0x17e4>
    1844:	00000118 	andeq	r0, r0, r8, lsl r1
    1848:	9001a301 	andls	sl, r1, r1, lsl #6
    184c:	00000000 	andeq	r0, r0, r0
    1850:	000c451b 	andeq	r4, ip, fp, lsl r5
    1854:	01850100 	orreq	r0, r5, r0, lsl #2
    1858:	0000066c 	andeq	r0, r0, ip, ror #12
    185c:	00082501 	andeq	r2, r8, r1, lsl #10
    1860:	032f1c00 	teqeq	pc, #0
    1864:	85010000 	strhi	r0, [r1]
    1868:	00000765 	andeq	r0, r0, r5, ror #14
    186c:	000d2b1c 	andeq	r2, sp, ip, lsl fp
    1870:	5e850100 	rmfpls	f0, f5, f0
    1874:	16000000 	strne	r0, [r0], -r0
    1878:	00000c19 	andeq	r0, r0, r9, lsl ip
    187c:	03268801 	teqeq	r6, #65536	; 0x10000
    1880:	91160000 	tstls	r6, r0
    1884:	0100000c 	tsteq	r0, ip
    1888:	00032689 	andeq	r2, r3, r9, lsl #13
    188c:	0cec1600 	stcleq	6, cr1, [ip]
    1890:	8a010000 	bhi	41898 <DISABLE_IRQ+0x41818>
    1894:	0000005e 	andeq	r0, r0, lr, asr r0
    1898:	000c5a16 	andeq	r5, ip, r6, lsl sl
    189c:	5e8b0100 	rmfple	f0, f3, f0
    18a0:	16000000 	strne	r0, [r0], -r0
    18a4:	00000118 	andeq	r0, r0, r8, lsl r1
    18a8:	00908d01 	addseq	r8, r0, r1, lsl #26
    18ac:	17000000 	strne	r0, [r0, -r0]
    18b0:	000d0e01 	andeq	r0, sp, r1, lsl #28
    18b4:	013d0100 	teqeq	sp, r0, lsl #2
    18b8:	00004501 	andeq	r4, r0, r1, lsl #10
    18bc:	000b9800 	andeq	r9, fp, r0, lsl #16
    18c0:	000da030 	andeq	sl, sp, r0, lsr r0
    18c4:	0007d230 	andeq	sp, r7, r0, lsr r2
    18c8:	0008fe00 	andeq	pc, r8, r0, lsl #28
    18cc:	032f1800 	teqeq	pc, #0
    18d0:	3d010000 	stccc	0, cr0, [r1]
    18d4:	00076501 	andeq	r6, r7, r1, lsl #10
    18d8:	0007fd00 	andeq	pc, r7, r0, lsl #26
    18dc:	0c3a1800 	ldceq	8, cr1, [sl]
    18e0:	3d010000 	stccc	0, cr0, [r1]
    18e4:	00062901 	andeq	r2, r6, r1, lsl #18
    18e8:	00085d00 	andeq	r5, r8, r0, lsl #26
    18ec:	0d2b1800 	stceq	8, cr1, [fp]
    18f0:	3d010000 	stccc	0, cr0, [r1]
    18f4:	00005e01 	andeq	r5, r0, r1, lsl #28
    18f8:	0008a700 	andeq	sl, r8, r0, lsl #14
    18fc:	07ec1900 	strbeq	r1, [ip, r0, lsl #18]!
    1900:	40010000 	andmi	r0, r1, r0
    1904:	00004501 	andeq	r4, r0, r1, lsl #10
    1908:	0008fc00 	andeq	pc, r8, r0, lsl #24
    190c:	028a1900 	addeq	r1, sl, #0
    1910:	41010000 	tstmi	r1, r0
    1914:	00032601 	andeq	r2, r3, r1, lsl #12
    1918:	00091a00 	andeq	r1, r9, r0, lsl #20
    191c:	0cfc1900 	ldcleq	9, cr1, [ip]
    1920:	42010000 	andmi	r0, r1, #0
    1924:	00069101 	andeq	r9, r6, r1, lsl #2
    1928:	00094e00 	andeq	r4, r9, r0, lsl #28
    192c:	01181900 	tsteq	r8, r0, lsl #18
    1930:	44010000 	strmi	r0, [r1]
    1934:	00009001 	andeq	r9, r0, r1
    1938:	00097700 	andeq	r7, r9, r0, lsl #14
    193c:	07c61d00 	strbeq	r1, [r6, r0, lsl #26]
    1940:	0bdc0000 	bleq	ff701948 <rEINTPEND+0xa97018a0>
    1944:	00183000 	andseq	r3, r8, r0
    1948:	6c010000 	stcvs	0, cr0, [r1], {0}
    194c:	07e21e01 	strbeq	r1, [r2, r1, lsl #28]!
    1950:	d71e0000 	ldrle	r0, [lr, -r0]
    1954:	1f000007 	svcne	0x00000007
    1958:	00000048 	andeq	r0, r0, r8, asr #32
    195c:	0007ed20 	andeq	lr, r7, r0, lsr #26
    1960:	0009ab00 	andeq	sl, r9, r0, lsl #22
    1964:	07f82000 	ldrbeq	r2, [r8, r0]!
    1968:	09d40000 	ldmibeq	r4, {}^
    196c:	03210000 	teqeq	r1, #0
    1970:	20000008 	andcs	r0, r0, r8
    1974:	0000080e 	andeq	r0, r0, lr, lsl #16
    1978:	00000a1e 	andeq	r0, r0, lr, lsl sl
    197c:	00081920 	andeq	r1, r8, r0, lsr #18
    1980:	000a5200 	andeq	r5, sl, r0, lsl #4
    1984:	00000000 	andeq	r0, r0, r0
    1988:	00038f22 	andeq	r8, r3, r2, lsr #30
    198c:	914a0c00 	cmpls	sl, r0, lsl #24
    1990:	01000006 	tsteq	r0, r6
    1994:	09da0001 	ldmibeq	sl, {r0}^
    1998:	00020000 	andeq	r0, r2, r0
    199c:	00000790 	muleq	r0, r0, r7
    19a0:	004d0104 	subeq	r0, sp, r4, lsl #2
    19a4:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    19a8:	6300000e 	movwvs	r0, #14
    19ac:	a0000000 	andge	r0, r0, r0
    19b0:	6430000d 	ldrtvs	r0, [r0], #-13
    19b4:	41300013 	teqmi	r0, r3, lsl r0
    19b8:	02000006 	andeq	r0, r0, #6
    19bc:	00000564 	andeq	r0, r0, r4, ror #10
    19c0:	01032103 	tsteq	r3, r3, lsl #2
    19c4:	0000a006 	andeq	sl, r0, r6
    19c8:	0ee80400 	cdpeq	4, 14, cr0, cr8, cr0, {0}
    19cc:	23030000 	movwcs	r0, #12288	; 0x3000
    19d0:	0000003e 	andeq	r0, r0, lr, lsr r0
    19d4:	9e080103 	adflse	f0, f0, f3
    19d8:	04000000 	streq	r0, [r0]
    19dc:	000004f7 	strdeq	r0, [r0], -r7
    19e0:	003e2403 	eorseq	r2, lr, r3, lsl #8
    19e4:	fb040000 	blx	1019ee <DISABLE_IRQ+0x10196e>
    19e8:	0300000a 	movweq	r0, #10
    19ec:	00005b26 	andeq	r5, r0, r6, lsr #22
    19f0:	07020300 	streq	r0, [r2, -r0, lsl #6]
    19f4:	0000008b 	andeq	r0, r0, fp, lsl #1
    19f8:	59050203 	stmdbpl	r5, {r0, r1, r9}
    19fc:	04000000 	streq	r0, [r0]
    1a00:	00000338 	andeq	r0, r0, r8, lsr r3
    1a04:	00742803 	rsbseq	r2, r4, r3, lsl #16
    1a08:	04030000 	streq	r0, [r3]
    1a0c:	00003707 	andeq	r3, r0, r7, lsl #14
    1a10:	05040500 	streq	r0, [r4, #-1280]	; 0x500
    1a14:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1a18:	00050803 	andeq	r0, r5, r3, lsl #16
    1a1c:	03000000 	movweq	r0, #0
    1a20:	002d0708 	eoreq	r0, sp, r8, lsl #14
    1a24:	9f040000 	svcls	0x00040000
    1a28:	03000003 	movweq	r0, #3
    1a2c:	0000742d 	andeq	r7, r0, sp, lsr #8
    1a30:	01320400 	teqeq	r2, r0, lsl #8
    1a34:	22040000 	andcs	r0, r4, #0
    1a38:	00000074 	andeq	r0, r0, r4, ror r0
    1a3c:	000a2704 	andeq	r2, sl, r4, lsl #14
    1a40:	692a0500 	stmdbvs	sl!, {r8, sl}
    1a44:	04000000 	streq	r0, [r0]
    1a48:	00000829 	andeq	r0, r0, r9, lsr #16
    1a4c:	00692c05 	rsbeq	r2, r9, r5, lsl #24
    1a50:	04060000 	streq	r0, [r6]
    1a54:	02614306 	rsbeq	r4, r1, #402653184	; 0x18000000
    1a58:	b5070000 	strlt	r0, [r7]
    1a5c:	0000000b 	andeq	r0, r0, fp
    1a60:	000b6e07 	andeq	r6, fp, r7, lsl #28
    1a64:	aa070100 	bge	1c1e6c <DISABLE_IRQ+0x1c1dec>
    1a68:	02000003 	andeq	r0, r0, #3
    1a6c:	00092107 	andeq	r2, r9, r7, lsl #2
    1a70:	35070300 	strcc	r0, [r7, #-768]	; 0x300
    1a74:	04000006 	streq	r0, [r0], #-6
    1a78:	000a3507 	andeq	r3, sl, r7, lsl #10
    1a7c:	d4070500 	strle	r0, [r7], #-1280	; 0x500
    1a80:	0600000a 	streq	r0, [r0], -sl
    1a84:	0002ac07 	andeq	sl, r2, r7, lsl #24
    1a88:	e3070700 	movw	r0, #30464	; 0x7700
    1a8c:	08000006 	stmdaeq	r0, {r1, r2}
    1a90:	0001ee07 	andeq	lr, r1, r7, lsl #28
    1a94:	cd070900 	stcgt	9, cr0, [r7]
    1a98:	0a000008 	beq	1ac0 <DISABLE_IRQ+0x1a40>
    1a9c:	000ba107 	andeq	sl, fp, r7, lsl #2
    1aa0:	80070b00 	andhi	r0, r7, r0, lsl #22
    1aa4:	0c000004 	stceq	0, cr0, [r0], {4}
    1aa8:	0008bc07 	andeq	fp, r8, r7, lsl #24
    1aac:	05070d00 	streq	r0, [r7, #-3328]	; 0xd00
    1ab0:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
    1ab4:	0006d007 	andeq	sp, r6, r7
    1ab8:	40070f00 	andmi	r0, r7, r0, lsl #30
    1abc:	10000003 	andne	r0, r0, r3
    1ac0:	00096a07 	andeq	r6, r9, r7, lsl #20
    1ac4:	39071100 	stmdbcc	r7, {r8, ip}
    1ac8:	1200000b 	andne	r0, r0, #11
    1acc:	00060e07 	andeq	r0, r6, r7, lsl #28
    1ad0:	be071300 	cdplt	3, 0, cr1, cr7, cr0, {0}
    1ad4:	14000002 	strne	r0, [r0], #-2
    1ad8:	00069007 	andeq	r9, r6, r7
    1adc:	e5071500 	str	r1, [r7, #-1280]	; 0x500
    1ae0:	16000008 	strne	r0, [r0], -r8
    1ae4:	0002d007 	andeq	sp, r2, r7
    1ae8:	0a071700 	beq	1c76f0 <DISABLE_IRQ+0x1c7670>
    1aec:	18000009 	stmdane	r0, {r0, r3}
    1af0:	00021507 	andeq	r1, r2, r7, lsl #10
    1af4:	76071900 	strvc	r1, [r7], -r0, lsl #18
    1af8:	1a000007 	bne	1b1c <DISABLE_IRQ+0x1a9c>
    1afc:	0002f007 	andeq	pc, r2, r7
    1b00:	c1071b00 	tstgt	r7, r0, lsl #22
    1b04:	1c00000b 	stcne	0, cr0, [r0], {11}
    1b08:	00040507 	andeq	r0, r4, r7, lsl #10
    1b0c:	10071d00 	andne	r1, r7, r0, lsl #26
    1b10:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
    1b14:	00093207 	andeq	r3, r9, r7, lsl #4
    1b18:	67071f00 	strvs	r1, [r7, -r0, lsl #30]
    1b1c:	20000002 	andcs	r0, r0, r2
    1b20:	0005b107 	andeq	fp, r5, r7, lsl #2
    1b24:	44072100 	strmi	r2, [r7], #-256	; 0x100
    1b28:	22000006 	andcs	r0, r0, #6
    1b2c:	0007ff07 	andeq	pc, r7, r7, lsl #30
    1b30:	ba072300 	blt	1ca738 <DISABLE_IRQ+0x1ca6b8>
    1b34:	24000003 	strcs	r0, [r0], #-3
    1b38:	00089907 	andeq	r9, r8, r7, lsl #18
    1b3c:	4b072500 	blmi	1caf44 <DISABLE_IRQ+0x1caec4>
    1b40:	2600000b 	strcs	r0, [r0], -fp
    1b44:	00088307 	andeq	r8, r8, r7, lsl #6
    1b48:	3e072700 	cdpcc	7, 0, cr2, cr7, cr0, {0}
    1b4c:	28000002 	stmdacs	r0, {r1}
    1b50:	0009b707 	andeq	fp, r9, r7, lsl #14
    1b54:	e5072900 	str	r2, [r7, #-2304]	; 0x900
    1b58:	2a00000a 	bcs	1b88 <DISABLE_IRQ+0x1b08>
    1b5c:	000a8707 	andeq	r8, sl, r7, lsl #14
    1b60:	48072b00 	stmdami	r7, {r8, r9, fp, sp}
    1b64:	2c000009 	stccs	0, cr0, [r0], {9}
    1b68:	0009f507 	andeq	pc, r9, r7, lsl #10
    1b6c:	c7072d00 	strgt	r2, [r7, -r0, lsl #26]
    1b70:	2e000009 	cdpcs	0, 0, cr0, cr0, cr9, {0}
    1b74:	0003cf07 	andeq	ip, r3, r7, lsl #30
    1b78:	a7072f00 	strge	r2, [r7, -r0, lsl #30]
    1b7c:	30000006 	andcc	r0, r0, r6
    1b80:	00041307 	andeq	r1, r4, r7, lsl #6
    1b84:	89073100 	stmdbhi	r7, {r8, ip, sp}
    1b88:	32000009 	andcc	r0, r0, #9
    1b8c:	00035207 	andeq	r5, r3, r7, lsl #4
    1b90:	fd073300 	stc2	3, cr3, [r7]
    1b94:	34000005 	strcc	r0, [r0], #-5
    1b98:	000bd507 	andeq	sp, fp, r7, lsl #10
    1b9c:	e1073500 	tst	r7, r0, lsl #10
    1ba0:	36000004 	strcc	r0, [r0], -r4
    1ba4:	0007a807 	andeq	sl, r7, r7, lsl #16
    1ba8:	92073700 	andls	r3, r7, #0
    1bac:	38000007 	stmdacc	r0, {r0, r1, r2}
    1bb0:	00031607 	andeq	r1, r3, r7, lsl #12
    1bb4:	f3073900 	vmls.i8	d3, d7, d0
    1bb8:	3a000006 	bcc	1bd8 <DISABLE_IRQ+0x1b58>
    1bbc:	0003e207 	andeq	lr, r3, r7, lsl #4
    1bc0:	bc073b00 	stclt	11, cr3, [r7], {0}
    1bc4:	3c000006 	stccc	0, cr0, [r0], {6}
    1bc8:	00050f07 	andeq	r0, r5, r7, lsl #30
    1bcc:	6d073d00 	stcvs	13, cr3, [r7]
    1bd0:	3e000005 	cdpcc	0, 0, cr0, cr0, cr5, {0}
    1bd4:	0004cb07 	andeq	ip, r4, r7, lsl #22
    1bd8:	6e073f00 	cdpvs	15, 0, cr3, cr7, cr0, {0}
    1bdc:	c0000003 	andgt	r0, r0, r3
    1be0:	058b0700 	streq	r0, [fp, #1792]	; 0x700
    1be4:	00c10000 	sbceq	r0, r1, r0
    1be8:	00083707 	andeq	r3, r8, r7, lsl #14
    1bec:	0700c200 	streq	ip, [r0, -r0, lsl #4]
    1bf0:	00000674 	andeq	r0, r0, r4, ror r6
    1bf4:	060000c3 	streq	r0, [r0], -r3, asr #1
    1bf8:	bea00604 	cdplt	6, 10, cr0, cr0, cr4, {0}
    1bfc:	07000002 	streq	r0, [r0, -r2]
    1c00:	00000df5 	strdeq	r0, [r0], -r5
    1c04:	0de60700 	stcleq	7, cr0, [r6]
    1c08:	07010000 	streq	r0, [r1, -r0]
    1c0c:	00000ed9 	ldrdeq	r0, [r0], -r9
    1c10:	0f210702 	svceq	0x00210702
    1c14:	07030000 	streq	r0, [r3, -r0]
    1c18:	00000d37 	andeq	r0, r0, r7, lsr sp
    1c1c:	0f690704 	svceq	0x00690704
    1c20:	07050000 	streq	r0, [r5, -r0]
    1c24:	00000e3f 	andeq	r0, r0, pc, lsr lr
    1c28:	0e2f0706 	cdpeq	7, 2, cr0, cr15, cr6, {0}
    1c2c:	07070000 	streq	r0, [r7, -r0]
    1c30:	00000f37 	andeq	r0, r0, r7, lsr pc
    1c34:	0d440708 	stcleq	7, cr0, [r4, #-32]	; 0xffffffe0
    1c38:	07090000 	streq	r0, [r9, -r0]
    1c3c:	00000dad 	andeq	r0, r0, sp, lsr #27
    1c40:	0e16070a 	cdpeq	7, 1, cr0, cr6, cr10, {0}
    1c44:	070b0000 	streq	r0, [fp, -r0]
    1c48:	00000e7f 	andeq	r0, r0, pc, ror lr
    1c4c:	0f02070c 	svceq	0x0002070c
    1c50:	000d0000 	andeq	r0, sp, r0
    1c54:	b5060406 	strlt	r0, [r6, #-1030]	; 0x406
    1c58:	0000030f 	andeq	r0, r0, pc, lsl #6
    1c5c:	0009e407 	andeq	lr, r9, r7, lsl #8
    1c60:	57071100 	strpl	r1, [r7, -r0, lsl #2]
    1c64:	12000004 	andne	r0, r0, #4
    1c68:	0001db07 	andeq	sp, r1, r7, lsl #22
    1c6c:	c3071300 	movwgt	r1, #29440	; 0x7300
    1c70:	14000007 	strne	r0, [r0], #-7
    1c74:	00073307 	andeq	r3, r7, r7, lsl #6
    1c78:	44071500 	strmi	r1, [r7], #-1280	; 0x500
    1c7c:	1600000a 	strne	r0, [r0], -sl
    1c80:	000b8e07 	andeq	r8, fp, r7, lsl #28
    1c84:	c9071700 	stmdbgt	r7, {r8, r9, sl, ip}
    1c88:	18000005 	stmdane	r0, {r0, r2}
    1c8c:	0008a907 	andeq	sl, r8, r7, lsl #18
    1c90:	50071900 	andpl	r1, r7, r0, lsl #18
    1c94:	1a000008 	bne	1cbc <DISABLE_IRQ+0x1c3c>
    1c98:	00071707 	andeq	r1, r7, r7, lsl #14
    1c9c:	1b071b00 	blne	1c88a4 <DISABLE_IRQ+0x1c8824>
    1ca0:	1c00000b 	stcne	0, cr0, [r0], {11}
    1ca4:	0c090800 	stceq	8, cr0, [r9], {0}
    1ca8:	02080000 	andeq	r0, r8, #0
    1cac:	00033823 	andeq	r3, r3, r3, lsr #16
    1cb0:	03110900 	tsteq	r1, #0
    1cb4:	24020000 	strcs	r0, [r2]
    1cb8:	00000338 	andeq	r0, r0, r8, lsr r3
    1cbc:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    1cc0:	00000281 	andeq	r0, r0, r1, lsl #5
    1cc4:	03382502 	teqeq	r8, #8388608	; 0x800000
    1cc8:	23020000 	movwcs	r0, #8192	; 0x2000
    1ccc:	040a0004 	streq	r0, [sl], #-4
    1cd0:	0000030f 	andeq	r0, r0, pc, lsl #6
    1cd4:	000c0904 	andeq	r0, ip, r4, lsl #18
    1cd8:	0f260200 	svceq	0x00260200
    1cdc:	08000003 	stmdaeq	r0, {r0, r1}
    1ce0:	0000065c 	andeq	r0, r0, ip, asr r6
    1ce4:	8e2f0710 	mcrhi	7, 1, r0, cr15, cr0, {0}
    1ce8:	09000003 	stmdbeq	r0, {r0, r1}
    1cec:	00000ac9 	andeq	r0, r0, r9, asr #21
    1cf0:	033e3107 	teqeq	lr, #-1073741823	; 0xc0000001
    1cf4:	23020000 	movwcs	r0, #8192	; 0x2000
    1cf8:	08e00900 	stmiaeq	r0!, {r8, fp}^
    1cfc:	32070000 	andcc	r0, r7, #0
    1d00:	0000038e 	andeq	r0, r0, lr, lsl #7
    1d04:	09082302 	stmdbeq	r8, {r1, r8, r9, sp}
    1d08:	00000900 	andeq	r0, r0, r0, lsl #18
    1d0c:	00453307 	subeq	r3, r5, r7, lsl #6
    1d10:	23020000 	movwcs	r0, #8192	; 0x2000
    1d14:	0427090c 	strteq	r0, [r7], #-2316	; 0x90c
    1d18:	34070000 	strcc	r0, [r7]
    1d1c:	00000045 	andeq	r0, r0, r5, asr #32
    1d20:	000d2302 	andeq	r2, sp, r2, lsl #6
    1d24:	0045040a 	subeq	r0, r5, sl, lsl #8
    1d28:	5c040000 	stcpl	0, cr0, [r4], {0}
    1d2c:	07000006 	streq	r0, [r0, -r6]
    1d30:	00034936 	andeq	r4, r3, r6, lsr r9
    1d34:	099f0800 	ldmibeq	pc, {fp}
    1d38:	076c0000 	strbeq	r0, [ip, -r0]!
    1d3c:	0005343a 	andeq	r3, r5, sl, lsr r4
    1d40:	14810900 	strne	r0, [r1], #2304	; 0x900
    1d44:	3b070000 	blcc	1c1d4c <DISABLE_IRQ+0x1c1ccc>
    1d48:	00000534 	andeq	r0, r0, r4, lsr r5
    1d4c:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    1d50:	0000044d 	andeq	r0, r0, sp, asr #8
    1d54:	033e4107 	teqeq	lr, #-1073741823	; 0xc0000001
    1d58:	23020000 	movwcs	r0, #8192	; 0x2000
    1d5c:	05520904 	ldrbeq	r0, [r2, #-2308]	; 0x904
    1d60:	45070000 	strmi	r0, [r7]
    1d64:	0000053a 	andeq	r0, r0, sl, lsr r5
    1d68:	090c2302 	stmdbeq	ip, {r1, r8, r9, sp}
    1d6c:	00001aef 	andeq	r1, r0, pc, ror #21
    1d70:	00694b07 	rsbeq	r4, r9, r7, lsl #22
    1d74:	23020000 	movwcs	r0, #8192	; 0x2000
    1d78:	08780910 	ldmdaeq	r8!, {r4, r8, fp}^
    1d7c:	4c070000 	stcmi	0, cr0, [r7], {0}
    1d80:	00000069 	andeq	r0, r0, r9, rrx
    1d84:	09142302 	ldmdbeq	r4, {r1, r8, r9, sp}
    1d88:	00001d35 	andeq	r1, r0, r5, lsr sp
    1d8c:	00454d07 	subeq	r4, r5, r7, lsl #26
    1d90:	23020000 	movwcs	r0, #8192	; 0x2000
    1d94:	1e5a0918 	mrcne	9, 2, r0, cr10, cr8, {0}
    1d98:	51070000 	tstpl	r7, r0
    1d9c:	00000045 	andeq	r0, r0, r5, asr #32
    1da0:	09192302 	ldmdbeq	r9, {r1, r8, r9, sp}
    1da4:	00000364 	andeq	r0, r0, r4, ror #6
    1da8:	00455307 	subeq	r5, r5, r7, lsl #6
    1dac:	23020000 	movwcs	r0, #8192	; 0x2000
    1db0:	043f091a 	ldrteq	r0, [pc], #2330	; 1db8 <DISABLE_IRQ+0x1d38>
    1db4:	56070000 	strpl	r0, [r7], -r0
    1db8:	00000045 	andeq	r0, r0, r5, asr #32
    1dbc:	091b2302 	ldmdbeq	fp, {r1, r8, r9, sp}
    1dc0:	00000bad 	andeq	r0, r0, sp, lsr #23
    1dc4:	05ae5a07 	streq	r5, [lr, #2567]!	; 0xa07
    1dc8:	23020000 	movwcs	r0, #8192	; 0x2000
    1dcc:	0bf8091c 	bleq	ffe04244 <rEINTPEND+0xa9e0419c>
    1dd0:	5f070000 	svcpl	0x00070000
    1dd4:	0000033e 	andeq	r0, r0, lr, lsr r3
    1dd8:	09202302 	stmdbeq	r0!, {r1, r8, r9, sp}
    1ddc:	00000b03 	andeq	r0, r0, r3, lsl #22
    1de0:	00696307 	rsbeq	r6, r9, r7, lsl #6
    1de4:	23020000 	movwcs	r0, #8192	; 0x2000
    1de8:	06250928 	strteq	r0, [r5], -r8, lsr #18
    1dec:	65070000 	strvs	r0, [r7]
    1df0:	000005b4 	undefined instruction 0x000005b4
    1df4:	092c2302 	stmdbeq	ip!, {r1, r8, r9, sp}
    1df8:	0000086e 	andeq	r0, r0, lr, ror #16
    1dfc:	033e6607 	teqeq	lr, #7340032	; 0x700000
    1e00:	23020000 	movwcs	r0, #8192	; 0x2000
    1e04:	0c0e0930 	stceq	9, cr0, [lr], {48}	; 0x30
    1e08:	68070000 	stmdavs	r7, {}
    1e0c:	000000a6 	andeq	r0, r0, r6, lsr #1
    1e10:	09382302 	ldmdbeq	r8!, {r1, r8, r9, sp}
    1e14:	000007f3 	strdeq	r0, [r0], -r3
    1e18:	00a66907 	adceq	r6, r6, r7, lsl #18
    1e1c:	23020000 	movwcs	r0, #8192	; 0x2000
    1e20:	05a7093c 	streq	r0, [r7, #2364]!	; 0x93c
    1e24:	6b070000 	blvs	1c1e2c <DISABLE_IRQ+0x1c1dac>
    1e28:	000005ba 	undefined instruction 0x000005ba
    1e2c:	0b402302 	bleq	100aa3c <MEM_SIZE+0x80aa3c>
    1e30:	0067736d 	rsbeq	r7, r7, sp, ror #6
    1e34:	05346d07 	ldreq	r6, [r4, #-3335]!	; 0xd07
    1e38:	23020000 	movwcs	r0, #8192	; 0x2000
    1e3c:	16300944 	ldrtne	r0, [r0], -r4, asr #18
    1e40:	70070000 	andvc	r0, r7, r0
    1e44:	000000b1 	strheq	r0, [r0], -r1
    1e48:	09482302 	stmdbeq	r8, {r1, r8, r9, sp}^
    1e4c:	000008db 	ldrdeq	r0, [r0], -fp
    1e50:	038e7307 	orreq	r7, lr, #469762048	; 0x1c000000
    1e54:	23020000 	movwcs	r0, #8192	; 0x2000
    1e58:	09ac094c 	stmibeq	ip!, {r2, r3, r6, r8, fp}
    1e5c:	75070000 	strvc	r0, [r7]
    1e60:	00000045 	andeq	r0, r0, r5, asr #32
    1e64:	09502302 	ldmdbeq	r0, {r1, r8, r9, sp}^
    1e68:	000007e6 	andeq	r0, r0, r6, ror #15
    1e6c:	00457607 	subeq	r7, r5, r7, lsl #12
    1e70:	23020000 	movwcs	r0, #8192	; 0x2000
    1e74:	053d0951 	ldreq	r0, [sp, #-2385]!	; 0x951
    1e78:	79070000 	stmdbvc	r7, {}
    1e7c:	000005c0 	andeq	r0, r0, r0, asr #11
    1e80:	09542302 	ldmdbeq	r4, {r1, r8, r9, sp}^
    1e84:	00000ab5 	undefined instruction 0x00000ab5
    1e88:	06437c07 	strbeq	r7, [r3], -r7, lsl #24
    1e8c:	23020000 	movwcs	r0, #8192	; 0x2000
    1e90:	022b0958 	eoreq	r0, fp, #1441792	; 0x160000
    1e94:	80070000 	andhi	r0, r7, r0
    1e98:	00000680 	andeq	r0, r0, r0, lsl #13
    1e9c:	095c2302 	ldmdbeq	ip, {r1, r8, r9, sp}^
    1ea0:	000004ad 	andeq	r0, r0, sp, lsr #9
    1ea4:	00458407 	subeq	r8, r5, r7, lsl #8
    1ea8:	23020000 	movwcs	r0, #8192	; 0x2000
    1eac:	02550960 	subseq	r0, r5, #1572864	; 0x180000
    1eb0:	85070000 	strhi	r0, [r7]
    1eb4:	00000069 	andeq	r0, r0, r9, rrx
    1eb8:	09642302 	stmdbeq	r4!, {r1, r8, r9, sp}^
    1ebc:	0000075a 	andeq	r0, r0, sl, asr r7
    1ec0:	05348607 	ldreq	r8, [r4, #-1543]!	; 0x607
    1ec4:	23020000 	movwcs	r0, #8192	; 0x2000
    1ec8:	040a0068 	streq	r0, [sl], #-104	; 0x68
    1ecc:	00000025 	andeq	r0, r0, r5, lsr #32
    1ed0:	0005340c 	andeq	r3, r5, ip, lsl #8
    1ed4:	00054a00 	andeq	r4, r5, r0, lsl #20
    1ed8:	054a0d00 	strbeq	r0, [sl, #-3328]	; 0xd00
    1edc:	00000000 	andeq	r0, r0, r0
    1ee0:	0807040e 	stmdaeq	r7, {r1, r2, r3, sl}
    1ee4:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1ee8:	ae5a071c 	mrcge	7, 2, r0, cr10, cr12, {0}
    1eec:	09000005 	stmdbeq	r0, {r0, r2}
    1ef0:	00000536 	andeq	r0, r0, r6, lsr r5
    1ef4:	03942708 	orrseq	r2, r4, #2097152	; 0x200000
    1ef8:	23020000 	movwcs	r0, #8192	; 0x2000
    1efc:	08670900 	stmdaeq	r7!, {r8, fp}^
    1f00:	2a080000 	bcs	201f08 <DISABLE_IRQ+0x201e88>
    1f04:	000006f3 	strdeq	r0, [r0], -r3
    1f08:	09102302 	ldmdbeq	r0, {r1, r8, r9, sp}
    1f0c:	00000bad 	andeq	r0, r0, sp, lsr #23
    1f10:	05ae2c08 	streq	r2, [lr, #3080]!	; 0xc08
    1f14:	23020000 	movwcs	r0, #8192	; 0x2000
    1f18:	05f60914 	ldrbeq	r0, [r6, #2324]!	; 0x914
    1f1c:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    1f20:	00000045 	andeq	r0, r0, r5, asr #32
    1f24:	09182302 	ldmdbeq	r8, {r1, r8, r9, sp}
    1f28:	00000473 	andeq	r0, r0, r3, ror r4
    1f2c:	00452f08 	subeq	r2, r5, r8, lsl #30
    1f30:	23020000 	movwcs	r0, #8192	; 0x2000
    1f34:	048e0919 	streq	r0, [lr], #2329	; 0x919
    1f38:	30080000 	andcc	r0, r8, r0
    1f3c:	00000045 	andeq	r0, r0, r5, asr #32
    1f40:	001a2302 	andseq	r2, sl, r2, lsl #6
    1f44:	054d040a 	strbeq	r0, [sp, #-1034]	; 0x40a
    1f48:	040a0000 	streq	r0, [sl]
    1f4c:	00000090 	muleq	r0, r0, r0
    1f50:	033e040a 	teqeq	lr, #167772160	; 0xa000000
    1f54:	040a0000 	streq	r0, [sl]
    1f58:	00000394 	muleq	r0, r4, r3
    1f5c:	00074b08 	andeq	r4, r7, r8, lsl #22
    1f60:	7c072c00 	stcvc	12, cr2, [r7], {0}
    1f64:	00000643 	andeq	r0, r0, r3, asr #12
    1f68:	00053609 	andeq	r3, r5, r9, lsl #12
    1f6c:	942e0900 	strtls	r0, [lr], #-2304	; 0x900
    1f70:	02000003 	andeq	r0, r0, #3
    1f74:	dd090023 	stcle	0, cr0, [r9, #-140]	; 0xffffff74
    1f78:	09000007 	stmdbeq	r0, {r0, r1, r2}
    1f7c:	0006db30 	andeq	sp, r6, r0, lsr fp
    1f80:	10230200 	eorne	r0, r3, r0, lsl #4
    1f84:	0005e409 	andeq	lr, r5, r9, lsl #8
    1f88:	b1310900 	teqlt	r1, r0, lsl #18
    1f8c:	02000000 	andeq	r0, r0, #0
    1f90:	0e091423 	cdpeq	4, 0, cr1, cr9, cr3, {1}
    1f94:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    1f98:	0000b132 	andeq	fp, r0, r2, lsr r1
    1f9c:	18230200 	stmdane	r3!, {r9}
    1fa0:	0005f009 	andeq	pc, r5, r9
    1fa4:	db340900 	blle	d043ac <MEM_SIZE+0x5043ac>
    1fa8:	02000006 	andeq	r0, r0, #6
    1fac:	4e091c23 	cdpmi	12, 0, cr1, cr9, cr3, {1}
    1fb0:	09000001 	stmdbeq	r0, {r0}
    1fb4:	0006db35 	andeq	sp, r6, r5, lsr fp
    1fb8:	20230200 	eorcs	r0, r3, r0, lsl #4
    1fbc:	00052709 	andeq	r2, r5, r9, lsl #14
    1fc0:	b1360900 	teqlt	r6, r0, lsl #18
    1fc4:	02000000 	andeq	r0, r0, #0
    1fc8:	9b092423 	blls	24b05c <DISABLE_IRQ+0x24afdc>
    1fcc:	09000004 	stmdbeq	r0, {r2}
    1fd0:	0000b137 	andeq	fp, r0, r7, lsr r1
    1fd4:	28230200 	stmdacs	r3!, {r9}
    1fd8:	c6040a00 	strgt	r0, [r4], -r0, lsl #20
    1fdc:	08000005 	stmdaeq	r0, {r0, r2}
    1fe0:	00000aa7 	andeq	r0, r0, r7, lsr #21
    1fe4:	80800718 	addhi	r0, r0, r8, lsl r7
    1fe8:	09000006 	stmdbeq	r0, {r1, r2}
    1fec:	00000536 	andeq	r0, r0, r6, lsr r5
    1ff0:	0394220a 	orrseq	r2, r4, #-1610612736	; 0xa0000000
    1ff4:	23020000 	movwcs	r0, #8192	; 0x2000
    1ff8:	04470900 	strbeq	r0, [r7], #-2304	; 0x900
    1ffc:	230a0000 	movwcs	r0, #40960	; 0xa000
    2000:	00000069 	andeq	r0, r0, r9, rrx
    2004:	09102302 	ldmdbeq	r0, {r1, r8, r9, sp}
    2008:	00001b3f 	andeq	r1, r0, pc, lsr fp
    200c:	06ed240a 	strbteq	r2, [sp], sl, lsl #8
    2010:	23020000 	movwcs	r0, #8192	; 0x2000
    2014:	040a0014 	streq	r0, [sl], #-20
    2018:	00000649 	andeq	r0, r0, r9, asr #12
    201c:	00099f04 	andeq	r9, r9, r4, lsl #30
    2020:	9f890700 	svcls	0x00890700
    2024:	08000003 	stmdaeq	r0, {r0, r1}
    2028:	00000b61 	andeq	r0, r0, r1, ror #22
    202c:	c821090c 	stmdagt	r1!, {r2, r3, r8, fp}
    2030:	09000006 	stmdbeq	r0, {r1, r2}
    2034:	00000311 	andeq	r0, r0, r1, lsl r3
    2038:	06c82309 	strbeq	r2, [r8], r9, lsl #6
    203c:	23020000 	movwcs	r0, #8192	; 0x2000
    2040:	05dc0900 	ldrbeq	r0, [ip, #2304]	; 0x900
    2044:	24090000 	strcs	r0, [r9]
    2048:	000006ce 	andeq	r0, r0, lr, asr #13
    204c:	09042302 	stmdbeq	r4, {r1, r8, r9, sp}
    2050:	00001630 	andeq	r1, r0, r0, lsr r6
    2054:	00b12509 	adcseq	r2, r1, r9, lsl #10
    2058:	23020000 	movwcs	r0, #8192	; 0x2000
    205c:	040a0008 	streq	r0, [sl], #-8
    2060:	00000691 	muleq	r0, r1, r6
    2064:	6104040f 	tstvs	r4, pc, lsl #8
    2068:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    206c:	00069127 	andeq	r9, r6, r7, lsr #2
    2070:	d0040a00 	andle	r0, r4, r0, lsl #20
    2074:	10000006 	andne	r0, r0, r6
    2078:	0006ed01 	andeq	lr, r6, r1, lsl #26
    207c:	06801100 	streq	r1, [r0], r0, lsl #2
    2080:	0a000000 	beq	2088 <DISABLE_IRQ+0x2008>
    2084:	0006e104 	andeq	lr, r6, r4, lsl #2
    2088:	86040a00 	strhi	r0, [r4], -r0, lsl #20
    208c:	08000006 	stmdaeq	r0, {r1, r2}
    2090:	00000ec2 	andeq	r0, r0, r2, asr #29
    2094:	22220b14 	eorcs	r0, r2, #20480	; 0x5000
    2098:	09000007 	stmdbeq	r0, {r0, r1, r2}
    209c:	00000536 	andeq	r0, r0, r6, lsr r5
    20a0:	0394230b 	orrseq	r2, r4, #738197504	; 0x2c000000
    20a4:	23020000 	movwcs	r0, #8192	; 0x2000
    20a8:	0e100900 	cdpeq	9, 1, cr0, cr0, cr0, {0}
    20ac:	240b0000 	strcs	r0, [fp]
    20b0:	00000069 	andeq	r0, r0, r9, rrx
    20b4:	00102302 	andseq	r2, r0, r2, lsl #6
    20b8:	000ec204 	andeq	ip, lr, r4, lsl #4
    20bc:	f9260b00 	undefined instruction 0xf9260b00
    20c0:	12000006 	andne	r0, r0, #6
    20c4:	00000e60 	andeq	r0, r0, r0, ror #28
    20c8:	33013802 	movwcc	r3, #6146	; 0x1802
    20cc:	03000000 	movweq	r0, #0
    20d0:	0000074a 	andeq	r0, r0, sl, asr #14
    20d4:	00014413 	andeq	r4, r1, r3, lsl r4
    20d8:	ba380200 	blt	e028e0 <MEM_SIZE+0x6028e0>
    20dc:	00000005 	andeq	r0, r0, r5
    20e0:	00224714 	eoreq	r4, r2, r4, lsl r7
    20e4:	012f0200 	teqeq	pc, r0, lsl #4
    20e8:	00076303 	andeq	r6, r7, r3, lsl #6
    20ec:	0da31300 	stceq	3, cr1, [r3]
    20f0:	2f020000 	svccs	0x00020000
    20f4:	000005ba 	undefined instruction 0x000005ba
    20f8:	67011500 	strvs	r1, [r1, -r0, lsl #10]
    20fc:	0100000d 	tsteq	r0, sp
    2100:	500101bc 	undefined instruction 0x500101bc
    2104:	a0000000 	andge	r0, r0, r0
    2108:	a430000d 	ldrtge	r0, [r0], #-13
    210c:	8630000e 	ldrthi	r0, [r0], -lr
    2110:	c000000a 	andgt	r0, r0, sl
    2114:	16000007 	strne	r0, [r0], -r7
    2118:	00000e25 	andeq	r0, r0, r5, lsr #28
    211c:	c001bc01 	andgt	fp, r1, r1, lsl #24
    2120:	a5000007 	strge	r0, [r0, #-7]
    2124:	1700000a 	strne	r0, [r0, -sl]
    2128:	00000d9d 	muleq	r0, sp, sp
    212c:	ba01be01 	blt	71938 <DISABLE_IRQ+0x718b8>
    2130:	17000005 	strne	r0, [r0, -r5]
    2134:	00000118 	andeq	r0, r0, r8, lsl r1
    2138:	9b01c001 	blls	72144 <DISABLE_IRQ+0x720c4>
    213c:	18000000 	stmdane	r0, {}
    2140:	0000072d 	andeq	r0, r0, sp, lsr #14
    2144:	30000e24 	andcc	r0, r0, r4, lsr #28
    2148:	00000078 	andeq	r0, r0, r8, ror r0
    214c:	1901dd01 	stmdbne	r1, {r0, r8, sl, fp, ip, lr, pc}
    2150:	0000073e 	andeq	r0, r0, lr, lsr r7
    2154:	040a0000 	streq	r0, [sl]
    2158:	00000722 	andeq	r0, r0, r2, lsr #14
    215c:	0dd1011a 	ldfeqe	f0, [r1, #104]	; 0x68
    2160:	fd010000 	stc2	0, cr0, [r1]
    2164:	00005001 	andeq	r5, r0, r1
    2168:	000ea400 	andeq	sl, lr, r0, lsl #8
    216c:	00102830 	andseq	r2, r0, r0, lsr r8
    2170:	000ac330 	andeq	ip, sl, r0, lsr r3
    2174:	00087500 	andeq	r7, r8, r0, lsl #10
    2178:	0e251b00 	vmuleq.f64	d1, d5, d0
    217c:	fd010000 	stc2	0, cr0, [r1]
    2180:	000007c0 	andeq	r0, r0, r0, asr #15
    2184:	00000ae2 	andeq	r0, r0, r2, ror #21
    2188:	000d781b 	andeq	r7, sp, fp, lsl r8
    218c:	69fd0100 	ldmibvs	sp!, {r8}^
    2190:	0b000000 	bleq	2198 <DISABLE_IRQ+0x2118>
    2194:	1b00000b 	blne	21c8 <DISABLE_IRQ+0x2148>
    2198:	00000ddb 	ldrdeq	r0, [r0], -fp
    219c:	0045fd01 	subeq	pc, r5, r1, lsl #26
    21a0:	0b340000 	bleq	d021a8 <MEM_SIZE+0x5021a8>
    21a4:	7a1c0000 	bvc	7021ac <DISABLE_IRQ+0x70212c>
    21a8:	0100000e 	tsteq	r0, lr
    21ac:	05ba0100 	ldreq	r0, [sl, #256]!	; 0x100
    21b0:	0b5d0000 	bleq	17421b8 <MEM_SIZE+0xf421b8>
    21b4:	58170000 	ldmdapl	r7, {}
    21b8:	0100000d 	tsteq	r0, sp
    21bc:	05ba0101 	ldreq	r0, [sl, #257]!	; 0x101
    21c0:	111c0000 	tstne	ip, r0
    21c4:	01000022 	tsteq	r0, r2, lsr #32
    21c8:	05ba0102 	ldreq	r0, [sl, #258]!	; 0x102
    21cc:	0b9c0000 	bleq	fe7021d4 <rEINTPEND+0xa870212c>
    21d0:	941c0000 	ldrls	r0, [ip]
    21d4:	0100000d 	tsteq	r0, sp
    21d8:	06f30103 	ldrbteq	r0, [r3], r3, lsl #2
    21dc:	0bc50000 	bleq	ff1421e4 <rEINTPEND+0xa914213c>
    21e0:	ec170000 	ldc	0, cr0, [r7], {0}
    21e4:	01000007 	tsteq	r0, r7
    21e8:	00450105 	subeq	r0, r5, r5, lsl #2
    21ec:	ad1c0000 	ldcge	0, cr0, [ip]
    21f0:	0100000e 	tsteq	r0, lr
    21f4:	00450106 	subeq	r0, r5, r6, lsl #2
    21f8:	0bee0000 	bleq	ffb82200 <rEINTPEND+0xa9b82158>
    21fc:	18170000 	ldmdane	r7, {}
    2200:	01000001 	tsteq	r0, r1
    2204:	009b0108 	addseq	r0, fp, r8, lsl #2
    2208:	15000000 	strne	r0, [r0]
    220c:	000dcd01 	andeq	ip, sp, r1, lsl #26
    2210:	01870100 	orreq	r0, r7, r0, lsl #2
    2214:	00005001 	andeq	r5, r0, r1
    2218:	00102800 	andseq	r2, r0, r0, lsl #16
    221c:	0010a030 	andseq	sl, r0, r0, lsr r0
    2220:	000c1730 	andeq	r1, ip, r0, lsr r7
    2224:	0008c400 	andeq	ip, r8, r0, lsl #8
    2228:	0e251600 	cfmadda32eq	mvax0, mvax1, mvfx5, mvfx0
    222c:	87010000 	strhi	r0, [r1, -r0]
    2230:	0007c001 	andeq	ip, r7, r1
    2234:	000c4200 	andeq	r4, ip, r0, lsl #4
    2238:	0d781600 	ldcleq	6, cr1, [r8]
    223c:	87010000 	strhi	r0, [r1, -r0]
    2240:	00006901 	andeq	r6, r0, r1, lsl #18
    2244:	000c7600 	andeq	r7, ip, r0, lsl #12
    2248:	0ddb1600 	ldcleq	6, cr1, [fp]
    224c:	87010000 	strhi	r0, [r1, -r0]
    2250:	00004501 	andeq	r4, r0, r1, lsl #10
    2254:	000c9400 	andeq	r9, ip, r0, lsl #8
    2258:	011a0000 	tsteq	sl, r0
    225c:	00000ef4 	strdeq	r0, [r0], -r4
    2260:	50017b01 	andpl	r7, r1, r1, lsl #22
    2264:	a0000000 	andge	r0, r0, r0
    2268:	08300010 	ldmdaeq	r0!, {r4}
    226c:	de300013 	mrcle	0, 1, r0, cr0, cr3, {0}
    2270:	5000000c 	andpl	r0, r0, ip
    2274:	1b000009 	blne	22a0 <DISABLE_IRQ+0x2220>
    2278:	00000e25 	andeq	r0, r0, r5, lsr #28
    227c:	07c07b01 	strbeq	r7, [r0, r1, lsl #22]
    2280:	0cfd0000 	ldcleq	0, cr0, [sp]
    2284:	061b0000 	ldreq	r0, [fp], -r0
    2288:	0100000e 	tsteq	r0, lr
    228c:	0000697b 	andeq	r6, r0, fp, ror r9
    2290:	000d1b00 	andeq	r1, sp, r0, lsl #22
    2294:	0eb71b00 	vmoveq.f64	d1, #112	; 0x70
    2298:	7b010000 	blvc	422a0 <DISABLE_IRQ+0x42220>
    229c:	00000045 	andeq	r0, r0, r5, asr #32
    22a0:	00000d4f 	andeq	r0, r0, pc, asr #26
    22a4:	000f4d1b 	andeq	r4, pc, fp, lsl sp
    22a8:	507b0100 	rsbspl	r0, fp, r0, lsl #2
    22ac:	af000009 	svcge	0x00000009
    22b0:	1b00000d 	blne	22ec <DISABLE_IRQ+0x226c>
    22b4:	00000dc1 	andeq	r0, r0, r1, asr #27
    22b8:	00a67b01 	adceq	r7, r6, r1, lsl #22
    22bc:	0dd80000 	ldcleq	0, cr0, [r8]
    22c0:	cc1d0000 	ldcgt	0, cr0, [sp], {0}
    22c4:	0100000e 	tsteq	r0, lr
    22c8:	0000507d 	andeq	r5, r0, sp, ror r0
    22cc:	1e580100 	rdfnee	f0, f0, f0
    22d0:	000007ec 	andeq	r0, r0, ip, ror #15
    22d4:	00457f01 	subeq	r7, r5, r1, lsl #30
    22d8:	181e0000 	ldmdane	lr, {}
    22dc:	01000001 	tsteq	r0, r1
    22e0:	00009b80 	andeq	r9, r0, r0, lsl #23
    22e4:	040a0000 	streq	r0, [sl]
    22e8:	00000069 	andeq	r0, r0, r9, rrx
    22ec:	0e9c011a 	mrceq	1, 4, r0, cr12, cr10, {0}
    22f0:	33010000 	movwcc	r0, #4096	; 0x1000
    22f4:	00005001 	andeq	r5, r0, r1
    22f8:	00130800 	andseq	r0, r3, r0, lsl #16
    22fc:	00136430 	andseq	r6, r3, r0, lsr r4
    2300:	000e6b30 	andeq	r6, lr, r0, lsr fp
    2304:	0009b600 	andeq	fp, r9, r0, lsl #12
    2308:	0e251b00 	vmuleq.f64	d1, d5, d0
    230c:	33010000 	movwcc	r0, #4096	; 0x1000
    2310:	000007c0 	andeq	r0, r0, r0, asr #15
    2314:	00000e8a 	andeq	r0, r0, sl, lsl #29
    2318:	00046a1b 	andeq	r6, r4, fp, lsl sl
    231c:	8e330100 	rsfhis	f0, f3, f0
    2320:	b3000003 	movwlt	r0, #3
    2324:	1b00000e 	blne	2364 <DISABLE_IRQ+0x22e4>
    2328:	00000f5e 	andeq	r0, r0, lr, asr pc
    232c:	00693301 	rsbeq	r3, r9, r1, lsl #6
    2330:	0ed10000 	cdpeq	0, 13, cr0, cr1, cr0, {0}
    2334:	4a1f0000 	bmi	7c233c <DISABLE_IRQ+0x7c22bc>
    2338:	3c000007 	stccc	0, cr0, [r0], {7}
    233c:	44300013 	ldrtmi	r0, [r0], #-19
    2340:	01300013 	teqeq	r0, r3, lsl r0
    2344:	07571940 	ldrbeq	r1, [r7, -r0, asr #18]
    2348:	00000000 	andeq	r0, r0, r0
    234c:	00038f20 	andeq	r8, r3, r0, lsr #30
    2350:	f34a0c00 	undefined instruction 0xf34a0c00
    2354:	01000006 	tsteq	r0, r6
    2358:	0e502001 	cdpeq	0, 5, cr2, cr0, cr1, {0}
    235c:	510c0000 	tstpl	ip, r0
    2360:	00000045 	andeq	r0, r0, r5, asr #32
    2364:	85200101 	strhi	r0, [r0, #-257]!	; 0x101
    2368:	0c00000d 	stceq	0, cr0, [r0], {13}
    236c:	00004552 	andeq	r4, r0, r2, asr r5
    2370:	00010100 	andeq	r0, r1, r0, lsl #2
    2374:	00000583 	andeq	r0, r0, r3, lsl #11
    2378:	093f0002 	ldmdbeq	pc!, {r1}
    237c:	01040000 	tsteq	r4, r0
    2380:	0000004d 	andeq	r0, r0, sp, asr #32
    2384:	000f8201 	andeq	r8, pc, r1, lsl #4
    2388:	00006300 	andeq	r6, r0, r0, lsl #6
    238c:	00136400 	andseq	r6, r3, r0, lsl #8
    2390:	0013cc30 	andseq	ip, r3, r0, lsr ip
    2394:	00083030 	andeq	r3, r8, r0, lsr r0
    2398:	05640200 	strbeq	r0, [r4, #-512]!	; 0x200
    239c:	21020000 	tstcs	r2, r0
    23a0:	a0060103 	andge	r0, r6, r3, lsl #2
    23a4:	03000000 	movweq	r0, #0
    23a8:	009e0801 	addseq	r0, lr, r1, lsl #16
    23ac:	f7040000 	undefined instruction 0xf7040000
    23b0:	02000004 	andeq	r0, r0, #4
    23b4:	00003324 	andeq	r3, r0, r4, lsr #6
    23b8:	07020300 	streq	r0, [r2, -r0, lsl #6]
    23bc:	0000008b 	andeq	r0, r0, fp, lsl #1
    23c0:	59050203 	stmdbpl	r5, {r0, r1, r9}
    23c4:	04000000 	streq	r0, [r0]
    23c8:	00000338 	andeq	r0, r0, r8, lsr r3
    23cc:	005e2802 	subseq	r2, lr, r2, lsl #16
    23d0:	04030000 	streq	r0, [r3]
    23d4:	00003707 	andeq	r3, r0, r7, lsl #14
    23d8:	05040500 	streq	r0, [r4, #-1280]	; 0x500
    23dc:	00746e69 	rsbseq	r6, r4, r9, ror #28
    23e0:	00050803 	andeq	r0, r5, r3, lsl #16
    23e4:	03000000 	movweq	r0, #0
    23e8:	002d0708 	eoreq	r0, sp, r8, lsl #14
    23ec:	9f040000 	svcls	0x00040000
    23f0:	02000003 	andeq	r0, r0, #3
    23f4:	00005e2d 	andeq	r5, r0, sp, lsr #28
    23f8:	01320400 	teqeq	r2, r0, lsl #8
    23fc:	22030000 	andcs	r0, r3, #0
    2400:	0000005e 	andeq	r0, r0, lr, asr r0
    2404:	000a2704 	andeq	r2, sl, r4, lsl #14
    2408:	532a0400 	teqpl	sl, #0
    240c:	04000000 	streq	r0, [r0]
    2410:	00000829 	andeq	r0, r0, r9, lsr #16
    2414:	00532c04 	subseq	r2, r3, r4, lsl #24
    2418:	09060000 	stmdbeq	r6, {}
    241c:	0800000c 	stmdaeq	r0, {r2, r3}
    2420:	00cf2305 	sbceq	r2, pc, r5, lsl #6
    2424:	11070000 	tstne	r7, r0
    2428:	05000003 	streq	r0, [r0, #-3]
    242c:	0000cf24 	andeq	ip, r0, r4, lsr #30
    2430:	00230200 	eoreq	r0, r3, r0, lsl #4
    2434:	00028107 	andeq	r8, r2, r7, lsl #2
    2438:	cf250500 	svcgt	0x00250500
    243c:	02000000 	andeq	r0, r0, #0
    2440:	08000423 	stmdaeq	r0, {r0, r1, r5, sl}
    2444:	0000a604 	andeq	sl, r0, r4, lsl #12
    2448:	0c090400 	cfstrseq	mvf0, [r9], {0}
    244c:	26050000 	strcs	r0, [r5], -r0
    2450:	000000a6 	andeq	r0, r0, r6, lsr #1
    2454:	00102309 	andseq	r2, r0, r9, lsl #6
    2458:	21060400 	tstcs	r6, r0, lsl #8
    245c:	00000129 	andeq	r0, r0, r9, lsr #2
    2460:	000f7a0a 	andeq	r7, pc, sl, lsl #20
    2464:	120a0000 	andne	r0, sl, #0
    2468:	01000010 	tsteq	r0, r0, lsl r0
    246c:	0010400a 	andseq	r4, r0, sl
    2470:	af0a0200 	svcge	0x000a0200
    2474:	0300000f 	movweq	r0, #15
    2478:	0010630a 	andseq	r6, r0, sl, lsl #6
    247c:	710a0400 	tstvc	sl, r0, lsl #8
    2480:	05000010 	streq	r0, [r0, #-16]
    2484:	00101b0a 	andseq	r1, r0, sl, lsl #22
    2488:	930a0600 	movwls	r0, #42496	; 0xa600
    248c:	0700000f 	streq	r0, [r0, -pc]
    2490:	000ff80a 	andeq	pc, pc, sl, lsl #16
    2494:	510a0800 	tstpl	sl, r0, lsl #16
    2498:	09000010 	stmdbeq	r0, {r4}
    249c:	065c0600 	ldrbeq	r0, [ip], -r0, lsl #12
    24a0:	06100000 	ldreq	r0, [r0], -r0
    24a4:	00016e2f 	andeq	r6, r1, pc, lsr #28
    24a8:	0ac90700 	beq	ff2440b0 <rEINTPEND+0xa9244008>
    24ac:	31060000 	tstcc	r6, r0
    24b0:	000000d5 	ldrdeq	r0, [r0], -r5
    24b4:	07002302 	streq	r2, [r0, -r2, lsl #6]
    24b8:	000008e0 	andeq	r0, r0, r0, ror #17
    24bc:	016e3206 	cmneq	lr, r6, lsl #4
    24c0:	23020000 	movwcs	r0, #8192	; 0x2000
    24c4:	09000708 	stmdbeq	r0, {r3, r8, r9, sl}
    24c8:	33060000 	movwcc	r0, #24576	; 0x6000
    24cc:	0000003a 	andeq	r0, r0, sl, lsr r0
    24d0:	070c2302 	streq	r2, [ip, -r2, lsl #6]
    24d4:	00000427 	andeq	r0, r0, r7, lsr #8
    24d8:	003a3406 	eorseq	r3, sl, r6, lsl #8
    24dc:	23020000 	movwcs	r0, #8192	; 0x2000
    24e0:	0408000d 	streq	r0, [r8], #-13
    24e4:	0000003a 	andeq	r0, r0, sl, lsr r0
    24e8:	00065c04 	andeq	r5, r6, r4, lsl #24
    24ec:	29360600 	ldmdbcs	r6!, {r9, sl}
    24f0:	06000001 	streq	r0, [r0], -r1
    24f4:	0000099f 	muleq	r0, pc, r9
    24f8:	143a066c 	ldrtne	r0, [sl], #-1644	; 0x66c
    24fc:	07000003 	streq	r0, [r0, -r3]
    2500:	00001481 	andeq	r1, r0, r1, lsl #9
    2504:	03143b06 	tsteq	r4, #6144	; 0x1800
    2508:	23020000 	movwcs	r0, #8192	; 0x2000
    250c:	044d0700 	strbeq	r0, [sp], #-1792	; 0x700
    2510:	41060000 	tstmi	r6, r0
    2514:	000000d5 	ldrdeq	r0, [r0], -r5
    2518:	07042302 	streq	r2, [r4, -r2, lsl #6]
    251c:	00000552 	andeq	r0, r0, r2, asr r5
    2520:	031a4506 	tsteq	sl, #25165824	; 0x1800000
    2524:	23020000 	movwcs	r0, #8192	; 0x2000
    2528:	1aef070c 	bne	ffbc4160 <rEINTPEND+0xa9bc40b8>
    252c:	4b060000 	blmi	182534 <DISABLE_IRQ+0x1824b4>
    2530:	00000053 	andeq	r0, r0, r3, asr r0
    2534:	07102302 	ldreq	r2, [r0, -r2, lsl #6]
    2538:	00000878 	andeq	r0, r0, r8, ror r8
    253c:	00534c06 	subseq	r4, r3, r6, lsl #24
    2540:	23020000 	movwcs	r0, #8192	; 0x2000
    2544:	1d350714 	ldcne	7, cr0, [r5, #-80]!	; 0xffffffb0
    2548:	4d060000 	stcmi	0, cr0, [r6]
    254c:	0000003a 	andeq	r0, r0, sl, lsr r0
    2550:	07182302 	ldreq	r2, [r8, -r2, lsl #6]
    2554:	00001e5a 	andeq	r1, r0, sl, asr lr
    2558:	003a5106 	eorseq	r5, sl, r6, lsl #2
    255c:	23020000 	movwcs	r0, #8192	; 0x2000
    2560:	03640719 	cmneq	r4, #6553600	; 0x640000
    2564:	53060000 	movwpl	r0, #24576	; 0x6000
    2568:	0000003a 	andeq	r0, r0, sl, lsr r0
    256c:	071a2302 	ldreq	r2, [sl, -r2, lsl #6]
    2570:	0000043f 	andeq	r0, r0, pc, lsr r4
    2574:	003a5606 	eorseq	r5, sl, r6, lsl #12
    2578:	23020000 	movwcs	r0, #8192	; 0x2000
    257c:	0bad071b 	bleq	feb441f0 <rEINTPEND+0xa8b44148>
    2580:	5a060000 	bpl	182588 <DISABLE_IRQ+0x182508>
    2584:	0000038e 	andeq	r0, r0, lr, lsl #7
    2588:	071c2302 	ldreq	r2, [ip, -r2, lsl #6]
    258c:	00000bf8 	strdeq	r0, [r0], -r8
    2590:	00d55f06 	sbcseq	r5, r5, r6, lsl #30
    2594:	23020000 	movwcs	r0, #8192	; 0x2000
    2598:	0b030720 	bleq	c4220 <DISABLE_IRQ+0xc41a0>
    259c:	63060000 	movwvs	r0, #24576	; 0x6000
    25a0:	00000053 	andeq	r0, r0, r3, asr r0
    25a4:	07282302 	streq	r2, [r8, -r2, lsl #6]!
    25a8:	00000625 	andeq	r0, r0, r5, lsr #12
    25ac:	03946506 	orrseq	r6, r4, #25165824	; 0x1800000
    25b0:	23020000 	movwcs	r0, #8192	; 0x2000
    25b4:	086e072c 	stmdaeq	lr!, {r2, r3, r5, r8, r9, sl}^
    25b8:	66060000 	strvs	r0, [r6], -r0
    25bc:	000000d5 	ldrdeq	r0, [r0], -r5
    25c0:	07302302 	ldreq	r2, [r0, -r2, lsl #6]!
    25c4:	00000c0e 	andeq	r0, r0, lr, lsl #24
    25c8:	00906806 	addseq	r6, r0, r6, lsl #16
    25cc:	23020000 	movwcs	r0, #8192	; 0x2000
    25d0:	07f30738 	undefined instruction 0x07f30738
    25d4:	69060000 	stmdbvs	r6, {}
    25d8:	00000090 	muleq	r0, r0, r0
    25dc:	073c2302 	ldreq	r2, [ip, -r2, lsl #6]!
    25e0:	000005a7 	andeq	r0, r0, r7, lsr #11
    25e4:	039a6b06 	orrseq	r6, sl, #6144	; 0x1800
    25e8:	23020000 	movwcs	r0, #8192	; 0x2000
    25ec:	736d0b40 	cmnvc	sp, #65536	; 0x10000
    25f0:	6d060067 	stcvs	0, cr0, [r6, #-412]	; 0xfffffe64
    25f4:	00000314 	andeq	r0, r0, r4, lsl r3
    25f8:	07442302 	strbeq	r2, [r4, -r2, lsl #6]
    25fc:	00001630 	andeq	r1, r0, r0, lsr r6
    2600:	009b7006 	addseq	r7, fp, r6
    2604:	23020000 	movwcs	r0, #8192	; 0x2000
    2608:	08db0748 	ldmeq	fp, {r3, r6, r8, r9, sl}^
    260c:	73060000 	movwvc	r0, #24576	; 0x6000
    2610:	0000016e 	andeq	r0, r0, lr, ror #2
    2614:	074c2302 	strbeq	r2, [ip, -r2, lsl #6]
    2618:	000009ac 	andeq	r0, r0, ip, lsr #19
    261c:	003a7506 	eorseq	r7, sl, r6, lsl #10
    2620:	23020000 	movwcs	r0, #8192	; 0x2000
    2624:	07e60750 	ubfxeq	r0, r0, #14, #7
    2628:	76060000 	strvc	r0, [r6], -r0
    262c:	0000003a 	andeq	r0, r0, sl, lsr r0
    2630:	07512302 	ldrbeq	r2, [r1, -r2, lsl #6]
    2634:	0000053d 	andeq	r0, r0, sp, lsr r5
    2638:	03a07906 	moveq	r7, #98304	; 0x18000
    263c:	23020000 	movwcs	r0, #8192	; 0x2000
    2640:	0ab50754 	beq	fed44398 <rEINTPEND+0xa8d442f0>
    2644:	7c060000 	stcvc	0, cr0, [r6], {0}
    2648:	00000423 	andeq	r0, r0, r3, lsr #8
    264c:	07582302 	ldrbeq	r2, [r8, -r2, lsl #6]
    2650:	0000022b 	andeq	r0, r0, fp, lsr #4
    2654:	04608006 	strbteq	r8, [r0], #-6
    2658:	23020000 	movwcs	r0, #8192	; 0x2000
    265c:	04ad075c 	strteq	r0, [sp], #1884	; 0x75c
    2660:	84060000 	strhi	r0, [r6]
    2664:	0000003a 	andeq	r0, r0, sl, lsr r0
    2668:	07602302 	strbeq	r2, [r0, -r2, lsl #6]!
    266c:	00000255 	andeq	r0, r0, r5, asr r2
    2670:	00538506 	subseq	r8, r3, r6, lsl #10
    2674:	23020000 	movwcs	r0, #8192	; 0x2000
    2678:	075a0764 	ldrbeq	r0, [sl, -r4, ror #14]
    267c:	86060000 	strhi	r0, [r6], -r0
    2680:	00000314 	andeq	r0, r0, r4, lsl r3
    2684:	00682302 	rsbeq	r2, r8, r2, lsl #6
    2688:	00250408 	eoreq	r0, r5, r8, lsl #8
    268c:	140c0000 	strne	r0, [ip]
    2690:	2a000003 	bcs	26a4 <DISABLE_IRQ+0x2624>
    2694:	0d000003 	stceq	0, cr0, [r0, #-12]
    2698:	0000032a 	andeq	r0, r0, sl, lsr #6
    269c:	040e0000 	streq	r0, [lr]
    26a0:	0b2f0607 	bleq	bc3ec4 <MEM_SIZE+0x3c3ec4>
    26a4:	061c0000 	ldreq	r0, [ip], -r0
    26a8:	00038e5a 	andeq	r8, r3, sl, asr lr
    26ac:	05360700 	ldreq	r0, [r6, #-1792]!	; 0x700
    26b0:	27070000 	strcs	r0, [r7, -r0]
    26b4:	00000174 	andeq	r0, r0, r4, ror r1
    26b8:	07002302 	streq	r2, [r0, -r2, lsl #6]
    26bc:	00000867 	andeq	r0, r0, r7, ror #16
    26c0:	05072a07 	streq	r2, [r7, #-2567]	; 0xa07
    26c4:	23020000 	movwcs	r0, #8192	; 0x2000
    26c8:	0bad0710 	bleq	feb44310 <rEINTPEND+0xa8b44268>
    26cc:	2c070000 	stccs	0, cr0, [r7], {0}
    26d0:	0000038e 	andeq	r0, r0, lr, lsl #7
    26d4:	07142302 	ldreq	r2, [r4, -r2, lsl #6]
    26d8:	000005f6 	strdeq	r0, [r0], -r6
    26dc:	003a2e07 	eorseq	r2, sl, r7, lsl #28
    26e0:	23020000 	movwcs	r0, #8192	; 0x2000
    26e4:	04730718 	ldrbteq	r0, [r3], #-1816	; 0x718
    26e8:	2f070000 	svccs	0x00070000
    26ec:	0000003a 	andeq	r0, r0, sl, lsr r0
    26f0:	07192302 	ldreq	r2, [r9, -r2, lsl #6]
    26f4:	0000048e 	andeq	r0, r0, lr, lsl #9
    26f8:	003a3007 	eorseq	r3, sl, r7
    26fc:	23020000 	movwcs	r0, #8192	; 0x2000
    2700:	0408001a 	streq	r0, [r8], #-26
    2704:	0000032d 	andeq	r0, r0, sp, lsr #6
    2708:	007a0408 	rsbseq	r0, sl, r8, lsl #8
    270c:	04080000 	streq	r0, [r8]
    2710:	000000d5 	ldrdeq	r0, [r0], -r5
    2714:	01740408 	cmneq	r4, r8, lsl #8
    2718:	4b060000 	blmi	182720 <DISABLE_IRQ+0x1826a0>
    271c:	2c000007 	stccs	0, cr0, [r0], {7}
    2720:	04237c06 	strteq	r7, [r3], #-3078	; 0xc06
    2724:	36070000 	strcc	r0, [r7], -r0
    2728:	08000005 	stmdaeq	r0, {r0, r2}
    272c:	0001742e 	andeq	r7, r1, lr, lsr #8
    2730:	00230200 	eoreq	r0, r3, r0, lsl #4
    2734:	0007dd07 	andeq	sp, r7, r7, lsl #26
    2738:	ef300800 	svc	0x00300800
    273c:	02000004 	andeq	r0, r0, #4
    2740:	e4071023 	str	r1, [r7], #-35	; 0x23
    2744:	08000005 	stmdaeq	r0, {r0, r2}
    2748:	00009b31 	andeq	r9, r0, r1, lsr fp
    274c:	14230200 	strtne	r0, [r3], #-512	; 0x200
    2750:	000b0e07 	andeq	r0, fp, r7, lsl #28
    2754:	9b320800 	blls	c8475c <MEM_SIZE+0x48475c>
    2758:	02000000 	andeq	r0, r0, #0
    275c:	f0071823 	undefined instruction 0xf0071823
    2760:	08000005 	stmdaeq	r0, {r0, r2}
    2764:	0004ef34 	andeq	lr, r4, r4, lsr pc
    2768:	1c230200 	sfmne	f0, 4, [r3]	; (stcne 2, cr0, [r3])
    276c:	00014e07 	andeq	r4, r1, r7, lsl #28
    2770:	ef350800 	svc	0x00350800
    2774:	02000004 	andeq	r0, r0, #4
    2778:	27072023 	strcs	r2, [r7, -r3, lsr #32]
    277c:	08000005 	stmdaeq	r0, {r0, r2}
    2780:	00009b36 	andeq	r9, r0, r6, lsr fp
    2784:	24230200 	strtcs	r0, [r3], #-512	; 0x200
    2788:	00049b07 	andeq	r9, r4, r7, lsl #22
    278c:	9b370800 	blls	dc4794 <MEM_SIZE+0x5c4794>
    2790:	02000000 	andeq	r0, r0, #0
    2794:	08002823 	stmdaeq	r0, {r0, r1, r5, fp, sp}
    2798:	0003a604 	andeq	sl, r3, r4, lsl #12
    279c:	0aa70600 	beq	fe9c3fa4 <rEINTPEND+0xa89c3efc>
    27a0:	06180000 	ldreq	r0, [r8], -r0
    27a4:	00046080 	andeq	r6, r4, r0, lsl #1
    27a8:	05360700 	ldreq	r0, [r6, #-1792]!	; 0x700
    27ac:	22090000 	andcs	r0, r9, #0
    27b0:	00000174 	andeq	r0, r0, r4, ror r1
    27b4:	07002302 	streq	r2, [r0, -r2, lsl #6]
    27b8:	00000447 	andeq	r0, r0, r7, asr #8
    27bc:	00532309 	subseq	r2, r3, r9, lsl #6
    27c0:	23020000 	movwcs	r0, #8192	; 0x2000
    27c4:	1b3f0710 	blne	fc440c <MEM_SIZE+0x7c440c>
    27c8:	24090000 	strcs	r0, [r9]
    27cc:	00000501 	andeq	r0, r0, r1, lsl #10
    27d0:	00142302 	andseq	r2, r4, r2, lsl #6
    27d4:	04290408 	strteq	r0, [r9], #-1032	; 0x408
    27d8:	9f040000 	svcls	0x00040000
    27dc:	06000009 	streq	r0, [r0], -r9
    27e0:	00017f89 	andeq	r7, r1, r9, lsl #31
    27e4:	0fd50600 	svceq	0x00d50600
    27e8:	060c0000 	streq	r0, [ip], -r0
    27ec:	00049a9c 	muleq	r4, ip, sl
    27f0:	0fa50700 	svceq	0x00a50700
    27f4:	9f060000 	svcls	0x00060000
    27f8:	000000d5 	ldrdeq	r0, [r0], -r5
    27fc:	07002302 	streq	r2, [r0, -r2, lsl #6]
    2800:	00000fe6 	andeq	r0, r0, r6, ror #31
    2804:	039aa106 	orrseq	sl, sl, #-2147483647	; 0x80000001
    2808:	23020000 	movwcs	r0, #8192	; 0x2000
    280c:	d5040008 	strle	r0, [r4, #-8]
    2810:	0600000f 	streq	r0, [r0], -pc
    2814:	000471a3 	andeq	r7, r4, r3, lsr #3
    2818:	0b610600 	bleq	1844020 <MEM_SIZE+0x1044020>
    281c:	080c0000 	stmdaeq	ip, {}
    2820:	0004dc21 	andeq	sp, r4, r1, lsr #24
    2824:	03110700 	tsteq	r1, #0
    2828:	23080000 	movwcs	r0, #32768	; 0x8000
    282c:	000004dc 	ldrdeq	r0, [r0], -ip
    2830:	07002302 	streq	r2, [r0, -r2, lsl #6]
    2834:	000005dc 	ldrdeq	r0, [r0], -ip
    2838:	04e22408 	strbteq	r2, [r2], #1032	; 0x408
    283c:	23020000 	movwcs	r0, #8192	; 0x2000
    2840:	16300704 	ldrtne	r0, [r0], -r4, lsl #14
    2844:	25080000 	strcs	r0, [r8]
    2848:	0000009b 	muleq	r0, fp, r0
    284c:	00082302 	andeq	r2, r8, r2, lsl #6
    2850:	04a50408 	strteq	r0, [r5], #1032	; 0x408
    2854:	040f0000 	streq	r0, [pc], #0	; 285c <DISABLE_IRQ+0x27dc>
    2858:	000b6104 	andeq	r6, fp, r4, lsl #2
    285c:	a5270800 	strge	r0, [r7, #-2048]!	; 0x800
    2860:	08000004 	stmdaeq	r0, {r2}
    2864:	0004e404 	andeq	lr, r4, r4, lsl #8
    2868:	01011000 	tsteq	r1, r0
    286c:	11000005 	tstne	r0, r5
    2870:	00000460 	andeq	r0, r0, r0, ror #8
    2874:	f5040800 	undefined instruction 0xf5040800
    2878:	08000004 	stmdaeq	r0, {r2}
    287c:	00046604 	andeq	r6, r4, r4, lsl #12
    2880:	04011200 	streq	r1, [r1], #-512	; 0x200
    2884:	01000010 	tsteq	r0, r0, lsl r0
    2888:	13640123 	cmnne	r4, #-1073741816	; 0xc0000008
    288c:	13cc3000 	bicne	r3, ip, #0
    2890:	0efa3000 	cdpeq	0, 15, cr3, cr10, cr0, {0}
    2894:	05790000 	ldrbeq	r0, [r9]!
    2898:	8d130000 	ldchi	0, cr0, [r3]
    289c:	0100000f 	tsteq	r0, pc
    28a0:	0004e223 	andeq	lr, r4, r3, lsr #4
    28a4:	000f1900 	andeq	r1, pc, r0, lsl #18
    28a8:	0e7a1400 	cdpeq	4, 7, cr1, cr10, cr0, {0}
    28ac:	25010000 	strcs	r0, [r1]
    28b0:	0000039a 	muleq	r0, sl, r3
    28b4:	94145501 	ldrls	r5, [r4], #-1281	; 0x501
    28b8:	0100000d 	tsteq	r0, sp
    28bc:	00050726 	andeq	r0, r5, r6, lsr #14
    28c0:	15540100 	ldrbne	r0, [r4, #-256]	; 0x100
    28c4:	00001481 	andeq	r1, r0, r1, lsl #9
    28c8:	03942701 	orrseq	r2, r4, #262144	; 0x40000
    28cc:	0f2c0000 	svceq	0x002c0000
    28d0:	ca150000 	bgt	5428d8 <DISABLE_IRQ+0x542858>
    28d4:	0100000f 	tsteq	r0, pc
    28d8:	00005329 	andeq	r5, r0, r9, lsr #6
    28dc:	000f3f00 	andeq	r3, pc, r0, lsl #30
    28e0:	01181600 	tsteq	r8, r0, lsl #12
    28e4:	2b010000 	blcs	428ec <DISABLE_IRQ+0x4286c>
    28e8:	00000085 	andeq	r0, r0, r5, lsl #1
    28ec:	10331700 	eorsne	r1, r3, r0, lsl #14
    28f0:	790a0000 	stmdbvc	sl, {}
    28f4:	0000049a 	muleq	r0, sl, r4
    28f8:	5d000101 	stfpls	f0, [r0, #-4]
    28fc:	02000000 	andeq	r0, r0, #0
    2900:	000a6300 	andeq	r6, sl, r0, lsl #6
    2904:	4d010400 	cfstrsmi	mvf0, [r1]
    2908:	01000000 	tsteq	r0, r0
    290c:	00001084 	andeq	r1, r0, r4, lsl #1
    2910:	00000063 	andeq	r0, r0, r3, rrx
    2914:	300013cc 	andcc	r1, r0, ip, asr #7
    2918:	300013cc 	andcc	r1, r0, ip, asr #7
    291c:	00000916 	andeq	r0, r0, r6, lsl r9
    2920:	a0060102 	andge	r0, r6, r2, lsl #2
    2924:	02000000 	andeq	r0, r0, #0
    2928:	009e0801 	addseq	r0, lr, r1, lsl #16
    292c:	02020000 	andeq	r0, r2, #0
    2930:	00008b07 	andeq	r8, r0, r7, lsl #22
    2934:	05020200 	streq	r0, [r2, #-512]	; 0x200
    2938:	00000059 	andeq	r0, r0, r9, asr r0
    293c:	37070402 	strcc	r0, [r7, -r2, lsl #8]
    2940:	03000000 	movweq	r0, #0
    2944:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2948:	08020074 	stmdaeq	r2, {r2, r4, r5, r6}
    294c:	00000005 	andeq	r0, r0, r5
    2950:	07080200 	streq	r0, [r8, -r0, lsl #4]
    2954:	0000002d 	andeq	r0, r0, sp, lsr #32
    2958:	00070404 	andeq	r0, r7, r4, lsl #8
    295c:	00000b8e 	andeq	r0, r0, lr, lsl #23
    2960:	0a960002 	beq	fe582970 <rEINTPEND+0xa85828c8>
    2964:	01040000 	tsteq	r4, r0
    2968:	0000004d 	andeq	r0, r0, sp, asr #32
    296c:	00109501 	andseq	r9, r0, r1, lsl #10
    2970:	00006300 	andeq	r6, r0, r0, lsl #6
    2974:	0013cc00 	andseq	ip, r3, r0, lsl #24
    2978:	00197030 	andseq	r7, r9, r0, lsr r0
    297c:	00093330 	andeq	r3, r9, r0, lsr r3
    2980:	05640200 	strbeq	r0, [r4, #-512]!	; 0x200
    2984:	21030000 	tstcs	r3, r0
    2988:	a0060103 	andge	r0, r6, r3, lsl #2
    298c:	04000000 	streq	r0, [r0]
    2990:	00000ee8 	andeq	r0, r0, r8, ror #29
    2994:	003e2303 	eorseq	r2, lr, r3, lsl #6
    2998:	01030000 	tsteq	r3, r0
    299c:	00009e08 	andeq	r9, r0, r8, lsl #28
    29a0:	04f70400 	ldrbteq	r0, [r7], #1024	; 0x400
    29a4:	24030000 	strcs	r0, [r3]
    29a8:	0000003e 	andeq	r0, r0, lr, lsr r0
    29ac:	000afb04 	andeq	pc, sl, r4, lsl #22
    29b0:	5b260300 	blpl	9835b8 <MEM_SIZE+0x1835b8>
    29b4:	03000000 	movweq	r0, #0
    29b8:	008b0702 	addeq	r0, fp, r2, lsl #14
    29bc:	02030000 	andeq	r0, r3, #0
    29c0:	00005905 	andeq	r5, r0, r5, lsl #18
    29c4:	03380400 	teqeq	r8, #0
    29c8:	28030000 	stmdacs	r3, {}
    29cc:	00000074 	andeq	r0, r0, r4, ror r0
    29d0:	37070403 	strcc	r0, [r7, -r3, lsl #8]
    29d4:	04000000 	streq	r0, [r0]
    29d8:	0000115a 	andeq	r1, r0, sl, asr r1
    29dc:	00862903 	addeq	r2, r6, r3, lsl #18
    29e0:	04050000 	streq	r0, [r5]
    29e4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    29e8:	05080300 	streq	r0, [r8, #-768]	; 0x300
    29ec:	00000000 	andeq	r0, r0, r0
    29f0:	2d070803 	stccs	8, cr0, [r7, #-12]
    29f4:	04000000 	streq	r0, [r0]
    29f8:	0000039f 	muleq	r0, pc, r3
    29fc:	00742d03 	rsbseq	r2, r4, r3, lsl #26
    2a00:	32040000 	andcc	r0, r4, #0
    2a04:	04000001 	streq	r0, [r0], #-1
    2a08:	00007422 	andeq	r7, r0, r2, lsr #8
    2a0c:	0a270400 	beq	9c3a14 <MEM_SIZE+0x1c3a14>
    2a10:	2a050000 	bcs	142a18 <DISABLE_IRQ+0x142998>
    2a14:	00000069 	andeq	r0, r0, r9, rrx
    2a18:	00082904 	andeq	r2, r8, r4, lsl #18
    2a1c:	692c0500 	stmdbvs	ip!, {r8, sl}
    2a20:	06000000 	streq	r0, [r0], -r0
    2a24:	6c430604 	mcrrvs	6, 0, r0, r3, cr4
    2a28:	07000002 	streq	r0, [r0, -r2]
    2a2c:	00000bb5 	undefined instruction 0x00000bb5
    2a30:	0b6e0700 	bleq	1b84638 <MEM_SIZE+0x1384638>
    2a34:	07010000 	streq	r0, [r1, -r0]
    2a38:	000003aa 	andeq	r0, r0, sl, lsr #7
    2a3c:	09210702 	stmdbeq	r1!, {r1, r8, r9, sl}
    2a40:	07030000 	streq	r0, [r3, -r0]
    2a44:	00000635 	andeq	r0, r0, r5, lsr r6
    2a48:	0a350704 	beq	d44660 <MEM_SIZE+0x544660>
    2a4c:	07050000 	streq	r0, [r5, -r0]
    2a50:	00000ad4 	ldrdeq	r0, [r0], -r4
    2a54:	02ac0706 	adceq	r0, ip, #1572864	; 0x180000
    2a58:	07070000 	streq	r0, [r7, -r0]
    2a5c:	000006e3 	andeq	r0, r0, r3, ror #13
    2a60:	01ee0708 	mvneq	r0, r8, lsl #14
    2a64:	07090000 	streq	r0, [r9, -r0]
    2a68:	000008cd 	andeq	r0, r0, sp, asr #17
    2a6c:	0ba1070a 	bleq	fe84469c <rEINTPEND+0xa88445f4>
    2a70:	070b0000 	streq	r0, [fp, -r0]
    2a74:	00000480 	andeq	r0, r0, r0, lsl #9
    2a78:	08bc070c 	ldmeq	ip!, {r2, r3, r8, r9, sl}
    2a7c:	070d0000 	streq	r0, [sp, -r0]
    2a80:	00000705 	andeq	r0, r0, r5, lsl #14
    2a84:	06d0070e 	ldrbeq	r0, [r0], lr, lsl #14
    2a88:	070f0000 	streq	r0, [pc, -r0]
    2a8c:	00000340 	andeq	r0, r0, r0, asr #6
    2a90:	096a0710 	stmdbeq	sl!, {r4, r8, r9, sl}^
    2a94:	07110000 	ldreq	r0, [r1, -r0]
    2a98:	00000b39 	andeq	r0, r0, r9, lsr fp
    2a9c:	060e0712 	undefined instruction 0x060e0712
    2aa0:	07130000 	ldreq	r0, [r3, -r0]
    2aa4:	000002be 	undefined instruction 0x000002be
    2aa8:	06900714 	undefined instruction 0x06900714
    2aac:	07150000 	ldreq	r0, [r5, -r0]
    2ab0:	000008e5 	andeq	r0, r0, r5, ror #17
    2ab4:	02d00716 	sbcseq	r0, r0, #5767168	; 0x580000
    2ab8:	07170000 	ldreq	r0, [r7, -r0]
    2abc:	0000090a 	andeq	r0, r0, sl, lsl #18
    2ac0:	02150718 	andseq	r0, r5, #6291456	; 0x600000
    2ac4:	07190000 	ldreq	r0, [r9, -r0]
    2ac8:	00000776 	andeq	r0, r0, r6, ror r7
    2acc:	02f0071a 	rscseq	r0, r0, #6815744	; 0x680000
    2ad0:	071b0000 	ldreq	r0, [fp, -r0]
    2ad4:	00000bc1 	andeq	r0, r0, r1, asr #23
    2ad8:	0405071c 	streq	r0, [r5], #-1820	; 0x71c
    2adc:	071d0000 	ldreq	r0, [sp, -r0]
    2ae0:	00000810 	andeq	r0, r0, r0, lsl r8
    2ae4:	0932071e 	ldmdbeq	r2!, {r1, r2, r3, r4, r8, r9, sl}
    2ae8:	071f0000 	ldreq	r0, [pc, -r0]
    2aec:	00000267 	andeq	r0, r0, r7, ror #4
    2af0:	05b10720 	ldreq	r0, [r1, #1824]!	; 0x720
    2af4:	07210000 	streq	r0, [r1, -r0]!
    2af8:	00000644 	andeq	r0, r0, r4, asr #12
    2afc:	07ff0722 	ldrbeq	r0, [pc, r2, lsr #14]!
    2b00:	07230000 	streq	r0, [r3, -r0]!
    2b04:	000003ba 	undefined instruction 0x000003ba
    2b08:	08990724 	ldmeq	r9, {r2, r5, r8, r9, sl}
    2b0c:	07250000 	streq	r0, [r5, -r0]!
    2b10:	00000b4b 	andeq	r0, r0, fp, asr #22
    2b14:	08830726 	stmeq	r3, {r1, r2, r5, r8, r9, sl}
    2b18:	07270000 	streq	r0, [r7, -r0]!
    2b1c:	0000023e 	andeq	r0, r0, lr, lsr r2
    2b20:	09b70728 	ldmibeq	r7!, {r3, r5, r8, r9, sl}
    2b24:	07290000 	streq	r0, [r9, -r0]!
    2b28:	00000ae5 	andeq	r0, r0, r5, ror #21
    2b2c:	0a87072a 	beq	fe1c47dc <rEINTPEND+0xa81c4734>
    2b30:	072b0000 	streq	r0, [fp, -r0]!
    2b34:	00000948 	andeq	r0, r0, r8, asr #18
    2b38:	09f5072c 	ldmibeq	r5!, {r2, r3, r5, r8, r9, sl}^
    2b3c:	072d0000 	streq	r0, [sp, -r0]!
    2b40:	000009c7 	andeq	r0, r0, r7, asr #19
    2b44:	03cf072e 	biceq	r0, pc, #12058624	; 0xb80000
    2b48:	072f0000 	streq	r0, [pc, -r0]!
    2b4c:	000006a7 	andeq	r0, r0, r7, lsr #13
    2b50:	04130730 	ldreq	r0, [r3], #-1840	; 0x730
    2b54:	07310000 	ldreq	r0, [r1, -r0]!
    2b58:	00000989 	andeq	r0, r0, r9, lsl #19
    2b5c:	03520732 	cmpeq	r2, #13107200	; 0xc80000
    2b60:	07330000 	ldreq	r0, [r3, -r0]!
    2b64:	000005fd 	strdeq	r0, [r0], -sp
    2b68:	0bd50734 	bleq	ff544840 <rEINTPEND+0xa9544798>
    2b6c:	07350000 	ldreq	r0, [r5, -r0]!
    2b70:	000004e1 	andeq	r0, r0, r1, ror #9
    2b74:	07a80736 	undefined instruction 0x07a80736
    2b78:	07370000 	ldreq	r0, [r7, -r0]!
    2b7c:	00000792 	muleq	r0, r2, r7
    2b80:	03160738 	tsteq	r6, #14680064	; 0xe00000
    2b84:	07390000 	ldreq	r0, [r9, -r0]!
    2b88:	000006f3 	strdeq	r0, [r0], -r3
    2b8c:	03e2073a 	mvneq	r0, #15204352	; 0xe80000
    2b90:	073b0000 	ldreq	r0, [fp, -r0]!
    2b94:	000006bc 	undefined instruction 0x000006bc
    2b98:	050f073c 	streq	r0, [pc, #-1852]	; 2464 <DISABLE_IRQ+0x23e4>
    2b9c:	073d0000 	ldreq	r0, [sp, -r0]!
    2ba0:	0000056d 	andeq	r0, r0, sp, ror #10
    2ba4:	04cb073e 	strbeq	r0, [fp], #1854	; 0x73e
    2ba8:	073f0000 	ldreq	r0, [pc, -r0]!
    2bac:	0000036e 	andeq	r0, r0, lr, ror #6
    2bb0:	8b0700c0 	blhi	1c2eb8 <DISABLE_IRQ+0x1c2e38>
    2bb4:	c1000005 	tstgt	r0, r5
    2bb8:	08370700 	ldmdaeq	r7!, {r8, r9, sl}
    2bbc:	00c20000 	sbceq	r0, r2, r0
    2bc0:	00067407 	andeq	r7, r6, r7, lsl #8
    2bc4:	0000c300 	andeq	ip, r0, r0, lsl #6
    2bc8:	b5060406 	strlt	r0, [r6, #-1030]	; 0x406
    2bcc:	000002bd 	undefined instruction 0x000002bd
    2bd0:	0009e407 	andeq	lr, r9, r7, lsl #8
    2bd4:	57071100 	strpl	r1, [r7, -r0, lsl #2]
    2bd8:	12000004 	andne	r0, r0, #4
    2bdc:	0001db07 	andeq	sp, r1, r7, lsl #22
    2be0:	c3071300 	movwgt	r1, #29440	; 0x7300
    2be4:	14000007 	strne	r0, [r0], #-7
    2be8:	00073307 	andeq	r3, r7, r7, lsl #6
    2bec:	44071500 	strmi	r1, [r7], #-1280	; 0x500
    2bf0:	1600000a 	strne	r0, [r0], -sl
    2bf4:	000b8e07 	andeq	r8, fp, r7, lsl #28
    2bf8:	c9071700 	stmdbgt	r7, {r8, r9, sl, ip}
    2bfc:	18000005 	stmdane	r0, {r0, r2}
    2c00:	0008a907 	andeq	sl, r8, r7, lsl #18
    2c04:	50071900 	andpl	r1, r7, r0, lsl #18
    2c08:	1a000008 	bne	2c30 <DISABLE_IRQ+0x2bb0>
    2c0c:	00071707 	andeq	r1, r7, r7, lsl #14
    2c10:	1b071b00 	blne	1c9818 <DISABLE_IRQ+0x1c9798>
    2c14:	1c00000b 	stcne	0, cr0, [r0], {11}
    2c18:	0c090800 	stceq	8, cr0, [r9], {0}
    2c1c:	02080000 	andeq	r0, r8, #0
    2c20:	0002e623 	andeq	lr, r2, r3, lsr #12
    2c24:	03110900 	tsteq	r1, #0
    2c28:	24020000 	strcs	r0, [r2]
    2c2c:	000002e6 	andeq	r0, r0, r6, ror #5
    2c30:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    2c34:	00000281 	andeq	r0, r0, r1, lsl #5
    2c38:	02e62502 	rsceq	r2, r6, #8388608	; 0x800000
    2c3c:	23020000 	movwcs	r0, #8192	; 0x2000
    2c40:	040a0004 	streq	r0, [sl], #-4
    2c44:	000002bd 	undefined instruction 0x000002bd
    2c48:	000c0904 	andeq	r0, ip, r4, lsl #18
    2c4c:	bd260200 	sfmlt	f0, 4, [r6]	; (stclt 2, cr0, [r6])
    2c50:	08000002 	stmdaeq	r0, {r1}
    2c54:	0000065c 	andeq	r0, r0, ip, asr r6
    2c58:	3c2f0710 	stccc	7, cr0, [pc], #-64	; 0xffffffc0
    2c5c:	09000003 	stmdbeq	r0, {r0, r1}
    2c60:	00000ac9 	andeq	r0, r0, r9, asr #21
    2c64:	02ec3107 	rsceq	r3, ip, #-1073741823	; 0xc0000001
    2c68:	23020000 	movwcs	r0, #8192	; 0x2000
    2c6c:	08e00900 	stmiaeq	r0!, {r8, fp}^
    2c70:	32070000 	andcc	r0, r7, #0
    2c74:	0000033c 	andeq	r0, r0, ip, lsr r3
    2c78:	09082302 	stmdbeq	r8, {r1, r8, r9, sp}
    2c7c:	00000900 	andeq	r0, r0, r0, lsl #18
    2c80:	00453307 	subeq	r3, r5, r7, lsl #6
    2c84:	23020000 	movwcs	r0, #8192	; 0x2000
    2c88:	0427090c 	strteq	r0, [r7], #-2316	; 0x90c
    2c8c:	34070000 	strcc	r0, [r7]
    2c90:	00000045 	andeq	r0, r0, r5, asr #32
    2c94:	000d2302 	andeq	r2, sp, r2, lsl #6
    2c98:	0045040a 	subeq	r0, r5, sl, lsl #8
    2c9c:	5c040000 	stcpl	0, cr0, [r4], {0}
    2ca0:	07000006 	streq	r0, [r0, -r6]
    2ca4:	0002f736 	andeq	pc, r2, r6, lsr r7
    2ca8:	099f0800 	ldmibeq	pc, {fp}
    2cac:	076c0000 	strbeq	r0, [ip, -r0]!
    2cb0:	0004e23a 	andeq	lr, r4, sl, lsr r2
    2cb4:	14810900 	strne	r0, [r1], #2304	; 0x900
    2cb8:	3b070000 	blcc	1c2cc0 <DISABLE_IRQ+0x1c2c40>
    2cbc:	000004e2 	andeq	r0, r0, r2, ror #9
    2cc0:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    2cc4:	0000044d 	andeq	r0, r0, sp, asr #8
    2cc8:	02ec4107 	rsceq	r4, ip, #-1073741823	; 0xc0000001
    2ccc:	23020000 	movwcs	r0, #8192	; 0x2000
    2cd0:	05520904 	ldrbeq	r0, [r2, #-2308]	; 0x904
    2cd4:	45070000 	strmi	r0, [r7]
    2cd8:	000004e8 	andeq	r0, r0, r8, ror #9
    2cdc:	090c2302 	stmdbeq	ip, {r1, r8, r9, sp}
    2ce0:	00001aef 	andeq	r1, r0, pc, ror #21
    2ce4:	00694b07 	rsbeq	r4, r9, r7, lsl #22
    2ce8:	23020000 	movwcs	r0, #8192	; 0x2000
    2cec:	08780910 	ldmdaeq	r8!, {r4, r8, fp}^
    2cf0:	4c070000 	stcmi	0, cr0, [r7], {0}
    2cf4:	00000069 	andeq	r0, r0, r9, rrx
    2cf8:	09142302 	ldmdbeq	r4, {r1, r8, r9, sp}
    2cfc:	00001d35 	andeq	r1, r0, r5, lsr sp
    2d00:	00454d07 	subeq	r4, r5, r7, lsl #26
    2d04:	23020000 	movwcs	r0, #8192	; 0x2000
    2d08:	1e5a0918 	mrcne	9, 2, r0, cr10, cr8, {0}
    2d0c:	51070000 	tstpl	r7, r0
    2d10:	00000045 	andeq	r0, r0, r5, asr #32
    2d14:	09192302 	ldmdbeq	r9, {r1, r8, r9, sp}
    2d18:	00000364 	andeq	r0, r0, r4, ror #6
    2d1c:	00455307 	subeq	r5, r5, r7, lsl #6
    2d20:	23020000 	movwcs	r0, #8192	; 0x2000
    2d24:	043f091a 	ldrteq	r0, [pc], #2330	; 2d2c <DISABLE_IRQ+0x2cac>
    2d28:	56070000 	strpl	r0, [r7], -r0
    2d2c:	00000045 	andeq	r0, r0, r5, asr #32
    2d30:	091b2302 	ldmdbeq	fp, {r1, r8, r9, sp}
    2d34:	00000bad 	andeq	r0, r0, sp, lsr #23
    2d38:	055c5a07 	ldrbeq	r5, [ip, #-2567]	; 0xa07
    2d3c:	23020000 	movwcs	r0, #8192	; 0x2000
    2d40:	0bf8091c 	bleq	ffe051b8 <rEINTPEND+0xa9e05110>
    2d44:	5f070000 	svcpl	0x00070000
    2d48:	000002ec 	andeq	r0, r0, ip, ror #5
    2d4c:	09202302 	stmdbeq	r0!, {r1, r8, r9, sp}
    2d50:	00000b03 	andeq	r0, r0, r3, lsl #22
    2d54:	00696307 	rsbeq	r6, r9, r7, lsl #6
    2d58:	23020000 	movwcs	r0, #8192	; 0x2000
    2d5c:	06250928 	strteq	r0, [r5], -r8, lsr #18
    2d60:	65070000 	strvs	r0, [r7]
    2d64:	00000562 	andeq	r0, r0, r2, ror #10
    2d68:	092c2302 	stmdbeq	ip!, {r1, r8, r9, sp}
    2d6c:	0000086e 	andeq	r0, r0, lr, ror #16
    2d70:	02ec6607 	rsceq	r6, ip, #7340032	; 0x700000
    2d74:	23020000 	movwcs	r0, #8192	; 0x2000
    2d78:	0c0e0930 	stceq	9, cr0, [lr], {48}	; 0x30
    2d7c:	68070000 	stmdavs	r7, {}
    2d80:	000000b1 	strheq	r0, [r0], -r1
    2d84:	09382302 	ldmdbeq	r8!, {r1, r8, r9, sp}
    2d88:	000007f3 	strdeq	r0, [r0], -r3
    2d8c:	00b16907 	adcseq	r6, r1, r7, lsl #18
    2d90:	23020000 	movwcs	r0, #8192	; 0x2000
    2d94:	05a7093c 	streq	r0, [r7, #2364]!	; 0x93c
    2d98:	6b070000 	blvs	1c2da0 <DISABLE_IRQ+0x1c2d20>
    2d9c:	00000568 	andeq	r0, r0, r8, ror #10
    2da0:	0b402302 	bleq	100b9b0 <MEM_SIZE+0x80b9b0>
    2da4:	0067736d 	rsbeq	r7, r7, sp, ror #6
    2da8:	04e26d07 	strbteq	r6, [r2], #3335	; 0xd07
    2dac:	23020000 	movwcs	r0, #8192	; 0x2000
    2db0:	16300944 	ldrtne	r0, [r0], -r4, asr #18
    2db4:	70070000 	andvc	r0, r7, r0
    2db8:	000000bc 	strheq	r0, [r0], -ip
    2dbc:	09482302 	stmdbeq	r8, {r1, r8, r9, sp}^
    2dc0:	000008db 	ldrdeq	r0, [r0], -fp
    2dc4:	033c7307 	teqeq	ip, #469762048	; 0x1c000000
    2dc8:	23020000 	movwcs	r0, #8192	; 0x2000
    2dcc:	09ac094c 	stmibeq	ip!, {r2, r3, r6, r8, fp}
    2dd0:	75070000 	strvc	r0, [r7]
    2dd4:	00000045 	andeq	r0, r0, r5, asr #32
    2dd8:	09502302 	ldmdbeq	r0, {r1, r8, r9, sp}^
    2ddc:	000007e6 	andeq	r0, r0, r6, ror #15
    2de0:	00457607 	subeq	r7, r5, r7, lsl #12
    2de4:	23020000 	movwcs	r0, #8192	; 0x2000
    2de8:	053d0951 	ldreq	r0, [sp, #-2385]!	; 0x951
    2dec:	79070000 	stmdbvc	r7, {}
    2df0:	0000056e 	andeq	r0, r0, lr, ror #10
    2df4:	09542302 	ldmdbeq	r4, {r1, r8, r9, sp}^
    2df8:	00000ab5 	undefined instruction 0x00000ab5
    2dfc:	05f17c07 	ldrbeq	r7, [r1, #3079]!	; 0xc07
    2e00:	23020000 	movwcs	r0, #8192	; 0x2000
    2e04:	022b0958 	eoreq	r0, fp, #1441792	; 0x160000
    2e08:	80070000 	andhi	r0, r7, r0
    2e0c:	0000062e 	andeq	r0, r0, lr, lsr #12
    2e10:	095c2302 	ldmdbeq	ip, {r1, r8, r9, sp}^
    2e14:	000004ad 	andeq	r0, r0, sp, lsr #9
    2e18:	00458407 	subeq	r8, r5, r7, lsl #8
    2e1c:	23020000 	movwcs	r0, #8192	; 0x2000
    2e20:	02550960 	subseq	r0, r5, #1572864	; 0x180000
    2e24:	85070000 	strhi	r0, [r7]
    2e28:	00000069 	andeq	r0, r0, r9, rrx
    2e2c:	09642302 	stmdbeq	r4!, {r1, r8, r9, sp}^
    2e30:	0000075a 	andeq	r0, r0, sl, asr r7
    2e34:	04e28607 	strbteq	r8, [r2], #1543	; 0x607
    2e38:	23020000 	movwcs	r0, #8192	; 0x2000
    2e3c:	040a0068 	streq	r0, [sl], #-104	; 0x68
    2e40:	00000025 	andeq	r0, r0, r5, lsr #32
    2e44:	0004e20c 	andeq	lr, r4, ip, lsl #4
    2e48:	0004f800 	andeq	pc, r4, r0, lsl #16
    2e4c:	04f80d00 	ldrbteq	r0, [r8], #3328	; 0xd00
    2e50:	00000000 	andeq	r0, r0, r0
    2e54:	0807040e 	stmdaeq	r7, {r1, r2, r3, sl}
    2e58:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2e5c:	5c5a071c 	mrrcpl	7, 1, r0, sl, cr12
    2e60:	09000005 	stmdbeq	r0, {r0, r2}
    2e64:	00000536 	andeq	r0, r0, r6, lsr r5
    2e68:	03422708 	movteq	r2, #9992	; 0x2708
    2e6c:	23020000 	movwcs	r0, #8192	; 0x2000
    2e70:	08670900 	stmdaeq	r7!, {r8, fp}^
    2e74:	2a080000 	bcs	202e7c <DISABLE_IRQ+0x202dfc>
    2e78:	000006b9 	undefined instruction 0x000006b9
    2e7c:	09102302 	ldmdbeq	r0, {r1, r8, r9, sp}
    2e80:	00000bad 	andeq	r0, r0, sp, lsr #23
    2e84:	055c2c08 	ldrbeq	r2, [ip, #-3080]	; 0xc08
    2e88:	23020000 	movwcs	r0, #8192	; 0x2000
    2e8c:	05f60914 	ldrbeq	r0, [r6, #2324]!	; 0x914
    2e90:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    2e94:	00000045 	andeq	r0, r0, r5, asr #32
    2e98:	09182302 	ldmdbeq	r8, {r1, r8, r9, sp}
    2e9c:	00000473 	andeq	r0, r0, r3, ror r4
    2ea0:	00452f08 	subeq	r2, r5, r8, lsl #30
    2ea4:	23020000 	movwcs	r0, #8192	; 0x2000
    2ea8:	048e0919 	streq	r0, [lr], #2329	; 0x919
    2eac:	30080000 	andcc	r0, r8, r0
    2eb0:	00000045 	andeq	r0, r0, r5, asr #32
    2eb4:	001a2302 	andseq	r2, sl, r2, lsl #6
    2eb8:	04fb040a 	ldrbteq	r0, [fp], #1034	; 0x40a
    2ebc:	040a0000 	streq	r0, [sl]
    2ec0:	0000009b 	muleq	r0, fp, r0
    2ec4:	02ec040a 	rsceq	r0, ip, #167772160	; 0xa000000
    2ec8:	040a0000 	streq	r0, [sl]
    2ecc:	00000342 	andeq	r0, r0, r2, asr #6
    2ed0:	00074b08 	andeq	r4, r7, r8, lsl #22
    2ed4:	7c072c00 	stcvc	12, cr2, [r7], {0}
    2ed8:	000005f1 	strdeq	r0, [r0], -r1
    2edc:	00053609 	andeq	r3, r5, r9, lsl #12
    2ee0:	422e0900 	eormi	r0, lr, #0
    2ee4:	02000003 	andeq	r0, r0, #3
    2ee8:	dd090023 	stcle	0, cr0, [r9, #-140]	; 0xffffff74
    2eec:	09000007 	stmdbeq	r0, {r0, r1, r2}
    2ef0:	0006a130 	andeq	sl, r6, r0, lsr r1
    2ef4:	10230200 	eorne	r0, r3, r0, lsl #4
    2ef8:	0005e409 	andeq	lr, r5, r9, lsl #8
    2efc:	bc310900 	ldclt	9, cr0, [r1]
    2f00:	02000000 	andeq	r0, r0, #0
    2f04:	0e091423 	cdpeq	4, 0, cr1, cr9, cr3, {1}
    2f08:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    2f0c:	0000bc32 	andeq	fp, r0, r2, lsr ip
    2f10:	18230200 	stmdane	r3!, {r9}
    2f14:	0005f009 	andeq	pc, r5, r9
    2f18:	a1340900 	teqge	r4, r0, lsl #18
    2f1c:	02000006 	andeq	r0, r0, #6
    2f20:	4e091c23 	cdpmi	12, 0, cr1, cr9, cr3, {1}
    2f24:	09000001 	stmdbeq	r0, {r0}
    2f28:	0006a135 	andeq	sl, r6, r5, lsr r1
    2f2c:	20230200 	eorcs	r0, r3, r0, lsl #4
    2f30:	00052709 	andeq	r2, r5, r9, lsl #14
    2f34:	bc360900 	ldclt	9, cr0, [r6]
    2f38:	02000000 	andeq	r0, r0, #0
    2f3c:	9b092423 	blls	24bfd0 <DISABLE_IRQ+0x24bf50>
    2f40:	09000004 	stmdbeq	r0, {r2}
    2f44:	0000bc37 	andeq	fp, r0, r7, lsr ip
    2f48:	28230200 	stmdacs	r3!, {r9}
    2f4c:	74040a00 	strvc	r0, [r4], #-2560	; 0xa00
    2f50:	08000005 	stmdaeq	r0, {r0, r2}
    2f54:	00000aa7 	andeq	r0, r0, r7, lsr #21
    2f58:	2e800718 	mcrcs	7, 4, r0, cr0, cr8, {0}
    2f5c:	09000006 	stmdbeq	r0, {r1, r2}
    2f60:	00000536 	andeq	r0, r0, r6, lsr r5
    2f64:	0342220a 	movteq	r2, #8714	; 0x220a
    2f68:	23020000 	movwcs	r0, #8192	; 0x2000
    2f6c:	04470900 	strbeq	r0, [r7], #-2304	; 0x900
    2f70:	230a0000 	movwcs	r0, #40960	; 0xa000
    2f74:	00000069 	andeq	r0, r0, r9, rrx
    2f78:	09102302 	ldmdbeq	r0, {r1, r8, r9, sp}
    2f7c:	00001b3f 	andeq	r1, r0, pc, lsr fp
    2f80:	06b3240a 	ldrteq	r2, [r3], sl, lsl #8
    2f84:	23020000 	movwcs	r0, #8192	; 0x2000
    2f88:	040a0014 	streq	r0, [sl], #-20
    2f8c:	000005f7 	strdeq	r0, [r0], -r7
    2f90:	00099f04 	andeq	r9, r9, r4, lsl #30
    2f94:	4d890700 	stcmi	7, cr0, [r9]
    2f98:	0a000003 	beq	2fac <DISABLE_IRQ+0x2f2c>
    2f9c:	00064504 	andeq	r4, r6, r4, lsl #10
    2fa0:	51010f00 	tstpl	r1, r0, lsl #30
    2fa4:	10000006 	andne	r0, r0, r6
    2fa8:	000004e2 	andeq	r0, r0, r2, ror #9
    2fac:	e2040a00 	and	r0, r4, #0
    2fb0:	08000004 	stmdaeq	r0, {r2}
    2fb4:	00000b61 	andeq	r0, r0, r1, ror #22
    2fb8:	8e21090c 	cdphi	9, 2, cr0, cr1, cr12, {0}
    2fbc:	09000006 	stmdbeq	r0, {r1, r2}
    2fc0:	00000311 	andeq	r0, r0, r1, lsl r3
    2fc4:	068e2309 	streq	r2, [lr], r9, lsl #6
    2fc8:	23020000 	movwcs	r0, #8192	; 0x2000
    2fcc:	05dc0900 	ldrbeq	r0, [ip, #2304]	; 0x900
    2fd0:	24090000 	strcs	r0, [r9]
    2fd4:	00000694 	muleq	r0, r4, r6
    2fd8:	09042302 	stmdbeq	r4, {r1, r8, r9, sp}
    2fdc:	00001630 	andeq	r1, r0, r0, lsr r6
    2fe0:	00bc2509 	adcseq	r2, ip, r9, lsl #10
    2fe4:	23020000 	movwcs	r0, #8192	; 0x2000
    2fe8:	040a0008 	streq	r0, [sl], #-8
    2fec:	00000657 	andeq	r0, r0, r7, asr r6
    2ff0:	61040411 	tstvs	r4, r1, lsl r4
    2ff4:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    2ff8:	00065727 	andeq	r5, r6, r7, lsr #14
    2ffc:	96040a00 	strls	r0, [r4], -r0, lsl #20
    3000:	0f000006 	svceq	0x00000006
    3004:	0006b301 	andeq	fp, r6, r1, lsl #6
    3008:	062e1000 	strteq	r1, [lr], -r0
    300c:	0a000000 	beq	3014 <DISABLE_IRQ+0x2f94>
    3010:	0006a704 	andeq	sl, r6, r4, lsl #14
    3014:	34040a00 	strcc	r0, [r4], #-2560	; 0xa00
    3018:	04000006 	streq	r0, [r0], #-6
    301c:	00001186 	andeq	r1, r0, r6, lsl #3
    3020:	06ca220b 	strbeq	r2, [sl], fp, lsl #4
    3024:	040a0000 	streq	r0, [sl]
    3028:	000006d0 	ldrdeq	r0, [r0], -r0
    302c:	04e20112 	strbteq	r0, [r2], #274	; 0x112
    3030:	06e00000 	strbteq	r0, [r0], r0
    3034:	69100000 	ldmdbvs	r0, {}
    3038:	00000000 	andeq	r0, r0, r0
    303c:	00115004 	andseq	r5, r1, r4
    3040:	3f230b00 	svccc	0x00230b00
    3044:	08000006 	stmdaeq	r0, {r1, r2}
    3048:	000010c6 	andeq	r1, r0, r6, asr #1
    304c:	22260b0c 	eorcs	r0, r6, #12288	; 0x3000
    3050:	09000007 	stmdbeq	r0, {r0, r1, r2}
    3054:	00001176 	andeq	r1, r0, r6, ror r1
    3058:	0069270b 	rsbeq	r2, r9, fp, lsl #14
    305c:	23020000 	movwcs	r0, #8192	; 0x2000
    3060:	11a30900 	undefined instruction 0x11a30900
    3064:	280b0000 	stmdacs	fp, {}
    3068:	00000069 	andeq	r0, r0, r9, rrx
    306c:	0b042302 	bleq	10bc7c <DISABLE_IRQ+0x10bbfc>
    3070:	0067736d 	rsbeq	r7, r7, sp, ror #6
    3074:	04e2290b 	strbteq	r2, [r2], #2315	; 0x90b
    3078:	23020000 	movwcs	r0, #8192	; 0x2000
    307c:	c6040008 	strgt	r0, [r4], -r8
    3080:	0b000010 	bleq	30c8 <DISABLE_IRQ+0x3048>
    3084:	0006eb2b 	andeq	lr, r6, fp, lsr #22
    3088:	10b40800 	adcsne	r0, r4, r0, lsl #16
    308c:	0b280000 	bleq	a03094 <MEM_SIZE+0x203094>
    3090:	00079c2f 	andeq	r9, r7, pc, lsr #24
    3094:	05360900 	ldreq	r0, [r6, #-2304]!	; 0x900
    3098:	310b0000 	tstcc	fp, r0
    309c:	00000342 	andeq	r0, r0, r2, asr #6
    30a0:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    30a4:	000010dd 	ldrdeq	r1, [r0], -sp
    30a8:	0069320b 	rsbeq	r3, r9, fp, lsl #4
    30ac:	23020000 	movwcs	r0, #8192	; 0x2000
    30b0:	0b0e0910 	bleq	3854f8 <DISABLE_IRQ+0x385478>
    30b4:	330b0000 	movwcc	r0, #45056	; 0xb000
    30b8:	00000069 	andeq	r0, r0, r9, rrx
    30bc:	09142302 	ldmdbeq	r4, {r1, r8, r9, sp}
    30c0:	000011d5 	ldrdeq	r1, [r0], -r5
    30c4:	0069340b 	rsbeq	r3, r9, fp, lsl #8
    30c8:	23020000 	movwcs	r0, #8192	; 0x2000
    30cc:	10e80918 	rscne	r0, r8, r8, lsl r9
    30d0:	350b0000 	strcc	r0, [fp]
    30d4:	00000651 	andeq	r0, r0, r1, asr r6
    30d8:	091c2302 	ldmdbeq	ip, {r1, r8, r9, sp}
    30dc:	00001134 	andeq	r1, r0, r4, lsr r1
    30e0:	06bf360b 	ldrteq	r3, [pc], fp, lsl #12
    30e4:	23020000 	movwcs	r0, #8192	; 0x2000
    30e8:	117d0920 	cmnne	sp, r0, lsr #18
    30ec:	370b0000 	strcc	r0, [fp, -r0]
    30f0:	000006e0 	andeq	r0, r0, r0, ror #13
    30f4:	00242302 	eoreq	r2, r4, r2, lsl #6
    30f8:	0010b404 	andseq	fp, r0, r4, lsl #8
    30fc:	2d390b00 	vldmdbcs	r9!, {d0-d-1}
    3100:	13000007 	movwne	r0, #7
    3104:	00002247 	andeq	r2, r0, r7, asr #4
    3108:	03012f02 	movweq	r2, #7938	; 0x1f02
    310c:	000007c0 	andeq	r0, r0, r0, asr #15
    3110:	000da314 	andeq	sl, sp, r4, lsl r3
    3114:	682f0200 	stmdavs	pc!, {r9}
    3118:	00000005 	andeq	r0, r0, r5
    311c:	000e6015 	andeq	r6, lr, r5, lsl r0
    3120:	01380200 	teqeq	r8, r0, lsl #4
    3124:	00000033 	andeq	r0, r0, r3, lsr r0
    3128:	0007dd03 	andeq	sp, r7, r3, lsl #26
    312c:	01441400 	cmpeq	r4, r0, lsl #8
    3130:	38020000 	stmdacc	r2, {}
    3134:	00000568 	andeq	r0, r0, r8, ror #10
    3138:	10a21300 	adcne	r1, r2, r0, lsl #6
    313c:	4c010000 	stcmi	0, cr0, [r1], {0}
    3140:	080a0301 	stmdaeq	sl, {r0, r8, r9}
    3144:	71140000 	tstvc	r4, r0
    3148:	01000007 	tsteq	r0, r7
    314c:	00080a4c 	andeq	r0, r8, ip, asr #20
    3150:	74701600 	ldrbtvc	r1, [r0], #-1536	; 0x600
    3154:	4c010072 	stcmi	0, cr0, [r1], {114}	; 0x72
    3158:	00000810 	andeq	r0, r0, r0, lsl r8
    315c:	01006b17 	tsteq	r0, r7, lsl fp
    3160:	00007b4e 	andeq	r7, r0, lr, asr #22
    3164:	040a0000 	streq	r0, [sl]
    3168:	0000079c 	muleq	r0, ip, r7
    316c:	0722040a 	streq	r0, [r2, -sl, lsl #8]!
    3170:	01180000 	tsteq	r8, r0
    3174:	0000111f 	andeq	r1, r0, pc, lsl r1
    3178:	50013701 	andpl	r3, r1, r1, lsl #14
    317c:	cc000000 	stcgt	0, cr0, [r0], {0}
    3180:	18300013 	ldmdane	r0!, {r0, r1, r4}
    3184:	52300014 	eorspl	r0, r0, #20
    3188:	9d00000f 	stcls	0, cr0, [r0, #-60]	; 0xffffffc4
    318c:	19000008 	stmdbne	r0, {r3}
    3190:	000010bf 	strheq	r1, [r0], -pc
    3194:	080a3701 	stmdaeq	sl, {r0, r8, r9, sl, ip, sp}
    3198:	0f710000 	svceq	0x00710000
    319c:	6a1a0000 	bvs	6831a4 <DISABLE_IRQ+0x683124>
    31a0:	01000004 	tsteq	r0, r4
    31a4:	00033c37 	andeq	r3, r3, r7, lsr ip
    31a8:	1a510100 	bne	14435b0 <MEM_SIZE+0xc435b0>
    31ac:	00001134 	andeq	r1, r0, r4, lsr r1
    31b0:	06bf3701 	ldrteq	r3, [pc], r1, lsl #14
    31b4:	52010000 	andpl	r0, r1, #0
    31b8:	00117d19 	andseq	r7, r1, r9, lsl sp
    31bc:	e0370100 	eors	r0, r7, r0, lsl #2
    31c0:	84000006 	strhi	r0, [r0], #-6
    31c4:	1a00000f 	bne	3208 <DISABLE_IRQ+0x3188>
    31c8:	00001106 	andeq	r1, r0, r6, lsl #2
    31cc:	06513701 	ldrbeq	r3, [r1], -r1, lsl #14
    31d0:	91020000 	tstls	r2, r0
    31d4:	16301a00 	ldrtne	r1, [r0], -r0, lsl #20
    31d8:	37010000 	strcc	r0, [r1, -r0]
    31dc:	00000069 	andeq	r0, r0, r9, rrx
    31e0:	1b049102 	blne	1275f0 <DISABLE_IRQ+0x127570>
    31e4:	000007a7 	andeq	r0, r0, r7, lsr #15
    31e8:	30001400 	andcc	r1, r0, r0, lsl #8
    31ec:	30001408 	andcc	r1, r0, r8, lsl #8
    31f0:	b41c4301 	ldrlt	r4, [ip], #-769	; 0x301
    31f4:	00000007 	andeq	r0, r0, r7
    31f8:	a8011d00 	stmdage	r1, {r8, sl, fp, ip}
    31fc:	01000011 	tsteq	r0, r1, lsl r0
    3200:	500101e9 	andpl	r0, r1, r9, ror #3
    3204:	18000000 	stmdane	r0, {}
    3208:	88300014 	ldmdahi	r0!, {r2, r4}
    320c:	97300014 	undefined instruction 0x97300014
    3210:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    3214:	1e000009 	cdpne	0, 0, cr0, cr0, cr9, {0}
    3218:	00715f70 	rsbseq	r5, r1, r0, ror pc
    321c:	0a01e901 	beq	7d628 <DISABLE_IRQ+0x7d5a8>
    3220:	c2000008 	andgt	r0, r0, #8
    3224:	1f00000f 	svcne	0x0000000f
    3228:	00001162 	andeq	r1, r0, r2, ror #2
    322c:	0801e901 	stmdaeq	r1, {r0, r8, fp, sp, lr, pc}
    3230:	e0000009 	and	r0, r0, r9
    3234:	1f00000f 	svcne	0x0000000f
    3238:	000010dd 	ldrdeq	r1, [r0], -sp
    323c:	0801e901 	stmdaeq	r1, {r0, r8, fp, sp, lr, pc}
    3240:	fe000009 	cdp2	0, 0, cr0, cr0, cr9, {0}
    3244:	1f00000f 	svcne	0x0000000f
    3248:	000011d5 	ldrdeq	r1, [r0], -r5
    324c:	0801e901 	stmdaeq	r1, {r0, r8, fp, sp, lr, pc}
    3250:	1c000009 	stcne	0, cr0, [r0], {9}
    3254:	20000010 	andcs	r0, r0, r0, lsl r0
    3258:	00000118 	andeq	r0, r0, r8, lsl r1
    325c:	a601ec01 	strge	lr, [r1], -r1, lsl #24
    3260:	00000000 	andeq	r0, r0, r0
    3264:	0069040a 	rsbeq	r0, r9, sl, lsl #8
    3268:	011d0000 	tsteq	sp, r0
    326c:	00001192 	muleq	r0, r2, r1
    3270:	01017101 	tsteq	r1, r1, lsl #2
    3274:	00000050 	andeq	r0, r0, r0, asr r0
    3278:	30001488 	andcc	r1, r0, r8, lsl #9
    327c:	3000151c 	andcc	r1, r0, ip, lsl r5
    3280:	0000103a 	andeq	r1, r0, sl, lsr r0
    3284:	00000949 	andeq	r0, r0, r9, asr #18
    3288:	715f701e 	cmpvc	pc, lr, lsl r0
    328c:	01710100 	cmneq	r1, r0, lsl #2
    3290:	0000080a 	andeq	r0, r0, sl, lsl #16
    3294:	00001059 	andeq	r1, r0, r9, asr r0
    3298:	00011820 	andeq	r1, r1, r0, lsr #16
    329c:	01740100 	cmneq	r4, r0, lsl #2
    32a0:	000000a6 	andeq	r0, r0, r6, lsr #1
    32a4:	c3011d00 	movwgt	r1, #7424	; 0x1d00
    32a8:	01000011 	tsteq	r0, r1, lsl r0
    32ac:	500101a6 	andpl	r0, r1, r6, lsr #3
    32b0:	1c000000 	stcne	0, cr0, [r0], {0}
    32b4:	d4300015 	ldrtle	r0, [r0], #-21
    32b8:	77300015 	undefined instruction 0x77300015
    32bc:	a6000010 	undefined instruction 0xa6000010
    32c0:	1e000009 	cdpne	0, 0, cr0, cr0, cr9, {0}
    32c4:	00715f70 	rsbseq	r5, r1, r0, ror pc
    32c8:	0a01a601 	beq	6cad4 <DISABLE_IRQ+0x6ca54>
    32cc:	96000008 	strls	r0, [r0], -r8
    32d0:	20000010 	andcs	r0, r0, r0, lsl r0
    32d4:	00000d9d 	muleq	r0, sp, sp
    32d8:	6801a801 	stmdavs	r1, {r0, fp, sp, pc}
    32dc:	20000005 	andcs	r0, r0, r5
    32e0:	00000118 	andeq	r0, r0, r8, lsl r1
    32e4:	a601aa01 	strge	sl, [r1], -r1, lsl #20
    32e8:	21000000 	tstcs	r0, r0
    32ec:	000007c0 	andeq	r0, r0, r0, asr #15
    32f0:	30001570 	andcc	r1, r0, r0, ror r5
    32f4:	00000090 	muleq	r0, r0, r0
    32f8:	1c01c701 	stcne	7, cr12, [r1], {1}
    32fc:	000007d1 	ldrdeq	r0, [r0], -r1
    3300:	01180000 	tsteq	r8, r0
    3304:	00001110 	andeq	r1, r0, r0, lsl r1
    3308:	5001f101 	andpl	pc, r1, r1, lsl #2
    330c:	d4000000 	strle	r0, [r0]
    3310:	b8300015 	ldmdalt	r0!, {r0, r2, r4}
    3314:	b4300017 	ldrtlt	r0, [r0], #-23
    3318:	38000010 	stmdacc	r0, {r4}
    331c:	2200000a 	andcs	r0, r0, #10
    3320:	00715f70 	rsbseq	r5, r1, r0, ror pc
    3324:	080af101 	stmdaeq	sl, {r0, r8, ip, sp, lr, pc}
    3328:	10df0000 	sbcsne	r0, pc, r0
    332c:	ad190000 	ldcge	0, cr0, [r9]
    3330:	01000010 	tsteq	r0, r0, lsl r0
    3334:	000651f1 	strdeq	r5, [r6], -r1
    3338:	0010fd00 	andseq	pc, r0, r0, lsl #26
    333c:	10d51900 	sbcsne	r1, r5, r0, lsl #18
    3340:	f1010000 	setend	le
    3344:	00000908 	andeq	r0, r0, r8, lsl #18
    3348:	00001147 	andeq	r1, r0, r7, asr #2
    334c:	00112b19 	andseq	r2, r1, r9, lsl fp
    3350:	08f10100 	ldmeq	r1!, {r8}^
    3354:	65000009 	strvs	r0, [r0, #-9]
    3358:	19000011 	stmdbne	r0, {r0, r4}
    335c:	00000dc1 	andeq	r0, r0, r1, asr #27
    3360:	00b1f101 	adcseq	pc, r1, r1, lsl #2
    3364:	11af0000 	undefined instruction 0x11af0000
    3368:	df230000 	svcle	0x00230000
    336c:	01000011 	tsteq	r0, r1, lsl r0
    3370:	000050f3 	strdeq	r5, [r0], -r3
    3374:	0011ce00 	andseq	ip, r1, r0, lsl #28
    3378:	1a432300 	bne	10cbf80 <MEM_SIZE+0x8cbf80>
    337c:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    3380:	00000810 	andeq	r0, r0, r0, lsl r8
    3384:	0000120d 	andeq	r1, r0, sp, lsl #4
    3388:	00011824 	andeq	r1, r1, r4, lsr #16
    338c:	a6f60100 	ldrbtge	r0, [r6], r0, lsl #2
    3390:	00000000 	andeq	r0, r0, r0
    3394:	0010f115 	andseq	pc, r0, r5, lsl r1
    3398:	015f0100 	cmpeq	pc, r0, lsl #2
    339c:	00000050 	andeq	r0, r0, r0, asr r0
    33a0:	000a9701 	andeq	r9, sl, r1, lsl #14
    33a4:	5f701600 	svcpl	0x00701600
    33a8:	5f010071 	svcpl	0x00010071
    33ac:	0000080a 	andeq	r0, r0, sl, lsl #16
    33b0:	0010ad14 	andseq	sl, r0, r4, lsl sp
    33b4:	e25f0100 	subs	r0, pc, #0
    33b8:	14000004 	strne	r0, [r0], #-4
    33bc:	0000181b 	andeq	r1, r0, fp, lsl r8
    33c0:	00695f01 	rsbeq	r5, r9, r1, lsl #30
    33c4:	2b140000 	blcs	5033cc <DISABLE_IRQ+0x50334c>
    33c8:	01000011 	tsteq	r0, r1, lsl r0
    33cc:	0000695f 	andeq	r6, r0, pc, asr r9
    33d0:	0d9d2400 	cfldrseq	mvf2, [sp]
    33d4:	62010000 	andvs	r0, r1, #0
    33d8:	00000568 	andeq	r0, r0, r8, ror #10
    33dc:	00113f24 	andseq	r3, r1, r4, lsr #30
    33e0:	10630100 	rsbne	r0, r3, r0, lsl #2
    33e4:	24000008 	strcs	r0, [r0], #-8
    33e8:	00000118 	andeq	r0, r0, r8, lsl r1
    33ec:	00a66501 	adceq	r6, r6, r1, lsl #10
    33f0:	18000000 	stmdane	r0, {}
    33f4:	0010fa01 	andseq	pc, r0, r1, lsl #20
    33f8:	01c40100 	biceq	r0, r4, r0, lsl #2
    33fc:	00000050 	andeq	r0, r0, r0, asr r0
    3400:	300017b8 	undefined instruction 0x300017b8
    3404:	30001970 	andcc	r1, r0, r0, ror r9
    3408:	00001236 	andeq	r1, r0, r6, lsr r2
    340c:	00000b6a 	andeq	r0, r0, sl, ror #22
    3410:	0010bf19 	andseq	fp, r0, r9, lsl pc
    3414:	0ac40100 	beq	ff10381c <rEINTPEND+0xa9103774>
    3418:	61000008 	tstvs	r0, r8
    341c:	19000012 	stmdbne	r0, {r1, r4}
    3420:	000005dc 	ldrdeq	r0, [r0], -ip
    3424:	04e2c401 	strbteq	ip, [r2], #1025	; 0x401
    3428:	127f0000 	rsbsne	r0, pc, #0
    342c:	d5190000 	ldrle	r0, [r9]
    3430:	01000010 	tsteq	r0, r0, lsl r0
    3434:	000069c4 	andeq	r6, r0, r4, asr #19
    3438:	00129d00 	andseq	r9, r2, r0, lsl #26
    343c:	112b1900 	teqne	fp, r0, lsl #18
    3440:	c4010000 	strgt	r0, [r1]
    3444:	00000069 	andeq	r0, r0, r9, rrx
    3448:	000012bb 	undefined instruction 0x000012bb
    344c:	74657225 	strbtvc	r7, [r5], #-549	; 0x225
    3450:	50c60100 	sbcpl	r0, r6, r0, lsl #2
    3454:	d9000000 	stmdble	r0, {}
    3458:	26000012 	undefined instruction 0x26000012
    345c:	00000a38 	andeq	r0, r0, r8, lsr sl
    3460:	300017bc 	undefined instruction 0x300017bc
    3464:	000000a8 	andeq	r0, r0, r8, lsr #1
    3468:	6a1cc801 	bvs	735474 <DISABLE_IRQ+0x7353f4>
    346c:	1c00000a 	stcne	0, cr0, [r0], {10}
    3470:	00000a5f 	andeq	r0, r0, pc, asr sl
    3474:	000a541c 	andeq	r5, sl, ip, lsl r4
    3478:	0a491c00 	beq	124a480 <MEM_SIZE+0xa4a480>
    347c:	c8270000 	stmdagt	r7!, {}
    3480:	28000000 	stmdacs	r0, {}
    3484:	00000a75 	andeq	r0, r0, r5, ror sl
    3488:	000a8029 	andeq	r8, sl, r9, lsr #32
    348c:	00133900 	andseq	r3, r3, r0, lsl #18
    3490:	0a8b2800 	beq	fe2cd498 <rEINTPEND+0xa82cd3f0>
    3494:	dd1b0000 	ldcle	0, cr0, [fp]
    3498:	d0000007 	andle	r0, r0, r7
    349c:	54300018 	ldrtpl	r0, [r0], #-24
    34a0:	01300019 	teqeq	r0, r9, lsl r0
    34a4:	07ea1c97 	undefined instruction 0x07ea1c97
    34a8:	f51c0000 	undefined instruction 0xf51c0000
    34ac:	2a000007 	bcs	34d0 <DISABLE_IRQ+0x3450>
    34b0:	300018d0 	ldrdcc	r1, [r0], -r0
    34b4:	30001954 	andcc	r1, r0, r4, asr r9
    34b8:	00080029 	andeq	r0, r8, r9, lsr #32
    34bc:	00135700 	andseq	r5, r3, r0, lsl #14
    34c0:	00000000 	andeq	r0, r0, r0
    34c4:	8f2b0000 	svchi	0x002b0000
    34c8:	0c000003 	stceq	0, cr0, [r0], {3}
    34cc:	0006b94a 	andeq	fp, r6, sl, asr #18
    34d0:	2b010100 	blcs	438d8 <DISABLE_IRQ+0x43858>
    34d4:	00000e50 	andeq	r0, r0, r0, asr lr
    34d8:	0045510c 	subeq	r5, r5, ip, lsl #2
    34dc:	01010000 	tsteq	r1, r0
    34e0:	000d852b 	andeq	r8, sp, fp, lsr #10
    34e4:	45520c00 	ldrbmi	r0, [r2, #-3072]	; 0xc00
    34e8:	01000000 	tsteq	r0, r0
    34ec:	0b0f0001 	bleq	3c34f8 <DISABLE_IRQ+0x3c3478>
    34f0:	00020000 	andeq	r0, r2, r0
    34f4:	00000cc6 	andeq	r0, r0, r6, asr #25
    34f8:	004d0104 	subeq	r0, sp, r4, lsl #2
    34fc:	27010000 	strcs	r0, [r1, -r0]
    3500:	63000012 	movwvs	r0, #18
    3504:	70000000 	andvc	r0, r0, r0
    3508:	7c300019 	ldcvc	0, cr0, [r0], #-100	; 0xffffff9c
    350c:	2f300022 	svccs	0x00300022
    3510:	0200000b 	andeq	r0, r0, #11
    3514:	00000564 	andeq	r0, r0, r4, ror #10
    3518:	01032103 	tsteq	r3, r3, lsl #2
    351c:	0000a006 	andeq	sl, r0, r6
    3520:	0ee80400 	cdpeq	4, 14, cr0, cr8, cr0, {0}
    3524:	23030000 	movwcs	r0, #12288	; 0x3000
    3528:	0000003e 	andeq	r0, r0, lr, lsr r0
    352c:	9e080103 	adflse	f0, f0, f3
    3530:	04000000 	streq	r0, [r0]
    3534:	000004f7 	strdeq	r0, [r0], -r7
    3538:	003e2403 	eorseq	r2, lr, r3, lsl #8
    353c:	fb040000 	blx	103546 <DISABLE_IRQ+0x1034c6>
    3540:	0300000a 	movweq	r0, #10
    3544:	00005b26 	andeq	r5, r0, r6, lsr #22
    3548:	07020300 	streq	r0, [r2, -r0, lsl #6]
    354c:	0000008b 	andeq	r0, r0, fp, lsl #1
    3550:	59050203 	stmdbpl	r5, {r0, r1, r9}
    3554:	04000000 	streq	r0, [r0]
    3558:	00000338 	andeq	r0, r0, r8, lsr r3
    355c:	00742803 	rsbseq	r2, r4, r3, lsl #16
    3560:	04030000 	streq	r0, [r3]
    3564:	00003707 	andeq	r3, r0, r7, lsl #14
    3568:	05040500 	streq	r0, [r4, #-1280]	; 0x500
    356c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    3570:	00050803 	andeq	r0, r5, r3, lsl #16
    3574:	03000000 	movweq	r0, #0
    3578:	002d0708 	eoreq	r0, sp, r8, lsl #14
    357c:	9f040000 	svcls	0x00040000
    3580:	03000003 	movweq	r0, #3
    3584:	0000742d 	andeq	r7, r0, sp, lsr #8
    3588:	01320400 	teqeq	r2, r0, lsl #8
    358c:	22040000 	andcs	r0, r4, #0
    3590:	00000074 	andeq	r0, r0, r4, ror r0
    3594:	000a2704 	andeq	r2, sl, r4, lsl #14
    3598:	692a0500 	stmdbvs	sl!, {r8, sl}
    359c:	04000000 	streq	r0, [r0]
    35a0:	00000829 	andeq	r0, r0, r9, lsr #16
    35a4:	00692c05 	rsbeq	r2, r9, r5, lsl #24
    35a8:	04060000 	streq	r0, [r6]
    35ac:	02614306 	rsbeq	r4, r1, #402653184	; 0x18000000
    35b0:	b5070000 	strlt	r0, [r7]
    35b4:	0000000b 	andeq	r0, r0, fp
    35b8:	000b6e07 	andeq	r6, fp, r7, lsl #28
    35bc:	aa070100 	bge	1c39c4 <DISABLE_IRQ+0x1c3944>
    35c0:	02000003 	andeq	r0, r0, #3
    35c4:	00092107 	andeq	r2, r9, r7, lsl #2
    35c8:	35070300 	strcc	r0, [r7, #-768]	; 0x300
    35cc:	04000006 	streq	r0, [r0], #-6
    35d0:	000a3507 	andeq	r3, sl, r7, lsl #10
    35d4:	d4070500 	strle	r0, [r7], #-1280	; 0x500
    35d8:	0600000a 	streq	r0, [r0], -sl
    35dc:	0002ac07 	andeq	sl, r2, r7, lsl #24
    35e0:	e3070700 	movw	r0, #30464	; 0x7700
    35e4:	08000006 	stmdaeq	r0, {r1, r2}
    35e8:	0001ee07 	andeq	lr, r1, r7, lsl #28
    35ec:	cd070900 	stcgt	9, cr0, [r7]
    35f0:	0a000008 	beq	3618 <DISABLE_IRQ+0x3598>
    35f4:	000ba107 	andeq	sl, fp, r7, lsl #2
    35f8:	80070b00 	andhi	r0, r7, r0, lsl #22
    35fc:	0c000004 	stceq	0, cr0, [r0], {4}
    3600:	0008bc07 	andeq	fp, r8, r7, lsl #24
    3604:	05070d00 	streq	r0, [r7, #-3328]	; 0xd00
    3608:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
    360c:	0006d007 	andeq	sp, r6, r7
    3610:	40070f00 	andmi	r0, r7, r0, lsl #30
    3614:	10000003 	andne	r0, r0, r3
    3618:	00096a07 	andeq	r6, r9, r7, lsl #20
    361c:	39071100 	stmdbcc	r7, {r8, ip}
    3620:	1200000b 	andne	r0, r0, #11
    3624:	00060e07 	andeq	r0, r6, r7, lsl #28
    3628:	be071300 	cdplt	3, 0, cr1, cr7, cr0, {0}
    362c:	14000002 	strne	r0, [r0], #-2
    3630:	00069007 	andeq	r9, r6, r7
    3634:	e5071500 	str	r1, [r7, #-1280]	; 0x500
    3638:	16000008 	strne	r0, [r0], -r8
    363c:	0002d007 	andeq	sp, r2, r7
    3640:	0a071700 	beq	1c9248 <DISABLE_IRQ+0x1c91c8>
    3644:	18000009 	stmdane	r0, {r0, r3}
    3648:	00021507 	andeq	r1, r2, r7, lsl #10
    364c:	76071900 	strvc	r1, [r7], -r0, lsl #18
    3650:	1a000007 	bne	3674 <DISABLE_IRQ+0x35f4>
    3654:	0002f007 	andeq	pc, r2, r7
    3658:	c1071b00 	tstgt	r7, r0, lsl #22
    365c:	1c00000b 	stcne	0, cr0, [r0], {11}
    3660:	00040507 	andeq	r0, r4, r7, lsl #10
    3664:	10071d00 	andne	r1, r7, r0, lsl #26
    3668:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
    366c:	00093207 	andeq	r3, r9, r7, lsl #4
    3670:	67071f00 	strvs	r1, [r7, -r0, lsl #30]
    3674:	20000002 	andcs	r0, r0, r2
    3678:	0005b107 	andeq	fp, r5, r7, lsl #2
    367c:	44072100 	strmi	r2, [r7], #-256	; 0x100
    3680:	22000006 	andcs	r0, r0, #6
    3684:	0007ff07 	andeq	pc, r7, r7, lsl #30
    3688:	ba072300 	blt	1cc290 <DISABLE_IRQ+0x1cc210>
    368c:	24000003 	strcs	r0, [r0], #-3
    3690:	00089907 	andeq	r9, r8, r7, lsl #18
    3694:	4b072500 	blmi	1cca9c <DISABLE_IRQ+0x1cca1c>
    3698:	2600000b 	strcs	r0, [r0], -fp
    369c:	00088307 	andeq	r8, r8, r7, lsl #6
    36a0:	3e072700 	cdpcc	7, 0, cr2, cr7, cr0, {0}
    36a4:	28000002 	stmdacs	r0, {r1}
    36a8:	0009b707 	andeq	fp, r9, r7, lsl #14
    36ac:	e5072900 	str	r2, [r7, #-2304]	; 0x900
    36b0:	2a00000a 	bcs	36e0 <DISABLE_IRQ+0x3660>
    36b4:	000a8707 	andeq	r8, sl, r7, lsl #14
    36b8:	48072b00 	stmdami	r7, {r8, r9, fp, sp}
    36bc:	2c000009 	stccs	0, cr0, [r0], {9}
    36c0:	0009f507 	andeq	pc, r9, r7, lsl #10
    36c4:	c7072d00 	strgt	r2, [r7, -r0, lsl #26]
    36c8:	2e000009 	cdpcs	0, 0, cr0, cr0, cr9, {0}
    36cc:	0003cf07 	andeq	ip, r3, r7, lsl #30
    36d0:	a7072f00 	strge	r2, [r7, -r0, lsl #30]
    36d4:	30000006 	andcc	r0, r0, r6
    36d8:	00041307 	andeq	r1, r4, r7, lsl #6
    36dc:	89073100 	stmdbhi	r7, {r8, ip, sp}
    36e0:	32000009 	andcc	r0, r0, #9
    36e4:	00035207 	andeq	r5, r3, r7, lsl #4
    36e8:	fd073300 	stc2	3, cr3, [r7]
    36ec:	34000005 	strcc	r0, [r0], #-5
    36f0:	000bd507 	andeq	sp, fp, r7, lsl #10
    36f4:	e1073500 	tst	r7, r0, lsl #10
    36f8:	36000004 	strcc	r0, [r0], -r4
    36fc:	0007a807 	andeq	sl, r7, r7, lsl #16
    3700:	92073700 	andls	r3, r7, #0
    3704:	38000007 	stmdacc	r0, {r0, r1, r2}
    3708:	00031607 	andeq	r1, r3, r7, lsl #12
    370c:	f3073900 	vmls.i8	d3, d7, d0
    3710:	3a000006 	bcc	3730 <DISABLE_IRQ+0x36b0>
    3714:	0003e207 	andeq	lr, r3, r7, lsl #4
    3718:	bc073b00 	stclt	11, cr3, [r7], {0}
    371c:	3c000006 	stccc	0, cr0, [r0], {6}
    3720:	00050f07 	andeq	r0, r5, r7, lsl #30
    3724:	6d073d00 	stcvs	13, cr3, [r7]
    3728:	3e000005 	cdpcc	0, 0, cr0, cr0, cr5, {0}
    372c:	0004cb07 	andeq	ip, r4, r7, lsl #22
    3730:	6e073f00 	cdpvs	15, 0, cr3, cr7, cr0, {0}
    3734:	c0000003 	andgt	r0, r0, r3
    3738:	058b0700 	streq	r0, [fp, #1792]	; 0x700
    373c:	00c10000 	sbceq	r0, r1, r0
    3740:	00083707 	andeq	r3, r8, r7, lsl #14
    3744:	0700c200 	streq	ip, [r0, -r0, lsl #4]
    3748:	00000674 	andeq	r0, r0, r4, ror r6
    374c:	060000c3 	streq	r0, [r0], -r3, asr #1
    3750:	b2b50604 	adcslt	r0, r5, #4194304	; 0x400000
    3754:	07000002 	streq	r0, [r0, -r2]
    3758:	000009e4 	andeq	r0, r0, r4, ror #19
    375c:	04570711 	ldrbeq	r0, [r7], #-1809	; 0x711
    3760:	07120000 	ldreq	r0, [r2, -r0]
    3764:	000001db 	ldrdeq	r0, [r0], -fp
    3768:	07c30713 	bfieq	r0, r3, (invalid: 14:3)
    376c:	07140000 	ldreq	r0, [r4, -r0]
    3770:	00000733 	andeq	r0, r0, r3, lsr r7
    3774:	0a440715 	beq	11053d0 <MEM_SIZE+0x9053d0>
    3778:	07160000 	ldreq	r0, [r6, -r0]
    377c:	00000b8e 	andeq	r0, r0, lr, lsl #23
    3780:	05c90717 	strbeq	r0, [r9, #1815]	; 0x717
    3784:	07180000 	ldreq	r0, [r8, -r0]
    3788:	000008a9 	andeq	r0, r0, r9, lsr #17
    378c:	08500719 	ldmdaeq	r0, {r0, r3, r4, r8, r9, sl}^
    3790:	071a0000 	ldreq	r0, [sl, -r0]
    3794:	00000717 	andeq	r0, r0, r7, lsl r7
    3798:	0b1b071b 	bleq	6c540c <DISABLE_IRQ+0x6c538c>
    379c:	001c0000 	andseq	r0, ip, r0
    37a0:	000c0908 	andeq	r0, ip, r8, lsl #18
    37a4:	23020800 	movwcs	r0, #10240	; 0x2800
    37a8:	000002db 	ldrdeq	r0, [r0], -fp
    37ac:	00031109 	andeq	r1, r3, r9, lsl #2
    37b0:	db240200 	blle	903fb8 <MEM_SIZE+0x103fb8>
    37b4:	02000002 	andeq	r0, r0, #2
    37b8:	81090023 	tsthi	r9, r3, lsr #32
    37bc:	02000002 	andeq	r0, r0, #2
    37c0:	0002db25 	andeq	sp, r2, r5, lsr #22
    37c4:	04230200 	strteq	r0, [r3], #-512	; 0x200
    37c8:	b2040a00 	andlt	r0, r4, #0
    37cc:	04000002 	streq	r0, [r0], #-2
    37d0:	00000c09 	andeq	r0, r0, r9, lsl #24
    37d4:	02b22602 	adcseq	r2, r2, #2097152	; 0x200000
    37d8:	5c080000 	stcpl	0, cr0, [r8], {0}
    37dc:	10000006 	andne	r0, r0, r6
    37e0:	03312f07 	teqeq	r1, #28
    37e4:	c9090000 	stmdbgt	r9, {}
    37e8:	0700000a 	streq	r0, [r0, -sl]
    37ec:	0002e131 	andeq	lr, r2, r1, lsr r1
    37f0:	00230200 	eoreq	r0, r3, r0, lsl #4
    37f4:	0008e009 	andeq	lr, r8, r9
    37f8:	31320700 	teqcc	r2, r0, lsl #14
    37fc:	02000003 	andeq	r0, r0, #3
    3800:	00090823 	andeq	r0, r9, r3, lsr #16
    3804:	07000009 	streq	r0, [r0, -r9]
    3808:	00004533 	andeq	r4, r0, r3, lsr r5
    380c:	0c230200 	sfmeq	f0, 4, [r3]	; (stceq 2, cr0, [r3])
    3810:	00042709 	andeq	r2, r4, r9, lsl #14
    3814:	45340700 	ldrmi	r0, [r4, #-1792]!	; 0x700
    3818:	02000000 	andeq	r0, r0, #0
    381c:	0a000d23 	beq	6cb0 <DISABLE_IRQ+0x6c30>
    3820:	00004504 	andeq	r4, r0, r4, lsl #10
    3824:	065c0400 	ldrbeq	r0, [ip], -r0, lsl #8
    3828:	36070000 	strcc	r0, [r7], -r0
    382c:	000002ec 	andeq	r0, r0, ip, ror #5
    3830:	00099f08 	andeq	r9, r9, r8, lsl #30
    3834:	3a076c00 	bcc	1de83c <DISABLE_IRQ+0x1de7bc>
    3838:	000004d7 	ldrdeq	r0, [r0], -r7
    383c:	00148109 	andseq	r8, r4, r9, lsl #2
    3840:	d73b0700 	ldrle	r0, [fp, -r0, lsl #14]!
    3844:	02000004 	andeq	r0, r0, #4
    3848:	4d090023 	stcmi	0, cr0, [r9, #-140]	; 0xffffff74
    384c:	07000004 	streq	r0, [r0, -r4]
    3850:	0002e141 	andeq	lr, r2, r1, asr #2
    3854:	04230200 	strteq	r0, [r3], #-512	; 0x200
    3858:	00055209 	andeq	r5, r5, r9, lsl #4
    385c:	dd450700 	stclle	7, cr0, [r5]
    3860:	02000004 	andeq	r0, r0, #4
    3864:	ef090c23 	svc	0x00090c23
    3868:	0700001a 	smladeq	r0, sl, r0, r0
    386c:	0000694b 	andeq	r6, r0, fp, asr #18
    3870:	10230200 	eorne	r0, r3, r0, lsl #4
    3874:	00087809 	andeq	r7, r8, r9, lsl #16
    3878:	694c0700 	stmdbvs	ip, {r8, r9, sl}^
    387c:	02000000 	andeq	r0, r0, #0
    3880:	35091423 	strcc	r1, [r9, #-1059]	; 0x423
    3884:	0700001d 	smladeq	r0, sp, r0, r0
    3888:	0000454d 	andeq	r4, r0, sp, asr #10
    388c:	18230200 	stmdane	r3!, {r9}
    3890:	001e5a09 	andseq	r5, lr, r9, lsl #20
    3894:	45510700 	ldrbmi	r0, [r1, #-1792]	; 0x700
    3898:	02000000 	andeq	r0, r0, #0
    389c:	64091923 	strvs	r1, [r9], #-2339	; 0x923
    38a0:	07000003 	streq	r0, [r0, -r3]
    38a4:	00004553 	andeq	r4, r0, r3, asr r5
    38a8:	1a230200 	bne	8c40b0 <MEM_SIZE+0xc40b0>
    38ac:	00043f09 	andeq	r3, r4, r9, lsl #30
    38b0:	45560700 	ldrbmi	r0, [r6, #-1792]	; 0x700
    38b4:	02000000 	andeq	r0, r0, #0
    38b8:	ad091b23 	vstrge	d1, [r9, #-140]	; 0xffffff74
    38bc:	0700000b 	streq	r0, [r0, -fp]
    38c0:	0005515a 	andeq	r5, r5, sl, asr r1
    38c4:	1c230200 	sfmne	f0, 4, [r3]	; (stcne 2, cr0, [r3])
    38c8:	000bf809 	andeq	pc, fp, r9, lsl #16
    38cc:	e15f0700 	cmp	pc, r0, lsl #14
    38d0:	02000002 	andeq	r0, r0, #2
    38d4:	03092023 	movweq	r2, #36899	; 0x9023
    38d8:	0700000b 	streq	r0, [r0, -fp]
    38dc:	00006963 	andeq	r6, r0, r3, ror #18
    38e0:	28230200 	stmdacs	r3!, {r9}
    38e4:	00062509 	andeq	r2, r6, r9, lsl #10
    38e8:	57650700 	strbpl	r0, [r5, -r0, lsl #14]!
    38ec:	02000005 	andeq	r0, r0, #5
    38f0:	6e092c23 	cdpvs	12, 0, cr2, cr9, cr3, {1}
    38f4:	07000008 	streq	r0, [r0, -r8]
    38f8:	0002e166 	andeq	lr, r2, r6, ror #2
    38fc:	30230200 	eorcc	r0, r3, r0, lsl #4
    3900:	000c0e09 	andeq	r0, ip, r9, lsl #28
    3904:	a6680700 	strbtge	r0, [r8], -r0, lsl #14
    3908:	02000000 	andeq	r0, r0, #0
    390c:	f3093823 	vsub.i8	d3, d9, d19
    3910:	07000007 	streq	r0, [r0, -r7]
    3914:	0000a669 	andeq	sl, r0, r9, ror #12
    3918:	3c230200 	sfmcc	f0, 4, [r3]	; (stccc 2, cr0, [r3])
    391c:	0005a709 	andeq	sl, r5, r9, lsl #14
    3920:	5d6b0700 	stclpl	7, cr0, [fp]
    3924:	02000005 	andeq	r0, r0, #5
    3928:	6d0b4023 	stcvs	0, cr4, [fp, #-140]	; 0xffffff74
    392c:	07006773 	smlsdxeq	r0, r3, r7, r6
    3930:	0004d76d 	andeq	sp, r4, sp, ror #14
    3934:	44230200 	strtmi	r0, [r3], #-512	; 0x200
    3938:	00163009 	andseq	r3, r6, r9
    393c:	b1700700 	cmnlt	r0, r0, lsl #14
    3940:	02000000 	andeq	r0, r0, #0
    3944:	db094823 	blle	2559d8 <DISABLE_IRQ+0x255958>
    3948:	07000008 	streq	r0, [r0, -r8]
    394c:	00033173 	andeq	r3, r3, r3, ror r1
    3950:	4c230200 	sfmmi	f0, 4, [r3]	; (stcmi 2, cr0, [r3])
    3954:	0009ac09 	andeq	sl, r9, r9, lsl #24
    3958:	45750700 	ldrbmi	r0, [r5, #-1792]!	; 0x700
    395c:	02000000 	andeq	r0, r0, #0
    3960:	e6095023 	str	r5, [r9], -r3, lsr #32
    3964:	07000007 	streq	r0, [r0, -r7]
    3968:	00004576 	andeq	r4, r0, r6, ror r5
    396c:	51230200 	teqpl	r3, r0, lsl #4
    3970:	00053d09 	andeq	r3, r5, r9, lsl #26
    3974:	63790700 	cmnvs	r9, #0
    3978:	02000005 	andeq	r0, r0, #5
    397c:	b5095423 	strlt	r5, [r9, #-1059]	; 0x423
    3980:	0700000a 	streq	r0, [r0, -sl]
    3984:	0005e67c 	andeq	lr, r5, ip, ror r6
    3988:	58230200 	stmdapl	r3!, {r9}
    398c:	00022b09 	andeq	r2, r2, r9, lsl #22
    3990:	23800700 	orrcs	r0, r0, #0
    3994:	02000006 	andeq	r0, r0, #6
    3998:	ad095c23 	stcge	12, cr5, [r9, #-140]	; 0xffffff74
    399c:	07000004 	streq	r0, [r0, -r4]
    39a0:	00004584 	andeq	r4, r0, r4, lsl #11
    39a4:	60230200 	eorvs	r0, r3, r0, lsl #4
    39a8:	00025509 	andeq	r5, r2, r9, lsl #10
    39ac:	69850700 	stmibvs	r5, {r8, r9, sl}
    39b0:	02000000 	andeq	r0, r0, #0
    39b4:	5a096423 	bpl	25ca48 <DISABLE_IRQ+0x25c9c8>
    39b8:	07000007 	streq	r0, [r0, -r7]
    39bc:	0004d786 	andeq	sp, r4, r6, lsl #15
    39c0:	68230200 	stmdavs	r3!, {r9}
    39c4:	25040a00 	strcs	r0, [r4, #-2560]	; 0xa00
    39c8:	0c000000 	stceq	0, cr0, [r0], {0}
    39cc:	000004d7 	ldrdeq	r0, [r0], -r7
    39d0:	000004ed 	andeq	r0, r0, sp, ror #9
    39d4:	0004ed0d 	andeq	lr, r4, sp, lsl #26
    39d8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    39dc:	2f080704 	svccs	0x00080704
    39e0:	1c00000b 	stcne	0, cr0, [r0], {11}
    39e4:	05515a07 	ldrbeq	r5, [r1, #-2567]	; 0xa07
    39e8:	36090000 	strcc	r0, [r9], -r0
    39ec:	08000005 	stmdaeq	r0, {r0, r2}
    39f0:	00033727 	andeq	r3, r3, r7, lsr #14
    39f4:	00230200 	eoreq	r0, r3, r0, lsl #4
    39f8:	00086709 	andeq	r6, r8, r9, lsl #14
    39fc:	962a0800 	strtls	r0, [sl], -r0, lsl #16
    3a00:	02000006 	andeq	r0, r0, #6
    3a04:	ad091023 	stcge	0, cr1, [r9, #-140]	; 0xffffff74
    3a08:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    3a0c:	0005512c 	andeq	r5, r5, ip, lsr #2
    3a10:	14230200 	strtne	r0, [r3], #-512	; 0x200
    3a14:	0005f609 	andeq	pc, r5, r9, lsl #12
    3a18:	452e0800 	strmi	r0, [lr, #-2048]!	; 0x800
    3a1c:	02000000 	andeq	r0, r0, #0
    3a20:	73091823 	movwvc	r1, #38947	; 0x9823
    3a24:	08000004 	stmdaeq	r0, {r2}
    3a28:	0000452f 	andeq	r4, r0, pc, lsr #10
    3a2c:	19230200 	stmdbne	r3!, {r9}
    3a30:	00048e09 	andeq	r8, r4, r9, lsl #28
    3a34:	45300800 	ldrmi	r0, [r0, #-2048]!	; 0x800
    3a38:	02000000 	andeq	r0, r0, #0
    3a3c:	0a001a23 	beq	a2d0 <DISABLE_IRQ+0xa250>
    3a40:	0004f004 	andeq	pc, r4, r4
    3a44:	90040a00 	andls	r0, r4, r0, lsl #20
    3a48:	0a000000 	beq	3a50 <DISABLE_IRQ+0x39d0>
    3a4c:	0002e104 	andeq	lr, r2, r4, lsl #2
    3a50:	37040a00 	strcc	r0, [r4, -r0, lsl #20]
    3a54:	08000003 	stmdaeq	r0, {r0, r1}
    3a58:	0000074b 	andeq	r0, r0, fp, asr #14
    3a5c:	e67c072c 	ldrbt	r0, [ip], -ip, lsr #14
    3a60:	09000005 	stmdbeq	r0, {r0, r2}
    3a64:	00000536 	andeq	r0, r0, r6, lsr r5
    3a68:	03372e09 	teqeq	r7, #144	; 0x90
    3a6c:	23020000 	movwcs	r0, #8192	; 0x2000
    3a70:	07dd0900 	ldrbeq	r0, [sp, r0, lsl #18]
    3a74:	30090000 	andcc	r0, r9, r0
    3a78:	0000067e 	andeq	r0, r0, lr, ror r6
    3a7c:	09102302 	ldmdbeq	r0, {r1, r8, r9, sp}
    3a80:	000005e4 	andeq	r0, r0, r4, ror #11
    3a84:	00b13109 	adcseq	r3, r1, r9, lsl #2
    3a88:	23020000 	movwcs	r0, #8192	; 0x2000
    3a8c:	0b0e0914 	bleq	385ee4 <DISABLE_IRQ+0x385e64>
    3a90:	32090000 	andcc	r0, r9, #0
    3a94:	000000b1 	strheq	r0, [r0], -r1
    3a98:	09182302 	ldmdbeq	r8, {r1, r8, r9, sp}
    3a9c:	000005f0 	strdeq	r0, [r0], -r0
    3aa0:	067e3409 	ldrbteq	r3, [lr], -r9, lsl #8
    3aa4:	23020000 	movwcs	r0, #8192	; 0x2000
    3aa8:	014e091c 	cmpeq	lr, ip, lsl r9
    3aac:	35090000 	strcc	r0, [r9]
    3ab0:	0000067e 	andeq	r0, r0, lr, ror r6
    3ab4:	09202302 	stmdbeq	r0!, {r1, r8, r9, sp}
    3ab8:	00000527 	andeq	r0, r0, r7, lsr #10
    3abc:	00b13609 	adcseq	r3, r1, r9, lsl #12
    3ac0:	23020000 	movwcs	r0, #8192	; 0x2000
    3ac4:	049b0924 	ldreq	r0, [fp], #2340	; 0x924
    3ac8:	37090000 	strcc	r0, [r9, -r0]
    3acc:	000000b1 	strheq	r0, [r0], -r1
    3ad0:	00282302 	eoreq	r2, r8, r2, lsl #6
    3ad4:	0569040a 	strbeq	r0, [r9, #-1034]!	; 0x40a
    3ad8:	a7080000 	strge	r0, [r8, -r0]
    3adc:	1800000a 	stmdane	r0, {r1, r3}
    3ae0:	06238007 	strteq	r8, [r3], -r7
    3ae4:	36090000 	strcc	r0, [r9], -r0
    3ae8:	0a000005 	beq	3b04 <DISABLE_IRQ+0x3a84>
    3aec:	00033722 	andeq	r3, r3, r2, lsr #14
    3af0:	00230200 	eoreq	r0, r3, r0, lsl #4
    3af4:	00044709 	andeq	r4, r4, r9, lsl #14
    3af8:	69230a00 	stmdbvs	r3!, {r9, fp}
    3afc:	02000000 	andeq	r0, r0, #0
    3b00:	3f091023 	svccc	0x00091023
    3b04:	0a00001b 	beq	3b78 <DISABLE_IRQ+0x3af8>
    3b08:	00069024 	andeq	r9, r6, r4, lsr #32
    3b0c:	14230200 	strtne	r0, [r3], #-512	; 0x200
    3b10:	ec040a00 	stc	10, cr0, [r4], {0}
    3b14:	04000005 	streq	r0, [r0], #-5
    3b18:	0000099f 	muleq	r0, pc, r9
    3b1c:	03428907 	movteq	r8, #10503	; 0x2907
    3b20:	61080000 	tstvs	r8, r0
    3b24:	0c00000b 	stceq	0, cr0, [r0], {11}
    3b28:	066b2109 	strbteq	r2, [fp], -r9, lsl #2
    3b2c:	11090000 	tstne	r9, r0
    3b30:	09000003 	stmdbeq	r0, {r0, r1}
    3b34:	00066b23 	andeq	r6, r6, r3, lsr #22
    3b38:	00230200 	eoreq	r0, r3, r0, lsl #4
    3b3c:	0005dc09 	andeq	sp, r5, r9, lsl #24
    3b40:	71240900 	teqvc	r4, r0, lsl #18
    3b44:	02000006 	andeq	r0, r0, #6
    3b48:	30090423 	andcc	r0, r9, r3, lsr #8
    3b4c:	09000016 	stmdbeq	r0, {r1, r2, r4}
    3b50:	0000b125 	andeq	fp, r0, r5, lsr #2
    3b54:	08230200 	stmdaeq	r3!, {r9}
    3b58:	34040a00 	strcc	r0, [r4], #-2560	; 0xa00
    3b5c:	0f000006 	svceq	0x00000006
    3b60:	0b610404 	bleq	1844b78 <MEM_SIZE+0x1044b78>
    3b64:	27090000 	strcs	r0, [r9, -r0]
    3b68:	00000634 	andeq	r0, r0, r4, lsr r6
    3b6c:	0673040a 	ldrbteq	r0, [r3], -sl, lsl #8
    3b70:	01100000 	tsteq	r0, r0
    3b74:	00000690 	muleq	r0, r0, r6
    3b78:	00062311 	andeq	r2, r6, r1, lsl r3
    3b7c:	040a0000 	streq	r0, [sl]
    3b80:	00000684 	andeq	r0, r0, r4, lsl #13
    3b84:	0629040a 	strteq	r0, [r9], -sl, lsl #8
    3b88:	2f040000 	svccs	0x00040000
    3b8c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    3b90:	0004f032 	andeq	pc, r4, r2, lsr r0
    3b94:	0e601200 	cdpeq	2, 6, cr1, cr0, cr0, {0}
    3b98:	38020000 	stmdacc	r2, {}
    3b9c:	00003301 	andeq	r3, r0, r1, lsl #6
    3ba0:	06c40300 	strbeq	r0, [r4], r0, lsl #6
    3ba4:	44130000 	ldrmi	r0, [r3]
    3ba8:	02000001 	andeq	r0, r0, #1
    3bac:	00055d38 	andeq	r5, r5, r8, lsr sp
    3bb0:	47140000 	ldrmi	r0, [r4, -r0]
    3bb4:	02000022 	andeq	r0, r0, #34	; 0x22
    3bb8:	dd03012f 	stfles	f0, [r3, #-188]	; 0xffffff44
    3bbc:	13000006 	movwne	r0, #6
    3bc0:	00000da3 	andeq	r0, r0, r3, lsr #27
    3bc4:	055d2f02 	ldrbeq	r2, [sp, #-3842]	; 0xf02
    3bc8:	15000000 	strne	r0, [r0]
    3bcc:	00123301 	andseq	r3, r2, r1, lsl #6
    3bd0:	01700100 	cmneq	r0, r0, lsl #2
    3bd4:	00000045 	andeq	r0, r0, r5, asr #32
    3bd8:	30001970 	andcc	r1, r0, r0, ror r9
    3bdc:	30001a34 	andcc	r1, r0, r4, lsr sl
    3be0:	0000136a 	andeq	r1, r0, sl, ror #6
    3be4:	0000078b 	andeq	r0, r0, fp, lsl #15
    3be8:	62637416 	rsbvs	r7, r3, #369098752	; 0x16000000
    3bec:	96700100 	ldrbtls	r0, [r0], -r0, lsl #2
    3bf0:	89000006 	stmdbhi	r0, {r1, r2}
    3bf4:	17000013 	smladne	r0, r3, r0, r0
    3bf8:	00001e5a 	andeq	r1, r0, sl, asr lr
    3bfc:	00457001 	subeq	r7, r5, r1
    3c00:	51010000 	tstpl	r1, r0
    3c04:	00126517 	andseq	r6, r2, r7, lsl r5
    3c08:	8b700100 	blhi	1c04010 <MEM_SIZE+0x1404010>
    3c0c:	01000007 	tsteq	r0, r7
    3c10:	12cb1852 	sbcne	r1, fp, #5373952	; 0x520000
    3c14:	72010000 	andvc	r0, r1, #0
    3c18:	00000791 	muleq	r0, r1, r7
    3c1c:	000013a7 	andeq	r1, r0, r7, lsr #7
    3c20:	00122018 	andseq	r2, r2, r8, lsl r0
    3c24:	45730100 	ldrbmi	r0, [r3, #-256]!	; 0x100
    3c28:	c5000000 	strgt	r0, [r0]
    3c2c:	18000013 	stmdane	r0, {r0, r1, r4}
    3c30:	000012be 	undefined instruction 0x000012be
    3c34:	00457301 	subeq	r7, r5, r1, lsl #6
    3c38:	13d80000 	bicsne	r0, r8, #0
    3c3c:	70190000 	andsvc	r0, r9, r0
    3c40:	01006972 	tsteq	r0, r2, ror r9
    3c44:	00004573 	andeq	r4, r0, r3, ror r5
    3c48:	0013f600 	andseq	pc, r3, r0, lsl #12
    3c4c:	12961a00 	addsne	r1, r6, #0
    3c50:	74010000 	strvc	r0, [r1]
    3c54:	00000696 	muleq	r0, r6, r6
    3c58:	000d9d1a 	andeq	r9, sp, sl, lsl sp
    3c5c:	5d750100 	ldfple	f0, [r5]
    3c60:	1b000005 	blne	3c7c <DISABLE_IRQ+0x3bfc>
    3c64:	000006a7 	andeq	r0, r0, r7, lsr #13
    3c68:	300019e0 	andcc	r1, r0, r0, ror #19
    3c6c:	300019e4 	andcc	r1, r0, r4, ror #19
    3c70:	b81c9b01 	ldmdalt	ip, {r0, r8, r9, fp, ip, pc}
    3c74:	00000006 	andeq	r0, r0, r6
    3c78:	50040a00 	andpl	r0, r4, r0, lsl #20
    3c7c:	0a000000 	beq	3c84 <DISABLE_IRQ+0x3c04>
    3c80:	00069c04 	andeq	r9, r6, r4, lsl #24
    3c84:	12d11d00 	sbcsne	r1, r1, #0
    3c88:	c1010000 	tstgt	r1, r0
    3c8c:	001a3401 	andseq	r3, sl, r1, lsl #8
    3c90:	001adc30 	andseq	sp, sl, r0, lsr ip
    3c94:	00140930 	andseq	r0, r4, r0, lsr r9
    3c98:	00082f00 	andeq	r2, r8, r0, lsl #30
    3c9c:	63741600 	cmnvs	r4, #0
    3ca0:	c1010062 	tstgt	r1, r2, rrx
    3ca4:	00000696 	muleq	r0, r6, r6
    3ca8:	00001428 	andeq	r1, r0, r8, lsr #8
    3cac:	0011e61e 	andseq	lr, r1, lr, lsl r6
    3cb0:	91c10100 	bicls	r0, r1, r0, lsl #2
    3cb4:	46000007 	strmi	r0, [r0], -r7
    3cb8:	1a000014 	bne	3d10 <DISABLE_IRQ+0x3c90>
    3cbc:	000012cb 	andeq	r1, r0, fp, asr #5
    3cc0:	0791c301 	ldreq	ip, [r1, r1, lsl #6]
    3cc4:	f6180000 	undefined instruction 0xf6180000
    3cc8:	01000011 	tsteq	r0, r1, lsl r0
    3ccc:	00082fc3 	andeq	r2, r8, r3, asr #31
    3cd0:	00146400 	andseq	r6, r4, r0, lsl #8
    3cd4:	12411f00 	subne	r1, r1, #0
    3cd8:	c4010000 	strgt	r0, [r1]
    3cdc:	00000045 	andeq	r0, r0, r5, asr #32
    3ce0:	70195401 	andsvc	r5, r9, r1, lsl #8
    3ce4:	01006972 	tsteq	r0, r2, ror r9
    3ce8:	000045c4 	andeq	r4, r0, r4, asr #11
    3cec:	00149800 	andseq	r9, r4, r0, lsl #16
    3cf0:	12961a00 	addsne	r1, r6, #0
    3cf4:	c5010000 	strgt	r0, [r1]
    3cf8:	00000696 	muleq	r0, r6, r6
    3cfc:	000d9d1a 	andeq	r9, sp, sl, lsl sp
    3d00:	5dc60100 	stfple	f0, [r6]
    3d04:	1b000005 	blne	3d20 <DISABLE_IRQ+0x3ca0>
    3d08:	000006a7 	andeq	r0, r0, r7, lsr #13
    3d0c:	30001abc 	undefined instruction 0x30001abc
    3d10:	30001ac0 	andcc	r1, r0, r0, asr #21
    3d14:	b81cde01 	ldmdalt	ip, {r0, r9, sl, fp, ip, lr, pc}
    3d18:	00000006 	andeq	r0, r0, r6
    3d1c:	91040a00 	tstls	r4, r0, lsl #20
    3d20:	20000007 	andcs	r0, r0, r7
    3d24:	0011fb01 	andseq	pc, r1, r1, lsl #22
    3d28:	02880100 	addeq	r0, r8, #0
    3d2c:	00005001 	andeq	r5, r0, r1
    3d30:	001adc00 	andseq	sp, sl, r0, lsl #24
    3d34:	001bd430 	andseq	sp, fp, r0, lsr r4
    3d38:	0014b630 	andseq	fp, r4, r0, lsr r6
    3d3c:	00089200 	andeq	r9, r8, r0, lsl #4
    3d40:	12482100 	subne	r2, r8, #0
    3d44:	88010000 	stmdahi	r1, {}
    3d48:	00079102 	andeq	r9, r7, r2, lsl #2
    3d4c:	0014d500 	andseq	sp, r4, r0, lsl #10
    3d50:	0d9d2200 	lfmeq	f2, 4, [sp]	; (ldceq 2, cr2, [sp])
    3d54:	8a010000 	bhi	43d5c <DISABLE_IRQ+0x43cdc>
    3d58:	00055d02 	andeq	r5, r5, r2, lsl #26
    3d5c:	01182200 	tsteq	r8, r0, lsl #4
    3d60:	8c010000 	stchi	0, cr0, [r1], {0}
    3d64:	00009b02 	andeq	r9, r0, r2, lsl #22
    3d68:	06a72300 	strteq	r2, [r7], r0, lsl #6
    3d6c:	1b580000 	blne	1603d74 <MEM_SIZE+0xe03d74>
    3d70:	00e83000 	rsceq	r3, r8, r0
    3d74:	a7010000 	strge	r0, [r1, -r0]
    3d78:	06b81c02 	ldrteq	r1, [r8], r2, lsl #24
    3d7c:	00000000 	andeq	r0, r0, r0
    3d80:	12520124 	subsne	r0, r2, #9
    3d84:	27010000 	strcs	r0, [r1, -r0]
    3d88:	1bd40101 	blne	ff504194 <rEINTPEND+0xa95040ec>
    3d8c:	1c103000 	ldcne	0, cr3, [r0], {0}
    3d90:	5d013000 	stcpl	0, cr3, [r1]
    3d94:	000008db 	ldrdeq	r0, [r0], -fp
    3d98:	62637425 	rsbvs	r7, r3, #620756992	; 0x25000000
    3d9c:	01270100 	teqeq	r7, r0, lsl #2
    3da0:	00000696 	muleq	r0, r6, r6
    3da4:	000014f3 	strdeq	r1, [r0], -r3
    3da8:	0012cb26 	andseq	ip, r2, r6, lsr #22
    3dac:	01290100 	teqeq	r9, r0, lsl #2
    3db0:	00000791 	muleq	r0, r1, r7
    3db4:	00001506 	andeq	r1, r0, r6, lsl #10
    3db8:	00086726 	andeq	r6, r8, r6, lsr #14
    3dbc:	012a0100 	teqeq	sl, r0, lsl #2
    3dc0:	00000696 	muleq	r0, r6, r6
    3dc4:	00001519 	andeq	r1, r0, r9, lsl r5
    3dc8:	8a012700 	bhi	4d9d0 <DISABLE_IRQ+0x4d950>
    3dcc:	01000012 	tsteq	r0, r2, lsl r0
    3dd0:	1c1001fc 	ldfnes	f0, [r0], {252}	; 0xfc
    3dd4:	1c743000 	ldclne	0, cr3, [r4]
    3dd8:	152c3000 	strne	r3, [ip]!
    3ddc:	09310000 	ldmdbeq	r1!, {}
    3de0:	74160000 	ldrvc	r0, [r6]
    3de4:	01006263 	tsteq	r0, r3, ror #4
    3de8:	000696fc 	strdeq	r9, [r6], -ip
    3dec:	00154b00 	andseq	r4, r5, r0, lsl #22
    3df0:	11ef1e00 	mvnne	r1, r0, lsl #28
    3df4:	fc010000 	stc2	0, cr0, [r1], {0}
    3df8:	00000045 	andeq	r0, r0, r5, asr #32
    3dfc:	00001569 	andeq	r1, r0, r9, ror #10
    3e00:	0012cb18 	andseq	ip, r2, r8, lsl fp
    3e04:	91fe0100 	mvnsls	r0, r0, lsl #2
    3e08:	87000007 	strhi	r0, [r0, -r7]
    3e0c:	18000015 	stmdane	r0, {r0, r2, r4}
    3e10:	00000867 	andeq	r0, r0, r7, ror #16
    3e14:	0696ff01 	ldreq	pc, [r6], r1, lsl #30
    3e18:	159a0000 	ldrne	r0, [sl]
    3e1c:	28000000 	stmdacs	r0, {}
    3e20:	00120c01 	andseq	r0, r2, r1, lsl #24
    3e24:	02480100 	subeq	r0, r8, #0
    3e28:	001c7401 	andseq	r7, ip, r1, lsl #8
    3e2c:	001cfc30 	andseq	pc, ip, r0, lsr ip
    3e30:	0015c330 	andseq	ip, r5, r0, lsr r3
    3e34:	0009a800 	andeq	sl, r9, r0, lsl #16
    3e38:	63742500 	cmnvs	r4, #0
    3e3c:	48010062 	stmdami	r1, {r1, r5, r6}
    3e40:	00069602 	andeq	r9, r6, r2, lsl #12
    3e44:	0015e200 	andseq	lr, r5, r0, lsl #4
    3e48:	12cb2200 	sbcne	r2, fp, #0
    3e4c:	4a010000 	bmi	43e54 <DISABLE_IRQ+0x43dd4>
    3e50:	00079102 	andeq	r9, r7, r2, lsl #2
    3e54:	12c62600 	sbcne	r2, r6, #0
    3e58:	4a010000 	bmi	43e60 <DISABLE_IRQ+0x43de0>
    3e5c:	00079102 	andeq	r9, r7, r2, lsl #2
    3e60:	00160b00 	andseq	r0, r6, r0, lsl #22
    3e64:	12a72900 	adcne	r2, r7, #0
    3e68:	4b010000 	blmi	43e70 <DISABLE_IRQ+0x43df0>
    3e6c:	00069602 	andeq	r9, r6, r2, lsl #12
    3e70:	22570100 	subscs	r0, r7, #0
    3e74:	00000d9d 	muleq	r0, sp, sp
    3e78:	5d024c01 	stcpl	12, cr4, [r2, #-4]
    3e7c:	2a000005 	bcs	3e98 <DISABLE_IRQ+0x3e18>
    3e80:	000006a7 	andeq	r0, r0, r7, lsr #13
    3e84:	30001c98 	mulcc	r0, r8, ip
    3e88:	30001c9c 	mulcc	r0, ip, ip
    3e8c:	1c025401 	cfstrsne	mvf5, [r2], {1}
    3e90:	000006b8 	undefined instruction 0x000006b8
    3e94:	01200000 	teqeq	r0, r0
    3e98:	0000126b 	andeq	r1, r0, fp, ror #4
    3e9c:	0101e801 	tsteq	r1, r1, lsl #16
    3ea0:	00000050 	andeq	r0, r0, r0, asr r0
    3ea4:	30001cfc 	strdcc	r1, [r0], -ip
    3ea8:	30001f04 	andcc	r1, r0, r4, lsl #30
    3eac:	0000164a 	andeq	r1, r0, sl, asr #12
    3eb0:	00000a15 	andeq	r0, r0, r5, lsl sl
    3eb4:	00124821 	andseq	r4, r2, r1, lsr #16
    3eb8:	01e80100 	mvneq	r0, r0, lsl #2
    3ebc:	00000791 	muleq	r0, r1, r7
    3ec0:	00001669 	andeq	r1, r0, r9, ror #12
    3ec4:	000d9d22 	andeq	r9, sp, r2, lsr #26
    3ec8:	01eb0100 	mvneq	r0, r0, lsl #2
    3ecc:	0000055d 	andeq	r0, r0, sp, asr r5
    3ed0:	6263742b 	rsbvs	r7, r3, #721420288	; 0x2b000000
    3ed4:	01ec0100 	mvneq	r0, r0, lsl #2
    3ed8:	00000696 	muleq	r0, r6, r6
    3edc:	00001687 	andeq	r1, r0, r7, lsl #13
    3ee0:	00011822 	andeq	r1, r1, r2, lsr #16
    3ee4:	01ee0100 	mvneq	r0, r0, lsl #2
    3ee8:	0000009b 	muleq	r0, fp, r0
    3eec:	0006a72a 	andeq	sl, r6, sl, lsr #14
    3ef0:	001e1000 	andseq	r1, lr, r0
    3ef4:	001e1430 	andseq	r1, lr, r0, lsr r4
    3ef8:	021b0130 	andseq	r0, fp, #12
    3efc:	0006b81c 	andeq	fp, r6, ip, lsl r8
    3f00:	20000000 	andcs	r0, r0, r0
    3f04:	0012b001 	andseq	fp, r2, r1
    3f08:	015d0100 	cmpeq	sp, r0, lsl #2
    3f0c:	00005001 	andeq	r5, r0, r1
    3f10:	001f0400 	andseq	r0, pc, r0, lsl #8
    3f14:	0021dc30 	eoreq	sp, r1, r0, lsr ip
    3f18:	0016b030 	andseq	fp, r6, r0, lsr r0
    3f1c:	000a7c00 	andeq	r7, sl, r0, lsl #24
    3f20:	12482100 	subne	r2, r8, #0
    3f24:	5d010000 	stcpl	0, cr0, [r1]
    3f28:	00079101 	andeq	r9, r7, r1, lsl #2
    3f2c:	0016cf00 	andseq	ip, r6, r0, lsl #30
    3f30:	0dc12100 	stfeqe	f2, [r1]
    3f34:	5d010000 	stcpl	0, cr0, [r1]
    3f38:	0000a601 	andeq	sl, r0, r1, lsl #12
    3f3c:	0016ed00 	andseq	lr, r6, r0, lsl #26
    3f40:	0ecc2600 	cdpeq	6, 12, cr2, cr12, cr0, {0}
    3f44:	60010000 	andvs	r0, r1, r0
    3f48:	00005001 	andeq	r5, r0, r1
    3f4c:	00170b00 	andseq	r0, r7, r0, lsl #22
    3f50:	08672200 	stmdaeq	r7!, {r9, sp}^
    3f54:	61010000 	tstvs	r1, r0
    3f58:	00069601 	andeq	r9, r6, r1, lsl #12
    3f5c:	01182200 	tsteq	r8, r0, lsl #4
    3f60:	63010000 	movwvs	r0, #4096	; 0x1000
    3f64:	00009b01 	andeq	r9, r0, r1, lsl #22
    3f68:	01150000 	tsteq	r5, r0
    3f6c:	00001279 	andeq	r1, r0, r9, ror r2
    3f70:	50013301 	andpl	r3, r1, r1, lsl #6
    3f74:	dc000000 	stcle	0, cr0, [r0], {0}
    3f78:	7c300021 	ldcvc	0, cr0, [r0], #-132	; 0xffffff7c
    3f7c:	8c300022 	ldchi	0, cr0, [r0], #-136	; 0xffffff78
    3f80:	eb000017 	bl	3fe4 <DISABLE_IRQ+0x3f64>
    3f84:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    3f88:	00001248 	andeq	r1, r0, r8, asr #4
    3f8c:	07913301 	ldreq	r3, [r1, r1, lsl #6]
    3f90:	17b70000 	ldrne	r0, [r7, r0]!
    3f94:	6a1e0000 	bvs	783f9c <DISABLE_IRQ+0x783f1c>
    3f98:	01000004 	tsteq	r0, r4
    3f9c:	00033133 	andeq	r3, r3, r3, lsr r1
    3fa0:	0017d500 	andseq	sp, r7, r0, lsl #10
    3fa4:	05f61e00 	ldrbeq	r1, [r6, #3584]!	; 0xe00
    3fa8:	33010000 	movwcc	r0, #4096	; 0x1000
    3fac:	00000045 	andeq	r0, r0, r5, asr #32
    3fb0:	00001809 	andeq	r1, r0, r9, lsl #16
    3fb4:	0004731e 	andeq	r7, r4, lr, lsl r3
    3fb8:	45330100 	ldrmi	r0, [r3, #-256]!	; 0x100
    3fbc:	48000000 	stmdami	r0, {}
    3fc0:	1b000018 	blne	4028 <DISABLE_IRQ+0x3fa8>
    3fc4:	000006c4 	andeq	r0, r0, r4, asr #13
    3fc8:	30002218 	andcc	r2, r0, r8, lsl r2
    3fcc:	30002220 	andcc	r2, r0, r0, lsr #4
    3fd0:	d11c4501 	tstle	ip, r1, lsl #10
    3fd4:	00000006 	andeq	r0, r0, r6
    3fd8:	038f2c00 	orreq	r2, pc, #0
    3fdc:	4a0b0000 	bmi	2c3fe4 <DISABLE_IRQ+0x2c3f64>
    3fe0:	00000696 	muleq	r0, r6, r6
    3fe4:	502c0101 	eorpl	r0, ip, r1, lsl #2
    3fe8:	0b00000e 	bleq	4028 <DISABLE_IRQ+0x3fa8>
    3fec:	00004551 	andeq	r4, r0, r1, asr r5
    3ff0:	2c010100 	stfcss	f0, [r1], {0}
    3ff4:	00000d85 	andeq	r0, r0, r5, lsl #27
    3ff8:	0045520b 	subeq	r5, r5, fp, lsl #4
    3ffc:	01010000 	tsteq	r1, r0
    4000:	0008f700 	andeq	pc, r8, r0, lsl #14
    4004:	47000200 	strmi	r0, [r0, -r0, lsl #4]
    4008:	0400000f 	streq	r0, [r0], #-15
    400c:	00004d01 	andeq	r4, r0, r1, lsl #26
    4010:	133c0100 	teqne	ip, #0
    4014:	00630000 	rsbeq	r0, r3, r0
    4018:	227c0000 	rsbscs	r0, ip, #0
    401c:	227c3000 	rsbscs	r3, ip, #0
    4020:	0de53000 	stcleq	0, cr3, [r5]
    4024:	64020000 	strvs	r0, [r2]
    4028:	01000005 	tsteq	r0, r5
    402c:	06010321 	streq	r0, [r1], -r1, lsr #6
    4030:	000000a0 	andeq	r0, r0, r0, lsr #1
    4034:	9e080103 	adflse	f0, f0, f3
    4038:	04000000 	streq	r0, [r0]
    403c:	000004f7 	strdeq	r0, [r0], -r7
    4040:	00332401 	eorseq	r2, r3, r1, lsl #8
    4044:	fb040000 	blx	10404e <DISABLE_IRQ+0x103fce>
    4048:	0100000a 	tsteq	r0, sl
    404c:	00005026 	andeq	r5, r0, r6, lsr #32
    4050:	07020300 	streq	r0, [r2, -r0, lsl #6]
    4054:	0000008b 	andeq	r0, r0, fp, lsl #1
    4058:	59050203 	stmdbpl	r5, {r0, r1, r9}
    405c:	04000000 	streq	r0, [r0]
    4060:	00000338 	andeq	r0, r0, r8, lsr r3
    4064:	00692801 	rsbeq	r2, r9, r1, lsl #16
    4068:	04030000 	streq	r0, [r3]
    406c:	00003707 	andeq	r3, r0, r7, lsl #14
    4070:	05040500 	streq	r0, [r4, #-1280]	; 0x500
    4074:	00746e69 	rsbseq	r6, r4, r9, ror #28
    4078:	00050803 	andeq	r0, r5, r3, lsl #16
    407c:	03000000 	movweq	r0, #0
    4080:	002d0708 	eoreq	r0, sp, r8, lsl #14
    4084:	9f040000 	svcls	0x00040000
    4088:	01000003 	tsteq	r0, r3
    408c:	0000692d 	andeq	r6, r0, sp, lsr #18
    4090:	0a270400 	beq	9c5098 <MEM_SIZE+0x1c5098>
    4094:	2a020000 	bcs	8409c <DISABLE_IRQ+0x8401c>
    4098:	0000005e 	andeq	r0, r0, lr, asr r0
    409c:	00144b04 	andseq	r4, r4, r4, lsl #22
    40a0:	3a2b0200 	bcc	ac48a8 <MEM_SIZE+0x2c48a8>
    40a4:	04000000 	streq	r0, [r0]
    40a8:	00000829 	andeq	r0, r0, r9, lsr #16
    40ac:	005e2c02 	subseq	r2, lr, r2, lsl #24
    40b0:	09060000 	stmdbeq	r6, {}
    40b4:	0800000c 	stmdaeq	r0, {r2, r3}
    40b8:	00da2303 	sbcseq	r2, sl, r3, lsl #6
    40bc:	11070000 	tstne	r7, r0
    40c0:	03000003 	movweq	r0, #3
    40c4:	0000da24 	andeq	sp, r0, r4, lsr #20
    40c8:	00230200 	eoreq	r0, r3, r0, lsl #4
    40cc:	00028107 	andeq	r8, r2, r7, lsl #2
    40d0:	da250300 	ble	944cd8 <MEM_SIZE+0x144cd8>
    40d4:	02000000 	andeq	r0, r0, #0
    40d8:	08000423 	stmdaeq	r0, {r0, r1, r5, sl}
    40dc:	0000b104 	andeq	fp, r0, r4, lsl #2
    40e0:	0c090400 	cfstrseq	mvf0, [r9], {0}
    40e4:	26030000 	strcs	r0, [r3], -r0
    40e8:	000000b1 	strheq	r0, [r0], -r1
    40ec:	00065c06 	andeq	r5, r6, r6, lsl #24
    40f0:	2f041000 	svccs	0x00041000
    40f4:	00000130 	andeq	r0, r0, r0, lsr r1
    40f8:	000ac907 	andeq	ip, sl, r7, lsl #18
    40fc:	e0310400 	eors	r0, r1, r0, lsl #8
    4100:	02000000 	andeq	r0, r0, #0
    4104:	e0070023 	and	r0, r7, r3, lsr #32
    4108:	04000008 	streq	r0, [r0], #-8
    410c:	00013032 	andeq	r3, r1, r2, lsr r0
    4110:	08230200 	stmdaeq	r3!, {r9}
    4114:	00090007 	andeq	r0, r9, r7
    4118:	3a330400 	bcc	cc5120 <MEM_SIZE+0x4c5120>
    411c:	02000000 	andeq	r0, r0, #0
    4120:	27070c23 	strcs	r0, [r7, -r3, lsr #24]
    4124:	04000004 	streq	r0, [r0], #-4
    4128:	00003a34 	andeq	r3, r0, r4, lsr sl
    412c:	0d230200 	sfmeq	f0, 4, [r3]	; (stceq 2, cr0, [r3])
    4130:	3a040800 	bcc	106138 <DISABLE_IRQ+0x1060b8>
    4134:	04000000 	streq	r0, [r0]
    4138:	0000065c 	andeq	r0, r0, ip, asr r6
    413c:	00eb3604 	rsceq	r3, fp, r4, lsl #12
    4140:	9f060000 	svcls	0x00060000
    4144:	6c000009 	stcvs	0, cr0, [r0], {9}
    4148:	02d63a04 	sbcseq	r3, r6, #16384	; 0x4000
    414c:	81070000 	tsthi	r7, r0
    4150:	04000014 	streq	r0, [r0], #-20
    4154:	0002d63b 	andeq	sp, r2, fp, lsr r6
    4158:	00230200 	eoreq	r0, r3, r0, lsl #4
    415c:	00044d07 	andeq	r4, r4, r7, lsl #26
    4160:	e0410400 	sub	r0, r1, r0, lsl #8
    4164:	02000000 	andeq	r0, r0, #0
    4168:	52070423 	andpl	r0, r7, #587202560	; 0x23000000
    416c:	04000005 	streq	r0, [r0], #-5
    4170:	0002dc45 	andeq	sp, r2, r5, asr #24
    4174:	0c230200 	sfmeq	f0, 4, [r3]	; (stceq 2, cr0, [r3])
    4178:	001aef07 	andseq	lr, sl, r7, lsl #30
    417c:	5e4b0400 	cdppl	4, 4, cr0, cr11, cr0, {0}
    4180:	02000000 	andeq	r0, r0, #0
    4184:	78071023 	stmdavc	r7, {r0, r1, r5, ip}
    4188:	04000008 	streq	r0, [r0], #-8
    418c:	00005e4c 	andeq	r5, r0, ip, asr #28
    4190:	14230200 	strtne	r0, [r3], #-512	; 0x200
    4194:	001d3507 	andseq	r3, sp, r7, lsl #10
    4198:	3a4d0400 	bcc	13451a0 <MEM_SIZE+0xb451a0>
    419c:	02000000 	andeq	r0, r0, #0
    41a0:	5a071823 	bpl	1ca234 <DISABLE_IRQ+0x1ca1b4>
    41a4:	0400001e 	streq	r0, [r0], #-30
    41a8:	00003a51 	andeq	r3, r0, r1, asr sl
    41ac:	19230200 	stmdbne	r3!, {r9}
    41b0:	00036407 	andeq	r6, r3, r7, lsl #8
    41b4:	3a530400 	bcc	14c51bc <MEM_SIZE+0xcc51bc>
    41b8:	02000000 	andeq	r0, r0, #0
    41bc:	3f071a23 	svccc	0x00071a23
    41c0:	04000004 	streq	r0, [r0], #-4
    41c4:	00003a56 	andeq	r3, r0, r6, asr sl
    41c8:	1b230200 	blne	8c49d0 <MEM_SIZE+0xc49d0>
    41cc:	000bad07 	andeq	sl, fp, r7, lsl #26
    41d0:	505a0400 	subspl	r0, sl, r0, lsl #8
    41d4:	02000003 	andeq	r0, r0, #3
    41d8:	f8071c23 	undefined instruction 0xf8071c23
    41dc:	0400000b 	streq	r0, [r0], #-11
    41e0:	0000e05f 	andeq	lr, r0, pc, asr r0
    41e4:	20230200 	eorcs	r0, r3, r0, lsl #4
    41e8:	000b0307 	andeq	r0, fp, r7, lsl #6
    41ec:	5e630400 	cdppl	4, 6, cr0, cr3, cr0, {0}
    41f0:	02000000 	andeq	r0, r0, #0
    41f4:	25072823 	strcs	r2, [r7, #-2083]	; 0x823
    41f8:	04000006 	streq	r0, [r0], #-6
    41fc:	00035665 	andeq	r5, r3, r5, ror #12
    4200:	2c230200 	sfmcs	f0, 4, [r3]	; (stccs 2, cr0, [r3])
    4204:	00086e07 	andeq	r6, r8, r7, lsl #28
    4208:	e0660400 	rsb	r0, r6, r0, lsl #8
    420c:	02000000 	andeq	r0, r0, #0
    4210:	0e073023 	cdpeq	0, 0, cr3, cr7, cr3, {1}
    4214:	0400000c 	streq	r0, [r0], #-12
    4218:	00009068 	andeq	r9, r0, r8, rrx
    421c:	38230200 	stmdacc	r3!, {r9}
    4220:	0007f307 	andeq	pc, r7, r7, lsl #6
    4224:	90690400 	rsbls	r0, r9, r0, lsl #8
    4228:	02000000 	andeq	r0, r0, #0
    422c:	a7073c23 	strge	r3, [r7, -r3, lsr #24]
    4230:	04000005 	streq	r0, [r0], #-5
    4234:	00035c6b 	andeq	r5, r3, fp, ror #24
    4238:	40230200 	eormi	r0, r3, r0, lsl #4
    423c:	67736d09 	ldrbvs	r6, [r3, -r9, lsl #26]!
    4240:	d66d0400 	strbtle	r0, [sp], -r0, lsl #8
    4244:	02000002 	andeq	r0, r0, #2
    4248:	30074423 	andcc	r4, r7, r3, lsr #8
    424c:	04000016 	streq	r0, [r0], #-22
    4250:	0000a670 	andeq	sl, r0, r0, ror r6
    4254:	48230200 	stmdami	r3!, {r9}
    4258:	0008db07 	andeq	sp, r8, r7, lsl #22
    425c:	30730400 	rsbscc	r0, r3, r0, lsl #8
    4260:	02000001 	andeq	r0, r0, #1
    4264:	ac074c23 	stcge	12, cr4, [r7], {35}	; 0x23
    4268:	04000009 	streq	r0, [r0], #-9
    426c:	00003a75 	andeq	r3, r0, r5, ror sl
    4270:	50230200 	eorpl	r0, r3, r0, lsl #4
    4274:	0007e607 	andeq	lr, r7, r7, lsl #12
    4278:	3a760400 	bcc	1d85280 <MEM_SIZE+0x1585280>
    427c:	02000000 	andeq	r0, r0, #0
    4280:	3d075123 	stfccs	f5, [r7, #-140]	; 0xffffff74
    4284:	04000005 	streq	r0, [r0], #-5
    4288:	00036279 	andeq	r6, r3, r9, ror r2
    428c:	54230200 	strtpl	r0, [r3], #-512	; 0x200
    4290:	000ab507 	andeq	fp, sl, r7, lsl #10
    4294:	e57c0400 	ldrb	r0, [ip, #-1024]!	; 0x400
    4298:	02000003 	andeq	r0, r0, #3
    429c:	2b075823 	blcs	1da330 <DISABLE_IRQ+0x1da2b0>
    42a0:	04000002 	streq	r0, [r0], #-2
    42a4:	00042280 	andeq	r2, r4, r0, lsl #5
    42a8:	5c230200 	sfmpl	f0, 4, [r3]	; (stcpl 2, cr0, [r3])
    42ac:	0004ad07 	andeq	sl, r4, r7, lsl #26
    42b0:	3a840400 	bcc	fe1052b8 <rEINTPEND+0xa8105210>
    42b4:	02000000 	andeq	r0, r0, #0
    42b8:	55076023 	strpl	r6, [r7, #-35]	; 0x23
    42bc:	04000002 	streq	r0, [r0], #-2
    42c0:	00005e85 	andeq	r5, r0, r5, lsl #29
    42c4:	64230200 	strtvs	r0, [r3], #-512	; 0x200
    42c8:	00075a07 	andeq	r5, r7, r7, lsl #20
    42cc:	d6860400 	strle	r0, [r6], r0, lsl #8
    42d0:	02000002 	andeq	r0, r0, #2
    42d4:	08006823 	stmdaeq	r0, {r0, r1, r5, fp, sp, lr}
    42d8:	00002504 	andeq	r2, r0, r4, lsl #10
    42dc:	02d60a00 	sbcseq	r0, r6, #0
    42e0:	02ec0000 	rsceq	r0, ip, #0
    42e4:	ec0b0000 	stc	0, cr0, [fp], {0}
    42e8:	00000002 	andeq	r0, r0, r2
    42ec:	07040c00 	streq	r0, [r4, -r0, lsl #24]
    42f0:	000b2f06 	andeq	r2, fp, r6, lsl #30
    42f4:	5a041c00 	bpl	10b2fc <DISABLE_IRQ+0x10b27c>
    42f8:	00000350 	andeq	r0, r0, r0, asr r3
    42fc:	00053607 	andeq	r3, r5, r7, lsl #12
    4300:	36270500 	strtcc	r0, [r7], -r0, lsl #10
    4304:	02000001 	andeq	r0, r0, #1
    4308:	67070023 	strvs	r0, [r7, -r3, lsr #32]
    430c:	05000008 	streq	r0, [r0, #-8]
    4310:	0005382a 	andeq	r3, r5, sl, lsr #16
    4314:	10230200 	eorne	r0, r3, r0, lsl #4
    4318:	000bad07 	andeq	sl, fp, r7, lsl #26
    431c:	502c0500 	eorpl	r0, ip, r0, lsl #10
    4320:	02000003 	andeq	r0, r0, #3
    4324:	f6071423 	undefined instruction 0xf6071423
    4328:	05000005 	streq	r0, [r0, #-5]
    432c:	00003a2e 	andeq	r3, r0, lr, lsr #20
    4330:	18230200 	stmdane	r3!, {r9}
    4334:	00047307 	andeq	r7, r4, r7, lsl #6
    4338:	3a2f0500 	bcc	bc5740 <MEM_SIZE+0x3c5740>
    433c:	02000000 	andeq	r0, r0, #0
    4340:	8e071923 	cdphi	9, 0, cr1, cr7, cr3, {1}
    4344:	05000004 	streq	r0, [r0, #-4]
    4348:	00003a30 	andeq	r3, r0, r0, lsr sl
    434c:	1a230200 	bne	8c4b54 <MEM_SIZE+0xc4b54>
    4350:	ef040800 	svc	0x00040800
    4354:	08000002 	stmdaeq	r0, {r1}
    4358:	00008504 	andeq	r8, r0, r4, lsl #10
    435c:	e0040800 	and	r0, r4, r0, lsl #16
    4360:	08000000 	stmdaeq	r0, {}
    4364:	00013604 	andeq	r3, r1, r4, lsl #12
    4368:	074b0600 	strbeq	r0, [fp, -r0, lsl #12]
    436c:	042c0000 	strteq	r0, [ip]
    4370:	0003e57c 	andeq	lr, r3, ip, ror r5
    4374:	05360700 	ldreq	r0, [r6, #-1792]!	; 0x700
    4378:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    437c:	00000136 	andeq	r0, r0, r6, lsr r1
    4380:	07002302 	streq	r2, [r0, -r2, lsl #6]
    4384:	000007dd 	ldrdeq	r0, [r0], -sp
    4388:	05153006 	ldreq	r3, [r5, #-6]
    438c:	23020000 	movwcs	r0, #8192	; 0x2000
    4390:	05e40710 	strbeq	r0, [r4, #1808]!	; 0x710
    4394:	31060000 	tstcc	r6, r0
    4398:	000000a6 	andeq	r0, r0, r6, lsr #1
    439c:	07142302 	ldreq	r2, [r4, -r2, lsl #6]
    43a0:	00000b0e 	andeq	r0, r0, lr, lsl #22
    43a4:	00a63206 	adceq	r3, r6, r6, lsl #4
    43a8:	23020000 	movwcs	r0, #8192	; 0x2000
    43ac:	05f00718 	ldrbeq	r0, [r0, #1816]!	; 0x718
    43b0:	34060000 	strcc	r0, [r6]
    43b4:	00000515 	andeq	r0, r0, r5, lsl r5
    43b8:	071c2302 	ldreq	r2, [ip, -r2, lsl #6]
    43bc:	0000014e 	andeq	r0, r0, lr, asr #2
    43c0:	05153506 	ldreq	r3, [r5, #-1286]	; 0x506
    43c4:	23020000 	movwcs	r0, #8192	; 0x2000
    43c8:	05270720 	streq	r0, [r7, #-1824]!	; 0x720
    43cc:	36060000 	strcc	r0, [r6], -r0
    43d0:	000000a6 	andeq	r0, r0, r6, lsr #1
    43d4:	07242302 	streq	r2, [r4, -r2, lsl #6]!
    43d8:	0000049b 	muleq	r0, fp, r4
    43dc:	00a63706 	adceq	r3, r6, r6, lsl #14
    43e0:	23020000 	movwcs	r0, #8192	; 0x2000
    43e4:	04080028 	streq	r0, [r8], #-40	; 0x28
    43e8:	00000368 	andeq	r0, r0, r8, ror #6
    43ec:	000aa706 	andeq	sl, sl, r6, lsl #14
    43f0:	80041800 	andhi	r1, r4, r0, lsl #16
    43f4:	00000422 	andeq	r0, r0, r2, lsr #8
    43f8:	00053607 	andeq	r3, r5, r7, lsl #12
    43fc:	36220700 	strtcc	r0, [r2], -r0, lsl #14
    4400:	02000001 	andeq	r0, r0, #1
    4404:	47070023 	strmi	r0, [r7, -r3, lsr #32]
    4408:	07000004 	streq	r0, [r0, -r4]
    440c:	00005e23 	andeq	r5, r0, r3, lsr #28
    4410:	10230200 	eorne	r0, r3, r0, lsl #4
    4414:	001b3f07 	andseq	r3, fp, r7, lsl #30
    4418:	27240700 	strcs	r0, [r4, -r0, lsl #14]!
    441c:	02000005 	andeq	r0, r0, #5
    4420:	08001423 	stmdaeq	r0, {r0, r1, r5, sl, ip}
    4424:	0003eb04 	andeq	lr, r3, r4, lsl #22
    4428:	099f0400 	ldmibeq	pc, {sl}
    442c:	89040000 	stmdbhi	r4, {}
    4430:	00000141 	andeq	r0, r0, r1, asr #2
    4434:	0014af0d 	andseq	sl, r4, sp, lsl #30
    4438:	0401fc00 	streq	pc, [r1], #-3072	; 0xc00
    443c:	00046c8f 	andeq	r6, r4, pc, lsl #25
    4440:	13cf0700 	bicne	r0, pc, #0
    4444:	91040000 	tstls	r4, r0
    4448:	0000003a 	andeq	r0, r0, sl, lsr r0
    444c:	07002302 	streq	r2, [r0, -r2, lsl #6]
    4450:	00001391 	muleq	r0, r1, r3
    4454:	046c9304 	strbteq	r9, [ip], #-772	; 0x304
    4458:	23020000 	movwcs	r0, #8192	; 0x2000
    445c:	142c0704 	strtne	r0, [ip], #-1796	; 0x704
    4460:	95040000 	strls	r0, [r4]
    4464:	0000047c 	andeq	r0, r0, ip, ror r4
    4468:	03f42303 	mvnseq	r2, #201326592	; 0xc000000
    446c:	00e00a00 	rsceq	r0, r0, r0, lsl #20
    4470:	047c0000 	ldrbteq	r0, [ip]
    4474:	ec0b0000 	stc	0, cr0, [fp], {0}
    4478:	3d000002 	stccc	0, cr0, [r0, #-8]
    447c:	005e0a00 	subseq	r0, lr, r0, lsl #20
    4480:	048c0000 	streq	r0, [ip]
    4484:	ec0b0000 	stc	0, cr0, [fp], {0}
    4488:	01000002 	tsteq	r0, r2
    448c:	14af0400 	strtne	r0, [pc], #1024	; 4494 <DISABLE_IRQ+0x4414>
    4490:	97040000 	strls	r0, [r4, -r0]
    4494:	00000433 	andeq	r0, r0, r3, lsr r4
    4498:	000fd506 	andeq	sp, pc, r6, lsl #10
    449c:	9c040c00 	stcls	12, cr0, [r4], {0}
    44a0:	000004c0 	andeq	r0, r0, r0, asr #9
    44a4:	000fa507 	andeq	sl, pc, r7, lsl #10
    44a8:	e09f0400 	adds	r0, pc, r0, lsl #8
    44ac:	02000000 	andeq	r0, r0, #0
    44b0:	e6070023 	str	r0, [r7], -r3, lsr #32
    44b4:	0400000f 	streq	r0, [r0], #-15
    44b8:	00035ca1 	andeq	r5, r3, r1, lsr #25
    44bc:	08230200 	stmdaeq	r3!, {r9}
    44c0:	0fd50400 	svceq	0x00d50400
    44c4:	a3040000 	movwge	r0, #16384	; 0x4000
    44c8:	00000497 	muleq	r0, r7, r4
    44cc:	000b6106 	andeq	r6, fp, r6, lsl #2
    44d0:	21060c00 	tstcs	r6, r0, lsl #24
    44d4:	00000502 	andeq	r0, r0, r2, lsl #10
    44d8:	00031107 	andeq	r1, r3, r7, lsl #2
    44dc:	02230600 	eoreq	r0, r3, #0
    44e0:	02000005 	andeq	r0, r0, #5
    44e4:	dc070023 	stcle	0, cr0, [r7], {35}	; 0x23
    44e8:	06000005 	streq	r0, [r0], -r5
    44ec:	00050824 	andeq	r0, r5, r4, lsr #16
    44f0:	04230200 	strteq	r0, [r3], #-512	; 0x200
    44f4:	00163007 	andseq	r3, r6, r7
    44f8:	a6250600 	strtge	r0, [r5], -r0, lsl #12
    44fc:	02000000 	andeq	r0, r0, #0
    4500:	08000823 	stmdaeq	r0, {r0, r1, r5, fp}
    4504:	0004cb04 	andeq	ip, r4, r4, lsl #22
    4508:	04040e00 	streq	r0, [r4], #-3584	; 0xe00
    450c:	00000b61 	andeq	r0, r0, r1, ror #22
    4510:	04cb2706 	strbeq	r2, [fp], #1798	; 0x706
    4514:	04080000 	streq	r0, [r8]
    4518:	0000050a 	andeq	r0, r0, sl, lsl #10
    451c:	0527010f 	streq	r0, [r7, #-271]!	; 0x10f
    4520:	22100000 	andscs	r0, r0, #0
    4524:	00000004 	andeq	r0, r0, r4
    4528:	051b0408 	ldreq	r0, [fp, #-1032]	; 0x408
    452c:	a7040000 	strge	r0, [r4, -r0]
    4530:	0700000a 	streq	r0, [r0, -sl]
    4534:	0003eb26 	andeq	lr, r3, r6, lsr #22
    4538:	28040800 	stmdacs	r4, {fp}
    453c:	06000004 	streq	r0, [r0], -r4
    4540:	0000148c 	andeq	r1, r0, ip, lsl #9
    4544:	59200804 	stmdbpl	r0!, {r2, fp}
    4548:	07000005 	streq	r0, [r0, -r5]
    454c:	00001377 	andeq	r1, r0, r7, ror r3
    4550:	056a2208 	strbeq	r2, [sl, #-520]!	; 0x208
    4554:	23020000 	movwcs	r0, #8192	; 0x2000
    4558:	010f0000 	mrseq	r0, CPSR
    455c:	0000056a 	andeq	r0, r0, sl, ror #10
    4560:	00009b10 	andeq	r9, r0, r0, lsl fp
    4564:	05081000 	streq	r1, [r8]
    4568:	08000000 	stmdaeq	r0, {}
    456c:	00055904 	andeq	r5, r5, r4, lsl #18
    4570:	148c0400 	strne	r0, [ip], #1024	; 0x400
    4574:	24080000 	strcs	r0, [r8]
    4578:	0000053e 	andeq	r0, r0, lr, lsr r5
    457c:	00136a06 	andseq	r6, r3, r6, lsl #20
    4580:	27080c00 	strcs	r0, [r8, -r0, lsl #24]
    4584:	000005af 	andeq	r0, r0, pc, lsr #11
    4588:	00766509 	rsbseq	r6, r6, r9, lsl #10
    458c:	009b2908 	addseq	r2, fp, r8, lsl #18
    4590:	23020000 	movwcs	r0, #8192	; 0x2000
    4594:	13c40700 	bicne	r0, r4, #0
    4598:	2a080000 	bcs	2045a0 <DISABLE_IRQ+0x204520>
    459c:	00000508 	andeq	r0, r0, r8, lsl #10
    45a0:	09042302 	stmdbeq	r4, {r1, r8, r9, sp}
    45a4:	2b080070 	blcs	20476c <DISABLE_IRQ+0x2046ec>
    45a8:	000005af 	andeq	r0, r0, pc, lsr #11
    45ac:	00082302 	andeq	r2, r8, r2, lsl #6
    45b0:	05700408 	ldrbeq	r0, [r0, #-1032]!	; 0x408
    45b4:	6a040000 	bvs	1045bc <DISABLE_IRQ+0x10453c>
    45b8:	08000013 	stmdaeq	r0, {r0, r1, r4}
    45bc:	00057b2d 	andeq	r7, r5, sp, lsr #22
    45c0:	13a10600 	undefined instruction 0x13a10600
    45c4:	08180000 	ldmdaeq	r8, {}
    45c8:	00062f30 	andeq	r2, r6, r0, lsr pc
    45cc:	11780700 	cmnne	r8, r0, lsl #14
    45d0:	32080000 	andcc	r0, r8, #0
    45d4:	0000003a 	andeq	r0, r0, sl, lsr r0
    45d8:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    45dc:	0074706f 	rsbseq	r7, r4, pc, rrx
    45e0:	003a3308 	eorseq	r3, sl, r8, lsl #6
    45e4:	23020000 	movwcs	r0, #8192	; 0x2000
    45e8:	03110701 	tsteq	r1, #262144	; 0x40000
    45ec:	35080000 	strcc	r0, [r8]
    45f0:	0000062f 	andeq	r0, r0, pc, lsr #12
    45f4:	07042302 	streq	r2, [r4, -r2, lsl #6]
    45f8:	00001671 	andeq	r1, r0, r1, ror r6
    45fc:	05083708 	streq	r3, [r8, #-1800]	; 0x708
    4600:	23020000 	movwcs	r0, #8192	; 0x2000
    4604:	736d0908 	cmnvc	sp, #131072	; 0x20000
    4608:	38080067 	stmdacc	r8, {r0, r1, r2, r5, r6}
    460c:	00000508 	andeq	r0, r0, r8, lsl #10
    4610:	070c2302 	streq	r2, [ip, -r2, lsl #6]
    4614:	00001630 	andeq	r1, r0, r0, lsr r6
    4618:	00a63908 	adceq	r3, r6, r8, lsl #18
    461c:	23020000 	movwcs	r0, #8192	; 0x2000
    4620:	15210710 	strne	r0, [r1, #-1808]!	; 0x710
    4624:	3a080000 	bcc	20462c <DISABLE_IRQ+0x2045ac>
    4628:	0000005e 	andeq	r0, r0, lr, asr r0
    462c:	00142302 	andseq	r2, r4, r2, lsl #6
    4630:	05c00408 	strbeq	r0, [r0, #1032]	; 0x408
    4634:	a1040000 	tstge	r4, r0
    4638:	08000013 	stmdaeq	r0, {r0, r1, r4}
    463c:	0005c03c 	andeq	ip, r5, ip, lsr r0
    4640:	14d11100 	ldrbne	r1, [r1], #256	; 0x100
    4644:	29090000 	stmdbcs	r9, {}
    4648:	00000538 	andeq	r0, r0, r8, lsr r5
    464c:	64030501 	strvs	r0, [r3], #-1281	; 0x501
    4650:	1130013e 	teqne	r0, lr, lsr r1
    4654:	0000038f 	andeq	r0, r0, pc, lsl #7
    4658:	05382c09 	ldreq	r2, [r8, #-3081]!	; 0xc09
    465c:	05010000 	streq	r0, [r1]
    4660:	01383803 	teqeq	r8, r3, lsl #16
    4664:	130f1130 	movwne	r1, #61744	; 0xf130
    4668:	1f090000 	svcne	0x00090000
    466c:	0000003a 	andeq	r0, r0, sl, lsr r0
    4670:	c0030501 	andgt	r0, r3, r1, lsl #10
    4674:	11300133 	teqne	r0, r3, lsr r1
    4678:	0000140c 	andeq	r1, r0, ip, lsl #8
    467c:	003a2009 	eorseq	r2, sl, r9
    4680:	05010000 	streq	r0, [r1]
    4684:	012b6c03 	teqeq	fp, r3, lsl #24
    4688:	13e01130 	mvnne	r1, #12
    468c:	55090000 	strpl	r0, [r9]
    4690:	0000003a 	andeq	r0, r0, sl, lsr r0
    4694:	60030501 	andvs	r0, r3, r1, lsl #10
    4698:	1130013e 	teqne	r0, lr, lsr r1
    469c:	0000131d 	andeq	r1, r0, sp, lsl r3
    46a0:	048c2209 	streq	r2, [ip], #521	; 0x209
    46a4:	05010000 	streq	r0, [r1]
    46a8:	013c4c03 	teqeq	ip, r3, lsl #24
    46ac:	0e501130 	mrceq	1, 2, r1, cr0, cr0, {1}
    46b0:	26090000 	strcs	r0, [r9], -r0
    46b4:	0000003a 	andeq	r0, r0, sl, lsr r0
    46b8:	61030501 	tstvs	r3, r1, lsl #10
    46bc:	1130013e 	teqne	r0, lr, lsr r1
    46c0:	00000d85 	andeq	r0, r0, r5, lsl #27
    46c4:	003a2509 	eorseq	r2, sl, r9, lsl #10
    46c8:	05010000 	streq	r0, [r1]
    46cc:	0142c003 	cmpeq	r2, r3
    46d0:	146d1130 	strbtne	r1, [sp], #-304	; 0x130
    46d4:	33090000 	movwcc	r0, #36864	; 0x9000
    46d8:	00000090 	muleq	r0, r0, r0
    46dc:	34030501 	strcc	r0, [r3], #-1281	; 0x501
    46e0:	11300138 	teqne	r0, r8, lsr r1
    46e4:	00001384 	andeq	r1, r0, r4, lsl #7
    46e8:	04282f09 	strteq	r2, [r8], #-3849	; 0xf09
    46ec:	05010000 	streq	r0, [r1]
    46f0:	013e6803 	teqeq	lr, r3, lsl #16
    46f4:	00850a30 	addeq	r0, r5, r0, lsr sl
    46f8:	07040000 	streq	r0, [r4, -r0]
    46fc:	ec0b0000 	stc	0, cr0, [fp], {0}
    4700:	ff000002 	undefined instruction 0xff000002
    4704:	12df1100 	sbcsne	r1, pc, #0
    4708:	30090000 	andcc	r0, r9, r0
    470c:	000006f4 	strdeq	r0, [r0], -r4
    4710:	b4030501 	strlt	r0, [r3], #-1281	; 0x501
    4714:	0a30012b 	beq	c04bc8 <MEM_SIZE+0x404bc8>
    4718:	000000e0 	andeq	r0, r0, r0, ror #1
    471c:	00000726 	andeq	r0, r0, r6, lsr #14
    4720:	0002ec0b 	andeq	lr, r2, fp, lsl #24
    4724:	11000700 	tstne	r0, r0, lsl #14
    4728:	000005a7 	andeq	r0, r0, r7, lsr #11
    472c:	07163409 	ldreq	r3, [r6, -r9, lsl #8]
    4730:	05010000 	streq	r0, [r1]
    4734:	012b7403 	teqeq	fp, r3, lsl #8
    4738:	00e00a30 	rsceq	r0, r0, r0, lsr sl
    473c:	07480000 	strbeq	r0, [r8, -r0]
    4740:	ec0b0000 	stc	0, cr0, [fp], {0}
    4744:	03000002 	movweq	r0, #2
    4748:	12ea1100 	rscne	r1, sl, #0
    474c:	38090000 	stmdacc	r9, {}
    4750:	00000738 	andeq	r0, r0, r8, lsr r7
    4754:	54030501 	strpl	r0, [r3], #-1281	; 0x501
    4758:	11300140 	teqne	r0, r0, asr #2
    475c:	0000145d 	andeq	r1, r0, sp, asr r4
    4760:	00903909 	addseq	r3, r0, r9, lsl #18
    4764:	05010000 	streq	r0, [r1]
    4768:	0137c403 	teqeq	r7, r3, lsl #8
    476c:	13ec1130 	mvnne	r1, #12
    4770:	3a090000 	bcc	244778 <DISABLE_IRQ+0x2446f8>
    4774:	0000005e 	andeq	r0, r0, lr, asr r0
    4778:	70030501 	andvc	r0, r3, r1, lsl #10
    477c:	1130012b 	teqne	r0, fp, lsr #2
    4780:	00001501 	andeq	r1, r0, r1, lsl #10
    4784:	04283b09 	strteq	r3, [r8], #-2825	; 0xb09
    4788:	05010000 	streq	r0, [r1]
    478c:	01407403 	cmpeq	r0, r3, lsl #8
    4790:	141b1130 	ldrne	r1, [fp], #-304	; 0x130
    4794:	3c090000 	stccc	0, cr0, [r9], {0}
    4798:	000006f4 	strdeq	r0, [r0], -r4
    479c:	c4030501 	strgt	r0, [r3], #-1281	; 0x501
    47a0:	11300133 	teqne	r0, r3, lsr r1
    47a4:	00001360 	andeq	r1, r0, r0, ror #6
    47a8:	052d3d09 	streq	r3, [sp, #-3337]!	; 0xd09
    47ac:	05010000 	streq	r0, [r1]
    47b0:	013e4803 	teqeq	lr, r3, lsl #16
    47b4:	14391130 	ldrtne	r1, [r9], #-304	; 0x130
    47b8:	4b090000 	blmi	2447c0 <DISABLE_IRQ+0x244740>
    47bc:	00000045 	andeq	r0, r0, r5, asr #32
    47c0:	46030501 	strmi	r0, [r3], -r1, lsl #10
    47c4:	11300138 	teqne	r0, r8, lsr r1
    47c8:	000013fb 	strdeq	r1, [r0], -fp
    47cc:	00454c09 	subeq	r4, r5, r9, lsl #24
    47d0:	05010000 	streq	r0, [r1]
    47d4:	01383c03 	teqeq	r8, r3, lsl #24
    47d8:	13011130 	movwne	r1, #4400	; 0x1130
    47dc:	4d090000 	stcmi	0, cr0, [r9]
    47e0:	00000045 	andeq	r0, r0, r5, asr #32
    47e4:	50030501 	andpl	r0, r3, r1, lsl #10
    47e8:	1130012b 	teqne	r0, fp, lsr #2
    47ec:	000012f5 	strdeq	r1, [r0], -r5
    47f0:	00454e09 	subeq	r4, r5, r9, lsl #28
    47f4:	05010000 	streq	r0, [r1]
    47f8:	01384403 	teqeq	r8, r3, lsl #8
    47fc:	05b50a30 	ldreq	r0, [r5, #2608]!	; 0xa30
    4800:	080c0000 	stmdaeq	ip, {}
    4804:	ec0b0000 	stc	0, cr0, [fp], {0}
    4808:	1f000002 	svcne	0x00000002
    480c:	13b01100 	movsne	r1, #0
    4810:	50090000 	andpl	r0, r9, r0
    4814:	000007fc 	strdeq	r0, [r0], -ip
    4818:	d4030501 	strle	r0, [r3], #-1281	; 0x501
    481c:	1130013e 	teqne	r0, lr, lsr r1
    4820:	0000132d 	andeq	r1, r0, sp, lsr #6
    4824:	04285109 	strteq	r5, [r8], #-265	; 0x109
    4828:	05010000 	streq	r0, [r1]
    482c:	0142c803 	cmpeq	r2, r3, lsl #16
    4830:	13531130 	cmpne	r3, #12
    4834:	53090000 	movwpl	r0, #36864	; 0x9000
    4838:	000006f4 	strdeq	r0, [r0], -r4
    483c:	4c030501 	cfstr32mi	mvfx0, [r3], {1}
    4840:	11300138 	teqne	r0, r8, lsr r1
    4844:	0000149a 	muleq	r0, sl, r4
    4848:	05705409 	ldrbeq	r5, [r0, #-1033]!	; 0x409
    484c:	05010000 	streq	r0, [r1]
    4850:	0142c403 	cmpeq	r2, r3, lsl #8
    4854:	06350a30 	undefined instruction 0x06350a30
    4858:	08640000 	stmdaeq	r4!, {}^
    485c:	ec0b0000 	stc	0, cr0, [fp], {0}
    4860:	13000002 	movwne	r0, #2
    4864:	14c21100 	strbne	r1, [r2], #256	; 0x100
    4868:	5a090000 	bpl	244870 <DISABLE_IRQ+0x2447f0>
    486c:	00000854 	andeq	r0, r0, r4, asr r8
    4870:	e0030501 	and	r0, r3, r1, lsl #10
    4874:	11300140 	teqne	r0, r0, asr #2
    4878:	000014bd 	undefined instruction 0x000014bd
    487c:	08885b09 	stmeq	r8, {r0, r3, r8, r9, fp, ip, lr}
    4880:	05010000 	streq	r0, [r1]
    4884:	01384003 	teqeq	r8, r3
    4888:	35040830 	strcc	r0, [r4, #-2096]	; 0x830
    488c:	11000006 	tstne	r0, r6
    4890:	00001346 	andeq	r1, r0, r6, asr #6
    4894:	005e5c09 	subseq	r5, lr, r9, lsl #24
    4898:	05010000 	streq	r0, [r1]
    489c:	01384803 	teqeq	r8, r3, lsl #16
    48a0:	150f1130 	strne	r1, [pc, #-304]	; 4778 <DISABLE_IRQ+0x46f8>
    48a4:	5d090000 	stcpl	0, cr0, [r9]
    48a8:	00000570 	andeq	r0, r0, r0, ror r5
    48ac:	4c030501 	cfstr32mi	mvfx0, [r3], {1}
    48b0:	1130012b 	teqne	r0, fp, lsr #2
    48b4:	00001033 	andeq	r1, r0, r3, lsr r0
    48b8:	04c04409 	strbeq	r4, [r0], #1033	; 0x409
    48bc:	05010000 	streq	r0, [r1]
    48c0:	012fb403 	teqeq	pc, r3, lsl #8
    48c4:	14e01130 	strbtne	r1, [r0], #304	; 0x130
    48c8:	65090000 	strvs	r0, [r9]
    48cc:	00000428 	andeq	r0, r0, r8, lsr #8
    48d0:	c8030501 	stmdagt	r3, {r0, r8, sl}
    48d4:	11300137 	teqne	r0, r7, lsr r1
    48d8:	0000147c 	andeq	r1, r0, ip, ror r4
    48dc:	06f46609 	ldrbteq	r6, [r4], r9, lsl #12
    48e0:	05010000 	streq	r0, [r1]
    48e4:	012fc003 	teqeq	pc, r3
    48e8:	14ee1130 	strbtne	r1, [lr], #304	; 0x130
    48ec:	67090000 	strvs	r0, [r9, -r0]
    48f0:	0000052d 	andeq	r0, r0, sp, lsr #10
    48f4:	54030501 	strpl	r0, [r3], #-1281	; 0x501
    48f8:	0030012b 	eorseq	r0, r0, fp, lsr #2
    48fc:	00000f70 	andeq	r0, r0, r0, ror pc
    4900:	10110002 	andsne	r0, r1, r2
    4904:	01040000 	tsteq	r4, r0
    4908:	0000004d 	andeq	r0, r0, sp, asr #32
    490c:	0015eb01 	andseq	lr, r5, r1, lsl #22
    4910:	00006300 	andeq	r6, r0, r0, lsl #6
    4914:	00227c00 	eoreq	r7, r2, r0, lsl #24
    4918:	0027a830 	eoreq	sl, r7, r0, lsr r8
    491c:	000e9130 	andeq	r9, lr, r0, lsr r1
    4920:	05640200 	strbeq	r0, [r4, #-512]!	; 0x200
    4924:	21030000 	tstcs	r3, r0
    4928:	a0060103 	andge	r0, r6, r3, lsl #2
    492c:	04000000 	streq	r0, [r0]
    4930:	00000ee8 	andeq	r0, r0, r8, ror #29
    4934:	003e2303 	eorseq	r2, lr, r3, lsl #6
    4938:	01030000 	tsteq	r3, r0
    493c:	00009e08 	andeq	r9, r0, r8, lsl #28
    4940:	04f70400 	ldrbteq	r0, [r7], #1024	; 0x400
    4944:	24030000 	strcs	r0, [r3]
    4948:	0000003e 	andeq	r0, r0, lr, lsr r0
    494c:	000afb04 	andeq	pc, sl, r4, lsl #22
    4950:	5b260300 	blpl	985558 <MEM_SIZE+0x185558>
    4954:	03000000 	movweq	r0, #0
    4958:	008b0702 	addeq	r0, fp, r2, lsl #14
    495c:	02030000 	andeq	r0, r3, #0
    4960:	00005905 	andeq	r5, r0, r5, lsl #18
    4964:	03380400 	teqeq	r8, #0
    4968:	28030000 	stmdacs	r3, {}
    496c:	00000074 	andeq	r0, r0, r4, ror r0
    4970:	37070403 	strcc	r0, [r7, -r3, lsl #8]
    4974:	04000000 	streq	r0, [r0]
    4978:	0000115a 	andeq	r1, r0, sl, asr r1
    497c:	00862903 	addeq	r2, r6, r3, lsl #18
    4980:	04050000 	streq	r0, [r5]
    4984:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    4988:	05080300 	streq	r0, [r8, #-768]	; 0x300
    498c:	00000000 	andeq	r0, r0, r0
    4990:	2d070803 	stccs	8, cr0, [r7, #-12]
    4994:	04000000 	streq	r0, [r0]
    4998:	0000039f 	muleq	r0, pc, r3
    499c:	00742d03 	rsbseq	r2, r4, r3, lsl #26
    49a0:	27040000 	strcs	r0, [r4, -r0]
    49a4:	0400000a 	streq	r0, [r0], #-10
    49a8:	0000692a 	andeq	r6, r0, sl, lsr #18
    49ac:	08290400 	stmdaeq	r9!, {sl}
    49b0:	2c040000 	stccs	0, cr0, [r4], {0}
    49b4:	00000069 	andeq	r0, r0, r9, rrx
    49b8:	43050406 	movwmi	r0, #21510	; 0x5406
    49bc:	00000261 	andeq	r0, r0, r1, ror #4
    49c0:	000bb507 	andeq	fp, fp, r7, lsl #10
    49c4:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    49c8:	0100000b 	tsteq	r0, fp
    49cc:	0003aa07 	andeq	sl, r3, r7, lsl #20
    49d0:	21070200 	tstcs	r7, r0, lsl #4
    49d4:	03000009 	movweq	r0, #9
    49d8:	00063507 	andeq	r3, r6, r7, lsl #10
    49dc:	35070400 	strcc	r0, [r7, #-1024]	; 0x400
    49e0:	0500000a 	streq	r0, [r0, #-10]
    49e4:	000ad407 	andeq	sp, sl, r7, lsl #8
    49e8:	ac070600 	stcge	6, cr0, [r7], {0}
    49ec:	07000002 	streq	r0, [r0, -r2]
    49f0:	0006e307 	andeq	lr, r6, r7, lsl #6
    49f4:	ee070800 	cdp	8, 0, cr0, cr7, cr0, {0}
    49f8:	09000001 	stmdbeq	r0, {r0}
    49fc:	0008cd07 	andeq	ip, r8, r7, lsl #26
    4a00:	a1070a00 	tstge	r7, r0, lsl #20
    4a04:	0b00000b 	bleq	4a38 <DISABLE_IRQ+0x49b8>
    4a08:	00048007 	andeq	r8, r4, r7
    4a0c:	bc070c00 	stclt	12, cr0, [r7], {0}
    4a10:	0d000008 	stceq	0, cr0, [r0, #-32]	; 0xffffffe0
    4a14:	00070507 	andeq	r0, r7, r7, lsl #10
    4a18:	d0070e00 	andle	r0, r7, r0, lsl #28
    4a1c:	0f000006 	svceq	0x00000006
    4a20:	00034007 	andeq	r4, r3, r7
    4a24:	6a071000 	bvs	1c8a2c <DISABLE_IRQ+0x1c89ac>
    4a28:	11000009 	tstne	r0, r9
    4a2c:	000b3907 	andeq	r3, fp, r7, lsl #18
    4a30:	0e071200 	cdpeq	2, 0, cr1, cr7, cr0, {0}
    4a34:	13000006 	movwne	r0, #6
    4a38:	0002be07 	andeq	fp, r2, r7, lsl #28
    4a3c:	90071400 	andls	r1, r7, r0, lsl #8
    4a40:	15000006 	strne	r0, [r0, #-6]
    4a44:	0008e507 	andeq	lr, r8, r7, lsl #10
    4a48:	d0071600 	andle	r1, r7, r0, lsl #12
    4a4c:	17000002 	strne	r0, [r0, -r2]
    4a50:	00090a07 	andeq	r0, r9, r7, lsl #20
    4a54:	15071800 	strne	r1, [r7, #-2048]	; 0x800
    4a58:	19000002 	stmdbne	r0, {r1}
    4a5c:	00077607 	andeq	r7, r7, r7, lsl #12
    4a60:	f0071a00 	undefined instruction 0xf0071a00
    4a64:	1b000002 	blne	4a74 <DISABLE_IRQ+0x49f4>
    4a68:	000bc107 	andeq	ip, fp, r7, lsl #2
    4a6c:	05071c00 	streq	r1, [r7, #-3072]	; 0xc00
    4a70:	1d000004 	stcne	0, cr0, [r0, #-16]
    4a74:	00081007 	andeq	r1, r8, r7
    4a78:	32071e00 	andcc	r1, r7, #0
    4a7c:	1f000009 	svcne	0x00000009
    4a80:	00026707 	andeq	r6, r2, r7, lsl #14
    4a84:	b1072000 	tstlt	r7, r0
    4a88:	21000005 	tstcs	r0, r5
    4a8c:	00064407 	andeq	r4, r6, r7, lsl #8
    4a90:	ff072200 	undefined instruction 0xff072200
    4a94:	23000007 	movwcs	r0, #7
    4a98:	0003ba07 	andeq	fp, r3, r7, lsl #20
    4a9c:	99072400 	stmdbls	r7, {sl, sp}
    4aa0:	25000008 	strcs	r0, [r0, #-8]
    4aa4:	000b4b07 	andeq	r4, fp, r7, lsl #22
    4aa8:	83072600 	movwhi	r2, #30208	; 0x7600
    4aac:	27000008 	strcs	r0, [r0, -r8]
    4ab0:	00023e07 	andeq	r3, r2, r7, lsl #28
    4ab4:	b7072800 	strlt	r2, [r7, -r0, lsl #16]
    4ab8:	29000009 	stmdbcs	r0, {r0, r3}
    4abc:	000ae507 	andeq	lr, sl, r7, lsl #10
    4ac0:	87072a00 	strhi	r2, [r7, -r0, lsl #20]
    4ac4:	2b00000a 	blcs	4af4 <DISABLE_IRQ+0x4a74>
    4ac8:	00094807 	andeq	r4, r9, r7, lsl #16
    4acc:	f5072c00 	undefined instruction 0xf5072c00
    4ad0:	2d000009 	stccs	0, cr0, [r0, #-36]	; 0xffffffdc
    4ad4:	0009c707 	andeq	ip, r9, r7, lsl #14
    4ad8:	cf072e00 	svcgt	0x00072e00
    4adc:	2f000003 	svccs	0x00000003
    4ae0:	0006a707 	andeq	sl, r6, r7, lsl #14
    4ae4:	13073000 	movwne	r3, #28672	; 0x7000
    4ae8:	31000004 	tstcc	r0, r4
    4aec:	00098907 	andeq	r8, r9, r7, lsl #18
    4af0:	52073200 	andpl	r3, r7, #0
    4af4:	33000003 	movwcc	r0, #3
    4af8:	0005fd07 	andeq	pc, r5, r7, lsl #26
    4afc:	d5073400 	strle	r3, [r7, #-1024]	; 0x400
    4b00:	3500000b 	strcc	r0, [r0, #-11]
    4b04:	0004e107 	andeq	lr, r4, r7, lsl #2
    4b08:	a8073600 	stmdage	r7, {r9, sl, ip, sp}
    4b0c:	37000007 	strcc	r0, [r0, -r7]
    4b10:	00079207 	andeq	r9, r7, r7, lsl #4
    4b14:	16073800 	strne	r3, [r7], -r0, lsl #16
    4b18:	39000003 	stmdbcc	r0, {r0, r1}
    4b1c:	0006f307 	andeq	pc, r6, r7, lsl #6
    4b20:	e2073a00 	and	r3, r7, #0
    4b24:	3b000003 	blcc	4b38 <DISABLE_IRQ+0x4ab8>
    4b28:	0006bc07 	andeq	fp, r6, r7, lsl #24
    4b2c:	0f073c00 	svceq	0x00073c00
    4b30:	3d000005 	stccc	0, cr0, [r0, #-20]	; 0xffffffec
    4b34:	00056d07 	andeq	r6, r5, r7, lsl #26
    4b38:	cb073e00 	blgt	1d4340 <DISABLE_IRQ+0x1d42c0>
    4b3c:	3f000004 	svccc	0x00000004
    4b40:	00036e07 	andeq	r6, r3, r7, lsl #28
    4b44:	0700c000 	streq	ip, [r0, -r0]
    4b48:	0000058b 	andeq	r0, r0, fp, lsl #11
    4b4c:	370700c1 	strcc	r0, [r7, -r1, asr #1]
    4b50:	c2000008 	andgt	r0, r0, #8
    4b54:	06740700 	ldrbteq	r0, [r4], -r0, lsl #14
    4b58:	00c30000 	sbceq	r0, r3, r0
    4b5c:	05040600 	streq	r0, [r4, #-1536]	; 0x600
    4b60:	00028291 	muleq	r2, r1, r2
    4b64:	161d0700 	ldrne	r0, [sp], -r0, lsl #14
    4b68:	07000000 	streq	r0, [r0, -r0]
    4b6c:	000016aa 	andeq	r1, r0, sl, lsr #13
    4b70:	16390701 	ldrtne	r0, [r9], -r1, lsl #14
    4b74:	07020000 	streq	r0, [r2, -r0]
    4b78:	00001647 	andeq	r1, r0, r7, asr #12
    4b7c:	09080003 	stmdbeq	r8, {r0, r1}
    4b80:	0800000c 	stmdaeq	r0, {r2, r3}
    4b84:	02ab2302 	adceq	r2, fp, #134217728	; 0x8000000
    4b88:	11090000 	tstne	r9, r0
    4b8c:	02000003 	andeq	r0, r0, #3
    4b90:	0002ab24 	andeq	sl, r2, r4, lsr #22
    4b94:	00230200 	eoreq	r0, r3, r0, lsl #4
    4b98:	00028109 	andeq	r8, r2, r9, lsl #2
    4b9c:	ab250200 	blge	9453a4 <MEM_SIZE+0x1453a4>
    4ba0:	02000002 	andeq	r0, r0, #2
    4ba4:	0a000423 	beq	5c38 <DISABLE_IRQ+0x5bb8>
    4ba8:	00028204 	andeq	r8, r2, r4, lsl #4
    4bac:	0c090400 	cfstrseq	mvf0, [r9], {0}
    4bb0:	26020000 	strcs	r0, [r2], -r0
    4bb4:	00000282 	andeq	r0, r0, r2, lsl #5
    4bb8:	0010230b 	andseq	r2, r0, fp, lsl #6
    4bbc:	21060400 	tstcs	r6, r0, lsl #8
    4bc0:	00000305 	andeq	r0, r0, r5, lsl #6
    4bc4:	000f7a07 	andeq	r7, pc, r7, lsl #20
    4bc8:	12070000 	andne	r0, r7, #0
    4bcc:	01000010 	tsteq	r0, r0, lsl r0
    4bd0:	00104007 	andseq	r4, r0, r7
    4bd4:	af070200 	svcge	0x00070200
    4bd8:	0300000f 	movweq	r0, #15
    4bdc:	00106307 	andseq	r6, r0, r7, lsl #6
    4be0:	71070400 	tstvc	r7, r0, lsl #8
    4be4:	05000010 	streq	r0, [r0, #-16]
    4be8:	00101b07 	andseq	r1, r0, r7, lsl #22
    4bec:	93070600 	movwls	r0, #30208	; 0x7600
    4bf0:	0700000f 	streq	r0, [r0, -pc]
    4bf4:	000ff807 	andeq	pc, pc, r7, lsl #16
    4bf8:	51070800 	tstpl	r7, r0, lsl #16
    4bfc:	09000010 	stmdbeq	r0, {r4}
    4c00:	065c0800 	ldrbeq	r0, [ip], -r0, lsl #16
    4c04:	06100000 	ldreq	r0, [r0], -r0
    4c08:	00034a2f 	andeq	r4, r3, pc, lsr #20
    4c0c:	0ac90900 	beq	ff247014 <rEINTPEND+0xa9246f6c>
    4c10:	31060000 	tstcc	r6, r0
    4c14:	000002b1 	undefined instruction 0x000002b1
    4c18:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    4c1c:	000008e0 	andeq	r0, r0, r0, ror #17
    4c20:	034a3206 	movteq	r3, #41478	; 0xa206
    4c24:	23020000 	movwcs	r0, #8192	; 0x2000
    4c28:	09000908 	stmdbeq	r0, {r3, r8, fp}
    4c2c:	33060000 	movwcc	r0, #24576	; 0x6000
    4c30:	00000045 	andeq	r0, r0, r5, asr #32
    4c34:	090c2302 	stmdbeq	ip, {r1, r8, r9, sp}
    4c38:	00000427 	andeq	r0, r0, r7, lsr #8
    4c3c:	00453406 	subeq	r3, r5, r6, lsl #8
    4c40:	23020000 	movwcs	r0, #8192	; 0x2000
    4c44:	040a000d 	streq	r0, [sl], #-13
    4c48:	00000045 	andeq	r0, r0, r5, asr #32
    4c4c:	00065c04 	andeq	r5, r6, r4, lsl #24
    4c50:	05360600 	ldreq	r0, [r6, #-1536]!	; 0x600
    4c54:	08000003 	stmdaeq	r0, {r0, r1}
    4c58:	0000099f 	muleq	r0, pc, r9
    4c5c:	f03a066c 	undefined instruction 0xf03a066c
    4c60:	09000004 	stmdbeq	r0, {r2}
    4c64:	00001481 	andeq	r1, r0, r1, lsl #9
    4c68:	04f03b06 	ldrbteq	r3, [r0], #2822	; 0xb06
    4c6c:	23020000 	movwcs	r0, #8192	; 0x2000
    4c70:	044d0900 	strbeq	r0, [sp], #-2304	; 0x900
    4c74:	41060000 	tstmi	r6, r0
    4c78:	000002b1 	undefined instruction 0x000002b1
    4c7c:	09042302 	stmdbeq	r4, {r1, r8, r9, sp}
    4c80:	00000552 	andeq	r0, r0, r2, asr r5
    4c84:	04f64506 	ldrbteq	r4, [r6], #1286	; 0x506
    4c88:	23020000 	movwcs	r0, #8192	; 0x2000
    4c8c:	1aef090c 	bne	ffbc70c4 <rEINTPEND+0xa9bc701c>
    4c90:	4b060000 	blmi	184c98 <DISABLE_IRQ+0x184c18>
    4c94:	00000069 	andeq	r0, r0, r9, rrx
    4c98:	09102302 	ldmdbeq	r0, {r1, r8, r9, sp}
    4c9c:	00000878 	andeq	r0, r0, r8, ror r8
    4ca0:	00694c06 	rsbeq	r4, r9, r6, lsl #24
    4ca4:	23020000 	movwcs	r0, #8192	; 0x2000
    4ca8:	1d350914 	ldcne	9, cr0, [r5, #-80]!	; 0xffffffb0
    4cac:	4d060000 	stcmi	0, cr0, [r6]
    4cb0:	00000045 	andeq	r0, r0, r5, asr #32
    4cb4:	09182302 	ldmdbeq	r8, {r1, r8, r9, sp}
    4cb8:	00001e5a 	andeq	r1, r0, sl, asr lr
    4cbc:	00455106 	subeq	r5, r5, r6, lsl #2
    4cc0:	23020000 	movwcs	r0, #8192	; 0x2000
    4cc4:	03640919 	cmneq	r4, #409600	; 0x64000
    4cc8:	53060000 	movwpl	r0, #24576	; 0x6000
    4ccc:	00000045 	andeq	r0, r0, r5, asr #32
    4cd0:	091a2302 	ldmdbeq	sl, {r1, r8, r9, sp}
    4cd4:	0000043f 	andeq	r0, r0, pc, lsr r4
    4cd8:	00455606 	subeq	r5, r5, r6, lsl #12
    4cdc:	23020000 	movwcs	r0, #8192	; 0x2000
    4ce0:	0bad091b 	bleq	feb47154 <rEINTPEND+0xa8b470ac>
    4ce4:	5a060000 	bpl	184cec <DISABLE_IRQ+0x184c6c>
    4ce8:	0000056a 	andeq	r0, r0, sl, ror #10
    4cec:	091c2302 	ldmdbeq	ip, {r1, r8, r9, sp}
    4cf0:	00000bf8 	strdeq	r0, [r0], -r8
    4cf4:	02b15f06 	adcseq	r5, r1, #24
    4cf8:	23020000 	movwcs	r0, #8192	; 0x2000
    4cfc:	0b030920 	bleq	c7184 <DISABLE_IRQ+0xc7104>
    4d00:	63060000 	movwvs	r0, #24576	; 0x6000
    4d04:	00000069 	andeq	r0, r0, r9, rrx
    4d08:	09282302 	stmdbeq	r8!, {r1, r8, r9, sp}
    4d0c:	00000625 	andeq	r0, r0, r5, lsr #12
    4d10:	05706506 	ldrbeq	r6, [r0, #-1286]!	; 0x506
    4d14:	23020000 	movwcs	r0, #8192	; 0x2000
    4d18:	086e092c 	stmdaeq	lr!, {r2, r3, r5, r8, fp}^
    4d1c:	66060000 	strvs	r0, [r6], -r0
    4d20:	000002b1 	undefined instruction 0x000002b1
    4d24:	09302302 	ldmdbeq	r0!, {r1, r8, r9, sp}
    4d28:	00000c0e 	andeq	r0, r0, lr, lsl #24
    4d2c:	00a66806 	adceq	r6, r6, r6, lsl #16
    4d30:	23020000 	movwcs	r0, #8192	; 0x2000
    4d34:	07f30938 	undefined instruction 0x07f30938
    4d38:	69060000 	stmdbvs	r6, {}
    4d3c:	000000a6 	andeq	r0, r0, r6, lsr #1
    4d40:	093c2302 	ldmdbeq	ip!, {r1, r8, r9, sp}
    4d44:	000005a7 	andeq	r0, r0, r7, lsr #11
    4d48:	05766b06 	ldrbeq	r6, [r6, #-2822]!	; 0xb06
    4d4c:	23020000 	movwcs	r0, #8192	; 0x2000
    4d50:	736d0c40 	cmnvc	sp, #16384	; 0x4000
    4d54:	6d060067 	stcvs	0, cr0, [r6, #-412]	; 0xfffffe64
    4d58:	000004f0 	strdeq	r0, [r0], -r0
    4d5c:	09442302 	stmdbeq	r4, {r1, r8, r9, sp}^
    4d60:	00001630 	andeq	r1, r0, r0, lsr r6
    4d64:	00b17006 	adcseq	r7, r1, r6
    4d68:	23020000 	movwcs	r0, #8192	; 0x2000
    4d6c:	08db0948 	ldmeq	fp, {r3, r6, r8, fp}^
    4d70:	73060000 	movwvc	r0, #24576	; 0x6000
    4d74:	0000034a 	andeq	r0, r0, sl, asr #6
    4d78:	094c2302 	stmdbeq	ip, {r1, r8, r9, sp}^
    4d7c:	000009ac 	andeq	r0, r0, ip, lsr #19
    4d80:	00457506 	subeq	r7, r5, r6, lsl #10
    4d84:	23020000 	movwcs	r0, #8192	; 0x2000
    4d88:	07e60950 	ubfxeq	r0, r0, #18, #7
    4d8c:	76060000 	strvc	r0, [r6], -r0
    4d90:	00000045 	andeq	r0, r0, r5, asr #32
    4d94:	09512302 	ldmdbeq	r1, {r1, r8, r9, sp}^
    4d98:	0000053d 	andeq	r0, r0, sp, lsr r5
    4d9c:	057c7906 	ldrbeq	r7, [ip, #-2310]!	; 0x906
    4da0:	23020000 	movwcs	r0, #8192	; 0x2000
    4da4:	0ab50954 	beq	fed472fc <rEINTPEND+0xa8d47254>
    4da8:	7c060000 	stcvc	0, cr0, [r6], {0}
    4dac:	000005ff 	strdeq	r0, [r0], -pc
    4db0:	09582302 	ldmdbeq	r8, {r1, r8, r9, sp}^
    4db4:	0000022b 	andeq	r0, r0, fp, lsr #4
    4db8:	063c8006 	ldrteq	r8, [ip], -r6
    4dbc:	23020000 	movwcs	r0, #8192	; 0x2000
    4dc0:	04ad095c 	strteq	r0, [sp], #2396	; 0x95c
    4dc4:	84060000 	strhi	r0, [r6]
    4dc8:	00000045 	andeq	r0, r0, r5, asr #32
    4dcc:	09602302 	stmdbeq	r0!, {r1, r8, r9, sp}^
    4dd0:	00000255 	andeq	r0, r0, r5, asr r2
    4dd4:	00698506 	rsbeq	r8, r9, r6, lsl #10
    4dd8:	23020000 	movwcs	r0, #8192	; 0x2000
    4ddc:	075a0964 	ldrbeq	r0, [sl, -r4, ror #18]
    4de0:	86060000 	strhi	r0, [r6], -r0
    4de4:	000004f0 	strdeq	r0, [r0], -r0
    4de8:	00682302 	rsbeq	r2, r8, r2, lsl #6
    4dec:	0025040a 	eoreq	r0, r5, sl, lsl #8
    4df0:	f00d0000 	undefined instruction 0xf00d0000
    4df4:	06000004 	streq	r0, [r0], -r4
    4df8:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
    4dfc:	00000506 	andeq	r0, r0, r6, lsl #10
    4e00:	040f0000 	streq	r0, [pc], #0	; 4e08 <DISABLE_IRQ+0x4d88>
    4e04:	0b2f0807 	bleq	bc6e28 <MEM_SIZE+0x3c6e28>
    4e08:	061c0000 	ldreq	r0, [ip], -r0
    4e0c:	00056a5a 	andeq	r6, r5, sl, asr sl
    4e10:	05360900 	ldreq	r0, [r6, #-2304]!	; 0x900
    4e14:	27070000 	strcs	r0, [r7, -r0]
    4e18:	00000350 	andeq	r0, r0, r0, asr r3
    4e1c:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    4e20:	00000867 	andeq	r0, r0, r7, ror #16
    4e24:	07132a07 	ldreq	r2, [r3, -r7, lsl #20]
    4e28:	23020000 	movwcs	r0, #8192	; 0x2000
    4e2c:	0bad0910 	bleq	feb47274 <rEINTPEND+0xa8b471cc>
    4e30:	2c070000 	stccs	0, cr0, [r7], {0}
    4e34:	0000056a 	andeq	r0, r0, sl, ror #10
    4e38:	09142302 	ldmdbeq	r4, {r1, r8, r9, sp}
    4e3c:	000005f6 	strdeq	r0, [r0], -r6
    4e40:	00452e07 	subeq	r2, r5, r7, lsl #28
    4e44:	23020000 	movwcs	r0, #8192	; 0x2000
    4e48:	04730918 	ldrbteq	r0, [r3], #-2328	; 0x918
    4e4c:	2f070000 	svccs	0x00070000
    4e50:	00000045 	andeq	r0, r0, r5, asr #32
    4e54:	09192302 	ldmdbeq	r9, {r1, r8, r9, sp}
    4e58:	0000048e 	andeq	r0, r0, lr, lsl #9
    4e5c:	00453007 	subeq	r3, r5, r7
    4e60:	23020000 	movwcs	r0, #8192	; 0x2000
    4e64:	040a001a 	streq	r0, [sl], #-26
    4e68:	00000509 	andeq	r0, r0, r9, lsl #10
    4e6c:	009b040a 	addseq	r0, fp, sl, lsl #8
    4e70:	040a0000 	streq	r0, [sl]
    4e74:	000002b1 	undefined instruction 0x000002b1
    4e78:	0350040a 	cmpeq	r0, #167772160	; 0xa000000
    4e7c:	4b080000 	blmi	204e84 <DISABLE_IRQ+0x204e04>
    4e80:	2c000007 	stccs	0, cr0, [r0], {7}
    4e84:	05ff7c06 	ldrbeq	r7, [pc, #3078]!	; 5a92 <DISABLE_IRQ+0x5a12>
    4e88:	36090000 	strcc	r0, [r9], -r0
    4e8c:	08000005 	stmdaeq	r0, {r0, r2}
    4e90:	0003502e 	andeq	r5, r3, lr, lsr #32
    4e94:	00230200 	eoreq	r0, r3, r0, lsl #4
    4e98:	0007dd09 	andeq	sp, r7, r9, lsl #26
    4e9c:	fb300800 	blx	c06ea6 <MEM_SIZE+0x406ea6>
    4ea0:	02000006 	andeq	r0, r0, #6
    4ea4:	e4091023 	str	r1, [r9], #-35	; 0x23
    4ea8:	08000005 	stmdaeq	r0, {r0, r2}
    4eac:	0000b131 	andeq	fp, r0, r1, lsr r1
    4eb0:	14230200 	strtne	r0, [r3], #-512	; 0x200
    4eb4:	000b0e09 	andeq	r0, fp, r9, lsl #28
    4eb8:	b1320800 	teqlt	r2, r0, lsl #16
    4ebc:	02000000 	andeq	r0, r0, #0
    4ec0:	f0091823 	undefined instruction 0xf0091823
    4ec4:	08000005 	stmdaeq	r0, {r0, r2}
    4ec8:	0006fb34 	andeq	pc, r6, r4, lsr fp
    4ecc:	1c230200 	sfmne	f0, 4, [r3]	; (stcne 2, cr0, [r3])
    4ed0:	00014e09 	andeq	r4, r1, r9, lsl #28
    4ed4:	fb350800 	blx	d46ede <MEM_SIZE+0x546ede>
    4ed8:	02000006 	andeq	r0, r0, #6
    4edc:	27092023 	strcs	r2, [r9, -r3, lsr #32]
    4ee0:	08000005 	stmdaeq	r0, {r0, r2}
    4ee4:	0000b136 	andeq	fp, r0, r6, lsr r1
    4ee8:	24230200 	strtcs	r0, [r3], #-512	; 0x200
    4eec:	00049b09 	andeq	r9, r4, r9, lsl #22
    4ef0:	b1370800 	teqlt	r7, r0, lsl #16
    4ef4:	02000000 	andeq	r0, r0, #0
    4ef8:	0a002823 	beq	ef8c <DISABLE_IRQ+0xef0c>
    4efc:	00058204 	andeq	r8, r5, r4, lsl #4
    4f00:	0aa70800 	beq	fe9c6f08 <rEINTPEND+0xa89c6e60>
    4f04:	06180000 	ldreq	r0, [r8], -r0
    4f08:	00063c80 	andeq	r3, r6, r0, lsl #25
    4f0c:	05360900 	ldreq	r0, [r6, #-2304]!	; 0x900
    4f10:	22090000 	andcs	r0, r9, #0
    4f14:	00000350 	andeq	r0, r0, r0, asr r3
    4f18:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    4f1c:	00000447 	andeq	r0, r0, r7, asr #8
    4f20:	00692309 	rsbeq	r2, r9, r9, lsl #6
    4f24:	23020000 	movwcs	r0, #8192	; 0x2000
    4f28:	1b3f0910 	blne	fc7370 <MEM_SIZE+0x7c7370>
    4f2c:	24090000 	strcs	r0, [r9]
    4f30:	0000070d 	andeq	r0, r0, sp, lsl #14
    4f34:	00142302 	andseq	r2, r4, r2, lsl #6
    4f38:	0605040a 	streq	r0, [r5], -sl, lsl #8
    4f3c:	9f040000 	svcls	0x00040000
    4f40:	06000009 	streq	r0, [r0], -r9
    4f44:	00035b89 	andeq	r5, r3, r9, lsl #23
    4f48:	14af1000 	strtne	r1, [pc], #0	; 4f50 <DISABLE_IRQ+0x4ed0>
    4f4c:	01fc0000 	mvnseq	r0, r0
    4f50:	06868f06 	streq	r8, [r6], r6, lsl #30
    4f54:	cf090000 	svcgt	0x00090000
    4f58:	06000013 	undefined instruction 0x06000013
    4f5c:	00004591 	muleq	r0, r1, r5
    4f60:	00230200 	eoreq	r0, r3, r0, lsl #4
    4f64:	00139109 	andseq	r9, r3, r9, lsl #2
    4f68:	86930600 	ldrhi	r0, [r3], r0, lsl #12
    4f6c:	02000006 	andeq	r0, r0, #6
    4f70:	2c090423 	cfstrscs	mvf0, [r9], {35}	; 0x23
    4f74:	06000014 	undefined instruction 0x06000014
    4f78:	00069695 	muleq	r6, r5, r6
    4f7c:	f4230300 	vld2.8	{d0-d3}, [r3], r0
    4f80:	b10d0003 	tstlt	sp, r3
    4f84:	96000002 	strls	r0, [r0], -r2
    4f88:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    4f8c:	00000506 	andeq	r0, r0, r6, lsl #10
    4f90:	690d003d 	stmdbvs	sp, {r0, r2, r3, r4, r5}
    4f94:	a6000000 	strge	r0, [r0], -r0
    4f98:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    4f9c:	00000506 	andeq	r0, r0, r6, lsl #10
    4fa0:	af040001 	svcge	0x00040001
    4fa4:	06000014 	undefined instruction 0x06000014
    4fa8:	00064d97 	muleq	r6, r7, sp
    4fac:	0b610800 	bleq	1846fb4 <MEM_SIZE+0x1046fb4>
    4fb0:	080c0000 	stmdaeq	ip, {}
    4fb4:	0006e821 	andeq	lr, r6, r1, lsr #16
    4fb8:	03110900 	tsteq	r1, #0
    4fbc:	23080000 	movwcs	r0, #32768	; 0x8000
    4fc0:	000006e8 	andeq	r0, r0, r8, ror #13
    4fc4:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    4fc8:	000005dc 	ldrdeq	r0, [r0], -ip
    4fcc:	06ee2408 	strbteq	r2, [lr], r8, lsl #8
    4fd0:	23020000 	movwcs	r0, #8192	; 0x2000
    4fd4:	16300904 	ldrtne	r0, [r0], -r4, lsl #18
    4fd8:	25080000 	strcs	r0, [r8]
    4fdc:	000000b1 	strheq	r0, [r0], -r1
    4fe0:	00082302 	andeq	r2, r8, r2, lsl #6
    4fe4:	06b1040a 	ldrteq	r0, [r1], sl, lsl #8
    4fe8:	04110000 	ldreq	r0, [r1]
    4fec:	000b6104 	andeq	r6, fp, r4, lsl #2
    4ff0:	b1270800 	teqlt	r7, r0, lsl #16
    4ff4:	0a000006 	beq	5014 <DISABLE_IRQ+0x4f94>
    4ff8:	0006f004 	andeq	pc, r6, r4
    4ffc:	0d011200 	sfmeq	f1, 4, [r1]	; (stceq 2, cr1, [r1])
    5000:	13000007 	movwne	r0, #7
    5004:	0000063c 	andeq	r0, r0, ip, lsr r6
    5008:	01040a00 	tsteq	r4, r0, lsl #20
    500c:	0a000007 	beq	5030 <DISABLE_IRQ+0x4fb0>
    5010:	00064204 	andeq	r4, r6, r4, lsl #4
    5014:	22471400 	subcs	r1, r7, #0
    5018:	2f020000 	svccs	0x00020000
    501c:	07320301 	ldreq	r0, [r2, -r1, lsl #6]!
    5020:	a3150000 	tstge	r5, #0
    5024:	0200000d 	andeq	r0, r0, #13
    5028:	0005762f 	andeq	r7, r5, pc, lsr #12
    502c:	20140000 	andscs	r0, r4, r0
    5030:	02000022 	andeq	r0, r0, #34	; 0x22
    5034:	56030143 	strpl	r0, [r3], -r3, asr #2
    5038:	15000007 	strne	r0, [r0, #-7]
    503c:	000005ac 	andeq	r0, r0, ip, lsr #11
    5040:	05764302 	ldrbeq	r4, [r6, #-770]!	; 0x302
    5044:	b6150000 	ldrlt	r0, [r5], -r0
    5048:	02000016 	andeq	r0, r0, #22
    504c:	00057643 	andeq	r7, r5, r3, asr #12
    5050:	39140000 	ldmdbcc	r4, {}
    5054:	01000015 	tsteq	r0, r5, lsl r0
    5058:	8f03014e 	svchi	0x0003014e
    505c:	15000007 	strne	r0, [r0, #-7]
    5060:	00000630 	andeq	r0, r0, r0, lsr r6
    5064:	06ee4e01 	strbteq	r4, [lr], r1, lsl #28
    5068:	94150000 	ldrls	r0, [r5]
    506c:	01000001 	tsteq	r0, r1
    5070:	0000454e 	andeq	r4, r0, lr, asr #10
    5074:	70631600 	rsbvc	r1, r3, r0, lsl #12
    5078:	4a500100 	bmi	1405480 <MEM_SIZE+0xc05480>
    507c:	17000003 	strne	r0, [r0, -r3]
    5080:	00000c74 	andeq	r0, r0, r4, ror ip
    5084:	00455001 	subeq	r5, r5, r1
    5088:	18000000 	stmdane	r0, {}
    508c:	0015a601 	andseq	sl, r5, r1, lsl #12
    5090:	016d0100 	cmneq	sp, r0, lsl #2
    5094:	0007be01 	andeq	fp, r7, r1, lsl #28
    5098:	71721900 	cmnvc	r2, r0, lsl #18
    509c:	be6d0100 	powlte	f0, f5, f0
    50a0:	15000007 	strne	r0, [r0, #-7]
    50a4:	00000d94 	muleq	r0, r4, sp
    50a8:	07136d01 	ldreq	r6, [r3, -r1, lsl #26]
    50ac:	5a170000 	bpl	5c50b4 <DISABLE_IRQ+0x5c5034>
    50b0:	0100001e 	tsteq	r0, lr, lsl r0
    50b4:	00004570 	andeq	r4, r0, r0, ror r5
    50b8:	040a0000 	streq	r0, [sl]
    50bc:	000006a6 	andeq	r0, r0, r6, lsr #13
    50c0:	16960118 	undefined instruction 0x16960118
    50c4:	5c010000 	stcpl	0, cr0, [r1], {0}
    50c8:	07f30101 	ldrbeq	r0, [r3, r1, lsl #2]!
    50cc:	72190000 	andsvc	r0, r9, #0
    50d0:	5c010071 	stcpl	0, cr0, [r1], {113}	; 0x71
    50d4:	000007be 	undefined instruction 0x000007be
    50d8:	000d9415 	andeq	r9, sp, r5, lsl r4
    50dc:	135c0100 	cmpne	ip, #0
    50e0:	17000007 	strne	r0, [r0, -r7]
    50e4:	00001e5a 	andeq	r1, r0, sl, asr lr
    50e8:	00455e01 	subeq	r5, r5, r1, lsl #28
    50ec:	14000000 	strne	r0, [r0]
    50f0:	0000152d 	andeq	r1, r0, sp, lsr #10
    50f4:	03014e02 	movweq	r4, #7682	; 0x1e02
    50f8:	0000080c 	andeq	r0, r0, ip, lsl #16
    50fc:	0016b615 	andseq	fp, r6, r5, lsl r6
    5100:	764e0200 	strbvc	r0, [lr], -r0, lsl #4
    5104:	00000005 	andeq	r0, r0, r5
    5108:	00160814 	andseq	r0, r6, r4, lsl r8
    510c:	012c0100 	teqeq	ip, r0, lsl #2
    5110:	00085a03 	andeq	r5, r8, r3, lsl #20
    5114:	05ac1500 	streq	r1, [ip, #1280]!	; 0x500
    5118:	2c010000 	stccs	0, cr0, [r1], {0}
    511c:	00000576 	andeq	r0, r0, r6, ror r5
    5120:	000d9415 	andeq	r9, sp, r5, lsl r4
    5124:	132c0100 	teqne	ip, #0
    5128:	16000007 	strne	r0, [r0], -r7
    512c:	006c6176 	rsbeq	r6, ip, r6, ror r1
    5130:	00452e01 	subeq	r2, r5, r1, lsl #28
    5134:	71160000 	tstvc	r6, r0
    5138:	76300100 	ldrtvc	r0, [r0], -r0, lsl #2
    513c:	17000005 	strne	r0, [r0, -r5]
    5140:	00001580 	andeq	r1, r0, r0, lsl #11
    5144:	05763001 	ldrbeq	r3, [r6, #-1]!
    5148:	b0170000 	andslt	r0, r7, r0
    514c:	01000015 	tsteq	r0, r5, lsl r0
    5150:	00057630 	andeq	r7, r5, r0, lsr r6
    5154:	601a0000 	andsvs	r0, sl, r0
    5158:	0200000e 	andeq	r0, r0, #14
    515c:	00330138 	eorseq	r0, r3, r8, lsr r1
    5160:	77030000 	strvc	r0, [r3, -r0]
    5164:	15000008 	strne	r0, [r0, #-8]
    5168:	00000144 	andeq	r0, r0, r4, asr #2
    516c:	05763802 	ldrbeq	r3, [r6, #-2050]!	; 0x802
    5170:	14000000 	strne	r0, [r0]
    5174:	0000158b 	andeq	r1, r0, fp, lsl #11
    5178:	03014101 	movweq	r4, #4353	; 0x1101
    517c:	000008b0 	undefined instruction 0x000008b0
    5180:	00063015 	andeq	r3, r6, r5, lsl r0
    5184:	ee410100 	dvfs	f0, f1, f0
    5188:	15000006 	strne	r0, [r0, #-6]
    518c:	00000194 	muleq	r0, r4, r1
    5190:	00454101 	subeq	r4, r5, r1, lsl #2
    5194:	63160000 	tstvs	r6, #0
    5198:	43010070 	movwmi	r0, #4208	; 0x1070
    519c:	0000034a 	andeq	r0, r0, sl, asr #6
    51a0:	000c7417 	andeq	r7, ip, r7, lsl r4
    51a4:	45430100 	strbmi	r0, [r3, #-256]	; 0x100
    51a8:	00000000 	andeq	r0, r0, r0
    51ac:	1687011b 	pkhbtne	r0, r7, fp, lsl #2
    51b0:	1f010000 	svcne	0x00010000
    51b4:	00227c01 	eoreq	r7, r2, r1, lsl #24
    51b8:	0022b430 	eoreq	fp, r2, r0, lsr r4
    51bc:	f25d0130 	vbic	d16, d13, d16
    51c0:	1c000008 	stcne	0, cr0, [r0], {8}
    51c4:	01007172 	tsteq	r0, r2, ror r1
    51c8:	0007be1f 	andeq	fp, r7, pc, lsl lr
    51cc:	16500100 	ldrbne	r0, [r0], -r0, lsl #2
    51d0:	21010069 	tstcs	r1, r9, rrx
    51d4:	00000045 	andeq	r0, r0, r5, asr #32
    51d8:	0007191d 	andeq	r1, r7, sp, lsl r9
    51dc:	00229000 	eoreq	r9, r2, r0
    51e0:	00010030 	andeq	r0, r1, r0, lsr r0
    51e4:	1e270100 	sufnes	f0, f7, f0
    51e8:	00000726 	andeq	r0, r0, r6, lsr #14
    51ec:	c41f0000 	ldrgt	r0, [pc], #0	; 51f4 <DISABLE_IRQ+0x5174>
    51f0:	b4000007 	strlt	r0, [r0], #-7
    51f4:	0c300022 	ldceq	0, cr0, [r0], #-136	; 0xffffff78
    51f8:	66300023 	ldrtvs	r0, [r0], -r3, lsr #32
    51fc:	69000018 	stmdbvs	r0, {r3, r4}
    5200:	20000009 	andcs	r0, r0, r9
    5204:	000007d2 	ldrdeq	r0, [r0], -r2
    5208:	dc215001 	stcle	0, cr5, [r1], #-4
    520c:	85000007 	strhi	r0, [r0, #-7]
    5210:	22000018 	andcs	r0, r0, #24
    5214:	000007e7 	andeq	r0, r0, r7, ror #15
    5218:	56235301 	strtpl	r5, [r3], -r1, lsl #6
    521c:	c8000007 	stmdagt	r0, {r0, r1, r2}
    5220:	18300022 	ldmdane	r0!, {r1, r5}
    5224:	01000001 	tsteq	r0, r1
    5228:	00094e61 	andeq	r4, r9, r1, ror #28
    522c:	076e1e00 	strbeq	r1, [lr, -r0, lsl #28]!
    5230:	631e0000 	tstvs	lr, #0
    5234:	24000007 	strcs	r0, [r0], #-7
    5238:	00000130 	andeq	r0, r0, r0, lsr r1
    523c:	00077922 	andeq	r7, r7, r2, lsr #18
    5240:	25510100 	ldrbcs	r0, [r1, #-256]	; 0x100
    5244:	00000783 	andeq	r0, r0, r3, lsl #15
    5248:	32260000 	eorcc	r0, r6, #0
    524c:	cc000007 	stcgt	0, cr0, [r0], {7}
    5250:	e0300022 	eors	r0, r0, r2, lsr #32
    5254:	01300022 	teqeq	r0, r2, lsr #32
    5258:	074a1e60 	strbeq	r1, [sl, -r0, ror #28]
    525c:	3f1e0000 	svccc	0x001e0000
    5260:	00000007 	andeq	r0, r0, r7
    5264:	078f1f00 	streq	r1, [pc, r0, lsl #30]
    5268:	230c0000 	movwcs	r0, #49152	; 0xc000
    526c:	23683000 	cmncs	r8, #0
    5270:	18983000 	ldmne	r8, {ip, sp}
    5274:	09e40000 	stmibeq	r4!, {}^
    5278:	9d200000 	stcls	0, cr0, [r0]
    527c:	01000007 	tsteq	r0, r7
    5280:	07a72150 	sbfxeq	r2, r0, #2, #8
    5284:	18b70000 	ldmne	r7!, {}
    5288:	b2220000 	eorlt	r0, r2, #0
    528c:	01000007 	tsteq	r0, r7
    5290:	07322753 	undefined instruction 0x07322753
    5294:	23180000 	tstcs	r8, #0
    5298:	23383000 	teqcs	r8, #0
    529c:	72013000 	andvc	r3, r1, #0
    52a0:	000009b3 	undefined instruction 0x000009b3
    52a4:	00074a1e 	andeq	r4, r7, lr, lsl sl
    52a8:	073f1e00 	ldreq	r1, [pc, -r0, lsl #28]!
    52ac:	26000000 	strcs	r0, [r0], -r0
    52b0:	00000756 	andeq	r0, r0, r6, asr r7
    52b4:	30002338 	andcc	r2, r0, r8, lsr r3
    52b8:	30002354 	andcc	r2, r0, r4, asr r3
    52bc:	6e1e7301 	cdpvs	3, 1, cr7, cr14, cr1, {0}
    52c0:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    52c4:	00000763 	andeq	r0, r0, r3, ror #14
    52c8:	00233828 	eoreq	r3, r3, r8, lsr #16
    52cc:	00235430 	eoreq	r5, r3, r0, lsr r4
    52d0:	07792230 	undefined instruction 0x07792230
    52d4:	51010000 	tstpl	r1, r0
    52d8:	00078325 	andeq	r8, r7, r5, lsr #6
    52dc:	00000000 	andeq	r0, r0, r0
    52e0:	15710129 	ldrbne	r0, [r1, #-297]!	; 0x129
    52e4:	81010000 	tsthi	r1, r0
    52e8:	00236801 	eoreq	r6, r3, r1, lsl #16
    52ec:	00242830 	eoreq	r2, r4, r0, lsr r8
    52f0:	0018ca30 	andseq	ip, r8, r0, lsr sl
    52f4:	000b0f00 	andeq	r0, fp, r0, lsl #30
    52f8:	71721c00 	cmnvc	r2, r0, lsl #24
    52fc:	be810100 	rmflts	f0, f1, f0
    5300:	01000007 	tsteq	r0, r7
    5304:	0d942a50 	vldreq	s4, [r4, #320]	; 0x140
    5308:	81010000 	tsthi	r1, r0
    530c:	00000713 	andeq	r0, r0, r3, lsl r7
    5310:	000018e9 	andeq	r1, r0, r9, ror #17
    5314:	0007c427 	andeq	ip, r7, r7, lsr #8
    5318:	00238400 	eoreq	r8, r3, r0, lsl #8
    531c:	0023cc30 	eoreq	ip, r3, r0, lsr ip
    5320:	95890130 	strls	r0, [r9, #304]	; 0x130
    5324:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    5328:	0000090e 	andeq	r0, r0, lr, lsl #18
    532c:	0009071e 	andeq	r0, r9, lr, lsl r7
    5330:	23842800 	orrcs	r2, r4, #0
    5334:	23cc3000 	biccs	r3, ip, #0
    5338:	e7253000 	str	r3, [r5, -r0]!
    533c:	27000007 	strcs	r0, [r0, -r7]
    5340:	00000732 	andeq	r0, r0, r2, lsr r7
    5344:	30002390 	mulcc	r0, r0, r3
    5348:	300023a4 	andcc	r2, r0, r4, lsr #7
    534c:	0a616001 	beq	185d358 <MEM_SIZE+0x105d358>
    5350:	4a1e0000 	bmi	785358 <DISABLE_IRQ+0x7852d8>
    5354:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    5358:	0000073f 	andeq	r0, r0, pc, lsr r7
    535c:	07562600 	ldrbeq	r2, [r6, -r0, lsl #12]
    5360:	23a40000 	undefined instruction 0x23a40000
    5364:	23c03000 	biccs	r3, r0, #0
    5368:	61013000 	tstvs	r1, r0
    536c:	0007631e 	andeq	r6, r7, lr, lsl r3
    5370:	076e1e00 	strbeq	r1, [lr, -r0, lsl #28]!
    5374:	a4280000 	strtge	r0, [r8]
    5378:	c0300023 	eorsgt	r0, r0, r3, lsr #32
    537c:	2b300023 	blcs	c05410 <MEM_SIZE+0x405410>
    5380:	00000779 	andeq	r0, r0, r9, ror r7
    5384:	00001907 	andeq	r1, r0, r7, lsl #18
    5388:	00078325 	andeq	r8, r7, r5, lsr #6
    538c:	00000000 	andeq	r0, r0, r0
    5390:	078f2600 	streq	r2, [pc, r0, lsl #12]
    5394:	23d40000 	bicscs	r0, r4, #0
    5398:	24283000 	strtcs	r3, [r8]
    539c:	85013000 	strhi	r3, [r1]
    53a0:	0009851e 	andeq	r8, r9, lr, lsl r5
    53a4:	097e1e00 	ldmdbeq	lr!, {r9, sl, fp, ip}^
    53a8:	d4280000 	strtle	r0, [r8]
    53ac:	28300023 	ldmdacs	r0!, {r0, r1, r5}
    53b0:	25300024 	ldrcs	r0, [r0, #-36]!	; 0x24
    53b4:	000007b2 	undefined instruction 0x000007b2
    53b8:	00073223 	andeq	r3, r7, r3, lsr #4
    53bc:	0023d400 	eoreq	sp, r3, r0, lsl #8
    53c0:	00014830 	andeq	r4, r1, r0, lsr r8
    53c4:	da720100 	ble	1c857cc <MEM_SIZE+0x14857cc>
    53c8:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    53cc:	0000074a 	andeq	r0, r0, sl, asr #14
    53d0:	00073f1e 	andeq	r3, r7, lr, lsl pc
    53d4:	56260000 	strtpl	r0, [r6], -r0
    53d8:	f8000007 	undefined instruction 0xf8000007
    53dc:	14300023 	ldrtne	r0, [r0], #-35	; 0x23
    53e0:	01300024 	teqeq	r0, r4, lsr #32
    53e4:	07631e73 	undefined instruction 0x07631e73
    53e8:	6e1e0000 	cdpvs	0, 1, cr0, cr14, cr0, {0}
    53ec:	28000007 	stmdacs	r0, {r0, r1, r2}
    53f0:	300023f8 	strdcc	r2, [r0], -r8
    53f4:	30002414 	andcc	r2, r0, r4, lsl r4
    53f8:	0007792b 	andeq	r7, r7, fp, lsr #18
    53fc:	00191a00 	andseq	r1, r9, r0, lsl #20
    5400:	07832500 	streq	r2, [r3, r0, lsl #10]
    5404:	00000000 	andeq	r0, r0, r0
    5408:	29000000 	stmdbcs	r0, {}
    540c:	00165101 	andseq	r5, r6, r1, lsl #2
    5410:	01b60100 	undefined instruction 0x01b60100
    5414:	30002428 	andcc	r2, r0, r8, lsr #8
    5418:	3000246c 	andcc	r2, r0, ip, ror #8
    541c:	00001938 	andeq	r1, r0, r8, lsr r9
    5420:	00000b82 	andeq	r0, r0, r2, lsl #23
    5424:	0071722c 	rsbseq	r7, r1, ip, lsr #4
    5428:	07beb601 	ldreq	fp, [lr, r1, lsl #12]!
    542c:	19570000 	ldmdbne	r7, {}^
    5430:	942d0000 	strtls	r0, [sp]
    5434:	0100000d 	tsteq	r0, sp
    5438:	000713b6 	undefined instruction 0x000713b6
    543c:	17510100 	ldrbne	r0, [r1, -r0, lsl #2]
    5440:	000005ac 	andeq	r0, r0, ip, lsr #11
    5444:	0576b901 	ldrbeq	fp, [r6, #-2305]!	; 0x901
    5448:	f3230000 	vhadd.u32	d0, d3, d0
    544c:	28000007 	stmdacs	r0, {r0, r1, r2}
    5450:	60300024 	eorsvs	r0, r0, r4, lsr #32
    5454:	01000001 	tsteq	r0, r1
    5458:	000b67bb 	undefined instruction 0x000b67bb
    545c:	08001e00 	stmdaeq	r0, {r9, sl, fp, ip}
    5460:	1d000000 	stcne	0, cr0, [r0]
    5464:	00000732 	andeq	r0, r0, r2, lsr r7
    5468:	30002444 	andcc	r2, r0, r4, asr #8
    546c:	00000180 	andeq	r0, r0, r0, lsl #3
    5470:	4a1ebc01 	bmi	7b447c <DISABLE_IRQ+0x7b43fc>
    5474:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    5478:	0000073f 	andeq	r0, r0, pc, lsr r7
    547c:	011b0000 	tsteq	fp, r0
    5480:	00001678 	andeq	r1, r0, r8, ror r6
    5484:	6c01c301 	stcvs	3, cr12, [r1], {1}
    5488:	ac300024 	ldcge	0, cr0, [r0], #-144	; 0xffffff70
    548c:	01300024 	teqeq	r0, r4, lsr #32
    5490:	000bbe5d 	andeq	fp, fp, sp, asr lr
    5494:	71722c00 	cmnvc	r2, r0, lsl #24
    5498:	bec30100 	pollts	f0, f3, f0
    549c:	6a000007 	bvs	54c0 <DISABLE_IRQ+0x5440>
    54a0:	17000019 	smladne	r0, r9, r0, r0
    54a4:	00001f8f 	andeq	r1, r0, pc, lsl #31
    54a8:	0576c501 	ldrbeq	ip, [r6, #-1281]!	; 0x501
    54ac:	41170000 	tstmi	r7, r0
    54b0:	01000020 	tsteq	r0, r0, lsr #32
    54b4:	000045c6 	andeq	r4, r0, r6, asr #11
    54b8:	012e0000 	teqeq	lr, r0
    54bc:	000015c1 	andeq	r1, r0, r1, asr #11
    54c0:	01019801 	tsteq	r1, r1, lsl #16
    54c4:	300024ac 	andcc	r2, r0, ip, lsr #9
    54c8:	30002524 	andcc	r2, r0, r4, lsr #10
    54cc:	0c5e5d01 	mrrceq	13, 0, r5, lr, cr1
    54d0:	942f0000 	strtls	r0, [pc], #0	; 54d8 <DISABLE_IRQ+0x5458>
    54d4:	0100000d 	tsteq	r0, sp
    54d8:	07130198 	undefined instruction 0x07130198
    54dc:	50010000 	andpl	r0, r1, r0
    54e0:	001f8330 	andseq	r8, pc, r0, lsr r3
    54e4:	019b0100 	orrseq	r0, fp, r0, lsl #2
    54e8:	0000057c 	andeq	r0, r0, ip, ror r5
    54ec:	0007f331 	andeq	pc, r7, r1, lsr r3
    54f0:	0024bc00 	eoreq	fp, r4, r0, lsl #24
    54f4:	00019830 	andeq	r9, r1, r0, lsr r8
    54f8:	019f0100 	orrseq	r0, pc, r0, lsl #2
    54fc:	00000c0a 	andeq	r0, r0, sl, lsl #24
    5500:	0008001e 	andeq	r0, r8, lr, lsl r0
    5504:	0c320000 	ldceq	0, cr0, [r2]
    5508:	cc000008 	stcgt	0, cr0, [r0], {8}
    550c:	b0300024 	eorslt	r0, r0, r4, lsr #32
    5510:	01000001 	tsteq	r0, r1
    5514:	241e01a0 	ldrcs	r0, [lr], #-416	; 0x1a0
    5518:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
    551c:	00000819 	andeq	r0, r0, r9, lsl r8
    5520:	0001c824 	andeq	ip, r1, r4, lsr #16
    5524:	082f2200 	stmdaeq	pc!, {r9, sp}
    5528:	5c010000 	stcpl	0, cr0, [r1], {0}
    552c:	00083a22 	andeq	r3, r8, r2, lsr #20
    5530:	25530100 	ldrbcs	r0, [r3, #-256]	; 0x100
    5534:	00000843 	andeq	r0, r0, r3, asr #16
    5538:	00084e25 	andeq	r4, r8, r5, lsr #28
    553c:	07321d00 	ldreq	r1, [r2, -r0, lsl #26]!
    5540:	24fc0000 	ldrbtcs	r0, [ip]
    5544:	01e03000 	mvneq	r3, r0
    5548:	3c010000 	stccc	0, cr0, [r1], {0}
    554c:	00074a1e 	andeq	r4, r7, lr, lsl sl
    5550:	073f1e00 	ldreq	r1, [pc, -r0, lsl #28]!
    5554:	00000000 	andeq	r0, r0, r0
    5558:	01330000 	teqeq	r3, r0
    555c:	000015db 	ldrdeq	r1, [r0], -fp
    5560:	01016c01 	tsteq	r1, r1, lsl #24
    5564:	00000050 	andeq	r0, r0, r0, asr r0
    5568:	30002524 	andcc	r2, r0, r4, lsr #10
    556c:	300025b8 	undefined instruction 0x300025b8
    5570:	0000197d 	andeq	r1, r0, sp, ror r9
    5574:	00000cbd 	undefined instruction 0x00000cbd
    5578:	000d9434 	andeq	r9, sp, r4, lsr r4
    557c:	016c0100 	cmneq	ip, r0, lsl #2
    5580:	00000713 	andeq	r0, r0, r3, lsl r7
    5584:	0000199c 	muleq	r0, ip, r9
    5588:	0007f335 	andeq	pc, r7, r5, lsr r3
    558c:	00255400 	eoreq	r5, r5, r0, lsl #8
    5590:	00256430 	eoreq	r6, r5, r0, lsr r4
    5594:	017e0130 	cmneq	lr, r0, lsr r1
    5598:	00000ca6 	andeq	r0, r0, r6, lsr #25
    559c:	0008001e 	andeq	r0, r8, lr, lsl r0
    55a0:	f3320000 	vhadd.u<illegal width 64>	d0, d2, d0
    55a4:	8c000007 	stchi	0, cr0, [r0], {7}
    55a8:	f8300025 	undefined instruction 0xf8300025
    55ac:	01000001 	tsteq	r0, r1
    55b0:	001e0173 	andseq	r0, lr, r3, ror r1
    55b4:	00000008 	andeq	r0, r0, r8
    55b8:	15f63600 	ldrbne	r3, [r6, #1536]!	; 0x600
    55bc:	e9010000 	stmdb	r1, {}
    55c0:	00005001 	andeq	r5, r0, r1
    55c4:	0025b800 	eoreq	fp, r5, r0, lsl #16
    55c8:	00264830 	eoreq	r4, r6, r0, lsr r8
    55cc:	0019ba30 	andseq	fp, r9, r0, lsr sl
    55d0:	000d1800 	andeq	r1, sp, r0, lsl #16
    55d4:	0d942a00 	vldreq	s4, [r4]
    55d8:	e9010000 	stmdb	r1, {}
    55dc:	00000713 	andeq	r0, r0, r3, lsl r7
    55e0:	000019d9 	ldrdeq	r1, [r0], -r9
    55e4:	0007f335 	andeq	pc, r7, r5, lsr r3
    55e8:	0025e800 	eoreq	lr, r5, r0, lsl #16
    55ec:	0025f830 	eoreq	pc, r5, r0, lsr r8
    55f0:	01000130 	tsteq	r0, r0, lsr r1
    55f4:	00000d02 	andeq	r0, r0, r2, lsl #26
    55f8:	0008001e 	andeq	r0, r8, lr, lsl r0
    55fc:	f31d0000 	vhadd.u16	d0, d13, d0
    5600:	1c000007 	stcne	0, cr0, [r0], {7}
    5604:	18300026 	ldmdane	r0!, {r1, r2, r5}
    5608:	01000002 	tsteq	r0, r2
    560c:	08001ef3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, r9, sl, fp, ip}
    5610:	00000000 	andeq	r0, r0, r0
    5614:	16260137 	undefined instruction 0x16260137
    5618:	30010000 	andcc	r0, r1, r0
    561c:	00500101 	subseq	r0, r0, r1, lsl #2
    5620:	26480000 	strbcs	r0, [r8], -r0
    5624:	26543000 	ldrbcs	r3, [r4], -r0
    5628:	5d013000 	stcpl	0, cr3, [r1]
    562c:	00000d65 	andeq	r0, r0, r5, ror #26
    5630:	000d9434 	andeq	r9, sp, r4, lsr r4
    5634:	01300100 	teqeq	r0, r0, lsl #2
    5638:	00000713 	andeq	r0, r0, r3, lsl r7
    563c:	000019f7 	strdeq	r1, [r0], -r7
    5640:	67736d38 	undefined instruction 0x67736d38
    5644:	01300100 	teqeq	r0, r0, lsl #2
    5648:	000004f0 	strdeq	r0, [r0], -r0
    564c:	00001a0a 	andeq	r1, r0, sl, lsl #20
    5650:	00163034 	andseq	r3, r6, r4, lsr r0
    5654:	01300100 	teqeq	r0, r0, lsl #2
    5658:	00000069 	andeq	r0, r0, r9, rrx
    565c:	00001a1d 	andeq	r1, r0, sp, lsl sl
    5660:	63013700 	movwvs	r3, #5888	; 0x1700
    5664:	01000015 	tsteq	r0, r5, lsl r0
    5668:	50010127 	andpl	r0, r1, r7, lsr #2
    566c:	54000000 	strpl	r0, [r0]
    5670:	5c300026 	ldcpl	0, cr0, [r0], #-152	; 0xffffff68
    5674:	01300026 	teqeq	r0, r6, lsr #32
    5678:	000da25d 	andeq	sl, sp, sp, asr r2
    567c:	0d943400 	cfldrseq	mvf3, [r4]
    5680:	27010000 	strcs	r0, [r1, -r0]
    5684:	00071301 	andeq	r1, r7, r1, lsl #6
    5688:	001a3000 	andseq	r3, sl, r0
    568c:	736d3800 	cmnvc	sp, #0
    5690:	27010067 	strcs	r0, [r1, -r7, rrx]
    5694:	0004f001 	andeq	pc, r4, r1
    5698:	001a4300 	andseq	r4, sl, r0, lsl #6
    569c:	01370000 	teqeq	r7, r0
    56a0:	00001541 	andeq	r1, r0, r1, asr #10
    56a4:	01012001 	tsteq	r1, r1
    56a8:	00000050 	andeq	r0, r0, r0, asr r0
    56ac:	3000265c 	andcc	r2, r0, ip, asr r6
    56b0:	30002660 	andcc	r2, r0, r0, ror #12
    56b4:	0dcf5d01 	stcleq	13, cr5, [pc, #4]
    56b8:	94340000 	ldrtls	r0, [r4]
    56bc:	0100000d 	tsteq	r0, sp
    56c0:	07130120 	ldreq	r0, [r3, -r0, lsr #2]
    56c4:	1a560000 	bne	15856cc <MEM_SIZE+0xd856cc>
    56c8:	29000000 	stmdbcs	r0, {}
    56cc:	00155101 	andseq	r5, r5, r1, lsl #2
    56d0:	018f0100 	orreq	r0, pc, r0, lsl #2
    56d4:	30002660 	andcc	r2, r0, r0, ror #12
    56d8:	300026e0 	andcc	r2, r0, r0, ror #13
    56dc:	00001a69 	andeq	r1, r0, r9, ror #20
    56e0:	00000e6d 	andeq	r0, r0, sp, ror #28
    56e4:	0071722c 	rsbseq	r7, r1, ip, lsr #4
    56e8:	07be8f01 	ldreq	r8, [lr, r1, lsl #30]!
    56ec:	1a880000 	bne	fe2056f4 <rEINTPEND+0xa820564c>
    56f0:	942a0000 	strtls	r0, [sl]
    56f4:	0100000d 	tsteq	r0, sp
    56f8:	0007138f 	andeq	r1, r7, pc, lsl #7
    56fc:	001aa600 	andseq	sl, sl, r0, lsl #12
    5700:	00693900 	rsbeq	r3, r9, r0, lsl #18
    5704:	007b9201 	rsbseq	r9, fp, r1, lsl #4
    5708:	1ab90000 	bne	fee45710 <rEINTPEND+0xa8e45668>
    570c:	5a3a0000 	bpl	e85714 <MEM_SIZE+0x685714>
    5710:	0100001e 	tsteq	r0, lr, lsl r0
    5714:	00004593 	muleq	r0, r3, r5
    5718:	001acc00 	andseq	ip, sl, r0, lsl #24
    571c:	07f32300 	ldrbeq	r2, [r3, r0, lsl #6]!
    5720:	26640000 	strbtcs	r0, [r4], -r0
    5724:	02383000 	eorseq	r3, r8, #0
    5728:	95010000 	strls	r0, [r1]
    572c:	00000e3a 	andeq	r0, r0, sl, lsr lr
    5730:	0008001e 	andeq	r0, r8, lr, lsl r0
    5734:	77260000 	strvc	r0, [r6, -r0]!
    5738:	9c000008 	stcls	0, cr0, [r0], {8}
    573c:	b8300026 	ldmdalt	r0!, {r1, r2, r5}
    5740:	01300026 	teqeq	r0, r6, lsr #32
    5744:	088f1e9c 	stmeq	pc, {r2, r3, r4, r7, r9, sl, fp, ip}
    5748:	841e0000 	ldrhi	r0, [lr]
    574c:	28000008 	stmdacs	r0, {r3}
    5750:	3000269c 	mulcc	r0, ip, r6
    5754:	300026b8 	undefined instruction 0x300026b8
    5758:	00089a2b 	andeq	r9, r8, fp, lsr #20
    575c:	001adf00 	andseq	sp, sl, r0, lsl #30
    5760:	08a42500 	stmiaeq	r4!, {r8, sl, sp}
    5764:	00000000 	andeq	r0, r0, r0
    5768:	68013300 	stmdavs	r1, {r8, r9, ip, sp}
    576c:	01000016 	tsteq	r0, r6, lsl r0
    5770:	5001013b 	andpl	r0, r1, fp, lsr r1
    5774:	e0000000 	and	r0, r0, r0
    5778:	a8300026 	ldmdage	r0!, {r1, r2, r5}
    577c:	fd300027 	ldc2	0, cr0, [r0, #-156]!	; 0xffffff64
    5780:	3200001a 	andcc	r0, r0, #26
    5784:	3400000f 	strcc	r0, [r0], #-15
    5788:	00001595 	muleq	r0, r5, r5
    578c:	7c013b01 	stcvc	11, cr3, [r1], {1}
    5790:	1c000005 	stcne	0, cr0, [r0], {5}
    5794:	3400001b 	strcc	r0, [r0], #-27
    5798:	00000d94 	muleq	r0, r4, sp
    579c:	13013b01 	movwne	r3, #6913	; 0x1b01
    57a0:	3a000007 	bcc	57c4 <DISABLE_IRQ+0x5744>
    57a4:	3400001b 	strcc	r0, [r0], #-27
    57a8:	000015b9 	undefined instruction 0x000015b9
    57ac:	a6013b01 	strge	r3, [r1], -r1, lsl #22
    57b0:	58000000 	stmdapl	r0, {}
    57b4:	3100001b 	tstcc	r0, fp, lsl r0
    57b8:	0000080c 	andeq	r0, r0, ip, lsl #16
    57bc:	3000272c 	andcc	r2, r0, ip, lsr #14
    57c0:	00000268 	andeq	r0, r0, r8, ror #4
    57c4:	16016401 	strne	r6, [r1], -r1, lsl #8
    57c8:	1e00000f 	cdpne	0, 0, cr0, cr0, cr15, {0}
    57cc:	00000824 	andeq	r0, r0, r4, lsr #16
    57d0:	0008191e 	andeq	r1, r8, lr, lsl r9
    57d4:	02802400 	addeq	r2, r0, #0
    57d8:	2f2b0000 	svccs	0x002b0000
    57dc:	76000008 	strvc	r0, [r0], -r8
    57e0:	2b00001b 	blcs	5854 <DISABLE_IRQ+0x57d4>
    57e4:	0000083a 	andeq	r0, r0, sl, lsr r8
    57e8:	00001b94 	muleq	r0, r4, fp
    57ec:	00084325 	andeq	r4, r8, r5, lsr #6
    57f0:	084e2500 	stmdaeq	lr, {r8, sl, sp}^
    57f4:	321d0000 	andscc	r0, sp, #0
    57f8:	58000007 	stmdapl	r0, {r0, r1, r2}
    57fc:	98300027 	ldmdals	r0!, {r0, r1, r2, r5}
    5800:	01000002 	tsteq	r0, r2
    5804:	074a1e3c 	smlaldxeq	r1, sl, ip, lr
    5808:	3f1e0000 	svccc	0x001e0000
    580c:	00000007 	andeq	r0, r0, r7
    5810:	32320000 	eorscc	r0, r2, #0
    5814:	88000007 	stmdahi	r0, {r0, r1, r2}
    5818:	b0300027 	eorslt	r0, r0, r7, lsr #32
    581c:	01000002 	tsteq	r0, r2
    5820:	4a1e015d 	bmi	785d9c <DISABLE_IRQ+0x785d1c>
    5824:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    5828:	0000073f 	andeq	r0, r0, pc, lsr r7
    582c:	d13b0000 	teqle	fp, r0
    5830:	0a000014 	beq	5888 <DISABLE_IRQ+0x5808>
    5834:	00071349 	andeq	r1, r7, r9, asr #6
    5838:	3b010100 	blcc	45c40 <DISABLE_IRQ+0x45bc0>
    583c:	0000038f 	andeq	r0, r0, pc, lsl #7
    5840:	07134a0a 	ldreq	r4, [r3, -sl, lsl #20]
    5844:	01010000 	tsteq	r1, r0
    5848:	00131d3b 	andseq	r1, r3, fp, lsr sp
    584c:	a6500a00 	ldrbge	r0, [r0], -r0, lsl #20
    5850:	01000006 	tsteq	r0, r6
    5854:	13013b01 	movwne	r3, #6913	; 0x1b01
    5858:	680a0000 	stmdavs	sl, {}
    585c:	00000050 	andeq	r0, r0, r0, asr r0
    5860:	2d3b0101 	ldfcss	f0, [fp, #-4]!
    5864:	0a000013 	beq	58b8 <DISABLE_IRQ+0x5838>
    5868:	0006426b 	andeq	r4, r6, fp, ror #4
    586c:	00010100 	andeq	r0, r1, r0, lsl #2
    5870:	00000c76 	andeq	r0, r0, r6, ror ip
    5874:	134f0002 	movtne	r0, #61442	; 0xf002
    5878:	01040000 	tsteq	r4, r0
    587c:	0000004d 	andeq	r0, r0, sp, asr #32
    5880:	0017aa01 	andseq	sl, r7, r1, lsl #20
    5884:	00006300 	andeq	r6, r0, r0, lsl #6
    5888:	0027a800 	eoreq	sl, r7, r0, lsl #16
    588c:	002fa030 	eoreq	sl, pc, r0, lsr r0
    5890:	00119b30 	andseq	r9, r1, r0, lsr fp
    5894:	05640200 	strbeq	r0, [r4, #-512]!	; 0x200
    5898:	21030000 	tstcs	r3, r0
    589c:	a0060103 	andge	r0, r6, r3, lsl #2
    58a0:	04000000 	streq	r0, [r0]
    58a4:	00000ee8 	andeq	r0, r0, r8, ror #29
    58a8:	003e2303 	eorseq	r2, lr, r3, lsl #6
    58ac:	01030000 	tsteq	r3, r0
    58b0:	00009e08 	andeq	r9, r0, r8, lsl #28
    58b4:	04f70400 	ldrbteq	r0, [r7], #1024	; 0x400
    58b8:	24030000 	strcs	r0, [r3]
    58bc:	0000003e 	andeq	r0, r0, lr, lsr r0
    58c0:	000afb04 	andeq	pc, sl, r4, lsl #22
    58c4:	5b260300 	blpl	9864cc <MEM_SIZE+0x1864cc>
    58c8:	03000000 	movweq	r0, #0
    58cc:	008b0702 	addeq	r0, fp, r2, lsl #14
    58d0:	02030000 	andeq	r0, r3, #0
    58d4:	00005905 	andeq	r5, r0, r5, lsl #18
    58d8:	03380400 	teqeq	r8, #0
    58dc:	28030000 	stmdacs	r3, {}
    58e0:	00000074 	andeq	r0, r0, r4, ror r0
    58e4:	37070403 	strcc	r0, [r7, -r3, lsl #8]
    58e8:	05000000 	streq	r0, [r0]
    58ec:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    58f0:	08030074 	stmdaeq	r3, {r2, r4, r5, r6}
    58f4:	00000005 	andeq	r0, r0, r5
    58f8:	07080300 	streq	r0, [r8, -r0, lsl #6]
    58fc:	0000002d 	andeq	r0, r0, sp, lsr #32
    5900:	00039f04 	andeq	r9, r3, r4, lsl #30
    5904:	742d0300 	strtvc	r0, [sp], #-768	; 0x300
    5908:	04000000 	streq	r0, [r0]
    590c:	00000132 	andeq	r0, r0, r2, lsr r1
    5910:	00742204 	rsbseq	r2, r4, r4, lsl #4
    5914:	27040000 	strcs	r0, [r4, -r0]
    5918:	0500000a 	streq	r0, [r0, #-10]
    591c:	0000692a 	andeq	r6, r0, sl, lsr #18
    5920:	08290400 	stmdaeq	r9!, {sl}
    5924:	2c050000 	stccs	0, cr0, [r5], {0}
    5928:	00000069 	andeq	r0, r0, r9, rrx
    592c:	43060406 	movwmi	r0, #25606	; 0x6406
    5930:	00000261 	andeq	r0, r0, r1, ror #4
    5934:	000bb507 	andeq	fp, fp, r7, lsl #10
    5938:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    593c:	0100000b 	tsteq	r0, fp
    5940:	0003aa07 	andeq	sl, r3, r7, lsl #20
    5944:	21070200 	tstcs	r7, r0, lsl #4
    5948:	03000009 	movweq	r0, #9
    594c:	00063507 	andeq	r3, r6, r7, lsl #10
    5950:	35070400 	strcc	r0, [r7, #-1024]	; 0x400
    5954:	0500000a 	streq	r0, [r0, #-10]
    5958:	000ad407 	andeq	sp, sl, r7, lsl #8
    595c:	ac070600 	stcge	6, cr0, [r7], {0}
    5960:	07000002 	streq	r0, [r0, -r2]
    5964:	0006e307 	andeq	lr, r6, r7, lsl #6
    5968:	ee070800 	cdp	8, 0, cr0, cr7, cr0, {0}
    596c:	09000001 	stmdbeq	r0, {r0}
    5970:	0008cd07 	andeq	ip, r8, r7, lsl #26
    5974:	a1070a00 	tstge	r7, r0, lsl #20
    5978:	0b00000b 	bleq	59ac <DISABLE_IRQ+0x592c>
    597c:	00048007 	andeq	r8, r4, r7
    5980:	bc070c00 	stclt	12, cr0, [r7], {0}
    5984:	0d000008 	stceq	0, cr0, [r0, #-32]	; 0xffffffe0
    5988:	00070507 	andeq	r0, r7, r7, lsl #10
    598c:	d0070e00 	andle	r0, r7, r0, lsl #28
    5990:	0f000006 	svceq	0x00000006
    5994:	00034007 	andeq	r4, r3, r7
    5998:	6a071000 	bvs	1c99a0 <DISABLE_IRQ+0x1c9920>
    599c:	11000009 	tstne	r0, r9
    59a0:	000b3907 	andeq	r3, fp, r7, lsl #18
    59a4:	0e071200 	cdpeq	2, 0, cr1, cr7, cr0, {0}
    59a8:	13000006 	movwne	r0, #6
    59ac:	0002be07 	andeq	fp, r2, r7, lsl #28
    59b0:	90071400 	andls	r1, r7, r0, lsl #8
    59b4:	15000006 	strne	r0, [r0, #-6]
    59b8:	0008e507 	andeq	lr, r8, r7, lsl #10
    59bc:	d0071600 	andle	r1, r7, r0, lsl #12
    59c0:	17000002 	strne	r0, [r0, -r2]
    59c4:	00090a07 	andeq	r0, r9, r7, lsl #20
    59c8:	15071800 	strne	r1, [r7, #-2048]	; 0x800
    59cc:	19000002 	stmdbne	r0, {r1}
    59d0:	00077607 	andeq	r7, r7, r7, lsl #12
    59d4:	f0071a00 	undefined instruction 0xf0071a00
    59d8:	1b000002 	blne	59e8 <DISABLE_IRQ+0x5968>
    59dc:	000bc107 	andeq	ip, fp, r7, lsl #2
    59e0:	05071c00 	streq	r1, [r7, #-3072]	; 0xc00
    59e4:	1d000004 	stcne	0, cr0, [r0, #-16]
    59e8:	00081007 	andeq	r1, r8, r7
    59ec:	32071e00 	andcc	r1, r7, #0
    59f0:	1f000009 	svcne	0x00000009
    59f4:	00026707 	andeq	r6, r2, r7, lsl #14
    59f8:	b1072000 	tstlt	r7, r0
    59fc:	21000005 	tstcs	r0, r5
    5a00:	00064407 	andeq	r4, r6, r7, lsl #8
    5a04:	ff072200 	undefined instruction 0xff072200
    5a08:	23000007 	movwcs	r0, #7
    5a0c:	0003ba07 	andeq	fp, r3, r7, lsl #20
    5a10:	99072400 	stmdbls	r7, {sl, sp}
    5a14:	25000008 	strcs	r0, [r0, #-8]
    5a18:	000b4b07 	andeq	r4, fp, r7, lsl #22
    5a1c:	83072600 	movwhi	r2, #30208	; 0x7600
    5a20:	27000008 	strcs	r0, [r0, -r8]
    5a24:	00023e07 	andeq	r3, r2, r7, lsl #28
    5a28:	b7072800 	strlt	r2, [r7, -r0, lsl #16]
    5a2c:	29000009 	stmdbcs	r0, {r0, r3}
    5a30:	000ae507 	andeq	lr, sl, r7, lsl #10
    5a34:	87072a00 	strhi	r2, [r7, -r0, lsl #20]
    5a38:	2b00000a 	blcs	5a68 <DISABLE_IRQ+0x59e8>
    5a3c:	00094807 	andeq	r4, r9, r7, lsl #16
    5a40:	f5072c00 	undefined instruction 0xf5072c00
    5a44:	2d000009 	stccs	0, cr0, [r0, #-36]	; 0xffffffdc
    5a48:	0009c707 	andeq	ip, r9, r7, lsl #14
    5a4c:	cf072e00 	svcgt	0x00072e00
    5a50:	2f000003 	svccs	0x00000003
    5a54:	0006a707 	andeq	sl, r6, r7, lsl #14
    5a58:	13073000 	movwne	r3, #28672	; 0x7000
    5a5c:	31000004 	tstcc	r0, r4
    5a60:	00098907 	andeq	r8, r9, r7, lsl #18
    5a64:	52073200 	andpl	r3, r7, #0
    5a68:	33000003 	movwcc	r0, #3
    5a6c:	0005fd07 	andeq	pc, r5, r7, lsl #26
    5a70:	d5073400 	strle	r3, [r7, #-1024]	; 0x400
    5a74:	3500000b 	strcc	r0, [r0, #-11]
    5a78:	0004e107 	andeq	lr, r4, r7, lsl #2
    5a7c:	a8073600 	stmdage	r7, {r9, sl, ip, sp}
    5a80:	37000007 	strcc	r0, [r0, -r7]
    5a84:	00079207 	andeq	r9, r7, r7, lsl #4
    5a88:	16073800 	strne	r3, [r7], -r0, lsl #16
    5a8c:	39000003 	stmdbcc	r0, {r0, r1}
    5a90:	0006f307 	andeq	pc, r6, r7, lsl #6
    5a94:	e2073a00 	and	r3, r7, #0
    5a98:	3b000003 	blcc	5aac <DISABLE_IRQ+0x5a2c>
    5a9c:	0006bc07 	andeq	fp, r6, r7, lsl #24
    5aa0:	0f073c00 	svceq	0x00073c00
    5aa4:	3d000005 	stccc	0, cr0, [r0, #-20]	; 0xffffffec
    5aa8:	00056d07 	andeq	r6, r5, r7, lsl #26
    5aac:	cb073e00 	blgt	1d52b4 <DISABLE_IRQ+0x1d5234>
    5ab0:	3f000004 	svccc	0x00000004
    5ab4:	00036e07 	andeq	r6, r3, r7, lsl #28
    5ab8:	0700c000 	streq	ip, [r0, -r0]
    5abc:	0000058b 	andeq	r0, r0, fp, lsl #11
    5ac0:	370700c1 	strcc	r0, [r7, -r1, asr #1]
    5ac4:	c2000008 	andgt	r0, r0, #8
    5ac8:	06740700 	ldrbteq	r0, [r4], -r0, lsl #14
    5acc:	00c30000 	sbceq	r0, r3, r0
    5ad0:	06040600 	streq	r0, [r4], -r0, lsl #12
    5ad4:	0002bea0 	andeq	fp, r2, r0, lsr #29
    5ad8:	0df50700 	ldcleq	7, cr0, [r5]
    5adc:	07000000 	streq	r0, [r0, -r0]
    5ae0:	00000de6 	andeq	r0, r0, r6, ror #27
    5ae4:	0ed90701 	cdpeq	7, 13, cr0, cr9, cr1, {0}
    5ae8:	07020000 	streq	r0, [r2, -r0]
    5aec:	00000f21 	andeq	r0, r0, r1, lsr #30
    5af0:	0d370703 	ldceq	7, cr0, [r7, #-12]!
    5af4:	07040000 	streq	r0, [r4, -r0]
    5af8:	00000f69 	andeq	r0, r0, r9, ror #30
    5afc:	0e3f0705 	cdpeq	7, 3, cr0, cr15, cr5, {0}
    5b00:	07060000 	streq	r0, [r6, -r0]
    5b04:	00000e2f 	andeq	r0, r0, pc, lsr #28
    5b08:	0f370707 	svceq	0x00370707
    5b0c:	07080000 	streq	r0, [r8, -r0]
    5b10:	00000d44 	andeq	r0, r0, r4, asr #26
    5b14:	0dad0709 	stceq	7, cr0, [sp, #36]!	; 0x24
    5b18:	070a0000 	streq	r0, [sl, -r0]
    5b1c:	00000e16 	andeq	r0, r0, r6, lsl lr
    5b20:	0e7f070b 	cdpeq	7, 7, cr0, cr15, cr11, {0}
    5b24:	070c0000 	streq	r0, [ip, -r0]
    5b28:	00000f02 	andeq	r0, r0, r2, lsl #30
    5b2c:	0406000d 	streq	r0, [r6], #-13
    5b30:	030fb506 	movweq	fp, #62726	; 0xf506
    5b34:	e4070000 	str	r0, [r7]
    5b38:	11000009 	tstne	r0, r9
    5b3c:	00045707 	andeq	r5, r4, r7, lsl #14
    5b40:	db071200 	blle	1ca348 <DISABLE_IRQ+0x1ca2c8>
    5b44:	13000001 	movwne	r0, #1
    5b48:	0007c307 	andeq	ip, r7, r7, lsl #6
    5b4c:	33071400 	movwcc	r1, #29696	; 0x7400
    5b50:	15000007 	strne	r0, [r0, #-7]
    5b54:	000a4407 	andeq	r4, sl, r7, lsl #8
    5b58:	8e071600 	cfmadd32hi	mvax0, mvfx1, mvfx7, mvfx0
    5b5c:	1700000b 	strne	r0, [r0, -fp]
    5b60:	0005c907 	andeq	ip, r5, r7, lsl #18
    5b64:	a9071800 	stmdbge	r7, {fp, ip}
    5b68:	19000008 	stmdbne	r0, {r3}
    5b6c:	00085007 	andeq	r5, r8, r7
    5b70:	17071a00 	strne	r1, [r7, -r0, lsl #20]
    5b74:	1b000007 	blne	5b98 <DISABLE_IRQ+0x5b18>
    5b78:	000b1b07 	andeq	r1, fp, r7, lsl #22
    5b7c:	08001c00 	stmdaeq	r0, {sl, fp, ip}
    5b80:	00000c09 	andeq	r0, r0, r9, lsl #24
    5b84:	38230208 	stmdacc	r3!, {r3, r9}
    5b88:	09000003 	stmdbeq	r0, {r0, r1}
    5b8c:	00000311 	andeq	r0, r0, r1, lsl r3
    5b90:	03382402 	teqeq	r8, #33554432	; 0x2000000
    5b94:	23020000 	movwcs	r0, #8192	; 0x2000
    5b98:	02810900 	addeq	r0, r1, #0
    5b9c:	25020000 	strcs	r0, [r2]
    5ba0:	00000338 	andeq	r0, r0, r8, lsr r3
    5ba4:	00042302 	andeq	r2, r4, r2, lsl #6
    5ba8:	030f040a 	movweq	r0, #62474	; 0xf40a
    5bac:	09040000 	stmdbeq	r4, {}
    5bb0:	0200000c 	andeq	r0, r0, #12
    5bb4:	00030f26 	andeq	r0, r3, r6, lsr #30
    5bb8:	065c0800 	ldrbeq	r0, [ip], -r0, lsl #16
    5bbc:	07100000 	ldreq	r0, [r0, -r0]
    5bc0:	00038e2f 	andeq	r8, r3, pc, lsr #28
    5bc4:	0ac90900 	beq	ff247fcc <rEINTPEND+0xa9247f24>
    5bc8:	31070000 	tstcc	r7, r0
    5bcc:	0000033e 	andeq	r0, r0, lr, lsr r3
    5bd0:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    5bd4:	000008e0 	andeq	r0, r0, r0, ror #17
    5bd8:	038e3207 	orreq	r3, lr, #1879048192	; 0x70000000
    5bdc:	23020000 	movwcs	r0, #8192	; 0x2000
    5be0:	09000908 	stmdbeq	r0, {r3, r8, fp}
    5be4:	33070000 	movwcc	r0, #28672	; 0x7000
    5be8:	00000045 	andeq	r0, r0, r5, asr #32
    5bec:	090c2302 	stmdbeq	ip, {r1, r8, r9, sp}
    5bf0:	00000427 	andeq	r0, r0, r7, lsr #8
    5bf4:	00453407 	subeq	r3, r5, r7, lsl #8
    5bf8:	23020000 	movwcs	r0, #8192	; 0x2000
    5bfc:	040a000d 	streq	r0, [sl], #-13
    5c00:	00000045 	andeq	r0, r0, r5, asr #32
    5c04:	00065c04 	andeq	r5, r6, r4, lsl #24
    5c08:	49360700 	ldmdbmi	r6!, {r8, r9, sl}
    5c0c:	08000003 	stmdaeq	r0, {r0, r1}
    5c10:	0000099f 	muleq	r0, pc, r9
    5c14:	343a076c 	ldrtcc	r0, [sl], #-1900	; 0x76c
    5c18:	09000005 	stmdbeq	r0, {r0, r2}
    5c1c:	00001481 	andeq	r1, r0, r1, lsl #9
    5c20:	05343b07 	ldreq	r3, [r4, #-2823]!	; 0xb07
    5c24:	23020000 	movwcs	r0, #8192	; 0x2000
    5c28:	044d0900 	strbeq	r0, [sp], #-2304	; 0x900
    5c2c:	41070000 	tstmi	r7, r0
    5c30:	0000033e 	andeq	r0, r0, lr, lsr r3
    5c34:	09042302 	stmdbeq	r4, {r1, r8, r9, sp}
    5c38:	00000552 	andeq	r0, r0, r2, asr r5
    5c3c:	053a4507 	ldreq	r4, [sl, #-1287]!	; 0x507
    5c40:	23020000 	movwcs	r0, #8192	; 0x2000
    5c44:	1aef090c 	bne	ffbc807c <rEINTPEND+0xa9bc7fd4>
    5c48:	4b070000 	blmi	1c5c50 <DISABLE_IRQ+0x1c5bd0>
    5c4c:	00000069 	andeq	r0, r0, r9, rrx
    5c50:	09102302 	ldmdbeq	r0, {r1, r8, r9, sp}
    5c54:	00000878 	andeq	r0, r0, r8, ror r8
    5c58:	00694c07 	rsbeq	r4, r9, r7, lsl #24
    5c5c:	23020000 	movwcs	r0, #8192	; 0x2000
    5c60:	1d350914 	ldcne	9, cr0, [r5, #-80]!	; 0xffffffb0
    5c64:	4d070000 	stcmi	0, cr0, [r7]
    5c68:	00000045 	andeq	r0, r0, r5, asr #32
    5c6c:	09182302 	ldmdbeq	r8, {r1, r8, r9, sp}
    5c70:	00001e5a 	andeq	r1, r0, sl, asr lr
    5c74:	00455107 	subeq	r5, r5, r7, lsl #2
    5c78:	23020000 	movwcs	r0, #8192	; 0x2000
    5c7c:	03640919 	cmneq	r4, #409600	; 0x64000
    5c80:	53070000 	movwpl	r0, #28672	; 0x7000
    5c84:	00000045 	andeq	r0, r0, r5, asr #32
    5c88:	091a2302 	ldmdbeq	sl, {r1, r8, r9, sp}
    5c8c:	0000043f 	andeq	r0, r0, pc, lsr r4
    5c90:	00455607 	subeq	r5, r5, r7, lsl #12
    5c94:	23020000 	movwcs	r0, #8192	; 0x2000
    5c98:	0bad091b 	bleq	feb4810c <rEINTPEND+0xa8b48064>
    5c9c:	5a070000 	bpl	1c5ca4 <DISABLE_IRQ+0x1c5c24>
    5ca0:	000005ae 	andeq	r0, r0, lr, lsr #11
    5ca4:	091c2302 	ldmdbeq	ip, {r1, r8, r9, sp}
    5ca8:	00000bf8 	strdeq	r0, [r0], -r8
    5cac:	033e5f07 	teqeq	lr, #28
    5cb0:	23020000 	movwcs	r0, #8192	; 0x2000
    5cb4:	0b030920 	bleq	c813c <DISABLE_IRQ+0xc80bc>
    5cb8:	63070000 	movwvs	r0, #28672	; 0x7000
    5cbc:	00000069 	andeq	r0, r0, r9, rrx
    5cc0:	09282302 	stmdbeq	r8!, {r1, r8, r9, sp}
    5cc4:	00000625 	andeq	r0, r0, r5, lsr #12
    5cc8:	05b46507 	ldreq	r6, [r4, #1287]!	; 0x507
    5ccc:	23020000 	movwcs	r0, #8192	; 0x2000
    5cd0:	086e092c 	stmdaeq	lr!, {r2, r3, r5, r8, fp}^
    5cd4:	66070000 	strvs	r0, [r7], -r0
    5cd8:	0000033e 	andeq	r0, r0, lr, lsr r3
    5cdc:	09302302 	ldmdbeq	r0!, {r1, r8, r9, sp}
    5ce0:	00000c0e 	andeq	r0, r0, lr, lsl #24
    5ce4:	00a66807 	adceq	r6, r6, r7, lsl #16
    5ce8:	23020000 	movwcs	r0, #8192	; 0x2000
    5cec:	07f30938 	undefined instruction 0x07f30938
    5cf0:	69070000 	stmdbvs	r7, {}
    5cf4:	000000a6 	andeq	r0, r0, r6, lsr #1
    5cf8:	093c2302 	ldmdbeq	ip!, {r1, r8, r9, sp}
    5cfc:	000005a7 	andeq	r0, r0, r7, lsr #11
    5d00:	05ba6b07 	ldreq	r6, [sl, #2823]!	; 0xb07
    5d04:	23020000 	movwcs	r0, #8192	; 0x2000
    5d08:	736d0b40 	cmnvc	sp, #65536	; 0x10000
    5d0c:	6d070067 	stcvs	0, cr0, [r7, #-412]	; 0xfffffe64
    5d10:	00000534 	andeq	r0, r0, r4, lsr r5
    5d14:	09442302 	stmdbeq	r4, {r1, r8, r9, sp}^
    5d18:	00001630 	andeq	r1, r0, r0, lsr r6
    5d1c:	00b17007 	adcseq	r7, r1, r7
    5d20:	23020000 	movwcs	r0, #8192	; 0x2000
    5d24:	08db0948 	ldmeq	fp, {r3, r6, r8, fp}^
    5d28:	73070000 	movwvc	r0, #28672	; 0x7000
    5d2c:	0000038e 	andeq	r0, r0, lr, lsl #7
    5d30:	094c2302 	stmdbeq	ip, {r1, r8, r9, sp}^
    5d34:	000009ac 	andeq	r0, r0, ip, lsr #19
    5d38:	00457507 	subeq	r7, r5, r7, lsl #10
    5d3c:	23020000 	movwcs	r0, #8192	; 0x2000
    5d40:	07e60950 	ubfxeq	r0, r0, #18, #7
    5d44:	76070000 	strvc	r0, [r7], -r0
    5d48:	00000045 	andeq	r0, r0, r5, asr #32
    5d4c:	09512302 	ldmdbeq	r1, {r1, r8, r9, sp}^
    5d50:	0000053d 	andeq	r0, r0, sp, lsr r5
    5d54:	05c07907 	strbeq	r7, [r0, #2311]	; 0x907
    5d58:	23020000 	movwcs	r0, #8192	; 0x2000
    5d5c:	0ab50954 	beq	fed482b4 <rEINTPEND+0xa8d4820c>
    5d60:	7c070000 	stcvc	0, cr0, [r7], {0}
    5d64:	00000643 	andeq	r0, r0, r3, asr #12
    5d68:	09582302 	ldmdbeq	r8, {r1, r8, r9, sp}^
    5d6c:	0000022b 	andeq	r0, r0, fp, lsr #4
    5d70:	06808007 	streq	r8, [r0], r7
    5d74:	23020000 	movwcs	r0, #8192	; 0x2000
    5d78:	04ad095c 	strteq	r0, [sp], #2396	; 0x95c
    5d7c:	84070000 	strhi	r0, [r7]
    5d80:	00000045 	andeq	r0, r0, r5, asr #32
    5d84:	09602302 	stmdbeq	r0!, {r1, r8, r9, sp}^
    5d88:	00000255 	andeq	r0, r0, r5, asr r2
    5d8c:	00698507 	rsbeq	r8, r9, r7, lsl #10
    5d90:	23020000 	movwcs	r0, #8192	; 0x2000
    5d94:	075a0964 	ldrbeq	r0, [sl, -r4, ror #18]
    5d98:	86070000 	strhi	r0, [r7], -r0
    5d9c:	00000534 	andeq	r0, r0, r4, lsr r5
    5da0:	00682302 	rsbeq	r2, r8, r2, lsl #6
    5da4:	0025040a 	eoreq	r0, r5, sl, lsl #8
    5da8:	340c0000 	strcc	r0, [ip]
    5dac:	4a000005 	bmi	5dc8 <DISABLE_IRQ+0x5d48>
    5db0:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    5db4:	0000054a 	andeq	r0, r0, sl, asr #10
    5db8:	040e0000 	streq	r0, [lr]
    5dbc:	0b2f0807 	bleq	bc7de0 <MEM_SIZE+0x3c7de0>
    5dc0:	071c0000 	ldreq	r0, [ip, -r0]
    5dc4:	0005ae5a 	andeq	sl, r5, sl, asr lr
    5dc8:	05360900 	ldreq	r0, [r6, #-2304]!	; 0x900
    5dcc:	27080000 	strcs	r0, [r8, -r0]
    5dd0:	00000394 	muleq	r0, r4, r3
    5dd4:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    5dd8:	00000867 	andeq	r0, r0, r7, ror #16
    5ddc:	076d2a08 	strbeq	r2, [sp, -r8, lsl #20]!
    5de0:	23020000 	movwcs	r0, #8192	; 0x2000
    5de4:	0bad0910 	bleq	feb4822c <rEINTPEND+0xa8b48184>
    5de8:	2c080000 	stccs	0, cr0, [r8], {0}
    5dec:	000005ae 	andeq	r0, r0, lr, lsr #11
    5df0:	09142302 	ldmdbeq	r4, {r1, r8, r9, sp}
    5df4:	000005f6 	strdeq	r0, [r0], -r6
    5df8:	00452e08 	subeq	r2, r5, r8, lsl #28
    5dfc:	23020000 	movwcs	r0, #8192	; 0x2000
    5e00:	04730918 	ldrbteq	r0, [r3], #-2328	; 0x918
    5e04:	2f080000 	svccs	0x00080000
    5e08:	00000045 	andeq	r0, r0, r5, asr #32
    5e0c:	09192302 	ldmdbeq	r9, {r1, r8, r9, sp}
    5e10:	0000048e 	andeq	r0, r0, lr, lsl #9
    5e14:	00453008 	subeq	r3, r5, r8
    5e18:	23020000 	movwcs	r0, #8192	; 0x2000
    5e1c:	040a001a 	streq	r0, [sl], #-26
    5e20:	0000054d 	andeq	r0, r0, sp, asr #10
    5e24:	0090040a 	addseq	r0, r0, sl, lsl #8
    5e28:	040a0000 	streq	r0, [sl]
    5e2c:	0000033e 	andeq	r0, r0, lr, lsr r3
    5e30:	0394040a 	orrseq	r0, r4, #167772160	; 0xa000000
    5e34:	4b080000 	blmi	205e3c <DISABLE_IRQ+0x205dbc>
    5e38:	2c000007 	stccs	0, cr0, [r0], {7}
    5e3c:	06437c07 	strbeq	r7, [r3], -r7, lsl #24
    5e40:	36090000 	strcc	r0, [r9], -r0
    5e44:	09000005 	stmdbeq	r0, {r0, r2}
    5e48:	0003942e 	andeq	r9, r3, lr, lsr #8
    5e4c:	00230200 	eoreq	r0, r3, r0, lsl #4
    5e50:	0007dd09 	andeq	sp, r7, r9, lsl #26
    5e54:	db300900 	blle	c0825c <MEM_SIZE+0x40825c>
    5e58:	02000006 	andeq	r0, r0, #6
    5e5c:	e4091023 	str	r1, [r9], #-35	; 0x23
    5e60:	09000005 	stmdbeq	r0, {r0, r2}
    5e64:	0000b131 	andeq	fp, r0, r1, lsr r1
    5e68:	14230200 	strtne	r0, [r3], #-512	; 0x200
    5e6c:	000b0e09 	andeq	r0, fp, r9, lsl #28
    5e70:	b1320900 	teqlt	r2, r0, lsl #18
    5e74:	02000000 	andeq	r0, r0, #0
    5e78:	f0091823 	undefined instruction 0xf0091823
    5e7c:	09000005 	stmdbeq	r0, {r0, r2}
    5e80:	0006db34 	andeq	sp, r6, r4, lsr fp
    5e84:	1c230200 	sfmne	f0, 4, [r3]	; (stcne 2, cr0, [r3])
    5e88:	00014e09 	andeq	r4, r1, r9, lsl #28
    5e8c:	db350900 	blle	d48294 <MEM_SIZE+0x548294>
    5e90:	02000006 	andeq	r0, r0, #6
    5e94:	27092023 	strcs	r2, [r9, -r3, lsr #32]
    5e98:	09000005 	stmdbeq	r0, {r0, r2}
    5e9c:	0000b136 	andeq	fp, r0, r6, lsr r1
    5ea0:	24230200 	strtcs	r0, [r3], #-512	; 0x200
    5ea4:	00049b09 	andeq	r9, r4, r9, lsl #22
    5ea8:	b1370900 	teqlt	r7, r0, lsl #18
    5eac:	02000000 	andeq	r0, r0, #0
    5eb0:	0a002823 	beq	ff44 <DISABLE_IRQ+0xfec4>
    5eb4:	0005c604 	andeq	ip, r5, r4, lsl #12
    5eb8:	0aa70800 	beq	fe9c7ec0 <rEINTPEND+0xa89c7e18>
    5ebc:	07180000 	ldreq	r0, [r8, -r0]
    5ec0:	00068080 	andeq	r8, r6, r0, lsl #1
    5ec4:	05360900 	ldreq	r0, [r6, #-2304]!	; 0x900
    5ec8:	220a0000 	andcs	r0, sl, #0
    5ecc:	00000394 	muleq	r0, r4, r3
    5ed0:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    5ed4:	00000447 	andeq	r0, r0, r7, asr #8
    5ed8:	0069230a 	rsbeq	r2, r9, sl, lsl #6
    5edc:	23020000 	movwcs	r0, #8192	; 0x2000
    5ee0:	1b3f0910 	blne	fc8328 <MEM_SIZE+0x7c8328>
    5ee4:	240a0000 	strcs	r0, [sl]
    5ee8:	00000767 	andeq	r0, r0, r7, ror #14
    5eec:	00142302 	andseq	r2, r4, r2, lsl #6
    5ef0:	0649040a 	strbeq	r0, [r9], -sl, lsl #8
    5ef4:	9f040000 	svcls	0x00040000
    5ef8:	07000009 	streq	r0, [r0, -r9]
    5efc:	00039f89 	andeq	r9, r3, r9, lsl #31
    5f00:	0b610800 	bleq	1847f08 <MEM_SIZE+0x1047f08>
    5f04:	090c0000 	stmdbeq	ip, {}
    5f08:	0006c821 	andeq	ip, r6, r1, lsr #16
    5f0c:	03110900 	tsteq	r1, #0
    5f10:	23090000 	movwcs	r0, #36864	; 0x9000
    5f14:	000006c8 	andeq	r0, r0, r8, asr #13
    5f18:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    5f1c:	000005dc 	ldrdeq	r0, [r0], -ip
    5f20:	06ce2409 	strbeq	r2, [lr], r9, lsl #8
    5f24:	23020000 	movwcs	r0, #8192	; 0x2000
    5f28:	16300904 	ldrtne	r0, [r0], -r4, lsl #18
    5f2c:	25090000 	strcs	r0, [r9]
    5f30:	000000b1 	strheq	r0, [r0], -r1
    5f34:	00082302 	andeq	r2, r8, r2, lsl #6
    5f38:	0691040a 	ldreq	r0, [r1], sl, lsl #8
    5f3c:	040f0000 	streq	r0, [pc], #0	; 5f44 <DISABLE_IRQ+0x5ec4>
    5f40:	000b6104 	andeq	r6, fp, r4, lsl #2
    5f44:	91270900 	teqls	r7, r0, lsl #18
    5f48:	0a000006 	beq	5f68 <DISABLE_IRQ+0x5ee8>
    5f4c:	0006d004 	andeq	sp, r6, r4
    5f50:	16e70800 	strbtne	r0, [r7], r0, lsl #16
    5f54:	0b280000 	bleq	a05f5c <MEM_SIZE+0x205f5c>
    5f58:	00075022 	andeq	r5, r7, r2, lsr #32
    5f5c:	05360900 	ldreq	r0, [r6, #-2304]!	; 0x900
    5f60:	230b0000 	movwcs	r0, #45056	; 0xb000
    5f64:	00000394 	muleq	r0, r4, r3
    5f68:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    5f6c:	00001749 	andeq	r1, r0, r9, asr #14
    5f70:	00b1250b 	adcseq	r2, r1, fp, lsl #10
    5f74:	23020000 	movwcs	r0, #8192	; 0x2000
    5f78:	16cb0910 	undefined instruction 0x16cb0910
    5f7c:	260b0000 	strcs	r0, [fp], -r0
    5f80:	000000b1 	strheq	r0, [r0], -r1
    5f84:	09142302 	ldmdbeq	r4, {r1, r8, r9, sp}
    5f88:	00001747 	andeq	r1, r0, r7, asr #14
    5f8c:	00b1270b 	adcseq	r2, r1, fp, lsl #14
    5f90:	23020000 	movwcs	r0, #8192	; 0x2000
    5f94:	05ac0918 	streq	r0, [ip, #2328]!	; 0x918
    5f98:	280b0000 	stmdacs	fp, {}
    5f9c:	000000b1 	strheq	r0, [r0], -r1
    5fa0:	091c2302 	ldmdbeq	ip, {r1, r8, r9, sp}
    5fa4:	00001766 	andeq	r1, r0, r6, ror #14
    5fa8:	00b1290b 	adcseq	r2, r1, fp, lsl #18
    5fac:	23020000 	movwcs	r0, #8192	; 0x2000
    5fb0:	17400920 	strbne	r0, [r0, -r0, lsr #18]
    5fb4:	2a0b0000 	bcs	2c5fbc <DISABLE_IRQ+0x2c5f3c>
    5fb8:	00000534 	andeq	r0, r0, r4, lsr r5
    5fbc:	00242302 	eoreq	r2, r4, r2, lsl #6
    5fc0:	0016e704 	andseq	lr, r6, r4, lsl #14
    5fc4:	e12c0b00 	teq	ip, r0, lsl #22
    5fc8:	10000006 	andne	r0, r0, r6
    5fcc:	00076701 	andeq	r6, r7, r1, lsl #14
    5fd0:	06801100 	streq	r1, [r0], r0, lsl #2
    5fd4:	0a000000 	beq	5fdc <DISABLE_IRQ+0x5f5c>
    5fd8:	00075b04 	andeq	r5, r7, r4, lsl #22
    5fdc:	86040a00 	strhi	r0, [r4], -r0, lsl #20
    5fe0:	12000006 	andne	r0, r0, #6
    5fe4:	00000e60 	andeq	r0, r0, r0, ror #28
    5fe8:	33013802 	movwcc	r3, #6146	; 0x1802
    5fec:	03000000 	movweq	r0, #0
    5ff0:	00000790 	muleq	r0, r0, r7
    5ff4:	00014413 	andeq	r4, r1, r3, lsl r4
    5ff8:	ba380200 	blt	e06800 <MEM_SIZE+0x606800>
    5ffc:	00000005 	andeq	r0, r0, r5
    6000:	00179a12 	andseq	r9, r7, r2, lsl sl
    6004:	012e0100 	teqeq	lr, r0, lsl #2
    6008:	00000033 	andeq	r0, r0, r3, lsr r0
    600c:	0007ad03 	andeq	sl, r7, r3, lsl #26
    6010:	5f711400 	svcpl	0x00711400
    6014:	2e010062 	cdpcs	0, 0, cr0, cr1, cr2, {3}
    6018:	000007ad 	andeq	r0, r0, sp, lsr #15
    601c:	50040a00 	andpl	r0, r4, r0, lsl #20
    6020:	12000007 	andne	r0, r0, #7
    6024:	000017c3 	andeq	r1, r0, r3, asr #15
    6028:	6901a201 	stmdbvs	r1, {r0, r9, sp, pc}
    602c:	01000000 	tsteq	r0, r0
    6030:	00000812 	andeq	r0, r0, r2, lsl r8
    6034:	625f7114 	subsvs	r7, pc, #5
    6038:	ada20100 	stfges	f0, [r2]
    603c:	14000007 	strne	r0, [r0], #-7
    6040:	0067736d 	rsbeq	r7, r7, sp, ror #6
    6044:	06cea201 	strbeq	sl, [lr], r1, lsl #4
    6048:	ac150000 	ldcge	0, cr0, [r5], {0}
    604c:	01000005 	tsteq	r0, r5
    6050:	0000b1a4 	andeq	fp, r0, r4, lsr #3
    6054:	17401500 	strbne	r1, [r0, -r0, lsl #10]
    6058:	a5010000 	strge	r0, [r1]
    605c:	0000038e 	andeq	r0, r0, lr, lsl #7
    6060:	00178415 	andseq	r8, r7, r5, lsl r4
    6064:	b1a60100 	undefined instruction 0xb1a60100
    6068:	15000000 	strne	r0, [r0]
    606c:	000017bd 	undefined instruction 0x000017bd
    6070:	00b1a601 	adcseq	sl, r1, r1, lsl #12
    6074:	41150000 	tstmi	r5, r0
    6078:	01000018 	tsteq	r0, r8, lsl r0
    607c:	0000b1a7 	andeq	fp, r0, r7, lsr #3
    6080:	d2120000 	andsle	r0, r2, #0
    6084:	01000016 	tsteq	r0, r6, lsl r0
    6088:	00330126 	eorseq	r0, r3, r6, lsr #2
    608c:	3a030000 	bcc	c6094 <DISABLE_IRQ+0xc6014>
    6090:	14000008 	strne	r0, [r0], #-8
    6094:	00625f71 	rsbeq	r5, r2, r1, ror pc
    6098:	07ad2601 	streq	r2, [sp, r1, lsl #12]!
    609c:	30130000 	andscc	r0, r3, r0
    60a0:	01000016 	tsteq	r0, r6, lsl r0
    60a4:	0000b126 	andeq	fp, r0, r6, lsr #2
    60a8:	35160000 	ldrcc	r0, [r6]
    60ac:	01000017 	tsteq	r0, r7, lsl r0
    60b0:	8a010181 	bhi	466bc <DISABLE_IRQ+0x4663c>
    60b4:	14000008 	strne	r0, [r0], #-8
    60b8:	00625f71 	rsbeq	r5, r2, r1, ror pc
    60bc:	07ad8101 	streq	r8, [sp, r1, lsl #2]!
    60c0:	6d140000 	ldcvs	0, cr0, [r4]
    60c4:	01006773 	tsteq	r0, r3, ror r7
    60c8:	0006ce81 	andeq	ip, r6, r1, lsl #29
    60cc:	17841300 	strne	r1, [r4, r0, lsl #6]
    60d0:	81010000 	tsthi	r1, r0
    60d4:	000000b1 	strheq	r0, [r0], -r1
    60d8:	00176615 	andseq	r6, r7, r5, lsl r6
    60dc:	b1830100 	orrlt	r0, r3, r0, lsl #2
    60e0:	15000000 	strne	r0, [r0]
    60e4:	00001740 	andeq	r1, r0, r0, asr #14
    60e8:	038e8401 	orreq	r8, lr, #16777216	; 0x1000000
    60ec:	41150000 	tstmi	r5, r0
    60f0:	01000018 	tsteq	r0, r8, lsl r0
    60f4:	0000b185 	andeq	fp, r0, r5, lsl #3
    60f8:	47160000 	ldrmi	r0, [r6, -r0]
    60fc:	02000022 	andeq	r0, r0, #34	; 0x22
    6100:	a303012f 	movwge	r0, #12591	; 0x312f
    6104:	13000008 	movwne	r0, #8
    6108:	00000da3 	andeq	r0, r0, r3, lsr #27
    610c:	05ba2f02 	ldreq	r2, [sl, #3842]!	; 0xf02
    6110:	17000000 	strne	r0, [r0, -r0]
    6114:	00182001 	andseq	r2, r8, r1
    6118:	024b0100 	subeq	r0, fp, #0
    611c:	00005001 	andeq	r5, r0, r1
    6120:	0027a800 	eoreq	sl, r7, r0, lsl #16
    6124:	00281030 	eoreq	r1, r8, r0, lsr r0
    6128:	001ba730 	andseq	sl, fp, r0, lsr r7
    612c:	0008fe00 	andeq	pc, r8, r0, lsl #28
    6130:	5f711800 	svcpl	0x00711800
    6134:	4b010062 	blmi	462c4 <DISABLE_IRQ+0x46244>
    6138:	0007ad02 	andeq	sl, r7, r2, lsl #26
    613c:	001bc600 	andseq	ip, fp, r0, lsl #12
    6140:	18091900 	stmdane	r9, {r8, fp, ip}
    6144:	4b010000 	blmi	4614c <DISABLE_IRQ+0x460cc>
    6148:	0008fe02 	andeq	pc, r8, r2, lsl #28
    614c:	001be400 	andseq	lr, fp, r0, lsl #8
    6150:	17f71900 	ldrbne	r1, [r7, r0, lsl #18]!
    6154:	4b010000 	blmi	4615c <DISABLE_IRQ+0x460dc>
    6158:	0008fe02 	andeq	pc, r8, r2, lsl #28
    615c:	001c1800 	andseq	r1, ip, r0, lsl #16
    6160:	01181a00 	tsteq	r8, r0, lsl #20
    6164:	4d010000 	stcmi	0, cr0, [r1]
    6168:	00009b02 	andeq	r9, r0, r2, lsl #22
    616c:	040a0000 	streq	r0, [sl]
    6170:	00000069 	andeq	r0, r0, r9, rrx
    6174:	174f0117 	smlaldne	r0, pc, r7, r1
    6178:	c8010000 	stmdagt	r1, {}
    617c:	00500101 	subseq	r0, r0, r1, lsl #2
    6180:	28100000 	ldmdacs	r0, {}
    6184:	28e03000 	stmiacs	r0!, {ip, sp}^
    6188:	1c4c3000 	marne	acc0, r3, ip
    618c:	093f0000 	ldmdbeq	pc!, {}
    6190:	71180000 	tstvc	r8, r0
    6194:	0100625f 	tsteq	r0, pc, asr r2
    6198:	07ad01c8 	streq	r0, [sp, r8, asr #3]!
    619c:	1c6b0000 	stclne	0, cr0, [fp]
    61a0:	181a0000 	ldmdane	sl, {}
    61a4:	01000001 	tsteq	r0, r1
    61a8:	009b01cb 	addseq	r0, fp, fp, asr #3
    61ac:	17000000 	strne	r0, [r0, -r0]
    61b0:	00184701 	andseq	r4, r8, r1, lsl #14
    61b4:	02040100 	andeq	r0, r4, #0
    61b8:	00005001 	andeq	r5, r0, r1
    61bc:	0028e000 	eoreq	lr, r8, r0
    61c0:	0029c830 	eoreq	ip, r9, r0, lsr r8
    61c4:	001c8930 	andseq	r8, ip, r0, lsr r9
    61c8:	00099c00 	andeq	r9, r9, r0, lsl #24
    61cc:	5f711800 	svcpl	0x00711800
    61d0:	04010062 	streq	r0, [r1], #-98	; 0x62
    61d4:	0007ad02 	andeq	sl, r7, r2, lsl #26
    61d8:	001ca800 	andseq	sl, ip, r0, lsl #16
    61dc:	0d9d1a00 	vldreq	s2, [sp]
    61e0:	06010000 	streq	r0, [r1], -r0
    61e4:	0005ba02 	andeq	fp, r5, r2, lsl #20
    61e8:	01181a00 	tsteq	r8, r0, lsl #20
    61ec:	08010000 	stmdaeq	r1, {}
    61f0:	00009b02 	andeq	r9, r0, r2, lsl #22
    61f4:	07731b00 	ldrbeq	r1, [r3, -r0, lsl #22]!
    61f8:	29640000 	stmdbcs	r4!, {}^
    61fc:	02c83000 	sbceq	r3, r8, #0
    6200:	26010000 	strcs	r0, [r1], -r0
    6204:	07841c02 	streq	r1, [r4, r2, lsl #24]
    6208:	00000000 	andeq	r0, r0, r0
    620c:	176b0117 	undefined instruction 0x176b0117
    6210:	65010000 	strvs	r0, [r1]
    6214:	00500101 	subseq	r0, r0, r1, lsl #2
    6218:	29c80000 	stmibcs	r8, {}^
    621c:	2c243000 	stccs	0, cr3, [r4]
    6220:	1cc63000 	stclne	0, cr3, [r6], {0}
    6224:	0a7b0000 	beq	1ec622c <MEM_SIZE+0x16c622c>
    6228:	71180000 	tstvc	r8, r0
    622c:	0100625f 	tsteq	r0, pc, asr r2
    6230:	07ad0165 	streq	r0, [sp, r5, ror #2]!
    6234:	1cf10000 	ldclne	0, cr0, [r1]
    6238:	c1190000 	tstgt	r9, r0
    623c:	0100000d 	tsteq	r0, sp
    6240:	00a60165 	adceq	r0, r6, r5, ror #2
    6244:	1d250000 	stcne	0, cr0, [r5]
    6248:	6d180000 	ldcvs	0, cr0, [r8]
    624c:	01006773 	tsteq	r0, r3, ror r7
    6250:	05340165 	ldreq	r0, [r4, #-357]!	; 0x165
    6254:	1d590000 	ldclne	0, cr0, [r9]
    6258:	e3190000 	tst	r9, #0
    625c:	01000017 	tsteq	r0, r7, lsl r0
    6260:	0a7b0165 	beq	1ec67fc <MEM_SIZE+0x16c67fc>
    6264:	1d8d0000 	stcne	0, cr0, [sp]
    6268:	df1d0000 	svcle	0x001d0000
    626c:	01000011 	tsteq	r0, r1, lsl r0
    6270:	00500167 	subseq	r0, r0, r7, ror #2
    6274:	1dab0000 	stcne	0, cr0, [fp]
    6278:	181a0000 	ldmdane	sl, {}
    627c:	01000001 	tsteq	r0, r1
    6280:	009b0169 	addseq	r0, fp, r9, ror #2
    6284:	901e0000 	andsls	r0, lr, r0
    6288:	60000007 	andvs	r0, r0, r7
    628c:	6430002a 	ldrtvs	r0, [r0], #-42	; 0x2a
    6290:	0130002a 	teqeq	r0, sl, lsr #32
    6294:	0a300189 	beq	c068c0 <MEM_SIZE+0x4068c0>
    6298:	a11c0000 	tstge	ip, r0
    629c:	00000007 	andeq	r0, r0, r7
    62a0:	0007b31b 	andeq	fp, r7, fp, lsl r3
    62a4:	002a7000 	eoreq	r7, sl, r0
    62a8:	0002e030 	andeq	lr, r2, r0, lsr r0
    62ac:	018b0100 	orreq	r0, fp, r0, lsl #2
    62b0:	0007cf1c 	andeq	ip, r7, ip, lsl pc
    62b4:	07c41c00 	strbeq	r1, [r4, r0, lsl #24]
    62b8:	f81f0000 	undefined instruction 0xf81f0000
    62bc:	20000002 	andcs	r0, r0, r2
    62c0:	000007da 	ldrdeq	r0, [r0], -sl
    62c4:	00001e16 	andeq	r1, r0, r6, lsl lr
    62c8:	0007e520 	andeq	lr, r7, r0, lsr #10
    62cc:	001e4a00 	andseq	r4, lr, r0, lsl #20
    62d0:	07f02000 	ldrbeq	r2, [r0, r0]!
    62d4:	1e730000 	cdpne	0, 7, cr0, cr3, cr0, {0}
    62d8:	06200000 	strteq	r0, [r0], -r0
    62dc:	d3000008 	movwle	r0, #8
    62e0:	2100001e 	tstcs	r0, lr, lsl r0
    62e4:	000007fb 	strdeq	r0, [r0], -fp
    62e8:	0a000000 	beq	62f0 <DISABLE_IRQ+0x6270>
    62ec:	0000b104 	andeq	fp, r0, r4, lsl #2
    62f0:	d1012200 	tstle	r1, r0, lsl #4
    62f4:	01000017 	tsteq	r0, r7, lsl r0
    62f8:	005001c3 	subseq	r0, r0, r3, asr #3
    62fc:	2c240000 	stccs	0, cr0, [r4]
    6300:	2e6c3000 	cdpcs	0, 6, cr3, cr12, cr0, {0}
    6304:	1efc3000 	cdpne	0, 15, cr3, cr12, cr0, {0}
    6308:	0b770000 	bleq	1dc6310 <MEM_SIZE+0x15c6310>
    630c:	71230000 	teqvc	r3, r0
    6310:	0100625f 	tsteq	r0, pc, asr r2
    6314:	0007adc3 	andeq	sl, r7, r3, asr #27
    6318:	001f2700 	andseq	r2, pc, r0, lsl #14
    631c:	10ad2400 	adcne	r2, sp, r0, lsl #8
    6320:	c3010000 	movwgt	r0, #4096	; 0x1000
    6324:	00000534 	andeq	r0, r0, r4, lsr r5
    6328:	00001f45 	andeq	r1, r0, r5, asr #30
    632c:	00163024 	andseq	r3, r6, r4, lsr #32
    6330:	b1c30100 	biclt	r0, r3, r0, lsl #2
    6334:	9a000000 	bls	633c <DISABLE_IRQ+0x62bc>
    6338:	2400001f 	strcs	r0, [r0], #-31
    633c:	0000178a 	andeq	r1, r0, sl, lsl #15
    6340:	0045c301 	subeq	ip, r5, r1, lsl #6
    6344:	1fef0000 	svcne	0x00ef0000
    6348:	9d150000 	ldcls	0, cr0, [r5]
    634c:	0100000d 	tsteq	r0, sp
    6350:	0005bac6 	andeq	fp, r5, r6, asr #21
    6354:	0d942500 	cfldr32eq	mvfx2, [r4]
    6358:	c7010000 	strgt	r0, [r1, -r0]
    635c:	0000076d 	andeq	r0, r0, sp, ror #14
    6360:	0000200d 	andeq	r2, r0, sp
    6364:	00011815 	andeq	r1, r1, r5, lsl r8
    6368:	9bc90100 	blls	ff246770 <rEINTPEND+0xa92466c8>
    636c:	26000000 	strcs	r0, [r0], -r0
    6370:	00000812 	andeq	r0, r0, r2, lsl r8
    6374:	30002c90 	mulcc	r0, r0, ip
    6378:	30002c94 	mulcc	r0, r4, ip
    637c:	0b1dd501 	bleq	77b788 <DISABLE_IRQ+0x77b708>
    6380:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
    6384:	1c000008 	stcne	0, cr0, [r0], {8}
    6388:	00000823 	andeq	r0, r0, r3, lsr #16
    638c:	07732600 	ldrbeq	r2, [r3, -r0, lsl #12]!
    6390:	2cf00000 	ldclcs	0, cr0, [r0]
    6394:	2cf43000 	ldclcs	0, cr3, [r4]
    6398:	e0013000 	and	r3, r1, r0
    639c:	00000b36 	andeq	r0, r0, r6, lsr fp
    63a0:	0007841c 	andeq	r8, r7, ip, lsl r4
    63a4:	3a270000 	bcc	9c63ac <MEM_SIZE+0x1c63ac>
    63a8:	c8000008 	stmdagt	r0, {r3}
    63ac:	1030002d 	eorsne	r0, r0, sp, lsr #32
    63b0:	01000003 	tsteq	r0, r3
    63b4:	085d1ce3 	ldmdaeq	sp, {r0, r1, r5, r6, r7, sl, fp, ip}^
    63b8:	521c0000 	andspl	r0, ip, #0
    63bc:	1c000008 	stcne	0, cr0, [r0], {8}
    63c0:	00000847 	andeq	r0, r0, r7, asr #16
    63c4:	0003281f 	andeq	r2, r3, pc, lsl r8
    63c8:	08682000 	stmdaeq	r8!, {sp}^
    63cc:	20360000 	eorscs	r0, r6, r0
    63d0:	73200000 	teqvc	r0, #0
    63d4:	5f000008 	svcpl	0x00000008
    63d8:	20000020 	andcs	r0, r0, r0, lsr #32
    63dc:	0000087e 	andeq	r0, r0, lr, ror r8
    63e0:	00002088 	andeq	r2, r0, r8, lsl #1
    63e4:	17000000 	strne	r0, [r0, -r0]
    63e8:	00171b01 	andseq	r1, r7, r1, lsl #22
    63ec:	011e0100 	tsteq	lr, r0, lsl #2
    63f0:	00005001 	andeq	r5, r0, r1
    63f4:	002e6c00 	eoreq	r6, lr, r0, lsl #24
    63f8:	002f0c30 	eoreq	r0, pc, r0, lsr ip
    63fc:	0020b130 	eoreq	fp, r0, r0, lsr r1
    6400:	000bc600 	andeq	ip, fp, r0, lsl #12
    6404:	5f711800 	svcpl	0x00711800
    6408:	1e010062 	cdpne	0, 0, cr0, cr1, cr2, {3}
    640c:	0007ad01 	andeq	sl, r7, r1, lsl #26
    6410:	0020dc00 	eoreq	sp, r0, r0, lsl #24
    6414:	10ad1900 	adcne	r1, sp, r0, lsl #18
    6418:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    641c:	00053401 	andeq	r3, r5, r1, lsl #8
    6420:	00210500 	eoreq	r0, r1, r0, lsl #10
    6424:	16301900 	ldrtne	r1, [r0], -r0, lsl #18
    6428:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    642c:	0000b101 	andeq	fp, r0, r1, lsl #2
    6430:	00215a00 	eoreq	r5, r1, r0, lsl #20
    6434:	01220000 	teqeq	r2, r0
    6438:	000016f8 	strdeq	r1, [r0], -r8
    643c:	50014a01 	andpl	r4, r1, r1, lsl #20
    6440:	0c000000 	stceq	0, cr0, [r0], {0}
    6444:	a030002f 	eorsge	r0, r0, pc, lsr #32
    6448:	8e30002f 	cdphi	0, 3, cr0, cr0, cr15, {1}
    644c:	52000021 	andpl	r0, r0, #33	; 0x21
    6450:	2300000c 	movwcs	r0, #12
    6454:	00625f71 	rsbeq	r5, r2, r1, ror pc
    6458:	07ad4a01 	streq	r4, [sp, r1, lsl #20]!
    645c:	21ad0000 	undefined instruction 0x21ad0000
    6460:	f0240000 	undefined instruction 0xf0240000
    6464:	01000017 	tsteq	r0, r7, lsl r0
    6468:	00038e4a 	andeq	r8, r3, sl, asr #28
    646c:	0021cb00 	eoreq	ip, r1, r0, lsl #22
    6470:	17102400 	ldrne	r2, [r0, -r0, lsl #8]
    6474:	4a010000 	bmi	4647c <DISABLE_IRQ+0x463fc>
    6478:	00000534 	andeq	r0, r0, r4, lsr r5
    647c:	000021de 	ldrdeq	r2, [r0], -lr
    6480:	0017fd24 	andseq	pc, r7, r4, lsr #26
    6484:	b14a0100 	cmplt	sl, r0, lsl #2
    6488:	f1000000 	cps	#0
    648c:	28000021 	stmdacs	r0, {r0, r5}
    6490:	000016be 	undefined instruction 0x000016be
    6494:	00b14a01 	adcseq	r4, r1, r1, lsl #20
    6498:	91020000 	tstls	r2, r0
    649c:	17492500 	strbne	r2, [r9, -r0, lsl #10]
    64a0:	4c010000 	stcmi	0, cr0, [r1], {0}
    64a4:	000000b1 	strheq	r0, [r0], -r1
    64a8:	00002204 	andeq	r2, r0, r4, lsl #4
    64ac:	00088a29 	andeq	r8, r8, r9, lsr #20
    64b0:	002f7c00 	eoreq	r7, pc, r0, lsl #24
    64b4:	002f8430 	eoreq	r8, pc, r0, lsr r4
    64b8:	1c6d0130 	stfnee	f0, [sp], #-192	; 0xffffff40
    64bc:	00000897 	muleq	r0, r7, r8
    64c0:	8f2a0000 	svchi	0x002a0000
    64c4:	0c000003 	stceq	0, cr0, [r0], {3}
    64c8:	00076d4a 	andeq	r6, r7, sl, asr #26
    64cc:	2a010100 	bcs	468d4 <DISABLE_IRQ+0x46854>
    64d0:	00000e50 	andeq	r0, r0, r0, asr lr
    64d4:	0045510c 	subeq	r5, r5, ip, lsl #2
    64d8:	01010000 	tsteq	r1, r0
    64dc:	000d852a 	andeq	r8, sp, sl, lsr #10
    64e0:	45520c00 	ldrbmi	r0, [r2, #-3072]	; 0xc00
    64e4:	01000000 	tsteq	r0, r0
    64e8:	0c160001 	ldceq	0, cr0, [r6], {1}
    64ec:	00020000 	andeq	r0, r2, r0
    64f0:	00001580 	andeq	r1, r0, r0, lsl #11
    64f4:	004d0104 	subeq	r0, sp, r4, lsl #2
    64f8:	54010000 	strpl	r0, [r1]
    64fc:	63000019 	movwvs	r0, #25
    6500:	a0000000 	andge	r0, r0, r0
    6504:	3430002f 	ldrtcc	r0, [r0], #-47	; 0x2f
    6508:	fb300039 	blx	c065f6 <MEM_SIZE+0x4065f6>
    650c:	02000013 	andeq	r0, r0, #19
    6510:	00000564 	andeq	r0, r0, r4, ror #10
    6514:	01032103 	tsteq	r3, r3, lsl #2
    6518:	0000a006 	andeq	sl, r0, r6
    651c:	0ee80400 	cdpeq	4, 14, cr0, cr8, cr0, {0}
    6520:	23030000 	movwcs	r0, #12288	; 0x3000
    6524:	0000003e 	andeq	r0, r0, lr, lsr r0
    6528:	9e080103 	adflse	f0, f0, f3
    652c:	04000000 	streq	r0, [r0]
    6530:	000004f7 	strdeq	r0, [r0], -r7
    6534:	003e2403 	eorseq	r2, lr, r3, lsl #8
    6538:	fb040000 	blx	106542 <DISABLE_IRQ+0x1064c2>
    653c:	0300000a 	movweq	r0, #10
    6540:	00005b26 	andeq	r5, r0, r6, lsr #22
    6544:	07020300 	streq	r0, [r2, -r0, lsl #6]
    6548:	0000008b 	andeq	r0, r0, fp, lsl #1
    654c:	59050203 	stmdbpl	r5, {r0, r1, r9}
    6550:	04000000 	streq	r0, [r0]
    6554:	00000338 	andeq	r0, r0, r8, lsr r3
    6558:	00742803 	rsbseq	r2, r4, r3, lsl #16
    655c:	04030000 	streq	r0, [r3]
    6560:	00003707 	andeq	r3, r0, r7, lsl #14
    6564:	05040500 	streq	r0, [r4, #-1280]	; 0x500
    6568:	00746e69 	rsbseq	r6, r4, r9, ror #28
    656c:	00050803 	andeq	r0, r5, r3, lsl #16
    6570:	03000000 	movweq	r0, #0
    6574:	002d0708 	eoreq	r0, sp, r8, lsl #14
    6578:	9f040000 	svcls	0x00040000
    657c:	03000003 	movweq	r0, #3
    6580:	0000742d 	andeq	r7, r0, sp, lsr #8
    6584:	01320400 	teqeq	r2, r0, lsl #8
    6588:	22040000 	andcs	r0, r4, #0
    658c:	00000074 	andeq	r0, r0, r4, ror r0
    6590:	000a2704 	andeq	r2, sl, r4, lsl #14
    6594:	692a0500 	stmdbvs	sl!, {r8, sl}
    6598:	04000000 	streq	r0, [r0]
    659c:	00000829 	andeq	r0, r0, r9, lsr #16
    65a0:	00692c05 	rsbeq	r2, r9, r5, lsl #24
    65a4:	04060000 	streq	r0, [r6]
    65a8:	02614306 	rsbeq	r4, r1, #402653184	; 0x18000000
    65ac:	b5070000 	strlt	r0, [r7]
    65b0:	0000000b 	andeq	r0, r0, fp
    65b4:	000b6e07 	andeq	r6, fp, r7, lsl #28
    65b8:	aa070100 	bge	1c69c0 <DISABLE_IRQ+0x1c6940>
    65bc:	02000003 	andeq	r0, r0, #3
    65c0:	00092107 	andeq	r2, r9, r7, lsl #2
    65c4:	35070300 	strcc	r0, [r7, #-768]	; 0x300
    65c8:	04000006 	streq	r0, [r0], #-6
    65cc:	000a3507 	andeq	r3, sl, r7, lsl #10
    65d0:	d4070500 	strle	r0, [r7], #-1280	; 0x500
    65d4:	0600000a 	streq	r0, [r0], -sl
    65d8:	0002ac07 	andeq	sl, r2, r7, lsl #24
    65dc:	e3070700 	movw	r0, #30464	; 0x7700
    65e0:	08000006 	stmdaeq	r0, {r1, r2}
    65e4:	0001ee07 	andeq	lr, r1, r7, lsl #28
    65e8:	cd070900 	stcgt	9, cr0, [r7]
    65ec:	0a000008 	beq	6614 <DISABLE_IRQ+0x6594>
    65f0:	000ba107 	andeq	sl, fp, r7, lsl #2
    65f4:	80070b00 	andhi	r0, r7, r0, lsl #22
    65f8:	0c000004 	stceq	0, cr0, [r0], {4}
    65fc:	0008bc07 	andeq	fp, r8, r7, lsl #24
    6600:	05070d00 	streq	r0, [r7, #-3328]	; 0xd00
    6604:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
    6608:	0006d007 	andeq	sp, r6, r7
    660c:	40070f00 	andmi	r0, r7, r0, lsl #30
    6610:	10000003 	andne	r0, r0, r3
    6614:	00096a07 	andeq	r6, r9, r7, lsl #20
    6618:	39071100 	stmdbcc	r7, {r8, ip}
    661c:	1200000b 	andne	r0, r0, #11
    6620:	00060e07 	andeq	r0, r6, r7, lsl #28
    6624:	be071300 	cdplt	3, 0, cr1, cr7, cr0, {0}
    6628:	14000002 	strne	r0, [r0], #-2
    662c:	00069007 	andeq	r9, r6, r7
    6630:	e5071500 	str	r1, [r7, #-1280]	; 0x500
    6634:	16000008 	strne	r0, [r0], -r8
    6638:	0002d007 	andeq	sp, r2, r7
    663c:	0a071700 	beq	1cc244 <DISABLE_IRQ+0x1cc1c4>
    6640:	18000009 	stmdane	r0, {r0, r3}
    6644:	00021507 	andeq	r1, r2, r7, lsl #10
    6648:	76071900 	strvc	r1, [r7], -r0, lsl #18
    664c:	1a000007 	bne	6670 <DISABLE_IRQ+0x65f0>
    6650:	0002f007 	andeq	pc, r2, r7
    6654:	c1071b00 	tstgt	r7, r0, lsl #22
    6658:	1c00000b 	stcne	0, cr0, [r0], {11}
    665c:	00040507 	andeq	r0, r4, r7, lsl #10
    6660:	10071d00 	andne	r1, r7, r0, lsl #26
    6664:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
    6668:	00093207 	andeq	r3, r9, r7, lsl #4
    666c:	67071f00 	strvs	r1, [r7, -r0, lsl #30]
    6670:	20000002 	andcs	r0, r0, r2
    6674:	0005b107 	andeq	fp, r5, r7, lsl #2
    6678:	44072100 	strmi	r2, [r7], #-256	; 0x100
    667c:	22000006 	andcs	r0, r0, #6
    6680:	0007ff07 	andeq	pc, r7, r7, lsl #30
    6684:	ba072300 	blt	1cf28c <DISABLE_IRQ+0x1cf20c>
    6688:	24000003 	strcs	r0, [r0], #-3
    668c:	00089907 	andeq	r9, r8, r7, lsl #18
    6690:	4b072500 	blmi	1cfa98 <DISABLE_IRQ+0x1cfa18>
    6694:	2600000b 	strcs	r0, [r0], -fp
    6698:	00088307 	andeq	r8, r8, r7, lsl #6
    669c:	3e072700 	cdpcc	7, 0, cr2, cr7, cr0, {0}
    66a0:	28000002 	stmdacs	r0, {r1}
    66a4:	0009b707 	andeq	fp, r9, r7, lsl #14
    66a8:	e5072900 	str	r2, [r7, #-2304]	; 0x900
    66ac:	2a00000a 	bcs	66dc <DISABLE_IRQ+0x665c>
    66b0:	000a8707 	andeq	r8, sl, r7, lsl #14
    66b4:	48072b00 	stmdami	r7, {r8, r9, fp, sp}
    66b8:	2c000009 	stccs	0, cr0, [r0], {9}
    66bc:	0009f507 	andeq	pc, r9, r7, lsl #10
    66c0:	c7072d00 	strgt	r2, [r7, -r0, lsl #26]
    66c4:	2e000009 	cdpcs	0, 0, cr0, cr0, cr9, {0}
    66c8:	0003cf07 	andeq	ip, r3, r7, lsl #30
    66cc:	a7072f00 	strge	r2, [r7, -r0, lsl #30]
    66d0:	30000006 	andcc	r0, r0, r6
    66d4:	00041307 	andeq	r1, r4, r7, lsl #6
    66d8:	89073100 	stmdbhi	r7, {r8, ip, sp}
    66dc:	32000009 	andcc	r0, r0, #9
    66e0:	00035207 	andeq	r5, r3, r7, lsl #4
    66e4:	fd073300 	stc2	3, cr3, [r7]
    66e8:	34000005 	strcc	r0, [r0], #-5
    66ec:	000bd507 	andeq	sp, fp, r7, lsl #10
    66f0:	e1073500 	tst	r7, r0, lsl #10
    66f4:	36000004 	strcc	r0, [r0], -r4
    66f8:	0007a807 	andeq	sl, r7, r7, lsl #16
    66fc:	92073700 	andls	r3, r7, #0
    6700:	38000007 	stmdacc	r0, {r0, r1, r2}
    6704:	00031607 	andeq	r1, r3, r7, lsl #12
    6708:	f3073900 	vmls.i8	d3, d7, d0
    670c:	3a000006 	bcc	672c <DISABLE_IRQ+0x66ac>
    6710:	0003e207 	andeq	lr, r3, r7, lsl #4
    6714:	bc073b00 	stclt	11, cr3, [r7], {0}
    6718:	3c000006 	stccc	0, cr0, [r0], {6}
    671c:	00050f07 	andeq	r0, r5, r7, lsl #30
    6720:	6d073d00 	stcvs	13, cr3, [r7]
    6724:	3e000005 	cdpcc	0, 0, cr0, cr0, cr5, {0}
    6728:	0004cb07 	andeq	ip, r4, r7, lsl #22
    672c:	6e073f00 	cdpvs	15, 0, cr3, cr7, cr0, {0}
    6730:	c0000003 	andgt	r0, r0, r3
    6734:	058b0700 	streq	r0, [fp, #1792]	; 0x700
    6738:	00c10000 	sbceq	r0, r1, r0
    673c:	00083707 	andeq	r3, r8, r7, lsl #14
    6740:	0700c200 	streq	ip, [r0, -r0, lsl #4]
    6744:	00000674 	andeq	r0, r0, r4, ror r6
    6748:	060000c3 	streq	r0, [r0], -r3, asr #1
    674c:	bea00604 	cdplt	6, 10, cr0, cr0, cr4, {0}
    6750:	07000002 	streq	r0, [r0, -r2]
    6754:	00000df5 	strdeq	r0, [r0], -r5
    6758:	0de60700 	stcleq	7, cr0, [r6]
    675c:	07010000 	streq	r0, [r1, -r0]
    6760:	00000ed9 	ldrdeq	r0, [r0], -r9
    6764:	0f210702 	svceq	0x00210702
    6768:	07030000 	streq	r0, [r3, -r0]
    676c:	00000d37 	andeq	r0, r0, r7, lsr sp
    6770:	0f690704 	svceq	0x00690704
    6774:	07050000 	streq	r0, [r5, -r0]
    6778:	00000e3f 	andeq	r0, r0, pc, lsr lr
    677c:	0e2f0706 	cdpeq	7, 2, cr0, cr15, cr6, {0}
    6780:	07070000 	streq	r0, [r7, -r0]
    6784:	00000f37 	andeq	r0, r0, r7, lsr pc
    6788:	0d440708 	stcleq	7, cr0, [r4, #-32]	; 0xffffffe0
    678c:	07090000 	streq	r0, [r9, -r0]
    6790:	00000dad 	andeq	r0, r0, sp, lsr #27
    6794:	0e16070a 	cdpeq	7, 1, cr0, cr6, cr10, {0}
    6798:	070b0000 	streq	r0, [fp, -r0]
    679c:	00000e7f 	andeq	r0, r0, pc, ror lr
    67a0:	0f02070c 	svceq	0x0002070c
    67a4:	000d0000 	andeq	r0, sp, r0
    67a8:	b5060406 	strlt	r0, [r6, #-1030]	; 0x406
    67ac:	0000030f 	andeq	r0, r0, pc, lsl #6
    67b0:	0009e407 	andeq	lr, r9, r7, lsl #8
    67b4:	57071100 	strpl	r1, [r7, -r0, lsl #2]
    67b8:	12000004 	andne	r0, r0, #4
    67bc:	0001db07 	andeq	sp, r1, r7, lsl #22
    67c0:	c3071300 	movwgt	r1, #29440	; 0x7300
    67c4:	14000007 	strne	r0, [r0], #-7
    67c8:	00073307 	andeq	r3, r7, r7, lsl #6
    67cc:	44071500 	strmi	r1, [r7], #-1280	; 0x500
    67d0:	1600000a 	strne	r0, [r0], -sl
    67d4:	000b8e07 	andeq	r8, fp, r7, lsl #28
    67d8:	c9071700 	stmdbgt	r7, {r8, r9, sl, ip}
    67dc:	18000005 	stmdane	r0, {r0, r2}
    67e0:	0008a907 	andeq	sl, r8, r7, lsl #18
    67e4:	50071900 	andpl	r1, r7, r0, lsl #18
    67e8:	1a000008 	bne	6810 <DISABLE_IRQ+0x6790>
    67ec:	00071707 	andeq	r1, r7, r7, lsl #14
    67f0:	1b071b00 	blne	1cd3f8 <DISABLE_IRQ+0x1cd378>
    67f4:	1c00000b 	stcne	0, cr0, [r0], {11}
    67f8:	0c090800 	stceq	8, cr0, [r9], {0}
    67fc:	02080000 	andeq	r0, r8, #0
    6800:	00033823 	andeq	r3, r3, r3, lsr #16
    6804:	03110900 	tsteq	r1, #0
    6808:	24020000 	strcs	r0, [r2]
    680c:	00000338 	andeq	r0, r0, r8, lsr r3
    6810:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    6814:	00000281 	andeq	r0, r0, r1, lsl #5
    6818:	03382502 	teqeq	r8, #8388608	; 0x800000
    681c:	23020000 	movwcs	r0, #8192	; 0x2000
    6820:	040a0004 	streq	r0, [sl], #-4
    6824:	0000030f 	andeq	r0, r0, pc, lsl #6
    6828:	000c0904 	andeq	r0, ip, r4, lsl #18
    682c:	0f260200 	svceq	0x00260200
    6830:	08000003 	stmdaeq	r0, {r0, r1}
    6834:	0000065c 	andeq	r0, r0, ip, asr r6
    6838:	8e2f0710 	mcrhi	7, 1, r0, cr15, cr0, {0}
    683c:	09000003 	stmdbeq	r0, {r0, r1}
    6840:	00000ac9 	andeq	r0, r0, r9, asr #21
    6844:	033e3107 	teqeq	lr, #-1073741823	; 0xc0000001
    6848:	23020000 	movwcs	r0, #8192	; 0x2000
    684c:	08e00900 	stmiaeq	r0!, {r8, fp}^
    6850:	32070000 	andcc	r0, r7, #0
    6854:	0000038e 	andeq	r0, r0, lr, lsl #7
    6858:	09082302 	stmdbeq	r8, {r1, r8, r9, sp}
    685c:	00000900 	andeq	r0, r0, r0, lsl #18
    6860:	00453307 	subeq	r3, r5, r7, lsl #6
    6864:	23020000 	movwcs	r0, #8192	; 0x2000
    6868:	0427090c 	strteq	r0, [r7], #-2316	; 0x90c
    686c:	34070000 	strcc	r0, [r7]
    6870:	00000045 	andeq	r0, r0, r5, asr #32
    6874:	000d2302 	andeq	r2, sp, r2, lsl #6
    6878:	0045040a 	subeq	r0, r5, sl, lsl #8
    687c:	5c040000 	stcpl	0, cr0, [r4], {0}
    6880:	07000006 	streq	r0, [r0, -r6]
    6884:	00034936 	andeq	r4, r3, r6, lsr r9
    6888:	099f0800 	ldmibeq	pc, {fp}
    688c:	076c0000 	strbeq	r0, [ip, -r0]!
    6890:	0005343a 	andeq	r3, r5, sl, lsr r4
    6894:	14810900 	strne	r0, [r1], #2304	; 0x900
    6898:	3b070000 	blcc	1c68a0 <DISABLE_IRQ+0x1c6820>
    689c:	00000534 	andeq	r0, r0, r4, lsr r5
    68a0:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    68a4:	0000044d 	andeq	r0, r0, sp, asr #8
    68a8:	033e4107 	teqeq	lr, #-1073741823	; 0xc0000001
    68ac:	23020000 	movwcs	r0, #8192	; 0x2000
    68b0:	05520904 	ldrbeq	r0, [r2, #-2308]	; 0x904
    68b4:	45070000 	strmi	r0, [r7]
    68b8:	0000053a 	andeq	r0, r0, sl, lsr r5
    68bc:	090c2302 	stmdbeq	ip, {r1, r8, r9, sp}
    68c0:	00001aef 	andeq	r1, r0, pc, ror #21
    68c4:	00694b07 	rsbeq	r4, r9, r7, lsl #22
    68c8:	23020000 	movwcs	r0, #8192	; 0x2000
    68cc:	08780910 	ldmdaeq	r8!, {r4, r8, fp}^
    68d0:	4c070000 	stcmi	0, cr0, [r7], {0}
    68d4:	00000069 	andeq	r0, r0, r9, rrx
    68d8:	09142302 	ldmdbeq	r4, {r1, r8, r9, sp}
    68dc:	00001d35 	andeq	r1, r0, r5, lsr sp
    68e0:	00454d07 	subeq	r4, r5, r7, lsl #26
    68e4:	23020000 	movwcs	r0, #8192	; 0x2000
    68e8:	1e5a0918 	mrcne	9, 2, r0, cr10, cr8, {0}
    68ec:	51070000 	tstpl	r7, r0
    68f0:	00000045 	andeq	r0, r0, r5, asr #32
    68f4:	09192302 	ldmdbeq	r9, {r1, r8, r9, sp}
    68f8:	00000364 	andeq	r0, r0, r4, ror #6
    68fc:	00455307 	subeq	r5, r5, r7, lsl #6
    6900:	23020000 	movwcs	r0, #8192	; 0x2000
    6904:	043f091a 	ldrteq	r0, [pc], #2330	; 690c <DISABLE_IRQ+0x688c>
    6908:	56070000 	strpl	r0, [r7], -r0
    690c:	00000045 	andeq	r0, r0, r5, asr #32
    6910:	091b2302 	ldmdbeq	fp, {r1, r8, r9, sp}
    6914:	00000bad 	andeq	r0, r0, sp, lsr #23
    6918:	05ae5a07 	streq	r5, [lr, #2567]!	; 0xa07
    691c:	23020000 	movwcs	r0, #8192	; 0x2000
    6920:	0bf8091c 	bleq	ffe08d98 <rEINTPEND+0xa9e08cf0>
    6924:	5f070000 	svcpl	0x00070000
    6928:	0000033e 	andeq	r0, r0, lr, lsr r3
    692c:	09202302 	stmdbeq	r0!, {r1, r8, r9, sp}
    6930:	00000b03 	andeq	r0, r0, r3, lsl #22
    6934:	00696307 	rsbeq	r6, r9, r7, lsl #6
    6938:	23020000 	movwcs	r0, #8192	; 0x2000
    693c:	06250928 	strteq	r0, [r5], -r8, lsr #18
    6940:	65070000 	strvs	r0, [r7]
    6944:	000005b4 	undefined instruction 0x000005b4
    6948:	092c2302 	stmdbeq	ip!, {r1, r8, r9, sp}
    694c:	0000086e 	andeq	r0, r0, lr, ror #16
    6950:	033e6607 	teqeq	lr, #7340032	; 0x700000
    6954:	23020000 	movwcs	r0, #8192	; 0x2000
    6958:	0c0e0930 	stceq	9, cr0, [lr], {48}	; 0x30
    695c:	68070000 	stmdavs	r7, {}
    6960:	000000a6 	andeq	r0, r0, r6, lsr #1
    6964:	09382302 	ldmdbeq	r8!, {r1, r8, r9, sp}
    6968:	000007f3 	strdeq	r0, [r0], -r3
    696c:	00a66907 	adceq	r6, r6, r7, lsl #18
    6970:	23020000 	movwcs	r0, #8192	; 0x2000
    6974:	05a7093c 	streq	r0, [r7, #2364]!	; 0x93c
    6978:	6b070000 	blvs	1c6980 <DISABLE_IRQ+0x1c6900>
    697c:	000005ba 	undefined instruction 0x000005ba
    6980:	0b402302 	bleq	100f590 <MEM_SIZE+0x80f590>
    6984:	0067736d 	rsbeq	r7, r7, sp, ror #6
    6988:	05346d07 	ldreq	r6, [r4, #-3335]!	; 0xd07
    698c:	23020000 	movwcs	r0, #8192	; 0x2000
    6990:	16300944 	ldrtne	r0, [r0], -r4, asr #18
    6994:	70070000 	andvc	r0, r7, r0
    6998:	000000b1 	strheq	r0, [r0], -r1
    699c:	09482302 	stmdbeq	r8, {r1, r8, r9, sp}^
    69a0:	000008db 	ldrdeq	r0, [r0], -fp
    69a4:	038e7307 	orreq	r7, lr, #469762048	; 0x1c000000
    69a8:	23020000 	movwcs	r0, #8192	; 0x2000
    69ac:	09ac094c 	stmibeq	ip!, {r2, r3, r6, r8, fp}
    69b0:	75070000 	strvc	r0, [r7]
    69b4:	00000045 	andeq	r0, r0, r5, asr #32
    69b8:	09502302 	ldmdbeq	r0, {r1, r8, r9, sp}^
    69bc:	000007e6 	andeq	r0, r0, r6, ror #15
    69c0:	00457607 	subeq	r7, r5, r7, lsl #12
    69c4:	23020000 	movwcs	r0, #8192	; 0x2000
    69c8:	053d0951 	ldreq	r0, [sp, #-2385]!	; 0x951
    69cc:	79070000 	stmdbvc	r7, {}
    69d0:	000005c0 	andeq	r0, r0, r0, asr #11
    69d4:	09542302 	ldmdbeq	r4, {r1, r8, r9, sp}^
    69d8:	00000ab5 	undefined instruction 0x00000ab5
    69dc:	06437c07 	strbeq	r7, [r3], -r7, lsl #24
    69e0:	23020000 	movwcs	r0, #8192	; 0x2000
    69e4:	022b0958 	eoreq	r0, fp, #1441792	; 0x160000
    69e8:	80070000 	andhi	r0, r7, r0
    69ec:	00000680 	andeq	r0, r0, r0, lsl #13
    69f0:	095c2302 	ldmdbeq	ip, {r1, r8, r9, sp}^
    69f4:	000004ad 	andeq	r0, r0, sp, lsr #9
    69f8:	00458407 	subeq	r8, r5, r7, lsl #8
    69fc:	23020000 	movwcs	r0, #8192	; 0x2000
    6a00:	02550960 	subseq	r0, r5, #1572864	; 0x180000
    6a04:	85070000 	strhi	r0, [r7]
    6a08:	00000069 	andeq	r0, r0, r9, rrx
    6a0c:	09642302 	stmdbeq	r4!, {r1, r8, r9, sp}^
    6a10:	0000075a 	andeq	r0, r0, sl, asr r7
    6a14:	05348607 	ldreq	r8, [r4, #-1543]!	; 0x607
    6a18:	23020000 	movwcs	r0, #8192	; 0x2000
    6a1c:	040a0068 	streq	r0, [sl], #-104	; 0x68
    6a20:	00000025 	andeq	r0, r0, r5, lsr #32
    6a24:	0005340c 	andeq	r3, r5, ip, lsl #8
    6a28:	00054a00 	andeq	r4, r5, r0, lsl #20
    6a2c:	054a0d00 	strbeq	r0, [sl, #-3328]	; 0xd00
    6a30:	00000000 	andeq	r0, r0, r0
    6a34:	0807040e 	stmdaeq	r7, {r1, r2, r3, sl}
    6a38:	00000b2f 	andeq	r0, r0, pc, lsr #22
    6a3c:	ae5a071c 	mrcge	7, 2, r0, cr10, cr12, {0}
    6a40:	09000005 	stmdbeq	r0, {r0, r2}
    6a44:	00000536 	andeq	r0, r0, r6, lsr r5
    6a48:	03942708 	orrseq	r2, r4, #2097152	; 0x200000
    6a4c:	23020000 	movwcs	r0, #8192	; 0x2000
    6a50:	08670900 	stmdaeq	r7!, {r8, fp}^
    6a54:	2a080000 	bcs	206a5c <DISABLE_IRQ+0x2069dc>
    6a58:	00000824 	andeq	r0, r0, r4, lsr #16
    6a5c:	09102302 	ldmdbeq	r0, {r1, r8, r9, sp}
    6a60:	00000bad 	andeq	r0, r0, sp, lsr #23
    6a64:	05ae2c08 	streq	r2, [lr, #3080]!	; 0xc08
    6a68:	23020000 	movwcs	r0, #8192	; 0x2000
    6a6c:	05f60914 	ldrbeq	r0, [r6, #2324]!	; 0x914
    6a70:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    6a74:	00000045 	andeq	r0, r0, r5, asr #32
    6a78:	09182302 	ldmdbeq	r8, {r1, r8, r9, sp}
    6a7c:	00000473 	andeq	r0, r0, r3, ror r4
    6a80:	00452f08 	subeq	r2, r5, r8, lsl #30
    6a84:	23020000 	movwcs	r0, #8192	; 0x2000
    6a88:	048e0919 	streq	r0, [lr], #2329	; 0x919
    6a8c:	30080000 	andcc	r0, r8, r0
    6a90:	00000045 	andeq	r0, r0, r5, asr #32
    6a94:	001a2302 	andseq	r2, sl, r2, lsl #6
    6a98:	054d040a 	strbeq	r0, [sp, #-1034]	; 0x40a
    6a9c:	040a0000 	streq	r0, [sl]
    6aa0:	00000090 	muleq	r0, r0, r0
    6aa4:	033e040a 	teqeq	lr, #167772160	; 0xa000000
    6aa8:	040a0000 	streq	r0, [sl]
    6aac:	00000394 	muleq	r0, r4, r3
    6ab0:	00074b08 	andeq	r4, r7, r8, lsl #22
    6ab4:	7c072c00 	stcvc	12, cr2, [r7], {0}
    6ab8:	00000643 	andeq	r0, r0, r3, asr #12
    6abc:	00053609 	andeq	r3, r5, r9, lsl #12
    6ac0:	942e0900 	strtls	r0, [lr], #-2304	; 0x900
    6ac4:	02000003 	andeq	r0, r0, #3
    6ac8:	dd090023 	stcle	0, cr0, [r9, #-140]	; 0xffffff74
    6acc:	09000007 	stmdbeq	r0, {r0, r1, r2}
    6ad0:	00080c30 	andeq	r0, r8, r0, lsr ip
    6ad4:	10230200 	eorne	r0, r3, r0, lsl #4
    6ad8:	0005e409 	andeq	lr, r5, r9, lsl #8
    6adc:	b1310900 	teqlt	r1, r0, lsl #18
    6ae0:	02000000 	andeq	r0, r0, #0
    6ae4:	0e091423 	cdpeq	4, 0, cr1, cr9, cr3, {1}
    6ae8:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    6aec:	0000b132 	andeq	fp, r0, r2, lsr r1
    6af0:	18230200 	stmdane	r3!, {r9}
    6af4:	0005f009 	andeq	pc, r5, r9
    6af8:	0c340900 	ldceq	9, cr0, [r4]
    6afc:	02000008 	andeq	r0, r0, #8
    6b00:	4e091c23 	cdpmi	12, 0, cr1, cr9, cr3, {1}
    6b04:	09000001 	stmdbeq	r0, {r0}
    6b08:	00080c35 	andeq	r0, r8, r5, lsr ip
    6b0c:	20230200 	eorcs	r0, r3, r0, lsl #4
    6b10:	00052709 	andeq	r2, r5, r9, lsl #14
    6b14:	b1360900 	teqlt	r6, r0, lsl #18
    6b18:	02000000 	andeq	r0, r0, #0
    6b1c:	9b092423 	blls	24fbb0 <DISABLE_IRQ+0x24fb30>
    6b20:	09000004 	stmdbeq	r0, {r2}
    6b24:	0000b137 	andeq	fp, r0, r7, lsr r1
    6b28:	28230200 	stmdacs	r3!, {r9}
    6b2c:	c6040a00 	strgt	r0, [r4], -r0, lsl #20
    6b30:	08000005 	stmdaeq	r0, {r0, r2}
    6b34:	00000aa7 	andeq	r0, r0, r7, lsr #21
    6b38:	80800718 	addhi	r0, r0, r8, lsl r7
    6b3c:	09000006 	stmdbeq	r0, {r1, r2}
    6b40:	00000536 	andeq	r0, r0, r6, lsr r5
    6b44:	0394220a 	orrseq	r2, r4, #-1610612736	; 0xa0000000
    6b48:	23020000 	movwcs	r0, #8192	; 0x2000
    6b4c:	04470900 	strbeq	r0, [r7], #-2304	; 0x900
    6b50:	230a0000 	movwcs	r0, #40960	; 0xa000
    6b54:	00000069 	andeq	r0, r0, r9, rrx
    6b58:	09102302 	ldmdbeq	r0, {r1, r8, r9, sp}
    6b5c:	00001b3f 	andeq	r1, r0, pc, lsr fp
    6b60:	081e240a 	ldmdaeq	lr, {r1, r3, sl, sp}
    6b64:	23020000 	movwcs	r0, #8192	; 0x2000
    6b68:	040a0014 	streq	r0, [sl], #-20
    6b6c:	00000649 	andeq	r0, r0, r9, asr #12
    6b70:	00099f04 	andeq	r9, r9, r4, lsl #30
    6b74:	9f890700 	svcls	0x00890700
    6b78:	08000003 	stmdaeq	r0, {r0, r1}
    6b7c:	000019af 	andeq	r1, r0, pc, lsr #19
    6b80:	00200b1c 	eoreq	r0, r0, ip, lsl fp
    6b84:	09000007 	stmdbeq	r0, {r0, r1, r2}
    6b88:	0000193b 	andeq	r1, r0, fp, lsr r9
    6b8c:	0700220b 	streq	r2, [r0, -fp, lsl #4]
    6b90:	23020000 	movwcs	r0, #8192	; 0x2000
    6b94:	18ba0900 	ldmne	sl!, {r8, fp}
    6b98:	230b0000 	movwcs	r0, #45056	; 0xb000
    6b9c:	00000700 	andeq	r0, r0, r0, lsl #14
    6ba0:	09042302 	stmdbeq	r4, {r1, r8, r9, sp}
    6ba4:	000005f0 	strdeq	r0, [r0], -r0
    6ba8:	0700240b 	streq	r2, [r0, -fp, lsl #8]
    6bac:	23020000 	movwcs	r0, #8192	; 0x2000
    6bb0:	014e0908 	cmpeq	lr, r8, lsl #18
    6bb4:	250b0000 	strcs	r0, [fp]
    6bb8:	00000700 	andeq	r0, r0, r0, lsl #14
    6bbc:	090c2302 	stmdbeq	ip, {r1, r8, r9, sp}
    6bc0:	0000181b 	andeq	r1, r0, fp, lsl r8
    6bc4:	00b1260b 	adcseq	r2, r1, fp, lsl #12
    6bc8:	23020000 	movwcs	r0, #8192	; 0x2000
    6bcc:	19700910 	ldmdbne	r0!, {r4, r8, fp}^
    6bd0:	270b0000 	strcs	r0, [fp, -r0]
    6bd4:	000000b1 	strheq	r0, [r0], -r1
    6bd8:	09142302 	ldmdbeq	r4, {r1, r8, r9, sp}
    6bdc:	00000b0e 	andeq	r0, r0, lr, lsl #22
    6be0:	00b1280b 	adcseq	r2, r1, fp, lsl #16
    6be4:	23020000 	movwcs	r0, #8192	; 0x2000
    6be8:	040a0018 	streq	r0, [sl], #-24
    6bec:	00000534 	andeq	r0, r0, r4, lsr r5
    6bf0:	0019af04 	andseq	sl, r9, r4, lsl #30
    6bf4:	912a0b00 	teqls	sl, r0, lsl #22
    6bf8:	08000006 	stmdaeq	r0, {r1, r2}
    6bfc:	00001947 	andeq	r1, r0, r7, asr #18
    6c00:	3a2e0b20 	bcc	b89888 <MEM_SIZE+0x389888>
    6c04:	09000007 	stmdbeq	r0, {r0, r1, r2}
    6c08:	000018fd 	strdeq	r1, [r0], -sp
    6c0c:	0706300b 	streq	r3, [r6, -fp]
    6c10:	23020000 	movwcs	r0, #8192	; 0x2000
    6c14:	18d50900 	ldmne	r5, {r8, fp}^
    6c18:	320b0000 	andcc	r0, fp, #0
    6c1c:	000005ba 	undefined instruction 0x000005ba
    6c20:	001c2302 	andseq	r2, ip, r2, lsl #6
    6c24:	00194704 	andseq	r4, r9, r4, lsl #14
    6c28:	11340b00 	teqne	r4, r0, lsl #22
    6c2c:	08000007 	stmdaeq	r0, {r0, r1, r2}
    6c30:	000018ab 	andeq	r1, r0, fp, lsr #17
    6c34:	7c380b30 	ldcvc	11, cr0, [r8], #-192	; 0xffffff40
    6c38:	09000007 	stmdbeq	r0, {r0, r1, r2}
    6c3c:	00000536 	andeq	r0, r0, r6, lsr r5
    6c40:	0394390b 	orrseq	r3, r4, #180224	; 0x2c000
    6c44:	23020000 	movwcs	r0, #8192	; 0x2000
    6c48:	18fd0900 	ldmne	sp!, {r8, fp}^
    6c4c:	3a0b0000 	bcc	2c6c54 <DISABLE_IRQ+0x2c6bd4>
    6c50:	00000706 	andeq	r0, r0, r6, lsl #14
    6c54:	09102302 	ldmdbeq	r0, {r1, r8, r9, sp}
    6c58:	00001899 	muleq	r0, r9, r8
    6c5c:	078e3b0b 	streq	r3, [lr, fp, lsl #22]
    6c60:	23020000 	movwcs	r0, #8192	; 0x2000
    6c64:	010f002c 	tsteq	pc, ip, lsr #32
    6c68:	00000788 	andeq	r0, r0, r8, lsl #15
    6c6c:	00078810 	andeq	r8, r7, r0, lsl r8
    6c70:	040a0000 	streq	r0, [sl]
    6c74:	00000745 	andeq	r0, r0, r5, asr #14
    6c78:	077c040a 	ldrbeq	r0, [ip, -sl, lsl #8]!
    6c7c:	ab040000 	blge	106c84 <DISABLE_IRQ+0x106c04>
    6c80:	0b000018 	bleq	6ce8 <DISABLE_IRQ+0x6c68>
    6c84:	0007453d 	andeq	r4, r7, sp, lsr r5
    6c88:	19160400 	ldmdbne	r6, {sl}
    6c8c:	3f0b0000 	svccc	0x000b0000
    6c90:	000007aa 	andeq	r0, r0, sl, lsr #15
    6c94:	07b0040a 	ldreq	r0, [r0, sl, lsl #8]!
    6c98:	010f0000 	mrseq	r0, CPSR
    6c9c:	000007bc 	undefined instruction 0x000007bc
    6ca0:	0007bc10 	andeq	fp, r7, r0, lsl ip
    6ca4:	040a0000 	streq	r0, [sl]
    6ca8:	00000794 	muleq	r0, r4, r7
    6cac:	000b6108 	andeq	r6, fp, r8, lsl #2
    6cb0:	21090c00 	tstcs	r9, r0, lsl #24
    6cb4:	000007f9 	strdeq	r0, [r0], -r9
    6cb8:	00031109 	andeq	r1, r3, r9, lsl #2
    6cbc:	f9230900 	undefined instruction 0xf9230900
    6cc0:	02000007 	andeq	r0, r0, #7
    6cc4:	dc090023 	stcle	0, cr0, [r9], {35}	; 0x23
    6cc8:	09000005 	stmdbeq	r0, {r0, r2}
    6ccc:	0007ff24 	andeq	pc, r7, r4, lsr #30
    6cd0:	04230200 	strteq	r0, [r3], #-512	; 0x200
    6cd4:	00163009 	andseq	r3, r6, r9
    6cd8:	b1250900 	teqlt	r5, r0, lsl #18
    6cdc:	02000000 	andeq	r0, r0, #0
    6ce0:	0a000823 	beq	8d74 <DISABLE_IRQ+0x8cf4>
    6ce4:	0007c204 	andeq	ip, r7, r4, lsl #4
    6ce8:	04041100 	streq	r1, [r4], #-256	; 0x100
    6cec:	00000b61 	andeq	r0, r0, r1, ror #22
    6cf0:	07c22709 	strbeq	r2, [r2, r9, lsl #14]
    6cf4:	040a0000 	streq	r0, [sl]
    6cf8:	00000801 	andeq	r0, r0, r1, lsl #16
    6cfc:	081e010f 	ldmdaeq	lr, {r0, r1, r2, r3, r8}
    6d00:	80100000 	andshi	r0, r0, r0
    6d04:	00000006 	andeq	r0, r0, r6
    6d08:	0812040a 	ldmdaeq	r2, {r1, r3, sl}
    6d0c:	040a0000 	streq	r0, [sl]
    6d10:	00000686 	andeq	r0, r0, r6, lsl #13
    6d14:	000e6012 	andeq	r6, lr, r2, lsl r0
    6d18:	01380200 	teqeq	r8, r0, lsl #4
    6d1c:	00000033 	andeq	r0, r0, r3, lsr r0
    6d20:	00084703 	andeq	r4, r8, r3, lsl #14
    6d24:	01441300 	cmpeq	r4, r0, lsl #6
    6d28:	38020000 	stmdacc	r2, {}
    6d2c:	000005ba 	undefined instruction 0x000005ba
    6d30:	22471400 	subcs	r1, r7, #0
    6d34:	2f020000 	svccs	0x00020000
    6d38:	08600301 	stmdaeq	r0!, {r0, r8, r9}^
    6d3c:	a3130000 	tstge	r3, #0
    6d40:	0200000d 	andeq	r0, r0, #13
    6d44:	0005ba2f 	andeq	fp, r5, pc, lsr #20
    6d48:	01150000 	tsteq	r5, r0
    6d4c:	000018e3 	andeq	r1, r0, r3, ror #17
    6d50:	0102b201 	tsteq	r2, r1, lsl #4
    6d54:	00000050 	andeq	r0, r0, r0, asr r0
    6d58:	30002fa0 	andcc	r2, r0, r0, lsr #31
    6d5c:	3000302c 	andcc	r3, r0, ip, lsr #32
    6d60:	0000222d 	andeq	r2, r0, sp, lsr #4
    6d64:	000008b7 	undefined instruction 0x000008b7
    6d68:	715f7016 	cmpvc	pc, r6, lsl r0
    6d6c:	02b20100 	adcseq	r0, r2, #0
    6d70:	000007bc 	undefined instruction 0x000007bc
    6d74:	0000224c 	andeq	r2, r0, ip, asr #4
    6d78:	00185f17 	andseq	r5, r8, r7, lsl pc
    6d7c:	02b20100 	adcseq	r0, r2, #0
    6d80:	000008b7 	undefined instruction 0x000008b7
    6d84:	0000226a 	andeq	r2, r0, sl, ror #4
    6d88:	000d9d18 	andeq	r9, sp, r8, lsl sp
    6d8c:	02b40100 	adcseq	r0, r4, #0
    6d90:	000005ba 	undefined instruction 0x000005ba
    6d94:	00011818 	andeq	r1, r1, r8, lsl r8
    6d98:	02b60100 	adcseq	r0, r6, #0
    6d9c:	0000009b 	muleq	r0, fp, r0
    6da0:	3a040a00 	bcc	1095a8 <DISABLE_IRQ+0x109528>
    6da4:	15000007 	strne	r0, [r0, #-7]
    6da8:	00189501 	andseq	r9, r8, r1, lsl #10
    6dac:	01850100 	orreq	r0, r5, r0, lsl #2
    6db0:	00005001 	andeq	r5, r0, r1
    6db4:	00302c00 	eorseq	r2, r0, r0, lsl #24
    6db8:	0030f430 	eorseq	pc, r0, r0, lsr r4
    6dbc:	00229e30 	eoreq	r9, r2, r0, lsr lr
    6dc0:	00090800 	andeq	r0, r9, r0, lsl #16
    6dc4:	5f701600 	svcpl	0x00701600
    6dc8:	85010071 	strhi	r0, [r1, #-113]	; 0x71
    6dcc:	0007bc01 	andeq	fp, r7, r1, lsl #24
    6dd0:	0022bd00 	eoreq	fp, r2, r0, lsl #26
    6dd4:	199f1700 	ldmibne	pc, {r8, r9, sl, ip}
    6dd8:	85010000 	strhi	r0, [r1]
    6ddc:	00079f01 	andeq	r9, r7, r1, lsl #30
    6de0:	0022db00 	eoreq	sp, r2, r0, lsl #22
    6de4:	01181800 	tsteq	r8, r0, lsl #16
    6de8:	88010000 	stmdahi	r1, {}
    6dec:	00009b01 	andeq	r9, r0, r1, lsl #22
    6df0:	01150000 	tsteq	r5, r0
    6df4:	0000186f 	andeq	r1, r0, pc, ror #16
    6df8:	01026c01 	tsteq	r2, r1, lsl #24
    6dfc:	00000050 	andeq	r0, r0, r0, asr r0
    6e00:	300030f4 	strdcc	r3, [r0], -r4
    6e04:	300031f0 	strdcc	r3, [r0], -r0
    6e08:	000022f9 	strdeq	r2, [r0], -r9
    6e0c:	00000965 	andeq	r0, r0, r5, ror #18
    6e10:	715f7016 	cmpvc	pc, r6, lsl r0
    6e14:	026c0100 	rsbeq	r0, ip, #0
    6e18:	000007bc 	undefined instruction 0x000007bc
    6e1c:	00002318 	andeq	r2, r0, r8, lsl r3
    6e20:	000d9d18 	andeq	r9, sp, r8, lsl sp
    6e24:	026e0100 	rsbeq	r0, lr, #0
    6e28:	000005ba 	undefined instruction 0x000005ba
    6e2c:	00011818 	andeq	r1, r1, r8, lsl r8
    6e30:	02700100 	rsbseq	r0, r0, #0
    6e34:	0000009b 	muleq	r0, fp, r0
    6e38:	00082a19 	andeq	r2, r8, r9, lsl sl
    6e3c:	00317800 	eorseq	r7, r1, r0, lsl #16
    6e40:	00034030 	andeq	r4, r3, r0, lsr r0
    6e44:	028e0100 	addeq	r0, lr, #0
    6e48:	00083b1a 	andeq	r3, r8, sl, lsl fp
    6e4c:	15000000 	strne	r0, [r0]
    6e50:	00196001 	andseq	r6, r9, r1
    6e54:	02300100 	eorseq	r0, r0, #0
    6e58:	00005001 	andeq	r5, r0, r1
    6e5c:	0031f000 	eorseq	pc, r1, r0
    6e60:	0032d030 	eorseq	sp, r2, r0, lsr r0
    6e64:	00233630 	eoreq	r3, r3, r0, lsr r6
    6e68:	0009a000 	andeq	sl, r9, r0
    6e6c:	5f701600 	svcpl	0x00701600
    6e70:	30010071 	andcc	r0, r1, r1, ror r0
    6e74:	0007bc02 	andeq	fp, r7, r2, lsl #24
    6e78:	00235500 	eoreq	r5, r3, r0, lsl #10
    6e7c:	01181800 	tsteq	r8, r0, lsl #16
    6e80:	32010000 	andcc	r0, r1, #0
    6e84:	00009b02 	andeq	r9, r0, r2, lsl #22
    6e88:	01150000 	tsteq	r5, r0
    6e8c:	00001980 	andeq	r1, r0, r0, lsl #19
    6e90:	0101c701 	tsteq	r1, r1, lsl #14
    6e94:	00000050 	andeq	r0, r0, r0, asr r0
    6e98:	300032d0 	ldrdcc	r3, [r0], -r0
    6e9c:	300034e0 	andcc	r3, r0, r0, ror #9
    6ea0:	00002373 	andeq	r2, r0, r3, ror r3
    6ea4:	00000a1b 	andeq	r0, r0, fp, lsl sl
    6ea8:	715f7016 	cmpvc	pc, r6, lsl r0
    6eac:	01c70100 	biceq	r0, r7, r0, lsl #2
    6eb0:	000007bc 	undefined instruction 0x000007bc
    6eb4:	00002392 	muleq	r0, r2, r3
    6eb8:	000dc117 	andeq	ip, sp, r7, lsl r1
    6ebc:	01c70100 	biceq	r0, r7, r0, lsl #2
    6ec0:	000000a6 	andeq	r0, r0, r6, lsr #1
    6ec4:	000023b0 	undefined instruction 0x000023b0
    6ec8:	67736d16 	undefined instruction 0x67736d16
    6ecc:	01c70100 	biceq	r0, r7, r0, lsl #2
    6ed0:	00000700 	andeq	r0, r0, r0, lsl #14
    6ed4:	000023ce 	andeq	r2, r0, lr, asr #7
    6ed8:	0018b51b 	andseq	fp, r8, fp, lsl r5
    6edc:	01ca0100 	biceq	r0, sl, r0, lsl #2
    6ee0:	00000534 	andeq	r0, r0, r4, lsr r5
    6ee4:	00002402 	andeq	r2, r0, r2, lsl #8
    6ee8:	0011df1b 	andseq	sp, r1, fp, lsl pc
    6eec:	01cb0100 	biceq	r0, fp, r0, lsl #2
    6ef0:	00000050 	andeq	r0, r0, r0, asr r0
    6ef4:	00002420 	andeq	r2, r0, r0, lsr #8
    6ef8:	00011818 	andeq	r1, r1, r8, lsl r8
    6efc:	01cd0100 	biceq	r0, sp, r0, lsl #2
    6f00:	0000009b 	muleq	r0, fp, r0
    6f04:	47011c00 	strmi	r1, [r1, -r0, lsl #24]
    6f08:	0100002a 	tsteq	r0, sl, lsr #32
    6f0c:	00500162 	subseq	r0, r0, r2, ror #2
    6f10:	34e00000 	strbtcc	r0, [r0]
    6f14:	37183000 	ldrcc	r3, [r8, -r0]
    6f18:	24803000 	strcs	r3, [r0]
    6f1c:	0ab90000 	beq	fee46f24 <rEINTPEND+0xa8e46e7c>
    6f20:	701d0000 	andsvc	r0, sp, r0
    6f24:	0100715f 	tsteq	r0, pc, asr r1
    6f28:	0007bc62 	andeq	fp, r7, r2, ror #24
    6f2c:	00249f00 	eoreq	r9, r4, r0, lsl #30
    6f30:	10ad1e00 	adcne	r1, sp, r0, lsl #28
    6f34:	62010000 	andvs	r0, r1, #0
    6f38:	00000534 	andeq	r0, r0, r4, lsr r5
    6f3c:	000024bd 	undefined instruction 0x000024bd
    6f40:	00178a1e 	andseq	r8, r7, lr, lsl sl
    6f44:	45620100 	strbmi	r0, [r2, #-256]!	; 0x100
    6f48:	db000000 	blle	6f50 <DISABLE_IRQ+0x6ed0>
    6f4c:	1e000024 	cdpne	0, 0, cr0, cr0, cr4, {1}
    6f50:	00001992 	muleq	r0, r2, r9
    6f54:	00456201 	subeq	r6, r5, r1, lsl #4
    6f58:	25040000 	strcs	r0, [r4]
    6f5c:	9d1f0000 	ldcls	0, cr0, [pc]
    6f60:	0100000d 	tsteq	r0, sp
    6f64:	0005ba64 	andeq	fp, r5, r4, ror #20
    6f68:	01181f00 	tsteq	r8, r0, lsl #30
    6f6c:	66010000 	strvs	r0, [r1], -r0
    6f70:	0000009b 	muleq	r0, fp, r0
    6f74:	00082a20 	andeq	r2, r8, r0, lsr #20
    6f78:	0035a000 	eorseq	sl, r5, r0
    6f7c:	0035a430 	eorseq	sl, r5, r0, lsr r4
    6f80:	a37d0130 	cmnge	sp, #12
    6f84:	1a00000a 	bne	6fb4 <DISABLE_IRQ+0x6f34>
    6f88:	0000083b 	andeq	r0, r0, fp, lsr r8
    6f8c:	082a2100 	stmdaeq	sl!, {r8, sp}
    6f90:	35dc0000 	ldrbcc	r0, [ip]
    6f94:	35e03000 	strbcc	r3, [r0]!
    6f98:	af013000 	svcge	0x00013000
    6f9c:	00083b1a 	andeq	r3, r8, sl, lsl fp
    6fa0:	15000000 	strne	r0, [r0]
    6fa4:	00192801 	andseq	r2, r9, r1, lsl #16
    6fa8:	01510100 	cmpeq	r1, r0, lsl #2
    6fac:	00005001 	andeq	r5, r0, r1
    6fb0:	00371800 	eorseq	r1, r7, r0, lsl #16
    6fb4:	00379030 	eorseq	r9, r7, r0, lsr r0
    6fb8:	00252230 	eoreq	r2, r5, r0, lsr r2
    6fbc:	000b0800 	andeq	r0, fp, r0, lsl #16
    6fc0:	5f701600 	svcpl	0x00701600
    6fc4:	51010071 	tstpl	r1, r1, ror r0
    6fc8:	0007bc01 	andeq	fp, r7, r1, lsl #24
    6fcc:	00254d00 	eoreq	r4, r5, r0, lsl #26
    6fd0:	10ad1700 	adcne	r1, sp, r0, lsl #14
    6fd4:	51010000 	tstpl	r1, r0
    6fd8:	00053401 	andeq	r3, r5, r1, lsl #8
    6fdc:	00256b00 	eoreq	r6, r5, r0, lsl #22
    6fe0:	706f1600 	rsbvc	r1, pc, r0, lsl #12
    6fe4:	51010074 	tstpl	r1, r4, ror r0
    6fe8:	00004501 	andeq	r4, r0, r1, lsl #10
    6fec:	0025aa00 	eoreq	sl, r5, r0, lsl #20
    6ff0:	01150000 	tsteq	r5, r0
    6ff4:	00001903 	andeq	r1, r0, r3, lsl #18
    6ff8:	01011901 	tsteq	r1, r1, lsl #18
    6ffc:	00000050 	andeq	r0, r0, r0, asr r0
    7000:	30003790 	mulcc	r0, r0, r7
    7004:	3000381c 	andcc	r3, r0, ip, lsl r8
    7008:	000025de 	ldrdeq	r2, [r0], -lr
    700c:	00000b47 	andeq	r0, r0, r7, asr #22
    7010:	715f7016 	cmpvc	pc, r6, lsl r0
    7014:	01190100 	tsteq	r9, r0, lsl #2
    7018:	000007bc 	undefined instruction 0x000007bc
    701c:	00002609 	andeq	r2, r0, r9, lsl #12
    7020:	0010ad17 	andseq	sl, r0, r7, lsl sp
    7024:	01190100 	tsteq	r9, r0, lsl #2
    7028:	00000534 	andeq	r0, r0, r4, lsr r5
    702c:	00002627 	andeq	r2, r0, r7, lsr #12
    7030:	80011c00 	andhi	r1, r1, r0, lsl #24
    7034:	01000018 	tsteq	r0, r8, lsl r0
    7038:	005001e2 	subseq	r0, r0, r2, ror #3
    703c:	381c0000 	ldmdacc	ip, {}
    7040:	38ac3000 	stmiacc	ip!, {ip, sp}
    7044:	267c3000 	ldrbtcs	r3, [ip], -r0
    7048:	0b830000 	bleq	fe0c7050 <rEINTPEND+0xa80c6fa8>
    704c:	701d0000 	andsvc	r0, sp, r0
    7050:	0100715f 	tsteq	r0, pc, asr r1
    7054:	0007bce2 	andeq	fp, r7, r2, ror #25
    7058:	0026a700 	eoreq	sl, r6, r0, lsl #14
    705c:	10ad1e00 	adcne	r1, sp, r0, lsl #28
    7060:	e2010000 	and	r0, r1, #0
    7064:	00000534 	andeq	r0, r0, r4, lsr r5
    7068:	000026db 	ldrdeq	r2, [r0], -fp
    706c:	c4011c00 	strgt	r1, [r1], #-3072	; 0xc00
    7070:	01000018 	tsteq	r0, r8, lsl r0
    7074:	00500136 	subseq	r0, r0, r6, lsr r1
    7078:	38ac0000 	stmiacc	ip!, {}
    707c:	39343000 	ldmdbcc	r4!, {ip, sp}
    7080:	27253000 	strcs	r3, [r5, -r0]!
    7084:	0bf20000 	bleq	ffc8708c <rEINTPEND+0xa9c86fe4>
    7088:	701d0000 	andsvc	r0, sp, r0
    708c:	0100715f 	tsteq	r0, pc, asr r1
    7090:	0007bc36 	andeq	fp, r7, r6, lsr ip
    7094:	00274400 	eoreq	r4, r7, r0, lsl #8
    7098:	17f01e00 	ldrbne	r1, [r0, r0, lsl #28]!
    709c:	36010000 	strcc	r0, [r1], -r0
    70a0:	0000038e 	andeq	r0, r0, lr, lsl #7
    70a4:	0000276d 	andeq	r2, r0, sp, ror #14
    70a8:	0011061e 	andseq	r0, r1, lr, lsl r6
    70ac:	00360100 	eorseq	r0, r6, r0, lsl #2
    70b0:	8b000007 	blhi	70d4 <DISABLE_IRQ+0x7054>
    70b4:	1e000027 	cdpne	0, 0, cr0, cr0, cr7, {1}
    70b8:	0000015d 	andeq	r0, r0, sp, asr r1
    70bc:	00b13601 	adcseq	r3, r1, r1, lsl #12
    70c0:	27a90000 	strcs	r0, [r9, r0]!
    70c4:	47210000 	strmi	r0, [r1, -r0]!
    70c8:	00000008 	andeq	r0, r0, r8
    70cc:	08300039 	ldmdaeq	r0!, {r0, r3, r4, r5}
    70d0:	01300039 	teqeq	r0, r9, lsr r0
    70d4:	08541a4e 	ldmdaeq	r4, {r1, r2, r3, r6, r9, fp, ip}^
    70d8:	00000000 	andeq	r0, r0, r0
    70dc:	00038f22 	andeq	r8, r3, r2, lsr #30
    70e0:	244a0c00 	strbcs	r0, [sl], #-3072	; 0xc00
    70e4:	01000008 	tsteq	r0, r8
    70e8:	0e502201 	cdpeq	2, 5, cr2, cr0, cr1, {0}
    70ec:	510c0000 	tstpl	ip, r0
    70f0:	00000045 	andeq	r0, r0, r5, asr #32
    70f4:	85220101 	strhi	r0, [r2, #-257]!	; 0x101
    70f8:	0c00000d 	stceq	0, cr0, [r0], {13}
    70fc:	00004552 	andeq	r4, r0, r2, asr r5
    7100:	00010100 	andeq	r0, r1, r0, lsl #2
    7104:	00000b5b 	andeq	r0, r0, fp, asr fp
    7108:	174f0002 	strbne	r0, [pc, -r2]
    710c:	01040000 	tsteq	r4, r0
    7110:	0000004d 	andeq	r0, r0, sp, asr #32
    7114:	0019e901 	andseq	lr, r9, r1, lsl #18
    7118:	00006300 	andeq	r6, r0, r0, lsl #6
    711c:	00393400 	eorseq	r3, r9, r0, lsl #8
    7120:	0042c430 	subeq	ip, r2, r0, lsr r4
    7124:	00169130 	andseq	r9, r6, r0, lsr r1
    7128:	05640200 	strbeq	r0, [r4, #-512]!	; 0x200
    712c:	21030000 	tstcs	r3, r0
    7130:	a0060103 	andge	r0, r6, r3, lsl #2
    7134:	04000000 	streq	r0, [r0]
    7138:	00000ee8 	andeq	r0, r0, r8, ror #29
    713c:	003e2303 	eorseq	r2, lr, r3, lsl #6
    7140:	01030000 	tsteq	r3, r0
    7144:	00009e08 	andeq	r9, r0, r8, lsl #28
    7148:	04f70400 	ldrbteq	r0, [r7], #1024	; 0x400
    714c:	24030000 	strcs	r0, [r3]
    7150:	0000003e 	andeq	r0, r0, lr, lsr r0
    7154:	000afb04 	andeq	pc, sl, r4, lsl #22
    7158:	5b260300 	blpl	987d60 <MEM_SIZE+0x187d60>
    715c:	03000000 	movweq	r0, #0
    7160:	008b0702 	addeq	r0, fp, r2, lsl #14
    7164:	02030000 	andeq	r0, r3, #0
    7168:	00005905 	andeq	r5, r0, r5, lsl #18
    716c:	03380400 	teqeq	r8, #0
    7170:	28030000 	stmdacs	r3, {}
    7174:	00000074 	andeq	r0, r0, r4, ror r0
    7178:	37070403 	strcc	r0, [r7, -r3, lsl #8]
    717c:	05000000 	streq	r0, [r0]
    7180:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    7184:	08030074 	stmdaeq	r3, {r2, r4, r5, r6}
    7188:	00000005 	andeq	r0, r0, r5
    718c:	07080300 	streq	r0, [r8, -r0, lsl #6]
    7190:	0000002d 	andeq	r0, r0, sp, lsr #32
    7194:	00039f04 	andeq	r9, r3, r4, lsl #30
    7198:	742d0300 	strtvc	r0, [sp], #-768	; 0x300
    719c:	04000000 	streq	r0, [r0]
    71a0:	00000132 	andeq	r0, r0, r2, lsr r1
    71a4:	00742204 	rsbseq	r2, r4, r4, lsl #4
    71a8:	27040000 	strcs	r0, [r4, -r0]
    71ac:	0500000a 	streq	r0, [r0, #-10]
    71b0:	0000692a 	andeq	r6, r0, sl, lsr #18
    71b4:	08290400 	stmdaeq	r9!, {sl}
    71b8:	2c050000 	stccs	0, cr0, [r5], {0}
    71bc:	00000069 	andeq	r0, r0, r9, rrx
    71c0:	43060406 	movwmi	r0, #25606	; 0x6406
    71c4:	00000261 	andeq	r0, r0, r1, ror #4
    71c8:	000bb507 	andeq	fp, fp, r7, lsl #10
    71cc:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    71d0:	0100000b 	tsteq	r0, fp
    71d4:	0003aa07 	andeq	sl, r3, r7, lsl #20
    71d8:	21070200 	tstcs	r7, r0, lsl #4
    71dc:	03000009 	movweq	r0, #9
    71e0:	00063507 	andeq	r3, r6, r7, lsl #10
    71e4:	35070400 	strcc	r0, [r7, #-1024]	; 0x400
    71e8:	0500000a 	streq	r0, [r0, #-10]
    71ec:	000ad407 	andeq	sp, sl, r7, lsl #8
    71f0:	ac070600 	stcge	6, cr0, [r7], {0}
    71f4:	07000002 	streq	r0, [r0, -r2]
    71f8:	0006e307 	andeq	lr, r6, r7, lsl #6
    71fc:	ee070800 	cdp	8, 0, cr0, cr7, cr0, {0}
    7200:	09000001 	stmdbeq	r0, {r0}
    7204:	0008cd07 	andeq	ip, r8, r7, lsl #26
    7208:	a1070a00 	tstge	r7, r0, lsl #20
    720c:	0b00000b 	bleq	7240 <DISABLE_IRQ+0x71c0>
    7210:	00048007 	andeq	r8, r4, r7
    7214:	bc070c00 	stclt	12, cr0, [r7], {0}
    7218:	0d000008 	stceq	0, cr0, [r0, #-32]	; 0xffffffe0
    721c:	00070507 	andeq	r0, r7, r7, lsl #10
    7220:	d0070e00 	andle	r0, r7, r0, lsl #28
    7224:	0f000006 	svceq	0x00000006
    7228:	00034007 	andeq	r4, r3, r7
    722c:	6a071000 	bvs	1cb234 <DISABLE_IRQ+0x1cb1b4>
    7230:	11000009 	tstne	r0, r9
    7234:	000b3907 	andeq	r3, fp, r7, lsl #18
    7238:	0e071200 	cdpeq	2, 0, cr1, cr7, cr0, {0}
    723c:	13000006 	movwne	r0, #6
    7240:	0002be07 	andeq	fp, r2, r7, lsl #28
    7244:	90071400 	andls	r1, r7, r0, lsl #8
    7248:	15000006 	strne	r0, [r0, #-6]
    724c:	0008e507 	andeq	lr, r8, r7, lsl #10
    7250:	d0071600 	andle	r1, r7, r0, lsl #12
    7254:	17000002 	strne	r0, [r0, -r2]
    7258:	00090a07 	andeq	r0, r9, r7, lsl #20
    725c:	15071800 	strne	r1, [r7, #-2048]	; 0x800
    7260:	19000002 	stmdbne	r0, {r1}
    7264:	00077607 	andeq	r7, r7, r7, lsl #12
    7268:	f0071a00 	undefined instruction 0xf0071a00
    726c:	1b000002 	blne	727c <DISABLE_IRQ+0x71fc>
    7270:	000bc107 	andeq	ip, fp, r7, lsl #2
    7274:	05071c00 	streq	r1, [r7, #-3072]	; 0xc00
    7278:	1d000004 	stcne	0, cr0, [r0, #-16]
    727c:	00081007 	andeq	r1, r8, r7
    7280:	32071e00 	andcc	r1, r7, #0
    7284:	1f000009 	svcne	0x00000009
    7288:	00026707 	andeq	r6, r2, r7, lsl #14
    728c:	b1072000 	tstlt	r7, r0
    7290:	21000005 	tstcs	r0, r5
    7294:	00064407 	andeq	r4, r6, r7, lsl #8
    7298:	ff072200 	undefined instruction 0xff072200
    729c:	23000007 	movwcs	r0, #7
    72a0:	0003ba07 	andeq	fp, r3, r7, lsl #20
    72a4:	99072400 	stmdbls	r7, {sl, sp}
    72a8:	25000008 	strcs	r0, [r0, #-8]
    72ac:	000b4b07 	andeq	r4, fp, r7, lsl #22
    72b0:	83072600 	movwhi	r2, #30208	; 0x7600
    72b4:	27000008 	strcs	r0, [r0, -r8]
    72b8:	00023e07 	andeq	r3, r2, r7, lsl #28
    72bc:	b7072800 	strlt	r2, [r7, -r0, lsl #16]
    72c0:	29000009 	stmdbcs	r0, {r0, r3}
    72c4:	000ae507 	andeq	lr, sl, r7, lsl #10
    72c8:	87072a00 	strhi	r2, [r7, -r0, lsl #20]
    72cc:	2b00000a 	blcs	72fc <DISABLE_IRQ+0x727c>
    72d0:	00094807 	andeq	r4, r9, r7, lsl #16
    72d4:	f5072c00 	undefined instruction 0xf5072c00
    72d8:	2d000009 	stccs	0, cr0, [r0, #-36]	; 0xffffffdc
    72dc:	0009c707 	andeq	ip, r9, r7, lsl #14
    72e0:	cf072e00 	svcgt	0x00072e00
    72e4:	2f000003 	svccs	0x00000003
    72e8:	0006a707 	andeq	sl, r6, r7, lsl #14
    72ec:	13073000 	movwne	r3, #28672	; 0x7000
    72f0:	31000004 	tstcc	r0, r4
    72f4:	00098907 	andeq	r8, r9, r7, lsl #18
    72f8:	52073200 	andpl	r3, r7, #0
    72fc:	33000003 	movwcc	r0, #3
    7300:	0005fd07 	andeq	pc, r5, r7, lsl #26
    7304:	d5073400 	strle	r3, [r7, #-1024]	; 0x400
    7308:	3500000b 	strcc	r0, [r0, #-11]
    730c:	0004e107 	andeq	lr, r4, r7, lsl #2
    7310:	a8073600 	stmdage	r7, {r9, sl, ip, sp}
    7314:	37000007 	strcc	r0, [r0, -r7]
    7318:	00079207 	andeq	r9, r7, r7, lsl #4
    731c:	16073800 	strne	r3, [r7], -r0, lsl #16
    7320:	39000003 	stmdbcc	r0, {r0, r1}
    7324:	0006f307 	andeq	pc, r6, r7, lsl #6
    7328:	e2073a00 	and	r3, r7, #0
    732c:	3b000003 	blcc	7340 <DISABLE_IRQ+0x72c0>
    7330:	0006bc07 	andeq	fp, r6, r7, lsl #24
    7334:	0f073c00 	svceq	0x00073c00
    7338:	3d000005 	stccc	0, cr0, [r0, #-20]	; 0xffffffec
    733c:	00056d07 	andeq	r6, r5, r7, lsl #26
    7340:	cb073e00 	blgt	1d6b48 <DISABLE_IRQ+0x1d6ac8>
    7344:	3f000004 	svccc	0x00000004
    7348:	00036e07 	andeq	r6, r3, r7, lsl #28
    734c:	0700c000 	streq	ip, [r0, -r0]
    7350:	0000058b 	andeq	r0, r0, fp, lsl #11
    7354:	370700c1 	strcc	r0, [r7, -r1, asr #1]
    7358:	c2000008 	andgt	r0, r0, #8
    735c:	06740700 	ldrbteq	r0, [r4], -r0, lsl #14
    7360:	00c30000 	sbceq	r0, r3, r0
    7364:	06040600 	streq	r0, [r4], -r0, lsl #12
    7368:	0002bea0 	andeq	fp, r2, r0, lsr #29
    736c:	0df50700 	ldcleq	7, cr0, [r5]
    7370:	07000000 	streq	r0, [r0, -r0]
    7374:	00000de6 	andeq	r0, r0, r6, ror #27
    7378:	0ed90701 	cdpeq	7, 13, cr0, cr9, cr1, {0}
    737c:	07020000 	streq	r0, [r2, -r0]
    7380:	00000f21 	andeq	r0, r0, r1, lsr #30
    7384:	0d370703 	ldceq	7, cr0, [r7, #-12]!
    7388:	07040000 	streq	r0, [r4, -r0]
    738c:	00000f69 	andeq	r0, r0, r9, ror #30
    7390:	0e3f0705 	cdpeq	7, 3, cr0, cr15, cr5, {0}
    7394:	07060000 	streq	r0, [r6, -r0]
    7398:	00000e2f 	andeq	r0, r0, pc, lsr #28
    739c:	0f370707 	svceq	0x00370707
    73a0:	07080000 	streq	r0, [r8, -r0]
    73a4:	00000d44 	andeq	r0, r0, r4, asr #26
    73a8:	0dad0709 	stceq	7, cr0, [sp, #36]!	; 0x24
    73ac:	070a0000 	streq	r0, [sl, -r0]
    73b0:	00000e16 	andeq	r0, r0, r6, lsl lr
    73b4:	0e7f070b 	cdpeq	7, 7, cr0, cr15, cr11, {0}
    73b8:	070c0000 	streq	r0, [ip, -r0]
    73bc:	00000f02 	andeq	r0, r0, r2, lsl #30
    73c0:	0406000d 	streq	r0, [r6], #-13
    73c4:	030fb506 	movweq	fp, #62726	; 0xf506
    73c8:	e4070000 	str	r0, [r7]
    73cc:	11000009 	tstne	r0, r9
    73d0:	00045707 	andeq	r5, r4, r7, lsl #14
    73d4:	db071200 	blle	1cbbdc <DISABLE_IRQ+0x1cbb5c>
    73d8:	13000001 	movwne	r0, #1
    73dc:	0007c307 	andeq	ip, r7, r7, lsl #6
    73e0:	33071400 	movwcc	r1, #29696	; 0x7400
    73e4:	15000007 	strne	r0, [r0, #-7]
    73e8:	000a4407 	andeq	r4, sl, r7, lsl #8
    73ec:	8e071600 	cfmadd32hi	mvax0, mvfx1, mvfx7, mvfx0
    73f0:	1700000b 	strne	r0, [r0, -fp]
    73f4:	0005c907 	andeq	ip, r5, r7, lsl #18
    73f8:	a9071800 	stmdbge	r7, {fp, ip}
    73fc:	19000008 	stmdbne	r0, {r3}
    7400:	00085007 	andeq	r5, r8, r7
    7404:	17071a00 	strne	r1, [r7, -r0, lsl #20]
    7408:	1b000007 	blne	742c <DISABLE_IRQ+0x73ac>
    740c:	000b1b07 	andeq	r1, fp, r7, lsl #22
    7410:	08001c00 	stmdaeq	r0, {sl, fp, ip}
    7414:	00000c09 	andeq	r0, r0, r9, lsl #24
    7418:	38230208 	stmdacc	r3!, {r3, r9}
    741c:	09000003 	stmdbeq	r0, {r0, r1}
    7420:	00000311 	andeq	r0, r0, r1, lsl r3
    7424:	03382402 	teqeq	r8, #33554432	; 0x2000000
    7428:	23020000 	movwcs	r0, #8192	; 0x2000
    742c:	02810900 	addeq	r0, r1, #0
    7430:	25020000 	strcs	r0, [r2]
    7434:	00000338 	andeq	r0, r0, r8, lsr r3
    7438:	00042302 	andeq	r2, r4, r2, lsl #6
    743c:	030f040a 	movweq	r0, #62474	; 0xf40a
    7440:	09040000 	stmdbeq	r4, {}
    7444:	0200000c 	andeq	r0, r0, #12
    7448:	00030f26 	andeq	r0, r3, r6, lsr #30
    744c:	065c0800 	ldrbeq	r0, [ip], -r0, lsl #16
    7450:	07100000 	ldreq	r0, [r0, -r0]
    7454:	00038e2f 	andeq	r8, r3, pc, lsr #28
    7458:	0ac90900 	beq	ff249860 <rEINTPEND+0xa92497b8>
    745c:	31070000 	tstcc	r7, r0
    7460:	0000033e 	andeq	r0, r0, lr, lsr r3
    7464:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    7468:	000008e0 	andeq	r0, r0, r0, ror #17
    746c:	038e3207 	orreq	r3, lr, #1879048192	; 0x70000000
    7470:	23020000 	movwcs	r0, #8192	; 0x2000
    7474:	09000908 	stmdbeq	r0, {r3, r8, fp}
    7478:	33070000 	movwcc	r0, #28672	; 0x7000
    747c:	00000045 	andeq	r0, r0, r5, asr #32
    7480:	090c2302 	stmdbeq	ip, {r1, r8, r9, sp}
    7484:	00000427 	andeq	r0, r0, r7, lsr #8
    7488:	00453407 	subeq	r3, r5, r7, lsl #8
    748c:	23020000 	movwcs	r0, #8192	; 0x2000
    7490:	040a000d 	streq	r0, [sl], #-13
    7494:	00000045 	andeq	r0, r0, r5, asr #32
    7498:	00065c04 	andeq	r5, r6, r4, lsl #24
    749c:	49360700 	ldmdbmi	r6!, {r8, r9, sl}
    74a0:	08000003 	stmdaeq	r0, {r0, r1}
    74a4:	0000099f 	muleq	r0, pc, r9
    74a8:	343a076c 	ldrtcc	r0, [sl], #-1900	; 0x76c
    74ac:	09000005 	stmdbeq	r0, {r0, r2}
    74b0:	00001481 	andeq	r1, r0, r1, lsl #9
    74b4:	05343b07 	ldreq	r3, [r4, #-2823]!	; 0xb07
    74b8:	23020000 	movwcs	r0, #8192	; 0x2000
    74bc:	044d0900 	strbeq	r0, [sp], #-2304	; 0x900
    74c0:	41070000 	tstmi	r7, r0
    74c4:	0000033e 	andeq	r0, r0, lr, lsr r3
    74c8:	09042302 	stmdbeq	r4, {r1, r8, r9, sp}
    74cc:	00000552 	andeq	r0, r0, r2, asr r5
    74d0:	053a4507 	ldreq	r4, [sl, #-1287]!	; 0x507
    74d4:	23020000 	movwcs	r0, #8192	; 0x2000
    74d8:	1aef090c 	bne	ffbc9910 <rEINTPEND+0xa9bc9868>
    74dc:	4b070000 	blmi	1c74e4 <DISABLE_IRQ+0x1c7464>
    74e0:	00000069 	andeq	r0, r0, r9, rrx
    74e4:	09102302 	ldmdbeq	r0, {r1, r8, r9, sp}
    74e8:	00000878 	andeq	r0, r0, r8, ror r8
    74ec:	00694c07 	rsbeq	r4, r9, r7, lsl #24
    74f0:	23020000 	movwcs	r0, #8192	; 0x2000
    74f4:	1d350914 	ldcne	9, cr0, [r5, #-80]!	; 0xffffffb0
    74f8:	4d070000 	stcmi	0, cr0, [r7]
    74fc:	00000045 	andeq	r0, r0, r5, asr #32
    7500:	09182302 	ldmdbeq	r8, {r1, r8, r9, sp}
    7504:	00001e5a 	andeq	r1, r0, sl, asr lr
    7508:	00455107 	subeq	r5, r5, r7, lsl #2
    750c:	23020000 	movwcs	r0, #8192	; 0x2000
    7510:	03640919 	cmneq	r4, #409600	; 0x64000
    7514:	53070000 	movwpl	r0, #28672	; 0x7000
    7518:	00000045 	andeq	r0, r0, r5, asr #32
    751c:	091a2302 	ldmdbeq	sl, {r1, r8, r9, sp}
    7520:	0000043f 	andeq	r0, r0, pc, lsr r4
    7524:	00455607 	subeq	r5, r5, r7, lsl #12
    7528:	23020000 	movwcs	r0, #8192	; 0x2000
    752c:	0bad091b 	bleq	feb499a0 <rEINTPEND+0xa8b498f8>
    7530:	5a070000 	bpl	1c7538 <DISABLE_IRQ+0x1c74b8>
    7534:	000005ae 	andeq	r0, r0, lr, lsr #11
    7538:	091c2302 	ldmdbeq	ip, {r1, r8, r9, sp}
    753c:	00000bf8 	strdeq	r0, [r0], -r8
    7540:	033e5f07 	teqeq	lr, #28
    7544:	23020000 	movwcs	r0, #8192	; 0x2000
    7548:	0b030920 	bleq	c99d0 <DISABLE_IRQ+0xc9950>
    754c:	63070000 	movwvs	r0, #28672	; 0x7000
    7550:	00000069 	andeq	r0, r0, r9, rrx
    7554:	09282302 	stmdbeq	r8!, {r1, r8, r9, sp}
    7558:	00000625 	andeq	r0, r0, r5, lsr #12
    755c:	05b46507 	ldreq	r6, [r4, #1287]!	; 0x507
    7560:	23020000 	movwcs	r0, #8192	; 0x2000
    7564:	086e092c 	stmdaeq	lr!, {r2, r3, r5, r8, fp}^
    7568:	66070000 	strvs	r0, [r7], -r0
    756c:	0000033e 	andeq	r0, r0, lr, lsr r3
    7570:	09302302 	ldmdbeq	r0!, {r1, r8, r9, sp}
    7574:	00000c0e 	andeq	r0, r0, lr, lsl #24
    7578:	00a66807 	adceq	r6, r6, r7, lsl #16
    757c:	23020000 	movwcs	r0, #8192	; 0x2000
    7580:	07f30938 	undefined instruction 0x07f30938
    7584:	69070000 	stmdbvs	r7, {}
    7588:	000000a6 	andeq	r0, r0, r6, lsr #1
    758c:	093c2302 	ldmdbeq	ip!, {r1, r8, r9, sp}
    7590:	000005a7 	andeq	r0, r0, r7, lsr #11
    7594:	05ba6b07 	ldreq	r6, [sl, #2823]!	; 0xb07
    7598:	23020000 	movwcs	r0, #8192	; 0x2000
    759c:	736d0b40 	cmnvc	sp, #65536	; 0x10000
    75a0:	6d070067 	stcvs	0, cr0, [r7, #-412]	; 0xfffffe64
    75a4:	00000534 	andeq	r0, r0, r4, lsr r5
    75a8:	09442302 	stmdbeq	r4, {r1, r8, r9, sp}^
    75ac:	00001630 	andeq	r1, r0, r0, lsr r6
    75b0:	00b17007 	adcseq	r7, r1, r7
    75b4:	23020000 	movwcs	r0, #8192	; 0x2000
    75b8:	08db0948 	ldmeq	fp, {r3, r6, r8, fp}^
    75bc:	73070000 	movwvc	r0, #28672	; 0x7000
    75c0:	0000038e 	andeq	r0, r0, lr, lsl #7
    75c4:	094c2302 	stmdbeq	ip, {r1, r8, r9, sp}^
    75c8:	000009ac 	andeq	r0, r0, ip, lsr #19
    75cc:	00457507 	subeq	r7, r5, r7, lsl #10
    75d0:	23020000 	movwcs	r0, #8192	; 0x2000
    75d4:	07e60950 	ubfxeq	r0, r0, #18, #7
    75d8:	76070000 	strvc	r0, [r7], -r0
    75dc:	00000045 	andeq	r0, r0, r5, asr #32
    75e0:	09512302 	ldmdbeq	r1, {r1, r8, r9, sp}^
    75e4:	0000053d 	andeq	r0, r0, sp, lsr r5
    75e8:	05c07907 	strbeq	r7, [r0, #2311]	; 0x907
    75ec:	23020000 	movwcs	r0, #8192	; 0x2000
    75f0:	0ab50954 	beq	fed49b48 <rEINTPEND+0xa8d49aa0>
    75f4:	7c070000 	stcvc	0, cr0, [r7], {0}
    75f8:	00000643 	andeq	r0, r0, r3, asr #12
    75fc:	09582302 	ldmdbeq	r8, {r1, r8, r9, sp}^
    7600:	0000022b 	andeq	r0, r0, fp, lsr #4
    7604:	06808007 	streq	r8, [r0], r7
    7608:	23020000 	movwcs	r0, #8192	; 0x2000
    760c:	04ad095c 	strteq	r0, [sp], #2396	; 0x95c
    7610:	84070000 	strhi	r0, [r7]
    7614:	00000045 	andeq	r0, r0, r5, asr #32
    7618:	09602302 	stmdbeq	r0!, {r1, r8, r9, sp}^
    761c:	00000255 	andeq	r0, r0, r5, asr r2
    7620:	00698507 	rsbeq	r8, r9, r7, lsl #10
    7624:	23020000 	movwcs	r0, #8192	; 0x2000
    7628:	075a0964 	ldrbeq	r0, [sl, -r4, ror #18]
    762c:	86070000 	strhi	r0, [r7], -r0
    7630:	00000534 	andeq	r0, r0, r4, lsr r5
    7634:	00682302 	rsbeq	r2, r8, r2, lsl #6
    7638:	0025040a 	eoreq	r0, r5, sl, lsl #8
    763c:	340c0000 	strcc	r0, [ip]
    7640:	4a000005 	bmi	765c <DISABLE_IRQ+0x75dc>
    7644:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    7648:	0000054a 	andeq	r0, r0, sl, asr #10
    764c:	040e0000 	streq	r0, [lr]
    7650:	0b2f0807 	bleq	bc9674 <MEM_SIZE+0x3c9674>
    7654:	071c0000 	ldreq	r0, [ip, -r0]
    7658:	0005ae5a 	andeq	sl, r5, sl, asr lr
    765c:	05360900 	ldreq	r0, [r6, #-2304]!	; 0x900
    7660:	27080000 	strcs	r0, [r8, -r0]
    7664:	00000394 	muleq	r0, r4, r3
    7668:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    766c:	00000867 	andeq	r0, r0, r7, ror #16
    7670:	07042a08 	streq	r2, [r4, -r8, lsl #20]
    7674:	23020000 	movwcs	r0, #8192	; 0x2000
    7678:	0bad0910 	bleq	feb49ac0 <rEINTPEND+0xa8b49a18>
    767c:	2c080000 	stccs	0, cr0, [r8], {0}
    7680:	000005ae 	andeq	r0, r0, lr, lsr #11
    7684:	09142302 	ldmdbeq	r4, {r1, r8, r9, sp}
    7688:	000005f6 	strdeq	r0, [r0], -r6
    768c:	00452e08 	subeq	r2, r5, r8, lsl #28
    7690:	23020000 	movwcs	r0, #8192	; 0x2000
    7694:	04730918 	ldrbteq	r0, [r3], #-2328	; 0x918
    7698:	2f080000 	svccs	0x00080000
    769c:	00000045 	andeq	r0, r0, r5, asr #32
    76a0:	09192302 	ldmdbeq	r9, {r1, r8, r9, sp}
    76a4:	0000048e 	andeq	r0, r0, lr, lsl #9
    76a8:	00453008 	subeq	r3, r5, r8
    76ac:	23020000 	movwcs	r0, #8192	; 0x2000
    76b0:	040a001a 	streq	r0, [sl], #-26
    76b4:	0000054d 	andeq	r0, r0, sp, asr #10
    76b8:	0090040a 	addseq	r0, r0, sl, lsl #8
    76bc:	040a0000 	streq	r0, [sl]
    76c0:	0000033e 	andeq	r0, r0, lr, lsr r3
    76c4:	0394040a 	orrseq	r0, r4, #167772160	; 0xa000000
    76c8:	4b080000 	blmi	2076d0 <DISABLE_IRQ+0x207650>
    76cc:	2c000007 	stccs	0, cr0, [r0], {7}
    76d0:	06437c07 	strbeq	r7, [r3], -r7, lsl #24
    76d4:	36090000 	strcc	r0, [r9], -r0
    76d8:	09000005 	stmdbeq	r0, {r0, r2}
    76dc:	0003942e 	andeq	r9, r3, lr, lsr #8
    76e0:	00230200 	eoreq	r0, r3, r0, lsl #4
    76e4:	0007dd09 	andeq	sp, r7, r9, lsl #26
    76e8:	e1300900 	teq	r0, r0, lsl #18
    76ec:	02000006 	andeq	r0, r0, #6
    76f0:	e4091023 	str	r1, [r9], #-35	; 0x23
    76f4:	09000005 	stmdbeq	r0, {r0, r2}
    76f8:	0000b131 	andeq	fp, r0, r1, lsr r1
    76fc:	14230200 	strtne	r0, [r3], #-512	; 0x200
    7700:	000b0e09 	andeq	r0, fp, r9, lsl #28
    7704:	b1320900 	teqlt	r2, r0, lsl #18
    7708:	02000000 	andeq	r0, r0, #0
    770c:	f0091823 	undefined instruction 0xf0091823
    7710:	09000005 	stmdbeq	r0, {r0, r2}
    7714:	0006e134 	andeq	lr, r6, r4, lsr r1
    7718:	1c230200 	sfmne	f0, 4, [r3]	; (stcne 2, cr0, [r3])
    771c:	00014e09 	andeq	r4, r1, r9, lsl #28
    7720:	e1350900 	teq	r5, r0, lsl #18
    7724:	02000006 	andeq	r0, r0, #6
    7728:	27092023 	strcs	r2, [r9, -r3, lsr #32]
    772c:	09000005 	stmdbeq	r0, {r0, r2}
    7730:	0000b136 	andeq	fp, r0, r6, lsr r1
    7734:	24230200 	strtcs	r0, [r3], #-512	; 0x200
    7738:	00049b09 	andeq	r9, r4, r9, lsl #22
    773c:	b1370900 	teqlt	r7, r0, lsl #18
    7740:	02000000 	andeq	r0, r0, #0
    7744:	0a002823 	beq	117d8 <DISABLE_IRQ+0x11758>
    7748:	0005c604 	andeq	ip, r5, r4, lsl #12
    774c:	0aa70800 	beq	fe9c9754 <rEINTPEND+0xa89c96ac>
    7750:	07180000 	ldreq	r0, [r8, -r0]
    7754:	00068080 	andeq	r8, r6, r0, lsl #1
    7758:	05360900 	ldreq	r0, [r6, #-2304]!	; 0x900
    775c:	220a0000 	andcs	r0, sl, #0
    7760:	00000394 	muleq	r0, r4, r3
    7764:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    7768:	00000447 	andeq	r0, r0, r7, asr #8
    776c:	0069230a 	rsbeq	r2, r9, sl, lsl #6
    7770:	23020000 	movwcs	r0, #8192	; 0x2000
    7774:	1b3f0910 	blne	fc9bbc <MEM_SIZE+0x7c9bbc>
    7778:	240a0000 	strcs	r0, [sl]
    777c:	000006fe 	strdeq	r0, [r0], -lr
    7780:	00142302 	andseq	r2, r4, r2, lsl #6
    7784:	0649040a 	strbeq	r0, [r9], -sl, lsl #8
    7788:	9f040000 	svcls	0x00040000
    778c:	07000009 	streq	r0, [r0, -r9]
    7790:	00039f89 	andeq	r9, r3, r9, lsl #31
    7794:	34040a00 	strcc	r0, [r4], #-2560	; 0xa00
    7798:	08000005 	stmdaeq	r0, {r0, r2}
    779c:	00000b61 	andeq	r0, r0, r1, ror #22
    77a0:	ce21090c 	cdpgt	9, 2, cr0, cr1, cr12, {0}
    77a4:	09000006 	stmdbeq	r0, {r1, r2}
    77a8:	00000311 	andeq	r0, r0, r1, lsl r3
    77ac:	06ce2309 	strbeq	r2, [lr], r9, lsl #6
    77b0:	23020000 	movwcs	r0, #8192	; 0x2000
    77b4:	05dc0900 	ldrbeq	r0, [ip, #2304]	; 0x900
    77b8:	24090000 	strcs	r0, [r9]
    77bc:	000006d4 	ldrdeq	r0, [r0], -r4
    77c0:	09042302 	stmdbeq	r4, {r1, r8, r9, sp}
    77c4:	00001630 	andeq	r1, r0, r0, lsr r6
    77c8:	00b12509 	adcseq	r2, r1, r9, lsl #10
    77cc:	23020000 	movwcs	r0, #8192	; 0x2000
    77d0:	040a0008 	streq	r0, [sl], #-8
    77d4:	00000697 	muleq	r0, r7, r6
    77d8:	6104040f 	tstvs	r4, pc, lsl #8
    77dc:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    77e0:	00069727 	andeq	r9, r6, r7, lsr #14
    77e4:	d6040a00 	strle	r0, [r4], -r0, lsl #20
    77e8:	04000006 	streq	r0, [r0], #-6
    77ec:	0000074b 	andeq	r0, r0, fp, asr #14
    77f0:	05c63909 	strbeq	r3, [r6, #2313]	; 0x909
    77f4:	01100000 	tsteq	r0, r0
    77f8:	000006fe 	strdeq	r0, [r0], -lr
    77fc:	00068011 	andeq	r8, r6, r1, lsl r0
    7800:	040a0000 	streq	r0, [sl]
    7804:	000006f2 	strdeq	r0, [r0], -r2
    7808:	0686040a 	streq	r0, [r6], sl, lsl #8
    780c:	60120000 	andsvs	r0, r2, r0
    7810:	0200000e 	andeq	r0, r0, #14
    7814:	00330138 	eorseq	r0, r3, r8, lsr r1
    7818:	27030000 	strcs	r0, [r3, -r0]
    781c:	13000007 	movwne	r0, #7
    7820:	00000144 	andeq	r0, r0, r4, asr #2
    7824:	05ba3802 	ldreq	r3, [sl, #2050]!	; 0x802
    7828:	14000000 	strne	r0, [r0]
    782c:	00002247 	andeq	r2, r0, r7, asr #4
    7830:	03012f02 	movweq	r2, #7938	; 0x1f02
    7834:	00000740 	andeq	r0, r0, r0, asr #14
    7838:	000da313 	andeq	sl, sp, r3, lsl r3
    783c:	ba2f0200 	blt	bc8044 <MEM_SIZE+0x3c8044>
    7840:	00000005 	andeq	r0, r0, r5
    7844:	1a620115 	bne	1887ca0 <MEM_SIZE+0x1087ca0>
    7848:	d0010000 	andle	r0, r1, r0
    784c:	00500102 	subseq	r0, r0, r2, lsl #2
    7850:	39340000 	ldmdbcc	r4!, {}
    7854:	39b43000 	ldmibcc	r4!, {ip, sp}
    7858:	27c73000 	strbcs	r3, [r7, r0]
    785c:	07ab0000 	streq	r0, [fp, r0]!
    7860:	70160000 	andsvc	r0, r6, r0
    7864:	0100715f 	tsteq	r0, pc, asr r1
    7868:	07ab02d0 	sbfxeq	r0, r0, #5, #12
    786c:	27e60000 	strbcs	r0, [r6, r0]!
    7870:	bf170000 	svclt	0x00170000
    7874:	01000019 	tsteq	r0, r9, lsl r0
    7878:	07b102d0 	sbfxeq	r0, r0, #5, #18
    787c:	28040000 	stmdacs	r4, {}
    7880:	62170000 	andsvs	r0, r7, #0
    7884:	01000011 	tsteq	r0, r1, lsl r0
    7888:	07b102d0 	sbfxeq	r0, r0, #5, #18
    788c:	284e0000 	stmdacs	lr, {}^
    7890:	9b170000 	blls	5c7898 <DISABLE_IRQ+0x5c7818>
    7894:	01000004 	tsteq	r0, r4
    7898:	07b102d0 	sbfxeq	r0, r0, #5, #18
    789c:	286c0000 	stmdacs	ip!, {}^
    78a0:	18180000 	ldmdane	r8, {}
    78a4:	01000001 	tsteq	r0, r1
    78a8:	009b02d3 	undefined instruction 0x009b02d3
    78ac:	0a000000 	beq	78b4 <DISABLE_IRQ+0x7834>
    78b0:	0006e704 	andeq	lr, r6, r4, lsl #14
    78b4:	b1040a00 	tstlt	r4, r0, lsl #20
    78b8:	15000000 	strne	r0, [r0]
    78bc:	001a9601 	andseq	r9, sl, r1, lsl #12
    78c0:	028a0100 	addeq	r0, sl, #0
    78c4:	00005001 	andeq	r5, r0, r1
    78c8:	0039b400 	eorseq	fp, r9, r0, lsl #8
    78cc:	003ab030 	eorseq	fp, sl, r0, lsr r0
    78d0:	0028b630 	eoreq	fp, r8, r0, lsr r6
    78d4:	00081400 	andeq	r1, r8, r0, lsl #8
    78d8:	5f701600 	svcpl	0x00701600
    78dc:	8a010071 	bhi	47aa8 <DISABLE_IRQ+0x47a28>
    78e0:	0007ab02 	andeq	sl, r7, r2, lsl #22
    78e4:	0028d500 	eoreq	sp, r8, r0, lsl #10
    78e8:	0d9d1800 	ldceq	8, cr1, [sp]
    78ec:	8c010000 	stchi	0, cr0, [r1], {0}
    78f0:	0005ba02 	andeq	fp, r5, r2, lsl #20
    78f4:	01181800 	tsteq	r8, r0, lsl #16
    78f8:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    78fc:	00009b02 	andeq	r9, r0, r2, lsl #22
    7900:	070a1900 	streq	r1, [sl, -r0, lsl #18]
    7904:	3a380000 	bcc	e0790c <MEM_SIZE+0x60790c>
    7908:	03583000 	cmpeq	r8, #0
    790c:	ab010000 	blge	47914 <DISABLE_IRQ+0x47894>
    7910:	071b1a02 	ldreq	r1, [fp, -r2, lsl #20]
    7914:	00000000 	andeq	r0, r0, r0
    7918:	1a810115 	bne	fe047d74 <rEINTPEND+0xa8047ccc>
    791c:	43010000 	movwmi	r0, #4096	; 0x1000
    7920:	00500102 	subseq	r0, r0, r2, lsl #2
    7924:	3ab00000 	bcc	fec0792c <rEINTPEND+0xa8c07884>
    7928:	3bb03000 	blcc	fec13930 <rEINTPEND+0xa8c13888>
    792c:	28f33000 	ldmcs	r3!, {ip, sp}^
    7930:	085b0000 	ldmdaeq	fp, {}^
    7934:	70160000 	andsvc	r0, r6, r0
    7938:	0100715f 	tsteq	r0, pc, asr r1
    793c:	07ab0243 	streq	r0, [fp, r3, asr #4]!
    7940:	29120000 	ldmdbcs	r2, {}
    7944:	b9180000 	ldmdblt	r8, {}
    7948:	01000019 	tsteq	r0, r9, lsl r0
    794c:	06e10245 	strbteq	r0, [r1], r5, asr #4
    7950:	18180000 	ldmdane	r8, {}
    7954:	01000001 	tsteq	r0, r1
    7958:	009b0247 	addseq	r0, fp, r7, asr #4
    795c:	15000000 	strne	r0, [r0]
    7960:	001a2a01 	andseq	r2, sl, r1, lsl #20
    7964:	010a0100 	tsteq	sl, r0, lsl #2
    7968:	00005001 	andeq	r5, r0, r1
    796c:	003bb000 	eorseq	fp, fp, r0
    7970:	003e2030 	eorseq	r2, lr, r0, lsr r0
    7974:	00293030 	eoreq	r3, r9, r0, lsr r0
    7978:	0008e600 	andeq	lr, r8, r0, lsl #12
    797c:	5f701600 	svcpl	0x00701600
    7980:	0a010071 	beq	47b4c <DISABLE_IRQ+0x47acc>
    7984:	0007ab01 	andeq	sl, r7, r1, lsl #22
    7988:	00295b00 	eoreq	r5, r9, r0, lsl #22
    798c:	0dc11700 	stcleq	7, cr1, [r1]
    7990:	0a010000 	beq	47998 <DISABLE_IRQ+0x47918>
    7994:	0000a601 	andeq	sl, r0, r1, lsl #12
    7998:	00297900 	eoreq	r7, r9, r0, lsl #18
    799c:	05dc1700 	ldrbeq	r1, [ip, #1792]	; 0x700
    79a0:	0a010000 	beq	479a8 <DISABLE_IRQ+0x47928>
    79a4:	00069101 	andeq	r9, r6, r1, lsl #2
    79a8:	00299700 	eoreq	r9, r9, r0, lsl #14
    79ac:	17e31700 	strbne	r1, [r3, r0, lsl #14]!
    79b0:	0a010000 	beq	479b8 <DISABLE_IRQ+0x47938>
    79b4:	0007b101 	andeq	fp, r7, r1, lsl #2
    79b8:	0029e100 	eoreq	lr, r9, r0, lsl #2
    79bc:	11df1b00 	bicsne	r1, pc, r0, lsl #22
    79c0:	0d010000 	stceq	0, cr0, [r1]
    79c4:	00005001 	andeq	r5, r0, r1
    79c8:	002a2b00 	eoreq	r2, sl, r0, lsl #22
    79cc:	19e11b00 	stmibne	r1!, {r8, r9, fp, ip}^
    79d0:	0f010000 	svceq	0x00010000
    79d4:	0006e101 	andeq	lr, r6, r1, lsl #2
    79d8:	002aa100 	eoreq	sl, sl, r0, lsl #2
    79dc:	01181800 	tsteq	r8, r0, lsl #16
    79e0:	11010000 	tstne	r1, r0
    79e4:	00009b01 	andeq	r9, r0, r1, lsl #22
    79e8:	011c0000 	tsteq	ip, r0
    79ec:	00001acd 	andeq	r1, r0, sp, asr #21
    79f0:	50017901 	andpl	r7, r1, r1, lsl #18
    79f4:	20000000 	andcs	r0, r0, r0
    79f8:	6830003e 	ldmdavs	r0!, {r1, r2, r3, r4, r5}
    79fc:	bf300040 	svclt	0x00300040
    7a00:	ad00002a 	stcge	0, cr0, [r0, #-168]	; 0xffffff58
    7a04:	1d000009 	stcne	0, cr0, [r0, #-36]	; 0xffffffdc
    7a08:	00715f70 	rsbseq	r5, r1, r0, ror pc
    7a0c:	07ab7901 	streq	r7, [fp, r1, lsl #18]!
    7a10:	2aea0000 	bcs	ffa87a18 <rEINTPEND+0xa9a87970>
    7a14:	ad1e0000 	ldcge	0, cr0, [lr]
    7a18:	01000010 	tsteq	r0, r0, lsl r0
    7a1c:	0006e179 	andeq	lr, r6, r9, ror r1
    7a20:	002b0800 	eoreq	r0, fp, r0, lsl #16
    7a24:	181b1e00 	ldmdane	fp, {r9, sl, fp, ip}
    7a28:	79010000 	stmdbvc	r1, {}
    7a2c:	000000b1 	strheq	r0, [r0], -r1
    7a30:	00002b26 	andeq	r2, r0, r6, lsr #22
    7a34:	00178a1e 	andseq	r8, r7, lr, lsl sl
    7a38:	45790100 	ldrbmi	r0, [r9, #-256]!	; 0x100
    7a3c:	44000000 	strmi	r0, [r0]
    7a40:	1e00002b 	cdpne	0, 0, cr0, cr0, cr11, {1}
    7a44:	00001992 	muleq	r0, r2, r9
    7a48:	00457901 	subeq	r7, r5, r1, lsl #18
    7a4c:	2b6d0000 	blcs	1b47a54 <MEM_SIZE+0x1347a54>
    7a50:	9d1f0000 	ldcls	0, cr0, [pc]
    7a54:	0100000d 	tsteq	r0, sp
    7a58:	0005ba7c 	andeq	fp, r5, ip, ror sl
    7a5c:	1ac42000 	bne	ff10fa64 <rEINTPEND+0xa910f9bc>
    7a60:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    7a64:	000006e1 	andeq	r0, r0, r1, ror #13
    7a68:	00002b8c 	andeq	r2, r0, ip, lsl #23
    7a6c:	001a411f 	andseq	r4, sl, pc, lsl r1
    7a70:	e17f0100 	cmn	pc, r0, lsl #2
    7a74:	1f000006 	svcne	0x00000006
    7a78:	00000118 	andeq	r0, r0, r8, lsl r1
    7a7c:	009b8101 	addseq	r8, fp, r1, lsl #2
    7a80:	0a210000 	beq	847a88 <MEM_SIZE+0x47a88>
    7a84:	f0000007 	undefined instruction 0xf0000007
    7a88:	f430003e 	undefined instruction 0xf430003e
    7a8c:	0130003e 	teqeq	r0, lr, lsr r0
    7a90:	00099799 	muleq	r9, r9, r7
    7a94:	071b1a00 	ldreq	r1, [fp, -r0, lsl #20]
    7a98:	22000000 	andcs	r0, r0, #0
    7a9c:	0000070a 	andeq	r0, r0, sl, lsl #14
    7aa0:	30003f34 	andcc	r3, r0, r4, lsr pc
    7aa4:	30003f38 	andcc	r3, r0, r8, lsr pc
    7aa8:	1b1ad101 	blne	6bbeb4 <DISABLE_IRQ+0x6bbe34>
    7aac:	00000007 	andeq	r0, r0, r7
    7ab0:	4a011500 	bmi	4ceb8 <DISABLE_IRQ+0x4ce38>
    7ab4:	0100001a 	tsteq	r0, sl, lsl r0
    7ab8:	5001020f 	andpl	r0, r1, pc, lsl #4
    7abc:	68000000 	stmdavs	r0, {}
    7ac0:	e4300040 	ldrt	r0, [r0], #-64	; 0x40
    7ac4:	aa300040 	bge	c07bcc <MEM_SIZE+0x407bcc>
    7ac8:	0c00002b 	stceq	0, cr0, [r0], {43}	; 0x2b
    7acc:	1600000a 	strne	r0, [r0], -sl
    7ad0:	00715f70 	rsbseq	r5, r1, r0, ror pc
    7ad4:	ab020f01 	blge	8b6e0 <DISABLE_IRQ+0x8b660>
    7ad8:	d5000007 	strle	r0, [r0, #-7]
    7adc:	1700002b 	strne	r0, [r0, -fp, lsr #32]
    7ae0:	000010ad 	andeq	r1, r0, sp, lsr #1
    7ae4:	34020f01 	strcc	r0, [r2], #-3841	; 0xf01
    7ae8:	f3000005 	vhadd.u8	d0, d0, d5
    7aec:	1700002b 	strne	r0, [r0, -fp, lsr #32]
    7af0:	0000181b 	andeq	r1, r0, fp, lsl r8
    7af4:	b1020f01 	tstlt	r2, r1, lsl #30
    7af8:	3d000000 	stccc	0, cr0, [r0]
    7afc:	1600002c 	strne	r0, [r0], -ip, lsr #32
    7b00:	0074706f 	rsbseq	r7, r4, pc, rrx
    7b04:	45020f01 	strmi	r0, [r2, #-3841]	; 0xf01
    7b08:	5b000000 	blpl	7b10 <DISABLE_IRQ+0x7a90>
    7b0c:	0000002c 	andeq	r0, r0, ip, lsr #32
    7b10:	1aac0115 	bne	feb07f6c <rEINTPEND+0xa8b07ec4>
    7b14:	d6010000 	strle	r0, [r1], -r0
    7b18:	00500101 	subseq	r0, r0, r1, lsl #2
    7b1c:	40e40000 	rscmi	r0, r4, r0
    7b20:	41783000 	cmnmi	r8, r0
    7b24:	2c793000 	ldclcs	0, cr3, [r9]
    7b28:	0a5b0000 	beq	16c7b30 <MEM_SIZE+0xec7b30>
    7b2c:	70160000 	andsvc	r0, r6, r0
    7b30:	0100715f 	tsteq	r0, pc, asr r1
    7b34:	07ab01d6 	sbfxeq	r0, r6, #3, #12
    7b38:	2ca40000 	stccs	0, cr0, [r4]
    7b3c:	ad170000 	ldcge	0, cr0, [r7]
    7b40:	01000010 	tsteq	r0, r0, lsl r0
    7b44:	053401d6 	ldreq	r0, [r4, #-470]!	; 0x1d6
    7b48:	2cc20000 	stclcs	0, cr0, [r2], {0}
    7b4c:	1b170000 	blne	5c7b54 <DISABLE_IRQ+0x5c7ad4>
    7b50:	01000018 	tsteq	r0, r8, lsl r0
    7b54:	00b101d6 	ldrsbteq	r0, [r1], r6
    7b58:	2d170000 	ldccs	0, cr0, [r7]
    7b5c:	15000000 	strne	r0, [r0]
    7b60:	001a1001 	andseq	r1, sl, r1
    7b64:	01980100 	orrseq	r0, r8, r0, lsl #2
    7b68:	00005001 	andeq	r5, r0, r1
    7b6c:	00417800 	subeq	r7, r1, r0, lsl #16
    7b70:	00420c30 	subeq	r0, r2, r0, lsr ip
    7b74:	002d4030 	eoreq	r4, sp, r0, lsr r0
    7b78:	000aaa00 	andeq	sl, sl, r0, lsl #20
    7b7c:	5f701600 	svcpl	0x00701600
    7b80:	98010071 	stmdals	r1, {r0, r4, r5, r6}
    7b84:	0007ab01 	andeq	sl, r7, r1, lsl #22
    7b88:	002d6b00 	eoreq	r6, sp, r0, lsl #22
    7b8c:	10ad1700 	adcne	r1, sp, r0, lsl #14
    7b90:	98010000 	stmdals	r1, {}
    7b94:	00053401 	andeq	r3, r5, r1, lsl #8
    7b98:	002d8900 	eoreq	r8, sp, r0, lsl #18
    7b9c:	181b1700 	ldmdane	fp, {r8, r9, sl, ip}
    7ba0:	98010000 	stmdals	r1, {}
    7ba4:	0000b101 	andeq	fp, r0, r1, lsl #2
    7ba8:	002dde00 	eoreq	sp, sp, r0, lsl #28
    7bac:	011c0000 	tsteq	ip, r0
    7bb0:	000019fa 	strdeq	r1, [r0], -sl
    7bb4:	50013601 	andpl	r3, r1, r1, lsl #12
    7bb8:	0c000000 	stceq	0, cr0, [r0], {0}
    7bbc:	c4300042 	ldrtgt	r0, [r0], #-66	; 0x42
    7bc0:	07300042 	ldreq	r0, [r0, -r2, asr #32]!
    7bc4:	3700002e 	strcc	r0, [r0, -lr, lsr #32]
    7bc8:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
    7bcc:	00715f70 	rsbseq	r5, r1, r0, ror pc
    7bd0:	07ab3601 	streq	r3, [fp, r1, lsl #12]!
    7bd4:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
    7bd8:	f01e0000 	undefined instruction 0xf01e0000
    7bdc:	01000017 	tsteq	r0, r7, lsl r0
    7be0:	00038e36 	andeq	r8, r3, r6, lsr lr
    7be4:	002e4f00 	eoreq	r4, lr, r0, lsl #30
    7be8:	11061e00 	tstne	r6, r0, lsl #28
    7bec:	36010000 	strcc	r0, [r1], -r0
    7bf0:	000006e1 	andeq	r0, r0, r1, ror #13
    7bf4:	00002e6d 	andeq	r2, r0, sp, ror #28
    7bf8:	00015d1e 	andeq	r5, r1, lr, lsl sp
    7bfc:	b1360100 	teqlt	r6, r0, lsl #2
    7c00:	96000000 	strls	r0, [r0], -r0
    7c04:	2000002e 	andcs	r0, r0, lr, lsr #32
    7c08:	000019d3 	ldrdeq	r1, [r0], -r3
    7c0c:	06e13801 	strbteq	r3, [r1], r1, lsl #16
    7c10:	2ebf0000 	cdpcs	0, 11, cr0, cr15, cr0, {0}
    7c14:	da200000 	ble	807c1c <MEM_SIZE+0x7c1c>
    7c18:	01000019 	tsteq	r0, r9, lsl r0
    7c1c:	0006e139 	andeq	lr, r6, r9, lsr r1
    7c20:	002ed200 	eoreq	sp, lr, r0, lsl #4
    7c24:	07272200 	streq	r2, [r7, -r0, lsl #4]!
    7c28:	42440000 	submi	r0, r4, #0
    7c2c:	424c3000 	submi	r3, ip, #0
    7c30:	50013000 	andpl	r3, r1, r0
    7c34:	0007341a 	andeq	r3, r7, sl, lsl r4
    7c38:	23000000 	movwcs	r0, #0
    7c3c:	0000038f 	andeq	r0, r0, pc, lsl #7
    7c40:	07044a0b 	streq	r4, [r4, -fp, lsl #20]
    7c44:	01010000 	tsteq	r1, r0
    7c48:	000e5023 	andeq	r5, lr, r3, lsr #32
    7c4c:	45510b00 	ldrbmi	r0, [r1, #-2816]	; 0xb00
    7c50:	01000000 	tsteq	r0, r0
    7c54:	0d852301 	stceq	3, cr2, [r5, #4]
    7c58:	520b0000 	andpl	r0, fp, #0
    7c5c:	00000045 	andeq	r0, r0, r5, asr #32
    7c60:	6f000101 	svcvs	0x00000101
    7c64:	02000008 	andeq	r0, r0, #8
    7c68:	00192d00 	andseq	r2, r9, r0, lsl #26
    7c6c:	4d010400 	cfstrsmi	mvf0, [r1]
    7c70:	01000000 	tsteq	r0, r0
    7c74:	00001b1d 	andeq	r1, r0, sp, lsl fp
    7c78:	00000063 	andeq	r0, r0, r3, rrx
    7c7c:	300042c4 	andcc	r4, r0, r4, asr #5
    7c80:	30004510 	andcc	r4, r0, r0, lsl r5
    7c84:	0000192f 	andeq	r1, r0, pc, lsr #18
    7c88:	00056402 	andeq	r6, r5, r2, lsl #8
    7c8c:	03210300 	teqeq	r1, #0
    7c90:	00a00601 	adceq	r0, r0, r1, lsl #12
    7c94:	e8040000 	stmda	r4, {}
    7c98:	0300000e 	movweq	r0, #14
    7c9c:	00003e23 	andeq	r3, r0, r3, lsr #28
    7ca0:	08010300 	stmdaeq	r1, {r8, r9}
    7ca4:	0000009e 	muleq	r0, lr, r0
    7ca8:	0004f704 	andeq	pc, r4, r4, lsl #14
    7cac:	3e240300 	cdpcc	3, 2, cr0, cr4, cr0, {0}
    7cb0:	04000000 	streq	r0, [r0]
    7cb4:	00000afb 	strdeq	r0, [r0], -fp
    7cb8:	005b2603 	subseq	r2, fp, r3, lsl #12
    7cbc:	02030000 	andeq	r0, r3, #0
    7cc0:	00008b07 	andeq	r8, r0, r7, lsl #22
    7cc4:	05020300 	streq	r0, [r2, #-768]	; 0x300
    7cc8:	00000059 	andeq	r0, r0, r9, asr r0
    7ccc:	00033804 	andeq	r3, r3, r4, lsl #16
    7cd0:	74280300 	strtvc	r0, [r8], #-768	; 0x300
    7cd4:	03000000 	movweq	r0, #0
    7cd8:	00370704 	eorseq	r0, r7, r4, lsl #14
    7cdc:	04050000 	streq	r0, [r5]
    7ce0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    7ce4:	05080300 	streq	r0, [r8, #-768]	; 0x300
    7ce8:	00000000 	andeq	r0, r0, r0
    7cec:	2d070803 	stccs	8, cr0, [r7, #-12]
    7cf0:	04000000 	streq	r0, [r0]
    7cf4:	0000039f 	muleq	r0, pc, r3
    7cf8:	00742d03 	rsbseq	r2, r4, r3, lsl #26
    7cfc:	32040000 	andcc	r0, r4, #0
    7d00:	04000001 	streq	r0, [r0], #-1
    7d04:	00007422 	andeq	r7, r0, r2, lsr #8
    7d08:	0a270400 	beq	9c8d10 <MEM_SIZE+0x1c8d10>
    7d0c:	2a050000 	bcs	147d14 <DISABLE_IRQ+0x147c94>
    7d10:	00000069 	andeq	r0, r0, r9, rrx
    7d14:	00082904 	andeq	r2, r8, r4, lsl #18
    7d18:	692c0500 	stmdbvs	ip!, {r8, sl}
    7d1c:	06000000 	streq	r0, [r0], -r0
    7d20:	61430b04 	cmpvs	r3, r4, lsl #22
    7d24:	07000002 	streq	r0, [r0, -r2]
    7d28:	00000bb5 	undefined instruction 0x00000bb5
    7d2c:	0b6e0700 	bleq	1b89934 <MEM_SIZE+0x1389934>
    7d30:	07010000 	streq	r0, [r1, -r0]
    7d34:	000003aa 	andeq	r0, r0, sl, lsr #7
    7d38:	09210702 	stmdbeq	r1!, {r1, r8, r9, sl}
    7d3c:	07030000 	streq	r0, [r3, -r0]
    7d40:	00000635 	andeq	r0, r0, r5, lsr r6
    7d44:	0a350704 	beq	d4995c <MEM_SIZE+0x54995c>
    7d48:	07050000 	streq	r0, [r5, -r0]
    7d4c:	00000ad4 	ldrdeq	r0, [r0], -r4
    7d50:	02ac0706 	adceq	r0, ip, #1572864	; 0x180000
    7d54:	07070000 	streq	r0, [r7, -r0]
    7d58:	000006e3 	andeq	r0, r0, r3, ror #13
    7d5c:	01ee0708 	mvneq	r0, r8, lsl #14
    7d60:	07090000 	streq	r0, [r9, -r0]
    7d64:	000008cd 	andeq	r0, r0, sp, asr #17
    7d68:	0ba1070a 	bleq	fe849998 <rEINTPEND+0xa88498f0>
    7d6c:	070b0000 	streq	r0, [fp, -r0]
    7d70:	00000480 	andeq	r0, r0, r0, lsl #9
    7d74:	08bc070c 	ldmeq	ip!, {r2, r3, r8, r9, sl}
    7d78:	070d0000 	streq	r0, [sp, -r0]
    7d7c:	00000705 	andeq	r0, r0, r5, lsl #14
    7d80:	06d0070e 	ldrbeq	r0, [r0], lr, lsl #14
    7d84:	070f0000 	streq	r0, [pc, -r0]
    7d88:	00000340 	andeq	r0, r0, r0, asr #6
    7d8c:	096a0710 	stmdbeq	sl!, {r4, r8, r9, sl}^
    7d90:	07110000 	ldreq	r0, [r1, -r0]
    7d94:	00000b39 	andeq	r0, r0, r9, lsr fp
    7d98:	060e0712 	undefined instruction 0x060e0712
    7d9c:	07130000 	ldreq	r0, [r3, -r0]
    7da0:	000002be 	undefined instruction 0x000002be
    7da4:	06900714 	undefined instruction 0x06900714
    7da8:	07150000 	ldreq	r0, [r5, -r0]
    7dac:	000008e5 	andeq	r0, r0, r5, ror #17
    7db0:	02d00716 	sbcseq	r0, r0, #5767168	; 0x580000
    7db4:	07170000 	ldreq	r0, [r7, -r0]
    7db8:	0000090a 	andeq	r0, r0, sl, lsl #18
    7dbc:	02150718 	andseq	r0, r5, #6291456	; 0x600000
    7dc0:	07190000 	ldreq	r0, [r9, -r0]
    7dc4:	00000776 	andeq	r0, r0, r6, ror r7
    7dc8:	02f0071a 	rscseq	r0, r0, #6815744	; 0x680000
    7dcc:	071b0000 	ldreq	r0, [fp, -r0]
    7dd0:	00000bc1 	andeq	r0, r0, r1, asr #23
    7dd4:	0405071c 	streq	r0, [r5], #-1820	; 0x71c
    7dd8:	071d0000 	ldreq	r0, [sp, -r0]
    7ddc:	00000810 	andeq	r0, r0, r0, lsl r8
    7de0:	0932071e 	ldmdbeq	r2!, {r1, r2, r3, r4, r8, r9, sl}
    7de4:	071f0000 	ldreq	r0, [pc, -r0]
    7de8:	00000267 	andeq	r0, r0, r7, ror #4
    7dec:	05b10720 	ldreq	r0, [r1, #1824]!	; 0x720
    7df0:	07210000 	streq	r0, [r1, -r0]!
    7df4:	00000644 	andeq	r0, r0, r4, asr #12
    7df8:	07ff0722 	ldrbeq	r0, [pc, r2, lsr #14]!
    7dfc:	07230000 	streq	r0, [r3, -r0]!
    7e00:	000003ba 	undefined instruction 0x000003ba
    7e04:	08990724 	ldmeq	r9, {r2, r5, r8, r9, sl}
    7e08:	07250000 	streq	r0, [r5, -r0]!
    7e0c:	00000b4b 	andeq	r0, r0, fp, asr #22
    7e10:	08830726 	stmeq	r3, {r1, r2, r5, r8, r9, sl}
    7e14:	07270000 	streq	r0, [r7, -r0]!
    7e18:	0000023e 	andeq	r0, r0, lr, lsr r2
    7e1c:	09b70728 	ldmibeq	r7!, {r3, r5, r8, r9, sl}
    7e20:	07290000 	streq	r0, [r9, -r0]!
    7e24:	00000ae5 	andeq	r0, r0, r5, ror #21
    7e28:	0a87072a 	beq	fe1c9ad8 <rEINTPEND+0xa81c9a30>
    7e2c:	072b0000 	streq	r0, [fp, -r0]!
    7e30:	00000948 	andeq	r0, r0, r8, asr #18
    7e34:	09f5072c 	ldmibeq	r5!, {r2, r3, r5, r8, r9, sl}^
    7e38:	072d0000 	streq	r0, [sp, -r0]!
    7e3c:	000009c7 	andeq	r0, r0, r7, asr #19
    7e40:	03cf072e 	biceq	r0, pc, #12058624	; 0xb80000
    7e44:	072f0000 	streq	r0, [pc, -r0]!
    7e48:	000006a7 	andeq	r0, r0, r7, lsr #13
    7e4c:	04130730 	ldreq	r0, [r3], #-1840	; 0x730
    7e50:	07310000 	ldreq	r0, [r1, -r0]!
    7e54:	00000989 	andeq	r0, r0, r9, lsl #19
    7e58:	03520732 	cmpeq	r2, #13107200	; 0xc80000
    7e5c:	07330000 	ldreq	r0, [r3, -r0]!
    7e60:	000005fd 	strdeq	r0, [r0], -sp
    7e64:	0bd50734 	bleq	ff549b3c <rEINTPEND+0xa9549a94>
    7e68:	07350000 	ldreq	r0, [r5, -r0]!
    7e6c:	000004e1 	andeq	r0, r0, r1, ror #9
    7e70:	07a80736 	undefined instruction 0x07a80736
    7e74:	07370000 	ldreq	r0, [r7, -r0]!
    7e78:	00000792 	muleq	r0, r2, r7
    7e7c:	03160738 	tsteq	r6, #14680064	; 0xe00000
    7e80:	07390000 	ldreq	r0, [r9, -r0]!
    7e84:	000006f3 	strdeq	r0, [r0], -r3
    7e88:	03e2073a 	mvneq	r0, #15204352	; 0xe80000
    7e8c:	073b0000 	ldreq	r0, [fp, -r0]!
    7e90:	000006bc 	undefined instruction 0x000006bc
    7e94:	050f073c 	streq	r0, [pc, #-1852]	; 7760 <DISABLE_IRQ+0x76e0>
    7e98:	073d0000 	ldreq	r0, [sp, -r0]!
    7e9c:	0000056d 	andeq	r0, r0, sp, ror #10
    7ea0:	04cb073e 	strbeq	r0, [fp], #1854	; 0x73e
    7ea4:	073f0000 	ldreq	r0, [pc, -r0]!
    7ea8:	0000036e 	andeq	r0, r0, lr, ror #6
    7eac:	8b0700c0 	blhi	1c81b4 <DISABLE_IRQ+0x1c8134>
    7eb0:	c1000005 	tstgt	r0, r5
    7eb4:	08370700 	ldmdaeq	r7!, {r8, r9, sl}
    7eb8:	00c20000 	sbceq	r0, r2, r0
    7ebc:	00067407 	andeq	r7, r6, r7, lsl #8
    7ec0:	0000c300 	andeq	ip, r0, r0, lsl #6
    7ec4:	000c0908 	andeq	r0, ip, r8, lsl #18
    7ec8:	23020800 	movwcs	r0, #10240	; 0x2800
    7ecc:	0000028a 	andeq	r0, r0, sl, lsl #5
    7ed0:	00031109 	andeq	r1, r3, r9, lsl #2
    7ed4:	8a240200 	bhi	9086dc <MEM_SIZE+0x1086dc>
    7ed8:	02000002 	andeq	r0, r0, #2
    7edc:	81090023 	tsthi	r9, r3, lsr #32
    7ee0:	02000002 	andeq	r0, r0, #2
    7ee4:	00028a25 	andeq	r8, r2, r5, lsr #20
    7ee8:	04230200 	strteq	r0, [r3], #-512	; 0x200
    7eec:	61040a00 	tstvs	r4, r0, lsl #20
    7ef0:	04000002 	streq	r0, [r0], #-2
    7ef4:	00000c09 	andeq	r0, r0, r9, lsl #24
    7ef8:	02612602 	rsbeq	r2, r1, #2097152	; 0x200000
    7efc:	5c080000 	stcpl	0, cr0, [r8], {0}
    7f00:	10000006 	andne	r0, r0, r6
    7f04:	02e02f06 	rsceq	r2, r0, #24
    7f08:	c9090000 	stmdbgt	r9, {}
    7f0c:	0600000a 	streq	r0, [r0], -sl
    7f10:	00029031 	andeq	r9, r2, r1, lsr r0
    7f14:	00230200 	eoreq	r0, r3, r0, lsl #4
    7f18:	0008e009 	andeq	lr, r8, r9
    7f1c:	e0320600 	eors	r0, r2, r0, lsl #12
    7f20:	02000002 	andeq	r0, r0, #2
    7f24:	00090823 	andeq	r0, r9, r3, lsr #16
    7f28:	06000009 	streq	r0, [r0], -r9
    7f2c:	00004533 	andeq	r4, r0, r3, lsr r5
    7f30:	0c230200 	sfmeq	f0, 4, [r3]	; (stceq 2, cr0, [r3])
    7f34:	00042709 	andeq	r2, r4, r9, lsl #14
    7f38:	45340600 	ldrmi	r0, [r4, #-1536]!	; 0x600
    7f3c:	02000000 	andeq	r0, r0, #0
    7f40:	0a000d23 	beq	b3d4 <DISABLE_IRQ+0xb354>
    7f44:	00004504 	andeq	r4, r0, r4, lsl #10
    7f48:	065c0400 	ldrbeq	r0, [ip], -r0, lsl #8
    7f4c:	36060000 	strcc	r0, [r6], -r0
    7f50:	0000029b 	muleq	r0, fp, r2
    7f54:	00099f08 	andeq	r9, r9, r8, lsl #30
    7f58:	3a066c00 	bcc	1a2f60 <DISABLE_IRQ+0x1a2ee0>
    7f5c:	00000486 	andeq	r0, r0, r6, lsl #9
    7f60:	00148109 	andseq	r8, r4, r9, lsl #2
    7f64:	863b0600 	ldrthi	r0, [fp], -r0, lsl #12
    7f68:	02000004 	andeq	r0, r0, #4
    7f6c:	4d090023 	stcmi	0, cr0, [r9, #-140]	; 0xffffff74
    7f70:	06000004 	streq	r0, [r0], -r4
    7f74:	00029041 	andeq	r9, r2, r1, asr #32
    7f78:	04230200 	strteq	r0, [r3], #-512	; 0x200
    7f7c:	00055209 	andeq	r5, r5, r9, lsl #4
    7f80:	8c450600 	mcrrhi	6, 0, r0, r5, cr0
    7f84:	02000004 	andeq	r0, r0, #4
    7f88:	ef090c23 	svc	0x00090c23
    7f8c:	0600001a 	undefined instruction 0x0600001a
    7f90:	0000694b 	andeq	r6, r0, fp, asr #18
    7f94:	10230200 	eorne	r0, r3, r0, lsl #4
    7f98:	00087809 	andeq	r7, r8, r9, lsl #16
    7f9c:	694c0600 	stmdbvs	ip, {r9, sl}^
    7fa0:	02000000 	andeq	r0, r0, #0
    7fa4:	35091423 	strcc	r1, [r9, #-1059]	; 0x423
    7fa8:	0600001d 	undefined instruction 0x0600001d
    7fac:	0000454d 	andeq	r4, r0, sp, asr #10
    7fb0:	18230200 	stmdane	r3!, {r9}
    7fb4:	001e5a09 	andseq	r5, lr, r9, lsl #20
    7fb8:	45510600 	ldrbmi	r0, [r1, #-1536]	; 0x600
    7fbc:	02000000 	andeq	r0, r0, #0
    7fc0:	64091923 	strvs	r1, [r9], #-2339	; 0x923
    7fc4:	06000003 	streq	r0, [r0], -r3
    7fc8:	00004553 	andeq	r4, r0, r3, asr r5
    7fcc:	1a230200 	bne	8c87d4 <MEM_SIZE+0xc87d4>
    7fd0:	00043f09 	andeq	r3, r4, r9, lsl #30
    7fd4:	45560600 	ldrbmi	r0, [r6, #-1536]	; 0x600
    7fd8:	02000000 	andeq	r0, r0, #0
    7fdc:	ad091b23 	vstrge	d1, [r9, #-140]	; 0xffffff74
    7fe0:	0600000b 	streq	r0, [r0], -fp
    7fe4:	0005005a 	andeq	r0, r5, sl, asr r0
    7fe8:	1c230200 	sfmne	f0, 4, [r3]	; (stcne 2, cr0, [r3])
    7fec:	000bf809 	andeq	pc, fp, r9, lsl #16
    7ff0:	905f0600 	subsls	r0, pc, r0, lsl #12
    7ff4:	02000002 	andeq	r0, r0, #2
    7ff8:	03092023 	movweq	r2, #36899	; 0x9023
    7ffc:	0600000b 	streq	r0, [r0], -fp
    8000:	00006963 	andeq	r6, r0, r3, ror #18
    8004:	28230200 	stmdacs	r3!, {r9}
    8008:	00062509 	andeq	r2, r6, r9, lsl #10
    800c:	06650600 	strbteq	r0, [r5], -r0, lsl #12
    8010:	02000005 	andeq	r0, r0, #5
    8014:	6e092c23 	cdpvs	12, 0, cr2, cr9, cr3, {1}
    8018:	06000008 	streq	r0, [r0], -r8
    801c:	00029066 	andeq	r9, r2, r6, rrx
    8020:	30230200 	eorcc	r0, r3, r0, lsl #4
    8024:	000c0e09 	andeq	r0, ip, r9, lsl #28
    8028:	a6680600 	strbtge	r0, [r8], -r0, lsl #12
    802c:	02000000 	andeq	r0, r0, #0
    8030:	f3093823 	vsub.i8	d3, d9, d19
    8034:	06000007 	streq	r0, [r0], -r7
    8038:	0000a669 	andeq	sl, r0, r9, ror #12
    803c:	3c230200 	sfmcc	f0, 4, [r3]	; (stccc 2, cr0, [r3])
    8040:	0005a709 	andeq	sl, r5, r9, lsl #14
    8044:	0c6b0600 	stcleq	6, cr0, [fp]
    8048:	02000005 	andeq	r0, r0, #5
    804c:	6d0b4023 	stcvs	0, cr4, [fp, #-140]	; 0xffffff74
    8050:	06006773 	undefined instruction 0x06006773
    8054:	0004866d 	andeq	r8, r4, sp, ror #12
    8058:	44230200 	strtmi	r0, [r3], #-512	; 0x200
    805c:	00163009 	andseq	r3, r6, r9
    8060:	b1700600 	cmnlt	r0, r0, lsl #12
    8064:	02000000 	andeq	r0, r0, #0
    8068:	db094823 	blle	25a0fc <DISABLE_IRQ+0x25a07c>
    806c:	06000008 	streq	r0, [r0], -r8
    8070:	0002e073 	andeq	lr, r2, r3, ror r0
    8074:	4c230200 	sfmmi	f0, 4, [r3]	; (stcmi 2, cr0, [r3])
    8078:	0009ac09 	andeq	sl, r9, r9, lsl #24
    807c:	45750600 	ldrbmi	r0, [r5, #-1536]!	; 0x600
    8080:	02000000 	andeq	r0, r0, #0
    8084:	e6095023 	str	r5, [r9], -r3, lsr #32
    8088:	06000007 	streq	r0, [r0], -r7
    808c:	00004576 	andeq	r4, r0, r6, ror r5
    8090:	51230200 	teqpl	r3, r0, lsl #4
    8094:	00053d09 	andeq	r3, r5, r9, lsl #26
    8098:	12790600 	rsbsne	r0, r9, #0
    809c:	02000005 	andeq	r0, r0, #5
    80a0:	b5095423 	strlt	r5, [r9, #-1059]	; 0x423
    80a4:	0600000a 	streq	r0, [r0], -sl
    80a8:	0005957c 	andeq	r9, r5, ip, ror r5
    80ac:	58230200 	stmdapl	r3!, {r9}
    80b0:	00022b09 	andeq	r2, r2, r9, lsl #22
    80b4:	d2800600 	addle	r0, r0, #0
    80b8:	02000005 	andeq	r0, r0, #5
    80bc:	ad095c23 	stcge	12, cr5, [r9, #-140]	; 0xffffff74
    80c0:	06000004 	streq	r0, [r0], -r4
    80c4:	00004584 	andeq	r4, r0, r4, lsl #11
    80c8:	60230200 	eorvs	r0, r3, r0, lsl #4
    80cc:	00025509 	andeq	r5, r2, r9, lsl #10
    80d0:	69850600 	stmibvs	r5, {r9, sl}
    80d4:	02000000 	andeq	r0, r0, #0
    80d8:	5a096423 	bpl	26116c <DISABLE_IRQ+0x2610ec>
    80dc:	06000007 	streq	r0, [r0], -r7
    80e0:	00048686 	andeq	r8, r4, r6, lsl #13
    80e4:	68230200 	stmdavs	r3!, {r9}
    80e8:	25040a00 	strcs	r0, [r4, #-2560]	; 0xa00
    80ec:	0c000000 	stceq	0, cr0, [r0], {0}
    80f0:	00000486 	andeq	r0, r0, r6, lsl #9
    80f4:	0000049c 	muleq	r0, ip, r4
    80f8:	00049c0d 	andeq	r9, r4, sp, lsl #24
    80fc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    8100:	2f080704 	svccs	0x00080704
    8104:	1c00000b 	stcne	0, cr0, [r0], {11}
    8108:	05005a06 	streq	r5, [r0, #-2566]	; 0xa06
    810c:	36090000 	strcc	r0, [r9], -r0
    8110:	07000005 	streq	r0, [r0, -r5]
    8114:	0002e627 	andeq	lr, r2, r7, lsr #12
    8118:	00230200 	eoreq	r0, r3, r0, lsl #4
    811c:	00086709 	andeq	r6, r8, r9, lsl #14
    8120:	dd2a0700 	stcle	7, cr0, [sl]
    8124:	02000006 	andeq	r0, r0, #6
    8128:	ad091023 	stcge	0, cr1, [r9, #-140]	; 0xffffff74
    812c:	0700000b 	streq	r0, [r0, -fp]
    8130:	0005002c 	andeq	r0, r5, ip, lsr #32
    8134:	14230200 	strtne	r0, [r3], #-512	; 0x200
    8138:	0005f609 	andeq	pc, r5, r9, lsl #12
    813c:	452e0700 	strmi	r0, [lr, #-1792]!	; 0x700
    8140:	02000000 	andeq	r0, r0, #0
    8144:	73091823 	movwvc	r1, #38947	; 0x9823
    8148:	07000004 	streq	r0, [r0, -r4]
    814c:	0000452f 	andeq	r4, r0, pc, lsr #10
    8150:	19230200 	stmdbne	r3!, {r9}
    8154:	00048e09 	andeq	r8, r4, r9, lsl #28
    8158:	45300700 	ldrmi	r0, [r0, #-1792]!	; 0x700
    815c:	02000000 	andeq	r0, r0, #0
    8160:	0a001a23 	beq	e9f4 <DISABLE_IRQ+0xe974>
    8164:	00049f04 	andeq	r9, r4, r4, lsl #30
    8168:	90040a00 	andls	r0, r4, r0, lsl #20
    816c:	0a000000 	beq	8174 <DISABLE_IRQ+0x80f4>
    8170:	00029004 	andeq	r9, r2, r4
    8174:	e6040a00 	str	r0, [r4], -r0, lsl #20
    8178:	08000002 	stmdaeq	r0, {r1}
    817c:	0000074b 	andeq	r0, r0, fp, asr #14
    8180:	957c062c 	ldrbls	r0, [ip, #-1580]!	; 0x62c
    8184:	09000005 	stmdbeq	r0, {r0, r2}
    8188:	00000536 	andeq	r0, r0, r6, lsr r5
    818c:	02e62e08 	rsceq	r2, r6, #128	; 0x80
    8190:	23020000 	movwcs	r0, #8192	; 0x2000
    8194:	07dd0900 	ldrbeq	r0, [sp, r0, lsl #18]
    8198:	30080000 	andcc	r0, r8, r0
    819c:	000006c5 	andeq	r0, r0, r5, asr #13
    81a0:	09102302 	ldmdbeq	r0, {r1, r8, r9, sp}
    81a4:	000005e4 	andeq	r0, r0, r4, ror #11
    81a8:	00b13108 	adcseq	r3, r1, r8, lsl #2
    81ac:	23020000 	movwcs	r0, #8192	; 0x2000
    81b0:	0b0e0914 	bleq	38a608 <DISABLE_IRQ+0x38a588>
    81b4:	32080000 	andcc	r0, r8, #0
    81b8:	000000b1 	strheq	r0, [r0], -r1
    81bc:	09182302 	ldmdbeq	r8, {r1, r8, r9, sp}
    81c0:	000005f0 	strdeq	r0, [r0], -r0
    81c4:	06c53408 	strbeq	r3, [r5], r8, lsl #8
    81c8:	23020000 	movwcs	r0, #8192	; 0x2000
    81cc:	014e091c 	cmpeq	lr, ip, lsl r9
    81d0:	35080000 	strcc	r0, [r8]
    81d4:	000006c5 	andeq	r0, r0, r5, asr #13
    81d8:	09202302 	stmdbeq	r0!, {r1, r8, r9, sp}
    81dc:	00000527 	andeq	r0, r0, r7, lsr #10
    81e0:	00b13608 	adcseq	r3, r1, r8, lsl #12
    81e4:	23020000 	movwcs	r0, #8192	; 0x2000
    81e8:	049b0924 	ldreq	r0, [fp], #2340	; 0x924
    81ec:	37080000 	strcc	r0, [r8, -r0]
    81f0:	000000b1 	strheq	r0, [r0], -r1
    81f4:	00282302 	eoreq	r2, r8, r2, lsl #6
    81f8:	0518040a 	ldreq	r0, [r8, #-1034]	; 0x40a
    81fc:	a7080000 	strge	r0, [r8, -r0]
    8200:	1800000a 	stmdane	r0, {r1, r3}
    8204:	05d28006 	ldrbeq	r8, [r2, #6]
    8208:	36090000 	strcc	r0, [r9], -r0
    820c:	09000005 	stmdbeq	r0, {r0, r2}
    8210:	0002e622 	andeq	lr, r2, r2, lsr #12
    8214:	00230200 	eoreq	r0, r3, r0, lsl #4
    8218:	00044709 	andeq	r4, r4, r9, lsl #14
    821c:	69230900 	stmdbvs	r3!, {r8, fp}
    8220:	02000000 	andeq	r0, r0, #0
    8224:	3f091023 	svccc	0x00091023
    8228:	0900001b 	stmdbeq	r0, {r0, r1, r3, r4}
    822c:	0006d724 	andeq	sp, r6, r4, lsr #14
    8230:	14230200 	strtne	r0, [r3], #-512	; 0x200
    8234:	9b040a00 	blls	10aa3c <DISABLE_IRQ+0x10a9bc>
    8238:	04000005 	streq	r0, [r0], #-5
    823c:	0000099f 	muleq	r0, pc, r9
    8240:	02f18906 	rscseq	r8, r1, #98304	; 0x18000
    8244:	af0f0000 	svcge	0x000f0000
    8248:	fc000014 	stc2	0, cr0, [r0], {20}
    824c:	1c8f0601 	stcne	6, cr0, [pc], {1}
    8250:	09000006 	stmdbeq	r0, {r1, r2}
    8254:	000013cf 	andeq	r1, r0, pc, asr #7
    8258:	00459106 	subeq	r9, r5, r6, lsl #2
    825c:	23020000 	movwcs	r0, #8192	; 0x2000
    8260:	13910900 	orrsne	r0, r1, #0
    8264:	93060000 	movwls	r0, #24576	; 0x6000
    8268:	0000061c 	andeq	r0, r0, ip, lsl r6
    826c:	09042302 	stmdbeq	r4, {r1, r8, r9, sp}
    8270:	0000142c 	andeq	r1, r0, ip, lsr #8
    8274:	062c9506 	strteq	r9, [ip], -r6, lsl #10
    8278:	23030000 	movwcs	r0, #12288	; 0x3000
    827c:	0c0003f4 	stceq	3, cr0, [r0], {244}	; 0xf4
    8280:	00000290 	muleq	r0, r0, r2
    8284:	0000062c 	andeq	r0, r0, ip, lsr #12
    8288:	00049c0d 	andeq	r9, r4, sp, lsl #24
    828c:	0c003d00 	stceq	13, cr3, [r0], {0}
    8290:	00000069 	andeq	r0, r0, r9, rrx
    8294:	0000063c 	andeq	r0, r0, ip, lsr r6
    8298:	00049c0d 	andeq	r9, r4, sp, lsl #24
    829c:	04000100 	streq	r0, [r0], #-256	; 0x100
    82a0:	000014af 	andeq	r1, r0, pc, lsr #9
    82a4:	05e39706 	strbeq	r9, [r3, #1798]!	; 0x706
    82a8:	d5080000 	strle	r0, [r8]
    82ac:	0c00000f 	stceq	0, cr0, [r0], {15}
    82b0:	06709c06 	ldrbteq	r9, [r0], -r6, lsl #24
    82b4:	a5090000 	strge	r0, [r9]
    82b8:	0600000f 	streq	r0, [r0], -pc
    82bc:	0002909f 	muleq	r2, pc, r0
    82c0:	00230200 	eoreq	r0, r3, r0, lsl #4
    82c4:	000fe609 	andeq	lr, pc, r9, lsl #12
    82c8:	0ca10600 	stceq	6, cr0, [r1]
    82cc:	02000005 	andeq	r0, r0, #5
    82d0:	04000823 	streq	r0, [r0], #-2083	; 0x823
    82d4:	00000fd5 	ldrdeq	r0, [r0], -r5
    82d8:	0647a306 	strbeq	sl, [r7], -r6, lsl #6
    82dc:	61080000 	tstvs	r8, r0
    82e0:	0c00000b 	stceq	0, cr0, [r0], {11}
    82e4:	06b22108 	ldrteq	r2, [r2], r8, lsl #2
    82e8:	11090000 	tstne	r9, r0
    82ec:	08000003 	stmdaeq	r0, {r0, r1}
    82f0:	0006b223 	andeq	fp, r6, r3, lsr #4
    82f4:	00230200 	eoreq	r0, r3, r0, lsl #4
    82f8:	0005dc09 	andeq	sp, r5, r9, lsl #24
    82fc:	b8240800 	stmdalt	r4!, {fp}
    8300:	02000006 	andeq	r0, r0, #6
    8304:	30090423 	andcc	r0, r9, r3, lsr #8
    8308:	08000016 	stmdaeq	r0, {r1, r2, r4}
    830c:	0000b125 	andeq	fp, r0, r5, lsr #2
    8310:	08230200 	stmdaeq	r3!, {r9}
    8314:	7b040a00 	blvc	10ab1c <DISABLE_IRQ+0x10aa9c>
    8318:	10000006 	andne	r0, r0, r6
    831c:	0b610404 	bleq	1849334 <MEM_SIZE+0x1049334>
    8320:	27080000 	strcs	r0, [r8, -r0]
    8324:	0000067b 	andeq	r0, r0, fp, ror r6
    8328:	06ba040a 	ldrteq	r0, [sl], sl, lsl #8
    832c:	01110000 	tsteq	r1, r0
    8330:	000006d7 	ldrdeq	r0, [r0], -r7
    8334:	0005d212 	andeq	sp, r5, r2, lsl r2
    8338:	040a0000 	streq	r0, [sl]
    833c:	000006cb 	andeq	r0, r0, fp, asr #13
    8340:	05d8040a 	ldrbeq	r0, [r8, #1034]	; 0x40a
    8344:	60130000 	andsvs	r0, r3, r0
    8348:	0200000e 	andeq	r0, r0, #14
    834c:	00330138 	eorseq	r0, r3, r8, lsr r1
    8350:	00030000 	andeq	r0, r3, r0
    8354:	14000007 	strne	r0, [r0], #-7
    8358:	00000144 	andeq	r0, r0, r4, asr #2
    835c:	050c3802 	streq	r3, [ip, #-2050]	; 0x802
    8360:	15000000 	strne	r0, [r0]
    8364:	00002247 	andeq	r2, r0, r7, asr #4
    8368:	03012f02 	movweq	r2, #7938	; 0x1f02
    836c:	00000719 	andeq	r0, r0, r9, lsl r7
    8370:	000da314 	andeq	sl, sp, r4, lsl r3
    8374:	0c2f0200 	sfmeq	f0, 4, [pc]	; (stceq 2, cr0, [pc])
    8378:	00000005 	andeq	r0, r0, r5
    837c:	1ae50116 	bne	ff9487dc <rEINTPEND+0xa9948734>
    8380:	a5010000 	strge	r0, [r1]
    8384:	0042c401 	subeq	ip, r2, r1, lsl #8
    8388:	00439030 	subeq	r9, r3, r0, lsr r0
    838c:	002ee530 	eoreq	lr, lr, r0, lsr r5
    8390:	00077c00 	andeq	r7, r7, r0, lsl #24
    8394:	1adb1700 	bne	ff6cdf9c <rEINTPEND+0xa96cdef4>
    8398:	a5010000 	strge	r0, [r1]
    839c:	00000045 	andeq	r0, r0, r5, asr #32
    83a0:	00002f04 	andeq	r2, r0, r4, lsl #30
    83a4:	000d9418 	andeq	r9, sp, r8, lsl r4
    83a8:	dda70100 	stfles	f0, [r7]
    83ac:	01000006 	tsteq	r0, r6
    83b0:	05ac1855 	streq	r1, [ip, #2133]!	; 0x855
    83b4:	a8010000 	stmdage	r1, {}
    83b8:	0000050c 	andeq	r0, r0, ip, lsl #10
    83bc:	18195601 	ldmdane	r9, {r0, r9, sl, ip, lr}
    83c0:	01000001 	tsteq	r0, r1
    83c4:	00009baa 	andeq	r9, r0, sl, lsr #23
    83c8:	06e31a00 	strbteq	r1, [r3], r0, lsl #20
    83cc:	42e80000 	rscmi	r0, r8, #0
    83d0:	42ec3000 	rscmi	r3, ip, #0
    83d4:	b1013000 	tstlt	r1, r0
    83d8:	0006f41b 	andeq	pc, r6, fp, lsl r4
    83dc:	1c000000 	stcne	0, cr0, [r0], {0}
    83e0:	001b0401 	andseq	r0, fp, r1, lsl #8
    83e4:	01890100 	orreq	r0, r9, r0, lsl #2
    83e8:	00000050 	andeq	r0, r0, r0, asr r0
    83ec:	30004390 	mulcc	r0, r0, r3
    83f0:	300043ec 	andcc	r4, r0, ip, ror #7
    83f4:	00002f22 	andeq	r2, r0, r2, lsr #30
    83f8:	1b11011d 	blne	448874 <DISABLE_IRQ+0x4487f4>
    83fc:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    8400:	00005001 	andeq	r5, r0, r1
    8404:	0043ec00 	subeq	lr, r3, r0, lsl #24
    8408:	00449430 	subeq	r9, r4, r0, lsr r4
    840c:	002f4130 	eoreq	r4, pc, r0, lsr r1
    8410:	0007c800 	andeq	ip, r7, r0, lsl #16
    8414:	07001e00 	streq	r1, [r0, -r0, lsl #28]
    8418:	44100000 	ldrmi	r0, [r0]
    841c:	03703000 	cmneq	r0, #0
    8420:	5b010000 	blpl	48428 <DISABLE_IRQ+0x483a8>
    8424:	00070d1b 	andeq	r0, r7, fp, lsl sp
    8428:	16000000 	strne	r0, [r0], -r0
    842c:	001afa01 	andseq	pc, sl, r1, lsl #20
    8430:	01200100 	teqeq	r0, r0, lsl #2
    8434:	30004494 	mulcc	r0, r4, r4
    8438:	30004510 	andcc	r4, r0, r0, lsl r5
    843c:	00002f6c 	andeq	r2, r0, ip, ror #30
    8440:	000007ed 	andeq	r0, r0, sp, ror #15
    8444:	00011819 	andeq	r1, r1, r9, lsl r8
    8448:	9b220100 	blls	888850 <MEM_SIZE+0x88850>
    844c:	00000000 	andeq	r0, r0, r0
    8450:	0014d11f 	andseq	sp, r4, pc, lsl r1
    8454:	dd490a00 	vstrle	s1, [r9]
    8458:	01000006 	tsteq	r0, r6
    845c:	038f1f01 	orreq	r1, pc, #4
    8460:	4a0a0000 	bmi	288468 <DISABLE_IRQ+0x2883e8>
    8464:	000006dd 	ldrdeq	r0, [r0], -sp
    8468:	0f1f0101 	svceq	0x001f0101
    846c:	0a000013 	beq	84c0 <DISABLE_IRQ+0x8440>
    8470:	0000454c 	andeq	r4, r0, ip, asr #10
    8474:	1f010100 	svcne	0x00010100
    8478:	0000131d 	andeq	r1, r0, sp, lsl r3
    847c:	063c500a 	ldrteq	r5, [ip], -sl
    8480:	01010000 	tsteq	r1, r0
    8484:	000e501f 	andeq	r5, lr, pc, lsl r0
    8488:	45510a00 	ldrbmi	r0, [r1, #-2560]	; 0xa00
    848c:	01000000 	tsteq	r0, r0
    8490:	0d851f01 	stceq	15, cr1, [r5, #4]
    8494:	520a0000 	andpl	r0, sl, #0
    8498:	00000045 	andeq	r0, r0, r5, asr #32
    849c:	841f0101 	ldrhi	r0, [pc], #257	; 84a4 <DISABLE_IRQ+0x8424>
    84a0:	0a000013 	beq	84f4 <DISABLE_IRQ+0x8474>
    84a4:	0005d855 	andeq	sp, r5, r5, asr r8
    84a8:	0c010100 	stfeqs	f0, [r1], {0}
    84ac:	00000090 	muleq	r0, r0, r0
    84b0:	00000858 	andeq	r0, r0, r8, asr r8
    84b4:	00049c0d 	andeq	r9, r4, sp, lsl #24
    84b8:	1f00ff00 	svcne	0x0000ff00
    84bc:	000012df 	ldrdeq	r1, [r0], -pc
    84c0:	0848570a 	stmdaeq	r8, {r1, r3, r8, r9, sl, ip, lr}^
    84c4:	01010000 	tsteq	r1, r0
    84c8:	0010331f 	andseq	r3, r0, pc, lsl r3
    84cc:	70790a00 	rsbsvc	r0, r9, r0, lsl #20
    84d0:	01000006 	tsteq	r0, r6
    84d4:	0a150001 	beq	5484e0 <DISABLE_IRQ+0x548460>
    84d8:	00020000 	andeq	r0, r2, r0
    84dc:	00001ad5 	ldrdeq	r1, [r0], -r5
    84e0:	004d0104 	subeq	r0, sp, r4, lsl #2
    84e4:	f3010000 	vhadd.u8	d0, d1, d0
    84e8:	6300001b 	movwvs	r0, #27
    84ec:	10000000 	andne	r0, r0, r0
    84f0:	84300045 	ldrthi	r0, [r0], #-69	; 0x45
    84f4:	7a30004c 	bvc	c0862c <MEM_SIZE+0x40862c>
    84f8:	0200001a 	andeq	r0, r0, #26
    84fc:	00000564 	andeq	r0, r0, r4, ror #10
    8500:	01032103 	tsteq	r3, r3, lsl #2
    8504:	0000a006 	andeq	sl, r0, r6
    8508:	0ee80400 	cdpeq	4, 14, cr0, cr8, cr0, {0}
    850c:	23030000 	movwcs	r0, #12288	; 0x3000
    8510:	0000003e 	andeq	r0, r0, lr, lsr r0
    8514:	9e080103 	adflse	f0, f0, f3
    8518:	04000000 	streq	r0, [r0]
    851c:	000004f7 	strdeq	r0, [r0], -r7
    8520:	003e2403 	eorseq	r2, lr, r3, lsl #8
    8524:	fb040000 	blx	10852e <DISABLE_IRQ+0x1084ae>
    8528:	0300000a 	movweq	r0, #10
    852c:	00005b26 	andeq	r5, r0, r6, lsr #22
    8530:	07020300 	streq	r0, [r2, -r0, lsl #6]
    8534:	0000008b 	andeq	r0, r0, fp, lsl #1
    8538:	59050203 	stmdbpl	r5, {r0, r1, r9}
    853c:	04000000 	streq	r0, [r0]
    8540:	00000338 	andeq	r0, r0, r8, lsr r3
    8544:	00742803 	rsbseq	r2, r4, r3, lsl #16
    8548:	04030000 	streq	r0, [r3]
    854c:	00003707 	andeq	r3, r0, r7, lsl #14
    8550:	05040500 	streq	r0, [r4, #-1280]	; 0x500
    8554:	00746e69 	rsbseq	r6, r4, r9, ror #28
    8558:	00050803 	andeq	r0, r5, r3, lsl #16
    855c:	03000000 	movweq	r0, #0
    8560:	002d0708 	eoreq	r0, sp, r8, lsl #14
    8564:	9f040000 	svcls	0x00040000
    8568:	03000003 	movweq	r0, #3
    856c:	0000742d 	andeq	r7, r0, sp, lsr #8
    8570:	01320400 	teqeq	r2, r0, lsl #8
    8574:	22040000 	andcs	r0, r4, #0
    8578:	00000074 	andeq	r0, r0, r4, ror r0
    857c:	000a2704 	andeq	r2, sl, r4, lsl #14
    8580:	692a0500 	stmdbvs	sl!, {r8, sl}
    8584:	04000000 	streq	r0, [r0]
    8588:	00000829 	andeq	r0, r0, r9, lsr #16
    858c:	00692c05 	rsbeq	r2, r9, r5, lsl #24
    8590:	04060000 	streq	r0, [r6]
    8594:	02614306 	rsbeq	r4, r1, #402653184	; 0x18000000
    8598:	b5070000 	strlt	r0, [r7]
    859c:	0000000b 	andeq	r0, r0, fp
    85a0:	000b6e07 	andeq	r6, fp, r7, lsl #28
    85a4:	aa070100 	bge	1c89ac <DISABLE_IRQ+0x1c892c>
    85a8:	02000003 	andeq	r0, r0, #3
    85ac:	00092107 	andeq	r2, r9, r7, lsl #2
    85b0:	35070300 	strcc	r0, [r7, #-768]	; 0x300
    85b4:	04000006 	streq	r0, [r0], #-6
    85b8:	000a3507 	andeq	r3, sl, r7, lsl #10
    85bc:	d4070500 	strle	r0, [r7], #-1280	; 0x500
    85c0:	0600000a 	streq	r0, [r0], -sl
    85c4:	0002ac07 	andeq	sl, r2, r7, lsl #24
    85c8:	e3070700 	movw	r0, #30464	; 0x7700
    85cc:	08000006 	stmdaeq	r0, {r1, r2}
    85d0:	0001ee07 	andeq	lr, r1, r7, lsl #28
    85d4:	cd070900 	stcgt	9, cr0, [r7]
    85d8:	0a000008 	beq	8600 <DISABLE_IRQ+0x8580>
    85dc:	000ba107 	andeq	sl, fp, r7, lsl #2
    85e0:	80070b00 	andhi	r0, r7, r0, lsl #22
    85e4:	0c000004 	stceq	0, cr0, [r0], {4}
    85e8:	0008bc07 	andeq	fp, r8, r7, lsl #24
    85ec:	05070d00 	streq	r0, [r7, #-3328]	; 0xd00
    85f0:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
    85f4:	0006d007 	andeq	sp, r6, r7
    85f8:	40070f00 	andmi	r0, r7, r0, lsl #30
    85fc:	10000003 	andne	r0, r0, r3
    8600:	00096a07 	andeq	r6, r9, r7, lsl #20
    8604:	39071100 	stmdbcc	r7, {r8, ip}
    8608:	1200000b 	andne	r0, r0, #11
    860c:	00060e07 	andeq	r0, r6, r7, lsl #28
    8610:	be071300 	cdplt	3, 0, cr1, cr7, cr0, {0}
    8614:	14000002 	strne	r0, [r0], #-2
    8618:	00069007 	andeq	r9, r6, r7
    861c:	e5071500 	str	r1, [r7, #-1280]	; 0x500
    8620:	16000008 	strne	r0, [r0], -r8
    8624:	0002d007 	andeq	sp, r2, r7
    8628:	0a071700 	beq	1ce230 <DISABLE_IRQ+0x1ce1b0>
    862c:	18000009 	stmdane	r0, {r0, r3}
    8630:	00021507 	andeq	r1, r2, r7, lsl #10
    8634:	76071900 	strvc	r1, [r7], -r0, lsl #18
    8638:	1a000007 	bne	865c <DISABLE_IRQ+0x85dc>
    863c:	0002f007 	andeq	pc, r2, r7
    8640:	c1071b00 	tstgt	r7, r0, lsl #22
    8644:	1c00000b 	stcne	0, cr0, [r0], {11}
    8648:	00040507 	andeq	r0, r4, r7, lsl #10
    864c:	10071d00 	andne	r1, r7, r0, lsl #26
    8650:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
    8654:	00093207 	andeq	r3, r9, r7, lsl #4
    8658:	67071f00 	strvs	r1, [r7, -r0, lsl #30]
    865c:	20000002 	andcs	r0, r0, r2
    8660:	0005b107 	andeq	fp, r5, r7, lsl #2
    8664:	44072100 	strmi	r2, [r7], #-256	; 0x100
    8668:	22000006 	andcs	r0, r0, #6
    866c:	0007ff07 	andeq	pc, r7, r7, lsl #30
    8670:	ba072300 	blt	1d1278 <DISABLE_IRQ+0x1d11f8>
    8674:	24000003 	strcs	r0, [r0], #-3
    8678:	00089907 	andeq	r9, r8, r7, lsl #18
    867c:	4b072500 	blmi	1d1a84 <DISABLE_IRQ+0x1d1a04>
    8680:	2600000b 	strcs	r0, [r0], -fp
    8684:	00088307 	andeq	r8, r8, r7, lsl #6
    8688:	3e072700 	cdpcc	7, 0, cr2, cr7, cr0, {0}
    868c:	28000002 	stmdacs	r0, {r1}
    8690:	0009b707 	andeq	fp, r9, r7, lsl #14
    8694:	e5072900 	str	r2, [r7, #-2304]	; 0x900
    8698:	2a00000a 	bcs	86c8 <DISABLE_IRQ+0x8648>
    869c:	000a8707 	andeq	r8, sl, r7, lsl #14
    86a0:	48072b00 	stmdami	r7, {r8, r9, fp, sp}
    86a4:	2c000009 	stccs	0, cr0, [r0], {9}
    86a8:	0009f507 	andeq	pc, r9, r7, lsl #10
    86ac:	c7072d00 	strgt	r2, [r7, -r0, lsl #26]
    86b0:	2e000009 	cdpcs	0, 0, cr0, cr0, cr9, {0}
    86b4:	0003cf07 	andeq	ip, r3, r7, lsl #30
    86b8:	a7072f00 	strge	r2, [r7, -r0, lsl #30]
    86bc:	30000006 	andcc	r0, r0, r6
    86c0:	00041307 	andeq	r1, r4, r7, lsl #6
    86c4:	89073100 	stmdbhi	r7, {r8, ip, sp}
    86c8:	32000009 	andcc	r0, r0, #9
    86cc:	00035207 	andeq	r5, r3, r7, lsl #4
    86d0:	fd073300 	stc2	3, cr3, [r7]
    86d4:	34000005 	strcc	r0, [r0], #-5
    86d8:	000bd507 	andeq	sp, fp, r7, lsl #10
    86dc:	e1073500 	tst	r7, r0, lsl #10
    86e0:	36000004 	strcc	r0, [r0], -r4
    86e4:	0007a807 	andeq	sl, r7, r7, lsl #16
    86e8:	92073700 	andls	r3, r7, #0
    86ec:	38000007 	stmdacc	r0, {r0, r1, r2}
    86f0:	00031607 	andeq	r1, r3, r7, lsl #12
    86f4:	f3073900 	vmls.i8	d3, d7, d0
    86f8:	3a000006 	bcc	8718 <DISABLE_IRQ+0x8698>
    86fc:	0003e207 	andeq	lr, r3, r7, lsl #4
    8700:	bc073b00 	stclt	11, cr3, [r7], {0}
    8704:	3c000006 	stccc	0, cr0, [r0], {6}
    8708:	00050f07 	andeq	r0, r5, r7, lsl #30
    870c:	6d073d00 	stcvs	13, cr3, [r7]
    8710:	3e000005 	cdpcc	0, 0, cr0, cr0, cr5, {0}
    8714:	0004cb07 	andeq	ip, r4, r7, lsl #22
    8718:	6e073f00 	cdpvs	15, 0, cr3, cr7, cr0, {0}
    871c:	c0000003 	andgt	r0, r0, r3
    8720:	058b0700 	streq	r0, [fp, #1792]	; 0x700
    8724:	00c10000 	sbceq	r0, r1, r0
    8728:	00083707 	andeq	r3, r8, r7, lsl #14
    872c:	0700c200 	streq	ip, [r0, -r0, lsl #4]
    8730:	00000674 	andeq	r0, r0, r4, ror r6
    8734:	060000c3 	streq	r0, [r0], -r3, asr #1
    8738:	bea00604 	cdplt	6, 10, cr0, cr0, cr4, {0}
    873c:	07000002 	streq	r0, [r0, -r2]
    8740:	00000df5 	strdeq	r0, [r0], -r5
    8744:	0de60700 	stcleq	7, cr0, [r6]
    8748:	07010000 	streq	r0, [r1, -r0]
    874c:	00000ed9 	ldrdeq	r0, [r0], -r9
    8750:	0f210702 	svceq	0x00210702
    8754:	07030000 	streq	r0, [r3, -r0]
    8758:	00000d37 	andeq	r0, r0, r7, lsr sp
    875c:	0f690704 	svceq	0x00690704
    8760:	07050000 	streq	r0, [r5, -r0]
    8764:	00000e3f 	andeq	r0, r0, pc, lsr lr
    8768:	0e2f0706 	cdpeq	7, 2, cr0, cr15, cr6, {0}
    876c:	07070000 	streq	r0, [r7, -r0]
    8770:	00000f37 	andeq	r0, r0, r7, lsr pc
    8774:	0d440708 	stcleq	7, cr0, [r4, #-32]	; 0xffffffe0
    8778:	07090000 	streq	r0, [r9, -r0]
    877c:	00000dad 	andeq	r0, r0, sp, lsr #27
    8780:	0e16070a 	cdpeq	7, 1, cr0, cr6, cr10, {0}
    8784:	070b0000 	streq	r0, [fp, -r0]
    8788:	00000e7f 	andeq	r0, r0, pc, ror lr
    878c:	0f02070c 	svceq	0x0002070c
    8790:	000d0000 	andeq	r0, sp, r0
    8794:	b5060406 	strlt	r0, [r6, #-1030]	; 0x406
    8798:	0000030f 	andeq	r0, r0, pc, lsl #6
    879c:	0009e407 	andeq	lr, r9, r7, lsl #8
    87a0:	57071100 	strpl	r1, [r7, -r0, lsl #2]
    87a4:	12000004 	andne	r0, r0, #4
    87a8:	0001db07 	andeq	sp, r1, r7, lsl #22
    87ac:	c3071300 	movwgt	r1, #29440	; 0x7300
    87b0:	14000007 	strne	r0, [r0], #-7
    87b4:	00073307 	andeq	r3, r7, r7, lsl #6
    87b8:	44071500 	strmi	r1, [r7], #-1280	; 0x500
    87bc:	1600000a 	strne	r0, [r0], -sl
    87c0:	000b8e07 	andeq	r8, fp, r7, lsl #28
    87c4:	c9071700 	stmdbgt	r7, {r8, r9, sl, ip}
    87c8:	18000005 	stmdane	r0, {r0, r2}
    87cc:	0008a907 	andeq	sl, r8, r7, lsl #18
    87d0:	50071900 	andpl	r1, r7, r0, lsl #18
    87d4:	1a000008 	bne	87fc <DISABLE_IRQ+0x877c>
    87d8:	00071707 	andeq	r1, r7, r7, lsl #14
    87dc:	1b071b00 	blne	1cf3e4 <DISABLE_IRQ+0x1cf364>
    87e0:	1c00000b 	stcne	0, cr0, [r0], {11}
    87e4:	0c090800 	stceq	8, cr0, [r9], {0}
    87e8:	02080000 	andeq	r0, r8, #0
    87ec:	00033823 	andeq	r3, r3, r3, lsr #16
    87f0:	03110900 	tsteq	r1, #0
    87f4:	24020000 	strcs	r0, [r2]
    87f8:	00000338 	andeq	r0, r0, r8, lsr r3
    87fc:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    8800:	00000281 	andeq	r0, r0, r1, lsl #5
    8804:	03382502 	teqeq	r8, #8388608	; 0x800000
    8808:	23020000 	movwcs	r0, #8192	; 0x2000
    880c:	040a0004 	streq	r0, [sl], #-4
    8810:	0000030f 	andeq	r0, r0, pc, lsl #6
    8814:	000c0904 	andeq	r0, ip, r4, lsl #18
    8818:	0f260200 	svceq	0x00260200
    881c:	08000003 	stmdaeq	r0, {r0, r1}
    8820:	0000065c 	andeq	r0, r0, ip, asr r6
    8824:	8e2f0710 	mcrhi	7, 1, r0, cr15, cr0, {0}
    8828:	09000003 	stmdbeq	r0, {r0, r1}
    882c:	00000ac9 	andeq	r0, r0, r9, asr #21
    8830:	033e3107 	teqeq	lr, #-1073741823	; 0xc0000001
    8834:	23020000 	movwcs	r0, #8192	; 0x2000
    8838:	08e00900 	stmiaeq	r0!, {r8, fp}^
    883c:	32070000 	andcc	r0, r7, #0
    8840:	0000038e 	andeq	r0, r0, lr, lsl #7
    8844:	09082302 	stmdbeq	r8, {r1, r8, r9, sp}
    8848:	00000900 	andeq	r0, r0, r0, lsl #18
    884c:	00453307 	subeq	r3, r5, r7, lsl #6
    8850:	23020000 	movwcs	r0, #8192	; 0x2000
    8854:	0427090c 	strteq	r0, [r7], #-2316	; 0x90c
    8858:	34070000 	strcc	r0, [r7]
    885c:	00000045 	andeq	r0, r0, r5, asr #32
    8860:	000d2302 	andeq	r2, sp, r2, lsl #6
    8864:	0045040a 	subeq	r0, r5, sl, lsl #8
    8868:	5c040000 	stcpl	0, cr0, [r4], {0}
    886c:	07000006 	streq	r0, [r0, -r6]
    8870:	00034936 	andeq	r4, r3, r6, lsr r9
    8874:	099f0800 	ldmibeq	pc, {fp}
    8878:	076c0000 	strbeq	r0, [ip, -r0]!
    887c:	0005343a 	andeq	r3, r5, sl, lsr r4
    8880:	14810900 	strne	r0, [r1], #2304	; 0x900
    8884:	3b070000 	blcc	1c888c <DISABLE_IRQ+0x1c880c>
    8888:	00000534 	andeq	r0, r0, r4, lsr r5
    888c:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    8890:	0000044d 	andeq	r0, r0, sp, asr #8
    8894:	033e4107 	teqeq	lr, #-1073741823	; 0xc0000001
    8898:	23020000 	movwcs	r0, #8192	; 0x2000
    889c:	05520904 	ldrbeq	r0, [r2, #-2308]	; 0x904
    88a0:	45070000 	strmi	r0, [r7]
    88a4:	0000053a 	andeq	r0, r0, sl, lsr r5
    88a8:	090c2302 	stmdbeq	ip, {r1, r8, r9, sp}
    88ac:	00001aef 	andeq	r1, r0, pc, ror #21
    88b0:	00694b07 	rsbeq	r4, r9, r7, lsl #22
    88b4:	23020000 	movwcs	r0, #8192	; 0x2000
    88b8:	08780910 	ldmdaeq	r8!, {r4, r8, fp}^
    88bc:	4c070000 	stcmi	0, cr0, [r7], {0}
    88c0:	00000069 	andeq	r0, r0, r9, rrx
    88c4:	09142302 	ldmdbeq	r4, {r1, r8, r9, sp}
    88c8:	00001d35 	andeq	r1, r0, r5, lsr sp
    88cc:	00454d07 	subeq	r4, r5, r7, lsl #26
    88d0:	23020000 	movwcs	r0, #8192	; 0x2000
    88d4:	1e5a0918 	mrcne	9, 2, r0, cr10, cr8, {0}
    88d8:	51070000 	tstpl	r7, r0
    88dc:	00000045 	andeq	r0, r0, r5, asr #32
    88e0:	09192302 	ldmdbeq	r9, {r1, r8, r9, sp}
    88e4:	00000364 	andeq	r0, r0, r4, ror #6
    88e8:	00455307 	subeq	r5, r5, r7, lsl #6
    88ec:	23020000 	movwcs	r0, #8192	; 0x2000
    88f0:	043f091a 	ldrteq	r0, [pc], #2330	; 88f8 <DISABLE_IRQ+0x8878>
    88f4:	56070000 	strpl	r0, [r7], -r0
    88f8:	00000045 	andeq	r0, r0, r5, asr #32
    88fc:	091b2302 	ldmdbeq	fp, {r1, r8, r9, sp}
    8900:	00000bad 	andeq	r0, r0, sp, lsr #23
    8904:	05ae5a07 	streq	r5, [lr, #2567]!	; 0xa07
    8908:	23020000 	movwcs	r0, #8192	; 0x2000
    890c:	0bf8091c 	bleq	ffe0ad84 <rEINTPEND+0xa9e0acdc>
    8910:	5f070000 	svcpl	0x00070000
    8914:	0000033e 	andeq	r0, r0, lr, lsr r3
    8918:	09202302 	stmdbeq	r0!, {r1, r8, r9, sp}
    891c:	00000b03 	andeq	r0, r0, r3, lsl #22
    8920:	00696307 	rsbeq	r6, r9, r7, lsl #6
    8924:	23020000 	movwcs	r0, #8192	; 0x2000
    8928:	06250928 	strteq	r0, [r5], -r8, lsr #18
    892c:	65070000 	strvs	r0, [r7]
    8930:	000005b4 	undefined instruction 0x000005b4
    8934:	092c2302 	stmdbeq	ip!, {r1, r8, r9, sp}
    8938:	0000086e 	andeq	r0, r0, lr, ror #16
    893c:	033e6607 	teqeq	lr, #7340032	; 0x700000
    8940:	23020000 	movwcs	r0, #8192	; 0x2000
    8944:	0c0e0930 	stceq	9, cr0, [lr], {48}	; 0x30
    8948:	68070000 	stmdavs	r7, {}
    894c:	000000a6 	andeq	r0, r0, r6, lsr #1
    8950:	09382302 	ldmdbeq	r8!, {r1, r8, r9, sp}
    8954:	000007f3 	strdeq	r0, [r0], -r3
    8958:	00a66907 	adceq	r6, r6, r7, lsl #18
    895c:	23020000 	movwcs	r0, #8192	; 0x2000
    8960:	05a7093c 	streq	r0, [r7, #2364]!	; 0x93c
    8964:	6b070000 	blvs	1c896c <DISABLE_IRQ+0x1c88ec>
    8968:	000005ba 	undefined instruction 0x000005ba
    896c:	0b402302 	bleq	101157c <MEM_SIZE+0x81157c>
    8970:	0067736d 	rsbeq	r7, r7, sp, ror #6
    8974:	05346d07 	ldreq	r6, [r4, #-3335]!	; 0xd07
    8978:	23020000 	movwcs	r0, #8192	; 0x2000
    897c:	16300944 	ldrtne	r0, [r0], -r4, asr #18
    8980:	70070000 	andvc	r0, r7, r0
    8984:	000000b1 	strheq	r0, [r0], -r1
    8988:	09482302 	stmdbeq	r8, {r1, r8, r9, sp}^
    898c:	000008db 	ldrdeq	r0, [r0], -fp
    8990:	038e7307 	orreq	r7, lr, #469762048	; 0x1c000000
    8994:	23020000 	movwcs	r0, #8192	; 0x2000
    8998:	09ac094c 	stmibeq	ip!, {r2, r3, r6, r8, fp}
    899c:	75070000 	strvc	r0, [r7]
    89a0:	00000045 	andeq	r0, r0, r5, asr #32
    89a4:	09502302 	ldmdbeq	r0, {r1, r8, r9, sp}^
    89a8:	000007e6 	andeq	r0, r0, r6, ror #15
    89ac:	00457607 	subeq	r7, r5, r7, lsl #12
    89b0:	23020000 	movwcs	r0, #8192	; 0x2000
    89b4:	053d0951 	ldreq	r0, [sp, #-2385]!	; 0x951
    89b8:	79070000 	stmdbvc	r7, {}
    89bc:	000005c0 	andeq	r0, r0, r0, asr #11
    89c0:	09542302 	ldmdbeq	r4, {r1, r8, r9, sp}^
    89c4:	00000ab5 	undefined instruction 0x00000ab5
    89c8:	06437c07 	strbeq	r7, [r3], -r7, lsl #24
    89cc:	23020000 	movwcs	r0, #8192	; 0x2000
    89d0:	022b0958 	eoreq	r0, fp, #1441792	; 0x160000
    89d4:	80070000 	andhi	r0, r7, r0
    89d8:	00000680 	andeq	r0, r0, r0, lsl #13
    89dc:	095c2302 	ldmdbeq	ip, {r1, r8, r9, sp}^
    89e0:	000004ad 	andeq	r0, r0, sp, lsr #9
    89e4:	00458407 	subeq	r8, r5, r7, lsl #8
    89e8:	23020000 	movwcs	r0, #8192	; 0x2000
    89ec:	02550960 	subseq	r0, r5, #1572864	; 0x180000
    89f0:	85070000 	strhi	r0, [r7]
    89f4:	00000069 	andeq	r0, r0, r9, rrx
    89f8:	09642302 	stmdbeq	r4!, {r1, r8, r9, sp}^
    89fc:	0000075a 	andeq	r0, r0, sl, asr r7
    8a00:	05348607 	ldreq	r8, [r4, #-1543]!	; 0x607
    8a04:	23020000 	movwcs	r0, #8192	; 0x2000
    8a08:	040a0068 	streq	r0, [sl], #-104	; 0x68
    8a0c:	00000025 	andeq	r0, r0, r5, lsr #32
    8a10:	0005340c 	andeq	r3, r5, ip, lsl #8
    8a14:	00054a00 	andeq	r4, r5, r0, lsl #20
    8a18:	054a0d00 	strbeq	r0, [sl, #-3328]	; 0xd00
    8a1c:	00000000 	andeq	r0, r0, r0
    8a20:	0807040e 	stmdaeq	r7, {r1, r2, r3, sl}
    8a24:	00000b2f 	andeq	r0, r0, pc, lsr #22
    8a28:	ae5a071c 	mrcge	7, 2, r0, cr10, cr12, {0}
    8a2c:	09000005 	stmdbeq	r0, {r0, r2}
    8a30:	00000536 	andeq	r0, r0, r6, lsr r5
    8a34:	03942708 	orrseq	r2, r4, #2097152	; 0x200000
    8a38:	23020000 	movwcs	r0, #8192	; 0x2000
    8a3c:	08670900 	stmdaeq	r7!, {r8, fp}^
    8a40:	2a080000 	bcs	208a48 <DISABLE_IRQ+0x2089c8>
    8a44:	00000721 	andeq	r0, r0, r1, lsr #14
    8a48:	09102302 	ldmdbeq	r0, {r1, r8, r9, sp}
    8a4c:	00000bad 	andeq	r0, r0, sp, lsr #23
    8a50:	05ae2c08 	streq	r2, [lr, #3080]!	; 0xc08
    8a54:	23020000 	movwcs	r0, #8192	; 0x2000
    8a58:	05f60914 	ldrbeq	r0, [r6, #2324]!	; 0x914
    8a5c:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    8a60:	00000045 	andeq	r0, r0, r5, asr #32
    8a64:	09182302 	ldmdbeq	r8, {r1, r8, r9, sp}
    8a68:	00000473 	andeq	r0, r0, r3, ror r4
    8a6c:	00452f08 	subeq	r2, r5, r8, lsl #30
    8a70:	23020000 	movwcs	r0, #8192	; 0x2000
    8a74:	048e0919 	streq	r0, [lr], #2329	; 0x919
    8a78:	30080000 	andcc	r0, r8, r0
    8a7c:	00000045 	andeq	r0, r0, r5, asr #32
    8a80:	001a2302 	andseq	r2, sl, r2, lsl #6
    8a84:	054d040a 	strbeq	r0, [sp, #-1034]	; 0x40a
    8a88:	040a0000 	streq	r0, [sl]
    8a8c:	00000090 	muleq	r0, r0, r0
    8a90:	033e040a 	teqeq	lr, #167772160	; 0xa000000
    8a94:	040a0000 	streq	r0, [sl]
    8a98:	00000394 	muleq	r0, r4, r3
    8a9c:	00074b08 	andeq	r4, r7, r8, lsl #22
    8aa0:	7c072c00 	stcvc	12, cr2, [r7], {0}
    8aa4:	00000643 	andeq	r0, r0, r3, asr #12
    8aa8:	00053609 	andeq	r3, r5, r9, lsl #12
    8aac:	942e0900 	strtls	r0, [lr], #-2304	; 0x900
    8ab0:	02000003 	andeq	r0, r0, #3
    8ab4:	dd090023 	stcle	0, cr0, [r9, #-140]	; 0xffffff74
    8ab8:	09000007 	stmdbeq	r0, {r0, r1, r2}
    8abc:	0006db30 	andeq	sp, r6, r0, lsr fp
    8ac0:	10230200 	eorne	r0, r3, r0, lsl #4
    8ac4:	0005e409 	andeq	lr, r5, r9, lsl #8
    8ac8:	b1310900 	teqlt	r1, r0, lsl #18
    8acc:	02000000 	andeq	r0, r0, #0
    8ad0:	0e091423 	cdpeq	4, 0, cr1, cr9, cr3, {1}
    8ad4:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    8ad8:	0000b132 	andeq	fp, r0, r2, lsr r1
    8adc:	18230200 	stmdane	r3!, {r9}
    8ae0:	0005f009 	andeq	pc, r5, r9
    8ae4:	db340900 	blle	d0aeec <MEM_SIZE+0x50aeec>
    8ae8:	02000006 	andeq	r0, r0, #6
    8aec:	4e091c23 	cdpmi	12, 0, cr1, cr9, cr3, {1}
    8af0:	09000001 	stmdbeq	r0, {r0}
    8af4:	0006db35 	andeq	sp, r6, r5, lsr fp
    8af8:	20230200 	eorcs	r0, r3, r0, lsl #4
    8afc:	00052709 	andeq	r2, r5, r9, lsl #14
    8b00:	b1360900 	teqlt	r6, r0, lsl #18
    8b04:	02000000 	andeq	r0, r0, #0
    8b08:	9b092423 	blls	251b9c <DISABLE_IRQ+0x251b1c>
    8b0c:	09000004 	stmdbeq	r0, {r2}
    8b10:	0000b137 	andeq	fp, r0, r7, lsr r1
    8b14:	28230200 	stmdacs	r3!, {r9}
    8b18:	c6040a00 	strgt	r0, [r4], -r0, lsl #20
    8b1c:	08000005 	stmdaeq	r0, {r0, r2}
    8b20:	00000aa7 	andeq	r0, r0, r7, lsr #21
    8b24:	80800718 	addhi	r0, r0, r8, lsl r7
    8b28:	09000006 	stmdbeq	r0, {r1, r2}
    8b2c:	00000536 	andeq	r0, r0, r6, lsr r5
    8b30:	0394220a 	orrseq	r2, r4, #-1610612736	; 0xa0000000
    8b34:	23020000 	movwcs	r0, #8192	; 0x2000
    8b38:	04470900 	strbeq	r0, [r7], #-2304	; 0x900
    8b3c:	230a0000 	movwcs	r0, #40960	; 0xa000
    8b40:	00000069 	andeq	r0, r0, r9, rrx
    8b44:	09102302 	ldmdbeq	r0, {r1, r8, r9, sp}
    8b48:	00001b3f 	andeq	r1, r0, pc, lsr fp
    8b4c:	06ed240a 	strbteq	r2, [sp], sl, lsl #8
    8b50:	23020000 	movwcs	r0, #8192	; 0x2000
    8b54:	040a0014 	streq	r0, [sl], #-20
    8b58:	00000649 	andeq	r0, r0, r9, asr #12
    8b5c:	00099f04 	andeq	r9, r9, r4, lsl #30
    8b60:	9f890700 	svcls	0x00890700
    8b64:	08000003 	stmdaeq	r0, {r0, r1}
    8b68:	00000b61 	andeq	r0, r0, r1, ror #22
    8b6c:	c821090c 	stmdagt	r1!, {r2, r3, r8, fp}
    8b70:	09000006 	stmdbeq	r0, {r1, r2}
    8b74:	00000311 	andeq	r0, r0, r1, lsl r3
    8b78:	06c82309 	strbeq	r2, [r8], r9, lsl #6
    8b7c:	23020000 	movwcs	r0, #8192	; 0x2000
    8b80:	05dc0900 	ldrbeq	r0, [ip, #2304]	; 0x900
    8b84:	24090000 	strcs	r0, [r9]
    8b88:	000006ce 	andeq	r0, r0, lr, asr #13
    8b8c:	09042302 	stmdbeq	r4, {r1, r8, r9, sp}
    8b90:	00001630 	andeq	r1, r0, r0, lsr r6
    8b94:	00b12509 	adcseq	r2, r1, r9, lsl #10
    8b98:	23020000 	movwcs	r0, #8192	; 0x2000
    8b9c:	040a0008 	streq	r0, [sl], #-8
    8ba0:	00000691 	muleq	r0, r1, r6
    8ba4:	6104040f 	tstvs	r4, pc, lsl #8
    8ba8:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    8bac:	00069127 	andeq	r9, r6, r7, lsr #2
    8bb0:	d0040a00 	andle	r0, r4, r0, lsl #20
    8bb4:	10000006 	andne	r0, r0, r6
    8bb8:	0006ed01 	andeq	lr, r6, r1, lsl #26
    8bbc:	06801100 	streq	r1, [r0], r0, lsl #2
    8bc0:	0a000000 	beq	8bc8 <DISABLE_IRQ+0x8b48>
    8bc4:	0006e104 	andeq	lr, r6, r4, lsl #2
    8bc8:	0aa70400 	beq	fe9c9bd0 <rEINTPEND+0xa89c9b28>
    8bcc:	260a0000 	strcs	r0, [sl], -r0
    8bd0:	00000649 	andeq	r0, r0, r9, asr #12
    8bd4:	001bc804 	andseq	ip, fp, r4, lsl #16
    8bd8:	09290a00 	stmdbeq	r9!, {r9, fp}
    8bdc:	0a000007 	beq	8c00 <DISABLE_IRQ+0x8b80>
    8be0:	00070f04 	andeq	r0, r7, r4, lsl #30
    8be4:	1b011000 	blne	4cbec <DISABLE_IRQ+0x4cb6c>
    8be8:	11000007 	tstne	r0, r7
    8bec:	0000071b 	andeq	r0, r0, fp, lsl r7
    8bf0:	f3040a00 	vpmax.u8	d0, d4, d0
    8bf4:	0a000006 	beq	8c14 <DISABLE_IRQ+0x8b94>
    8bf8:	00068604 	andeq	r8, r6, r4, lsl #12
    8bfc:	0e601200 	cdpeq	2, 6, cr1, cr0, cr0, {0}
    8c00:	38020000 	stmdacc	r2, {}
    8c04:	00003301 	andeq	r3, r0, r1, lsl #6
    8c08:	07440300 	strbeq	r0, [r4, -r0, lsl #6]
    8c0c:	44130000 	ldrmi	r0, [r3]
    8c10:	02000001 	andeq	r0, r0, #1
    8c14:	0005ba38 	andeq	fp, r5, r8, lsr sl
    8c18:	47140000 	ldrmi	r0, [r4, -r0]
    8c1c:	02000022 	andeq	r0, r0, #34	; 0x22
    8c20:	5d03012f 	stfpls	f0, [r3, #-188]	; 0xffffff44
    8c24:	13000007 	movwne	r0, #7
    8c28:	00000da3 	andeq	r0, r0, r3, lsr #27
    8c2c:	05ba2f02 	ldreq	r2, [sl, #3842]!	; 0xf02
    8c30:	15000000 	strne	r0, [r0]
    8c34:	001ba801 	andseq	sl, fp, r1, lsl #16
    8c38:	01a10100 	undefined instruction 0x01a10100
    8c3c:	00005001 	andeq	r5, r0, r1
    8c40:	00451000 	subeq	r1, r5, r0
    8c44:	00462830 	subeq	r2, r6, r0, lsr r8
    8c48:	002f8b30 	eoreq	r8, pc, r0, lsr fp
    8c4c:	0007b400 	andeq	fp, r7, r0, lsl #8
    8c50:	1b901600 	blne	fe40e458 <rEINTPEND+0xa840e3b0>
    8c54:	a1010000 	tstge	r1, r0
    8c58:	00071b01 	andeq	r1, r7, r1, lsl #22
    8c5c:	002faa00 	eoreq	sl, pc, r0, lsl #20
    8c60:	1b9e1600 	blne	fe78e468 <rEINTPEND+0xa878e3c0>
    8c64:	a1010000 	tstge	r1, r0
    8c68:	00006901 	andeq	r6, r0, r1, lsl #18
    8c6c:	002fd300 	eoreq	sp, pc, r0, lsl #6
    8c70:	0d9d1700 	ldceq	7, cr1, [sp]
    8c74:	a3010000 	movwge	r0, #4096	; 0x1000
    8c78:	0005ba01 	andeq	fp, r5, r1, lsl #20
    8c7c:	01181700 	tsteq	r8, r0, lsl #14
    8c80:	a5010000 	strge	r0, [r1]
    8c84:	00009b01 	andeq	r9, r0, r1, lsl #22
    8c88:	01150000 	tsteq	r5, r0
    8c8c:	00001b3b 	andeq	r1, r0, fp, lsr fp
    8c90:	01011101 	tsteq	r1, r1, lsl #2
    8c94:	00000050 	andeq	r0, r0, r0, asr r0
    8c98:	30004628 	andcc	r4, r0, r8, lsr #12
    8c9c:	300046f0 	strdcc	r4, [r0], -r0
    8ca0:	00002ff1 	strdeq	r2, [r0], -r1
    8ca4:	000007ff 	strdeq	r0, [r0], -pc
    8ca8:	001b9016 	andseq	r9, fp, r6, lsl r0
    8cac:	01110100 	tsteq	r1, r0, lsl #2
    8cb0:	0000071b 	andeq	r0, r0, fp, lsl r7
    8cb4:	00003010 	andeq	r3, r0, r0, lsl r0
    8cb8:	00199f16 	andseq	r9, r9, r6, lsl pc
    8cbc:	01110100 	tsteq	r1, r0, lsl #2
    8cc0:	000006fe 	strdeq	r0, [r0], -lr
    8cc4:	0000302e 	andeq	r3, r0, lr, lsr #32
    8cc8:	00011817 	andeq	r1, r1, r7, lsl r8
    8ccc:	01130100 	tsteq	r3, r0, lsl #2
    8cd0:	0000009b 	muleq	r0, fp, r0
    8cd4:	66011500 	strvs	r1, [r1], -r0, lsl #10
    8cd8:	0100001b 	tsteq	r0, fp, lsl r0
    8cdc:	500101ed 	andpl	r0, r1, sp, ror #3
    8ce0:	f0000000 	undefined instruction 0xf0000000
    8ce4:	ec300046 	ldc	0, cr0, [r0], #-280	; 0xfffffee8
    8ce8:	4c300047 	ldcmi	0, cr0, [r0], #-284	; 0xfffffee4
    8cec:	5c000030 	stcpl	0, cr0, [r0], {48}	; 0x30
    8cf0:	16000008 	strne	r0, [r0], -r8
    8cf4:	00001b90 	muleq	r0, r0, fp
    8cf8:	1b01ed01 	blne	84104 <DISABLE_IRQ+0x84084>
    8cfc:	6b000007 	blvs	8d20 <DISABLE_IRQ+0x8ca0>
    8d00:	17000030 	smladxne	r0, r0, r0, r0
    8d04:	00000d9d 	muleq	r0, sp, sp
    8d08:	ba01ef01 	blt	84914 <DISABLE_IRQ+0x84894>
    8d0c:	17000005 	strne	r0, [r0, -r5]
    8d10:	00000118 	andeq	r0, r0, r8, lsl r1
    8d14:	9b01f101 	blls	85120 <DISABLE_IRQ+0x850a0>
    8d18:	18000000 	stmdane	r0, {}
    8d1c:	00000727 	andeq	r0, r0, r7, lsr #14
    8d20:	30004774 	andcc	r4, r0, r4, ror r7
    8d24:	00000388 	andeq	r0, r0, r8, lsl #7
    8d28:	19020d01 	stmdbne	r2, {r0, r8, sl, fp}
    8d2c:	00000738 	andeq	r0, r0, r8, lsr r7
    8d30:	01150000 	tsteq	r5, r0
    8d34:	00001b29 	andeq	r1, r0, r9, lsr #22
    8d38:	01014e01 	tsteq	r1, r1, lsl #28
    8d3c:	00000050 	andeq	r0, r0, r0, asr r0
    8d40:	300047ec 	andcc	r4, r0, ip, ror #15
    8d44:	30004998 	mulcc	r0, r8, r9
    8d48:	00003089 	andeq	r3, r0, r9, lsl #1
    8d4c:	000008b7 	undefined instruction 0x000008b7
    8d50:	001b9016 	andseq	r9, fp, r6, lsl r0
    8d54:	014e0100 	cmpeq	lr, r0, lsl #2
    8d58:	0000071b 	andeq	r0, r0, fp, lsl r7
    8d5c:	000030a8 	andeq	r3, r0, r8, lsr #1
    8d60:	000dc116 	andeq	ip, sp, r6, lsl r1
    8d64:	014e0100 	cmpeq	lr, r0, lsl #2
    8d68:	000000a6 	andeq	r0, r0, r6, lsr #1
    8d6c:	000030c6 	andeq	r3, r0, r6, asr #1
    8d70:	000ecc1a 	andeq	ip, lr, sl, lsl ip
    8d74:	01510100 	cmpeq	r1, r0, lsl #2
    8d78:	00000050 	andeq	r0, r0, r0, asr r0
    8d7c:	000030e4 	andeq	r3, r0, r4, ror #1
    8d80:	00011817 	andeq	r1, r1, r7, lsl r8
    8d84:	01530100 	cmpeq	r3, r0, lsl #2
    8d88:	0000009b 	muleq	r0, fp, r0
    8d8c:	31011b00 	tstcc	r1, r0, lsl #22
    8d90:	01000021 	tsteq	r0, r1, lsr #32
    8d94:	0050015c 	subseq	r0, r0, ip, asr r1
    8d98:	49980000 	ldmibmi	r8, {}
    8d9c:	4b4c3000 	blmi	1314da4 <MEM_SIZE+0xb14da4>
    8da0:	31443000 	cmpcc	r4, r0
    8da4:	09370000 	ldmdbeq	r7!, {}
    8da8:	901c0000 	andsls	r0, ip, r0
    8dac:	0100001b 	tsteq	r0, fp, lsl r0
    8db0:	00071b5c 	andeq	r1, r7, ip, asr fp
    8db4:	00316300 	eorseq	r6, r1, r0, lsl #6
    8db8:	19921c00 	ldmibne	r2, {sl, fp, ip}
    8dbc:	5c010000 	stcpl	0, cr0, [r1], {0}
    8dc0:	00000045 	andeq	r0, r0, r5, asr #32
    8dc4:	00003197 	muleq	r0, r7, r1
    8dc8:	000d9d1d 	andeq	r9, sp, sp, lsl sp
    8dcc:	ba5e0100 	blt	17891d4 <MEM_SIZE+0xf891d4>
    8dd0:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    8dd4:	00000118 	andeq	r0, r0, r8, lsl r1
    8dd8:	009b6001 	addseq	r6, fp, r1
    8ddc:	271e0000 	ldrcs	r0, [lr, -r0]
    8de0:	f4000007 	vst4.8	{d0-d3}, [r0], r7
    8de4:	f8300049 	undefined instruction 0xf8300049
    8de8:	01300049 	teqeq	r0, r9, asr #32
    8dec:	0009216d 	andeq	r2, r9, sp, ror #2
    8df0:	07381900 	ldreq	r1, [r8, -r0, lsl #18]!
    8df4:	1f000000 	svcne	0x00000000
    8df8:	00000727 	andeq	r0, r0, r7, lsr #14
    8dfc:	30004a28 	andcc	r4, r0, r8, lsr #20
    8e00:	30004a2c 	andcc	r4, r0, ip, lsr #20
    8e04:	38198801 	ldmdacc	r9, {r0, fp, pc}
    8e08:	00000007 	andeq	r0, r0, r7
    8e0c:	dd011b00 	vstrle	d1, [r1]
    8e10:	0100001b 	tsteq	r0, fp, lsl r0
    8e14:	005001e2 	subseq	r0, r0, r2, ror #3
    8e18:	4b4c0000 	blmi	1308e20 <MEM_SIZE+0xb08e20>
    8e1c:	4bac3000 	blmi	feb14e24 <rEINTPEND+0xa8b14d7c>
    8e20:	31b53000 	undefined instruction 0x31b53000
    8e24:	09640000 	stmdbeq	r4!, {}^
    8e28:	901c0000 	andsls	r0, ip, r0
    8e2c:	0100001b 	tsteq	r0, fp, lsl r0
    8e30:	00071be2 	andeq	r1, r7, r2, ror #23
    8e34:	0031e000 	eorseq	lr, r1, r0
    8e38:	011b0000 	tsteq	fp, r0
    8e3c:	00001b54 	andeq	r1, r0, r4, asr fp
    8e40:	5001b901 	andpl	fp, r1, r1, lsl #18
    8e44:	ac000000 	stcge	0, cr0, [r0], {0}
    8e48:	2430004b 	ldrtcs	r0, [r0], #-75	; 0x4b
    8e4c:	1430004c 	ldrtne	r0, [r0], #-76	; 0x4c
    8e50:	91000032 	tstls	r0, r2, lsr r0
    8e54:	1c000009 	stcne	0, cr0, [r0], {9}
    8e58:	00001b90 	muleq	r0, r0, fp
    8e5c:	071bb901 	ldreq	fp, [fp, -r1, lsl #18]
    8e60:	323f0000 	eorscc	r0, pc, #0
    8e64:	1b000000 	blne	8e6c <DISABLE_IRQ+0x8dec>
    8e68:	001b7b01 	andseq	r7, fp, r1, lsl #22
    8e6c:	01350100 	teqeq	r5, r0, lsl #2
    8e70:	00000050 	andeq	r0, r0, r0, asr r0
    8e74:	30004c24 	andcc	r4, r0, r4, lsr #24
    8e78:	30004c84 	andcc	r4, r0, r4, lsl #25
    8e7c:	0000325d 	andeq	r3, r0, sp, asr r2
    8e80:	000009f1 	strdeq	r0, [r0], -r1
    8e84:	001b901c 	andseq	r9, fp, ip, lsl r0
    8e88:	1b350100 	blne	d49290 <MEM_SIZE+0x549290>
    8e8c:	7c000007 	stcvc	0, cr0, [r0], {7}
    8e90:	1c000032 	stcne	0, cr0, [r0], {50}	; 0x32
    8e94:	0000046a 	andeq	r0, r0, sl, ror #8
    8e98:	038e3501 	orreq	r3, lr, #4194304	; 0x400000
    8e9c:	32a50000 	adccc	r0, r5, #0
    8ea0:	ba1c0000 	blt	708ea8 <DISABLE_IRQ+0x708e28>
    8ea4:	0100001b 	tsteq	r0, fp, lsl r0
    8ea8:	00006935 	andeq	r6, r0, r5, lsr r9
    8eac:	0032c300 	eorseq	ip, r2, r0, lsl #6
    8eb0:	07441f00 	strbeq	r1, [r4, -r0, lsl #30]
    8eb4:	4c600000 	stclmi	0, cr0, [r0]
    8eb8:	4c683000 	stclmi	0, cr3, [r8]
    8ebc:	49013000 	stmdbmi	r1, {ip, sp}
    8ec0:	00075119 	andeq	r5, r7, r9, lsl r1
    8ec4:	20000000 	andcs	r0, r0, r0
    8ec8:	0000038f 	andeq	r0, r0, pc, lsl #7
    8ecc:	07214a0b 	streq	r4, [r1, -fp, lsl #20]!
    8ed0:	01010000 	tsteq	r1, r0
    8ed4:	000e5020 	andeq	r5, lr, r0, lsr #32
    8ed8:	45510b00 	ldrbmi	r0, [r1, #-2816]	; 0xb00
    8edc:	01000000 	tsteq	r0, r0
    8ee0:	0d852001 	stceq	0, cr2, [r5, #4]
    8ee4:	520b0000 	andpl	r0, fp, #0
    8ee8:	00000045 	andeq	r0, r0, r5, asr #32
    8eec:	5d000101 	stfpls	f0, [r0, #-4]
    8ef0:	02000000 	andeq	r0, r0, #0
    8ef4:	001c8600 	andseq	r8, ip, r0, lsl #12
    8ef8:	4d010400 	cfstrsmi	mvf0, [r1]
    8efc:	01000000 	tsteq	r0, r0
    8f00:	00001bfd 	strdeq	r1, [r0], -sp
    8f04:	00000063 	andeq	r0, r0, r3, rrx
    8f08:	30004c84 	andcc	r4, r0, r4, lsl #25
    8f0c:	30004c84 	andcc	r4, r0, r4, lsl #25
    8f10:	00001c79 	andeq	r1, r0, r9, ror ip
    8f14:	a0060102 	andge	r0, r6, r2, lsl #2
    8f18:	02000000 	andeq	r0, r0, #0
    8f1c:	009e0801 	addseq	r0, lr, r1, lsl #16
    8f20:	02020000 	andeq	r0, r2, #0
    8f24:	00008b07 	andeq	r8, r0, r7, lsl #22
    8f28:	05020200 	streq	r0, [r2, #-512]	; 0x200
    8f2c:	00000059 	andeq	r0, r0, r9, asr r0
    8f30:	37070402 	strcc	r0, [r7, -r2, lsl #8]
    8f34:	03000000 	movweq	r0, #0
    8f38:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    8f3c:	08020074 	stmdaeq	r2, {r2, r4, r5, r6}
    8f40:	00000005 	andeq	r0, r0, r5
    8f44:	07080200 	streq	r0, [r8, -r0, lsl #4]
    8f48:	0000002d 	andeq	r0, r0, sp, lsr #32
    8f4c:	00070404 	andeq	r0, r7, r4, lsl #8
    8f50:	0000097f 	andeq	r0, r0, pc, ror r9
    8f54:	1cb90002 	ldcne	0, cr0, [r9], #8
    8f58:	01040000 	tsteq	r4, r0
    8f5c:	0000004d 	andeq	r0, r0, sp, asr #32
    8f60:	001c9b01 	andseq	r9, ip, r1, lsl #22
    8f64:	00006300 	andeq	r6, r0, r0, lsl #6
    8f68:	004c8400 	subeq	r8, ip, r0, lsl #8
    8f6c:	004f7c30 	subeq	r7, pc, r0, lsr ip
    8f70:	001c9630 	andseq	r9, ip, r0, lsr r6
    8f74:	05640200 	strbeq	r0, [r4, #-512]!	; 0x200
    8f78:	21020000 	tstcs	r2, r0
    8f7c:	a0060103 	andge	r0, r6, r3, lsl #2
    8f80:	03000000 	movweq	r0, #0
    8f84:	009e0801 	addseq	r0, lr, r1, lsl #16
    8f88:	f7040000 	undefined instruction 0xf7040000
    8f8c:	02000004 	andeq	r0, r0, #4
    8f90:	00003324 	andeq	r3, r0, r4, lsr #6
    8f94:	0afb0400 	beq	ffec9f9c <rEINTPEND+0xa9ec9ef4>
    8f98:	26020000 	strcs	r0, [r2], -r0
    8f9c:	00000050 	andeq	r0, r0, r0, asr r0
    8fa0:	8b070203 	blhi	1c97b4 <DISABLE_IRQ+0x1c9734>
    8fa4:	03000000 	movweq	r0, #0
    8fa8:	00590502 	subseq	r0, r9, r2, lsl #10
    8fac:	38040000 	stmdacc	r4, {}
    8fb0:	02000003 	andeq	r0, r0, #3
    8fb4:	00006928 	andeq	r6, r0, r8, lsr #18
    8fb8:	07040300 	streq	r0, [r4, -r0, lsl #6]
    8fbc:	00000037 	andeq	r0, r0, r7, lsr r0
    8fc0:	00115a04 	andseq	r5, r1, r4, lsl #20
    8fc4:	7b290200 	blvc	a497cc <MEM_SIZE+0x2497cc>
    8fc8:	05000000 	streq	r0, [r0]
    8fcc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    8fd0:	08030074 	stmdaeq	r3, {r2, r4, r5, r6}
    8fd4:	00000005 	andeq	r0, r0, r5
    8fd8:	07080300 	streq	r0, [r8, -r0, lsl #6]
    8fdc:	0000002d 	andeq	r0, r0, sp, lsr #32
    8fe0:	00039f04 	andeq	r9, r3, r4, lsl #30
    8fe4:	692d0200 	pushvs	{r9}
    8fe8:	04000000 	streq	r0, [r0]
    8fec:	00000132 	andeq	r0, r0, r2, lsr r1
    8ff0:	00692203 	rsbeq	r2, r9, r3, lsl #4
    8ff4:	27040000 	strcs	r0, [r4, -r0]
    8ff8:	0400000a 	streq	r0, [r0], #-10
    8ffc:	00005e2a 	andeq	r5, r0, sl, lsr #28
    9000:	08290400 	stmdaeq	r9!, {sl}
    9004:	2c040000 	stccs	0, cr0, [r4], {0}
    9008:	0000005e 	andeq	r0, r0, lr, asr r0
    900c:	43050406 	movwmi	r0, #21510	; 0x5406
    9010:	00000261 	andeq	r0, r0, r1, ror #4
    9014:	000bb507 	andeq	fp, fp, r7, lsl #10
    9018:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    901c:	0100000b 	tsteq	r0, fp
    9020:	0003aa07 	andeq	sl, r3, r7, lsl #20
    9024:	21070200 	tstcs	r7, r0, lsl #4
    9028:	03000009 	movweq	r0, #9
    902c:	00063507 	andeq	r3, r6, r7, lsl #10
    9030:	35070400 	strcc	r0, [r7, #-1024]	; 0x400
    9034:	0500000a 	streq	r0, [r0, #-10]
    9038:	000ad407 	andeq	sp, sl, r7, lsl #8
    903c:	ac070600 	stcge	6, cr0, [r7], {0}
    9040:	07000002 	streq	r0, [r0, -r2]
    9044:	0006e307 	andeq	lr, r6, r7, lsl #6
    9048:	ee070800 	cdp	8, 0, cr0, cr7, cr0, {0}
    904c:	09000001 	stmdbeq	r0, {r0}
    9050:	0008cd07 	andeq	ip, r8, r7, lsl #26
    9054:	a1070a00 	tstge	r7, r0, lsl #20
    9058:	0b00000b 	bleq	908c <DISABLE_IRQ+0x900c>
    905c:	00048007 	andeq	r8, r4, r7
    9060:	bc070c00 	stclt	12, cr0, [r7], {0}
    9064:	0d000008 	stceq	0, cr0, [r0, #-32]	; 0xffffffe0
    9068:	00070507 	andeq	r0, r7, r7, lsl #10
    906c:	d0070e00 	andle	r0, r7, r0, lsl #28
    9070:	0f000006 	svceq	0x00000006
    9074:	00034007 	andeq	r4, r3, r7
    9078:	6a071000 	bvs	1cd080 <DISABLE_IRQ+0x1cd000>
    907c:	11000009 	tstne	r0, r9
    9080:	000b3907 	andeq	r3, fp, r7, lsl #18
    9084:	0e071200 	cdpeq	2, 0, cr1, cr7, cr0, {0}
    9088:	13000006 	movwne	r0, #6
    908c:	0002be07 	andeq	fp, r2, r7, lsl #28
    9090:	90071400 	andls	r1, r7, r0, lsl #8
    9094:	15000006 	strne	r0, [r0, #-6]
    9098:	0008e507 	andeq	lr, r8, r7, lsl #10
    909c:	d0071600 	andle	r1, r7, r0, lsl #12
    90a0:	17000002 	strne	r0, [r0, -r2]
    90a4:	00090a07 	andeq	r0, r9, r7, lsl #20
    90a8:	15071800 	strne	r1, [r7, #-2048]	; 0x800
    90ac:	19000002 	stmdbne	r0, {r1}
    90b0:	00077607 	andeq	r7, r7, r7, lsl #12
    90b4:	f0071a00 	undefined instruction 0xf0071a00
    90b8:	1b000002 	blne	90c8 <DISABLE_IRQ+0x9048>
    90bc:	000bc107 	andeq	ip, fp, r7, lsl #2
    90c0:	05071c00 	streq	r1, [r7, #-3072]	; 0xc00
    90c4:	1d000004 	stcne	0, cr0, [r0, #-16]
    90c8:	00081007 	andeq	r1, r8, r7
    90cc:	32071e00 	andcc	r1, r7, #0
    90d0:	1f000009 	svcne	0x00000009
    90d4:	00026707 	andeq	r6, r2, r7, lsl #14
    90d8:	b1072000 	tstlt	r7, r0
    90dc:	21000005 	tstcs	r0, r5
    90e0:	00064407 	andeq	r4, r6, r7, lsl #8
    90e4:	ff072200 	undefined instruction 0xff072200
    90e8:	23000007 	movwcs	r0, #7
    90ec:	0003ba07 	andeq	fp, r3, r7, lsl #20
    90f0:	99072400 	stmdbls	r7, {sl, sp}
    90f4:	25000008 	strcs	r0, [r0, #-8]
    90f8:	000b4b07 	andeq	r4, fp, r7, lsl #22
    90fc:	83072600 	movwhi	r2, #30208	; 0x7600
    9100:	27000008 	strcs	r0, [r0, -r8]
    9104:	00023e07 	andeq	r3, r2, r7, lsl #28
    9108:	b7072800 	strlt	r2, [r7, -r0, lsl #16]
    910c:	29000009 	stmdbcs	r0, {r0, r3}
    9110:	000ae507 	andeq	lr, sl, r7, lsl #10
    9114:	87072a00 	strhi	r2, [r7, -r0, lsl #20]
    9118:	2b00000a 	blcs	9148 <DISABLE_IRQ+0x90c8>
    911c:	00094807 	andeq	r4, r9, r7, lsl #16
    9120:	f5072c00 	undefined instruction 0xf5072c00
    9124:	2d000009 	stccs	0, cr0, [r0, #-36]	; 0xffffffdc
    9128:	0009c707 	andeq	ip, r9, r7, lsl #14
    912c:	cf072e00 	svcgt	0x00072e00
    9130:	2f000003 	svccs	0x00000003
    9134:	0006a707 	andeq	sl, r6, r7, lsl #14
    9138:	13073000 	movwne	r3, #28672	; 0x7000
    913c:	31000004 	tstcc	r0, r4
    9140:	00098907 	andeq	r8, r9, r7, lsl #18
    9144:	52073200 	andpl	r3, r7, #0
    9148:	33000003 	movwcc	r0, #3
    914c:	0005fd07 	andeq	pc, r5, r7, lsl #26
    9150:	d5073400 	strle	r3, [r7, #-1024]	; 0x400
    9154:	3500000b 	strcc	r0, [r0, #-11]
    9158:	0004e107 	andeq	lr, r4, r7, lsl #2
    915c:	a8073600 	stmdage	r7, {r9, sl, ip, sp}
    9160:	37000007 	strcc	r0, [r0, -r7]
    9164:	00079207 	andeq	r9, r7, r7, lsl #4
    9168:	16073800 	strne	r3, [r7], -r0, lsl #16
    916c:	39000003 	stmdbcc	r0, {r0, r1}
    9170:	0006f307 	andeq	pc, r6, r7, lsl #6
    9174:	e2073a00 	and	r3, r7, #0
    9178:	3b000003 	blcc	918c <DISABLE_IRQ+0x910c>
    917c:	0006bc07 	andeq	fp, r6, r7, lsl #24
    9180:	0f073c00 	svceq	0x00073c00
    9184:	3d000005 	stccc	0, cr0, [r0, #-20]	; 0xffffffec
    9188:	00056d07 	andeq	r6, r5, r7, lsl #26
    918c:	cb073e00 	blgt	1d8994 <DISABLE_IRQ+0x1d8914>
    9190:	3f000004 	svccc	0x00000004
    9194:	00036e07 	andeq	r6, r3, r7, lsl #28
    9198:	0700c000 	streq	ip, [r0, -r0]
    919c:	0000058b 	andeq	r0, r0, fp, lsl #11
    91a0:	370700c1 	strcc	r0, [r7, -r1, asr #1]
    91a4:	c2000008 	andgt	r0, r0, #8
    91a8:	06740700 	ldrbteq	r0, [r4], -r0, lsl #14
    91ac:	00c30000 	sbceq	r0, r3, r0
    91b0:	05040600 	streq	r0, [r4, #-1536]	; 0x600
    91b4:	00028291 	muleq	r2, r1, r2
    91b8:	161d0700 	ldrne	r0, [sp], -r0, lsl #14
    91bc:	07000000 	streq	r0, [r0, -r0]
    91c0:	000016aa 	andeq	r1, r0, sl, lsr #13
    91c4:	16390701 	ldrtne	r0, [r9], -r1, lsl #14
    91c8:	07020000 	streq	r0, [r2, -r0]
    91cc:	00001647 	andeq	r1, r0, r7, asr #12
    91d0:	09080003 	stmdbeq	r8, {r0, r1}
    91d4:	0800000c 	stmdaeq	r0, {r2, r3}
    91d8:	02ab2306 	adceq	r2, fp, #402653184	; 0x18000000
    91dc:	11090000 	tstne	r9, r0
    91e0:	06000003 	streq	r0, [r0], -r3
    91e4:	0002ab24 	andeq	sl, r2, r4, lsr #22
    91e8:	00230200 	eoreq	r0, r3, r0, lsl #4
    91ec:	00028109 	andeq	r8, r2, r9, lsl #2
    91f0:	ab250600 	blge	94a9f8 <MEM_SIZE+0x14a9f8>
    91f4:	02000002 	andeq	r0, r0, #2
    91f8:	0a000423 	beq	a28c <DISABLE_IRQ+0xa20c>
    91fc:	00028204 	andeq	r8, r2, r4, lsl #4
    9200:	0c090400 	cfstrseq	mvf0, [r9], {0}
    9204:	26060000 	strcs	r0, [r6], -r0
    9208:	00000282 	andeq	r0, r0, r2, lsl #5
    920c:	00065c08 	andeq	r5, r6, r8, lsl #24
    9210:	2f071000 	svccs	0x00071000
    9214:	00000301 	andeq	r0, r0, r1, lsl #6
    9218:	000ac909 	andeq	ip, sl, r9, lsl #18
    921c:	b1310700 	teqlt	r1, r0, lsl #14
    9220:	02000002 	andeq	r0, r0, #2
    9224:	e0090023 	and	r0, r9, r3, lsr #32
    9228:	07000008 	streq	r0, [r0, -r8]
    922c:	00030132 	andeq	r0, r3, r2, lsr r1
    9230:	08230200 	stmdaeq	r3!, {r9}
    9234:	00090009 	andeq	r0, r9, r9
    9238:	3a330700 	bcc	ccae40 <MEM_SIZE+0x4cae40>
    923c:	02000000 	andeq	r0, r0, #0
    9240:	27090c23 	strcs	r0, [r9, -r3, lsr #24]
    9244:	07000004 	streq	r0, [r0, -r4]
    9248:	00003a34 	andeq	r3, r0, r4, lsr sl
    924c:	0d230200 	sfmeq	f0, 4, [r3]	; (stceq 2, cr0, [r3])
    9250:	3a040a00 	bcc	10ba58 <DISABLE_IRQ+0x10b9d8>
    9254:	04000000 	streq	r0, [r0]
    9258:	0000065c 	andeq	r0, r0, ip, asr r6
    925c:	02bc3607 	adcseq	r3, ip, #7340032	; 0x700000
    9260:	9f080000 	svcls	0x00080000
    9264:	6c000009 	stcvs	0, cr0, [r0], {9}
    9268:	04a73a07 	strteq	r3, [r7], #2567	; 0xa07
    926c:	81090000 	tsthi	r9, r0
    9270:	07000014 	smladeq	r0, r4, r0, r0
    9274:	0004a73b 	andeq	sl, r4, fp, lsr r7
    9278:	00230200 	eoreq	r0, r3, r0, lsl #4
    927c:	00044d09 	andeq	r4, r4, r9, lsl #26
    9280:	b1410700 	cmplt	r1, r0, lsl #14
    9284:	02000002 	andeq	r0, r0, #2
    9288:	52090423 	andpl	r0, r9, #587202560	; 0x23000000
    928c:	07000005 	streq	r0, [r0, -r5]
    9290:	0004ad45 	andeq	sl, r4, r5, asr #26
    9294:	0c230200 	sfmeq	f0, 4, [r3]	; (stceq 2, cr0, [r3])
    9298:	001aef09 	andseq	lr, sl, r9, lsl #30
    929c:	5e4b0700 	cdppl	7, 4, cr0, cr11, cr0, {0}
    92a0:	02000000 	andeq	r0, r0, #0
    92a4:	78091023 	stmdavc	r9, {r0, r1, r5, ip}
    92a8:	07000008 	streq	r0, [r0, -r8]
    92ac:	00005e4c 	andeq	r5, r0, ip, asr #28
    92b0:	14230200 	strtne	r0, [r3], #-512	; 0x200
    92b4:	001d3509 	andseq	r3, sp, r9, lsl #10
    92b8:	3a4d0700 	bcc	134aec0 <MEM_SIZE+0xb4aec0>
    92bc:	02000000 	andeq	r0, r0, #0
    92c0:	5a091823 	bpl	24f354 <DISABLE_IRQ+0x24f2d4>
    92c4:	0700001e 	smladeq	r0, lr, r0, r0
    92c8:	00003a51 	andeq	r3, r0, r1, asr sl
    92cc:	19230200 	stmdbne	r3!, {r9}
    92d0:	00036409 	andeq	r6, r3, r9, lsl #8
    92d4:	3a530700 	bcc	14caedc <MEM_SIZE+0xccaedc>
    92d8:	02000000 	andeq	r0, r0, #0
    92dc:	3f091a23 	svccc	0x00091a23
    92e0:	07000004 	streq	r0, [r0, -r4]
    92e4:	00003a56 	andeq	r3, r0, r6, asr sl
    92e8:	1b230200 	blne	8c9af0 <MEM_SIZE+0xc9af0>
    92ec:	000bad09 	andeq	sl, fp, r9, lsl #26
    92f0:	215a0700 	cmpcs	sl, r0, lsl #14
    92f4:	02000005 	andeq	r0, r0, #5
    92f8:	f8091c23 	undefined instruction 0xf8091c23
    92fc:	0700000b 	streq	r0, [r0, -fp]
    9300:	0002b15f 	andeq	fp, r2, pc, asr r1
    9304:	20230200 	eorcs	r0, r3, r0, lsl #4
    9308:	000b0309 	andeq	r0, fp, r9, lsl #6
    930c:	5e630700 	cdppl	7, 6, cr0, cr3, cr0, {0}
    9310:	02000000 	andeq	r0, r0, #0
    9314:	25092823 	strcs	r2, [r9, #-2083]	; 0x823
    9318:	07000006 	streq	r0, [r0, -r6]
    931c:	00052765 	andeq	r2, r5, r5, ror #14
    9320:	2c230200 	sfmcs	f0, 4, [r3]	; (stccs 2, cr0, [r3])
    9324:	00086e09 	andeq	r6, r8, r9, lsl #28
    9328:	b1660700 	cmnlt	r6, r0, lsl #14
    932c:	02000002 	andeq	r0, r0, #2
    9330:	0e093023 	cdpeq	0, 0, cr3, cr9, cr3, {1}
    9334:	0700000c 	streq	r0, [r0, -ip]
    9338:	0000a668 	andeq	sl, r0, r8, ror #12
    933c:	38230200 	stmdacc	r3!, {r9}
    9340:	0007f309 	andeq	pc, r7, r9, lsl #6
    9344:	a6690700 	strbtge	r0, [r9], -r0, lsl #14
    9348:	02000000 	andeq	r0, r0, #0
    934c:	a7093c23 	strge	r3, [r9, -r3, lsr #24]
    9350:	07000005 	streq	r0, [r0, -r5]
    9354:	00052d6b 	andeq	r2, r5, fp, ror #26
    9358:	40230200 	eormi	r0, r3, r0, lsl #4
    935c:	67736d0b 	ldrbvs	r6, [r3, -fp, lsl #26]!
    9360:	a76d0700 	strbge	r0, [sp, -r0, lsl #14]!
    9364:	02000004 	andeq	r0, r0, #4
    9368:	30094423 	andcc	r4, r9, r3, lsr #8
    936c:	07000016 	smladeq	r0, r6, r0, r0
    9370:	0000b170 	andeq	fp, r0, r0, ror r1
    9374:	48230200 	stmdami	r3!, {r9}
    9378:	0008db09 	andeq	sp, r8, r9, lsl #22
    937c:	01730700 	cmneq	r3, r0, lsl #14
    9380:	02000003 	andeq	r0, r0, #3
    9384:	ac094c23 	stcge	12, cr4, [r9], {35}	; 0x23
    9388:	07000009 	streq	r0, [r0, -r9]
    938c:	00003a75 	andeq	r3, r0, r5, ror sl
    9390:	50230200 	eorpl	r0, r3, r0, lsl #4
    9394:	0007e609 	andeq	lr, r7, r9, lsl #12
    9398:	3a760700 	bcc	1d8afa0 <MEM_SIZE+0x158afa0>
    939c:	02000000 	andeq	r0, r0, #0
    93a0:	3d095123 	stfccs	f5, [r9, #-140]	; 0xffffff74
    93a4:	07000005 	streq	r0, [r0, -r5]
    93a8:	00053379 	andeq	r3, r5, r9, ror r3
    93ac:	54230200 	strtpl	r0, [r3], #-512	; 0x200
    93b0:	000ab509 	andeq	fp, sl, r9, lsl #10
    93b4:	b67c0700 	ldrbtlt	r0, [ip], -r0, lsl #14
    93b8:	02000005 	andeq	r0, r0, #5
    93bc:	2b095823 	blcs	25f450 <DISABLE_IRQ+0x25f3d0>
    93c0:	07000002 	streq	r0, [r0, -r2]
    93c4:	0005f380 	andeq	pc, r5, r0, lsl #7
    93c8:	5c230200 	sfmpl	f0, 4, [r3]	; (stcpl 2, cr0, [r3])
    93cc:	0004ad09 	andeq	sl, r4, r9, lsl #26
    93d0:	3a840700 	bcc	fe10afd8 <rEINTPEND+0xa810af30>
    93d4:	02000000 	andeq	r0, r0, #0
    93d8:	55096023 	strpl	r6, [r9, #-35]	; 0x23
    93dc:	07000002 	streq	r0, [r0, -r2]
    93e0:	00005e85 	andeq	r5, r0, r5, lsl #29
    93e4:	64230200 	strtvs	r0, [r3], #-512	; 0x200
    93e8:	00075a09 	andeq	r5, r7, r9, lsl #20
    93ec:	a7860700 	strge	r0, [r6, r0, lsl #14]
    93f0:	02000004 	andeq	r0, r0, #4
    93f4:	0a006823 	beq	23488 <DISABLE_IRQ+0x23408>
    93f8:	00002504 	andeq	r2, r0, r4, lsl #10
    93fc:	04a70c00 	strteq	r0, [r7], #3072	; 0xc00
    9400:	04bd0000 	ldrteq	r0, [sp]
    9404:	bd0d0000 	stclt	0, cr0, [sp]
    9408:	00000004 	andeq	r0, r0, r4
    940c:	07040e00 	streq	r0, [r4, -r0, lsl #28]
    9410:	000b2f08 	andeq	r2, fp, r8, lsl #30
    9414:	5a071c00 	bpl	1d041c <DISABLE_IRQ+0x1d039c>
    9418:	00000521 	andeq	r0, r0, r1, lsr #10
    941c:	00053609 	andeq	r3, r5, r9, lsl #12
    9420:	07270800 	streq	r0, [r7, -r0, lsl #16]!
    9424:	02000003 	andeq	r0, r0, #3
    9428:	67090023 	strvs	r0, [r9, -r3, lsr #32]
    942c:	08000008 	stmdaeq	r0, {r3}
    9430:	0006d02a 	andeq	sp, r6, sl, lsr #32
    9434:	10230200 	eorne	r0, r3, r0, lsl #4
    9438:	000bad09 	andeq	sl, fp, r9, lsl #26
    943c:	212c0800 	teqcs	ip, r0, lsl #16
    9440:	02000005 	andeq	r0, r0, #5
    9444:	f6091423 	undefined instruction 0xf6091423
    9448:	08000005 	stmdaeq	r0, {r0, r2}
    944c:	00003a2e 	andeq	r3, r0, lr, lsr #20
    9450:	18230200 	stmdane	r3!, {r9}
    9454:	00047309 	andeq	r7, r4, r9, lsl #6
    9458:	3a2f0800 	bcc	bcb460 <MEM_SIZE+0x3cb460>
    945c:	02000000 	andeq	r0, r0, #0
    9460:	8e091923 	cdphi	9, 0, cr1, cr9, cr3, {1}
    9464:	08000004 	stmdaeq	r0, {r2}
    9468:	00003a30 	andeq	r3, r0, r0, lsr sl
    946c:	1a230200 	bne	8c9c74 <MEM_SIZE+0xc9c74>
    9470:	c0040a00 	andgt	r0, r4, r0, lsl #20
    9474:	0a000004 	beq	948c <DISABLE_IRQ+0x940c>
    9478:	00009004 	andeq	r9, r0, r4
    947c:	b1040a00 	tstlt	r4, r0, lsl #20
    9480:	0a000002 	beq	9490 <DISABLE_IRQ+0x9410>
    9484:	00030704 	andeq	r0, r3, r4, lsl #14
    9488:	074b0800 	strbeq	r0, [fp, -r0, lsl #16]
    948c:	072c0000 	streq	r0, [ip, -r0]!
    9490:	0005b67c 	andeq	fp, r5, ip, ror r6
    9494:	05360900 	ldreq	r0, [r6, #-2304]!	; 0x900
    9498:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
    949c:	00000307 	andeq	r0, r0, r7, lsl #6
    94a0:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    94a4:	000007dd 	ldrdeq	r0, [r0], -sp
    94a8:	06b83009 	ldrteq	r3, [r8], r9
    94ac:	23020000 	movwcs	r0, #8192	; 0x2000
    94b0:	05e40910 	strbeq	r0, [r4, #2320]!	; 0x910
    94b4:	31090000 	tstcc	r9, r0
    94b8:	000000b1 	strheq	r0, [r0], -r1
    94bc:	09142302 	ldmdbeq	r4, {r1, r8, r9, sp}
    94c0:	00000b0e 	andeq	r0, r0, lr, lsl #22
    94c4:	00b13209 	adcseq	r3, r1, r9, lsl #4
    94c8:	23020000 	movwcs	r0, #8192	; 0x2000
    94cc:	05f00918 	ldrbeq	r0, [r0, #2328]!	; 0x918
    94d0:	34090000 	strcc	r0, [r9]
    94d4:	000006b8 	undefined instruction 0x000006b8
    94d8:	091c2302 	ldmdbeq	ip, {r1, r8, r9, sp}
    94dc:	0000014e 	andeq	r0, r0, lr, asr #2
    94e0:	06b83509 	ldrteq	r3, [r8], r9, lsl #10
    94e4:	23020000 	movwcs	r0, #8192	; 0x2000
    94e8:	05270920 	streq	r0, [r7, #-2336]!	; 0x920
    94ec:	36090000 	strcc	r0, [r9], -r0
    94f0:	000000b1 	strheq	r0, [r0], -r1
    94f4:	09242302 	stmdbeq	r4!, {r1, r8, r9, sp}
    94f8:	0000049b 	muleq	r0, fp, r4
    94fc:	00b13709 	adcseq	r3, r1, r9, lsl #14
    9500:	23020000 	movwcs	r0, #8192	; 0x2000
    9504:	040a0028 	streq	r0, [sl], #-40	; 0x28
    9508:	00000539 	andeq	r0, r0, r9, lsr r5
    950c:	000aa708 	andeq	sl, sl, r8, lsl #14
    9510:	80071800 	andhi	r1, r7, r0, lsl #16
    9514:	000005f3 	strdeq	r0, [r0], -r3
    9518:	00053609 	andeq	r3, r5, r9, lsl #12
    951c:	07220a00 	streq	r0, [r2, -r0, lsl #20]!
    9520:	02000003 	andeq	r0, r0, #3
    9524:	47090023 	strmi	r0, [r9, -r3, lsr #32]
    9528:	0a000004 	beq	9540 <DISABLE_IRQ+0x94c0>
    952c:	00005e23 	andeq	r5, r0, r3, lsr #28
    9530:	10230200 	eorne	r0, r3, r0, lsl #4
    9534:	001b3f09 	andseq	r3, fp, r9, lsl #30
    9538:	ca240a00 	bgt	90bd40 <MEM_SIZE+0x10bd40>
    953c:	02000006 	andeq	r0, r0, #6
    9540:	0a001423 	beq	e5d4 <DISABLE_IRQ+0xe554>
    9544:	0005bc04 	andeq	fp, r5, r4, lsl #24
    9548:	099f0400 	ldmibeq	pc, {sl}
    954c:	89070000 	stmdbhi	r7, {}
    9550:	00000312 	andeq	r0, r0, r2, lsl r3
    9554:	0014af0f 	andseq	sl, r4, pc, lsl #30
    9558:	0701fc00 	streq	pc, [r1, -r0, lsl #24]
    955c:	00063d8f 	andeq	r3, r6, pc, lsl #27
    9560:	13cf0900 	bicne	r0, pc, #0
    9564:	91070000 	tstls	r7, r0
    9568:	0000003a 	andeq	r0, r0, sl, lsr r0
    956c:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    9570:	00001391 	muleq	r0, r1, r3
    9574:	063d9307 	ldrteq	r9, [sp], -r7, lsl #6
    9578:	23020000 	movwcs	r0, #8192	; 0x2000
    957c:	142c0904 	strtne	r0, [ip], #-2308	; 0x904
    9580:	95070000 	strls	r0, [r7]
    9584:	0000064d 	andeq	r0, r0, sp, asr #12
    9588:	03f42303 	mvnseq	r2, #201326592	; 0xc000000
    958c:	02b10c00 	adcseq	r0, r1, #0
    9590:	064d0000 	strbeq	r0, [sp], -r0
    9594:	bd0d0000 	stclt	0, cr0, [sp]
    9598:	3d000004 	stccc	0, cr0, [r0, #-16]
    959c:	005e0c00 	subseq	r0, lr, r0, lsl #24
    95a0:	065d0000 	ldrbeq	r0, [sp], -r0
    95a4:	bd0d0000 	stclt	0, cr0, [sp]
    95a8:	01000004 	tsteq	r0, r4
    95ac:	14af0400 	strtne	r0, [pc], #1024	; 95b4 <DISABLE_IRQ+0x9534>
    95b0:	97070000 	strls	r0, [r7, -r0]
    95b4:	00000604 	andeq	r0, r0, r4, lsl #12
    95b8:	04a7040a 	strteq	r0, [r7], #1034	; 0x40a
    95bc:	61080000 	tstvs	r8, r0
    95c0:	0c00000b 	stceq	0, cr0, [r0], {11}
    95c4:	06a52109 	strteq	r2, [r5], r9, lsl #2
    95c8:	11090000 	tstne	r9, r0
    95cc:	09000003 	stmdbeq	r0, {r0, r1}
    95d0:	0006a523 	andeq	sl, r6, r3, lsr #10
    95d4:	00230200 	eoreq	r0, r3, r0, lsl #4
    95d8:	0005dc09 	andeq	sp, r5, r9, lsl #24
    95dc:	ab240900 	blge	90b9e4 <MEM_SIZE+0x10b9e4>
    95e0:	02000006 	andeq	r0, r0, #6
    95e4:	30090423 	andcc	r0, r9, r3, lsr #8
    95e8:	09000016 	stmdbeq	r0, {r1, r2, r4}
    95ec:	0000b125 	andeq	fp, r0, r5, lsr #2
    95f0:	08230200 	stmdaeq	r3!, {r9}
    95f4:	6e040a00 	vmlavs.f32	s0, s8, s0
    95f8:	10000006 	andne	r0, r0, r6
    95fc:	0b610404 	bleq	184a614 <MEM_SIZE+0x104a614>
    9600:	27090000 	strcs	r0, [r9, -r0]
    9604:	0000066e 	andeq	r0, r0, lr, ror #12
    9608:	06ad040a 	strteq	r0, [sp], sl, lsl #8
    960c:	01110000 	tsteq	r1, r0
    9610:	000006ca 	andeq	r0, r0, sl, asr #13
    9614:	0005f312 	andeq	pc, r5, r2, lsl r3
    9618:	040a0000 	streq	r0, [sl]
    961c:	000006be 	undefined instruction 0x000006be
    9620:	05f9040a 	ldrbeq	r0, [r9, #1034]!	; 0x40a
    9624:	01130000 	tsteq	r3, r0
    9628:	00001ca8 	andeq	r1, r0, r8, lsr #25
    962c:	a601f901 	strge	pc, [r1], -r1, lsl #18
    9630:	84000000 	strhi	r0, [r0]
    9634:	9430004c 	ldrtls	r0, [r0], #-76	; 0x4c
    9638:	0130004c 	teqeq	r0, ip, asr #32
    963c:	6e01145d 	cfmvsrvs	mvf1, r1
    9640:	0100001c 	tsteq	r0, ip, lsl r0
    9644:	45010101 	strmi	r0, [r1, #-257]	; 0x101
    9648:	94000000 	strls	r0, [r0]
    964c:	ec30004c 	ldc	0, cr0, [r0], #-304	; 0xfffffed0
    9650:	0130004c 	teqeq	r0, ip, asr #32
    9654:	0007445d 	andeq	r4, r7, sp, asr r4
    9658:	0d941500 	cfldr32eq	mvfx1, [r4]
    965c:	01010000 	tsteq	r1, r0
    9660:	0006d001 	andeq	sp, r6, r1
    9664:	0032e100 	eorseq	lr, r2, r0, lsl #2
    9668:	736d1600 	cmnvc	sp, #0
    966c:	01010067 	tsteq	r1, r7, rrx
    9670:	00066801 	andeq	r6, r6, r1, lsl #16
    9674:	17510100 	ldrbne	r0, [r1, -r0, lsl #2]
    9678:	000009b1 	undefined instruction 0x000009b1
    967c:	3a010301 	bcc	4a288 <DISABLE_IRQ+0x4a208>
    9680:	18000000 	stmdane	r0, {}
    9684:	00000ecc 	andeq	r0, r0, ip, asr #29
    9688:	45010401 	strmi	r0, [r1, #-1025]	; 0x401
    968c:	20000000 	andcs	r0, r0, r0
    9690:	00000033 	andeq	r0, r0, r3, lsr r0
    9694:	1c2a0114 	stfnes	f0, [sl], #-80	; 0xffffffb0
    9698:	55010000 	strpl	r0, [r1]
    969c:	04a70101 	strteq	r0, [r7], #257	; 0x101
    96a0:	4cec0000 	stclmi	0, cr0, [ip]
    96a4:	4d0c3000 	stcmi	0, cr3, [ip]
    96a8:	5d013000 	stcpl	0, cr3, [r1]
    96ac:	00000798 	muleq	r0, r8, r7
    96b0:	63727319 	cmnvs	r2, #1677721600	; 0x64000000
    96b4:	01550100 	cmpeq	r5, r0, lsl #2
    96b8:	000004a7 	andeq	r0, r0, r7, lsr #9
    96bc:	0000335f 	andeq	r3, r0, pc, asr r3
    96c0:	0025071a 	eoreq	r0, r5, sl, lsl r7
    96c4:	01550100 	cmpeq	r5, r0, lsl #2
    96c8:	0000003a 	andeq	r0, r0, sl, lsr r0
    96cc:	471a5101 	ldrmi	r5, [sl, -r1, lsl #2]
    96d0:	01000004 	tsteq	r0, r4
    96d4:	005e0155 	subseq	r0, lr, r5, asr r1
    96d8:	52010000 	andpl	r0, r1, #0
    96dc:	0073781b 	rsbseq	r7, r3, fp, lsl r8
    96e0:	01015701 	tsteq	r1, r1, lsl #14
    96e4:	00000003 	andeq	r0, r0, r3
    96e8:	1c350114 	ldfnes	f0, [r5], #-80	; 0xffffffb0
    96ec:	62010000 	andvs	r0, r1, #0
    96f0:	04a70101 	strteq	r0, [r7], #257	; 0x101
    96f4:	4d0c0000 	stcmi	0, cr0, [ip]
    96f8:	4d303000 	ldcmi	0, cr3, [r0]
    96fc:	5d013000 	stcpl	0, cr3, [r1]
    9700:	000007f7 	strdeq	r0, [r0], -r7
    9704:	00014915 	andeq	r4, r1, r5, lsl r9
    9708:	01620100 	cmneq	r2, r0, lsl #2
    970c:	000004a7 	andeq	r0, r0, r7, lsr #9
    9710:	00003372 	andeq	r3, r0, r2, ror r3
    9714:	63727316 	cmnvs	r2, #1476395008	; 0x58000000
    9718:	01620100 	cmneq	r2, r0, lsl #2
    971c:	000007f7 	strdeq	r0, [r0], -r7
    9720:	471a5101 	ldrmi	r5, [sl, -r1, lsl #2]
    9724:	01000004 	tsteq	r0, r4
    9728:	005e0162 	subseq	r0, lr, r2, ror #2
    972c:	52010000 	andpl	r0, r1, #0
    9730:	706d741b 	rsbvc	r7, sp, fp, lsl r4
    9734:	01640100 	cmneq	r4, r0, lsl #2
    9738:	00000301 	andeq	r0, r0, r1, lsl #6
    973c:	0100731b 	tsteq	r0, fp, lsl r3
    9740:	08020165 	stmdaeq	r2, {r0, r2, r5, r6, r8}
    9744:	0a000000 	beq	974c <DISABLE_IRQ+0x96cc>
    9748:	0007fd04 	andeq	pc, r7, r4, lsl #26
    974c:	00251c00 	eoreq	r1, r5, r0, lsl #24
    9750:	040a0000 	streq	r0, [sl]
    9754:	00000808 	andeq	r0, r0, r8, lsl #16
    9758:	00003a1c 	andeq	r3, r0, ip, lsl sl
    975c:	40011d00 	andmi	r1, r1, r0, lsl #26
    9760:	0100001c 	tsteq	r0, ip, lsl r0
    9764:	70010175 	andvc	r0, r1, r5, ror r1
    9768:	30000000 	andcc	r0, r0, r0
    976c:	f030004d 	undefined instruction 0xf030004d
    9770:	8530004d 	ldrhi	r0, [r0, #-77]!	; 0x4d
    9774:	83000033 	movwhi	r0, #51	; 0x33
    9778:	15000008 	strne	r0, [r0, #-8]
    977c:	00000630 	andeq	r0, r0, r0, lsr r6
    9780:	83017501 	movwhi	r7, #5377	; 0x1501
    9784:	a4000008 	strge	r0, [r0], #-8
    9788:	15000033 	strne	r0, [r0, #-51]	; 0x33
    978c:	00000194 	muleq	r0, r4, r1
    9790:	3a017501 	bcc	66b9c <DISABLE_IRQ+0x66b1c>
    9794:	c2000000 	andgt	r0, r0, #0
    9798:	1a000033 	bne	986c <DISABLE_IRQ+0x97ec>
    979c:	00001c68 	andeq	r1, r0, r8, ror #24
    97a0:	70017501 	andvc	r7, r1, r1, lsl #10
    97a4:	01000000 	tsteq	r0, r0
    97a8:	70631e52 	rsbvc	r1, r3, r2, asr lr
    97ac:	01770100 	cmneq	r7, r0, lsl #2
    97b0:	00000883 	andeq	r0, r0, r3, lsl #17
    97b4:	761e5401 	ldrvc	r5, [lr], -r1, lsl #8
    97b8:	01770100 	cmneq	r7, r0, lsl #2
    97bc:	0000005e 	andeq	r0, r0, lr, asr r0
    97c0:	01185c01 	tsteq	r8, r1, lsl #24
    97c4:	01000020 	tsteq	r0, r0, lsr #32
    97c8:	00700178 	rsbseq	r0, r0, r8, ror r1
    97cc:	33d50000 	bicscc	r0, r5, #0
    97d0:	0a000000 	beq	97d8 <DISABLE_IRQ+0x9758>
    97d4:	00005e04 	andeq	r5, r0, r4, lsl #28
    97d8:	07011f00 	streq	r1, [r1, -r0, lsl #30]
    97dc:	0100001c 	tsteq	r0, ip, lsl r0
    97e0:	004501d3 	ldrdeq	r0, [r5], #-19	; 0xffffffed
    97e4:	4df00000 	ldclmi	0, cr0, [r0]
    97e8:	4e2c3000 	cdpmi	0, 2, cr3, cr12, cr0, {0}
    97ec:	342a3000 	strtcc	r3, [sl]
    97f0:	08b20000 	ldmeq	r2!, {}
    97f4:	18200000 	stmdane	r0!, {}
    97f8:	01000001 	tsteq	r0, r1
    97fc:	00009bd5 	ldrdeq	r9, [r0], -r5
    9800:	011d0000 	tsteq	sp, r0
    9804:	00001c87 	andeq	r1, r0, r7, lsl #25
    9808:	01014101 	tsteq	r1, r1, lsl #2
    980c:	00000045 	andeq	r0, r0, r5, asr #32
    9810:	30004e2c 	andcc	r4, r0, ip, lsr #28
    9814:	30004eb0 	undefined instruction 0x30004eb0
    9818:	00003449 	andeq	r3, r0, r9, asr #8
    981c:	000008ed 	andeq	r0, r0, sp, ror #17
    9820:	001c6315 	andseq	r6, ip, r5, lsl r3
    9824:	01410100 	cmpeq	r1, r0, lsl #2
    9828:	000000a6 	andeq	r0, r0, r6, lsr #1
    982c:	00003468 	andeq	r3, r0, r8, ror #8
    9830:	00011817 	andeq	r1, r1, r7, lsl r8
    9834:	01430100 	cmpeq	r3, r0, lsl #2
    9838:	0000009b 	muleq	r0, fp, r0
    983c:	55012100 	strpl	r2, [r1, #-256]	; 0x100
    9840:	0100001c 	tsteq	r0, ip, lsl r0
    9844:	4eb00176 	mrcmi	1, 5, r0, cr0, cr6, {3}
    9848:	4ee43000 	cdpmi	0, 14, cr3, cr4, cr0, {0}
    984c:	34863000 	strcc	r3, [r6]
    9850:	01220000 	teqeq	r2, r0
    9854:	00001c1b 	andeq	r1, r0, fp, lsl ip
    9858:	e4013501 	str	r3, [r1], #-1281	; 0x501
    985c:	7c30004e 	ldcvc	0, cr0, [r0], #-312	; 0xfffffec8
    9860:	a530004f 	ldrge	r0, [r0, #-79]!	; 0x4f
    9864:	27000034 	smladxcs	r0, r4, r0, r0
    9868:	20000009 	andcs	r0, r0, r9
    986c:	00000118 	andeq	r0, r0, r8, lsl r1
    9870:	009b3801 	addseq	r3, fp, r1, lsl #16
    9874:	23000000 	movwcs	r0, #0
    9878:	000014d1 	ldrdeq	r1, [r0], -r1
    987c:	06d0490b 	ldrbeq	r4, [r0], fp, lsl #18
    9880:	01010000 	tsteq	r1, r0
    9884:	00038f23 	andeq	r8, r3, r3, lsr #30
    9888:	d04a0b00 	suble	r0, sl, r0, lsl #22
    988c:	01000006 	tsteq	r0, r6
    9890:	131d2301 	tstne	sp, #67108864	; 0x4000000
    9894:	500b0000 	andpl	r0, fp, r0
    9898:	0000065d 	andeq	r0, r0, sp, asr r6
    989c:	50230101 	eorpl	r0, r3, r1, lsl #2
    98a0:	0b00000e 	bleq	98e0 <DISABLE_IRQ+0x9860>
    98a4:	00003a51 	andeq	r3, r0, r1, asr sl
    98a8:	23010100 	movwcs	r0, #4352	; 0x1100
    98ac:	00000d85 	andeq	r0, r0, r5, lsl #27
    98b0:	003a520b 	eorseq	r5, sl, fp, lsl #4
    98b4:	01010000 	tsteq	r1, r0
    98b8:	00146d23 	andseq	r6, r4, r3, lsr #26
    98bc:	a6530b00 	ldrbge	r0, [r3], -r0, lsl #22
    98c0:	01000000 	tsteq	r0, r0
    98c4:	14e02301 	strbtne	r2, [r0], #769	; 0x301
    98c8:	7e0b0000 	cdpvc	0, 0, cr0, cr11, cr0, {0}
    98cc:	000005f9 	strdeq	r0, [r0], -r9
    98d0:	e6000101 	str	r0, [r0], -r1, lsl #2
    98d4:	02000011 	andeq	r0, r0, #17
    98d8:	001eaf00 	andseq	sl, lr, r0, lsl #30
    98dc:	4d010400 	cfstrsmi	mvf0, [r1]
    98e0:	01000000 	tsteq	r0, r0
    98e4:	00001e2b 	andeq	r1, r0, fp, lsr #28
    98e8:	00000063 	andeq	r0, r0, r3, rrx
    98ec:	30004f7c 	andcc	r4, r0, ip, ror pc
    98f0:	30006190 	mulcc	r0, r0, r1
    98f4:	00001e19 	andeq	r1, r0, r9, lsl lr
    98f8:	00056402 	andeq	r6, r5, r2, lsl #8
    98fc:	03210300 	teqeq	r1, #0
    9900:	00a00601 	adceq	r0, r0, r1, lsl #12
    9904:	01030000 	tsteq	r3, r0
    9908:	00009e08 	andeq	r9, r0, r8, lsl #28
    990c:	04f70400 	ldrbteq	r0, [r7], #1024	; 0x400
    9910:	24030000 	strcs	r0, [r3]
    9914:	00000033 	andeq	r0, r0, r3, lsr r0
    9918:	000afb04 	andeq	pc, sl, r4, lsl #22
    991c:	50260300 	eorpl	r0, r6, r0, lsl #6
    9920:	03000000 	movweq	r0, #0
    9924:	008b0702 	addeq	r0, fp, r2, lsl #14
    9928:	02030000 	andeq	r0, r3, #0
    992c:	00005905 	andeq	r5, r0, r5, lsl #18
    9930:	03380400 	teqeq	r8, #0
    9934:	28030000 	stmdacs	r3, {}
    9938:	00000069 	andeq	r0, r0, r9, rrx
    993c:	37070403 	strcc	r0, [r7, -r3, lsl #8]
    9940:	05000000 	streq	r0, [r0]
    9944:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    9948:	08030074 	stmdaeq	r3, {r2, r4, r5, r6}
    994c:	00000005 	andeq	r0, r0, r5
    9950:	07080300 	streq	r0, [r8, -r0, lsl #6]
    9954:	0000002d 	andeq	r0, r0, sp, lsr #32
    9958:	00039f04 	andeq	r9, r3, r4, lsl #30
    995c:	692d0300 	pushvs	{r8, r9}
    9960:	04000000 	streq	r0, [r0]
    9964:	00000132 	andeq	r0, r0, r2, lsr r1
    9968:	00692204 	rsbeq	r2, r9, r4, lsl #4
    996c:	27040000 	strcs	r0, [r4, -r0]
    9970:	0500000a 	streq	r0, [r0, #-10]
    9974:	00005e2a 	andeq	r5, r0, sl, lsr #28
    9978:	144b0400 	strbne	r0, [fp], #-1024	; 0x400
    997c:	2b050000 	blcs	149984 <DISABLE_IRQ+0x149904>
    9980:	0000003a 	andeq	r0, r0, sl, lsr r0
    9984:	00082904 	andeq	r2, r8, r4, lsl #18
    9988:	5e2c0500 	cfsh64pl	mvdx0, mvdx12, #0
    998c:	06000000 	streq	r0, [r0], -r0
    9990:	61430604 	cmpvs	r3, r4, lsl #12
    9994:	07000002 	streq	r0, [r0, -r2]
    9998:	00000bb5 	undefined instruction 0x00000bb5
    999c:	0b6e0700 	bleq	1b8b5a4 <MEM_SIZE+0x138b5a4>
    99a0:	07010000 	streq	r0, [r1, -r0]
    99a4:	000003aa 	andeq	r0, r0, sl, lsr #7
    99a8:	09210702 	stmdbeq	r1!, {r1, r8, r9, sl}
    99ac:	07030000 	streq	r0, [r3, -r0]
    99b0:	00000635 	andeq	r0, r0, r5, lsr r6
    99b4:	0a350704 	beq	d4b5cc <MEM_SIZE+0x54b5cc>
    99b8:	07050000 	streq	r0, [r5, -r0]
    99bc:	00000ad4 	ldrdeq	r0, [r0], -r4
    99c0:	02ac0706 	adceq	r0, ip, #1572864	; 0x180000
    99c4:	07070000 	streq	r0, [r7, -r0]
    99c8:	000006e3 	andeq	r0, r0, r3, ror #13
    99cc:	01ee0708 	mvneq	r0, r8, lsl #14
    99d0:	07090000 	streq	r0, [r9, -r0]
    99d4:	000008cd 	andeq	r0, r0, sp, asr #17
    99d8:	0ba1070a 	bleq	fe84b608 <rEINTPEND+0xa884b560>
    99dc:	070b0000 	streq	r0, [fp, -r0]
    99e0:	00000480 	andeq	r0, r0, r0, lsl #9
    99e4:	08bc070c 	ldmeq	ip!, {r2, r3, r8, r9, sl}
    99e8:	070d0000 	streq	r0, [sp, -r0]
    99ec:	00000705 	andeq	r0, r0, r5, lsl #14
    99f0:	06d0070e 	ldrbeq	r0, [r0], lr, lsl #14
    99f4:	070f0000 	streq	r0, [pc, -r0]
    99f8:	00000340 	andeq	r0, r0, r0, asr #6
    99fc:	096a0710 	stmdbeq	sl!, {r4, r8, r9, sl}^
    9a00:	07110000 	ldreq	r0, [r1, -r0]
    9a04:	00000b39 	andeq	r0, r0, r9, lsr fp
    9a08:	060e0712 	undefined instruction 0x060e0712
    9a0c:	07130000 	ldreq	r0, [r3, -r0]
    9a10:	000002be 	undefined instruction 0x000002be
    9a14:	06900714 	undefined instruction 0x06900714
    9a18:	07150000 	ldreq	r0, [r5, -r0]
    9a1c:	000008e5 	andeq	r0, r0, r5, ror #17
    9a20:	02d00716 	sbcseq	r0, r0, #5767168	; 0x580000
    9a24:	07170000 	ldreq	r0, [r7, -r0]
    9a28:	0000090a 	andeq	r0, r0, sl, lsl #18
    9a2c:	02150718 	andseq	r0, r5, #6291456	; 0x600000
    9a30:	07190000 	ldreq	r0, [r9, -r0]
    9a34:	00000776 	andeq	r0, r0, r6, ror r7
    9a38:	02f0071a 	rscseq	r0, r0, #6815744	; 0x680000
    9a3c:	071b0000 	ldreq	r0, [fp, -r0]
    9a40:	00000bc1 	andeq	r0, r0, r1, asr #23
    9a44:	0405071c 	streq	r0, [r5], #-1820	; 0x71c
    9a48:	071d0000 	ldreq	r0, [sp, -r0]
    9a4c:	00000810 	andeq	r0, r0, r0, lsl r8
    9a50:	0932071e 	ldmdbeq	r2!, {r1, r2, r3, r4, r8, r9, sl}
    9a54:	071f0000 	ldreq	r0, [pc, -r0]
    9a58:	00000267 	andeq	r0, r0, r7, ror #4
    9a5c:	05b10720 	ldreq	r0, [r1, #1824]!	; 0x720
    9a60:	07210000 	streq	r0, [r1, -r0]!
    9a64:	00000644 	andeq	r0, r0, r4, asr #12
    9a68:	07ff0722 	ldrbeq	r0, [pc, r2, lsr #14]!
    9a6c:	07230000 	streq	r0, [r3, -r0]!
    9a70:	000003ba 	undefined instruction 0x000003ba
    9a74:	08990724 	ldmeq	r9, {r2, r5, r8, r9, sl}
    9a78:	07250000 	streq	r0, [r5, -r0]!
    9a7c:	00000b4b 	andeq	r0, r0, fp, asr #22
    9a80:	08830726 	stmeq	r3, {r1, r2, r5, r8, r9, sl}
    9a84:	07270000 	streq	r0, [r7, -r0]!
    9a88:	0000023e 	andeq	r0, r0, lr, lsr r2
    9a8c:	09b70728 	ldmibeq	r7!, {r3, r5, r8, r9, sl}
    9a90:	07290000 	streq	r0, [r9, -r0]!
    9a94:	00000ae5 	andeq	r0, r0, r5, ror #21
    9a98:	0a87072a 	beq	fe1cb748 <rEINTPEND+0xa81cb6a0>
    9a9c:	072b0000 	streq	r0, [fp, -r0]!
    9aa0:	00000948 	andeq	r0, r0, r8, asr #18
    9aa4:	09f5072c 	ldmibeq	r5!, {r2, r3, r5, r8, r9, sl}^
    9aa8:	072d0000 	streq	r0, [sp, -r0]!
    9aac:	000009c7 	andeq	r0, r0, r7, asr #19
    9ab0:	03cf072e 	biceq	r0, pc, #12058624	; 0xb80000
    9ab4:	072f0000 	streq	r0, [pc, -r0]!
    9ab8:	000006a7 	andeq	r0, r0, r7, lsr #13
    9abc:	04130730 	ldreq	r0, [r3], #-1840	; 0x730
    9ac0:	07310000 	ldreq	r0, [r1, -r0]!
    9ac4:	00000989 	andeq	r0, r0, r9, lsl #19
    9ac8:	03520732 	cmpeq	r2, #13107200	; 0xc80000
    9acc:	07330000 	ldreq	r0, [r3, -r0]!
    9ad0:	000005fd 	strdeq	r0, [r0], -sp
    9ad4:	0bd50734 	bleq	ff54b7ac <rEINTPEND+0xa954b704>
    9ad8:	07350000 	ldreq	r0, [r5, -r0]!
    9adc:	000004e1 	andeq	r0, r0, r1, ror #9
    9ae0:	07a80736 	undefined instruction 0x07a80736
    9ae4:	07370000 	ldreq	r0, [r7, -r0]!
    9ae8:	00000792 	muleq	r0, r2, r7
    9aec:	03160738 	tsteq	r6, #14680064	; 0xe00000
    9af0:	07390000 	ldreq	r0, [r9, -r0]!
    9af4:	000006f3 	strdeq	r0, [r0], -r3
    9af8:	03e2073a 	mvneq	r0, #15204352	; 0xe80000
    9afc:	073b0000 	ldreq	r0, [fp, -r0]!
    9b00:	000006bc 	undefined instruction 0x000006bc
    9b04:	050f073c 	streq	r0, [pc, #-1852]	; 93d0 <DISABLE_IRQ+0x9350>
    9b08:	073d0000 	ldreq	r0, [sp, -r0]!
    9b0c:	0000056d 	andeq	r0, r0, sp, ror #10
    9b10:	04cb073e 	strbeq	r0, [fp], #1854	; 0x73e
    9b14:	073f0000 	ldreq	r0, [pc, -r0]!
    9b18:	0000036e 	andeq	r0, r0, lr, ror #6
    9b1c:	8b0700c0 	blhi	1c9e24 <DISABLE_IRQ+0x1c9da4>
    9b20:	c1000005 	tstgt	r0, r5
    9b24:	08370700 	ldmdaeq	r7!, {r8, r9, sl}
    9b28:	00c20000 	sbceq	r0, r2, r0
    9b2c:	00067407 	andeq	r7, r6, r7, lsl #8
    9b30:	0000c300 	andeq	ip, r0, r0, lsl #6
    9b34:	91060406 	tstls	r6, r6, lsl #8
    9b38:	00000282 	andeq	r0, r0, r2, lsl #5
    9b3c:	00161d07 	andseq	r1, r6, r7, lsl #26
    9b40:	aa070000 	bge	1c9b48 <DISABLE_IRQ+0x1c9ac8>
    9b44:	01000016 	tsteq	r0, r6, lsl r0
    9b48:	00163907 	andseq	r3, r6, r7, lsl #18
    9b4c:	47070200 	strmi	r0, [r7, -r0, lsl #4]
    9b50:	03000016 	movweq	r0, #22
    9b54:	06040600 	streq	r0, [r4], -r0, lsl #12
    9b58:	0002dfa0 	andeq	sp, r2, r0, lsr #31
    9b5c:	0df50700 	ldcleq	7, cr0, [r5]
    9b60:	07000000 	streq	r0, [r0, -r0]
    9b64:	00000de6 	andeq	r0, r0, r6, ror #27
    9b68:	0ed90701 	cdpeq	7, 13, cr0, cr9, cr1, {0}
    9b6c:	07020000 	streq	r0, [r2, -r0]
    9b70:	00000f21 	andeq	r0, r0, r1, lsr #30
    9b74:	0d370703 	ldceq	7, cr0, [r7, #-12]!
    9b78:	07040000 	streq	r0, [r4, -r0]
    9b7c:	00000f69 	andeq	r0, r0, r9, ror #30
    9b80:	0e3f0705 	cdpeq	7, 3, cr0, cr15, cr5, {0}
    9b84:	07060000 	streq	r0, [r6, -r0]
    9b88:	00000e2f 	andeq	r0, r0, pc, lsr #28
    9b8c:	0f370707 	svceq	0x00370707
    9b90:	07080000 	streq	r0, [r8, -r0]
    9b94:	00000d44 	andeq	r0, r0, r4, asr #26
    9b98:	0dad0709 	stceq	7, cr0, [sp, #36]!	; 0x24
    9b9c:	070a0000 	streq	r0, [sl, -r0]
    9ba0:	00000e16 	andeq	r0, r0, r6, lsl lr
    9ba4:	0e7f070b 	cdpeq	7, 7, cr0, cr15, cr11, {0}
    9ba8:	070c0000 	streq	r0, [ip, -r0]
    9bac:	00000f02 	andeq	r0, r0, r2, lsl #30
    9bb0:	0908000d 	stmdbeq	r8, {r0, r2, r3}
    9bb4:	0800000c 	stmdaeq	r0, {r2, r3}
    9bb8:	03082302 	movweq	r2, #33538	; 0x8302
    9bbc:	11090000 	tstne	r9, r0
    9bc0:	02000003 	andeq	r0, r0, #3
    9bc4:	00030824 	andeq	r0, r3, r4, lsr #16
    9bc8:	00230200 	eoreq	r0, r3, r0, lsl #4
    9bcc:	00028109 	andeq	r8, r2, r9, lsl #2
    9bd0:	08250200 	stmdaeq	r5!, {r9}
    9bd4:	02000003 	andeq	r0, r0, #3
    9bd8:	0a000423 	beq	ac6c <DISABLE_IRQ+0xabec>
    9bdc:	0002df04 	andeq	sp, r2, r4, lsl #30
    9be0:	0c090400 	cfstrseq	mvf0, [r9], {0}
    9be4:	26020000 	strcs	r0, [r2], -r0
    9be8:	000002df 	ldrdeq	r0, [r0], -pc
    9bec:	0010230b 	andseq	r2, r0, fp, lsl #6
    9bf0:	21070400 	tstcs	r7, r0, lsl #8
    9bf4:	00000362 	andeq	r0, r0, r2, ror #6
    9bf8:	000f7a07 	andeq	r7, pc, r7, lsl #20
    9bfc:	12070000 	andne	r0, r7, #0
    9c00:	01000010 	tsteq	r0, r0, lsl r0
    9c04:	00104007 	andseq	r4, r0, r7
    9c08:	af070200 	svcge	0x00070200
    9c0c:	0300000f 	movweq	r0, #15
    9c10:	00106307 	andseq	r6, r0, r7, lsl #6
    9c14:	71070400 	tstvc	r7, r0, lsl #8
    9c18:	05000010 	streq	r0, [r0, #-16]
    9c1c:	00101b07 	andseq	r1, r0, r7, lsl #22
    9c20:	93070600 	movwls	r0, #30208	; 0x7600
    9c24:	0700000f 	streq	r0, [r0, -pc]
    9c28:	000ff807 	andeq	pc, pc, r7, lsl #16
    9c2c:	51070800 	tstpl	r7, r0, lsl #16
    9c30:	09000010 	stmdbeq	r0, {r4}
    9c34:	065c0800 	ldrbeq	r0, [ip], -r0, lsl #16
    9c38:	07100000 	ldreq	r0, [r0, -r0]
    9c3c:	0003a72f 	andeq	sl, r3, pc, lsr #14
    9c40:	0ac90900 	beq	ff24c048 <rEINTPEND+0xa924bfa0>
    9c44:	31070000 	tstcc	r7, r0
    9c48:	0000030e 	andeq	r0, r0, lr, lsl #6
    9c4c:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    9c50:	000008e0 	andeq	r0, r0, r0, ror #17
    9c54:	03a73207 	undefined instruction 0x03a73207
    9c58:	23020000 	movwcs	r0, #8192	; 0x2000
    9c5c:	09000908 	stmdbeq	r0, {r3, r8, fp}
    9c60:	33070000 	movwcc	r0, #28672	; 0x7000
    9c64:	0000003a 	andeq	r0, r0, sl, lsr r0
    9c68:	090c2302 	stmdbeq	ip, {r1, r8, r9, sp}
    9c6c:	00000427 	andeq	r0, r0, r7, lsr #8
    9c70:	003a3407 	eorseq	r3, sl, r7, lsl #8
    9c74:	23020000 	movwcs	r0, #8192	; 0x2000
    9c78:	040a000d 	streq	r0, [sl], #-13
    9c7c:	0000003a 	andeq	r0, r0, sl, lsr r0
    9c80:	00065c04 	andeq	r5, r6, r4, lsl #24
    9c84:	62360700 	eorsvs	r0, r6, #0
    9c88:	08000003 	stmdaeq	r0, {r0, r1}
    9c8c:	0000099f 	muleq	r0, pc, r9
    9c90:	4d3a076c 	ldcmi	7, cr0, [sl, #-432]!	; 0xfffffe50
    9c94:	09000005 	stmdbeq	r0, {r0, r2}
    9c98:	00001481 	andeq	r1, r0, r1, lsl #9
    9c9c:	054d3b07 	strbeq	r3, [sp, #-2823]	; 0xb07
    9ca0:	23020000 	movwcs	r0, #8192	; 0x2000
    9ca4:	044d0900 	strbeq	r0, [sp], #-2304	; 0x900
    9ca8:	41070000 	tstmi	r7, r0
    9cac:	0000030e 	andeq	r0, r0, lr, lsl #6
    9cb0:	09042302 	stmdbeq	r4, {r1, r8, r9, sp}
    9cb4:	00000552 	andeq	r0, r0, r2, asr r5
    9cb8:	05534507 	ldrbeq	r4, [r3, #-1287]	; 0x507
    9cbc:	23020000 	movwcs	r0, #8192	; 0x2000
    9cc0:	1aef090c 	bne	ffbcc0f8 <rEINTPEND+0xa9bcc050>
    9cc4:	4b070000 	blmi	1c9ccc <DISABLE_IRQ+0x1c9c4c>
    9cc8:	0000005e 	andeq	r0, r0, lr, asr r0
    9ccc:	09102302 	ldmdbeq	r0, {r1, r8, r9, sp}
    9cd0:	00000878 	andeq	r0, r0, r8, ror r8
    9cd4:	005e4c07 	subseq	r4, lr, r7, lsl #24
    9cd8:	23020000 	movwcs	r0, #8192	; 0x2000
    9cdc:	1d350914 	ldcne	9, cr0, [r5, #-80]!	; 0xffffffb0
    9ce0:	4d070000 	stcmi	0, cr0, [r7]
    9ce4:	0000003a 	andeq	r0, r0, sl, lsr r0
    9ce8:	09182302 	ldmdbeq	r8, {r1, r8, r9, sp}
    9cec:	00001e5a 	andeq	r1, r0, sl, asr lr
    9cf0:	003a5107 	eorseq	r5, sl, r7, lsl #2
    9cf4:	23020000 	movwcs	r0, #8192	; 0x2000
    9cf8:	03640919 	cmneq	r4, #409600	; 0x64000
    9cfc:	53070000 	movwpl	r0, #28672	; 0x7000
    9d00:	0000003a 	andeq	r0, r0, sl, lsr r0
    9d04:	091a2302 	ldmdbeq	sl, {r1, r8, r9, sp}
    9d08:	0000043f 	andeq	r0, r0, pc, lsr r4
    9d0c:	003a5607 	eorseq	r5, sl, r7, lsl #12
    9d10:	23020000 	movwcs	r0, #8192	; 0x2000
    9d14:	0bad091b 	bleq	feb4c188 <rEINTPEND+0xa8b4c0e0>
    9d18:	5a070000 	bpl	1c9d20 <DISABLE_IRQ+0x1c9ca0>
    9d1c:	000005c7 	andeq	r0, r0, r7, asr #11
    9d20:	091c2302 	ldmdbeq	ip, {r1, r8, r9, sp}
    9d24:	00000bf8 	strdeq	r0, [r0], -r8
    9d28:	030e5f07 	movweq	r5, #61191	; 0xef07
    9d2c:	23020000 	movwcs	r0, #8192	; 0x2000
    9d30:	0b030920 	bleq	cc1b8 <DISABLE_IRQ+0xcc138>
    9d34:	63070000 	movwvs	r0, #28672	; 0x7000
    9d38:	0000005e 	andeq	r0, r0, lr, asr r0
    9d3c:	09282302 	stmdbeq	r8!, {r1, r8, r9, sp}
    9d40:	00000625 	andeq	r0, r0, r5, lsr #12
    9d44:	05cd6507 	strbeq	r6, [sp, #1287]	; 0x507
    9d48:	23020000 	movwcs	r0, #8192	; 0x2000
    9d4c:	086e092c 	stmdaeq	lr!, {r2, r3, r5, r8, fp}^
    9d50:	66070000 	strvs	r0, [r7], -r0
    9d54:	0000030e 	andeq	r0, r0, lr, lsl #6
    9d58:	09302302 	ldmdbeq	r0!, {r1, r8, r9, sp}
    9d5c:	00000c0e 	andeq	r0, r0, lr, lsl #24
    9d60:	009b6807 	addseq	r6, fp, r7, lsl #16
    9d64:	23020000 	movwcs	r0, #8192	; 0x2000
    9d68:	07f30938 	undefined instruction 0x07f30938
    9d6c:	69070000 	stmdbvs	r7, {}
    9d70:	0000009b 	muleq	r0, fp, r0
    9d74:	093c2302 	ldmdbeq	ip!, {r1, r8, r9, sp}
    9d78:	000005a7 	andeq	r0, r0, r7, lsr #11
    9d7c:	05d36b07 	ldrbeq	r6, [r3, #2823]	; 0xb07
    9d80:	23020000 	movwcs	r0, #8192	; 0x2000
    9d84:	736d0c40 	cmnvc	sp, #16384	; 0x4000
    9d88:	6d070067 	stcvs	0, cr0, [r7, #-412]	; 0xfffffe64
    9d8c:	0000054d 	andeq	r0, r0, sp, asr #10
    9d90:	09442302 	stmdbeq	r4, {r1, r8, r9, sp}^
    9d94:	00001630 	andeq	r1, r0, r0, lsr r6
    9d98:	00b17007 	adcseq	r7, r1, r7
    9d9c:	23020000 	movwcs	r0, #8192	; 0x2000
    9da0:	08db0948 	ldmeq	fp, {r3, r6, r8, fp}^
    9da4:	73070000 	movwvc	r0, #28672	; 0x7000
    9da8:	000003a7 	andeq	r0, r0, r7, lsr #7
    9dac:	094c2302 	stmdbeq	ip, {r1, r8, r9, sp}^
    9db0:	000009ac 	andeq	r0, r0, ip, lsr #19
    9db4:	003a7507 	eorseq	r7, sl, r7, lsl #10
    9db8:	23020000 	movwcs	r0, #8192	; 0x2000
    9dbc:	07e60950 	ubfxeq	r0, r0, #18, #7
    9dc0:	76070000 	strvc	r0, [r7], -r0
    9dc4:	0000003a 	andeq	r0, r0, sl, lsr r0
    9dc8:	09512302 	ldmdbeq	r1, {r1, r8, r9, sp}^
    9dcc:	0000053d 	andeq	r0, r0, sp, lsr r5
    9dd0:	05d97907 	ldrbeq	r7, [r9, #2311]	; 0x907
    9dd4:	23020000 	movwcs	r0, #8192	; 0x2000
    9dd8:	0ab50954 	beq	fed4c330 <rEINTPEND+0xa8d4c288>
    9ddc:	7c070000 	stcvc	0, cr0, [r7], {0}
    9de0:	0000065c 	andeq	r0, r0, ip, asr r6
    9de4:	09582302 	ldmdbeq	r8, {r1, r8, r9, sp}^
    9de8:	0000022b 	andeq	r0, r0, fp, lsr #4
    9dec:	06998007 	ldreq	r8, [r9], r7
    9df0:	23020000 	movwcs	r0, #8192	; 0x2000
    9df4:	04ad095c 	strteq	r0, [sp], #2396	; 0x95c
    9df8:	84070000 	strhi	r0, [r7]
    9dfc:	0000003a 	andeq	r0, r0, sl, lsr r0
    9e00:	09602302 	stmdbeq	r0!, {r1, r8, r9, sp}^
    9e04:	00000255 	andeq	r0, r0, r5, asr r2
    9e08:	005e8507 	subseq	r8, lr, r7, lsl #10
    9e0c:	23020000 	movwcs	r0, #8192	; 0x2000
    9e10:	075a0964 	ldrbeq	r0, [sl, -r4, ror #18]
    9e14:	86070000 	strhi	r0, [r7], -r0
    9e18:	0000054d 	andeq	r0, r0, sp, asr #10
    9e1c:	00682302 	rsbeq	r2, r8, r2, lsl #6
    9e20:	0025040a 	eoreq	r0, r5, sl, lsl #8
    9e24:	4d0d0000 	stcmi	0, cr0, [sp]
    9e28:	63000005 	movwvs	r0, #5
    9e2c:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
    9e30:	00000563 	andeq	r0, r0, r3, ror #10
    9e34:	040f0000 	streq	r0, [pc], #0	; 9e3c <DISABLE_IRQ+0x9dbc>
    9e38:	0b2f0807 	bleq	bcbe5c <MEM_SIZE+0x3cbe5c>
    9e3c:	071c0000 	ldreq	r0, [ip, -r0]
    9e40:	0005c75a 	andeq	ip, r5, sl, asr r7
    9e44:	05360900 	ldreq	r0, [r6, #-2304]!	; 0x900
    9e48:	27080000 	strcs	r0, [r8, -r0]
    9e4c:	000003ad 	andeq	r0, r0, sp, lsr #7
    9e50:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    9e54:	00000867 	andeq	r0, r0, r7, ror #16
    9e58:	07cc2a08 	strbeq	r2, [ip, r8, lsl #20]
    9e5c:	23020000 	movwcs	r0, #8192	; 0x2000
    9e60:	0bad0910 	bleq	feb4c2a8 <rEINTPEND+0xa8b4c200>
    9e64:	2c080000 	stccs	0, cr0, [r8], {0}
    9e68:	000005c7 	andeq	r0, r0, r7, asr #11
    9e6c:	09142302 	ldmdbeq	r4, {r1, r8, r9, sp}
    9e70:	000005f6 	strdeq	r0, [r0], -r6
    9e74:	003a2e08 	eorseq	r2, sl, r8, lsl #28
    9e78:	23020000 	movwcs	r0, #8192	; 0x2000
    9e7c:	04730918 	ldrbteq	r0, [r3], #-2328	; 0x918
    9e80:	2f080000 	svccs	0x00080000
    9e84:	0000003a 	andeq	r0, r0, sl, lsr r0
    9e88:	09192302 	ldmdbeq	r9, {r1, r8, r9, sp}
    9e8c:	0000048e 	andeq	r0, r0, lr, lsl #9
    9e90:	003a3008 	eorseq	r3, sl, r8
    9e94:	23020000 	movwcs	r0, #8192	; 0x2000
    9e98:	040a001a 	streq	r0, [sl], #-26
    9e9c:	00000566 	andeq	r0, r0, r6, ror #10
    9ea0:	0085040a 	addeq	r0, r5, sl, lsl #8
    9ea4:	040a0000 	streq	r0, [sl]
    9ea8:	0000030e 	andeq	r0, r0, lr, lsl #6
    9eac:	03ad040a 	undefined instruction 0x03ad040a
    9eb0:	4b080000 	blmi	209eb8 <DISABLE_IRQ+0x209e38>
    9eb4:	2c000007 	stccs	0, cr0, [r0], {7}
    9eb8:	065c7c07 	ldrbeq	r7, [ip], -r7, lsl #24
    9ebc:	36090000 	strcc	r0, [r9], -r0
    9ec0:	09000005 	stmdbeq	r0, {r0, r2}
    9ec4:	0003ad2e 	andeq	sl, r3, lr, lsr #26
    9ec8:	00230200 	eoreq	r0, r3, r0, lsl #4
    9ecc:	0007dd09 	andeq	sp, r7, r9, lsl #26
    9ed0:	a9300900 	ldmdbge	r0!, {r8, fp}
    9ed4:	02000007 	andeq	r0, r0, #7
    9ed8:	e4091023 	str	r1, [r9], #-35	; 0x23
    9edc:	09000005 	stmdbeq	r0, {r0, r2}
    9ee0:	0000b131 	andeq	fp, r0, r1, lsr r1
    9ee4:	14230200 	strtne	r0, [r3], #-512	; 0x200
    9ee8:	000b0e09 	andeq	r0, fp, r9, lsl #28
    9eec:	b1320900 	teqlt	r2, r0, lsl #18
    9ef0:	02000000 	andeq	r0, r0, #0
    9ef4:	f0091823 	undefined instruction 0xf0091823
    9ef8:	09000005 	stmdbeq	r0, {r0, r2}
    9efc:	0007a934 	andeq	sl, r7, r4, lsr r9
    9f00:	1c230200 	sfmne	f0, 4, [r3]	; (stcne 2, cr0, [r3])
    9f04:	00014e09 	andeq	r4, r1, r9, lsl #28
    9f08:	a9350900 	ldmdbge	r5!, {r8, fp}
    9f0c:	02000007 	andeq	r0, r0, #7
    9f10:	27092023 	strcs	r2, [r9, -r3, lsr #32]
    9f14:	09000005 	stmdbeq	r0, {r0, r2}
    9f18:	0000b136 	andeq	fp, r0, r6, lsr r1
    9f1c:	24230200 	strtcs	r0, [r3], #-512	; 0x200
    9f20:	00049b09 	andeq	r9, r4, r9, lsl #22
    9f24:	b1370900 	teqlt	r7, r0, lsl #18
    9f28:	02000000 	andeq	r0, r0, #0
    9f2c:	0a002823 	beq	13fc0 <DISABLE_IRQ+0x13f40>
    9f30:	0005df04 	andeq	sp, r5, r4, lsl #30
    9f34:	0aa70800 	beq	fe9cbf3c <rEINTPEND+0xa89cbe94>
    9f38:	07180000 	ldreq	r0, [r8, -r0]
    9f3c:	00069980 	andeq	r9, r6, r0, lsl #19
    9f40:	05360900 	ldreq	r0, [r6, #-2304]!	; 0x900
    9f44:	220a0000 	andcs	r0, sl, #0
    9f48:	000003ad 	andeq	r0, r0, sp, lsr #7
    9f4c:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    9f50:	00000447 	andeq	r0, r0, r7, asr #8
    9f54:	005e230a 	subseq	r2, lr, sl, lsl #6
    9f58:	23020000 	movwcs	r0, #8192	; 0x2000
    9f5c:	1b3f0910 	blne	fcc3a4 <MEM_SIZE+0x7cc3a4>
    9f60:	240a0000 	strcs	r0, [sl]
    9f64:	000007bb 	undefined instruction 0x000007bb
    9f68:	00142302 	andseq	r2, r4, r2, lsl #6
    9f6c:	0662040a 	strbteq	r0, [r2], -sl, lsl #8
    9f70:	9f040000 	svcls	0x00040000
    9f74:	07000009 	streq	r0, [r0, -r9]
    9f78:	0003b889 	andeq	fp, r3, r9, lsl #17
    9f7c:	14af1000 	strtne	r1, [pc], #0	; 9f84 <DISABLE_IRQ+0x9f04>
    9f80:	01fc0000 	mvnseq	r0, r0
    9f84:	06e38f07 	strbteq	r8, [r3], r7, lsl #30
    9f88:	cf090000 	svcgt	0x00090000
    9f8c:	07000013 	smladeq	r0, r3, r0, r0
    9f90:	00003a91 	muleq	r0, r1, sl
    9f94:	00230200 	eoreq	r0, r3, r0, lsl #4
    9f98:	00139109 	andseq	r9, r3, r9, lsl #2
    9f9c:	e3930700 	orrs	r0, r3, #0
    9fa0:	02000006 	andeq	r0, r0, #6
    9fa4:	2c090423 	cfstrscs	mvf0, [r9], {35}	; 0x23
    9fa8:	07000014 	smladeq	r0, r4, r0, r0
    9fac:	0006f395 	muleq	r6, r5, r3
    9fb0:	f4230300 	vld2.8	{d0-d3}, [r3], r0
    9fb4:	0e0d0003 	cdpeq	0, 0, cr0, cr13, cr3, {0}
    9fb8:	f3000003 	vhadd.u8	d0, d0, d3
    9fbc:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    9fc0:	00000563 	andeq	r0, r0, r3, ror #10
    9fc4:	5e0d003d 	mcrpl	0, 0, r0, cr13, cr13, {1}
    9fc8:	03000000 	movweq	r0, #0
    9fcc:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
    9fd0:	00000563 	andeq	r0, r0, r3, ror #10
    9fd4:	af040001 	svcge	0x00040001
    9fd8:	07000014 	smladeq	r0, r4, r0, r0
    9fdc:	0006aa97 	muleq	r6, r7, sl
    9fe0:	0fd50800 	svceq	0x00d50800
    9fe4:	070c0000 	streq	r0, [ip, -r0]
    9fe8:	0007379c 	muleq	r7, ip, r7
    9fec:	0fa50900 	svceq	0x00a50900
    9ff0:	9f070000 	svcls	0x00070000
    9ff4:	0000030e 	andeq	r0, r0, lr, lsl #6
    9ff8:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    9ffc:	00000fe6 	andeq	r0, r0, r6, ror #31
    a000:	05d3a107 	ldrbeq	sl, [r3, #263]	; 0x107
    a004:	23020000 	movwcs	r0, #8192	; 0x2000
    a008:	d5040008 	strle	r0, [r4, #-8]
    a00c:	0700000f 	streq	r0, [r0, -pc]
    a010:	00070ea3 	andeq	r0, r7, r3, lsr #29
    a014:	1f250400 	svcne	0x00250400
    a018:	210b0000 	tstcs	fp, r0
    a01c:	0000074d 	andeq	r0, r0, sp, asr #14
    a020:	0753040a 	ldrbeq	r0, [r3, -sl, lsl #8]
    a024:	01110000 	tsteq	r1, r0
    a028:	0000075f 	andeq	r0, r0, pc, asr r7
    a02c:	00054d12 	andeq	r4, r5, r2, lsl sp
    a030:	61080000 	tstvs	r8, r0
    a034:	0c00000b 	stceq	0, cr0, [r0], {11}
    a038:	07962109 	ldreq	r2, [r6, r9, lsl #2]
    a03c:	11090000 	tstne	r9, r0
    a040:	09000003 	stmdbeq	r0, {r0, r1}
    a044:	00079623 	andeq	r9, r7, r3, lsr #12
    a048:	00230200 	eoreq	r0, r3, r0, lsl #4
    a04c:	0005dc09 	andeq	sp, r5, r9, lsl #24
    a050:	9c240900 	stcls	9, cr0, [r4]
    a054:	02000007 	andeq	r0, r0, #7
    a058:	30090423 	andcc	r0, r9, r3, lsr #8
    a05c:	09000016 	stmdbeq	r0, {r1, r2, r4}
    a060:	0000b125 	andeq	fp, r0, r5, lsr #2
    a064:	08230200 	stmdaeq	r3!, {r9}
    a068:	5f040a00 	svcpl	0x00040a00
    a06c:	13000007 	movwne	r0, #7
    a070:	0b610404 	bleq	184b088 <MEM_SIZE+0x104b088>
    a074:	27090000 	strcs	r0, [r9, -r0]
    a078:	0000075f 	andeq	r0, r0, pc, asr r7
    a07c:	079e040a 	ldreq	r0, [lr, sl, lsl #8]
    a080:	01110000 	tsteq	r1, r0
    a084:	000007bb 	undefined instruction 0x000007bb
    a088:	00069912 	andeq	r9, r6, r2, lsl r9
    a08c:	040a0000 	streq	r0, [sl]
    a090:	000007af 	andeq	r0, r0, pc, lsr #15
    a094:	000aa704 	andeq	sl, sl, r4, lsl #14
    a098:	62260a00 	eorvs	r0, r6, #0
    a09c:	0a000006 	beq	a0bc <DISABLE_IRQ+0xa03c>
    a0a0:	00069f04 	andeq	r9, r6, r4, lsl #30
    a0a4:	148c0800 	strne	r0, [ip], #2048	; 0x800
    a0a8:	0c040000 	stceq	0, cr0, [r4], {0}
    a0ac:	0007ed20 	andeq	lr, r7, r0, lsr #26
    a0b0:	13770900 	cmnne	r7, #0
    a0b4:	220c0000 	andcs	r0, ip, #0
    a0b8:	000007fe 	strdeq	r0, [r0], -lr
    a0bc:	00002302 	andeq	r2, r0, r2, lsl #6
    a0c0:	07fe0111 	undefined instruction 0x07fe0111
    a0c4:	a6120000 	ldrge	r0, [r2], -r0
    a0c8:	12000000 	andne	r0, r0, #0
    a0cc:	0000079c 	muleq	r0, ip, r7
    a0d0:	ed040a00 	vstr	s0, [r4]
    a0d4:	04000007 	streq	r0, [r0], #-7
    a0d8:	0000148c 	andeq	r1, r0, ip, lsl #9
    a0dc:	07d2240c 	ldrbeq	r2, [r2, ip, lsl #8]
    a0e0:	6a080000 	bvs	20a0e8 <DISABLE_IRQ+0x20a068>
    a0e4:	0c000013 	stceq	0, cr0, [r0], {19}
    a0e8:	0843270c 	stmdaeq	r3, {r2, r3, r8, r9, sl, sp}^
    a0ec:	650c0000 	strvs	r0, [ip]
    a0f0:	290c0076 	stmdbcs	ip, {r1, r2, r4, r5, r6}
    a0f4:	000000a6 	andeq	r0, r0, r6, lsr #1
    a0f8:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    a0fc:	000013c4 	andeq	r1, r0, r4, asr #7
    a100:	079c2a0c 	ldreq	r2, [ip, ip, lsl #20]
    a104:	23020000 	movwcs	r0, #8192	; 0x2000
    a108:	00700c04 	rsbseq	r0, r0, r4, lsl #24
    a10c:	08432b0c 	stmdaeq	r3, {r2, r3, r8, r9, fp, sp}^
    a110:	23020000 	movwcs	r0, #8192	; 0x2000
    a114:	040a0008 	streq	r0, [sl], #-8
    a118:	00000804 	andeq	r0, r0, r4, lsl #16
    a11c:	00136a04 	andseq	r6, r3, r4, lsl #20
    a120:	0f2d0c00 	svceq	0x002d0c00
    a124:	08000008 	stmdaeq	r0, {r3}
    a128:	000013a1 	andeq	r1, r0, r1, lsr #7
    a12c:	c3300c18 	teqgt	r0, #6144	; 0x1800
    a130:	09000008 	stmdbeq	r0, {r3}
    a134:	00001178 	andeq	r1, r0, r8, ror r1
    a138:	003a320c 	eorseq	r3, sl, ip, lsl #4
    a13c:	23020000 	movwcs	r0, #8192	; 0x2000
    a140:	706f0c00 	rsbvc	r0, pc, r0, lsl #24
    a144:	330c0074 	movwcc	r0, #49268	; 0xc074
    a148:	0000003a 	andeq	r0, r0, sl, lsr r0
    a14c:	09012302 	stmdbeq	r1, {r1, r8, r9, sp}
    a150:	00000311 	andeq	r0, r0, r1, lsl r3
    a154:	08c3350c 	stmiaeq	r3, {r2, r3, r8, sl, ip, sp}^
    a158:	23020000 	movwcs	r0, #8192	; 0x2000
    a15c:	16710904 	ldrbtne	r0, [r1], -r4, lsl #18
    a160:	370c0000 	strcc	r0, [ip, -r0]
    a164:	0000079c 	muleq	r0, ip, r7
    a168:	0c082302 	stceq	3, cr2, [r8], {2}
    a16c:	0067736d 	rsbeq	r7, r7, sp, ror #6
    a170:	079c380c 	ldreq	r3, [ip, ip, lsl #16]
    a174:	23020000 	movwcs	r0, #8192	; 0x2000
    a178:	1630090c 	ldrtne	r0, [r0], -ip, lsl #18
    a17c:	390c0000 	stmdbcc	ip, {}
    a180:	000000b1 	strheq	r0, [r0], -r1
    a184:	09102302 	ldmdbeq	r0, {r1, r8, r9, sp}
    a188:	00001521 	andeq	r1, r0, r1, lsr #10
    a18c:	005e3a0c 	subseq	r3, lr, ip, lsl #20
    a190:	23020000 	movwcs	r0, #8192	; 0x2000
    a194:	040a0014 	streq	r0, [sl], #-20
    a198:	00000854 	andeq	r0, r0, r4, asr r8
    a19c:	0013a104 	andseq	sl, r3, r4, lsl #2
    a1a0:	543c0c00 	ldrtpl	r0, [ip], #-3072	; 0xc00
    a1a4:	14000008 	strne	r0, [r0], #-8
    a1a8:	0000152d 	andeq	r1, r0, sp, lsr #10
    a1ac:	03014e02 	movweq	r4, #7682	; 0x1e02
    a1b0:	000008ed 	andeq	r0, r0, sp, ror #17
    a1b4:	0016b615 	andseq	fp, r6, r5, lsl r6
    a1b8:	d34e0200 	movtle	r0, #57856	; 0xe200
    a1bc:	00000005 	andeq	r0, r0, r5
    a1c0:	00222014 	eoreq	r2, r2, r4, lsl r0
    a1c4:	01430200 	cmpeq	r3, r0, lsl #4
    a1c8:	00091103 	andeq	r1, r9, r3, lsl #2
    a1cc:	05ac1500 	streq	r1, [ip, #1280]!	; 0x500
    a1d0:	43020000 	movwmi	r0, #8192	; 0x2000
    a1d4:	000005d3 	ldrdeq	r0, [r0], -r3
    a1d8:	0016b615 	andseq	fp, r6, r5, lsl r6
    a1dc:	d3430200 	movtle	r0, #12800	; 0x3200
    a1e0:	00000005 	andeq	r0, r0, r5
    a1e4:	1ee70116 	mcrne	1, 7, r0, cr7, cr6, {0}
    a1e8:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    a1ec:	00004501 	andeq	r4, r0, r1, lsl #10
    a1f0:	004f7c00 	subeq	r7, pc, r0, lsl #24
    a1f4:	004fc430 	subeq	ip, pc, r0, lsr r4
    a1f8:	655d0130 	ldrbvs	r0, [sp, #-304]	; 0x130
    a1fc:	17000009 	strne	r0, [r0, -r9]
    a200:	000014e5 	andeq	r1, r0, r5, ror #9
    a204:	07ccee01 	strbeq	lr, [ip, r1, lsl #28]
    a208:	34c40000 	strbcc	r0, [r4]
    a20c:	ca180000 	bgt	60a214 <DISABLE_IRQ+0x60a194>
    a210:	0100000f 	tsteq	r0, pc
    a214:	000965ee 	andeq	r6, r9, lr, ror #11
    a218:	19510100 	ldmdbne	r1, {r8}^
    a21c:	00001481 	andeq	r1, r0, r1, lsl #9
    a220:	05cdf001 	strbeq	pc, [sp, #1]
    a224:	34e20000 	strbtcc	r0, [r2]
    a228:	241a0000 	ldrcs	r0, [sl]
    a22c:	0100001d 	tsteq	r0, sp, lsl r0
    a230:	00005ef1 	strdeq	r5, [r0], -r1
    a234:	00530100 	subseq	r0, r3, r0, lsl #2
    a238:	005e040a 	subseq	r0, lr, sl, lsl #8
    a23c:	011b0000 	tsteq	fp, r0
    a240:	00001dd7 	ldrdeq	r1, [r0], -r7
    a244:	01049b01 	tsteq	r4, r1, lsl #22
    a248:	0000054d 	andeq	r0, r0, sp, asr #10
    a24c:	30004fc4 	andcc	r4, r0, r4, asr #31
    a250:	30004fd0 	ldrdcc	r4, [r0], -r0
    a254:	09a85d01 	stmibeq	r8!, {r0, r8, sl, fp, ip, lr}
    a258:	941c0000 	ldrls	r0, [ip]
    a25c:	0100000d 	tsteq	r0, sp
    a260:	07cc049b 	bfieq	r0, fp, #9, #4
    a264:	34f50000 	ldrbtcc	r0, [r5]
    a268:	541c0000 	ldrpl	r0, [ip]
    a26c:	0100001d 	tsteq	r0, sp, lsl r0
    a270:	005e049b 	ldrbeq	r0, [lr], #-75	; 0xffffffb5
    a274:	35080000 	strcc	r0, [r8]
    a278:	1d000000 	stcne	0, cr0, [r0]
    a27c:	001e9c01 	andseq	r9, lr, r1, lsl #24
    a280:	05c20100 	strbeq	r0, [r2, #256]	; 0x100
    a284:	0007cc01 	andeq	ip, r7, r1, lsl #24
    a288:	004fd000 	subeq	sp, pc, r0
    a28c:	004fe030 	subeq	lr, pc, r0, lsr r0
    a290:	1b5d0130 	blne	174a758 <MEM_SIZE+0xf4a758>
    a294:	001cf801 	andseq	pc, ip, r1, lsl #16
    a298:	061d0100 	ldreq	r0, [sp], -r0, lsl #2
    a29c:	00005e01 	andeq	r5, r0, r1, lsl #28
    a2a0:	004fe000 	subeq	lr, pc, r0
    a2a4:	004fec30 	subeq	lr, pc, r0, lsr ip
    a2a8:	e95d0130 	ldmdb	sp, {r4, r5, r8}^
    a2ac:	1e000009 	cdpne	0, 0, cr0, cr0, cr9, {0}
    a2b0:	00001d3f 	andeq	r1, r0, pc, lsr sp
    a2b4:	5e062001 	cdppl	0, 0, cr2, cr6, cr1, {0}
    a2b8:	00000000 	andeq	r0, r0, r0
    a2bc:	1ecf011f 	mcrne	1, 6, r0, cr15, cr15, {0}
    a2c0:	91010000 	tstls	r1, r0
    a2c4:	4fec0104 	svcmi	0x00ec0104
    a2c8:	50143000 	andspl	r3, r4, r0
    a2cc:	351b3000 	ldrcc	r3, [fp]
    a2d0:	0a400000 	beq	100a2d8 <MEM_SIZE+0x80a2d8>
    a2d4:	941c0000 	ldrls	r0, [ip]
    a2d8:	0100000d 	tsteq	r0, sp
    a2dc:	07cc0491 	bfieq	r0, r1, #9, #4
    a2e0:	353a0000 	ldrcc	r0, [sl]!
    a2e4:	e41c0000 	ldr	r0, [ip]
    a2e8:	0100001d 	tsteq	r0, sp, lsl r0
    a2ec:	054d0491 	strbeq	r0, [sp, #-1169]	; 0x491
    a2f0:	354d0000 	strbcc	r0, [sp]
    a2f4:	541c0000 	ldrpl	r0, [ip]
    a2f8:	0100001d 	tsteq	r0, sp, lsl r0
    a2fc:	005e0491 	ldrbeq	r0, [lr], #-65	; 0xffffffbf
    a300:	356b0000 	strbcc	r0, [fp]!
    a304:	181e0000 	ldmdane	lr, {}
    a308:	01000001 	tsteq	r0, r1
    a30c:	00900493 	umullseq	r0, r0, r3, r4
    a310:	20000000 	andcs	r0, r0, r0
    a314:	001e7f01 	andseq	r7, lr, r1, lsl #30
    a318:	012f0100 	teqeq	pc, r0, lsl #2
    a31c:	00004501 	andeq	r4, r0, r1, lsl #10
    a320:	00501400 	subseq	r1, r0, r0, lsl #8
    a324:	00506c30 	subseq	r6, r0, r0, lsr ip
    a328:	00358930 	eorseq	r8, r5, r0, lsr r9
    a32c:	000a6b00 	andeq	r6, sl, r0, lsl #22
    a330:	01181e00 	tsteq	r8, r0, lsl #28
    a334:	31010000 	tstcc	r1, r0
    a338:	00009001 	andeq	r9, r0, r1
    a33c:	01200000 	teqeq	r0, r0
    a340:	00001d2d 	andeq	r1, r0, sp, lsr #26
    a344:	01052501 	tsteq	r5, r1, lsl #10
    a348:	00000045 	andeq	r0, r0, r5, asr #32
    a34c:	3000506c 	andcc	r5, r0, ip, rrx
    a350:	30005104 	andcc	r5, r0, r4, lsl #2
    a354:	000035a8 	andeq	r3, r0, r8, lsr #11
    a358:	00000ab6 	undefined instruction 0x00000ab6
    a35c:	000d941c 	andeq	r9, sp, ip, lsl r4
    a360:	05250100 	streq	r0, [r5, #-256]!	; 0x100
    a364:	000007cc 	andeq	r0, r0, ip, asr #15
    a368:	000035c7 	andeq	r3, r0, r7, asr #11
    a36c:	001cdb1c 	andseq	sp, ip, ip, lsl fp
    a370:	05250100 	streq	r0, [r5, #-256]!	; 0x100
    a374:	000003a7 	andeq	r0, r0, r7, lsr #7
    a378:	000035e5 	andeq	r3, r0, r5, ror #11
    a37c:	0001181e 	andeq	r1, r1, lr, lsl r8
    a380:	05270100 	streq	r0, [r7, #-256]!	; 0x100
    a384:	00000090 	muleq	r0, r0, r0
    a388:	e6012000 	str	r2, [r1], -r0
    a38c:	0100001c 	tsteq	r0, ip, lsl r0
    a390:	450104f2 	strmi	r0, [r1, #-1266]	; 0x4f2
    a394:	04000000 	streq	r0, [r0]
    a398:	a8300051 	ldmdage	r0!, {r0, r4, r6}
    a39c:	2f300051 	svccs	0x00300051
    a3a0:	01000036 	tsteq	r0, r6, lsr r0
    a3a4:	1c00000b 	stcne	0, cr0, [r0], {11}
    a3a8:	00000d94 	muleq	r0, r4, sp
    a3ac:	cc04f201 	sfmgt	f7, 1, [r4], {1}	; (stcgt 2, cr15, [r4], {1})
    a3b0:	5a000007 	bpl	a3d4 <DISABLE_IRQ+0xa354>
    a3b4:	1c000036 	stcne	0, cr0, [r0], {54}	; 0x36
    a3b8:	000005f6 	strdeq	r0, [r0], -r6
    a3bc:	3a04f201 	bcc	146bc8 <DISABLE_IRQ+0x146b48>
    a3c0:	78000000 	stmdavc	r0, {}
    a3c4:	1e000036 	mcrne	0, 0, r0, cr0, cr6, {1}
    a3c8:	00000118 	andeq	r0, r0, r8, lsl r1
    a3cc:	9004f401 	andls	pc, r4, r1, lsl #8
    a3d0:	00000000 	andeq	r0, r0, r0
    a3d4:	1e100120 	mufnesp	f0, f0, f0
    a3d8:	b6010000 	strlt	r0, [r1], -r0
    a3dc:	00450104 	subeq	r0, r5, r4, lsl #2
    a3e0:	51a80000 	undefined instruction 0x51a80000
    a3e4:	52403000 	subpl	r3, r0, #0
    a3e8:	36a13000 	strtcc	r3, [r1], r0
    a3ec:	0b4c0000 	bleq	130a3f4 <MEM_SIZE+0xb0a3f4>
    a3f0:	941c0000 	ldrls	r0, [ip]
    a3f4:	0100000d 	tsteq	r0, sp
    a3f8:	07cc04b6 	undefined instruction 0x07cc04b6
    a3fc:	36c00000 	strbcc	r0, [r0], r0
    a400:	cc1c0000 	ldcgt	0, cr0, [ip], {0}
    a404:	0100001c 	tsteq	r0, ip, lsl r0
    a408:	005e04b6 	ldrheq	r0, [lr], #-70	; 0xffffffba
    a40c:	36de0000 	ldrbcc	r0, [lr], r0
    a410:	181e0000 	ldmdane	lr, {}
    a414:	01000001 	tsteq	r0, r1
    a418:	009004b8 	undefined instruction 0x009004b8
    a41c:	20000000 	andcs	r0, r0, r0
    a420:	001ebb01 	andseq	fp, lr, r1, lsl #22
    a424:	05e10100 	strbeq	r0, [r1, #256]!	; 0x100
    a428:	00004501 	andeq	r4, r0, r1, lsl #10
    a42c:	00524000 	subseq	r4, r2, r0
    a430:	00530030 	subseq	r0, r3, r0, lsr r0
    a434:	00370730 	eorseq	r0, r7, r0, lsr r7
    a438:	000bc700 	andeq	ip, fp, r0, lsl #14
    a43c:	1e901c00 	cdpne	12, 9, cr1, cr0, cr0, {0}
    a440:	e1010000 	tst	r1, r0
    a444:	0005d305 	andeq	sp, r5, r5, lsl #6
    a448:	00372600 	eorseq	r2, r7, r0, lsl #12
    a44c:	1d6e1c00 	stclne	12, cr1, [lr]
    a450:	e1010000 	tst	r1, r0
    a454:	000bd305 	andeq	sp, fp, r5, lsl #6
    a458:	00374400 	eorseq	r4, r7, r0, lsl #8
    a45c:	706f2100 	rsbvc	r2, pc, r0, lsl #2
    a460:	e1010074 	tst	r1, r4, ror r0
    a464:	00003a05 	andeq	r3, r0, r5, lsl #20
    a468:	00376200 	eorseq	r6, r7, r0, lsl #4
    a46c:	0e7a2200 	cdpeq	2, 7, cr2, cr10, cr0, {0}
    a470:	e3010000 	movw	r0, #4096	; 0x1000
    a474:	0005d305 	andeq	sp, r5, r5, lsl #6
    a478:	00378000 	eorseq	r8, r7, r0
    a47c:	22112200 	andscs	r2, r1, #0
    a480:	e4010000 	str	r0, [r1]
    a484:	0005d305 	andeq	sp, r5, r5, lsl #6
    a488:	0037a900 	eorseq	sl, r7, r0, lsl #18
    a48c:	01181e00 	tsteq	r8, r0, lsl #28
    a490:	e6010000 	str	r0, [r1], -r0
    a494:	00009005 	andeq	r9, r0, r5
    a498:	01110000 	tsteq	r1, r0
    a49c:	00000bd3 	ldrdeq	r0, [r0], -r3
    a4a0:	0007cc12 	andeq	ip, r7, r2, lsl ip
    a4a4:	040a0000 	streq	r0, [sl]
    a4a8:	00000bc7 	andeq	r0, r0, r7, asr #23
    a4ac:	1da90120 	stfnes	f0, [r9, #128]!	; 0x80
    a4b0:	6a010000 	bvs	4a4b8 <DISABLE_IRQ+0x4a438>
    a4b4:	00450101 	subeq	r0, r5, r1, lsl #2
    a4b8:	53000000 	movwpl	r0, #0
    a4bc:	536c3000 	cmnpl	ip, #0
    a4c0:	37c73000 	strbcc	r3, [r7, r0]
    a4c4:	0c040000 	stceq	0, cr0, [r4], {0}
    a4c8:	181e0000 	ldmdane	lr, {}
    a4cc:	01000001 	tsteq	r0, r1
    a4d0:	0090016d 	addseq	r0, r0, sp, ror #2
    a4d4:	20000000 	andcs	r0, r0, r0
    a4d8:	001e6301 	andseq	r6, lr, r1, lsl #6
    a4dc:	055c0100 	ldrbeq	r0, [ip, #-256]	; 0x100
    a4e0:	00004501 	andeq	r4, r0, r1, lsl #10
    a4e4:	00536c00 	subseq	r6, r3, r0, lsl #24
    a4e8:	0054ec30 	subseq	lr, r4, r0, lsr ip
    a4ec:	0037e630 	eorseq	lr, r7, r0, lsr r6
    a4f0:	000c5500 	andeq	r5, ip, r0, lsl #10
    a4f4:	0d941c00 	ldceq	12, cr1, [r4]
    a4f8:	5c010000 	stcpl	0, cr0, [r1], {0}
    a4fc:	0007cc05 	andeq	ip, r7, r5, lsl #24
    a500:	00380500 	eorseq	r0, r8, r0, lsl #10
    a504:	01181e00 	tsteq	r8, r0, lsl #28
    a508:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    a50c:	00009005 	andeq	r9, r0, r5
    a510:	08d42300 	ldmeq	r4, {r8, r9, sp}^
    a514:	54640000 	strbtpl	r0, [r4]
    a518:	03a03000 	moveq	r3, #0
    a51c:	8c010000 	stchi	0, cr0, [r1], {0}
    a520:	08e12405 	stmiaeq	r1!, {r0, r2, sl, sp}^
    a524:	00000000 	andeq	r0, r0, r0
    a528:	1efc0120 	cdpne	1, 15, cr0, cr12, cr0, {1}
    a52c:	08010000 	stmdaeq	r1, {}
    a530:	00450104 	subeq	r0, r5, r4, lsl #2
    a534:	54ec0000 	strbtpl	r0, [ip]
    a538:	56b83000 	ldrtpl	r3, [r8], r0
    a53c:	382e3000 	stmdacc	lr!, {ip, sp}
    a540:	0cc00000 	stcleq	0, cr0, [r0], {0}
    a544:	941c0000 	ldrls	r0, [ip]
    a548:	0100000d 	tsteq	r0, sp
    a54c:	07cc0408 	strbeq	r0, [ip, r8, lsl #8]
    a550:	384d0000 	stmdacc	sp, {}^
    a554:	181e0000 	ldmdane	lr, {}
    a558:	01000001 	tsteq	r0, r1
    a55c:	0090040a 	addseq	r0, r0, sl, lsl #8
    a560:	d4250000 	strtle	r0, [r5]
    a564:	e4000008 	str	r0, [r0], #-8
    a568:	c0300055 	eorsgt	r0, r0, r5, asr r0
    a56c:	01000003 	tsteq	r0, r3
    a570:	0ca90460 	cfstrseq	mvf0, [r9], #384	; 0x180
    a574:	e1240000 	teq	r4, r0
    a578:	00000008 	andeq	r0, r0, r8
    a57c:	0008d423 	andeq	sp, r8, r3, lsr #8
    a580:	00563800 	subseq	r3, r6, r0, lsl #16
    a584:	0003e030 	andeq	lr, r3, r0, lsr r0
    a588:	04470100 	strbeq	r0, [r7], #-256	; 0x100
    a58c:	0008e124 	andeq	lr, r8, r4, lsr #2
    a590:	20000000 	andcs	r0, r0, r0
    a594:	001db901 	andseq	fp, sp, r1, lsl #18
    a598:	033f0100 	teqeq	pc, #0
    a59c:	00004501 	andeq	r4, r0, r1, lsl #10
    a5a0:	0056b800 	subseq	fp, r6, r0, lsl #16
    a5a4:	00577830 	subseq	r7, r7, r0, lsr r8
    a5a8:	00387630 	eorseq	r7, r8, r0, lsr r6
    a5ac:	000d0f00 	andeq	r0, sp, r0, lsl #30
    a5b0:	0d941c00 	ldceq	12, cr1, [r4]
    a5b4:	3f010000 	svccc	0x00010000
    a5b8:	0007cc03 	andeq	ip, r7, r3, lsl #24
    a5bc:	00389500 	eorseq	r9, r8, r0, lsl #10
    a5c0:	1eae1c00 	cdpne	12, 10, cr1, cr14, cr0, {0}
    a5c4:	3f010000 	svccc	0x00010000
    a5c8:	00003a03 	andeq	r3, r0, r3, lsl #20
    a5cc:	0038b300 	eorseq	fp, r8, r0, lsl #6
    a5d0:	1e772200 	cdpne	2, 7, cr2, cr7, cr0, {0}
    a5d4:	41010000 	tstmi	r1, r0
    a5d8:	00003a03 	andeq	r3, r0, r3, lsl #20
    a5dc:	0038fd00 	eorseq	pc, r8, r0, lsl #26
    a5e0:	01200000 	teqeq	r0, r0
    a5e4:	00001d85 	andeq	r1, r0, r5, lsl #27
    a5e8:	01038e01 	tsteq	r3, r1, lsl #28
    a5ec:	00000045 	andeq	r0, r0, r5, asr #32
    a5f0:	30005778 	andcc	r5, r0, r8, ror r7
    a5f4:	300058c8 	andcc	r5, r0, r8, asr #17
    a5f8:	0000391b 	andeq	r3, r0, fp, lsl r9
    a5fc:	00000d96 	muleq	r0, r6, sp
    a600:	000d941c 	andeq	r9, sp, ip, lsl r4
    a604:	038e0100 	orreq	r0, lr, #0
    a608:	000007cc 	andeq	r0, r0, ip, asr #15
    a60c:	00003946 	andeq	r3, r0, r6, asr #18
    a610:	001eae1c 	andseq	sl, lr, ip, lsl lr
    a614:	038e0100 	orreq	r0, lr, #0
    a618:	0000003a 	andeq	r0, r0, sl, lsr r0
    a61c:	0000397a 	andeq	r3, r0, sl, ror r9
    a620:	001e561c 	andseq	r5, lr, ip, lsl r6
    a624:	038e0100 	orreq	r0, lr, #0
    a628:	000003a7 	andeq	r0, r0, r7, lsr #7
    a62c:	000039ae 	andeq	r3, r0, lr, lsr #19
    a630:	001def22 	andseq	lr, sp, r2, lsr #30
    a634:	03900100 	orrseq	r0, r0, #0
    a638:	0000003a 	andeq	r0, r0, sl, lsr r0
    a63c:	000039f8 	strdeq	r3, [r0], -r8
    a640:	00126522 	andseq	r6, r2, r2, lsr #10
    a644:	03910100 	orrseq	r0, r1, #0
    a648:	00000045 	andeq	r0, r0, r5, asr #32
    a64c:	00003a16 	andeq	r3, r0, r6, lsl sl
    a650:	0001181e 	andeq	r1, r1, lr, lsl r8
    a654:	03930100 	orrseq	r0, r3, #0
    a658:	00000090 	muleq	r0, r0, r0
    a65c:	001df726 	andseq	pc, sp, r6, lsr #14
    a660:	03e90100 	mvneq	r0, #0
    a664:	3000580c 	andcc	r5, r0, ip, lsl #16
    a668:	7e012000 	cdpvc	0, 0, cr2, cr1, cr0, {0}
    a66c:	01000026 	tsteq	r0, r6, lsr #32
    a670:	450102ea 	strmi	r0, [r1, #-746]	; 0x2ea
    a674:	c8000000 	stmdagt	r0, {}
    a678:	74300058 	ldrtvc	r0, [r0], #-88	; 0x58
    a67c:	5830005a 	ldmdapl	r0!, {r1, r3, r4, r6}
    a680:	d100003a 	tstle	r0, sl, lsr r0
    a684:	1c00000d 	stcne	0, cr0, [r0], {13}
    a688:	00000d94 	muleq	r0, r4, sp
    a68c:	cc02ea01 	stcgt	10, cr14, [r2], {1}
    a690:	77000007 	strvc	r0, [r0, -r7]
    a694:	1e00003a 	mcrne	0, 0, r0, cr0, cr10, {1}
    a698:	00000118 	andeq	r0, r0, r8, lsl r1
    a69c:	9002ed01 	andls	lr, r2, r1, lsl #26
    a6a0:	00000000 	andeq	r0, r0, r0
    a6a4:	1d140120 	ldfnes	f0, [r4, #-128]	; 0xffffff80
    a6a8:	d5010000 	strle	r0, [r1]
    a6ac:	00450102 	subeq	r0, r5, r2, lsl #2
    a6b0:	5a740000 	bpl	1d0a6b8 <MEM_SIZE+0x150a6b8>
    a6b4:	5ae83000 	bpl	ffa166bc <rEINTPEND+0xa9a16614>
    a6b8:	3aab3000 	bcc	fead66c0 <rEINTPEND+0xa8ad6618>
    a6bc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    a6c0:	941c0000 	ldrls	r0, [ip]
    a6c4:	0100000d 	tsteq	r0, sp
    a6c8:	07cc02d5 	undefined instruction 0x07cc02d5
    a6cc:	3ad60000 	bcc	ff58a6d4 <rEINTPEND+0xa958a62c>
    a6d0:	20000000 	andcs	r0, r0, r0
    a6d4:	0028a601 	eoreq	sl, r8, r1, lsl #12
    a6d8:	02750100 	rsbseq	r0, r5, #0
    a6dc:	00004501 	andeq	r4, r0, r1, lsl #10
    a6e0:	005ae800 	subseq	lr, sl, r0, lsl #16
    a6e4:	005cb030 	subseq	fp, ip, r0, lsr r0
    a6e8:	003af430 	eorseq	pc, sl, r0, lsr r4
    a6ec:	000e3b00 	andeq	r3, lr, r0, lsl #22
    a6f0:	0d941c00 	ldceq	12, cr1, [r4]
    a6f4:	75010000 	strvc	r0, [r1]
    a6f8:	0007cc02 	andeq	ip, r7, r2, lsl #24
    a6fc:	003b1300 	eorseq	r1, fp, r0, lsl #6
    a700:	01181e00 	tsteq	r8, r0, lsl #28
    a704:	77010000 	strvc	r0, [r1, -r0]
    a708:	00009002 	andeq	r9, r0, r2
    a70c:	011b0000 	tsteq	fp, r0
    a710:	00001e45 	andeq	r1, r0, r5, asr #28
    a714:	01025201 	tsteq	r2, r1, lsl #4
    a718:	00000045 	andeq	r0, r0, r5, asr #32
    a71c:	30005cb0 	undefined instruction 0x30005cb0
    a720:	30005cf8 	strdcc	r5, [r0], -r8
    a724:	0e685d01 	cdpeq	13, 6, cr5, cr8, cr1, {0}
    a728:	941c0000 	ldrls	r0, [ip]
    a72c:	0100000d 	tsteq	r0, sp
    a730:	07cc0252 	undefined instruction 0x07cc0252
    a734:	3b470000 	blcc	11ca73c <MEM_SIZE+0x9ca73c>
    a738:	20000000 	andcs	r0, r0, r0
    a73c:	001f1201 	andseq	r1, pc, r1, lsl #4
    a740:	01c80100 	biceq	r0, r8, r0, lsl #2
    a744:	00004501 	andeq	r4, r0, r1, lsl #10
    a748:	005cf800 	subseq	pc, ip, r0, lsl #16
    a74c:	005df830 	subseq	pc, sp, r0, lsr r8
    a750:	003b6530 	eorseq	r6, fp, r0, lsr r5
    a754:	000eb300 	andeq	fp, lr, r0, lsl #6
    a758:	6c642100 	stfvse	f2, [r4]
    a75c:	c8010079 	stmdagt	r1, {r0, r3, r4, r5, r6}
    a760:	00009b01 	andeq	r9, r0, r1, lsl #22
    a764:	003b8400 	eorseq	r8, fp, r0, lsl #8
    a768:	0ecc2200 	cdpeq	2, 12, cr2, cr12, cr0, {0}
    a76c:	ca010000 	bgt	4a774 <DISABLE_IRQ+0x4a6f4>
    a770:	00004501 	andeq	r4, r0, r1, lsl #10
    a774:	003ba200 	eorseq	sl, fp, r0, lsl #4
    a778:	01181e00 	tsteq	r8, r0, lsl #28
    a77c:	cc010000 	stcgt	0, cr0, [r1], {0}
    a780:	00009001 	andeq	r9, r0, r1
    a784:	01200000 	teqeq	r0, r0
    a788:	00001e36 	andeq	r1, r0, r6, lsr lr
    a78c:	01021301 	tsteq	r2, r1, lsl #6
    a790:	00000045 	andeq	r0, r0, r5, asr #32
    a794:	30005df8 	strdcc	r5, [r0], -r8
    a798:	30005e90 	mulcc	r0, r0, lr
    a79c:	00003bd6 	ldrdeq	r3, [r0], -r6
    a7a0:	00000f2e 	andeq	r0, r0, lr, lsr #30
    a7a4:	001f0c1c 	andseq	r0, pc, ip, lsl ip
    a7a8:	02130100 	andseq	r0, r3, #0
    a7ac:	00000045 	andeq	r0, r0, r5, asr #32
    a7b0:	00003bf5 	strdeq	r3, [r0], -r5
    a7b4:	001f341c 	andseq	r3, pc, ip, lsl r4
    a7b8:	02130100 	andseq	r0, r3, #0
    a7bc:	00000045 	andeq	r0, r0, r5, asr #32
    a7c0:	00003c1e 	andeq	r3, r0, lr, lsl ip
    a7c4:	001e081c 	andseq	r0, lr, ip, lsl r8
    a7c8:	02130100 	andseq	r0, r3, #0
    a7cc:	00000045 	andeq	r0, r0, r5, asr #32
    a7d0:	00003c3c 	andeq	r3, r0, ip, lsr ip
    a7d4:	001e021c 	andseq	r0, lr, ip, lsl r2
    a7d8:	02130100 	andseq	r0, r3, #0
    a7dc:	0000005e 	andeq	r0, r0, lr, asr r0
    a7e0:	00003c5a 	andeq	r3, r0, sl, asr ip
    a7e4:	001d4a1e 	andseq	r4, sp, lr, lsl sl
    a7e8:	02160100 	andseq	r0, r6, #0
    a7ec:	0000009b 	muleq	r0, fp, r0
    a7f0:	0023a822 	eoreq	sl, r3, r2, lsr #16
    a7f4:	02170100 	andseq	r0, r7, #0
    a7f8:	0000009b 	muleq	r0, fp, r0
    a7fc:	00003c78 	andeq	r3, r0, r8, ror ip
    a800:	bc012700 	stclt	7, cr2, [r1], {0}
    a804:	0100001c 	tsteq	r0, ip, lsl r0
    a808:	00450148 	subeq	r0, r5, r8, asr #2
    a80c:	5e900000 	cdppl	0, 9, cr0, cr0, cr0, {0}
    a810:	61903000 	orrsvs	r3, r0, r0
    a814:	3c8b3000 	stccc	0, cr3, [fp], {0}
    a818:	10100000 	andsne	r0, r0, r0
    a81c:	e5170000 	ldr	r0, [r7]
    a820:	01000014 	tsteq	r0, r4, lsl r0
    a824:	0007cc48 	andeq	ip, r7, r8, asr #24
    a828:	003cb600 	eorseq	fp, ip, r0, lsl #12
    a82c:	08db1700 	ldmeq	fp, {r8, r9, sl, ip}^
    a830:	48010000 	stmdami	r1, {}
    a834:	000003a7 	andeq	r0, r0, r7, lsr #7
    a838:	00003cf5 	strdeq	r3, [r0], -r5
    a83c:	001f1c17 	andseq	r1, pc, r7, lsl ip
    a840:	4d480100 	stfmie	f0, [r8]
    a844:	13000005 	movwne	r0, #5
    a848:	1700003d 	smladxne	r0, sp, r0, r0
    a84c:	00001adb 	ldrdeq	r1, [r0], -fp
    a850:	003a4901 	eorseq	r4, sl, r1, lsl #18
    a854:	3d310000 	ldccc	0, cr0, [r1]
    a858:	ef170000 	svc	0x00170000
    a85c:	0100001a 	tsteq	r0, sl, lsl r0
    a860:	00005e49 	andeq	r5, r0, r9, asr #28
    a864:	003d6500 	eorseq	r6, sp, r0, lsl #10
    a868:	06251700 	strteq	r1, [r5], -r0, lsl #14
    a86c:	49010000 	stmdbmi	r1, {}
    a870:	000005cd 	andeq	r0, r0, sp, asr #11
    a874:	00003de5 	andeq	r3, r0, r5, ror #27
    a878:	000b0317 	andeq	r0, fp, r7, lsl r3
    a87c:	5e4a0100 	dvfple	f0, f2, f0
    a880:	04000000 	streq	r0, [r0]
    a884:	1700003e 	smladxne	r0, lr, r0, r0
    a888:	00001d9e 	muleq	r0, lr, sp
    a88c:	07424a01 	strbeq	r4, [r2, -r1, lsl #20]
    a890:	3e230000 	cdpcc	0, 2, cr0, cr3, cr0, {0}
    a894:	63170000 	tstvs	r7, #0
    a898:	0100001d 	tsteq	r0, sp, lsl r0
    a89c:	00003a4a 	andeq	r3, r0, sl, asr #20
    a8a0:	003e7300 	eorseq	r7, lr, r0, lsl #6
    a8a4:	1d7d2800 	ldclne	8, cr2, [sp]
    a8a8:	4d010000 	stcmi	0, cr0, [r1]
    a8ac:	000005cd 	andeq	r0, r0, sp, asr #11
    a8b0:	01006929 	tsteq	r0, r9, lsr #18
    a8b4:	00005e4e 	andeq	r5, r0, lr, asr #28
    a8b8:	003e9d00 	eorseq	r9, lr, r0, lsl #26
    a8bc:	01182800 	tsteq	r8, r0, lsl #16
    a8c0:	50010000 	andpl	r0, r1, r0
    a8c4:	00000090 	muleq	r0, r0, r0
    a8c8:	0008ed2a 	andeq	lr, r8, sl, lsr #26
    a8cc:	00602c00 	rsbeq	r2, r0, r0, lsl #24
    a8d0:	0003f830 	andeq	pc, r3, r0, lsr r8
    a8d4:	24c10100 	strbcs	r0, [r1], #256	; 0x100
    a8d8:	00000905 	andeq	r0, r0, r5, lsl #18
    a8dc:	0008fa24 	andeq	pc, r8, r4, lsr #20
    a8e0:	2b000000 	blcs	a8e8 <DISABLE_IRQ+0xa868>
    a8e4:	000014d1 	ldrdeq	r1, [r0], -r1
    a8e8:	07cc490d 	strbeq	r4, [ip, sp, lsl #18]
    a8ec:	01010000 	tsteq	r1, r0
    a8f0:	00038f2b 	andeq	r8, r3, fp, lsr #30
    a8f4:	cc4a0d00 	mcrrgt	13, 0, r0, sl, cr0
    a8f8:	01000007 	tsteq	r0, r7
    a8fc:	130f2b01 	movwne	r2, #64257	; 0xfb01
    a900:	4c0d0000 	stcmi	0, cr0, [sp], {0}
    a904:	0000003a 	andeq	r0, r0, sl, lsr r0
    a908:	0c2b0101 	stfeqs	f0, [fp], #-4
    a90c:	0d000014 	stceq	0, cr0, [r0, #-80]	; 0xffffffb0
    a910:	00003a4d 	andeq	r3, r0, sp, asr #20
    a914:	2b010100 	blcs	4ad1c <DISABLE_IRQ+0x4ac9c>
    a918:	000013e0 	andeq	r1, r0, r0, ror #7
    a91c:	003a4e0d 	eorseq	r4, sl, sp, lsl #28
    a920:	01010000 	tsteq	r1, r0
    a924:	00131d2b 	andseq	r1, r3, fp, lsr #26
    a928:	03500d00 	cmpeq	r0, #0
    a92c:	01000007 	tsteq	r0, r7
    a930:	0e502b01 	vnmlseq.f64	d18, d0, d1
    a934:	510d0000 	tstpl	sp, r0
    a938:	0000003a 	andeq	r0, r0, sl, lsr r0
    a93c:	852b0101 	strhi	r0, [fp, #-257]!	; 0x101
    a940:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    a944:	00003a52 	andeq	r3, r0, r2, asr sl
    a948:	2b010100 	blcs	4ad50 <DISABLE_IRQ+0x4acd0>
    a94c:	00001384 	andeq	r1, r0, r4, lsl #7
    a950:	069f550d 	ldreq	r5, [pc], sp, lsl #10
    a954:	01010000 	tsteq	r1, r0
    a958:	0000850d 	andeq	r8, r0, sp, lsl #10
    a95c:	00109500 	andseq	r9, r0, r0, lsl #10
    a960:	05630e00 	strbeq	r0, [r3, #-3584]!	; 0xe00
    a964:	00ff0000 	rscseq	r0, pc, r0
    a968:	0012df2b 	andseq	sp, r2, fp, lsr #30
    a96c:	85570d00 	ldrbhi	r0, [r7, #-3328]	; 0xd00
    a970:	01000010 	tsteq	r0, r0, lsl r0
    a974:	030e0d01 	movweq	r0, #60673	; 0xed01
    a978:	10b20000 	adcsne	r0, r2, r0
    a97c:	630e0000 	movwvs	r0, #57344	; 0xe000
    a980:	03000005 	movweq	r0, #5
    a984:	12ea2b00 	rscne	r2, sl, #0
    a988:	5d0d0000 	stcpl	0, cr0, [sp]
    a98c:	000010a2 	andeq	r1, r0, r2, lsr #1
    a990:	5d2b0101 	stfpls	f0, [fp, #-4]!
    a994:	0d000014 	stceq	0, cr0, [r0, #-80]	; 0xffffffb0
    a998:	00009b5e 	andeq	r9, r0, lr, asr fp
    a99c:	2b010100 	blcs	4ada4 <DISABLE_IRQ+0x4ad24>
    a9a0:	000013ec 	andeq	r1, r0, ip, ror #7
    a9a4:	005e5f0d 	subseq	r5, lr, sp, lsl #30
    a9a8:	01010000 	tsteq	r1, r0
    a9ac:	0015012b 	andseq	r0, r5, fp, lsr #2
    a9b0:	9f600d00 	svcls	0x00600d00
    a9b4:	01000006 	tsteq	r0, r6
    a9b8:	141b2b01 	ldrne	r2, [fp], #-2817	; 0xb01
    a9bc:	610d0000 	tstvs	sp, r0
    a9c0:	00001085 	andeq	r1, r0, r5, lsl #1
    a9c4:	602b0101 	eorvs	r0, fp, r1, lsl #2
    a9c8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    a9cc:	0007c162 	andeq	ip, r7, r2, ror #2
    a9d0:	2b010100 	blcs	4add8 <DISABLE_IRQ+0x4ad58>
    a9d4:	00001439 	andeq	r1, r0, r9, lsr r4
    a9d8:	0045660d 	subeq	r6, r5, sp, lsl #12
    a9dc:	01010000 	tsteq	r1, r0
    a9e0:	0013fb2b 	andseq	pc, r3, fp, lsr #22
    a9e4:	45670d00 	strbmi	r0, [r7, #-3328]!	; 0xd00
    a9e8:	01000000 	tsteq	r0, r0
    a9ec:	13012b01 	movwne	r2, #6913	; 0x1b01
    a9f0:	680d0000 	stmdavs	sp, {}
    a9f4:	00000045 	andeq	r0, r0, r5, asr #32
    a9f8:	f52b0101 	undefined instruction 0xf52b0101
    a9fc:	0d000012 	stceq	0, cr0, [r0, #-72]	; 0xffffffb8
    aa00:	00004569 	andeq	r4, r0, r9, ror #10
    aa04:	0d010100 	stfeqs	f0, [r1]
    aa08:	00000849 	andeq	r0, r0, r9, asr #16
    aa0c:	00001144 	andeq	r1, r0, r4, asr #2
    aa10:	0005630e 	andeq	r6, r5, lr, lsl #6
    aa14:	2b001f00 	blcs	1261c <DISABLE_IRQ+0x1259c>
    aa18:	000013b0 	undefined instruction 0x000013b0
    aa1c:	11346a0d 	teqne	r4, sp, lsl #20
    aa20:	01010000 	tsteq	r1, r0
    aa24:	00132d2b 	andseq	r2, r3, fp, lsr #26
    aa28:	9f6b0d00 	svcls	0x006b0d00
    aa2c:	01000006 	tsteq	r0, r6
    aa30:	13532b01 	cmpne	r3, #1024	; 0x400
    aa34:	6c0d0000 	stcvs	0, cr0, [sp], {0}
    aa38:	00001085 	andeq	r1, r0, r5, lsl #1
    aa3c:	c90d0101 	stmdbgt	sp, {r0, r8}
    aa40:	7b000008 	blvc	aa68 <DISABLE_IRQ+0xa9e8>
    aa44:	0e000011 	mcreq	0, 0, r0, cr0, cr1, {0}
    aa48:	00000563 	andeq	r0, r0, r3, ror #10
    aa4c:	c22b0013 	eorgt	r0, fp, #19
    aa50:	0d000014 	stceq	0, cr0, [r0, #-80]	; 0xffffffb0
    aa54:	00116b70 	andseq	r6, r1, r0, ror fp
    aa58:	2b010100 	blcs	4ae60 <DISABLE_IRQ+0x4ade0>
    aa5c:	000014bd 	undefined instruction 0x000014bd
    aa60:	1195710d 	orrsne	r7, r5, sp, lsl #2
    aa64:	01010000 	tsteq	r1, r0
    aa68:	08c9040a 	stmiaeq	r9, {r1, r3, sl}^
    aa6c:	462b0000 	strtmi	r0, [fp], -r0
    aa70:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    aa74:	00005e72 	andeq	r5, r0, r2, ror lr
    aa78:	2b010100 	blcs	4ae80 <DISABLE_IRQ+0x4ae00>
    aa7c:	0000150f 	andeq	r1, r0, pc, lsl #10
    aa80:	0804730d 	stmdaeq	r4, {r0, r2, r3, r8, r9, ip, sp, lr}
    aa84:	01010000 	tsteq	r1, r0
    aa88:	0010332b 	andseq	r3, r0, fp, lsr #6
    aa8c:	37790d00 	ldrbcc	r0, [r9, -r0, lsl #26]!
    aa90:	01000007 	tsteq	r0, r7
    aa94:	14e02b01 	strbtne	r2, [r0], #2817	; 0xb01
    aa98:	7e0d0000 	cdpvc	0, 0, cr0, cr13, cr0, {0}
    aa9c:	0000069f 	muleq	r0, pc, r6
    aaa0:	7c2b0101 	stfvcs	f0, [fp], #-4
    aaa4:	0d000014 	stceq	0, cr0, [r0, #-80]	; 0xffffffb0
    aaa8:	0010857f 	andseq	r8, r0, pc, ror r5
    aaac:	2b010100 	blcs	4aeb4 <DISABLE_IRQ+0x4ae34>
    aab0:	000014ee 	andeq	r1, r0, lr, ror #9
    aab4:	07c1800d 	strbeq	r8, [r1, sp]
    aab8:	01010000 	tsteq	r1, r0
    aabc:	000e2a00 	andeq	r2, lr, r0, lsl #20
    aac0:	23000200 	movwcs	r0, #512	; 0x200
    aac4:	04000021 	streq	r0, [r0], #-33	; 0x21
    aac8:	00004d01 	andeq	r4, r0, r1, lsl #26
    aacc:	205c0100 	subscs	r0, ip, r0, lsl #2
    aad0:	00630000 	rsbeq	r0, r3, r0
    aad4:	61900000 	orrsvs	r0, r0, r0
    aad8:	68543000 	ldmdavs	r4, {ip, sp}^
    aadc:	22573000 	subscs	r3, r7, #0
    aae0:	64020000 	strvs	r0, [r2]
    aae4:	02000005 	andeq	r0, r0, #5
    aae8:	06010321 	streq	r0, [r1], -r1, lsr #6
    aaec:	000000a0 	andeq	r0, r0, r0, lsr #1
    aaf0:	9e080103 	adflse	f0, f0, f3
    aaf4:	04000000 	streq	r0, [r0]
    aaf8:	000004f7 	strdeq	r0, [r0], -r7
    aafc:	00332402 	eorseq	r2, r3, r2, lsl #8
    ab00:	fb040000 	blx	10ab0a <DISABLE_IRQ+0x10aa8a>
    ab04:	0200000a 	andeq	r0, r0, #10
    ab08:	00005026 	andeq	r5, r0, r6, lsr #32
    ab0c:	07020300 	streq	r0, [r2, -r0, lsl #6]
    ab10:	0000008b 	andeq	r0, r0, fp, lsl #1
    ab14:	59050203 	stmdbpl	r5, {r0, r1, r9}
    ab18:	04000000 	streq	r0, [r0]
    ab1c:	00000338 	andeq	r0, r0, r8, lsr r3
    ab20:	00692802 	rsbeq	r2, r9, r2, lsl #16
    ab24:	04030000 	streq	r0, [r3]
    ab28:	00003707 	andeq	r3, r0, r7, lsl #14
    ab2c:	05040500 	streq	r0, [r4, #-1280]	; 0x500
    ab30:	00746e69 	rsbseq	r6, r4, r9, ror #28
    ab34:	00050803 	andeq	r0, r5, r3, lsl #16
    ab38:	03000000 	movweq	r0, #0
    ab3c:	002d0708 	eoreq	r0, sp, r8, lsl #14
    ab40:	9f040000 	svcls	0x00040000
    ab44:	02000003 	andeq	r0, r0, #3
    ab48:	0000692d 	andeq	r6, r0, sp, lsr #18
    ab4c:	01320400 	teqeq	r2, r0, lsl #8
    ab50:	22030000 	andcs	r0, r3, #0
    ab54:	00000069 	andeq	r0, r0, r9, rrx
    ab58:	000a2704 	andeq	r2, sl, r4, lsl #14
    ab5c:	5e2a0400 	cdppl	4, 2, cr0, cr10, cr0, {0}
    ab60:	04000000 	streq	r0, [r0]
    ab64:	0000144b 	andeq	r1, r0, fp, asr #8
    ab68:	003a2b04 	eorseq	r2, sl, r4, lsl #22
    ab6c:	29040000 	stmdbcs	r4, {}
    ab70:	04000008 	streq	r0, [r0], #-8
    ab74:	00005e2c 	andeq	r5, r0, ip, lsr #28
    ab78:	05040600 	streq	r0, [r4, #-1536]	; 0x600
    ab7c:	00026143 	andeq	r6, r2, r3, asr #2
    ab80:	0bb50700 	bleq	fed4c788 <rEINTPEND+0xa8d4c6e0>
    ab84:	07000000 	streq	r0, [r0, -r0]
    ab88:	00000b6e 	andeq	r0, r0, lr, ror #22
    ab8c:	03aa0701 	undefined instruction 0x03aa0701
    ab90:	07020000 	streq	r0, [r2, -r0]
    ab94:	00000921 	andeq	r0, r0, r1, lsr #18
    ab98:	06350703 	ldrteq	r0, [r5], -r3, lsl #14
    ab9c:	07040000 	streq	r0, [r4, -r0]
    aba0:	00000a35 	andeq	r0, r0, r5, lsr sl
    aba4:	0ad40705 	beq	ff50c7c0 <rEINTPEND+0xa950c718>
    aba8:	07060000 	streq	r0, [r6, -r0]
    abac:	000002ac 	andeq	r0, r0, ip, lsr #5
    abb0:	06e30707 	strbteq	r0, [r3], r7, lsl #14
    abb4:	07080000 	streq	r0, [r8, -r0]
    abb8:	000001ee 	andeq	r0, r0, lr, ror #3
    abbc:	08cd0709 	stmiaeq	sp, {r0, r3, r8, r9, sl}^
    abc0:	070a0000 	streq	r0, [sl, -r0]
    abc4:	00000ba1 	andeq	r0, r0, r1, lsr #23
    abc8:	0480070b 	streq	r0, [r0], #1803	; 0x70b
    abcc:	070c0000 	streq	r0, [ip, -r0]
    abd0:	000008bc 	undefined instruction 0x000008bc
    abd4:	0705070d 	streq	r0, [r5, -sp, lsl #14]
    abd8:	070e0000 	streq	r0, [lr, -r0]
    abdc:	000006d0 	ldrdeq	r0, [r0], -r0
    abe0:	0340070f 	movteq	r0, #1807	; 0x70f
    abe4:	07100000 	ldreq	r0, [r0, -r0]
    abe8:	0000096a 	andeq	r0, r0, sl, ror #18
    abec:	0b390711 	bleq	e4c838 <MEM_SIZE+0x64c838>
    abf0:	07120000 	ldreq	r0, [r2, -r0]
    abf4:	0000060e 	andeq	r0, r0, lr, lsl #12
    abf8:	02be0713 	adcseq	r0, lr, #4980736	; 0x4c0000
    abfc:	07140000 	ldreq	r0, [r4, -r0]
    ac00:	00000690 	muleq	r0, r0, r6
    ac04:	08e50715 	stmiaeq	r5!, {r0, r2, r4, r8, r9, sl}^
    ac08:	07160000 	ldreq	r0, [r6, -r0]
    ac0c:	000002d0 	ldrdeq	r0, [r0], -r0
    ac10:	090a0717 	stmdbeq	sl, {r0, r1, r2, r4, r8, r9, sl}
    ac14:	07180000 	ldreq	r0, [r8, -r0]
    ac18:	00000215 	andeq	r0, r0, r5, lsl r2
    ac1c:	07760719 	undefined instruction 0x07760719
    ac20:	071a0000 	ldreq	r0, [sl, -r0]
    ac24:	000002f0 	strdeq	r0, [r0], -r0
    ac28:	0bc1071b 	bleq	ff04c89c <rEINTPEND+0xa904c7f4>
    ac2c:	071c0000 	ldreq	r0, [ip, -r0]
    ac30:	00000405 	andeq	r0, r0, r5, lsl #8
    ac34:	0810071d 	ldmdaeq	r0, {r0, r2, r3, r4, r8, r9, sl}
    ac38:	071e0000 	ldreq	r0, [lr, -r0]
    ac3c:	00000932 	andeq	r0, r0, r2, lsr r9
    ac40:	0267071f 	rsbeq	r0, r7, #8126464	; 0x7c0000
    ac44:	07200000 	streq	r0, [r0, -r0]!
    ac48:	000005b1 	undefined instruction 0x000005b1
    ac4c:	06440721 	strbeq	r0, [r4], -r1, lsr #14
    ac50:	07220000 	streq	r0, [r2, -r0]!
    ac54:	000007ff 	strdeq	r0, [r0], -pc
    ac58:	03ba0723 	undefined instruction 0x03ba0723
    ac5c:	07240000 	streq	r0, [r4, -r0]!
    ac60:	00000899 	muleq	r0, r9, r8
    ac64:	0b4b0725 	bleq	12cc900 <MEM_SIZE+0xacc900>
    ac68:	07260000 	streq	r0, [r6, -r0]!
    ac6c:	00000883 	andeq	r0, r0, r3, lsl #17
    ac70:	023e0727 	eorseq	r0, lr, #10223616	; 0x9c0000
    ac74:	07280000 	streq	r0, [r8, -r0]!
    ac78:	000009b7 	undefined instruction 0x000009b7
    ac7c:	0ae50729 	beq	ff94c928 <rEINTPEND+0xa994c880>
    ac80:	072a0000 	streq	r0, [sl, -r0]!
    ac84:	00000a87 	andeq	r0, r0, r7, lsl #21
    ac88:	0948072b 	stmdbeq	r8, {r0, r1, r3, r5, r8, r9, sl}^
    ac8c:	072c0000 	streq	r0, [ip, -r0]!
    ac90:	000009f5 	strdeq	r0, [r0], -r5
    ac94:	09c7072d 	stmibeq	r7, {r0, r2, r3, r5, r8, r9, sl}^
    ac98:	072e0000 	streq	r0, [lr, -r0]!
    ac9c:	000003cf 	andeq	r0, r0, pc, asr #7
    aca0:	06a7072f 	strteq	r0, [r7], pc, lsr #14
    aca4:	07300000 	ldreq	r0, [r0, -r0]!
    aca8:	00000413 	andeq	r0, r0, r3, lsl r4
    acac:	09890731 	stmibeq	r9, {r0, r4, r5, r8, r9, sl}
    acb0:	07320000 	ldreq	r0, [r2, -r0]!
    acb4:	00000352 	andeq	r0, r0, r2, asr r3
    acb8:	05fd0733 	ldrbeq	r0, [sp, #1843]!	; 0x733
    acbc:	07340000 	ldreq	r0, [r4, -r0]!
    acc0:	00000bd5 	ldrdeq	r0, [r0], -r5
    acc4:	04e10735 	strbteq	r0, [r1], #1845	; 0x735
    acc8:	07360000 	ldreq	r0, [r6, -r0]!
    accc:	000007a8 	andeq	r0, r0, r8, lsr #15
    acd0:	07920737 	undefined instruction 0x07920737
    acd4:	07380000 	ldreq	r0, [r8, -r0]!
    acd8:	00000316 	andeq	r0, r0, r6, lsl r3
    acdc:	06f30739 	undefined instruction 0x06f30739
    ace0:	073a0000 	ldreq	r0, [sl, -r0]!
    ace4:	000003e2 	andeq	r0, r0, r2, ror #7
    ace8:	06bc073b 	undefined instruction 0x06bc073b
    acec:	073c0000 	ldreq	r0, [ip, -r0]!
    acf0:	0000050f 	andeq	r0, r0, pc, lsl #10
    acf4:	056d073d 	strbeq	r0, [sp, #-1853]!	; 0x73d
    acf8:	073e0000 	ldreq	r0, [lr, -r0]!
    acfc:	000004cb 	andeq	r0, r0, fp, asr #9
    ad00:	036e073f 	cmneq	lr, #16515072	; 0xfc0000
    ad04:	00c00000 	sbceq	r0, r0, r0
    ad08:	00058b07 	andeq	r8, r5, r7, lsl #22
    ad0c:	0700c100 	streq	ip, [r0, -r0, lsl #2]
    ad10:	00000837 	andeq	r0, r0, r7, lsr r8
    ad14:	740700c2 	strvc	r0, [r7], #-194	; 0xc2
    ad18:	c3000006 	movwgt	r0, #6
    ad1c:	04060000 	streq	r0, [r6]
    ad20:	02bea005 	adcseq	sl, lr, #5
    ad24:	f5070000 	undefined instruction 0xf5070000
    ad28:	0000000d 	andeq	r0, r0, sp
    ad2c:	000de607 	andeq	lr, sp, r7, lsl #12
    ad30:	d9070100 	stmdble	r7, {r8}
    ad34:	0200000e 	andeq	r0, r0, #14
    ad38:	000f2107 	andeq	r2, pc, r7, lsl #2
    ad3c:	37070300 	strcc	r0, [r7, -r0, lsl #6]
    ad40:	0400000d 	streq	r0, [r0], #-13
    ad44:	000f6907 	andeq	r6, pc, r7, lsl #18
    ad48:	3f070500 	svccc	0x00070500
    ad4c:	0600000e 	streq	r0, [r0], -lr
    ad50:	000e2f07 	andeq	r2, lr, r7, lsl #30
    ad54:	37070700 	strcc	r0, [r7, -r0, lsl #14]
    ad58:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    ad5c:	000d4407 	andeq	r4, sp, r7, lsl #8
    ad60:	ad070900 	stcge	9, cr0, [r7]
    ad64:	0a00000d 	beq	ada0 <DISABLE_IRQ+0xad20>
    ad68:	000e1607 	andeq	r1, lr, r7, lsl #12
    ad6c:	7f070b00 	svcvc	0x00070b00
    ad70:	0c00000e 	stceq	0, cr0, [r0], {14}
    ad74:	000f0207 	andeq	r0, pc, r7, lsl #4
    ad78:	08000d00 	stmdaeq	r0, {r8, sl, fp}
    ad7c:	00000c09 	andeq	r0, r0, r9, lsl #24
    ad80:	e7230608 	str	r0, [r3, -r8, lsl #12]!
    ad84:	09000002 	stmdbeq	r0, {r1}
    ad88:	00000311 	andeq	r0, r0, r1, lsl r3
    ad8c:	02e72406 	rsceq	r2, r7, #100663296	; 0x6000000
    ad90:	23020000 	movwcs	r0, #8192	; 0x2000
    ad94:	02810900 	addeq	r0, r1, #0
    ad98:	25060000 	strcs	r0, [r6]
    ad9c:	000002e7 	andeq	r0, r0, r7, ror #5
    ada0:	00042302 	andeq	r2, r4, r2, lsl #6
    ada4:	02be040a 	adcseq	r0, lr, #167772160	; 0xa000000
    ada8:	09040000 	stmdbeq	r4, {}
    adac:	0600000c 	streq	r0, [r0], -ip
    adb0:	0002be26 	andeq	fp, r2, r6, lsr #28
    adb4:	065c0800 	ldrbeq	r0, [ip], -r0, lsl #16
    adb8:	07100000 	ldreq	r0, [r0, -r0]
    adbc:	00033d2f 	andeq	r3, r3, pc, lsr #26
    adc0:	0ac90900 	beq	ff24d1c8 <rEINTPEND+0xa924d120>
    adc4:	31070000 	tstcc	r7, r0
    adc8:	000002ed 	andeq	r0, r0, sp, ror #5
    adcc:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    add0:	000008e0 	andeq	r0, r0, r0, ror #17
    add4:	033d3207 	teqeq	sp, #1879048192	; 0x70000000
    add8:	23020000 	movwcs	r0, #8192	; 0x2000
    addc:	09000908 	stmdbeq	r0, {r3, r8, fp}
    ade0:	33070000 	movwcc	r0, #28672	; 0x7000
    ade4:	0000003a 	andeq	r0, r0, sl, lsr r0
    ade8:	090c2302 	stmdbeq	ip, {r1, r8, r9, sp}
    adec:	00000427 	andeq	r0, r0, r7, lsr #8
    adf0:	003a3407 	eorseq	r3, sl, r7, lsl #8
    adf4:	23020000 	movwcs	r0, #8192	; 0x2000
    adf8:	040a000d 	streq	r0, [sl], #-13
    adfc:	0000003a 	andeq	r0, r0, sl, lsr r0
    ae00:	00065c04 	andeq	r5, r6, r4, lsl #24
    ae04:	f8360700 	undefined instruction 0xf8360700
    ae08:	08000002 	stmdaeq	r0, {r1}
    ae0c:	0000099f 	muleq	r0, pc, r9
    ae10:	e33a076c 	teq	sl, #28311552	; 0x1b00000
    ae14:	09000004 	stmdbeq	r0, {r2}
    ae18:	00001481 	andeq	r1, r0, r1, lsl #9
    ae1c:	04e33b07 	strbteq	r3, [r3], #2823	; 0xb07
    ae20:	23020000 	movwcs	r0, #8192	; 0x2000
    ae24:	044d0900 	strbeq	r0, [sp], #-2304	; 0x900
    ae28:	41070000 	tstmi	r7, r0
    ae2c:	000002ed 	andeq	r0, r0, sp, ror #5
    ae30:	09042302 	stmdbeq	r4, {r1, r8, r9, sp}
    ae34:	00000552 	andeq	r0, r0, r2, asr r5
    ae38:	04e94507 	strbteq	r4, [r9], #1287	; 0x507
    ae3c:	23020000 	movwcs	r0, #8192	; 0x2000
    ae40:	1aef090c 	bne	ffbcd278 <rEINTPEND+0xa9bcd1d0>
    ae44:	4b070000 	blmi	1cae4c <DISABLE_IRQ+0x1cadcc>
    ae48:	0000005e 	andeq	r0, r0, lr, asr r0
    ae4c:	09102302 	ldmdbeq	r0, {r1, r8, r9, sp}
    ae50:	00000878 	andeq	r0, r0, r8, ror r8
    ae54:	005e4c07 	subseq	r4, lr, r7, lsl #24
    ae58:	23020000 	movwcs	r0, #8192	; 0x2000
    ae5c:	1d350914 	ldcne	9, cr0, [r5, #-80]!	; 0xffffffb0
    ae60:	4d070000 	stcmi	0, cr0, [r7]
    ae64:	0000003a 	andeq	r0, r0, sl, lsr r0
    ae68:	09182302 	ldmdbeq	r8, {r1, r8, r9, sp}
    ae6c:	00001e5a 	andeq	r1, r0, sl, asr lr
    ae70:	003a5107 	eorseq	r5, sl, r7, lsl #2
    ae74:	23020000 	movwcs	r0, #8192	; 0x2000
    ae78:	03640919 	cmneq	r4, #409600	; 0x64000
    ae7c:	53070000 	movwpl	r0, #28672	; 0x7000
    ae80:	0000003a 	andeq	r0, r0, sl, lsr r0
    ae84:	091a2302 	ldmdbeq	sl, {r1, r8, r9, sp}
    ae88:	0000043f 	andeq	r0, r0, pc, lsr r4
    ae8c:	003a5607 	eorseq	r5, sl, r7, lsl #12
    ae90:	23020000 	movwcs	r0, #8192	; 0x2000
    ae94:	0bad091b 	bleq	feb4d308 <rEINTPEND+0xa8b4d260>
    ae98:	5a070000 	bpl	1caea0 <DISABLE_IRQ+0x1cae20>
    ae9c:	0000055d 	andeq	r0, r0, sp, asr r5
    aea0:	091c2302 	ldmdbeq	ip, {r1, r8, r9, sp}
    aea4:	00000bf8 	strdeq	r0, [r0], -r8
    aea8:	02ed5f07 	rsceq	r5, sp, #28
    aeac:	23020000 	movwcs	r0, #8192	; 0x2000
    aeb0:	0b030920 	bleq	cd338 <DISABLE_IRQ+0xcd2b8>
    aeb4:	63070000 	movwvs	r0, #28672	; 0x7000
    aeb8:	0000005e 	andeq	r0, r0, lr, asr r0
    aebc:	09282302 	stmdbeq	r8!, {r1, r8, r9, sp}
    aec0:	00000625 	andeq	r0, r0, r5, lsr #12
    aec4:	05636507 	strbeq	r6, [r3, #-1287]!	; 0x507
    aec8:	23020000 	movwcs	r0, #8192	; 0x2000
    aecc:	086e092c 	stmdaeq	lr!, {r2, r3, r5, r8, fp}^
    aed0:	66070000 	strvs	r0, [r7], -r0
    aed4:	000002ed 	andeq	r0, r0, sp, ror #5
    aed8:	09302302 	ldmdbeq	r0!, {r1, r8, r9, sp}
    aedc:	00000c0e 	andeq	r0, r0, lr, lsl #24
    aee0:	009b6807 	addseq	r6, fp, r7, lsl #16
    aee4:	23020000 	movwcs	r0, #8192	; 0x2000
    aee8:	07f30938 	undefined instruction 0x07f30938
    aeec:	69070000 	stmdbvs	r7, {}
    aef0:	0000009b 	muleq	r0, fp, r0
    aef4:	093c2302 	ldmdbeq	ip!, {r1, r8, r9, sp}
    aef8:	000005a7 	andeq	r0, r0, r7, lsr #11
    aefc:	05696b07 	strbeq	r6, [r9, #-2823]!	; 0xb07
    af00:	23020000 	movwcs	r0, #8192	; 0x2000
    af04:	736d0b40 	cmnvc	sp, #65536	; 0x10000
    af08:	6d070067 	stcvs	0, cr0, [r7, #-412]	; 0xfffffe64
    af0c:	000004e3 	andeq	r0, r0, r3, ror #9
    af10:	09442302 	stmdbeq	r4, {r1, r8, r9, sp}^
    af14:	00001630 	andeq	r1, r0, r0, lsr r6
    af18:	00b17007 	adcseq	r7, r1, r7
    af1c:	23020000 	movwcs	r0, #8192	; 0x2000
    af20:	08db0948 	ldmeq	fp, {r3, r6, r8, fp}^
    af24:	73070000 	movwvc	r0, #28672	; 0x7000
    af28:	0000033d 	andeq	r0, r0, sp, lsr r3
    af2c:	094c2302 	stmdbeq	ip, {r1, r8, r9, sp}^
    af30:	000009ac 	andeq	r0, r0, ip, lsr #19
    af34:	003a7507 	eorseq	r7, sl, r7, lsl #10
    af38:	23020000 	movwcs	r0, #8192	; 0x2000
    af3c:	07e60950 	ubfxeq	r0, r0, #18, #7
    af40:	76070000 	strvc	r0, [r7], -r0
    af44:	0000003a 	andeq	r0, r0, sl, lsr r0
    af48:	09512302 	ldmdbeq	r1, {r1, r8, r9, sp}^
    af4c:	0000053d 	andeq	r0, r0, sp, lsr r5
    af50:	056f7907 	strbeq	r7, [pc, #-2311]!	; a651 <DISABLE_IRQ+0xa5d1>
    af54:	23020000 	movwcs	r0, #8192	; 0x2000
    af58:	0ab50954 	beq	fed4d4b0 <rEINTPEND+0xa8d4d408>
    af5c:	7c070000 	stcvc	0, cr0, [r7], {0}
    af60:	000005f2 	strdeq	r0, [r0], -r2
    af64:	09582302 	ldmdbeq	r8, {r1, r8, r9, sp}^
    af68:	0000022b 	andeq	r0, r0, fp, lsr #4
    af6c:	062f8007 	strteq	r8, [pc], -r7
    af70:	23020000 	movwcs	r0, #8192	; 0x2000
    af74:	04ad095c 	strteq	r0, [sp], #2396	; 0x95c
    af78:	84070000 	strhi	r0, [r7]
    af7c:	0000003a 	andeq	r0, r0, sl, lsr r0
    af80:	09602302 	stmdbeq	r0!, {r1, r8, r9, sp}^
    af84:	00000255 	andeq	r0, r0, r5, asr r2
    af88:	005e8507 	subseq	r8, lr, r7, lsl #10
    af8c:	23020000 	movwcs	r0, #8192	; 0x2000
    af90:	075a0964 	ldrbeq	r0, [sl, -r4, ror #18]
    af94:	86070000 	strhi	r0, [r7], -r0
    af98:	000004e3 	andeq	r0, r0, r3, ror #9
    af9c:	00682302 	rsbeq	r2, r8, r2, lsl #6
    afa0:	0025040a 	eoreq	r0, r5, sl, lsl #8
    afa4:	e30c0000 	movw	r0, #49152	; 0xc000
    afa8:	f9000004 	undefined instruction 0xf9000004
    afac:	0d000004 	stceq	0, cr0, [r0, #-16]
    afb0:	000004f9 	strdeq	r0, [r0], -r9
    afb4:	040e0000 	streq	r0, [lr]
    afb8:	0b2f0807 	bleq	bccfdc <MEM_SIZE+0x3ccfdc>
    afbc:	071c0000 	ldreq	r0, [ip, -r0]
    afc0:	00055d5a 	andeq	r5, r5, sl, asr sp
    afc4:	05360900 	ldreq	r0, [r6, #-2304]!	; 0x900
    afc8:	27080000 	strcs	r0, [r8, -r0]
    afcc:	00000343 	andeq	r0, r0, r3, asr #6
    afd0:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    afd4:	00000867 	andeq	r0, r0, r7, ror #16
    afd8:	08442a08 	stmdaeq	r4, {r3, r9, fp, sp}^
    afdc:	23020000 	movwcs	r0, #8192	; 0x2000
    afe0:	0bad0910 	bleq	feb4d428 <rEINTPEND+0xa8b4d380>
    afe4:	2c080000 	stccs	0, cr0, [r8], {0}
    afe8:	0000055d 	andeq	r0, r0, sp, asr r5
    afec:	09142302 	ldmdbeq	r4, {r1, r8, r9, sp}
    aff0:	000005f6 	strdeq	r0, [r0], -r6
    aff4:	003a2e08 	eorseq	r2, sl, r8, lsl #28
    aff8:	23020000 	movwcs	r0, #8192	; 0x2000
    affc:	04730918 	ldrbteq	r0, [r3], #-2328	; 0x918
    b000:	2f080000 	svccs	0x00080000
    b004:	0000003a 	andeq	r0, r0, sl, lsr r0
    b008:	09192302 	ldmdbeq	r9, {r1, r8, r9, sp}
    b00c:	0000048e 	andeq	r0, r0, lr, lsl #9
    b010:	003a3008 	eorseq	r3, sl, r8
    b014:	23020000 	movwcs	r0, #8192	; 0x2000
    b018:	040a001a 	streq	r0, [sl], #-26
    b01c:	000004fc 	strdeq	r0, [r0], -ip
    b020:	0085040a 	addeq	r0, r5, sl, lsl #8
    b024:	040a0000 	streq	r0, [sl]
    b028:	000002ed 	andeq	r0, r0, sp, ror #5
    b02c:	0343040a 	movteq	r0, #13322	; 0x340a
    b030:	4b080000 	blmi	20b038 <DISABLE_IRQ+0x20afb8>
    b034:	2c000007 	stccs	0, cr0, [r0], {7}
    b038:	05f27c07 	ldrbeq	r7, [r2, #3079]!	; 0xc07
    b03c:	36090000 	strcc	r0, [r9], -r0
    b040:	09000005 	stmdbeq	r0, {r0, r2}
    b044:	0003432e 	andeq	r4, r3, lr, lsr #6
    b048:	00230200 	eoreq	r0, r3, r0, lsl #4
    b04c:	0007dd09 	andeq	sp, r7, r9, lsl #26
    b050:	bd300900 	ldclt	9, cr0, [r0]
    b054:	02000007 	andeq	r0, r0, #7
    b058:	e4091023 	str	r1, [r9], #-35	; 0x23
    b05c:	09000005 	stmdbeq	r0, {r0, r2}
    b060:	0000b131 	andeq	fp, r0, r1, lsr r1
    b064:	14230200 	strtne	r0, [r3], #-512	; 0x200
    b068:	000b0e09 	andeq	r0, fp, r9, lsl #28
    b06c:	b1320900 	teqlt	r2, r0, lsl #18
    b070:	02000000 	andeq	r0, r0, #0
    b074:	f0091823 	undefined instruction 0xf0091823
    b078:	09000005 	stmdbeq	r0, {r0, r2}
    b07c:	0007bd34 	andeq	fp, r7, r4, lsr sp
    b080:	1c230200 	sfmne	f0, 4, [r3]	; (stcne 2, cr0, [r3])
    b084:	00014e09 	andeq	r4, r1, r9, lsl #28
    b088:	bd350900 	ldclt	9, cr0, [r5]
    b08c:	02000007 	andeq	r0, r0, #7
    b090:	27092023 	strcs	r2, [r9, -r3, lsr #32]
    b094:	09000005 	stmdbeq	r0, {r0, r2}
    b098:	0000b136 	andeq	fp, r0, r6, lsr r1
    b09c:	24230200 	strtcs	r0, [r3], #-512	; 0x200
    b0a0:	00049b09 	andeq	r9, r4, r9, lsl #22
    b0a4:	b1370900 	teqlt	r7, r0, lsl #18
    b0a8:	02000000 	andeq	r0, r0, #0
    b0ac:	0a002823 	beq	15140 <DISABLE_IRQ+0x150c0>
    b0b0:	00057504 	andeq	r7, r5, r4, lsl #10
    b0b4:	0aa70800 	beq	fe9cd0bc <rEINTPEND+0xa89cd014>
    b0b8:	07180000 	ldreq	r0, [r8, -r0]
    b0bc:	00062f80 	andeq	r2, r6, r0, lsl #31
    b0c0:	05360900 	ldreq	r0, [r6, #-2304]!	; 0x900
    b0c4:	220a0000 	andcs	r0, sl, #0
    b0c8:	00000343 	andeq	r0, r0, r3, asr #6
    b0cc:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    b0d0:	00000447 	andeq	r0, r0, r7, asr #8
    b0d4:	005e230a 	subseq	r2, lr, sl, lsl #6
    b0d8:	23020000 	movwcs	r0, #8192	; 0x2000
    b0dc:	1b3f0910 	blne	fcd524 <MEM_SIZE+0x7cd524>
    b0e0:	240a0000 	strcs	r0, [sl]
    b0e4:	0000083e 	andeq	r0, r0, lr, lsr r8
    b0e8:	00142302 	andseq	r2, r4, r2, lsl #6
    b0ec:	05f8040a 	ldrbeq	r0, [r8, #1034]!	; 0x40a
    b0f0:	9f040000 	svcls	0x00040000
    b0f4:	07000009 	streq	r0, [r0, -r9]
    b0f8:	00034e89 	andeq	r4, r3, r9, lsl #29
    b0fc:	14af0f00 	strtne	r0, [pc], #3840	; b104 <DISABLE_IRQ+0xb084>
    b100:	01fc0000 	mvnseq	r0, r0
    b104:	06798f07 	ldrbteq	r8, [r9], -r7, lsl #30
    b108:	cf090000 	svcgt	0x00090000
    b10c:	07000013 	smladeq	r0, r3, r0, r0
    b110:	00003a91 	muleq	r0, r1, sl
    b114:	00230200 	eoreq	r0, r3, r0, lsl #4
    b118:	00139109 	andseq	r9, r3, r9, lsl #2
    b11c:	79930700 	ldmibvc	r3, {r8, r9, sl}
    b120:	02000006 	andeq	r0, r0, #6
    b124:	2c090423 	cfstrscs	mvf0, [r9], {35}	; 0x23
    b128:	07000014 	smladeq	r0, r4, r0, r0
    b12c:	00068995 	muleq	r6, r5, r9
    b130:	f4230300 	vld2.8	{d0-d3}, [r3], r0
    b134:	ed0c0003 	stc	0, cr0, [ip, #-12]
    b138:	89000002 	stmdbhi	r0, {r1}
    b13c:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
    b140:	000004f9 	strdeq	r0, [r0], -r9
    b144:	5e0c003d 	mcrpl	0, 0, r0, cr12, cr13, {1}
    b148:	99000000 	stmdbls	r0, {}
    b14c:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
    b150:	000004f9 	strdeq	r0, [r0], -r9
    b154:	af040001 	svcge	0x00040001
    b158:	07000014 	smladeq	r0, r4, r0, r0
    b15c:	00064097 	muleq	r6, r7, r0
    b160:	19af0800 	stmibne	pc!, {fp}
    b164:	0b1c0000 	bleq	70b16c <DISABLE_IRQ+0x70b0ec>
    b168:	00071320 	andeq	r1, r7, r0, lsr #6
    b16c:	193b0900 	ldmdbne	fp!, {r8, fp}
    b170:	220b0000 	andcs	r0, fp, #0
    b174:	00000713 	andeq	r0, r0, r3, lsl r7
    b178:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    b17c:	000018ba 	undefined instruction 0x000018ba
    b180:	0713230b 	ldreq	r2, [r3, -fp, lsl #6]
    b184:	23020000 	movwcs	r0, #8192	; 0x2000
    b188:	05f00904 	ldrbeq	r0, [r0, #2308]!	; 0x904
    b18c:	240b0000 	strcs	r0, [fp]
    b190:	00000713 	andeq	r0, r0, r3, lsl r7
    b194:	09082302 	stmdbeq	r8, {r1, r8, r9, sp}
    b198:	0000014e 	andeq	r0, r0, lr, asr #2
    b19c:	0713250b 	ldreq	r2, [r3, -fp, lsl #10]
    b1a0:	23020000 	movwcs	r0, #8192	; 0x2000
    b1a4:	181b090c 	ldmdane	fp, {r2, r3, r8, fp}
    b1a8:	260b0000 	strcs	r0, [fp], -r0
    b1ac:	000000b1 	strheq	r0, [r0], -r1
    b1b0:	09102302 	ldmdbeq	r0, {r1, r8, r9, sp}
    b1b4:	00001970 	andeq	r1, r0, r0, ror r9
    b1b8:	00b1270b 	adcseq	r2, r1, fp, lsl #14
    b1bc:	23020000 	movwcs	r0, #8192	; 0x2000
    b1c0:	0b0e0914 	bleq	38d618 <DISABLE_IRQ+0x38d598>
    b1c4:	280b0000 	stmdacs	fp, {}
    b1c8:	000000b1 	strheq	r0, [r0], -r1
    b1cc:	00182302 	andseq	r2, r8, r2, lsl #6
    b1d0:	04e3040a 	strbteq	r0, [r3], #1034	; 0x40a
    b1d4:	af040000 	svcge	0x00040000
    b1d8:	0b000019 	bleq	b244 <DISABLE_IRQ+0xb1c4>
    b1dc:	0006a42a 	andeq	sl, r6, sl, lsr #8
    b1e0:	18ab0800 	stmiane	fp!, {fp}
    b1e4:	0b300000 	bleq	c0b1ec <MEM_SIZE+0x40b1ec>
    b1e8:	00075b38 	andeq	r5, r7, r8, lsr fp
    b1ec:	05360900 	ldreq	r0, [r6, #-2304]!	; 0x900
    b1f0:	390b0000 	stmdbcc	fp, {}
    b1f4:	00000343 	andeq	r0, r0, r3, asr #6
    b1f8:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    b1fc:	000018fd 	strdeq	r1, [r0], -sp
    b200:	07193a0b 	ldreq	r3, [r9, -fp, lsl #20]
    b204:	23020000 	movwcs	r0, #8192	; 0x2000
    b208:	18990910 	ldmne	r9, {r4, r8, fp}
    b20c:	3b0b0000 	blcc	2cb214 <DISABLE_IRQ+0x2cb194>
    b210:	0000076d 	andeq	r0, r0, sp, ror #14
    b214:	002c2302 	eoreq	r2, ip, r2, lsl #6
    b218:	07670110 	undefined instruction 0x07670110
    b21c:	67110000 	ldrvs	r0, [r1, -r0]
    b220:	00000007 	andeq	r0, r0, r7
    b224:	0724040a 	streq	r0, [r4, -sl, lsl #8]!
    b228:	040a0000 	streq	r0, [sl]
    b22c:	0000075b 	andeq	r0, r0, fp, asr r7
    b230:	000b6108 	andeq	r6, fp, r8, lsl #2
    b234:	21090c00 	tstcs	r9, r0, lsl #24
    b238:	000007aa 	andeq	r0, r0, sl, lsr #15
    b23c:	00031109 	andeq	r1, r3, r9, lsl #2
    b240:	aa230900 	bge	8cd648 <MEM_SIZE+0xcd648>
    b244:	02000007 	andeq	r0, r0, #7
    b248:	dc090023 	stcle	0, cr0, [r9], {35}	; 0x23
    b24c:	09000005 	stmdbeq	r0, {r0, r2}
    b250:	0007b024 	andeq	fp, r7, r4, lsr #32
    b254:	04230200 	strteq	r0, [r3], #-512	; 0x200
    b258:	00163009 	andseq	r3, r6, r9
    b25c:	b1250900 	teqlt	r5, r0, lsl #18
    b260:	02000000 	andeq	r0, r0, #0
    b264:	0a000823 	beq	d2f8 <DISABLE_IRQ+0xd278>
    b268:	00077304 	andeq	r7, r7, r4, lsl #6
    b26c:	04041200 	streq	r1, [r4], #-512	; 0x200
    b270:	00000b61 	andeq	r0, r0, r1, ror #22
    b274:	07732709 	ldrbeq	r2, [r3, -r9, lsl #14]!
    b278:	040a0000 	streq	r0, [sl]
    b27c:	000007b2 	undefined instruction 0x000007b2
    b280:	0016e708 	andseq	lr, r6, r8, lsl #14
    b284:	220c2800 	andcs	r2, ip, #0
    b288:	00000832 	andeq	r0, r0, r2, lsr r8
    b28c:	00053609 	andeq	r3, r5, r9, lsl #12
    b290:	43230c00 	teqmi	r3, #0
    b294:	02000003 	andeq	r0, r0, #3
    b298:	49090023 	stmdbmi	r9, {r0, r1, r5}
    b29c:	0c000017 	stceq	0, cr0, [r0], {23}
    b2a0:	0000b125 	andeq	fp, r0, r5, lsr #2
    b2a4:	10230200 	eorne	r0, r3, r0, lsl #4
    b2a8:	0016cb09 	andseq	ip, r6, r9, lsl #22
    b2ac:	b1260c00 	teqlt	r6, r0, lsl #24
    b2b0:	02000000 	andeq	r0, r0, #0
    b2b4:	47091423 	strmi	r1, [r9, -r3, lsr #8]
    b2b8:	0c000017 	stceq	0, cr0, [r0], {23}
    b2bc:	0000b127 	andeq	fp, r0, r7, lsr #2
    b2c0:	18230200 	stmdane	r3!, {r9}
    b2c4:	0005ac09 	andeq	sl, r5, r9, lsl #24
    b2c8:	b1280c00 	teqlt	r8, r0, lsl #24
    b2cc:	02000000 	andeq	r0, r0, #0
    b2d0:	66091c23 	strvs	r1, [r9], -r3, lsr #24
    b2d4:	0c000017 	stceq	0, cr0, [r0], {23}
    b2d8:	0000b129 	andeq	fp, r0, r9, lsr #2
    b2dc:	20230200 	eorcs	r0, r3, r0, lsl #4
    b2e0:	00174009 	andseq	r4, r7, r9
    b2e4:	e32a0c00 	teq	sl, #0
    b2e8:	02000004 	andeq	r0, r0, #4
    b2ec:	10002423 	andne	r2, r0, r3, lsr #8
    b2f0:	00083e01 	andeq	r3, r8, r1, lsl #28
    b2f4:	062f1100 	strteq	r1, [pc], -r0, lsl #2
    b2f8:	0a000000 	beq	b300 <DISABLE_IRQ+0xb280>
    b2fc:	00083204 	andeq	r3, r8, r4, lsl #4
    b300:	35040a00 	strcc	r0, [r4, #-2560]	; 0xa00
    b304:	08000006 	stmdaeq	r0, {r1, r2}
    b308:	00000ec2 	andeq	r0, r0, r2, asr #29
    b30c:	73220d14 	teqvc	r2, #1280	; 0x500
    b310:	09000008 	stmdbeq	r0, {r3}
    b314:	00000536 	andeq	r0, r0, r6, lsr r5
    b318:	0343230d 	movteq	r2, #13069	; 0x330d
    b31c:	23020000 	movwcs	r0, #8192	; 0x2000
    b320:	0e100900 	cdpeq	9, 1, cr0, cr0, cr0, {0}
    b324:	240d0000 	strcs	r0, [sp]
    b328:	0000005e 	andeq	r0, r0, lr, asr r0
    b32c:	00102302 	andseq	r2, r0, r2, lsl #6
    b330:	00148c08 	andseq	r8, r4, r8, lsl #24
    b334:	200e0400 	andcs	r0, lr, r0, lsl #8
    b338:	0000088e 	andeq	r0, r0, lr, lsl #17
    b33c:	00137709 	andseq	r7, r3, r9, lsl #14
    b340:	9f220e00 	svcls	0x00220e00
    b344:	02000008 	andeq	r0, r0, #8
    b348:	10000023 	andne	r0, r0, r3, lsr #32
    b34c:	00089f01 	andeq	r9, r8, r1, lsl #30
    b350:	00a61100 	adceq	r1, r6, r0, lsl #2
    b354:	b0110000 	andslt	r0, r1, r0
    b358:	00000007 	andeq	r0, r0, r7
    b35c:	088e040a 	stmeq	lr, {r1, r3, sl}
    b360:	8c040000 	stchi	0, cr0, [r4], {0}
    b364:	0e000014 	mcreq	0, 0, r0, cr0, cr4, {0}
    b368:	00087324 	andeq	r7, r8, r4, lsr #6
    b36c:	136a0800 	cmnne	sl, #0
    b370:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    b374:	0008e427 	andeq	lr, r8, r7, lsr #8
    b378:	76650b00 	strbtvc	r0, [r5], -r0, lsl #22
    b37c:	a6290e00 	strtge	r0, [r9], -r0, lsl #28
    b380:	02000000 	andeq	r0, r0, #0
    b384:	c4090023 	strgt	r0, [r9], #-35	; 0x23
    b388:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    b38c:	0007b02a 	andeq	fp, r7, sl, lsr #32
    b390:	04230200 	strteq	r0, [r3], #-512	; 0x200
    b394:	0e00700b 	cdpeq	0, 0, cr7, cr0, cr11, {0}
    b398:	0008e42b 	andeq	lr, r8, fp, lsr #8
    b39c:	08230200 	stmdaeq	r3!, {r9}
    b3a0:	a5040a00 	strge	r0, [r4, #-2560]	; 0xa00
    b3a4:	04000008 	streq	r0, [r0], #-8
    b3a8:	0000136a 	andeq	r1, r0, sl, ror #6
    b3ac:	08b02d0e 	ldmeq	r0!, {r1, r2, r3, r8, sl, fp, sp}
    b3b0:	a1080000 	tstge	r8, r0
    b3b4:	18000013 	stmdane	r0, {r0, r1, r4}
    b3b8:	0964300e 	stmdbeq	r4!, {r1, r2, r3, ip, sp}^
    b3bc:	78090000 	stmdavc	r9, {}
    b3c0:	0e000011 	mcreq	0, 0, r0, cr0, cr1, {0}
    b3c4:	00003a32 	andeq	r3, r0, r2, lsr sl
    b3c8:	00230200 	eoreq	r0, r3, r0, lsl #4
    b3cc:	74706f0b 	ldrbtvc	r6, [r0], #-3851	; 0xf0b
    b3d0:	3a330e00 	bcc	ccebd8 <MEM_SIZE+0x4cebd8>
    b3d4:	02000000 	andeq	r0, r0, #0
    b3d8:	11090123 	tstne	r9, r3, lsr #2
    b3dc:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    b3e0:	00096435 	andeq	r6, r9, r5, lsr r4
    b3e4:	04230200 	strteq	r0, [r3], #-512	; 0x200
    b3e8:	00167109 	andseq	r7, r6, r9, lsl #2
    b3ec:	b0370e00 	eorslt	r0, r7, r0, lsl #28
    b3f0:	02000007 	andeq	r0, r0, #7
    b3f4:	6d0b0823 	stcvs	8, cr0, [fp, #-140]	; 0xffffff74
    b3f8:	0e006773 	mcreq	7, 0, r6, cr0, cr3, {3}
    b3fc:	0007b038 	andeq	fp, r7, r8, lsr r0
    b400:	0c230200 	sfmeq	f0, 4, [r3]	; (stceq 2, cr0, [r3])
    b404:	00163009 	andseq	r3, r6, r9
    b408:	b1390e00 	teqlt	r9, r0, lsl #28
    b40c:	02000000 	andeq	r0, r0, #0
    b410:	21091023 	tstcs	r9, r3, lsr #32
    b414:	0e000015 	mcreq	0, 0, r0, cr0, cr5, {0}
    b418:	00005e3a 	andeq	r5, r0, sl, lsr lr
    b41c:	14230200 	strtne	r0, [r3], #-512	; 0x200
    b420:	f5040a00 	undefined instruction 0xf5040a00
    b424:	04000008 	streq	r0, [r0], #-8
    b428:	000013a1 	andeq	r1, r0, r1, lsr #7
    b42c:	08f53c0e 	ldmeq	r5!, {r1, r2, r3, sl, fp, ip, sp}^
    b430:	94130000 	ldrls	r0, [r3]
    b434:	0100001f 	tsteq	r0, pc, lsl r0
    b438:	010101e4 	smlatteq	r1, r4, r1, r0
    b43c:	000009a8 	andeq	r0, r0, r8, lsr #19
    b440:	0019d314 	andseq	sp, r9, r4, lsl r3
    b444:	01e60100 	mvneq	r0, r0, lsl #2
    b448:	000009a8 	andeq	r0, r0, r8, lsr #19
    b44c:	0019da14 	andseq	sp, r9, r4, lsl sl
    b450:	01e70100 	mvneq	r0, r0, lsl #2
    b454:	000009a8 	andeq	r0, r0, r8, lsr #19
    b458:	00015d14 	andeq	r5, r1, r4, lsl sp
    b45c:	01e80100 	mvneq	r0, r0, lsl #2
    b460:	0000005e 	andeq	r0, r0, lr, asr r0
    b464:	6a040a00 	bvs	10dc6c <DISABLE_IRQ+0x10dbec>
    b468:	15000009 	strne	r0, [r0, #-9]
    b46c:	00202401 	eoreq	r2, r0, r1, lsl #8
    b470:	023f0100 	eorseq	r0, pc, #0
    b474:	00619001 	rsbeq	r9, r1, r1
    b478:	00625c30 	rsbeq	r5, r2, r0, lsr ip
    b47c:	003eb030 	eorseq	fp, lr, r0, lsr r0
    b480:	0009f300 	andeq	pc, r9, r0, lsl #6
    b484:	09751600 	ldmdbeq	r5!, {r9, sl, ip}^
    b488:	61dc0000 	bicsvs	r0, ip, r0
    b48c:	04183000 	ldreq	r3, [r8]
    b490:	49010000 	stmdbmi	r1, {}
    b494:	04301702 	ldrteq	r1, [r0], #-1794	; 0x702
    b498:	83180000 	tsthi	r8, #0
    b49c:	19000009 	stmdbne	r0, {r0, r3}
    b4a0:	0000098f 	andeq	r0, r0, pc, lsl #19
    b4a4:	00003edb 	ldrdeq	r3, [r0], -fp
    b4a8:	00099b18 	andeq	r9, r9, r8, lsl fp
    b4ac:	00000000 	andeq	r0, r0, r0
    b4b0:	001fc11a 	andseq	ip, pc, sl, lsl r1
    b4b4:	01750100 	cmneq	r5, r0, lsl #2
    b4b8:	00625c01 	rsbeq	r5, r2, r1, lsl #24
    b4bc:	0063c830 	rsbeq	ip, r3, r0, lsr r8
    b4c0:	003eee30 	eorseq	lr, lr, r0, lsr lr
    b4c4:	000a4600 	andeq	r4, sl, r0, lsl #12
    b4c8:	76651b00 	strbtvc	r1, [r5], -r0, lsl #22
    b4cc:	01750100 	cmneq	r5, r0, lsl #2
    b4d0:	000000a6 	andeq	r0, r0, r6, lsr #1
    b4d4:	00003f19 	andeq	r3, r0, r9, lsl pc
    b4d8:	001fa11c 	andseq	sl, pc, ip, lsl r1
    b4dc:	01750100 	cmneq	r5, r0, lsl #2
    b4e0:	000007b0 	undefined instruction 0x000007b0
    b4e4:	00003fa5 	andeq	r3, r0, r5, lsr #31
    b4e8:	0014c91d 	andseq	ip, r4, sp, lsl r9
    b4ec:	01770100 	cmneq	r7, r0, lsl #2
    b4f0:	000009a8 	andeq	r0, r0, r8, lsr #19
    b4f4:	18145401 	ldmdane	r4, {r0, sl, ip, lr}
    b4f8:	01000001 	tsteq	r0, r1
    b4fc:	00900179 	addseq	r0, r0, r9, ror r1
    b500:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    b504:	00001f3c 	andeq	r1, r0, ip, lsr pc
    b508:	c8012301 	stmdagt	r1, {r0, r8, r9, sp}
    b50c:	f4300063 	undefined instruction 0xf4300063
    b510:	31300063 	teqcc	r0, r3, rrx
    b514:	7c000040 	stcvc	0, cr0, [r0], {64}	; 0x40
    b518:	1f00000a 	svcne	0x0000000a
    b51c:	01007665 	tsteq	r0, r5, ror #12
    b520:	0000a623 	andeq	sl, r0, r3, lsr #12
    b524:	00405000 	subeq	r5, r0, r0
    b528:	13c42000 	bicne	r2, r4, #0
    b52c:	23010000 	movwcs	r0, #4096	; 0x1000
    b530:	000007b0 	undefined instruction 0x000007b0
    b534:	0000406e 	andeq	r4, r0, lr, rrx
    b538:	204d1e00 	subcs	r1, sp, r0, lsl #28
    b53c:	df010000 	svcle	0x00010000
    b540:	0063f401 	rsbeq	pc, r3, r1, lsl #8
    b544:	0064ec30 	rsbeq	lr, r4, r0, lsr ip
    b548:	00408130 	subeq	r8, r0, r0, lsr r1
    b54c:	000ada00 	andeq	sp, sl, r0, lsl #20
    b550:	61701f00 	cmnvs	r0, r0, lsl #30
    b554:	b0df0100 	sbcslt	r0, pc, r0, lsl #2
    b558:	ac000007 	stcge	0, cr0, [r0], {7}
    b55c:	21000040 	tstcs	r0, r0, asr #32
    b560:	01007665 	tsteq	r0, r5, ror #12
    b564:	0000a6e1 	andeq	sl, r0, r1, ror #13
    b568:	0040bf00 	subeq	fp, r0, r0, lsl #30
    b56c:	1f7e2200 	svcne	0x007e2200
    b570:	e2010000 	and	r0, r1, #0
    b574:	0000033d 	andeq	r0, r0, sp, lsr r3
    b578:	001feb23 	andseq	lr, pc, r3, lsr #22
    b57c:	e4e30100 	strbt	r0, [r3], #256	; 0x100
    b580:	dd000008 	stcle	0, cr0, [r0, #-32]	; 0xffffffe0
    b584:	23000040 	movwcs	r0, #64	; 0x40
    b588:	00000118 	andeq	r0, r0, r8, lsl r1
    b58c:	0090e501 	addseq	lr, r0, r1, lsl #10
    b590:	40f00000 	rscsmi	r0, r0, r0
    b594:	15000000 	strne	r0, [r0]
    b598:	001fd101 	andseq	sp, pc, r1, lsl #2
    b59c:	011e0100 	tsteq	lr, r0, lsl #2
    b5a0:	0064ec01 	rsbeq	lr, r4, r1, lsl #24
    b5a4:	00661030 	rsbeq	r1, r6, r0, lsr r0
    b5a8:	00410e30 	subeq	r0, r1, r0, lsr lr
    b5ac:	000b5300 	andeq	r5, fp, r0, lsl #6
    b5b0:	201a2400 	andscs	r2, sl, r0, lsl #8
    b5b4:	20010000 	andcs	r0, r1, r0
    b5b8:	0000a601 	andeq	sl, r0, r1, lsl #12
    b5bc:	00413900 	subeq	r3, r1, r0, lsl #18
    b5c0:	1f771400 	svcne	0x00771400
    b5c4:	21010000 	tstcs	r1, r0
    b5c8:	00033d01 	andeq	r3, r3, r1, lsl #26
    b5cc:	1fe41d00 	svcne	0x00e41d00
    b5d0:	22010000 	andcs	r0, r1, #0
    b5d4:	0008e401 	andeq	lr, r8, r1, lsl #8
    b5d8:	14560100 	ldrbne	r0, [r6], #-256	; 0x100
    b5dc:	00001f88 	andeq	r1, r0, r8, lsl #31
    b5e0:	69012301 	stmdbvs	r1, {r0, r8, r9, sp}
    b5e4:	14000005 	strne	r0, [r0], #-5
    b5e8:	0000203a 	andeq	r2, r0, sl, lsr r0
    b5ec:	3a012401 	bcc	545f8 <DISABLE_IRQ+0x54578>
    b5f0:	1d000000 	stcne	0, cr0, [r0]
    b5f4:	00000118 	andeq	r0, r0, r8, lsl r1
    b5f8:	90012601 	andls	r2, r1, r1, lsl #12
    b5fc:	01000000 	tsteq	r0, r0
    b600:	1faa1d5b 	svcne	0x00aa1d5b
    b604:	28010000 	stmdacs	r1, {}
    b608:	00003a01 	andeq	r3, r0, r1, lsl #20
    b60c:	00580100 	subseq	r0, r8, r0, lsl #2
    b610:	00200e25 	eoreq	r0, r0, r5, lsr #28
    b614:	016d0100 	cmneq	sp, r0, lsl #2
    b618:	00000045 	andeq	r0, r0, r5, asr #32
    b61c:	30006610 	andcc	r6, r0, r0, lsl r6
    b620:	3000672c 	andcc	r6, r0, ip, lsr #14
    b624:	00004157 	andeq	r4, r0, r7, asr r1
    b628:	00000bc7 	andeq	r0, r0, r7, asr #23
    b62c:	0100701f 	tsteq	r0, pc, lsl r0
    b630:	0008e46d 	andeq	lr, r8, sp, ror #8
    b634:	00417600 	subeq	r7, r1, r0, lsl #12
    b638:	76651f00 	strbtvc	r1, [r5], -r0, lsl #30
    b63c:	a66d0100 	strbtge	r0, [sp], -r0, lsl #2
    b640:	94000000 	strls	r0, [r0]
    b644:	20000041 	andcs	r0, r0, r1, asr #32
    b648:	000013c4 	andeq	r1, r0, r4, asr #7
    b64c:	07b06d01 	ldreq	r6, [r0, r1, lsl #26]!
    b650:	41b20000 	undefined instruction 0x41b20000
    b654:	8a200000 	bhi	80b65c <MEM_SIZE+0xb65c>
    b658:	01000017 	tsteq	r0, r7, lsl r0
    b65c:	00003a6d 	andeq	r3, r0, sp, ror #20
    b660:	0041d000 	subeq	sp, r1, r0
    b664:	1ff42300 	svcne	0x00f42300
    b668:	6f010000 	svcvs	0x00010000
    b66c:	00000045 	andeq	r0, r0, r5, asr #32
    b670:	000041ee 	andeq	r4, r0, lr, ror #3
    b674:	00011823 	andeq	r1, r1, r3, lsr #16
    b678:	90700100 	rsbsls	r0, r0, r0, lsl #2
    b67c:	0c000000 	stceq	0, cr0, [r0], {0}
    b680:	00000042 	andeq	r0, r0, r2, asr #32
    b684:	1f610126 	svcne	0x00610126
    b688:	d8010000 	stmdale	r1, {}
    b68c:	00004501 	andeq	r4, r0, r1, lsl #10
    b690:	00672c00 	rsbeq	r2, r7, r0, lsl #24
    b694:	00673430 	rsbeq	r3, r7, r0, lsr r4
    b698:	0d5d0130 	ldfeqe	f0, [sp, #-192]	; 0xffffff40
    b69c:	1f00000c 	svcne	0x0000000c
    b6a0:	d8010070 	stmdale	r1, {r4, r5, r6}
    b6a4:	000008e4 	andeq	r0, r0, r4, ror #17
    b6a8:	00004235 	andeq	r4, r0, r5, lsr r2
    b6ac:	0076651f 	rsbseq	r6, r6, pc, lsl r5
    b6b0:	00a6d801 	adceq	sp, r6, r1, lsl #16
    b6b4:	42480000 	submi	r0, r8, #0
    b6b8:	c4200000 	strtgt	r0, [r0]
    b6bc:	01000013 	tsteq	r0, r3, lsl r0
    b6c0:	0007b0d8 	ldrdeq	fp, [r7], -r8
    b6c4:	00425b00 	subeq	r5, r2, r0, lsl #22
    b6c8:	01260000 	teqeq	r6, r0
    b6cc:	0000200a 	andeq	r2, r0, sl
    b6d0:	4501bf01 	strmi	fp, [r1, #-3841]	; 0xf01
    b6d4:	34000000 	strcc	r0, [r0]
    b6d8:	3c300067 	ldccc	0, cr0, [r0], #-412	; 0xfffffe64
    b6dc:	01300067 	teqeq	r0, r7, rrx
    b6e0:	000c535d 	andeq	r5, ip, sp, asr r3
    b6e4:	00701f00 	rsbseq	r1, r0, r0, lsl #30
    b6e8:	08e4bf01 	stmiaeq	r4!, {r0, r8, r9, sl, fp, ip, sp, pc}^
    b6ec:	426e0000 	rsbmi	r0, lr, #0
    b6f0:	651f0000 	ldrvs	r0, [pc, #0]	; b6f8 <DISABLE_IRQ+0xb678>
    b6f4:	bf010076 	svclt	0x00010076
    b6f8:	000000a6 	andeq	r0, r0, r6, lsr #1
    b6fc:	00004281 	andeq	r4, r0, r1, lsl #5
    b700:	0013c420 	andseq	ip, r3, r0, lsr #8
    b704:	b0bf0100 	adcslt	r0, pc, r0, lsl #2
    b708:	94000007 	strls	r0, [r0], #-7
    b70c:	00000042 	andeq	r0, r0, r2, asr #32
    b710:	28ba0127 	ldmcs	sl!, {r0, r1, r2, r5, r8}
    b714:	06010000 	streq	r0, [r1], -r0
    b718:	00450102 	subeq	r0, r5, r2, lsl #2
    b71c:	673c0000 	ldrvs	r0, [ip, -r0]!
    b720:	67f83000 	ldrbvs	r3, [r8, r0]!
    b724:	42a73000 	adcmi	r3, r7, #0
    b728:	0cea0000 	stcleq	0, cr0, [sl]
    b72c:	781c0000 	ldmdavc	ip, {}
    b730:	01000011 	tsteq	r0, r1, lsl r0
    b734:	003a0206 	eorseq	r0, sl, r6, lsl #4
    b738:	42d20000 	sbcsmi	r0, r2, #0
    b73c:	341c0000 	ldrcc	r0, [ip]
    b740:	01000020 	tsteq	r0, r0, lsr #32
    b744:	07b00206 	ldreq	r0, [r0, r6, lsl #4]!
    b748:	42f00000 	rscsmi	r0, r0, #0
    b74c:	ad1c0000 	ldcge	0, cr0, [ip]
    b750:	01000010 	tsteq	r0, r0, lsl r0
    b754:	07b00206 	ldreq	r0, [r0, r6, lsl #4]!
    b758:	430e0000 	movwmi	r0, #57344	; 0xe000
    b75c:	301c0000 	andscc	r0, ip, r0
    b760:	01000016 	tsteq	r0, r6, lsl r0
    b764:	00b10206 	adcseq	r0, r1, r6, lsl #4
    b768:	432c0000 	teqmi	ip, #0
    b76c:	101c0000 	andsne	r0, ip, r0
    b770:	0100000e 	tsteq	r0, lr
    b774:	005e0206 	subseq	r0, lr, r6, lsl #4
    b778:	434a0000 	movtmi	r0, #40960	; 0xa000
    b77c:	6f1b0000 	svcvs	0x001b0000
    b780:	01007470 	tsteq	r0, r0, ror r4
    b784:	003a0206 	eorseq	r0, sl, r6, lsl #4
    b788:	43690000 	cmnmi	r9, #0
    b78c:	a1140000 	tstge	r4, r0
    b790:	0100001f 	tsteq	r0, pc, lsl r0
    b794:	07b00208 	ldreq	r0, [r0, r8, lsl #4]!
    b798:	18140000 	ldmdane	r4, {}
    b79c:	01000001 	tsteq	r0, r1
    b7a0:	0090020a 	addseq	r0, r0, sl, lsl #4
    b7a4:	28000000 	stmdacs	r0, {}
    b7a8:	001f5001 	andseq	r5, pc, r1
    b7ac:	01500100 	cmpeq	r0, r0, lsl #2
    b7b0:	00000045 	andeq	r0, r0, r5, asr #32
    b7b4:	300067f8 	strdcc	r6, [r0], -r8
    b7b8:	30006854 	andcc	r6, r0, r4, asr r8
    b7bc:	00004388 	andeq	r4, r0, r8, lsl #7
    b7c0:	00000d13 	andeq	r0, r0, r3, lsl sp
    b7c4:	74657229 	strbtvc	r7, [r5], #-553	; 0x229
    b7c8:	45520100 	ldrbmi	r0, [r2, #-256]	; 0x100
    b7cc:	00000000 	andeq	r0, r0, r0
    b7d0:	0014d12a 	andseq	sp, r4, sl, lsr #2
    b7d4:	44490f00 	strbmi	r0, [r9], #-3840	; 0xf00
    b7d8:	01000008 	tsteq	r0, r8
    b7dc:	038f2a01 	orreq	r2, pc, #4096	; 0x1000
    b7e0:	4a0f0000 	bmi	3cb7e8 <DISABLE_IRQ+0x3cb768>
    b7e4:	00000844 	andeq	r0, r0, r4, asr #16
    b7e8:	1d2a0101 	stfnes	f0, [sl, #-4]!
    b7ec:	0f000013 	svceq	0x00000013
    b7f0:	00069950 	andeq	r9, r6, r0, asr r9
    b7f4:	2a010100 	bcs	4bbfc <DISABLE_IRQ+0x4bb7c>
    b7f8:	00000e50 	andeq	r0, r0, r0, asr lr
    b7fc:	003a510f 	eorseq	r5, sl, pc, lsl #2
    b800:	01010000 	tsteq	r1, r0
    b804:	000d852a 	andeq	r8, sp, sl, lsr #10
    b808:	3a520f00 	bcc	148f410 <MEM_SIZE+0xc8f410>
    b80c:	01000000 	tsteq	r0, r0
    b810:	14392a01 	ldrtne	r2, [r9], #-2561	; 0xa01
    b814:	660f0000 	strvs	r0, [pc], -r0
    b818:	00000045 	andeq	r0, r0, r5, asr #32
    b81c:	fb2a0101 	blx	a8bc2a <MEM_SIZE+0x28bc2a>
    b820:	0f000013 	svceq	0x00000013
    b824:	00004567 	andeq	r4, r0, r7, ror #10
    b828:	2a010100 	bcs	4bc30 <DISABLE_IRQ+0x4bbb0>
    b82c:	00001301 	andeq	r1, r0, r1, lsl #6
    b830:	0045680f 	subeq	r6, r5, pc, lsl #16
    b834:	01010000 	tsteq	r1, r0
    b838:	0012f52a 	andseq	pc, r2, sl, lsr #10
    b83c:	45690f00 	strbmi	r0, [r9, #-3840]!	; 0xf00
    b840:	01000000 	tsteq	r0, r0
    b844:	08ea0c01 	stmiaeq	sl!, {r0, sl, fp}^
    b848:	0d980000 	ldceq	0, cr0, [r8]
    b84c:	f90d0000 	undefined instruction 0xf90d0000
    b850:	1f000004 	svcne	0x00000004
    b854:	13b02a00 	movsne	r2, #0
    b858:	6a0f0000 	bvs	3cb860 <DISABLE_IRQ+0x3cb7e0>
    b85c:	00000d88 	andeq	r0, r0, r8, lsl #27
    b860:	2d2a0101 	stfcss	f0, [sl, #-4]!
    b864:	0f000013 	svceq	0x00000013
    b868:	0006356b 	andeq	r3, r6, fp, ror #10
    b86c:	0c010100 	stfeqs	f0, [r1], {0}
    b870:	00000085 	andeq	r0, r0, r5, lsl #1
    b874:	00000dc2 	andeq	r0, r0, r2, asr #27
    b878:	0004f90d 	andeq	pc, r4, sp, lsl #18
    b87c:	2a00ff00 	bcs	4b484 <DISABLE_IRQ+0x4b404>
    b880:	00001353 	andeq	r1, r0, r3, asr r3
    b884:	0db26c0f 	ldceq	12, cr6, [r2, #60]!	; 0x3c
    b888:	01010000 	tsteq	r1, r0
    b88c:	00149a2a 	andseq	r9, r4, sl, lsr #20
    b890:	a56d0f00 	strbge	r0, [sp, #-3840]!	; 0xf00
    b894:	01000008 	tsteq	r0, r8
    b898:	096a0c01 	stmdbeq	sl!, {r0, sl, fp}^
    b89c:	0dec0000 	stcleq	0, cr0, [ip]
    b8a0:	f90d0000 	undefined instruction 0xf90d0000
    b8a4:	13000004 	movwne	r0, #4
    b8a8:	14c22a00 	strbne	r2, [r2], #2560	; 0xa00
    b8ac:	700f0000 	andvc	r0, pc, r0
    b8b0:	00000ddc 	ldrdeq	r0, [r0], -ip
    b8b4:	bd2a0101 	stflts	f0, [sl, #-4]!
    b8b8:	0f000014 	svceq	0x00000014
    b8bc:	0009a871 	andeq	sl, r9, r1, ror r8
    b8c0:	2a010100 	bcs	4bcc8 <DISABLE_IRQ+0x4bc48>
    b8c4:	00001346 	andeq	r1, r0, r6, asr #6
    b8c8:	005e720f 	subseq	r7, lr, pc, lsl #4
    b8cc:	01010000 	tsteq	r1, r0
    b8d0:	00150f2a 	andseq	r0, r5, sl, lsr #30
    b8d4:	a5730f00 	ldrbge	r0, [r3, #-3840]!	; 0xf00
    b8d8:	01000008 	tsteq	r0, r8
    b8dc:	14e02a01 	strbtne	r2, [r0], #2561	; 0xa01
    b8e0:	7e0f0000 	cdpvc	0, 0, cr0, cr15, cr0, {0}
    b8e4:	00000635 	andeq	r0, r0, r5, lsr r6
    b8e8:	b4000101 	strlt	r0, [r0], #-257	; 0x101
    b8ec:	02000006 	andeq	r0, r0, #6
    b8f0:	00237c00 	eoreq	r7, r3, r0, lsl #24
    b8f4:	4d010400 	cfstrsmi	mvf0, [r1]
    b8f8:	01000000 	tsteq	r0, r0
    b8fc:	000020e6 	andeq	r2, r0, r6, ror #1
    b900:	00000063 	andeq	r0, r0, r3, rrx
    b904:	30006854 	andcc	r6, r0, r4, asr r8
    b908:	30006914 	andcc	r6, r0, r4, lsl r9
    b90c:	000024da 	ldrdeq	r2, [r0], -sl
    b910:	00056402 	andeq	r6, r5, r2, lsl #8
    b914:	03210200 	teqeq	r1, #0
    b918:	00a00601 	adceq	r0, r0, r1, lsl #12
    b91c:	01030000 	tsteq	r3, r0
    b920:	00009e08 	andeq	r9, r0, r8, lsl #28
    b924:	04f70400 	ldrbteq	r0, [r7], #1024	; 0x400
    b928:	24020000 	strcs	r0, [r2]
    b92c:	00000033 	andeq	r0, r0, r3, lsr r0
    b930:	000afb04 	andeq	pc, sl, r4, lsl #22
    b934:	50260200 	eorpl	r0, r6, r0, lsl #4
    b938:	03000000 	movweq	r0, #0
    b93c:	008b0702 	addeq	r0, fp, r2, lsl #14
    b940:	02030000 	andeq	r0, r3, #0
    b944:	00005905 	andeq	r5, r0, r5, lsl #18
    b948:	03380400 	teqeq	r8, #0
    b94c:	28020000 	stmdacs	r2, {}
    b950:	00000069 	andeq	r0, r0, r9, rrx
    b954:	37070403 	strcc	r0, [r7, -r3, lsl #8]
    b958:	05000000 	streq	r0, [r0]
    b95c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    b960:	08030074 	stmdaeq	r3, {r2, r4, r5, r6}
    b964:	00000005 	andeq	r0, r0, r5
    b968:	07080300 	streq	r0, [r8, -r0, lsl #6]
    b96c:	0000002d 	andeq	r0, r0, sp, lsr #32
    b970:	00039f04 	andeq	r9, r3, r4, lsl #30
    b974:	692d0200 	pushvs	{r9}
    b978:	04000000 	streq	r0, [r0]
    b97c:	00000a27 	andeq	r0, r0, r7, lsr #20
    b980:	005e2a03 	subseq	r2, lr, r3, lsl #20
    b984:	29040000 	stmdbcs	r4, {}
    b988:	03000008 	movweq	r0, #8
    b98c:	00005e2c 	andeq	r5, r0, ip, lsr #28
    b990:	0c090600 	stceq	6, cr0, [r9], {0}
    b994:	04080000 	streq	r0, [r8]
    b998:	0000cf23 	andeq	ip, r0, r3, lsr #30
    b99c:	03110700 	tsteq	r1, #0
    b9a0:	24040000 	strcs	r0, [r4]
    b9a4:	000000cf 	andeq	r0, r0, pc, asr #1
    b9a8:	07002302 	streq	r2, [r0, -r2, lsl #6]
    b9ac:	00000281 	andeq	r0, r0, r1, lsl #5
    b9b0:	00cf2504 	sbceq	r2, pc, r4, lsl #10
    b9b4:	23020000 	movwcs	r0, #8192	; 0x2000
    b9b8:	04080004 	streq	r0, [r8], #-4
    b9bc:	000000a6 	andeq	r0, r0, r6, lsr #1
    b9c0:	000c0904 	andeq	r0, ip, r4, lsl #18
    b9c4:	a6260400 	strtge	r0, [r6], -r0, lsl #8
    b9c8:	06000000 	streq	r0, [r0], -r0
    b9cc:	0000065c 	andeq	r0, r0, ip, asr r6
    b9d0:	252f0510 	strcs	r0, [pc, #-1296]!	; b4c8 <DISABLE_IRQ+0xb448>
    b9d4:	07000001 	streq	r0, [r0, -r1]
    b9d8:	00000ac9 	andeq	r0, r0, r9, asr #21
    b9dc:	00d53105 	sbcseq	r3, r5, r5, lsl #2
    b9e0:	23020000 	movwcs	r0, #8192	; 0x2000
    b9e4:	08e00700 	stmiaeq	r0!, {r8, r9, sl}^
    b9e8:	32050000 	andcc	r0, r5, #0
    b9ec:	00000125 	andeq	r0, r0, r5, lsr #2
    b9f0:	07082302 	streq	r2, [r8, -r2, lsl #6]
    b9f4:	00000900 	andeq	r0, r0, r0, lsl #18
    b9f8:	003a3305 	eorseq	r3, sl, r5, lsl #6
    b9fc:	23020000 	movwcs	r0, #8192	; 0x2000
    ba00:	0427070c 	strteq	r0, [r7], #-1804	; 0x70c
    ba04:	34050000 	strcc	r0, [r5]
    ba08:	0000003a 	andeq	r0, r0, sl, lsr r0
    ba0c:	000d2302 	andeq	r2, sp, r2, lsl #6
    ba10:	003a0408 	eorseq	r0, sl, r8, lsl #8
    ba14:	5c040000 	stcpl	0, cr0, [r4], {0}
    ba18:	05000006 	streq	r0, [r0, #-6]
    ba1c:	0000e036 	andeq	lr, r0, r6, lsr r0
    ba20:	099f0600 	ldmibeq	pc, {r9, sl}
    ba24:	056c0000 	strbeq	r0, [ip]!
    ba28:	0002cb3a 	andeq	ip, r2, sl, lsr fp
    ba2c:	14810700 	strne	r0, [r1], #1792	; 0x700
    ba30:	3b050000 	blcc	14ba38 <DISABLE_IRQ+0x14b9b8>
    ba34:	000002cb 	andeq	r0, r0, fp, asr #5
    ba38:	07002302 	streq	r2, [r0, -r2, lsl #6]
    ba3c:	0000044d 	andeq	r0, r0, sp, asr #8
    ba40:	00d54105 	sbcseq	r4, r5, r5, lsl #2
    ba44:	23020000 	movwcs	r0, #8192	; 0x2000
    ba48:	05520704 	ldrbeq	r0, [r2, #-1796]	; 0x704
    ba4c:	45050000 	strmi	r0, [r5]
    ba50:	000002d1 	ldrdeq	r0, [r0], -r1
    ba54:	070c2302 	streq	r2, [ip, -r2, lsl #6]
    ba58:	00001aef 	andeq	r1, r0, pc, ror #21
    ba5c:	005e4b05 	subseq	r4, lr, r5, lsl #22
    ba60:	23020000 	movwcs	r0, #8192	; 0x2000
    ba64:	08780710 	ldmdaeq	r8!, {r4, r8, r9, sl}^
    ba68:	4c050000 	stcmi	0, cr0, [r5], {0}
    ba6c:	0000005e 	andeq	r0, r0, lr, asr r0
    ba70:	07142302 	ldreq	r2, [r4, -r2, lsl #6]
    ba74:	00001d35 	andeq	r1, r0, r5, lsr sp
    ba78:	003a4d05 	eorseq	r4, sl, r5, lsl #26
    ba7c:	23020000 	movwcs	r0, #8192	; 0x2000
    ba80:	1e5a0718 	mrcne	7, 2, r0, cr10, cr8, {0}
    ba84:	51050000 	tstpl	r5, r0
    ba88:	0000003a 	andeq	r0, r0, sl, lsr r0
    ba8c:	07192302 	ldreq	r2, [r9, -r2, lsl #6]
    ba90:	00000364 	andeq	r0, r0, r4, ror #6
    ba94:	003a5305 	eorseq	r5, sl, r5, lsl #6
    ba98:	23020000 	movwcs	r0, #8192	; 0x2000
    ba9c:	043f071a 	ldrteq	r0, [pc], #1818	; baa4 <DISABLE_IRQ+0xba24>
    baa0:	56050000 	strpl	r0, [r5], -r0
    baa4:	0000003a 	andeq	r0, r0, sl, lsr r0
    baa8:	071b2302 	ldreq	r2, [fp, -r2, lsl #6]
    baac:	00000bad 	andeq	r0, r0, sp, lsr #23
    bab0:	03455a05 	movteq	r5, #23045	; 0x5a05
    bab4:	23020000 	movwcs	r0, #8192	; 0x2000
    bab8:	0bf8071c 	bleq	ffe0d730 <rEINTPEND+0xa9e0d688>
    babc:	5f050000 	svcpl	0x00050000
    bac0:	000000d5 	ldrdeq	r0, [r0], -r5
    bac4:	07202302 	streq	r2, [r0, -r2, lsl #6]!
    bac8:	00000b03 	andeq	r0, r0, r3, lsl #22
    bacc:	005e6305 	subseq	r6, lr, r5, lsl #6
    bad0:	23020000 	movwcs	r0, #8192	; 0x2000
    bad4:	06250728 	strteq	r0, [r5], -r8, lsr #14
    bad8:	65050000 	strvs	r0, [r5]
    badc:	0000034b 	andeq	r0, r0, fp, asr #6
    bae0:	072c2302 	streq	r2, [ip, -r2, lsl #6]!
    bae4:	0000086e 	andeq	r0, r0, lr, ror #16
    bae8:	00d56605 	sbcseq	r6, r5, r5, lsl #12
    baec:	23020000 	movwcs	r0, #8192	; 0x2000
    baf0:	0c0e0730 	stceq	7, cr0, [lr], {48}	; 0x30
    baf4:	68050000 	stmdavs	r5, {}
    baf8:	00000090 	muleq	r0, r0, r0
    bafc:	07382302 	ldreq	r2, [r8, -r2, lsl #6]!
    bb00:	000007f3 	strdeq	r0, [r0], -r3
    bb04:	00906905 	addseq	r6, r0, r5, lsl #18
    bb08:	23020000 	movwcs	r0, #8192	; 0x2000
    bb0c:	05a7073c 	streq	r0, [r7, #1852]!	; 0x73c
    bb10:	6b050000 	blvs	14bb18 <DISABLE_IRQ+0x14ba98>
    bb14:	00000351 	andeq	r0, r0, r1, asr r3
    bb18:	09402302 	stmdbeq	r0, {r1, r8, r9, sp}^
    bb1c:	0067736d 	rsbeq	r7, r7, sp, ror #6
    bb20:	02cb6d05 	sbceq	r6, fp, #320	; 0x140
    bb24:	23020000 	movwcs	r0, #8192	; 0x2000
    bb28:	16300744 	ldrtne	r0, [r0], -r4, asr #14
    bb2c:	70050000 	andvc	r0, r5, r0
    bb30:	0000009b 	muleq	r0, fp, r0
    bb34:	07482302 	strbeq	r2, [r8, -r2, lsl #6]
    bb38:	000008db 	ldrdeq	r0, [r0], -fp
    bb3c:	01257305 	teqeq	r5, r5, lsl #6
    bb40:	23020000 	movwcs	r0, #8192	; 0x2000
    bb44:	09ac074c 	stmibeq	ip!, {r2, r3, r6, r8, r9, sl}
    bb48:	75050000 	strvc	r0, [r5]
    bb4c:	0000003a 	andeq	r0, r0, sl, lsr r0
    bb50:	07502302 	ldrbeq	r2, [r0, -r2, lsl #6]
    bb54:	000007e6 	andeq	r0, r0, r6, ror #15
    bb58:	003a7605 	eorseq	r7, sl, r5, lsl #12
    bb5c:	23020000 	movwcs	r0, #8192	; 0x2000
    bb60:	053d0751 	ldreq	r0, [sp, #-1873]!	; 0x751
    bb64:	79050000 	stmdbvc	r5, {}
    bb68:	00000357 	andeq	r0, r0, r7, asr r3
    bb6c:	07542302 	ldrbeq	r2, [r4, -r2, lsl #6]
    bb70:	00000ab5 	undefined instruction 0x00000ab5
    bb74:	03da7c05 	bicseq	r7, sl, #1280	; 0x500
    bb78:	23020000 	movwcs	r0, #8192	; 0x2000
    bb7c:	022b0758 	eoreq	r0, fp, #23068672	; 0x1600000
    bb80:	80050000 	andhi	r0, r5, r0
    bb84:	00000417 	andeq	r0, r0, r7, lsl r4
    bb88:	075c2302 	ldrbeq	r2, [ip, -r2, lsl #6]
    bb8c:	000004ad 	andeq	r0, r0, sp, lsr #9
    bb90:	003a8405 	eorseq	r8, sl, r5, lsl #8
    bb94:	23020000 	movwcs	r0, #8192	; 0x2000
    bb98:	02550760 	subseq	r0, r5, #25165824	; 0x1800000
    bb9c:	85050000 	strhi	r0, [r5]
    bba0:	0000005e 	andeq	r0, r0, lr, asr r0
    bba4:	07642302 	strbeq	r2, [r4, -r2, lsl #6]!
    bba8:	0000075a 	andeq	r0, r0, sl, asr r7
    bbac:	02cb8605 	sbceq	r8, fp, #5242880	; 0x500000
    bbb0:	23020000 	movwcs	r0, #8192	; 0x2000
    bbb4:	04080068 	streq	r0, [r8], #-104	; 0x68
    bbb8:	00000025 	andeq	r0, r0, r5, lsr #32
    bbbc:	0002cb0a 	andeq	ip, r2, sl, lsl #22
    bbc0:	0002e100 	andeq	lr, r2, r0, lsl #2
    bbc4:	02e10b00 	rsceq	r0, r1, #0
    bbc8:	00000000 	andeq	r0, r0, r0
    bbcc:	0607040c 	streq	r0, [r7], -ip, lsl #8
    bbd0:	00000b2f 	andeq	r0, r0, pc, lsr #22
    bbd4:	455a051c 	ldrbmi	r0, [sl, #-1308]	; 0x51c
    bbd8:	07000003 	streq	r0, [r0, -r3]
    bbdc:	00000536 	andeq	r0, r0, r6, lsr r5
    bbe0:	012b2706 	teqeq	fp, r6, lsl #14
    bbe4:	23020000 	movwcs	r0, #8192	; 0x2000
    bbe8:	08670700 	stmdaeq	r7!, {r8, r9, sl}^
    bbec:	2a060000 	bcs	18bbf4 <DISABLE_IRQ+0x18bb74>
    bbf0:	0000049b 	muleq	r0, fp, r4
    bbf4:	07102302 	ldreq	r2, [r0, -r2, lsl #6]
    bbf8:	00000bad 	andeq	r0, r0, sp, lsr #23
    bbfc:	03452c06 	movteq	r2, #23558	; 0x5c06
    bc00:	23020000 	movwcs	r0, #8192	; 0x2000
    bc04:	05f60714 	ldrbeq	r0, [r6, #1812]!	; 0x714
    bc08:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    bc0c:	0000003a 	andeq	r0, r0, sl, lsr r0
    bc10:	07182302 	ldreq	r2, [r8, -r2, lsl #6]
    bc14:	00000473 	andeq	r0, r0, r3, ror r4
    bc18:	003a2f06 	eorseq	r2, sl, r6, lsl #30
    bc1c:	23020000 	movwcs	r0, #8192	; 0x2000
    bc20:	048e0719 	streq	r0, [lr], #1817	; 0x719
    bc24:	30060000 	andcc	r0, r6, r0
    bc28:	0000003a 	andeq	r0, r0, sl, lsr r0
    bc2c:	001a2302 	andseq	r2, sl, r2, lsl #6
    bc30:	02e40408 	rsceq	r0, r4, #134217728	; 0x8000000
    bc34:	04080000 	streq	r0, [r8]
    bc38:	00000085 	andeq	r0, r0, r5, lsl #1
    bc3c:	00d50408 	sbcseq	r0, r5, r8, lsl #8
    bc40:	04080000 	streq	r0, [r8]
    bc44:	0000012b 	andeq	r0, r0, fp, lsr #2
    bc48:	00074b06 	andeq	r4, r7, r6, lsl #22
    bc4c:	7c052c00 	stcvc	12, cr2, [r5], {0}
    bc50:	000003da 	ldrdeq	r0, [r0], -sl
    bc54:	00053607 	andeq	r3, r5, r7, lsl #12
    bc58:	2b2e0700 	blcs	b8d860 <MEM_SIZE+0x38d860>
    bc5c:	02000001 	andeq	r0, r0, #1
    bc60:	dd070023 	stcle	0, cr0, [r7, #-140]	; 0xffffff74
    bc64:	07000007 	streq	r0, [r0, -r7]
    bc68:	00047830 	andeq	r7, r4, r0, lsr r8
    bc6c:	10230200 	eorne	r0, r3, r0, lsl #4
    bc70:	0005e407 	andeq	lr, r5, r7, lsl #8
    bc74:	9b310700 	blls	c4d87c <MEM_SIZE+0x44d87c>
    bc78:	02000000 	andeq	r0, r0, #0
    bc7c:	0e071423 	cdpeq	4, 0, cr1, cr7, cr3, {1}
    bc80:	0700000b 	streq	r0, [r0, -fp]
    bc84:	00009b32 	andeq	r9, r0, r2, lsr fp
    bc88:	18230200 	stmdane	r3!, {r9}
    bc8c:	0005f007 	andeq	pc, r5, r7
    bc90:	78340700 	ldmdavc	r4!, {r8, r9, sl}
    bc94:	02000004 	andeq	r0, r0, #4
    bc98:	4e071c23 	cdpmi	12, 0, cr1, cr7, cr3, {1}
    bc9c:	07000001 	streq	r0, [r0, -r1]
    bca0:	00047835 	andeq	r7, r4, r5, lsr r8
    bca4:	20230200 	eorcs	r0, r3, r0, lsl #4
    bca8:	00052707 	andeq	r2, r5, r7, lsl #14
    bcac:	9b360700 	blls	d8d8b4 <MEM_SIZE+0x58d8b4>
    bcb0:	02000000 	andeq	r0, r0, #0
    bcb4:	9b072423 	blls	1d4d48 <DISABLE_IRQ+0x1d4cc8>
    bcb8:	07000004 	streq	r0, [r0, -r4]
    bcbc:	00009b37 	andeq	r9, r0, r7, lsr fp
    bcc0:	28230200 	stmdacs	r3!, {r9}
    bcc4:	5d040800 	stcpl	8, cr0, [r4]
    bcc8:	06000003 	streq	r0, [r0], -r3
    bccc:	00000aa7 	andeq	r0, r0, r7, lsr #21
    bcd0:	17800518 	usada8ne	r0, r8, r5, r0
    bcd4:	07000004 	streq	r0, [r0, -r4]
    bcd8:	00000536 	andeq	r0, r0, r6, lsr r5
    bcdc:	012b2208 	teqeq	fp, r8, lsl #4
    bce0:	23020000 	movwcs	r0, #8192	; 0x2000
    bce4:	04470700 	strbeq	r0, [r7], #-1792	; 0x700
    bce8:	23080000 	movwcs	r0, #32768	; 0x8000
    bcec:	0000005e 	andeq	r0, r0, lr, asr r0
    bcf0:	07102302 	ldreq	r2, [r0, -r2, lsl #6]
    bcf4:	00001b3f 	andeq	r1, r0, pc, lsr fp
    bcf8:	04952408 	ldreq	r2, [r5], #1032	; 0x408
    bcfc:	23020000 	movwcs	r0, #8192	; 0x2000
    bd00:	04080014 	streq	r0, [r8], #-20
    bd04:	000003e0 	andeq	r0, r0, r0, ror #7
    bd08:	00099f04 	andeq	r9, r9, r4, lsl #30
    bd0c:	36890500 	strcc	r0, [r9], r0, lsl #10
    bd10:	08000001 	stmdaeq	r0, {r0}
    bd14:	0002cb04 	andeq	ip, r2, r4, lsl #22
    bd18:	0b610600 	bleq	184d520 <MEM_SIZE+0x104d520>
    bd1c:	070c0000 	streq	r0, [ip, -r0]
    bd20:	00046521 	andeq	r6, r4, r1, lsr #10
    bd24:	03110700 	tsteq	r1, #0
    bd28:	23070000 	movwcs	r0, #28672	; 0x7000
    bd2c:	00000465 	andeq	r0, r0, r5, ror #8
    bd30:	07002302 	streq	r2, [r0, -r2, lsl #6]
    bd34:	000005dc 	ldrdeq	r0, [r0], -ip
    bd38:	046b2407 	strbteq	r2, [fp], #-1031	; 0x407
    bd3c:	23020000 	movwcs	r0, #8192	; 0x2000
    bd40:	16300704 	ldrtne	r0, [r0], -r4, lsl #14
    bd44:	25070000 	strcs	r0, [r7]
    bd48:	0000009b 	muleq	r0, fp, r0
    bd4c:	00082302 	andeq	r2, r8, r2, lsl #6
    bd50:	042e0408 	strteq	r0, [lr], #-1032	; 0x408
    bd54:	040d0000 	streq	r0, [sp]
    bd58:	000b6104 	andeq	r6, fp, r4, lsl #2
    bd5c:	2e270700 	cdpcs	7, 2, cr0, cr7, cr0, {0}
    bd60:	08000004 	stmdaeq	r0, {r2}
    bd64:	00046d04 	andeq	r6, r4, r4, lsl #26
    bd68:	074b0400 	strbeq	r0, [fp, -r0, lsl #8]
    bd6c:	39070000 	stmdbcc	r7, {}
    bd70:	0000035d 	andeq	r0, r0, sp, asr r3
    bd74:	0495010e 	ldreq	r0, [r5], #270	; 0x10e
    bd78:	170f0000 	strne	r0, [pc, -r0]
    bd7c:	00000004 	andeq	r0, r0, r4
    bd80:	04890408 	streq	r0, [r9], #1032	; 0x408
    bd84:	04080000 	streq	r0, [r8]
    bd88:	0000041d 	andeq	r0, r0, sp, lsl r4
    bd8c:	20c70110 	sbccs	r0, r7, r0, lsl r1
    bd90:	ed010000 	stc	0, cr0, [r1]
    bd94:	00004501 	andeq	r4, r0, r1, lsl #10
    bd98:	00685400 	rsbeq	r5, r8, r0, lsl #8
    bd9c:	00686830 	rsbeq	r6, r8, r0, lsr r8
    bda0:	0043a730 	subeq	sl, r3, r0, lsr r7
    bda4:	0004fb00 	andeq	pc, r4, r0, lsl #22
    bda8:	14e51100 	strbtne	r1, [r5], #256	; 0x100
    bdac:	ed010000 	stc	0, cr0, [r1]
    bdb0:	0000049b 	muleq	r0, fp, r4
    bdb4:	000043c6 	andeq	r4, r0, r6, asr #7
    bdb8:	0019bf11 	andseq	fp, r9, r1, lsl pc
    bdbc:	fbed0100 	blx	ffb4c1c6 <rEINTPEND+0xa9b4c11e>
    bdc0:	d9000004 	stmdble	r0, {r2}
    bdc4:	11000043 	tstne	r0, r3, asr #32
    bdc8:	00001162 	andeq	r1, r0, r2, ror #2
    bdcc:	04fbed01 	ldrbteq	lr, [fp], #3329	; 0xd01
    bdd0:	43ec0000 	mvnmi	r0, #0
    bdd4:	9b110000 	blls	44bddc <DISABLE_IRQ+0x44bd5c>
    bdd8:	01000004 	tsteq	r0, r4
    bddc:	0004fbed 	andeq	pc, r4, sp, ror #23
    bde0:	0043ff00 	subeq	pc, r3, r0, lsl #30
    bde4:	04080000 	streq	r0, [r8]
    bde8:	0000005e 	andeq	r0, r0, lr, asr r0
    bdec:	21120110 	tstcs	r2, r0, lsl r1
    bdf0:	d3010000 	movwle	r0, #4096	; 0x1000
    bdf4:	00004501 	andeq	r4, r0, r1, lsl #10
    bdf8:	00686800 	rsbeq	r6, r8, r0, lsl #16
    bdfc:	00687c30 	rsbeq	r7, r8, r0, lsr ip
    be00:	00441230 	subeq	r1, r4, r0, lsr r2
    be04:	00052e00 	andeq	r2, r5, r0, lsl #28
    be08:	14e51100 	strbtne	r1, [r5], #256	; 0x100
    be0c:	d3010000 	movwle	r0, #4096	; 0x1000
    be10:	0000049b 	muleq	r0, fp, r4
    be14:	00004431 	andeq	r4, r0, r1, lsr r4
    be18:	69011000 	stmdbvs	r1, {ip}
    be1c:	01000020 	tsteq	r0, r0, lsr #32
    be20:	004501bb 	strheq	r0, [r5], #-27	; 0xffffffe5
    be24:	687c0000 	ldmdavs	ip!, {}^
    be28:	68903000 	ldmvs	r0, {ip, sp}
    be2c:	44443000 	strbmi	r3, [r4]
    be30:	055b0000 	ldrbeq	r0, [fp]
    be34:	e5110000 	ldr	r0, [r1]
    be38:	01000014 	tsteq	r0, r4, lsl r0
    be3c:	00049bbb 	undefined instruction 0x00049bbb
    be40:	00446300 	subeq	r6, r4, r0, lsl #6
    be44:	01100000 	tsteq	r0, r0
    be48:	00002095 	muleq	r0, r5, r0
    be4c:	4501a201 	strmi	sl, [r1, #-513]	; 0x201
    be50:	90000000 	andls	r0, r0, r0
    be54:	a4300068 	ldrtge	r0, [r0], #-104	; 0x68
    be58:	76300068 	ldrtvc	r0, [r0], -r8, rrx
    be5c:	a6000044 	strge	r0, [r0], -r4, asr #32
    be60:	11000005 	tstne	r0, r5
    be64:	000014e5 	andeq	r1, r0, r5, ror #9
    be68:	049ba201 	ldreq	sl, [fp], #513	; 0x201
    be6c:	44950000 	ldrmi	r0, [r5]
    be70:	ad110000 	ldcge	0, cr0, [r1]
    be74:	01000010 	tsteq	r0, r0, lsl r0
    be78:	0002cba2 	andeq	ip, r2, r2, lsr #23
    be7c:	0044a800 	subeq	sl, r4, r0, lsl #16
    be80:	181b1100 	ldmdane	fp, {r8, ip}
    be84:	a2010000 	andge	r0, r1, #0
    be88:	0000005e 	andeq	r0, r0, lr, asr r0
    be8c:	000044bb 	undefined instruction 0x000044bb
    be90:	ad011000 	stcge	0, cr1, [r1]
    be94:	01000020 	tsteq	r0, r0, lsr #32
    be98:	0045017d 	subeq	r0, r5, sp, ror r1
    be9c:	68a40000 	stmiavs	r4!, {}
    bea0:	68b83000 	ldmvs	r8!, {ip, sp}
    bea4:	44ce3000 	strbmi	r3, [lr]
    bea8:	05f10000 	ldrbeq	r0, [r1]!
    beac:	e5110000 	ldr	r0, [r1]
    beb0:	01000014 	tsteq	r0, r4, lsl r0
    beb4:	00049b7d 	andeq	r9, r4, sp, ror fp
    beb8:	0044ed00 	subeq	lr, r4, r0, lsl #26
    bebc:	10ad1100 	adcne	r1, sp, r0, lsl #2
    bec0:	7d010000 	stcvc	0, cr0, [r1]
    bec4:	000002cb 	andeq	r0, r0, fp, asr #5
    bec8:	00004500 	andeq	r4, r0, r0, lsl #10
    becc:	00181b11 	andseq	r1, r8, r1, lsl fp
    bed0:	5e7d0100 	rpwple	f0, f5, f0
    bed4:	13000000 	movwne	r0, #0
    bed8:	00000045 	andeq	r0, r0, r5, asr #32
    bedc:	207e0110 	rsbscs	r0, lr, r0, lsl r1
    bee0:	60010000 	andvs	r0, r1, r0
    bee4:	00004501 	andeq	r4, r0, r1, lsl #10
    bee8:	0068b800 	rsbeq	fp, r8, r0, lsl #16
    beec:	0068ec30 	rsbeq	lr, r8, r0, lsr ip
    bef0:	00452630 	subeq	r2, r5, r0, lsr r6
    bef4:	00063c00 	andeq	r3, r6, r0, lsl #24
    bef8:	0dc11100 	stfeqe	f1, [r1]
    befc:	60010000 	andvs	r0, r1, r0
    bf00:	00000090 	muleq	r0, r0, r0
    bf04:	00004545 	andeq	r4, r0, r5, asr #10
    bf08:	0005dc11 	andeq	sp, r5, r1, lsl ip
    bf0c:	28600100 	stmdacs	r0!, {r8}^
    bf10:	63000004 	movwvs	r0, #4
    bf14:	11000045 	tstne	r0, r5, asr #32
    bf18:	000017e3 	andeq	r1, r0, r3, ror #15
    bf1c:	04fb6001 	ldrbteq	r6, [fp], #1
    bf20:	45810000 	strmi	r0, [r1]
    bf24:	10000000 	andne	r0, r0, r0
    bf28:	0020fc01 	eoreq	pc, r0, r1, lsl #24
    bf2c:	01360100 	teqeq	r6, r0, lsl #2
    bf30:	00000045 	andeq	r0, r0, r5, asr #32
    bf34:	300068ec 	andcc	r6, r0, ip, ror #17
    bf38:	30006914 	andcc	r6, r0, r4, lsl r9
    bf3c:	0000459f 	muleq	r0, pc, r5
    bf40:	000006a4 	andeq	r0, r0, r4, lsr #13
    bf44:	0014e511 	andseq	lr, r4, r1, lsl r5
    bf48:	9b360100 	blls	d8c350 <MEM_SIZE+0x58c350>
    bf4c:	be000004 	cdplt	0, 0, cr0, cr0, cr4, {0}
    bf50:	11000045 	tstne	r0, r5, asr #32
    bf54:	00000aba 	undefined instruction 0x00000aba
    bf58:	06a43601 	strteq	r3, [r4], r1, lsl #12
    bf5c:	45d10000 	ldrbmi	r0, [r1]
    bf60:	f0110000 	undefined instruction 0xf0110000
    bf64:	01000017 	tsteq	r0, r7, lsl r0
    bf68:	00012536 	andeq	r2, r1, r6, lsr r5
    bf6c:	0045ef00 	subeq	lr, r5, r0, lsl #30
    bf70:	11061100 	tstne	r6, r0, lsl #2
    bf74:	36010000 	strcc	r0, [r1], -r0
    bf78:	00000478 	andeq	r0, r0, r8, ror r4
    bf7c:	00004602 	andeq	r4, r0, r2, lsl #12
    bf80:	00015d12 	andeq	r5, r1, r2, lsl sp
    bf84:	5e360100 	rsfpls	f0, f6, f0
    bf88:	02000000 	andeq	r0, r0, #0
    bf8c:	08000091 	stmdaeq	r0, {r0, r4, r7}
    bf90:	00047e04 	andeq	r7, r4, r4, lsl #28
    bf94:	038f1300 	orreq	r1, pc, #0
    bf98:	4a090000 	bmi	24bfa0 <DISABLE_IRQ+0x24bf20>
    bf9c:	0000049b 	muleq	r0, fp, r4
    bfa0:	c8000101 	stmdagt	r0, {r0, r8}
    bfa4:	02000005 	andeq	r0, r0, #5
    bfa8:	00246e00 	eoreq	r6, r4, r0, lsl #28
    bfac:	4d010400 	cfstrsmi	mvf0, [r1]
    bfb0:	01000000 	tsteq	r0, r0
    bfb4:	00002159 	andeq	r2, r0, r9, asr r1
    bfb8:	00000063 	andeq	r0, r0, r3, rrx
    bfbc:	30006914 	andcc	r6, r0, r4, lsl r9
    bfc0:	30006998 	mulcc	r0, r8, r9
    bfc4:	000025ca 	andeq	r2, r0, sl, asr #11
    bfc8:	00056402 	andeq	r6, r5, r2, lsl #8
    bfcc:	03210200 	teqeq	r1, #0
    bfd0:	00a00601 	adceq	r0, r0, r1, lsl #12
    bfd4:	01030000 	tsteq	r3, r0
    bfd8:	00009e08 	andeq	r9, r0, r8, lsl #28
    bfdc:	04f70400 	ldrbteq	r0, [r7], #1024	; 0x400
    bfe0:	24020000 	strcs	r0, [r2]
    bfe4:	00000033 	andeq	r0, r0, r3, lsr r0
    bfe8:	000afb04 	andeq	pc, sl, r4, lsl #22
    bfec:	50260200 	eorpl	r0, r6, r0, lsl #4
    bff0:	03000000 	movweq	r0, #0
    bff4:	008b0702 	addeq	r0, fp, r2, lsl #14
    bff8:	02030000 	andeq	r0, r3, #0
    bffc:	00005905 	andeq	r5, r0, r5, lsl #18
    c000:	03380400 	teqeq	r8, #0
    c004:	28020000 	stmdacs	r2, {}
    c008:	00000069 	andeq	r0, r0, r9, rrx
    c00c:	37070403 	strcc	r0, [r7, -r3, lsl #8]
    c010:	05000000 	streq	r0, [r0]
    c014:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    c018:	08030074 	stmdaeq	r3, {r2, r4, r5, r6}
    c01c:	00000005 	andeq	r0, r0, r5
    c020:	07080300 	streq	r0, [r8, -r0, lsl #6]
    c024:	0000002d 	andeq	r0, r0, sp, lsr #32
    c028:	00039f04 	andeq	r9, r3, r4, lsl #30
    c02c:	692d0200 	pushvs	{r9}
    c030:	04000000 	streq	r0, [r0]
    c034:	00000a27 	andeq	r0, r0, r7, lsr #20
    c038:	005e2a03 	subseq	r2, lr, r3, lsl #20
    c03c:	29040000 	stmdbcs	r4, {}
    c040:	03000008 	movweq	r0, #8
    c044:	00005e2c 	andeq	r5, r0, ip, lsr #28
    c048:	0c090600 	stceq	6, cr0, [r9], {0}
    c04c:	04080000 	streq	r0, [r8]
    c050:	0000cf23 	andeq	ip, r0, r3, lsr #30
    c054:	03110700 	tsteq	r1, #0
    c058:	24040000 	strcs	r0, [r4]
    c05c:	000000cf 	andeq	r0, r0, pc, asr #1
    c060:	07002302 	streq	r2, [r0, -r2, lsl #6]
    c064:	00000281 	andeq	r0, r0, r1, lsl #5
    c068:	00cf2504 	sbceq	r2, pc, r4, lsl #10
    c06c:	23020000 	movwcs	r0, #8192	; 0x2000
    c070:	04080004 	streq	r0, [r8], #-4
    c074:	000000a6 	andeq	r0, r0, r6, lsr #1
    c078:	000c0904 	andeq	r0, ip, r4, lsl #18
    c07c:	a6260400 	strtge	r0, [r6], -r0, lsl #8
    c080:	06000000 	streq	r0, [r0], -r0
    c084:	0000065c 	andeq	r0, r0, ip, asr r6
    c088:	252f0510 	strcs	r0, [pc, #-1296]!	; bb80 <DISABLE_IRQ+0xbb00>
    c08c:	07000001 	streq	r0, [r0, -r1]
    c090:	00000ac9 	andeq	r0, r0, r9, asr #21
    c094:	00d53105 	sbcseq	r3, r5, r5, lsl #2
    c098:	23020000 	movwcs	r0, #8192	; 0x2000
    c09c:	08e00700 	stmiaeq	r0!, {r8, r9, sl}^
    c0a0:	32050000 	andcc	r0, r5, #0
    c0a4:	00000125 	andeq	r0, r0, r5, lsr #2
    c0a8:	07082302 	streq	r2, [r8, -r2, lsl #6]
    c0ac:	00000900 	andeq	r0, r0, r0, lsl #18
    c0b0:	003a3305 	eorseq	r3, sl, r5, lsl #6
    c0b4:	23020000 	movwcs	r0, #8192	; 0x2000
    c0b8:	0427070c 	strteq	r0, [r7], #-1804	; 0x70c
    c0bc:	34050000 	strcc	r0, [r5]
    c0c0:	0000003a 	andeq	r0, r0, sl, lsr r0
    c0c4:	000d2302 	andeq	r2, sp, r2, lsl #6
    c0c8:	003a0408 	eorseq	r0, sl, r8, lsl #8
    c0cc:	5c040000 	stcpl	0, cr0, [r4], {0}
    c0d0:	05000006 	streq	r0, [r0, #-6]
    c0d4:	0000e036 	andeq	lr, r0, r6, lsr r0
    c0d8:	099f0600 	ldmibeq	pc, {r9, sl}
    c0dc:	056c0000 	strbeq	r0, [ip]!
    c0e0:	0002cb3a 	andeq	ip, r2, sl, lsr fp
    c0e4:	14810700 	strne	r0, [r1], #1792	; 0x700
    c0e8:	3b050000 	blcc	14c0f0 <DISABLE_IRQ+0x14c070>
    c0ec:	000002cb 	andeq	r0, r0, fp, asr #5
    c0f0:	07002302 	streq	r2, [r0, -r2, lsl #6]
    c0f4:	0000044d 	andeq	r0, r0, sp, asr #8
    c0f8:	00d54105 	sbcseq	r4, r5, r5, lsl #2
    c0fc:	23020000 	movwcs	r0, #8192	; 0x2000
    c100:	05520704 	ldrbeq	r0, [r2, #-1796]	; 0x704
    c104:	45050000 	strmi	r0, [r5]
    c108:	000002d1 	ldrdeq	r0, [r0], -r1
    c10c:	070c2302 	streq	r2, [ip, -r2, lsl #6]
    c110:	00001aef 	andeq	r1, r0, pc, ror #21
    c114:	005e4b05 	subseq	r4, lr, r5, lsl #22
    c118:	23020000 	movwcs	r0, #8192	; 0x2000
    c11c:	08780710 	ldmdaeq	r8!, {r4, r8, r9, sl}^
    c120:	4c050000 	stcmi	0, cr0, [r5], {0}
    c124:	0000005e 	andeq	r0, r0, lr, asr r0
    c128:	07142302 	ldreq	r2, [r4, -r2, lsl #6]
    c12c:	00001d35 	andeq	r1, r0, r5, lsr sp
    c130:	003a4d05 	eorseq	r4, sl, r5, lsl #26
    c134:	23020000 	movwcs	r0, #8192	; 0x2000
    c138:	1e5a0718 	mrcne	7, 2, r0, cr10, cr8, {0}
    c13c:	51050000 	tstpl	r5, r0
    c140:	0000003a 	andeq	r0, r0, sl, lsr r0
    c144:	07192302 	ldreq	r2, [r9, -r2, lsl #6]
    c148:	00000364 	andeq	r0, r0, r4, ror #6
    c14c:	003a5305 	eorseq	r5, sl, r5, lsl #6
    c150:	23020000 	movwcs	r0, #8192	; 0x2000
    c154:	043f071a 	ldrteq	r0, [pc], #1818	; c15c <DISABLE_IRQ+0xc0dc>
    c158:	56050000 	strpl	r0, [r5], -r0
    c15c:	0000003a 	andeq	r0, r0, sl, lsr r0
    c160:	071b2302 	ldreq	r2, [fp, -r2, lsl #6]
    c164:	00000bad 	andeq	r0, r0, sp, lsr #23
    c168:	03455a05 	movteq	r5, #23045	; 0x5a05
    c16c:	23020000 	movwcs	r0, #8192	; 0x2000
    c170:	0bf8071c 	bleq	ffe0dde8 <rEINTPEND+0xa9e0dd40>
    c174:	5f050000 	svcpl	0x00050000
    c178:	000000d5 	ldrdeq	r0, [r0], -r5
    c17c:	07202302 	streq	r2, [r0, -r2, lsl #6]!
    c180:	00000b03 	andeq	r0, r0, r3, lsl #22
    c184:	005e6305 	subseq	r6, lr, r5, lsl #6
    c188:	23020000 	movwcs	r0, #8192	; 0x2000
    c18c:	06250728 	strteq	r0, [r5], -r8, lsr #14
    c190:	65050000 	strvs	r0, [r5]
    c194:	0000034b 	andeq	r0, r0, fp, asr #6
    c198:	072c2302 	streq	r2, [ip, -r2, lsl #6]!
    c19c:	0000086e 	andeq	r0, r0, lr, ror #16
    c1a0:	00d56605 	sbcseq	r6, r5, r5, lsl #12
    c1a4:	23020000 	movwcs	r0, #8192	; 0x2000
    c1a8:	0c0e0730 	stceq	7, cr0, [lr], {48}	; 0x30
    c1ac:	68050000 	stmdavs	r5, {}
    c1b0:	00000090 	muleq	r0, r0, r0
    c1b4:	07382302 	ldreq	r2, [r8, -r2, lsl #6]!
    c1b8:	000007f3 	strdeq	r0, [r0], -r3
    c1bc:	00906905 	addseq	r6, r0, r5, lsl #18
    c1c0:	23020000 	movwcs	r0, #8192	; 0x2000
    c1c4:	05a7073c 	streq	r0, [r7, #1852]!	; 0x73c
    c1c8:	6b050000 	blvs	14c1d0 <DISABLE_IRQ+0x14c150>
    c1cc:	00000351 	andeq	r0, r0, r1, asr r3
    c1d0:	09402302 	stmdbeq	r0, {r1, r8, r9, sp}^
    c1d4:	0067736d 	rsbeq	r7, r7, sp, ror #6
    c1d8:	02cb6d05 	sbceq	r6, fp, #320	; 0x140
    c1dc:	23020000 	movwcs	r0, #8192	; 0x2000
    c1e0:	16300744 	ldrtne	r0, [r0], -r4, asr #14
    c1e4:	70050000 	andvc	r0, r5, r0
    c1e8:	0000009b 	muleq	r0, fp, r0
    c1ec:	07482302 	strbeq	r2, [r8, -r2, lsl #6]
    c1f0:	000008db 	ldrdeq	r0, [r0], -fp
    c1f4:	01257305 	teqeq	r5, r5, lsl #6
    c1f8:	23020000 	movwcs	r0, #8192	; 0x2000
    c1fc:	09ac074c 	stmibeq	ip!, {r2, r3, r6, r8, r9, sl}
    c200:	75050000 	strvc	r0, [r5]
    c204:	0000003a 	andeq	r0, r0, sl, lsr r0
    c208:	07502302 	ldrbeq	r2, [r0, -r2, lsl #6]
    c20c:	000007e6 	andeq	r0, r0, r6, ror #15
    c210:	003a7605 	eorseq	r7, sl, r5, lsl #12
    c214:	23020000 	movwcs	r0, #8192	; 0x2000
    c218:	053d0751 	ldreq	r0, [sp, #-1873]!	; 0x751
    c21c:	79050000 	stmdbvc	r5, {}
    c220:	00000357 	andeq	r0, r0, r7, asr r3
    c224:	07542302 	ldrbeq	r2, [r4, -r2, lsl #6]
    c228:	00000ab5 	undefined instruction 0x00000ab5
    c22c:	03da7c05 	bicseq	r7, sl, #1280	; 0x500
    c230:	23020000 	movwcs	r0, #8192	; 0x2000
    c234:	022b0758 	eoreq	r0, fp, #23068672	; 0x1600000
    c238:	80050000 	andhi	r0, r5, r0
    c23c:	00000417 	andeq	r0, r0, r7, lsl r4
    c240:	075c2302 	ldrbeq	r2, [ip, -r2, lsl #6]
    c244:	000004ad 	andeq	r0, r0, sp, lsr #9
    c248:	003a8405 	eorseq	r8, sl, r5, lsl #8
    c24c:	23020000 	movwcs	r0, #8192	; 0x2000
    c250:	02550760 	subseq	r0, r5, #25165824	; 0x1800000
    c254:	85050000 	strhi	r0, [r5]
    c258:	0000005e 	andeq	r0, r0, lr, asr r0
    c25c:	07642302 	strbeq	r2, [r4, -r2, lsl #6]!
    c260:	0000075a 	andeq	r0, r0, sl, asr r7
    c264:	02cb8605 	sbceq	r8, fp, #5242880	; 0x500000
    c268:	23020000 	movwcs	r0, #8192	; 0x2000
    c26c:	04080068 	streq	r0, [r8], #-104	; 0x68
    c270:	00000025 	andeq	r0, r0, r5, lsr #32
    c274:	0002cb0a 	andeq	ip, r2, sl, lsl #22
    c278:	0002e100 	andeq	lr, r2, r0, lsl #2
    c27c:	02e10b00 	rsceq	r0, r1, #0
    c280:	00000000 	andeq	r0, r0, r0
    c284:	0607040c 	streq	r0, [r7], -ip, lsl #8
    c288:	00000b2f 	andeq	r0, r0, pc, lsr #22
    c28c:	455a051c 	ldrbmi	r0, [sl, #-1308]	; 0x51c
    c290:	07000003 	streq	r0, [r0, -r3]
    c294:	00000536 	andeq	r0, r0, r6, lsr r5
    c298:	012b2706 	teqeq	fp, r6, lsl #14
    c29c:	23020000 	movwcs	r0, #8192	; 0x2000
    c2a0:	08670700 	stmdaeq	r7!, {r8, r9, sl}^
    c2a4:	2a060000 	bcs	18c2ac <DISABLE_IRQ+0x18c22c>
    c2a8:	0000049b 	muleq	r0, fp, r4
    c2ac:	07102302 	ldreq	r2, [r0, -r2, lsl #6]
    c2b0:	00000bad 	andeq	r0, r0, sp, lsr #23
    c2b4:	03452c06 	movteq	r2, #23558	; 0x5c06
    c2b8:	23020000 	movwcs	r0, #8192	; 0x2000
    c2bc:	05f60714 	ldrbeq	r0, [r6, #1812]!	; 0x714
    c2c0:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    c2c4:	0000003a 	andeq	r0, r0, sl, lsr r0
    c2c8:	07182302 	ldreq	r2, [r8, -r2, lsl #6]
    c2cc:	00000473 	andeq	r0, r0, r3, ror r4
    c2d0:	003a2f06 	eorseq	r2, sl, r6, lsl #30
    c2d4:	23020000 	movwcs	r0, #8192	; 0x2000
    c2d8:	048e0719 	streq	r0, [lr], #1817	; 0x719
    c2dc:	30060000 	andcc	r0, r6, r0
    c2e0:	0000003a 	andeq	r0, r0, sl, lsr r0
    c2e4:	001a2302 	andseq	r2, sl, r2, lsl #6
    c2e8:	02e40408 	rsceq	r0, r4, #134217728	; 0x8000000
    c2ec:	04080000 	streq	r0, [r8]
    c2f0:	00000085 	andeq	r0, r0, r5, lsl #1
    c2f4:	00d50408 	sbcseq	r0, r5, r8, lsl #8
    c2f8:	04080000 	streq	r0, [r8]
    c2fc:	0000012b 	andeq	r0, r0, fp, lsr #2
    c300:	00074b06 	andeq	r4, r7, r6, lsl #22
    c304:	7c052c00 	stcvc	12, cr2, [r5], {0}
    c308:	000003da 	ldrdeq	r0, [r0], -sl
    c30c:	00053607 	andeq	r3, r5, r7, lsl #12
    c310:	2b2e0700 	blcs	b8df18 <MEM_SIZE+0x38df18>
    c314:	02000001 	andeq	r0, r0, #1
    c318:	dd070023 	stcle	0, cr0, [r7, #-140]	; 0xffffff74
    c31c:	07000007 	streq	r0, [r0, -r7]
    c320:	00047230 	andeq	r7, r4, r0, lsr r2
    c324:	10230200 	eorne	r0, r3, r0, lsl #4
    c328:	0005e407 	andeq	lr, r5, r7, lsl #8
    c32c:	9b310700 	blls	c4df34 <MEM_SIZE+0x44df34>
    c330:	02000000 	andeq	r0, r0, #0
    c334:	0e071423 	cdpeq	4, 0, cr1, cr7, cr3, {1}
    c338:	0700000b 	streq	r0, [r0, -fp]
    c33c:	00009b32 	andeq	r9, r0, r2, lsr fp
    c340:	18230200 	stmdane	r3!, {r9}
    c344:	0005f007 	andeq	pc, r5, r7
    c348:	72340700 	eorsvc	r0, r4, #0
    c34c:	02000004 	andeq	r0, r0, #4
    c350:	4e071c23 	cdpmi	12, 0, cr1, cr7, cr3, {1}
    c354:	07000001 	streq	r0, [r0, -r1]
    c358:	00047235 	andeq	r7, r4, r5, lsr r2
    c35c:	20230200 	eorcs	r0, r3, r0, lsl #4
    c360:	00052707 	andeq	r2, r5, r7, lsl #14
    c364:	9b360700 	blls	d8df6c <MEM_SIZE+0x58df6c>
    c368:	02000000 	andeq	r0, r0, #0
    c36c:	9b072423 	blls	1d5400 <DISABLE_IRQ+0x1d5380>
    c370:	07000004 	streq	r0, [r0, -r4]
    c374:	00009b37 	andeq	r9, r0, r7, lsr fp
    c378:	28230200 	stmdacs	r3!, {r9}
    c37c:	5d040800 	stcpl	8, cr0, [r4]
    c380:	06000003 	streq	r0, [r0], -r3
    c384:	00000aa7 	andeq	r0, r0, r7, lsr #21
    c388:	17800518 	usada8ne	r0, r8, r5, r0
    c38c:	07000004 	streq	r0, [r0, -r4]
    c390:	00000536 	andeq	r0, r0, r6, lsr r5
    c394:	012b2208 	teqeq	fp, r8, lsl #4
    c398:	23020000 	movwcs	r0, #8192	; 0x2000
    c39c:	04470700 	strbeq	r0, [r7], #-1792	; 0x700
    c3a0:	23080000 	movwcs	r0, #32768	; 0x8000
    c3a4:	0000005e 	andeq	r0, r0, lr, asr r0
    c3a8:	07102302 	ldreq	r2, [r0, -r2, lsl #6]
    c3ac:	00001b3f 	andeq	r1, r0, pc, lsr fp
    c3b0:	04842408 	streq	r2, [r4], #1032	; 0x408
    c3b4:	23020000 	movwcs	r0, #8192	; 0x2000
    c3b8:	04080014 	streq	r0, [r8], #-20
    c3bc:	000003e0 	andeq	r0, r0, r0, ror #7
    c3c0:	00099f04 	andeq	r9, r9, r4, lsl #30
    c3c4:	36890500 	strcc	r0, [r9], r0, lsl #10
    c3c8:	06000001 	streq	r0, [r0], -r1
    c3cc:	00000b61 	andeq	r0, r0, r1, ror #22
    c3d0:	5f21070c 	svcpl	0x0021070c
    c3d4:	07000004 	streq	r0, [r0, -r4]
    c3d8:	00000311 	andeq	r0, r0, r1, lsl r3
    c3dc:	045f2307 	ldrbeq	r2, [pc], #775	; c3e4 <DISABLE_IRQ+0xc364>
    c3e0:	23020000 	movwcs	r0, #8192	; 0x2000
    c3e4:	05dc0700 	ldrbeq	r0, [ip, #1792]	; 0x700
    c3e8:	24070000 	strcs	r0, [r7]
    c3ec:	00000465 	andeq	r0, r0, r5, ror #8
    c3f0:	07042302 	streq	r2, [r4, -r2, lsl #6]
    c3f4:	00001630 	andeq	r1, r0, r0, lsr r6
    c3f8:	009b2507 	addseq	r2, fp, r7, lsl #10
    c3fc:	23020000 	movwcs	r0, #8192	; 0x2000
    c400:	04080008 	streq	r0, [r8], #-8
    c404:	00000428 	andeq	r0, r0, r8, lsr #8
    c408:	6104040d 	tstvs	r4, sp, lsl #8
    c40c:	0700000b 	streq	r0, [r0, -fp]
    c410:	00042827 	andeq	r2, r4, r7, lsr #16
    c414:	67040800 	strvs	r0, [r4, -r0, lsl #16]
    c418:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    c41c:	00048401 	andeq	r8, r4, r1, lsl #8
    c420:	04170f00 	ldreq	r0, [r7], #-3840	; 0xf00
    c424:	08000000 	stmdaeq	r0, {}
    c428:	00047804 	andeq	r7, r4, r4, lsl #16
    c42c:	0aa70400 	beq	fe9cd434 <rEINTPEND+0xa89cd38c>
    c430:	26080000 	strcs	r0, [r8], -r0
    c434:	000003e0 	andeq	r0, r0, r0, ror #7
    c438:	048a0408 	streq	r0, [sl], #1032	; 0x408
    c43c:	04080000 	streq	r0, [r8]
    c440:	0000041d 	andeq	r0, r0, sp, lsl r4
    c444:	213f0110 	teqcs	pc, r0, lsl r1
    c448:	9b010000 	blls	4c450 <DISABLE_IRQ+0x4c3d0>
    c44c:	00004501 	andeq	r4, r0, r1, lsl #10
    c450:	00691400 	rsbeq	r1, r9, r0, lsl #8
    c454:	00692830 	rsbeq	r2, r9, r0, lsr r8
    c458:	00461530 	subeq	r1, r6, r0, lsr r5
    c45c:	0004ce00 	andeq	ip, r4, r0, lsl #28
    c460:	14e51100 	strbtne	r1, [r5], #256	; 0x100
    c464:	9b010000 	blls	4c46c <DISABLE_IRQ+0x4c3ec>
    c468:	0000049b 	muleq	r0, fp, r4
    c46c:	00004634 	andeq	r4, r0, r4, lsr r6
    c470:	68011000 	stmdavs	r1, {ip}
    c474:	01000021 	tsteq	r0, r1, lsr #32
    c478:	00450186 	subeq	r0, r5, r6, lsl #3
    c47c:	69280000 	stmdbvs	r8!, {}
    c480:	693c3000 	ldmdbvs	ip!, {ip, sp}
    c484:	46473000 	strbmi	r3, [r7], -r0
    c488:	050a0000 	streq	r0, [sl]
    c48c:	e5110000 	ldr	r0, [r1]
    c490:	01000014 	tsteq	r0, r4, lsl r0
    c494:	00049b86 	andeq	r9, r4, r6, lsl #23
    c498:	00466600 	subeq	r6, r6, r0, lsl #12
    c49c:	1b9e1100 	blne	fe7908a4 <rEINTPEND+0xa87907fc>
    c4a0:	86010000 	strhi	r0, [r1], -r0
    c4a4:	0000005e 	andeq	r0, r0, lr, asr r0
    c4a8:	00004679 	andeq	r4, r0, r9, ror r6
    c4ac:	7f011000 	svcvc	0x00011000
    c4b0:	01000021 	tsteq	r0, r1, lsr #32
    c4b4:	0045016e 	subeq	r0, r5, lr, ror #2
    c4b8:	693c0000 	ldmdbvs	ip!, {}
    c4bc:	69603000 	stmdbvs	r0!, {ip, sp}^
    c4c0:	468c3000 	strmi	r3, [ip], r0
    c4c4:	05370000 	ldreq	r0, [r7]!
    c4c8:	c1110000 	tstgt	r1, r0
    c4cc:	0100000d 	tsteq	r0, sp
    c4d0:	0000906e 	andeq	r9, r0, lr, rrx
    c4d4:	0046ab00 	subeq	sl, r6, r0, lsl #22
    c4d8:	01100000 	tsteq	r0, r0
    c4dc:	00002128 	andeq	r2, r0, r8, lsr #2
    c4e0:	45014f01 	strmi	r4, [r1, #-3841]	; 0xf01
    c4e4:	60000000 	andvs	r0, r0, r0
    c4e8:	74300069 	ldrtvc	r0, [r0], #-105	; 0x69
    c4ec:	c9300069 	ldmdbgt	r0!, {r0, r3, r5, r6}
    c4f0:	64000046 	strvs	r0, [r0], #-70	; 0x46
    c4f4:	11000005 	tstne	r0, r5
    c4f8:	000014e5 	andeq	r1, r0, r5, ror #9
    c4fc:	049b4f01 	ldreq	r4, [fp], #3841	; 0xf01
    c500:	46e80000 	strbtmi	r0, [r8], r0
    c504:	10000000 	andne	r0, r0, r0
    c508:	00219601 	eoreq	r9, r1, r1, lsl #12
    c50c:	01370100 	teqeq	r7, r0, lsl #2
    c510:	00000045 	andeq	r0, r0, r5, asr #32
    c514:	30006974 	andcc	r6, r0, r4, ror r9
    c518:	30006998 	mulcc	r0, r8, r9
    c51c:	000046fb 	strdeq	r4, [r0], -fp
    c520:	000005be 	undefined instruction 0x000005be
    c524:	0014e511 	andseq	lr, r4, r1, lsl r5
    c528:	9b370100 	blls	dcc930 <MEM_SIZE+0x5cc930>
    c52c:	1a000004 	bne	c544 <DISABLE_IRQ+0xc4c4>
    c530:	11000047 	tstne	r0, r7, asr #32
    c534:	00001b90 	muleq	r0, r0, fp
    c538:	04953701 	ldreq	r3, [r5], #1793	; 0x701
    c53c:	472d0000 	strmi	r0, [sp, -r0]!
    c540:	6a110000 	bvs	44c548 <DISABLE_IRQ+0x44c4c8>
    c544:	01000004 	tsteq	r0, r4
    c548:	00012537 	andeq	r2, r1, r7, lsr r5
    c54c:	00474b00 	subeq	r4, r7, r0, lsl #22
    c550:	1bba1100 	blne	fee90958 <rEINTPEND+0xa8e908b0>
    c554:	37010000 	strcc	r0, [r1, -r0]
    c558:	0000005e 	andeq	r0, r0, lr, asr r0
    c55c:	0000475e 	andeq	r4, r0, lr, asr r7
    c560:	038f1200 	orreq	r1, pc, #0
    c564:	4a090000 	bmi	24c56c <DISABLE_IRQ+0x24c4ec>
    c568:	0000049b 	muleq	r0, fp, r4
    c56c:	4b000101 	blmi	c978 <DISABLE_IRQ+0xc8f8>
    c570:	0200000b 	andeq	r0, r0, #11
    c574:	00255100 	eoreq	r5, r5, r0, lsl #2
    c578:	4d010400 	cfstrsmi	mvf0, [r1]
    c57c:	01000000 	tsteq	r0, r0
    c580:	00002232 	andeq	r2, r0, r2, lsr r2
    c584:	00000063 	andeq	r0, r0, r3, rrx
    c588:	30006998 	mulcc	r0, r8, r9
    c58c:	30006d24 	andcc	r6, r0, r4, lsr #26
    c590:	000026a9 	andeq	r2, r0, r9, lsr #13
    c594:	00056402 	andeq	r6, r5, r2, lsl #8
    c598:	03210300 	teqeq	r1, #0
    c59c:	00a00601 	adceq	r0, r0, r1, lsl #12
    c5a0:	01030000 	tsteq	r3, r0
    c5a4:	00009e08 	andeq	r9, r0, r8, lsl #28
    c5a8:	04f70400 	ldrbteq	r0, [r7], #1024	; 0x400
    c5ac:	24030000 	strcs	r0, [r3]
    c5b0:	00000033 	andeq	r0, r0, r3, lsr r0
    c5b4:	000afb04 	andeq	pc, sl, r4, lsl #22
    c5b8:	50260300 	eorpl	r0, r6, r0, lsl #6
    c5bc:	03000000 	movweq	r0, #0
    c5c0:	008b0702 	addeq	r0, fp, r2, lsl #14
    c5c4:	02030000 	andeq	r0, r3, #0
    c5c8:	00005905 	andeq	r5, r0, r5, lsl #18
    c5cc:	03380400 	teqeq	r8, #0
    c5d0:	28030000 	stmdacs	r3, {}
    c5d4:	00000069 	andeq	r0, r0, r9, rrx
    c5d8:	37070403 	strcc	r0, [r7, -r3, lsl #8]
    c5dc:	05000000 	streq	r0, [r0]
    c5e0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    c5e4:	08030074 	stmdaeq	r3, {r2, r4, r5, r6}
    c5e8:	00000005 	andeq	r0, r0, r5
    c5ec:	07080300 	streq	r0, [r8, -r0, lsl #6]
    c5f0:	0000002d 	andeq	r0, r0, sp, lsr #32
    c5f4:	00039f04 	andeq	r9, r3, r4, lsl #30
    c5f8:	692d0300 	pushvs	{r8, r9}
    c5fc:	04000000 	streq	r0, [r0]
    c600:	00000132 	andeq	r0, r0, r2, lsr r1
    c604:	00692204 	rsbeq	r2, r9, r4, lsl #4
    c608:	27040000 	strcs	r0, [r4, -r0]
    c60c:	0500000a 	streq	r0, [r0, #-10]
    c610:	00005e2a 	andeq	r5, r0, sl, lsr #28
    c614:	08290400 	stmdaeq	r9!, {sl}
    c618:	2c050000 	stccs	0, cr0, [r5], {0}
    c61c:	0000005e 	andeq	r0, r0, lr, asr r0
    c620:	43060406 	movwmi	r0, #25606	; 0x6406
    c624:	00000256 	andeq	r0, r0, r6, asr r2
    c628:	000bb507 	andeq	fp, fp, r7, lsl #10
    c62c:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    c630:	0100000b 	tsteq	r0, fp
    c634:	0003aa07 	andeq	sl, r3, r7, lsl #20
    c638:	21070200 	tstcs	r7, r0, lsl #4
    c63c:	03000009 	movweq	r0, #9
    c640:	00063507 	andeq	r3, r6, r7, lsl #10
    c644:	35070400 	strcc	r0, [r7, #-1024]	; 0x400
    c648:	0500000a 	streq	r0, [r0, #-10]
    c64c:	000ad407 	andeq	sp, sl, r7, lsl #8
    c650:	ac070600 	stcge	6, cr0, [r7], {0}
    c654:	07000002 	streq	r0, [r0, -r2]
    c658:	0006e307 	andeq	lr, r6, r7, lsl #6
    c65c:	ee070800 	cdp	8, 0, cr0, cr7, cr0, {0}
    c660:	09000001 	stmdbeq	r0, {r0}
    c664:	0008cd07 	andeq	ip, r8, r7, lsl #26
    c668:	a1070a00 	tstge	r7, r0, lsl #20
    c66c:	0b00000b 	bleq	c6a0 <DISABLE_IRQ+0xc620>
    c670:	00048007 	andeq	r8, r4, r7
    c674:	bc070c00 	stclt	12, cr0, [r7], {0}
    c678:	0d000008 	stceq	0, cr0, [r0, #-32]	; 0xffffffe0
    c67c:	00070507 	andeq	r0, r7, r7, lsl #10
    c680:	d0070e00 	andle	r0, r7, r0, lsl #28
    c684:	0f000006 	svceq	0x00000006
    c688:	00034007 	andeq	r4, r3, r7
    c68c:	6a071000 	bvs	1d0694 <DISABLE_IRQ+0x1d0614>
    c690:	11000009 	tstne	r0, r9
    c694:	000b3907 	andeq	r3, fp, r7, lsl #18
    c698:	0e071200 	cdpeq	2, 0, cr1, cr7, cr0, {0}
    c69c:	13000006 	movwne	r0, #6
    c6a0:	0002be07 	andeq	fp, r2, r7, lsl #28
    c6a4:	90071400 	andls	r1, r7, r0, lsl #8
    c6a8:	15000006 	strne	r0, [r0, #-6]
    c6ac:	0008e507 	andeq	lr, r8, r7, lsl #10
    c6b0:	d0071600 	andle	r1, r7, r0, lsl #12
    c6b4:	17000002 	strne	r0, [r0, -r2]
    c6b8:	00090a07 	andeq	r0, r9, r7, lsl #20
    c6bc:	15071800 	strne	r1, [r7, #-2048]	; 0x800
    c6c0:	19000002 	stmdbne	r0, {r1}
    c6c4:	00077607 	andeq	r7, r7, r7, lsl #12
    c6c8:	f0071a00 	undefined instruction 0xf0071a00
    c6cc:	1b000002 	blne	c6dc <DISABLE_IRQ+0xc65c>
    c6d0:	000bc107 	andeq	ip, fp, r7, lsl #2
    c6d4:	05071c00 	streq	r1, [r7, #-3072]	; 0xc00
    c6d8:	1d000004 	stcne	0, cr0, [r0, #-16]
    c6dc:	00081007 	andeq	r1, r8, r7
    c6e0:	32071e00 	andcc	r1, r7, #0
    c6e4:	1f000009 	svcne	0x00000009
    c6e8:	00026707 	andeq	r6, r2, r7, lsl #14
    c6ec:	b1072000 	tstlt	r7, r0
    c6f0:	21000005 	tstcs	r0, r5
    c6f4:	00064407 	andeq	r4, r6, r7, lsl #8
    c6f8:	ff072200 	undefined instruction 0xff072200
    c6fc:	23000007 	movwcs	r0, #7
    c700:	0003ba07 	andeq	fp, r3, r7, lsl #20
    c704:	99072400 	stmdbls	r7, {sl, sp}
    c708:	25000008 	strcs	r0, [r0, #-8]
    c70c:	000b4b07 	andeq	r4, fp, r7, lsl #22
    c710:	83072600 	movwhi	r2, #30208	; 0x7600
    c714:	27000008 	strcs	r0, [r0, -r8]
    c718:	00023e07 	andeq	r3, r2, r7, lsl #28
    c71c:	b7072800 	strlt	r2, [r7, -r0, lsl #16]
    c720:	29000009 	stmdbcs	r0, {r0, r3}
    c724:	000ae507 	andeq	lr, sl, r7, lsl #10
    c728:	87072a00 	strhi	r2, [r7, -r0, lsl #20]
    c72c:	2b00000a 	blcs	c75c <DISABLE_IRQ+0xc6dc>
    c730:	00094807 	andeq	r4, r9, r7, lsl #16
    c734:	f5072c00 	undefined instruction 0xf5072c00
    c738:	2d000009 	stccs	0, cr0, [r0, #-36]	; 0xffffffdc
    c73c:	0009c707 	andeq	ip, r9, r7, lsl #14
    c740:	cf072e00 	svcgt	0x00072e00
    c744:	2f000003 	svccs	0x00000003
    c748:	0006a707 	andeq	sl, r6, r7, lsl #14
    c74c:	13073000 	movwne	r3, #28672	; 0x7000
    c750:	31000004 	tstcc	r0, r4
    c754:	00098907 	andeq	r8, r9, r7, lsl #18
    c758:	52073200 	andpl	r3, r7, #0
    c75c:	33000003 	movwcc	r0, #3
    c760:	0005fd07 	andeq	pc, r5, r7, lsl #26
    c764:	d5073400 	strle	r3, [r7, #-1024]	; 0x400
    c768:	3500000b 	strcc	r0, [r0, #-11]
    c76c:	0004e107 	andeq	lr, r4, r7, lsl #2
    c770:	a8073600 	stmdage	r7, {r9, sl, ip, sp}
    c774:	37000007 	strcc	r0, [r0, -r7]
    c778:	00079207 	andeq	r9, r7, r7, lsl #4
    c77c:	16073800 	strne	r3, [r7], -r0, lsl #16
    c780:	39000003 	stmdbcc	r0, {r0, r1}
    c784:	0006f307 	andeq	pc, r6, r7, lsl #6
    c788:	e2073a00 	and	r3, r7, #0
    c78c:	3b000003 	blcc	c7a0 <DISABLE_IRQ+0xc720>
    c790:	0006bc07 	andeq	fp, r6, r7, lsl #24
    c794:	0f073c00 	svceq	0x00073c00
    c798:	3d000005 	stccc	0, cr0, [r0, #-20]	; 0xffffffec
    c79c:	00056d07 	andeq	r6, r5, r7, lsl #26
    c7a0:	cb073e00 	blgt	1dbfa8 <DISABLE_IRQ+0x1dbf28>
    c7a4:	3f000004 	svccc	0x00000004
    c7a8:	00036e07 	andeq	r6, r3, r7, lsl #28
    c7ac:	0700c000 	streq	ip, [r0, -r0]
    c7b0:	0000058b 	andeq	r0, r0, fp, lsl #11
    c7b4:	370700c1 	strcc	r0, [r7, -r1, asr #1]
    c7b8:	c2000008 	andgt	r0, r0, #8
    c7bc:	06740700 	ldrbteq	r0, [r4], -r0, lsl #14
    c7c0:	00c30000 	sbceq	r0, r3, r0
    c7c4:	06040600 	streq	r0, [r4], -r0, lsl #12
    c7c8:	00027791 	muleq	r2, r1, r7
    c7cc:	161d0700 	ldrne	r0, [sp], -r0, lsl #14
    c7d0:	07000000 	streq	r0, [r0, -r0]
    c7d4:	000016aa 	andeq	r1, r0, sl, lsr #13
    c7d8:	16390701 	ldrtne	r0, [r9], -r1, lsl #14
    c7dc:	07020000 	streq	r0, [r2, -r0]
    c7e0:	00001647 	andeq	r1, r0, r7, asr #12
    c7e4:	09080003 	stmdbeq	r8, {r0, r1}
    c7e8:	0800000c 	stmdaeq	r0, {r2, r3}
    c7ec:	02a02302 	adceq	r2, r0, #134217728	; 0x8000000
    c7f0:	11090000 	tstne	r9, r0
    c7f4:	02000003 	andeq	r0, r0, #3
    c7f8:	0002a024 	andeq	sl, r2, r4, lsr #32
    c7fc:	00230200 	eoreq	r0, r3, r0, lsl #4
    c800:	00028109 	andeq	r8, r2, r9, lsl #2
    c804:	a0250200 	eorge	r0, r5, r0, lsl #4
    c808:	02000002 	andeq	r0, r0, #2
    c80c:	0a000423 	beq	d8a0 <DISABLE_IRQ+0xd820>
    c810:	00027704 	andeq	r7, r2, r4, lsl #14
    c814:	0c090400 	cfstrseq	mvf0, [r9], {0}
    c818:	26020000 	strcs	r0, [r2], -r0
    c81c:	00000277 	andeq	r0, r0, r7, ror r2
    c820:	0010230b 	andseq	r2, r0, fp, lsl #6
    c824:	21070400 	tstcs	r7, r0, lsl #8
    c828:	000002fa 	strdeq	r0, [r0], -sl
    c82c:	000f7a07 	andeq	r7, pc, r7, lsl #20
    c830:	12070000 	andne	r0, r7, #0
    c834:	01000010 	tsteq	r0, r0, lsl r0
    c838:	00104007 	andseq	r4, r0, r7
    c83c:	af070200 	svcge	0x00070200
    c840:	0300000f 	movweq	r0, #15
    c844:	00106307 	andseq	r6, r0, r7, lsl #6
    c848:	71070400 	tstvc	r7, r0, lsl #8
    c84c:	05000010 	streq	r0, [r0, #-16]
    c850:	00101b07 	andseq	r1, r0, r7, lsl #22
    c854:	93070600 	movwls	r0, #30208	; 0x7600
    c858:	0700000f 	streq	r0, [r0, -pc]
    c85c:	000ff807 	andeq	pc, pc, r7, lsl #16
    c860:	51070800 	tstpl	r7, r0, lsl #16
    c864:	09000010 	stmdbeq	r0, {r4}
    c868:	065c0800 	ldrbeq	r0, [ip], -r0, lsl #16
    c86c:	07100000 	ldreq	r0, [r0, -r0]
    c870:	00033f2f 	andeq	r3, r3, pc, lsr #30
    c874:	0ac90900 	beq	ff24ec7c <rEINTPEND+0xa924ebd4>
    c878:	31070000 	tstcc	r7, r0
    c87c:	000002a6 	andeq	r0, r0, r6, lsr #5
    c880:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    c884:	000008e0 	andeq	r0, r0, r0, ror #17
    c888:	033f3207 	teqeq	pc, #1879048192	; 0x70000000
    c88c:	23020000 	movwcs	r0, #8192	; 0x2000
    c890:	09000908 	stmdbeq	r0, {r3, r8, fp}
    c894:	33070000 	movwcc	r0, #28672	; 0x7000
    c898:	0000003a 	andeq	r0, r0, sl, lsr r0
    c89c:	090c2302 	stmdbeq	ip, {r1, r8, r9, sp}
    c8a0:	00000427 	andeq	r0, r0, r7, lsr #8
    c8a4:	003a3407 	eorseq	r3, sl, r7, lsl #8
    c8a8:	23020000 	movwcs	r0, #8192	; 0x2000
    c8ac:	040a000d 	streq	r0, [sl], #-13
    c8b0:	0000003a 	andeq	r0, r0, sl, lsr r0
    c8b4:	00065c04 	andeq	r5, r6, r4, lsl #24
    c8b8:	fa360700 	blx	d8e4c0 <MEM_SIZE+0x58e4c0>
    c8bc:	08000002 	stmdaeq	r0, {r1}
    c8c0:	0000099f 	muleq	r0, pc, r9
    c8c4:	e53a076c 	ldr	r0, [sl, #-1900]!	; 0x76c
    c8c8:	09000004 	stmdbeq	r0, {r2}
    c8cc:	00001481 	andeq	r1, r0, r1, lsl #9
    c8d0:	04e53b07 	strbteq	r3, [r5], #2823	; 0xb07
    c8d4:	23020000 	movwcs	r0, #8192	; 0x2000
    c8d8:	044d0900 	strbeq	r0, [sp], #-2304	; 0x900
    c8dc:	41070000 	tstmi	r7, r0
    c8e0:	000002a6 	andeq	r0, r0, r6, lsr #5
    c8e4:	09042302 	stmdbeq	r4, {r1, r8, r9, sp}
    c8e8:	00000552 	andeq	r0, r0, r2, asr r5
    c8ec:	04eb4507 	strbteq	r4, [fp], #1287	; 0x507
    c8f0:	23020000 	movwcs	r0, #8192	; 0x2000
    c8f4:	1aef090c 	bne	ffbced2c <rEINTPEND+0xa9bcec84>
    c8f8:	4b070000 	blmi	1cc900 <DISABLE_IRQ+0x1cc880>
    c8fc:	0000005e 	andeq	r0, r0, lr, asr r0
    c900:	09102302 	ldmdbeq	r0, {r1, r8, r9, sp}
    c904:	00000878 	andeq	r0, r0, r8, ror r8
    c908:	005e4c07 	subseq	r4, lr, r7, lsl #24
    c90c:	23020000 	movwcs	r0, #8192	; 0x2000
    c910:	1d350914 	ldcne	9, cr0, [r5, #-80]!	; 0xffffffb0
    c914:	4d070000 	stcmi	0, cr0, [r7]
    c918:	0000003a 	andeq	r0, r0, sl, lsr r0
    c91c:	09182302 	ldmdbeq	r8, {r1, r8, r9, sp}
    c920:	00001e5a 	andeq	r1, r0, sl, asr lr
    c924:	003a5107 	eorseq	r5, sl, r7, lsl #2
    c928:	23020000 	movwcs	r0, #8192	; 0x2000
    c92c:	03640919 	cmneq	r4, #409600	; 0x64000
    c930:	53070000 	movwpl	r0, #28672	; 0x7000
    c934:	0000003a 	andeq	r0, r0, sl, lsr r0
    c938:	091a2302 	ldmdbeq	sl, {r1, r8, r9, sp}
    c93c:	0000043f 	andeq	r0, r0, pc, lsr r4
    c940:	003a5607 	eorseq	r5, sl, r7, lsl #12
    c944:	23020000 	movwcs	r0, #8192	; 0x2000
    c948:	0bad091b 	bleq	feb4edbc <rEINTPEND+0xa8b4ed14>
    c94c:	5a070000 	bpl	1cc954 <DISABLE_IRQ+0x1cc8d4>
    c950:	0000055f 	andeq	r0, r0, pc, asr r5
    c954:	091c2302 	ldmdbeq	ip, {r1, r8, r9, sp}
    c958:	00000bf8 	strdeq	r0, [r0], -r8
    c95c:	02a65f07 	adceq	r5, r6, #28
    c960:	23020000 	movwcs	r0, #8192	; 0x2000
    c964:	0b030920 	bleq	cedec <DISABLE_IRQ+0xced6c>
    c968:	63070000 	movwvs	r0, #28672	; 0x7000
    c96c:	0000005e 	andeq	r0, r0, lr, asr r0
    c970:	09282302 	stmdbeq	r8!, {r1, r8, r9, sp}
    c974:	00000625 	andeq	r0, r0, r5, lsr #12
    c978:	05656507 	strbeq	r6, [r5, #-1287]!	; 0x507
    c97c:	23020000 	movwcs	r0, #8192	; 0x2000
    c980:	086e092c 	stmdaeq	lr!, {r2, r3, r5, r8, fp}^
    c984:	66070000 	strvs	r0, [r7], -r0
    c988:	000002a6 	andeq	r0, r0, r6, lsr #5
    c98c:	09302302 	ldmdbeq	r0!, {r1, r8, r9, sp}
    c990:	00000c0e 	andeq	r0, r0, lr, lsl #24
    c994:	009b6807 	addseq	r6, fp, r7, lsl #16
    c998:	23020000 	movwcs	r0, #8192	; 0x2000
    c99c:	07f30938 	undefined instruction 0x07f30938
    c9a0:	69070000 	stmdbvs	r7, {}
    c9a4:	0000009b 	muleq	r0, fp, r0
    c9a8:	093c2302 	ldmdbeq	ip!, {r1, r8, r9, sp}
    c9ac:	000005a7 	andeq	r0, r0, r7, lsr #11
    c9b0:	056b6b07 	strbeq	r6, [fp, #-2823]!	; 0xb07
    c9b4:	23020000 	movwcs	r0, #8192	; 0x2000
    c9b8:	736d0c40 	cmnvc	sp, #16384	; 0x4000
    c9bc:	6d070067 	stcvs	0, cr0, [r7, #-412]	; 0xfffffe64
    c9c0:	000004e5 	andeq	r0, r0, r5, ror #9
    c9c4:	09442302 	stmdbeq	r4, {r1, r8, r9, sp}^
    c9c8:	00001630 	andeq	r1, r0, r0, lsr r6
    c9cc:	00a67007 	adceq	r7, r6, r7
    c9d0:	23020000 	movwcs	r0, #8192	; 0x2000
    c9d4:	08db0948 	ldmeq	fp, {r3, r6, r8, fp}^
    c9d8:	73070000 	movwvc	r0, #28672	; 0x7000
    c9dc:	0000033f 	andeq	r0, r0, pc, lsr r3
    c9e0:	094c2302 	stmdbeq	ip, {r1, r8, r9, sp}^
    c9e4:	000009ac 	andeq	r0, r0, ip, lsr #19
    c9e8:	003a7507 	eorseq	r7, sl, r7, lsl #10
    c9ec:	23020000 	movwcs	r0, #8192	; 0x2000
    c9f0:	07e60950 	ubfxeq	r0, r0, #18, #7
    c9f4:	76070000 	strvc	r0, [r7], -r0
    c9f8:	0000003a 	andeq	r0, r0, sl, lsr r0
    c9fc:	09512302 	ldmdbeq	r1, {r1, r8, r9, sp}^
    ca00:	0000053d 	andeq	r0, r0, sp, lsr r5
    ca04:	05717907 	ldrbeq	r7, [r1, #-2311]!	; 0x907
    ca08:	23020000 	movwcs	r0, #8192	; 0x2000
    ca0c:	0ab50954 	beq	fed4ef64 <rEINTPEND+0xa8d4eebc>
    ca10:	7c070000 	stcvc	0, cr0, [r7], {0}
    ca14:	000005f4 	strdeq	r0, [r0], -r4
    ca18:	09582302 	ldmdbeq	r8, {r1, r8, r9, sp}^
    ca1c:	0000022b 	andeq	r0, r0, fp, lsr #4
    ca20:	06318007 	ldrteq	r8, [r1], -r7
    ca24:	23020000 	movwcs	r0, #8192	; 0x2000
    ca28:	04ad095c 	strteq	r0, [sp], #2396	; 0x95c
    ca2c:	84070000 	strhi	r0, [r7]
    ca30:	0000003a 	andeq	r0, r0, sl, lsr r0
    ca34:	09602302 	stmdbeq	r0!, {r1, r8, r9, sp}^
    ca38:	00000255 	andeq	r0, r0, r5, asr r2
    ca3c:	005e8507 	subseq	r8, lr, r7, lsl #10
    ca40:	23020000 	movwcs	r0, #8192	; 0x2000
    ca44:	075a0964 	ldrbeq	r0, [sl, -r4, ror #18]
    ca48:	86070000 	strhi	r0, [r7], -r0
    ca4c:	000004e5 	andeq	r0, r0, r5, ror #9
    ca50:	00682302 	rsbeq	r2, r8, r2, lsl #6
    ca54:	0025040a 	eoreq	r0, r5, sl, lsl #8
    ca58:	e50d0000 	str	r0, [sp]
    ca5c:	fb000004 	blx	ca76 <DISABLE_IRQ+0xc9f6>
    ca60:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    ca64:	000004fb 	strdeq	r0, [r0], -fp
    ca68:	040f0000 	streq	r0, [pc], #0	; ca70 <DISABLE_IRQ+0xc9f0>
    ca6c:	0b2f0807 	bleq	bcea90 <MEM_SIZE+0x3cea90>
    ca70:	071c0000 	ldreq	r0, [ip, -r0]
    ca74:	00055f5a 	andeq	r5, r5, sl, asr pc
    ca78:	05360900 	ldreq	r0, [r6, #-2304]!	; 0x900
    ca7c:	27080000 	strcs	r0, [r8, -r0]
    ca80:	00000345 	andeq	r0, r0, r5, asr #6
    ca84:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    ca88:	00000867 	andeq	r0, r0, r7, ror #16
    ca8c:	07132a08 	ldreq	r2, [r3, -r8, lsl #20]
    ca90:	23020000 	movwcs	r0, #8192	; 0x2000
    ca94:	0bad0910 	bleq	feb4eedc <rEINTPEND+0xa8b4ee34>
    ca98:	2c080000 	stccs	0, cr0, [r8], {0}
    ca9c:	0000055f 	andeq	r0, r0, pc, asr r5
    caa0:	09142302 	ldmdbeq	r4, {r1, r8, r9, sp}
    caa4:	000005f6 	strdeq	r0, [r0], -r6
    caa8:	003a2e08 	eorseq	r2, sl, r8, lsl #28
    caac:	23020000 	movwcs	r0, #8192	; 0x2000
    cab0:	04730918 	ldrbteq	r0, [r3], #-2328	; 0x918
    cab4:	2f080000 	svccs	0x00080000
    cab8:	0000003a 	andeq	r0, r0, sl, lsr r0
    cabc:	09192302 	ldmdbeq	r9, {r1, r8, r9, sp}
    cac0:	0000048e 	andeq	r0, r0, lr, lsl #9
    cac4:	003a3008 	eorseq	r3, sl, r8
    cac8:	23020000 	movwcs	r0, #8192	; 0x2000
    cacc:	040a001a 	streq	r0, [sl], #-26
    cad0:	000004fe 	strdeq	r0, [r0], -lr
    cad4:	0085040a 	addeq	r0, r5, sl, lsl #8
    cad8:	040a0000 	streq	r0, [sl]
    cadc:	000002a6 	andeq	r0, r0, r6, lsr #5
    cae0:	0345040a 	movteq	r0, #21514	; 0x540a
    cae4:	4b080000 	blmi	20caec <DISABLE_IRQ+0x20ca6c>
    cae8:	2c000007 	stccs	0, cr0, [r0], {7}
    caec:	05f47c07 	ldrbeq	r7, [r4, #3079]!	; 0xc07
    caf0:	36090000 	strcc	r0, [r9], -r0
    caf4:	09000005 	stmdbeq	r0, {r0, r2}
    caf8:	0003452e 	andeq	r4, r3, lr, lsr #10
    cafc:	00230200 	eoreq	r0, r3, r0, lsl #4
    cb00:	0007dd09 	andeq	sp, r7, r9, lsl #26
    cb04:	f0300900 	undefined instruction 0xf0300900
    cb08:	02000006 	andeq	r0, r0, #6
    cb0c:	e4091023 	str	r1, [r9], #-35	; 0x23
    cb10:	09000005 	stmdbeq	r0, {r0, r2}
    cb14:	0000a631 	andeq	sl, r0, r1, lsr r6
    cb18:	14230200 	strtne	r0, [r3], #-512	; 0x200
    cb1c:	000b0e09 	andeq	r0, fp, r9, lsl #28
    cb20:	a6320900 	ldrtge	r0, [r2], -r0, lsl #18
    cb24:	02000000 	andeq	r0, r0, #0
    cb28:	f0091823 	undefined instruction 0xf0091823
    cb2c:	09000005 	stmdbeq	r0, {r0, r2}
    cb30:	0006f034 	andeq	pc, r6, r4, lsr r0
    cb34:	1c230200 	sfmne	f0, 4, [r3]	; (stcne 2, cr0, [r3])
    cb38:	00014e09 	andeq	r4, r1, r9, lsl #28
    cb3c:	f0350900 	undefined instruction 0xf0350900
    cb40:	02000006 	andeq	r0, r0, #6
    cb44:	27092023 	strcs	r2, [r9, -r3, lsr #32]
    cb48:	09000005 	stmdbeq	r0, {r0, r2}
    cb4c:	0000a636 	andeq	sl, r0, r6, lsr r6
    cb50:	24230200 	strtcs	r0, [r3], #-512	; 0x200
    cb54:	00049b09 	andeq	r9, r4, r9, lsl #22
    cb58:	a6370900 	ldrtge	r0, [r7], -r0, lsl #18
    cb5c:	02000000 	andeq	r0, r0, #0
    cb60:	0a002823 	beq	16bf4 <DISABLE_IRQ+0x16b74>
    cb64:	00057704 	andeq	r7, r5, r4, lsl #14
    cb68:	0aa70800 	beq	fe9ceb70 <rEINTPEND+0xa89ceac8>
    cb6c:	07180000 	ldreq	r0, [r8, -r0]
    cb70:	00063180 	andeq	r3, r6, r0, lsl #3
    cb74:	05360900 	ldreq	r0, [r6, #-2304]!	; 0x900
    cb78:	220a0000 	andcs	r0, sl, #0
    cb7c:	00000345 	andeq	r0, r0, r5, asr #6
    cb80:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    cb84:	00000447 	andeq	r0, r0, r7, asr #8
    cb88:	005e230a 	subseq	r2, lr, sl, lsl #6
    cb8c:	23020000 	movwcs	r0, #8192	; 0x2000
    cb90:	1b3f0910 	blne	fcefd8 <MEM_SIZE+0x7cefd8>
    cb94:	240a0000 	strcs	r0, [sl]
    cb98:	00000702 	andeq	r0, r0, r2, lsl #14
    cb9c:	00142302 	andseq	r2, r4, r2, lsl #6
    cba0:	05fa040a 	ldrbeq	r0, [sl, #1034]!	; 0x40a
    cba4:	9f040000 	svcls	0x00040000
    cba8:	07000009 	streq	r0, [r0, -r9]
    cbac:	00035089 	andeq	r5, r3, r9, lsl #1
    cbb0:	14af1000 	strtne	r1, [pc], #0	; cbb8 <DISABLE_IRQ+0xcb38>
    cbb4:	01fc0000 	mvnseq	r0, r0
    cbb8:	067b8f07 	ldrbteq	r8, [fp], -r7, lsl #30
    cbbc:	cf090000 	svcgt	0x00090000
    cbc0:	07000013 	smladeq	r0, r3, r0, r0
    cbc4:	00003a91 	muleq	r0, r1, sl
    cbc8:	00230200 	eoreq	r0, r3, r0, lsl #4
    cbcc:	00139109 	andseq	r9, r3, r9, lsl #2
    cbd0:	7b930700 	blvc	fe4ce7d8 <rEINTPEND+0xa84ce730>
    cbd4:	02000006 	andeq	r0, r0, #6
    cbd8:	2c090423 	cfstrscs	mvf0, [r9], {35}	; 0x23
    cbdc:	07000014 	smladeq	r0, r4, r0, r0
    cbe0:	00068b95 	muleq	r6, r5, fp
    cbe4:	f4230300 	vld2.8	{d0-d3}, [r3], r0
    cbe8:	a60d0003 	strge	r0, [sp], -r3
    cbec:	8b000002 	blhi	cbfc <DISABLE_IRQ+0xcb7c>
    cbf0:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    cbf4:	000004fb 	strdeq	r0, [r0], -fp
    cbf8:	5e0d003d 	mcrpl	0, 0, r0, cr13, cr13, {1}
    cbfc:	9b000000 	blls	cc04 <DISABLE_IRQ+0xcb84>
    cc00:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    cc04:	000004fb 	strdeq	r0, [r0], -fp
    cc08:	af040001 	svcge	0x00040001
    cc0c:	07000014 	smladeq	r0, r4, r0, r0
    cc10:	00064297 	muleq	r6, r7, r2
    cc14:	0b610800 	bleq	184ec1c <MEM_SIZE+0x104ec1c>
    cc18:	090c0000 	stmdbeq	ip, {}
    cc1c:	0006dd21 	andeq	sp, r6, r1, lsr #26
    cc20:	03110900 	tsteq	r1, #0
    cc24:	23090000 	movwcs	r0, #36864	; 0x9000
    cc28:	000006dd 	ldrdeq	r0, [r0], -sp
    cc2c:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    cc30:	000005dc 	ldrdeq	r0, [r0], -ip
    cc34:	06e32409 	strbteq	r2, [r3], r9, lsl #8
    cc38:	23020000 	movwcs	r0, #8192	; 0x2000
    cc3c:	16300904 	ldrtne	r0, [r0], -r4, lsl #18
    cc40:	25090000 	strcs	r0, [r9]
    cc44:	000000a6 	andeq	r0, r0, r6, lsr #1
    cc48:	00082302 	andeq	r2, r8, r2, lsl #6
    cc4c:	06a6040a 	strteq	r0, [r6], sl, lsl #8
    cc50:	04110000 	ldreq	r0, [r1]
    cc54:	000b6104 	andeq	r6, fp, r4, lsl #2
    cc58:	a6270900 	strtge	r0, [r7], -r0, lsl #18
    cc5c:	0a000006 	beq	cc7c <DISABLE_IRQ+0xcbfc>
    cc60:	0006e504 	andeq	lr, r6, r4, lsl #10
    cc64:	02011200 	andeq	r1, r1, #0
    cc68:	13000007 	movwne	r0, #7
    cc6c:	00000631 	andeq	r0, r0, r1, lsr r6
    cc70:	f6040a00 	undefined instruction 0xf6040a00
    cc74:	04000006 	streq	r0, [r0], #-6
    cc78:	00000aa7 	andeq	r0, r0, r7, lsr #21
    cc7c:	05fa260a 	ldrbeq	r2, [sl, #1546]!	; 0x60a
    cc80:	040a0000 	streq	r0, [sl]
    cc84:	00000637 	andeq	r0, r0, r7, lsr r6
    cc88:	00224714 	eoreq	r4, r2, r4, lsl r7
    cc8c:	012f0200 	teqeq	pc, r0, lsl #4
    cc90:	00073203 	andeq	r3, r7, r3, lsl #4
    cc94:	0da31500 	cfstr32eq	mvfx1, [r3]
    cc98:	2f020000 	svccs	0x00020000
    cc9c:	0000056b 	andeq	r0, r0, fp, ror #10
    cca0:	22201400 	eorcs	r1, r0, #0
    cca4:	43020000 	movwmi	r0, #8192	; 0x2000
    cca8:	07560301 	ldrbeq	r0, [r6, -r1, lsl #6]
    ccac:	ac150000 	ldcge	0, cr0, [r5], {0}
    ccb0:	02000005 	andeq	r0, r0, #5
    ccb4:	00056b43 	andeq	r6, r5, r3, asr #22
    ccb8:	16b61500 	ldrtne	r1, [r6], r0, lsl #10
    ccbc:	43020000 	movwmi	r0, #8192	; 0x2000
    ccc0:	0000056b 	andeq	r0, r0, fp, ror #10
    ccc4:	21b01400 	lslscs	r1, r0, #8
    ccc8:	29010000 	stmdbcs	r1, {}
    cccc:	07af0301 	streq	r0, [pc, r1, lsl #6]!
    ccd0:	ac150000 	ldcge	0, cr0, [r5], {0}
    ccd4:	01000005 	tsteq	r0, r5
    ccd8:	00056b29 	andeq	r6, r5, r9, lsr #22
    ccdc:	0d941500 	cfldr32eq	mvfx1, [r4]
    cce0:	29010000 	stmdbcs	r1, {}
    cce4:	00000713 	andeq	r0, r0, r3, lsl r7
    cce8:	6c617616 	stclvs	6, cr7, [r1], #-88	; 0xffffffa8
    ccec:	9b2b0100 	blls	acd0f4 <MEM_SIZE+0x2cd0f4>
    ccf0:	16000000 	strne	r0, [r0], -r0
    ccf4:	2d010071 	stccs	0, cr0, [r1, #-452]	; 0xfffffe3c
    ccf8:	0000056b 	andeq	r0, r0, fp, ror #10
    ccfc:	00158017 	andseq	r8, r5, r7, lsl r0
    cd00:	6b2d0100 	blvs	b4d108 <MEM_SIZE+0x34d108>
    cd04:	17000005 	strne	r0, [r0, -r5]
    cd08:	000015b0 	undefined instruction 0x000015b0
    cd0c:	056b2d01 	strbeq	r2, [fp, #-3329]!	; 0xd01
    cd10:	0c170000 	ldceq	0, cr0, [r7], {0}
    cd14:	01000022 	tsteq	r0, r2, lsr #32
    cd18:	0007132e 	andeq	r1, r7, lr, lsr #6
    cd1c:	2d140000 	ldccs	0, cr0, [r4]
    cd20:	02000015 	andeq	r0, r0, #21
    cd24:	c803014e 	stmdagt	r3, {r1, r2, r3, r6, r8}
    cd28:	15000007 	strne	r0, [r0, #-7]
    cd2c:	000016b6 	undefined instruction 0x000016b6
    cd30:	056b4e02 	strbeq	r4, [fp, #-3586]!	; 0xe02
    cd34:	18000000 	stmdane	r0, {}
    cd38:	0021ca01 	eoreq	ip, r1, r1, lsl #20
    cd3c:	015e0100 	cmpeq	lr, r0, lsl #2
    cd40:	0007ed01 	andeq	lr, r7, r1, lsl #26
    cd44:	0d941500 	cfldr32eq	mvfx1, [r4]
    cd48:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    cd4c:	00000713 	andeq	r0, r0, r3, lsl r7
    cd50:	0021db17 	eoreq	sp, r1, r7, lsl fp
    cd54:	6b600100 	blvs	180d15c <MEM_SIZE+0x100d15c>
    cd58:	00000005 	andeq	r0, r0, r5
    cd5c:	22420119 	subcs	r0, r2, #1073741830	; 0x40000006
    cd60:	1f010000 	svcne	0x00010000
    cd64:	00699801 	rsbeq	r9, r9, r1, lsl #16
    cd68:	0069bc30 	rsbeq	fp, r9, r0, lsr ip
    cd6c:	235d0130 	cmpcs	sp, #12
    cd70:	16000008 	strne	r0, [r0], -r8
    cd74:	21010069 	tstcs	r1, r9, rrx
    cd78:	00000045 	andeq	r0, r0, r5, asr #32
    cd7c:	0007191a 	andeq	r1, r7, sl, lsl r9
    cd80:	0069a000 	rsbeq	sl, r9, r0
    cd84:	0069ac30 	rsbeq	sl, r9, r0, lsr ip
    cd88:	1b240130 	blne	90d250 <MEM_SIZE+0x10d250>
    cd8c:	00000726 	andeq	r0, r0, r6, lsr #14
    cd90:	011c0000 	tsteq	ip, r0
    cd94:	0000221b 	andeq	r2, r0, fp, lsl r2
    cd98:	bc014501 	cfstr32lt	mvfx4, [r1], {1}
    cd9c:	4c300069 	ldcmi	0, cr0, [r0], #-420	; 0xfffffe5c
    cda0:	7130006a 	teqvc	r0, sl, rrx
    cda4:	c6000047 	strgt	r0, [r0], -r7, asr #32
    cda8:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    cdac:	00000d94 	muleq	r0, r4, sp
    cdb0:	07134501 	ldreq	r4, [r3, -r1, lsl #10]
    cdb4:	50010000 	andpl	r0, r1, r0
    cdb8:	001c631e 	andseq	r6, ip, lr, lsl r3
    cdbc:	9b450100 	blls	114d1c4 <MEM_SIZE+0x94d1c4>
    cdc0:	90000000 	andls	r0, r0, r0
    cdc4:	1f000047 	svcne	0x00000047
    cdc8:	000021db 	ldrdeq	r2, [r0], -fp
    cdcc:	056b4801 	strbeq	r4, [fp, #-2049]!	; 0x801
    cdd0:	47ae0000 	strmi	r0, [lr, r0]!
    cdd4:	61170000 	tstvs	r7, r0
    cdd8:	01000022 	tsteq	r0, r2, lsr #32
    cddc:	0000454a 	andeq	r4, r0, sl, asr #10
    cde0:	07562000 	ldrbeq	r2, [r6, -r0]
    cde4:	69e00000 	stmibvs	r0!, {}^
    cde8:	04483000 	strbeq	r3, [r8]
    cdec:	54010000 	strpl	r0, [r1]
    cdf0:	00076e1b 	andeq	r6, r7, fp, lsl lr
    cdf4:	07631b00 	strbeq	r1, [r3, -r0, lsl #22]!
    cdf8:	70210000 	eorvc	r0, r1, r0
    cdfc:	22000004 	andcs	r0, r0, #4
    ce00:	00000779 	andeq	r0, r0, r9, ror r7
    ce04:	00078422 	andeq	r8, r7, r2, lsr #8
    ce08:	07a32200 	streq	r2, [r3, r0, lsl #4]!
    ce0c:	8d220000 	stchi	0, cr0, [r2]
    ce10:	22000007 	andcs	r0, r0, #7
    ce14:	00000798 	muleq	r0, r8, r7
    ce18:	00073220 	andeq	r3, r7, r0, lsr #4
    ce1c:	006a1400 	rsbeq	r1, sl, r0, lsl #8
    ce20:	00049830 	andeq	r9, r4, r0, lsr r8
    ce24:	1b3f0100 	blne	fcd22c <MEM_SIZE+0x7cd22c>
    ce28:	0000074a 	andeq	r0, r0, sl, asr #14
    ce2c:	00073f1b 	andeq	r3, r7, fp, lsl pc
    ce30:	00000000 	andeq	r0, r0, r0
    ce34:	07c82300 	strbeq	r2, [r8, r0, lsl #6]
    ce38:	6a4c0000 	bvs	130ce40 <MEM_SIZE+0xb0ce40>
    ce3c:	6a783000 	bvs	1e18e44 <MEM_SIZE+0x1618e44>
    ce40:	5d013000 	stcpl	0, cr3, [r1]
    ce44:	000008fb 	strdeq	r0, [r0], -fp
    ce48:	0007d624 	andeq	sp, r7, r4, lsr #12
    ce4c:	22500100 	subscs	r0, r0, #0
    ce50:	000007e1 	andeq	r0, r0, r1, ror #15
    ce54:	0007af1a 	andeq	sl, r7, sl, lsl pc
    ce58:	006a5800 	rsbeq	r5, sl, r0, lsl #16
    ce5c:	006a6c30 	rsbeq	r6, sl, r0, lsr ip
    ce60:	1b650130 	blne	194d328 <MEM_SIZE+0x114d328>
    ce64:	000007bc 	undefined instruction 0x000007bc
    ce68:	01250000 	teqeq	r5, r0
    ce6c:	00002251 	andeq	r2, r0, r1, asr r2
    ce70:	01010201 	tsteq	r1, r1, lsl #4
    ce74:	30006a78 	andcc	r6, r0, r8, ror sl
    ce78:	30006af8 	strdcc	r6, [r0], -r8
    ce7c:	000047ed 	andeq	r4, r0, sp, ror #15
    ce80:	21fb011c 	mvnscs	r0, ip, lsl r1
    ce84:	80010000 	andhi	r0, r1, r0
    ce88:	006af801 	rsbeq	pc, sl, r1, lsl #16
    ce8c:	006cf430 	rsbeq	pc, ip, r0, lsr r4
    ce90:	00481830 	subeq	r1, r8, r0, lsr r8
    ce94:	000a9300 	andeq	r9, sl, r0, lsl #6
    ce98:	21db2600 	bicscs	r2, fp, r0, lsl #12
    ce9c:	83010000 	movwhi	r0, #4096	; 0x1000
    cea0:	0000056b 	andeq	r0, r0, fp, ror #10
    cea4:	2c1f5801 	ldccs	8, cr5, [pc], {1}
    cea8:	01000022 	tsteq	r0, r2, lsr #32
    ceac:	00071384 	andeq	r1, r7, r4, lsl #7
    ceb0:	00483700 	subeq	r3, r8, r0, lsl #14
    ceb4:	0e7a1f00 	cdpeq	15, 7, cr1, cr10, cr0, {0}
    ceb8:	85010000 	strhi	r0, [r1]
    cebc:	0000056b 	andeq	r0, r0, fp, ror #10
    cec0:	00004855 	andeq	r4, r0, r5, asr r8
    cec4:	00221126 	eoreq	r1, r2, r6, lsr #2
    cec8:	6b860100 	blvs	fe18d2d0 <rEINTPEND+0xa818d228>
    cecc:	01000005 	tsteq	r0, r5
    ced0:	22611755 	rsbcs	r1, r1, #22282240	; 0x1540000
    ced4:	88010000 	stmdahi	r1, {}
    ced8:	00000045 	andeq	r0, r0, r5, asr #32
    cedc:	00011817 	andeq	r1, r1, r7, lsl r8
    cee0:	908a0100 	addls	r0, sl, r0, lsl #2
    cee4:	27000000 	strcs	r0, [r0, -r0]
    cee8:	000007c8 	andeq	r0, r0, r8, asr #15
    ceec:	30006b84 	andcc	r6, r0, r4, lsl #23
    cef0:	30006ba8 	andcc	r6, r0, r8, lsr #23
    cef4:	09b5b901 	ldmibeq	r5!, {r0, r8, fp, ip, sp, pc}
    cef8:	d91b0000 	ldmdble	fp, {}
    cefc:	28000008 	stmdacs	r0, {r3}
    cf00:	30006b84 	andcc	r6, r0, r4, lsl #23
    cf04:	30006ba8 	andcc	r6, r0, r8, lsr #23
    cf08:	0007e122 	andeq	lr, r7, r2, lsr #2
    cf0c:	07af1a00 	streq	r1, [pc, r0, lsl #20]!
    cf10:	6b900000 	blvs	fe40cf18 <rEINTPEND+0xa840ce70>
    cf14:	6ba43000 	blvs	fe918f1c <rEINTPEND+0xa8918e74>
    cf18:	65013000 	strvs	r3, [r1]
    cf1c:	0007bc1b 	andeq	fp, r7, fp, lsl ip
    cf20:	00000000 	andeq	r0, r0, r0
    cf24:	0007af29 	andeq	sl, r7, r9, lsr #30
    cf28:	006ba800 	rsbeq	sl, fp, r0, lsl #16
    cf2c:	0004b030 	andeq	fp, r4, r0, lsr r0
    cf30:	cebb0100 	frdgte	f0, f3, f0
    cf34:	1b000009 	blne	cf60 <DISABLE_IRQ+0xcee0>
    cf38:	000007bc 	undefined instruction 0x000007bc
    cf3c:	07c82900 	strbeq	r2, [r8, r0, lsl #18]
    cf40:	6c180000 	ldcvs	0, cr0, [r8], {0}
    cf44:	04c83000 	strbeq	r3, [r8]
    cf48:	ca010000 	bgt	4cf50 <DISABLE_IRQ+0x4ced0>
    cf4c:	00000a07 	andeq	r0, r0, r7, lsl #20
    cf50:	0008d91b 	andeq	sp, r8, fp, lsl r9
    cf54:	04e82100 	strbteq	r2, [r8], #256	; 0x100
    cf58:	e1220000 	teq	r2, r0
    cf5c:	1a000007 	bne	cf80 <DISABLE_IRQ+0xcf00>
    cf60:	000007af 	andeq	r0, r0, pc, lsr #15
    cf64:	30006c2c 	andcc	r6, r0, ip, lsr #24
    cf68:	30006c40 	andcc	r6, r0, r0, asr #24
    cf6c:	bc1b6501 	cfldr32lt	mvfx6, [fp], {1}
    cf70:	00000007 	andeq	r0, r0, r7
    cf74:	c8290000 	stmdagt	r9!, {}
    cf78:	48000007 	stmdami	r0, {r0, r1, r2}
    cf7c:	0830006c 	ldmdaeq	r0!, {r2, r3, r5, r6}
    cf80:	01000005 	tsteq	r0, r5
    cf84:	000a40a3 	andeq	r4, sl, r3, lsr #1
    cf88:	08d91b00 	ldmeq	r9, {r8, r9, fp, ip}^
    cf8c:	28210000 	stmdacs	r1!, {}
    cf90:	22000005 	andcs	r0, r0, #5
    cf94:	000007e1 	andeq	r0, r0, r1, ror #15
    cf98:	0007af1a 	andeq	sl, r7, sl, lsl pc
    cf9c:	006c5c00 	rsbeq	r5, ip, r0, lsl #24
    cfa0:	006c7030 	rsbeq	r7, ip, r0, lsr r0
    cfa4:	1b650130 	blne	194d46c <MEM_SIZE+0x114d46c>
    cfa8:	000007bc 	undefined instruction 0x000007bc
    cfac:	27000000 	strcs	r0, [r0, -r0]
    cfb0:	000007c8 	andeq	r0, r0, r8, asr #15
    cfb4:	30006c84 	andcc	r6, r0, r4, lsl #25
    cfb8:	30006ca8 	andcc	r6, r0, r8, lsr #25
    cfbc:	0a7da901 	beq	1f773c8 <MEM_SIZE+0x17773c8>
    cfc0:	d91b0000 	ldmdble	fp, {}
    cfc4:	28000008 	stmdacs	r0, {r3}
    cfc8:	30006c84 	andcc	r6, r0, r4, lsl #25
    cfcc:	30006ca8 	andcc	r6, r0, r8, lsr #25
    cfd0:	0007e122 	andeq	lr, r7, r2, lsr #2
    cfd4:	07af1a00 	streq	r1, [pc, r0, lsl #20]!
    cfd8:	6c900000 	ldcvs	0, cr0, [r0], {0}
    cfdc:	6ca43000 	stcvs	0, cr3, [r4]
    cfe0:	65013000 	strvs	r3, [r1]
    cfe4:	0007bc1b 	andeq	fp, r7, fp, lsl ip
    cfe8:	00000000 	andeq	r0, r0, r0
    cfec:	0007af20 	andeq	sl, r7, r0, lsr #30
    cff0:	006ca800 	rsbeq	sl, ip, r0, lsl #16
    cff4:	00054830 	andeq	r4, r5, r0, lsr r8
    cff8:	1bab0100 	blne	feacd400 <rEINTPEND+0xa8acd358>
    cffc:	000007bc 	undefined instruction 0x000007bc
    d000:	e92a0000 	stmdb	sl!, {}
    d004:	01000021 	tsteq	r0, r1, lsr #32
    d008:	6cf401ee 	ldfvse	f0, [r4], #952	; 0x3b8
    d00c:	6d243000 	stcvs	0, cr3, [r4]
    d010:	487e3000 	ldmdami	lr!, {ip, sp}^
    d014:	0ac60000 	beq	ff18d01c <rEINTPEND+0xa918cf74>
    d018:	3d1e0000 	ldccc	0, cr0, [lr]
    d01c:	01000022 	tsteq	r0, r2, lsr #32
    d020:	0006e3ee 	andeq	lr, r6, lr, ror #7
    d024:	00489d00 	subeq	r9, r8, r0, lsl #26
    d028:	65721600 	ldrbvs	r1, [r2, #-1536]!	; 0x600
    d02c:	f0010074 	undefined instruction 0xf0010074
    d030:	00000045 	andeq	r0, r0, r5, asr #32
    d034:	130f2b00 	movwne	r2, #64256	; 0xfb00
    d038:	4c0b0000 	stcmi	0, cr0, [fp], {0}
    d03c:	0000003a 	andeq	r0, r0, sl, lsr r0
    d040:	1d2b0101 	stfnes	f0, [fp, #-4]!
    d044:	0b000013 	bleq	d098 <DISABLE_IRQ+0xd018>
    d048:	00069b50 	andeq	r9, r6, r0, asr fp
    d04c:	2b010100 	blcs	4d454 <DISABLE_IRQ+0x4d3d4>
    d050:	00000d85 	andeq	r0, r0, r5, lsl #27
    d054:	003a520b 	eorseq	r5, sl, fp, lsl #4
    d058:	01010000 	tsteq	r1, r0
    d05c:	00146d2b 	andseq	r6, r4, fp, lsr #26
    d060:	9b530b00 	blls	14cfc68 <MEM_SIZE+0xccfc68>
    d064:	01000000 	tsteq	r0, r0
    d068:	02a60d01 	adceq	r0, r6, #64	; 0x40
    d06c:	0b0a0000 	bleq	28d074 <DISABLE_IRQ+0x28cff4>
    d070:	fb0e0000 	blx	38d07a <DISABLE_IRQ+0x38cffa>
    d074:	07000004 	streq	r0, [r0, -r4]
    d078:	05a72b00 	streq	r2, [r7, #2816]!	; 0xb00
    d07c:	5a0b0000 	bpl	2cd084 <DISABLE_IRQ+0x2cd004>
    d080:	00000afa 	strdeq	r0, [r0], -sl
    d084:	e02b0101 	eor	r0, fp, r1, lsl #2
    d088:	0b000014 	bleq	d0e0 <DISABLE_IRQ+0xd060>
    d08c:	0006377e 	andeq	r3, r6, lr, ror r7
    d090:	0d010100 	stfeqs	f0, [r1]
    d094:	00000085 	andeq	r0, r0, r5, lsl #1
    d098:	00000b34 	andeq	r0, r0, r4, lsr fp
    d09c:	0004fb0e 	andeq	pc, r4, lr, lsl #22
    d0a0:	2b00ff00 	blcs	4cca8 <DISABLE_IRQ+0x4cc28>
    d0a4:	0000147c 	andeq	r1, r0, ip, ror r4
    d0a8:	0b247f0b 	bleq	92ccdc <MEM_SIZE+0x12ccdc>
    d0ac:	01010000 	tsteq	r1, r0
    d0b0:	0014ee2b 	andseq	lr, r4, fp, lsr #28
    d0b4:	08800b00 	stmeq	r0, {r8, r9, fp}
    d0b8:	01000007 	tsteq	r0, r7
    d0bc:	0c800001 	stceq	0, cr0, [r0], {1}
    d0c0:	00020000 	andeq	r0, r2, r0
    d0c4:	00002795 	muleq	r0, r5, r7
    d0c8:	004d0104 	subeq	r0, sp, r4, lsl #2
    d0cc:	a4010000 	strge	r0, [r1]
    d0d0:	63000022 	movwvs	r0, #34	; 0x22
    d0d4:	24000000 	strcs	r0, [r0]
    d0d8:	8030006d 	eorshi	r0, r0, sp, rrx
    d0dc:	b4300072 	ldrtlt	r0, [r0], #-114	; 0x72
    d0e0:	02000028 	andeq	r0, r0, #40	; 0x28
    d0e4:	00000564 	andeq	r0, r0, r4, ror #10
    d0e8:	01032103 	tsteq	r3, r3, lsl #2
    d0ec:	0000a006 	andeq	sl, r0, r6
    d0f0:	08010300 	stmdaeq	r1, {r8, r9}
    d0f4:	0000009e 	muleq	r0, lr, r0
    d0f8:	0004f704 	andeq	pc, r4, r4, lsl #14
    d0fc:	33240300 	teqcc	r4, #0
    d100:	04000000 	streq	r0, [r0]
    d104:	00000afb 	strdeq	r0, [r0], -fp
    d108:	00502603 	subseq	r2, r0, r3, lsl #12
    d10c:	02030000 	andeq	r0, r3, #0
    d110:	00008b07 	andeq	r8, r0, r7, lsl #22
    d114:	05020300 	streq	r0, [r2, #-768]	; 0x300
    d118:	00000059 	andeq	r0, r0, r9, asr r0
    d11c:	00033804 	andeq	r3, r3, r4, lsl #16
    d120:	69280300 	stmdbvs	r8!, {r8, r9}
    d124:	03000000 	movweq	r0, #0
    d128:	00370704 	eorseq	r0, r7, r4, lsl #14
    d12c:	04050000 	streq	r0, [r5]
    d130:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    d134:	05080300 	streq	r0, [r8, #-768]	; 0x300
    d138:	00000000 	andeq	r0, r0, r0
    d13c:	2d070803 	stccs	8, cr0, [r7, #-12]
    d140:	04000000 	streq	r0, [r0]
    d144:	0000039f 	muleq	r0, pc, r3
    d148:	00692d03 	rsbeq	r2, r9, r3, lsl #26
    d14c:	27040000 	strcs	r0, [r4, -r0]
    d150:	0400000a 	streq	r0, [r0], #-10
    d154:	00005e2a 	andeq	r5, r0, sl, lsr #28
    d158:	08290400 	stmdaeq	r9!, {sl}
    d15c:	2c040000 	stccs	0, cr0, [r4], {0}
    d160:	0000005e 	andeq	r0, r0, lr, asr r0
    d164:	43050406 	movwmi	r0, #21510	; 0x5406
    d168:	0000024b 	andeq	r0, r0, fp, asr #4
    d16c:	000bb507 	andeq	fp, fp, r7, lsl #10
    d170:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    d174:	0100000b 	tsteq	r0, fp
    d178:	0003aa07 	andeq	sl, r3, r7, lsl #20
    d17c:	21070200 	tstcs	r7, r0, lsl #4
    d180:	03000009 	movweq	r0, #9
    d184:	00063507 	andeq	r3, r6, r7, lsl #10
    d188:	35070400 	strcc	r0, [r7, #-1024]	; 0x400
    d18c:	0500000a 	streq	r0, [r0, #-10]
    d190:	000ad407 	andeq	sp, sl, r7, lsl #8
    d194:	ac070600 	stcge	6, cr0, [r7], {0}
    d198:	07000002 	streq	r0, [r0, -r2]
    d19c:	0006e307 	andeq	lr, r6, r7, lsl #6
    d1a0:	ee070800 	cdp	8, 0, cr0, cr7, cr0, {0}
    d1a4:	09000001 	stmdbeq	r0, {r0}
    d1a8:	0008cd07 	andeq	ip, r8, r7, lsl #26
    d1ac:	a1070a00 	tstge	r7, r0, lsl #20
    d1b0:	0b00000b 	bleq	d1e4 <DISABLE_IRQ+0xd164>
    d1b4:	00048007 	andeq	r8, r4, r7
    d1b8:	bc070c00 	stclt	12, cr0, [r7], {0}
    d1bc:	0d000008 	stceq	0, cr0, [r0, #-32]	; 0xffffffe0
    d1c0:	00070507 	andeq	r0, r7, r7, lsl #10
    d1c4:	d0070e00 	andle	r0, r7, r0, lsl #28
    d1c8:	0f000006 	svceq	0x00000006
    d1cc:	00034007 	andeq	r4, r3, r7
    d1d0:	6a071000 	bvs	1d11d8 <DISABLE_IRQ+0x1d1158>
    d1d4:	11000009 	tstne	r0, r9
    d1d8:	000b3907 	andeq	r3, fp, r7, lsl #18
    d1dc:	0e071200 	cdpeq	2, 0, cr1, cr7, cr0, {0}
    d1e0:	13000006 	movwne	r0, #6
    d1e4:	0002be07 	andeq	fp, r2, r7, lsl #28
    d1e8:	90071400 	andls	r1, r7, r0, lsl #8
    d1ec:	15000006 	strne	r0, [r0, #-6]
    d1f0:	0008e507 	andeq	lr, r8, r7, lsl #10
    d1f4:	d0071600 	andle	r1, r7, r0, lsl #12
    d1f8:	17000002 	strne	r0, [r0, -r2]
    d1fc:	00090a07 	andeq	r0, r9, r7, lsl #20
    d200:	15071800 	strne	r1, [r7, #-2048]	; 0x800
    d204:	19000002 	stmdbne	r0, {r1}
    d208:	00077607 	andeq	r7, r7, r7, lsl #12
    d20c:	f0071a00 	undefined instruction 0xf0071a00
    d210:	1b000002 	blne	d220 <DISABLE_IRQ+0xd1a0>
    d214:	000bc107 	andeq	ip, fp, r7, lsl #2
    d218:	05071c00 	streq	r1, [r7, #-3072]	; 0xc00
    d21c:	1d000004 	stcne	0, cr0, [r0, #-16]
    d220:	00081007 	andeq	r1, r8, r7
    d224:	32071e00 	andcc	r1, r7, #0
    d228:	1f000009 	svcne	0x00000009
    d22c:	00026707 	andeq	r6, r2, r7, lsl #14
    d230:	b1072000 	tstlt	r7, r0
    d234:	21000005 	tstcs	r0, r5
    d238:	00064407 	andeq	r4, r6, r7, lsl #8
    d23c:	ff072200 	undefined instruction 0xff072200
    d240:	23000007 	movwcs	r0, #7
    d244:	0003ba07 	andeq	fp, r3, r7, lsl #20
    d248:	99072400 	stmdbls	r7, {sl, sp}
    d24c:	25000008 	strcs	r0, [r0, #-8]
    d250:	000b4b07 	andeq	r4, fp, r7, lsl #22
    d254:	83072600 	movwhi	r2, #30208	; 0x7600
    d258:	27000008 	strcs	r0, [r0, -r8]
    d25c:	00023e07 	andeq	r3, r2, r7, lsl #28
    d260:	b7072800 	strlt	r2, [r7, -r0, lsl #16]
    d264:	29000009 	stmdbcs	r0, {r0, r3}
    d268:	000ae507 	andeq	lr, sl, r7, lsl #10
    d26c:	87072a00 	strhi	r2, [r7, -r0, lsl #20]
    d270:	2b00000a 	blcs	d2a0 <DISABLE_IRQ+0xd220>
    d274:	00094807 	andeq	r4, r9, r7, lsl #16
    d278:	f5072c00 	undefined instruction 0xf5072c00
    d27c:	2d000009 	stccs	0, cr0, [r0, #-36]	; 0xffffffdc
    d280:	0009c707 	andeq	ip, r9, r7, lsl #14
    d284:	cf072e00 	svcgt	0x00072e00
    d288:	2f000003 	svccs	0x00000003
    d28c:	0006a707 	andeq	sl, r6, r7, lsl #14
    d290:	13073000 	movwne	r3, #28672	; 0x7000
    d294:	31000004 	tstcc	r0, r4
    d298:	00098907 	andeq	r8, r9, r7, lsl #18
    d29c:	52073200 	andpl	r3, r7, #0
    d2a0:	33000003 	movwcc	r0, #3
    d2a4:	0005fd07 	andeq	pc, r5, r7, lsl #26
    d2a8:	d5073400 	strle	r3, [r7, #-1024]	; 0x400
    d2ac:	3500000b 	strcc	r0, [r0, #-11]
    d2b0:	0004e107 	andeq	lr, r4, r7, lsl #2
    d2b4:	a8073600 	stmdage	r7, {r9, sl, ip, sp}
    d2b8:	37000007 	strcc	r0, [r0, -r7]
    d2bc:	00079207 	andeq	r9, r7, r7, lsl #4
    d2c0:	16073800 	strne	r3, [r7], -r0, lsl #16
    d2c4:	39000003 	stmdbcc	r0, {r0, r1}
    d2c8:	0006f307 	andeq	pc, r6, r7, lsl #6
    d2cc:	e2073a00 	and	r3, r7, #0
    d2d0:	3b000003 	blcc	d2e4 <DISABLE_IRQ+0xd264>
    d2d4:	0006bc07 	andeq	fp, r6, r7, lsl #24
    d2d8:	0f073c00 	svceq	0x00073c00
    d2dc:	3d000005 	stccc	0, cr0, [r0, #-20]	; 0xffffffec
    d2e0:	00056d07 	andeq	r6, r5, r7, lsl #26
    d2e4:	cb073e00 	blgt	1dcaec <DISABLE_IRQ+0x1dca6c>
    d2e8:	3f000004 	svccc	0x00000004
    d2ec:	00036e07 	andeq	r6, r3, r7, lsl #28
    d2f0:	0700c000 	streq	ip, [r0, -r0]
    d2f4:	0000058b 	andeq	r0, r0, fp, lsl #11
    d2f8:	370700c1 	strcc	r0, [r7, -r1, asr #1]
    d2fc:	c2000008 	andgt	r0, r0, #8
    d300:	06740700 	ldrbteq	r0, [r4], -r0, lsl #14
    d304:	00c30000 	sbceq	r0, r3, r0
    d308:	05040600 	streq	r0, [r4, #-1536]	; 0x600
    d30c:	00029cb5 	undefined instruction 0x00029cb5
    d310:	09e40700 	stmibeq	r4!, {r8, r9, sl}^
    d314:	07110000 	ldreq	r0, [r1, -r0]
    d318:	00000457 	andeq	r0, r0, r7, asr r4
    d31c:	01db0712 	bicseq	r0, fp, r2, lsl r7
    d320:	07130000 	ldreq	r0, [r3, -r0]
    d324:	000007c3 	andeq	r0, r0, r3, asr #15
    d328:	07330714 	undefined instruction 0x07330714
    d32c:	07150000 	ldreq	r0, [r5, -r0]
    d330:	00000a44 	andeq	r0, r0, r4, asr #20
    d334:	0b8e0716 	bleq	fe38ef94 <rEINTPEND+0xa838eeec>
    d338:	07170000 	ldreq	r0, [r7, -r0]
    d33c:	000005c9 	andeq	r0, r0, r9, asr #11
    d340:	08a90718 	stmiaeq	r9!, {r3, r4, r8, r9, sl}
    d344:	07190000 	ldreq	r0, [r9, -r0]
    d348:	00000850 	andeq	r0, r0, r0, asr r8
    d34c:	0717071a 	undefined instruction 0x0717071a
    d350:	071b0000 	ldreq	r0, [fp, -r0]
    d354:	00000b1b 	andeq	r0, r0, fp, lsl fp
    d358:	0908001c 	stmdbeq	r8, {r2, r3, r4}
    d35c:	0800000c 	stmdaeq	r0, {r2, r3}
    d360:	02c52302 	sbceq	r2, r5, #134217728	; 0x8000000
    d364:	11090000 	tstne	r9, r0
    d368:	02000003 	andeq	r0, r0, #3
    d36c:	0002c524 	andeq	ip, r2, r4, lsr #10
    d370:	00230200 	eoreq	r0, r3, r0, lsl #4
    d374:	00028109 	andeq	r8, r2, r9, lsl #2
    d378:	c5250200 	strgt	r0, [r5, #-512]!	; 0x200
    d37c:	02000002 	andeq	r0, r0, #2
    d380:	0a000423 	beq	e414 <DISABLE_IRQ+0xe394>
    d384:	00029c04 	andeq	r9, r2, r4, lsl #24
    d388:	0c090400 	cfstrseq	mvf0, [r9], {0}
    d38c:	26020000 	strcs	r0, [r2], -r0
    d390:	0000029c 	muleq	r0, ip, r2
    d394:	00065c08 	andeq	r5, r6, r8, lsl #24
    d398:	2f061000 	svccs	0x00061000
    d39c:	0000031b 	andeq	r0, r0, fp, lsl r3
    d3a0:	000ac909 	andeq	ip, sl, r9, lsl #18
    d3a4:	cb310600 	blgt	c4ebac <MEM_SIZE+0x44ebac>
    d3a8:	02000002 	andeq	r0, r0, #2
    d3ac:	e0090023 	and	r0, r9, r3, lsr #32
    d3b0:	06000008 	streq	r0, [r0], -r8
    d3b4:	00031b32 	andeq	r1, r3, r2, lsr fp
    d3b8:	08230200 	stmdaeq	r3!, {r9}
    d3bc:	00090009 	andeq	r0, r9, r9
    d3c0:	3a330600 	bcc	ccebc8 <MEM_SIZE+0x4cebc8>
    d3c4:	02000000 	andeq	r0, r0, #0
    d3c8:	27090c23 	strcs	r0, [r9, -r3, lsr #24]
    d3cc:	06000004 	streq	r0, [r0], -r4
    d3d0:	00003a34 	andeq	r3, r0, r4, lsr sl
    d3d4:	0d230200 	sfmeq	f0, 4, [r3]	; (stceq 2, cr0, [r3])
    d3d8:	3a040a00 	bcc	10fbe0 <DISABLE_IRQ+0x10fb60>
    d3dc:	04000000 	streq	r0, [r0]
    d3e0:	0000065c 	andeq	r0, r0, ip, asr r6
    d3e4:	02d63606 	sbcseq	r3, r6, #6291456	; 0x600000
    d3e8:	9f080000 	svcls	0x00080000
    d3ec:	6c000009 	stcvs	0, cr0, [r0], {9}
    d3f0:	04c13a06 	strbeq	r3, [r1], #2566	; 0xa06
    d3f4:	81090000 	tsthi	r9, r0
    d3f8:	06000014 	undefined instruction 0x06000014
    d3fc:	0004c13b 	andeq	ip, r4, fp, lsr r1
    d400:	00230200 	eoreq	r0, r3, r0, lsl #4
    d404:	00044d09 	andeq	r4, r4, r9, lsl #26
    d408:	cb410600 	blgt	104ec10 <MEM_SIZE+0x84ec10>
    d40c:	02000002 	andeq	r0, r0, #2
    d410:	52090423 	andpl	r0, r9, #587202560	; 0x23000000
    d414:	06000005 	streq	r0, [r0], -r5
    d418:	0004c745 	andeq	ip, r4, r5, asr #14
    d41c:	0c230200 	sfmeq	f0, 4, [r3]	; (stceq 2, cr0, [r3])
    d420:	001aef09 	andseq	lr, sl, r9, lsl #30
    d424:	5e4b0600 	cdppl	6, 4, cr0, cr11, cr0, {0}
    d428:	02000000 	andeq	r0, r0, #0
    d42c:	78091023 	stmdavc	r9, {r0, r1, r5, ip}
    d430:	06000008 	streq	r0, [r0], -r8
    d434:	00005e4c 	andeq	r5, r0, ip, asr #28
    d438:	14230200 	strtne	r0, [r3], #-512	; 0x200
    d43c:	001d3509 	andseq	r3, sp, r9, lsl #10
    d440:	3a4d0600 	bcc	134ec48 <MEM_SIZE+0xb4ec48>
    d444:	02000000 	andeq	r0, r0, #0
    d448:	5a091823 	bpl	2534dc <DISABLE_IRQ+0x25345c>
    d44c:	0600001e 	undefined instruction 0x0600001e
    d450:	00003a51 	andeq	r3, r0, r1, asr sl
    d454:	19230200 	stmdbne	r3!, {r9}
    d458:	00036409 	andeq	r6, r3, r9, lsl #8
    d45c:	3a530600 	bcc	14cec64 <MEM_SIZE+0xccec64>
    d460:	02000000 	andeq	r0, r0, #0
    d464:	3f091a23 	svccc	0x00091a23
    d468:	06000004 	streq	r0, [r0], -r4
    d46c:	00003a56 	andeq	r3, r0, r6, asr sl
    d470:	1b230200 	blne	8cdc78 <MEM_SIZE+0xcdc78>
    d474:	000bad09 	andeq	sl, fp, r9, lsl #26
    d478:	3b5a0600 	blcc	168ec80 <MEM_SIZE+0xe8ec80>
    d47c:	02000005 	andeq	r0, r0, #5
    d480:	f8091c23 	undefined instruction 0xf8091c23
    d484:	0600000b 	streq	r0, [r0], -fp
    d488:	0002cb5f 	andeq	ip, r2, pc, asr fp
    d48c:	20230200 	eorcs	r0, r3, r0, lsl #4
    d490:	000b0309 	andeq	r0, fp, r9, lsl #6
    d494:	5e630600 	cdppl	6, 6, cr0, cr3, cr0, {0}
    d498:	02000000 	andeq	r0, r0, #0
    d49c:	25092823 	strcs	r2, [r9, #-2083]	; 0x823
    d4a0:	06000006 	streq	r0, [r0], -r6
    d4a4:	00054165 	andeq	r4, r5, r5, ror #2
    d4a8:	2c230200 	sfmcs	f0, 4, [r3]	; (stccs 2, cr0, [r3])
    d4ac:	00086e09 	andeq	r6, r8, r9, lsl #28
    d4b0:	cb660600 	blgt	198ecb8 <MEM_SIZE+0x118ecb8>
    d4b4:	02000002 	andeq	r0, r0, #2
    d4b8:	0e093023 	cdpeq	0, 0, cr3, cr9, cr3, {1}
    d4bc:	0600000c 	streq	r0, [r0], -ip
    d4c0:	00009068 	andeq	r9, r0, r8, rrx
    d4c4:	38230200 	stmdacc	r3!, {r9}
    d4c8:	0007f309 	andeq	pc, r7, r9, lsl #6
    d4cc:	90690600 	rsbls	r0, r9, r0, lsl #12
    d4d0:	02000000 	andeq	r0, r0, #0
    d4d4:	a7093c23 	strge	r3, [r9, -r3, lsr #24]
    d4d8:	06000005 	streq	r0, [r0], -r5
    d4dc:	0005476b 	andeq	r4, r5, fp, ror #14
    d4e0:	40230200 	eormi	r0, r3, r0, lsl #4
    d4e4:	67736d0b 	ldrbvs	r6, [r3, -fp, lsl #26]!
    d4e8:	c16d0600 	cmngt	sp, r0, lsl #12
    d4ec:	02000004 	andeq	r0, r0, #4
    d4f0:	30094423 	andcc	r4, r9, r3, lsr #8
    d4f4:	06000016 	undefined instruction 0x06000016
    d4f8:	00009b70 	andeq	r9, r0, r0, ror fp
    d4fc:	48230200 	stmdami	r3!, {r9}
    d500:	0008db09 	andeq	sp, r8, r9, lsl #22
    d504:	1b730600 	blne	1cced0c <MEM_SIZE+0x14ced0c>
    d508:	02000003 	andeq	r0, r0, #3
    d50c:	ac094c23 	stcge	12, cr4, [r9], {35}	; 0x23
    d510:	06000009 	streq	r0, [r0], -r9
    d514:	00003a75 	andeq	r3, r0, r5, ror sl
    d518:	50230200 	eorpl	r0, r3, r0, lsl #4
    d51c:	0007e609 	andeq	lr, r7, r9, lsl #12
    d520:	3a760600 	bcc	1d8ed28 <MEM_SIZE+0x158ed28>
    d524:	02000000 	andeq	r0, r0, #0
    d528:	3d095123 	stfccs	f5, [r9, #-140]	; 0xffffff74
    d52c:	06000005 	streq	r0, [r0], -r5
    d530:	00054d79 	andeq	r4, r5, r9, ror sp
    d534:	54230200 	strtpl	r0, [r3], #-512	; 0x200
    d538:	000ab509 	andeq	fp, sl, r9, lsl #10
    d53c:	d07c0600 	rsbsle	r0, ip, r0, lsl #12
    d540:	02000005 	andeq	r0, r0, #5
    d544:	2b095823 	blcs	2635d8 <DISABLE_IRQ+0x263558>
    d548:	06000002 	streq	r0, [r0], -r2
    d54c:	00060d80 	andeq	r0, r6, r0, lsl #27
    d550:	5c230200 	sfmpl	f0, 4, [r3]	; (stcpl 2, cr0, [r3])
    d554:	0004ad09 	andeq	sl, r4, r9, lsl #26
    d558:	3a840600 	bcc	fe10ed60 <rEINTPEND+0xa810ecb8>
    d55c:	02000000 	andeq	r0, r0, #0
    d560:	55096023 	strpl	r6, [r9, #-35]	; 0x23
    d564:	06000002 	streq	r0, [r0], -r2
    d568:	00005e85 	andeq	r5, r0, r5, lsl #29
    d56c:	64230200 	strtvs	r0, [r3], #-512	; 0x200
    d570:	00075a09 	andeq	r5, r7, r9, lsl #20
    d574:	c1860600 	orrgt	r0, r6, r0, lsl #12
    d578:	02000004 	andeq	r0, r0, #4
    d57c:	0a006823 	beq	27610 <DISABLE_IRQ+0x27590>
    d580:	00002504 	andeq	r2, r0, r4, lsl #10
    d584:	04c10c00 	strbeq	r0, [r1], #3072	; 0xc00
    d588:	04d70000 	ldrbeq	r0, [r7]
    d58c:	d70d0000 	strle	r0, [sp, -r0]
    d590:	00000004 	andeq	r0, r0, r4
    d594:	07040e00 	streq	r0, [r4, -r0, lsl #28]
    d598:	000b2f08 	andeq	r2, fp, r8, lsl #30
    d59c:	5a061c00 	bpl	1945a4 <DISABLE_IRQ+0x194524>
    d5a0:	0000053b 	andeq	r0, r0, fp, lsr r5
    d5a4:	00053609 	andeq	r3, r5, r9, lsl #12
    d5a8:	21270700 	teqcs	r7, r0, lsl #14
    d5ac:	02000003 	andeq	r0, r0, #3
    d5b0:	67090023 	strvs	r0, [r9, -r3, lsr #32]
    d5b4:	07000008 	streq	r0, [r0, -r8]
    d5b8:	00069d2a 	andeq	r9, r6, sl, lsr #26
    d5bc:	10230200 	eorne	r0, r3, r0, lsl #4
    d5c0:	000bad09 	andeq	sl, fp, r9, lsl #26
    d5c4:	3b2c0700 	blcc	b0f1cc <MEM_SIZE+0x30f1cc>
    d5c8:	02000005 	andeq	r0, r0, #5
    d5cc:	f6091423 	undefined instruction 0xf6091423
    d5d0:	07000005 	streq	r0, [r0, -r5]
    d5d4:	00003a2e 	andeq	r3, r0, lr, lsr #20
    d5d8:	18230200 	stmdane	r3!, {r9}
    d5dc:	00047309 	andeq	r7, r4, r9, lsl #6
    d5e0:	3a2f0700 	bcc	bcf1e8 <MEM_SIZE+0x3cf1e8>
    d5e4:	02000000 	andeq	r0, r0, #0
    d5e8:	8e091923 	cdphi	9, 0, cr1, cr9, cr3, {1}
    d5ec:	07000004 	streq	r0, [r0, -r4]
    d5f0:	00003a30 	andeq	r3, r0, r0, lsr sl
    d5f4:	1a230200 	bne	8cddfc <MEM_SIZE+0xcddfc>
    d5f8:	da040a00 	ble	10fe00 <DISABLE_IRQ+0x10fd80>
    d5fc:	0a000004 	beq	d614 <DISABLE_IRQ+0xd594>
    d600:	00008504 	andeq	r8, r0, r4, lsl #10
    d604:	cb040a00 	blgt	10fe0c <DISABLE_IRQ+0x10fd8c>
    d608:	0a000002 	beq	d618 <DISABLE_IRQ+0xd598>
    d60c:	00032104 	andeq	r2, r3, r4, lsl #2
    d610:	074b0800 	strbeq	r0, [fp, -r0, lsl #16]
    d614:	062c0000 	strteq	r0, [ip], -r0
    d618:	0005d07c 	andeq	sp, r5, ip, ror r0
    d61c:	05360900 	ldreq	r0, [r6, #-2304]!	; 0x900
    d620:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    d624:	00000321 	andeq	r0, r0, r1, lsr #6
    d628:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    d62c:	000007dd 	ldrdeq	r0, [r0], -sp
    d630:	067a3008 	ldrbteq	r3, [sl], -r8
    d634:	23020000 	movwcs	r0, #8192	; 0x2000
    d638:	05e40910 	strbeq	r0, [r4, #2320]!	; 0x910
    d63c:	31080000 	tstcc	r8, r0
    d640:	0000009b 	muleq	r0, fp, r0
    d644:	09142302 	ldmdbeq	r4, {r1, r8, r9, sp}
    d648:	00000b0e 	andeq	r0, r0, lr, lsl #22
    d64c:	009b3208 	addseq	r3, fp, r8, lsl #4
    d650:	23020000 	movwcs	r0, #8192	; 0x2000
    d654:	05f00918 	ldrbeq	r0, [r0, #2328]!	; 0x918
    d658:	34080000 	strcc	r0, [r8]
    d65c:	0000067a 	andeq	r0, r0, sl, ror r6
    d660:	091c2302 	ldmdbeq	ip, {r1, r8, r9, sp}
    d664:	0000014e 	andeq	r0, r0, lr, asr #2
    d668:	067a3508 	ldrbteq	r3, [sl], -r8, lsl #10
    d66c:	23020000 	movwcs	r0, #8192	; 0x2000
    d670:	05270920 	streq	r0, [r7, #-2336]!	; 0x920
    d674:	36080000 	strcc	r0, [r8], -r0
    d678:	0000009b 	muleq	r0, fp, r0
    d67c:	09242302 	stmdbeq	r4!, {r1, r8, r9, sp}
    d680:	0000049b 	muleq	r0, fp, r4
    d684:	009b3708 	addseq	r3, fp, r8, lsl #14
    d688:	23020000 	movwcs	r0, #8192	; 0x2000
    d68c:	040a0028 	streq	r0, [sl], #-40	; 0x28
    d690:	00000553 	andeq	r0, r0, r3, asr r5
    d694:	000aa708 	andeq	sl, sl, r8, lsl #14
    d698:	80061800 	andhi	r1, r6, r0, lsl #16
    d69c:	0000060d 	andeq	r0, r0, sp, lsl #12
    d6a0:	00053609 	andeq	r3, r5, r9, lsl #12
    d6a4:	21220900 	teqcs	r2, r0, lsl #18
    d6a8:	02000003 	andeq	r0, r0, #3
    d6ac:	47090023 	strmi	r0, [r9, -r3, lsr #32]
    d6b0:	09000004 	stmdbeq	r0, {r2}
    d6b4:	00005e23 	andeq	r5, r0, r3, lsr #28
    d6b8:	10230200 	eorne	r0, r3, r0, lsl #4
    d6bc:	001b3f09 	andseq	r3, fp, r9, lsl #30
    d6c0:	8c240900 	stchi	9, cr0, [r4]
    d6c4:	02000006 	andeq	r0, r0, #6
    d6c8:	0a001423 	beq	1275c <DISABLE_IRQ+0x126dc>
    d6cc:	0005d604 	andeq	sp, r5, r4, lsl #12
    d6d0:	099f0400 	ldmibeq	pc, {sl}
    d6d4:	89060000 	stmdbhi	r6, {}
    d6d8:	0000032c 	andeq	r0, r0, ip, lsr #6
    d6dc:	0624040a 	strteq	r0, [r4], -sl, lsl #8
    d6e0:	010f0000 	mrseq	r0, CPSR
    d6e4:	00000630 	andeq	r0, r0, r0, lsr r6
    d6e8:	0004c110 	andeq	ip, r4, r0, lsl r1
    d6ec:	61080000 	tstvs	r8, r0
    d6f0:	0c00000b 	stceq	0, cr0, [r0], {11}
    d6f4:	06672108 	strbteq	r2, [r7], -r8, lsl #2
    d6f8:	11090000 	tstne	r9, r0
    d6fc:	08000003 	stmdaeq	r0, {r0, r1}
    d700:	00066723 	andeq	r6, r6, r3, lsr #14
    d704:	00230200 	eoreq	r0, r3, r0, lsl #4
    d708:	0005dc09 	andeq	sp, r5, r9, lsl #24
    d70c:	6d240800 	stcvs	8, cr0, [r4]
    d710:	02000006 	andeq	r0, r0, #6
    d714:	30090423 	andcc	r0, r9, r3, lsr #8
    d718:	08000016 	stmdaeq	r0, {r1, r2, r4}
    d71c:	00009b25 	andeq	r9, r0, r5, lsr #22
    d720:	08230200 	stmdaeq	r3!, {r9}
    d724:	30040a00 	andcc	r0, r4, r0, lsl #20
    d728:	11000006 	tstne	r0, r6
    d72c:	0b610404 	bleq	184e744 <MEM_SIZE+0x104e744>
    d730:	27080000 	strcs	r0, [r8, -r0]
    d734:	00000630 	andeq	r0, r0, r0, lsr r6
    d738:	066f040a 	strbteq	r0, [pc], -sl, lsl #8
    d73c:	010f0000 	mrseq	r0, CPSR
    d740:	0000068c 	andeq	r0, r0, ip, lsl #13
    d744:	00060d10 	andeq	r0, r6, r0, lsl sp
    d748:	040a0000 	streq	r0, [sl]
    d74c:	00000680 	andeq	r0, r0, r0, lsl #13
    d750:	000aa704 	andeq	sl, sl, r4, lsl #14
    d754:	d6260900 	strtle	r0, [r6], -r0, lsl #18
    d758:	0a000005 	beq	d774 <DISABLE_IRQ+0xd6f4>
    d75c:	00061304 	andeq	r1, r6, r4, lsl #6
    d760:	23580800 	cmpcs	r8, #0
    d764:	0a2c0000 	beq	b0d76c <MEM_SIZE+0x30d76c>
    d768:	00074a1f 	andeq	r4, r7, pc, lsl sl
    d76c:	22d00900 	sbcscs	r0, r0, #0
    d770:	210a0000 	tstcs	sl, r0
    d774:	000002cb 	andeq	r0, r0, fp, asr #5
    d778:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    d77c:	00002350 	andeq	r2, r0, r0, asr r3
    d780:	0547220a 	strbeq	r2, [r7, #-522]	; 0x20a
    d784:	23020000 	movwcs	r0, #8192	; 0x2000
    d788:	08e00908 	stmiaeq	r0!, {r3, r8, fp}^
    d78c:	240a0000 	strcs	r0, [sl]
    d790:	0000031b 	andeq	r0, r0, fp, lsl r3
    d794:	090c2302 	stmdbeq	ip, {r1, r8, r9, sp}
    d798:	000023ae 	andeq	r2, r0, lr, lsr #7
    d79c:	061e250a 	ldreq	r2, [lr], -sl, lsl #10
    d7a0:	23020000 	movwcs	r0, #8192	; 0x2000
    d7a4:	0c130910 	ldceq	9, cr0, [r3], {16}
    d7a8:	270a0000 	strcs	r0, [sl, -r0]
    d7ac:	00000090 	muleq	r0, r0, r0
    d7b0:	09142302 	ldmdbeq	r4, {r1, r8, r9, sp}
    d7b4:	000007f8 	strdeq	r0, [r0], -r8
    d7b8:	0090280a 	addseq	r2, r0, sl, lsl #16
    d7bc:	23020000 	movwcs	r0, #8192	; 0x2000
    d7c0:	23730918 	cmncs	r3, #393216	; 0x60000
    d7c4:	290a0000 	stmdbcs	sl, {}
    d7c8:	00000090 	muleq	r0, r0, r0
    d7cc:	091c2302 	ldmdbeq	ip, {r1, r8, r9, sp}
    d7d0:	0000239d 	muleq	r0, sp, r3
    d7d4:	00902a0a 	addseq	r2, r0, sl, lsl #20
    d7d8:	23020000 	movwcs	r0, #8192	; 0x2000
    d7dc:	22e90920 	rsccs	r0, r9, #524288	; 0x80000
    d7e0:	2b0a0000 	blcs	28d7e8 <DISABLE_IRQ+0x28d768>
    d7e4:	000004c1 	andeq	r0, r0, r1, asr #9
    d7e8:	09242302 	stmdbeq	r4!, {r1, r8, r9, sp}
    d7ec:	00002271 	andeq	r2, r0, r1, ror r2
    d7f0:	003a2c0a 	eorseq	r2, sl, sl, lsl #24
    d7f4:	23020000 	movwcs	r0, #8192	; 0x2000
    d7f8:	04270928 	strteq	r0, [r7], #-2344	; 0x928
    d7fc:	2d0a0000 	stccs	0, cr0, [sl]
    d800:	0000003a 	andeq	r0, r0, sl, lsr r0
    d804:	00292302 	eoreq	r2, r9, r2, lsl #6
    d808:	00235804 	eoreq	r5, r3, r4, lsl #16
    d80c:	a32f0a00 	teqge	pc, #0
    d810:	12000006 	andne	r0, r0, #6
    d814:	00002247 	andeq	r2, r0, r7, asr #4
    d818:	03012f02 	movweq	r2, #7938	; 0x1f02
    d81c:	0000076e 	andeq	r0, r0, lr, ror #14
    d820:	000da313 	andeq	sl, sp, r3, lsl r3
    d824:	472f0200 	strmi	r0, [pc, -r0, lsl #4]!
    d828:	00000005 	andeq	r0, r0, r5
    d82c:	00222012 	eoreq	r2, r2, r2, lsl r0
    d830:	01430200 	cmpeq	r3, r0, lsl #4
    d834:	00079203 	andeq	r9, r7, r3, lsl #4
    d838:	05ac1300 	streq	r1, [ip, #768]!	; 0x300
    d83c:	43020000 	movwmi	r0, #8192	; 0x2000
    d840:	00000547 	andeq	r0, r0, r7, asr #10
    d844:	0016b613 	andseq	fp, r6, r3, lsl r6
    d848:	47430200 	strbmi	r0, [r3, -r0, lsl #4]
    d84c:	00000005 	andeq	r0, r0, r5
    d850:	00152d12 	andseq	r2, r5, r2, lsl sp
    d854:	014e0200 	cmpeq	lr, r0, lsl #4
    d858:	0007ab03 	andeq	sl, r7, r3, lsl #22
    d85c:	16b61300 	ldrtne	r1, [r6], r0, lsl #6
    d860:	4e020000 	cdpmi	0, 0, cr0, cr2, cr0, {0}
    d864:	00000547 	andeq	r0, r0, r7, asr #10
    d868:	237e1200 	cmncs	lr, #0
    d86c:	20010000 	andcs	r0, r1, r0
    d870:	07c20101 	strbeq	r0, [r2, r1, lsl #2]
    d874:	69140000 	ldmdbvs	r4, {}
    d878:	45220100 	strmi	r0, [r2, #-256]!	; 0x100
    d87c:	00000000 	andeq	r0, r0, r0
    d880:	0023de12 	eoreq	sp, r3, r2, lsl lr
    d884:	01480100 	cmpeq	r8, r0, lsl #2
    d888:	0007e601 	andeq	lr, r7, r1, lsl #12
    d88c:	22671300 	rsbcs	r1, r7, #0
    d890:	48010000 	stmdami	r1, {}
    d894:	000007e6 	andeq	r0, r0, r6, ror #15
    d898:	0021db15 	eoreq	sp, r1, r5, lsl fp
    d89c:	474a0100 	strbmi	r0, [sl, -r0, lsl #2]
    d8a0:	00000005 	andeq	r0, r0, r5
    d8a4:	074a040a 	strbeq	r0, [sl, -sl, lsl #8]
    d8a8:	c3120000 	tstgt	r2, #0
    d8ac:	01000023 	tsteq	r0, r3, lsr #32
    d8b0:	4501012d 	strmi	r0, [r1, #-301]	; 0x12d
    d8b4:	13000008 	movwne	r0, #8
    d8b8:	000005ac 	andeq	r0, r0, ip, lsr #11
    d8bc:	05472d01 	strbeq	r2, [r7, #-3329]	; 0xd01
    d8c0:	67130000 	ldrvs	r0, [r3, -r0]
    d8c4:	01000022 	tsteq	r0, r2, lsr #32
    d8c8:	0007e62d 	andeq	lr, r7, sp, lsr #12
    d8cc:	61761400 	cmnvs	r6, r0, lsl #8
    d8d0:	2f01006c 	svccs	0x0001006c
    d8d4:	00000090 	muleq	r0, r0, r0
    d8d8:	01007114 	tsteq	r0, r4, lsl r1
    d8dc:	00054731 	andeq	r4, r5, r1, lsr r7
    d8e0:	15801500 	strne	r1, [r0, #1280]	; 0x500
    d8e4:	31010000 	tstcc	r1, r0
    d8e8:	00000547 	andeq	r0, r0, r7, asr #10
    d8ec:	0015b015 	andseq	fp, r5, r5, lsl r0
    d8f0:	47310100 	ldrmi	r0, [r1, -r0, lsl #2]!
    d8f4:	15000005 	strne	r0, [r0, #-5]
    d8f8:	0000220c 	andeq	r2, r0, ip, lsl #4
    d8fc:	07e63301 	strbeq	r3, [r6, r1, lsl #6]!
    d900:	16000000 	strne	r0, [r0], -r0
    d904:	00238e01 	eoreq	r8, r3, r1, lsl #28
    d908:	02390100 	eorseq	r0, r9, #0
    d90c:	006d2401 	rsbeq	r2, sp, r1, lsl #8
    d910:	006dcc30 	rsbeq	ip, sp, r0, lsr ip
    d914:	0048b030 	subeq	fp, r8, r0, lsr r0
    d918:	00089500 	andeq	r9, r8, r0, lsl #10
    d91c:	07ab1700 	streq	r1, [fp, r0, lsl #14]!
    d920:	6d400000 	stclvs	0, cr0, [r0]
    d924:	6d543000 	ldclvs	0, cr3, [r4]
    d928:	3d013000 	stccc	0, cr3, [r1]
    d92c:	6d401802 	stclvs	8, cr1, [r0, #-8]
    d930:	6d543000 	ldclvs	0, cr3, [r4]
    d934:	b8193000 	ldmdalt	r9, {ip, sp}
    d938:	1a000007 	bne	d95c <DISABLE_IRQ+0xd8dc>
    d93c:	00000755 	andeq	r0, r0, r5, asr r7
    d940:	30006d40 	andcc	r6, r0, r0, asr #26
    d944:	30006d4c 	andcc	r6, r0, ip, asr #26
    d948:	621b2601 	andsvs	r2, fp, #1048576	; 0x100000
    d94c:	00000007 	andeq	r0, r0, r7
    d950:	1c000000 	stcne	0, cr0, [r0], {0}
    d954:	0022fb01 	eoreq	pc, r2, r1, lsl #22
    d958:	022b0100 	eoreq	r0, fp, #0
    d95c:	006dcc01 	rsbeq	ip, sp, r1, lsl #24
    d960:	006e0430 	rsbeq	r0, lr, r0, lsr r4
    d964:	0048db30 	subeq	sp, r8, r0, lsr fp
    d968:	00011600 	andeq	r1, r1, r0, lsl #12
    d96c:	01000023 	tsteq	r0, r3, lsr #32
    d970:	040101b9 	streq	r0, [r1], #-441	; 0x1b9
    d974:	4430006e 	ldrtmi	r0, [r0], #-110	; 0x6e
    d978:	fa30006f 	blx	c0db3c <MEM_SIZE+0x40db3c>
    d97c:	b1000048 	tstlt	r0, r8, asr #32
    d980:	1d000009 	stcne	0, cr0, [r0, #-36]	; 0xffffffdc
    d984:	01006170 	tsteq	r0, r0, ror r1
    d988:	066d01b9 	undefined instruction 0x066d01b9
    d98c:	49190000 	ldmdbmi	r9, {}
    d990:	011e0000 	tsteq	lr, r0
    d994:	01000020 	tsteq	r0, r0, lsr #32
    d998:	004501bb 	strheq	r0, [r5], #-27	; 0xffffffe5
    d99c:	c11f0000 	tstgt	pc, r0
    d9a0:	01000022 	tsteq	r0, r2, lsr #32
    d9a4:	054701bc 	strbeq	r0, [r7, #-444]	; 0x1bc
    d9a8:	492c0000 	stmdbmi	ip!, {}
    d9ac:	7a1f0000 	bvc	7cd9b4 <DISABLE_IRQ+0x7cd934>
    d9b0:	0100000e 	tsteq	r0, lr
    d9b4:	054701bd 	strbeq	r0, [r7, #-445]	; 0x1bd
    d9b8:	494a0000 	stmdbmi	sl, {}^
    d9bc:	11200000 	teqne	r0, r0
    d9c0:	01000022 	tsteq	r0, r2, lsr #32
    d9c4:	054701be 	strbeq	r0, [r7, #-446]	; 0x1be
    d9c8:	58010000 	stmdapl	r1, {}
    d9cc:	0022671f 	eoreq	r6, r2, pc, lsl r7
    d9d0:	01bf0100 	undefined instruction 0x01bf0100
    d9d4:	000007e6 	andeq	r0, r0, r6, ror #15
    d9d8:	0000497e 	andeq	r4, r0, lr, ror r9
    d9dc:	0007c221 	andeq	ip, r7, r1, lsr #4
    d9e0:	006e1c00 	rsbeq	r1, lr, r0, lsl #24
    d9e4:	00056830 	andeq	r6, r5, r0, lsr r8
    d9e8:	01e00100 	mvneq	r0, r0, lsl #2
    d9ec:	00000958 	andeq	r0, r0, r8, asr r9
    d9f0:	0007cf1b 	andeq	ip, r7, fp, lsl pc
    d9f4:	05802200 	streq	r2, [r0, #512]	; 0x200
    d9f8:	da190000 	ble	64da00 <DISABLE_IRQ+0x64d980>
    d9fc:	1a000007 	bne	da20 <DISABLE_IRQ+0xd9a0>
    da00:	00000792 	muleq	r0, r2, r7
    da04:	30006e74 	andcc	r6, r0, r4, ror lr
    da08:	30006e84 	andcc	r6, r0, r4, lsl #29
    da0c:	9f1b5001 	svcls	0x001b5001
    da10:	00000007 	andeq	r0, r0, r7
    da14:	ec230000 	stc	0, cr0, [r3]
    da18:	a8000007 	stmdage	r0, {r0, r1, r2}
    da1c:	9830006e 	ldmdals	r0!, {r1, r2, r3, r5, r6}
    da20:	01000005 	tsteq	r0, r5
    da24:	041b01eb 	ldreq	r0, [fp], #-491	; 0x1eb
    da28:	1b000008 	blne	da50 <DISABLE_IRQ+0xd9d0>
    da2c:	000007f9 	strdeq	r0, [r0], -r9
    da30:	0005c022 	andeq	ip, r5, r2, lsr #32
    da34:	080f1900 	stmdaeq	pc, {r8, fp, ip}
    da38:	1a240000 	bne	90da40 <MEM_SIZE+0x10da40>
    da3c:	b2000008 	andlt	r0, r0, #8
    da40:	19000049 	stmdbne	r0, {r0, r3, r6}
    da44:	00000839 	andeq	r0, r0, r9, lsr r8
    da48:	00082319 	andeq	r2, r8, r9, lsl r3
    da4c:	082e1900 	stmdaeq	lr!, {r8, fp, ip}
    da50:	6e1a0000 	cdpvs	0, 1, cr0, cr10, cr0, {0}
    da54:	dc000007 	stcle	0, cr0, [r0], {7}
    da58:	f430006e 	undefined instruction 0xf430006e
    da5c:	0130006e 	teqeq	r0, lr, rrx
    da60:	07861b43 	streq	r1, [r6, r3, asr #22]
    da64:	7b1b0000 	blvc	6cda6c <DISABLE_IRQ+0x6cd9ec>
    da68:	00000007 	andeq	r0, r0, r7
    da6c:	25000000 	strcs	r0, [r0]
    da70:	00233f01 	eoreq	r3, r3, r1, lsl #30
    da74:	01800100 	orreq	r0, r0, r0, lsl #2
    da78:	00004501 	andeq	r4, r0, r1, lsl #10
    da7c:	006f4400 	rsbeq	r4, pc, r0, lsl #8
    da80:	006fd030 	rsbeq	sp, pc, r0, lsr r0
    da84:	0049f130 	subeq	pc, r9, r0, lsr r1
    da88:	000a1600 	andeq	r1, sl, r0, lsl #12
    da8c:	22672600 	rsbcs	r2, r7, #0
    da90:	80010000 	andhi	r0, r1, r0
    da94:	0007e601 	andeq	lr, r7, r1, lsl #12
    da98:	004a1000 	subeq	r1, sl, r0
    da9c:	07c22300 	strbeq	r2, [r2, r0, lsl #6]
    daa0:	6f940000 	svcvs	0x00940000
    daa4:	05e83000 	strbeq	r3, [r8]!
    daa8:	9d010000 	stcls	0, cr0, [r1]
    daac:	07cf1b01 	strbeq	r1, [pc, r1, lsl #22]
    dab0:	00220000 	eoreq	r0, r2, r0
    dab4:	19000006 	stmdbne	r0, {r1, r2}
    dab8:	000007da 	ldrdeq	r0, [r0], -sl
    dabc:	0007921a 	andeq	r9, r7, sl, lsl r2
    dac0:	006fa400 	rsbeq	sl, pc, r0, lsl #8
    dac4:	006fb430 	rsbeq	fp, pc, r0, lsr r4
    dac8:	1b500130 	blne	140df90 <MEM_SIZE+0xc0df90>
    dacc:	0000079f 	muleq	r0, pc, r7
    dad0:	00000000 	andeq	r0, r0, r0
    dad4:	230b0125 	movwcs	r0, #45349	; 0xb125
    dad8:	42010000 	andmi	r0, r1, #0
    dadc:	00450101 	subeq	r0, r5, r1, lsl #2
    dae0:	6fd00000 	svcvs	0x00d00000
    dae4:	70643000 	rsbvc	r3, r4, r0
    dae8:	4a2e3000 	bmi	b99af0 <MEM_SIZE+0x399af0>
    daec:	0a7f0000 	beq	1fcdaf4 <MEM_SIZE+0x17cdaf4>
    daf0:	67260000 	strvs	r0, [r6, -r0]!
    daf4:	01000022 	tsteq	r0, r2, lsr #32
    daf8:	07e60142 	strbeq	r0, [r6, r2, asr #2]!
    dafc:	4a4d0000 	bmi	134db04 <MEM_SIZE+0xb4db04>
    db00:	c2170000 	andsgt	r0, r7, #0
    db04:	24000007 	strcs	r0, [r0], #-7
    db08:	44300070 	ldrtmi	r0, [r0], #-112	; 0x70
    db0c:	01300070 	teqeq	r0, r0, ror r0
    db10:	cf1b0163 	svcgt	0x001b0163
    db14:	18000007 	stmdane	r0, {r0, r1, r2}
    db18:	30007024 	andcc	r7, r0, r4, lsr #32
    db1c:	30007044 	andcc	r7, r0, r4, asr #32
    db20:	0007da19 	andeq	sp, r7, r9, lsl sl
    db24:	07921a00 	ldreq	r1, [r2, r0, lsl #20]
    db28:	70300000 	eorsvc	r0, r0, r0
    db2c:	70403000 	subvc	r3, r0, r0
    db30:	50013000 	andpl	r3, r1, r0
    db34:	00079f1b 	andeq	r9, r7, fp, lsl pc
    db38:	00000000 	andeq	r0, r0, r0
    db3c:	b0012500 	andlt	r2, r1, r0, lsl #10
    db40:	01000022 	tsteq	r0, r2, lsr #32
    db44:	45010104 	strmi	r0, [r1, #-260]	; 0x104
    db48:	64000000 	strvs	r0, [r0]
    db4c:	e4300070 	ldrt	r0, [r0], #-112	; 0x70
    db50:	6b300070 	blvs	c0dd18 <MEM_SIZE+0x40dd18>
    db54:	ce00004a 	cdpgt	0, 0, cr0, cr0, cr10, {2}
    db58:	2600000a 	strcs	r0, [r0], -sl
    db5c:	00002267 	andeq	r2, r0, r7, ror #4
    db60:	e6010401 	str	r0, [r1], -r1, lsl #8
    db64:	96000007 	strls	r0, [r0], -r7
    db68:	2600004a 	strcs	r0, [r0], -sl, asr #32
    db6c:	000022db 	ldrdeq	r2, [r0], -fp
    db70:	90010401 	andls	r0, r1, r1, lsl #8
    db74:	b4000000 	strlt	r0, [r0]
    db78:	2600004a 	strcs	r0, [r0], -sl, asr #32
    db7c:	0000239d 	muleq	r0, sp, r3
    db80:	90010401 	andls	r0, r1, r1, lsl #8
    db84:	d2000000 	andle	r0, r0, #0
    db88:	0000004a 	andeq	r0, r0, sl, asr #32
    db8c:	22910127 	addscs	r0, r1, #-1073741815	; 0xc0000009
    db90:	bb010000 	bllt	4db98 <DISABLE_IRQ+0x4db18>
    db94:	00004501 	andeq	r4, r0, r1, lsl #10
    db98:	0070e400 	rsbseq	lr, r0, r0, lsl #8
    db9c:	0071d830 	rsbseq	sp, r1, r0, lsr r8
    dba0:	004af030 	subeq	pc, sl, r0, lsr r0
    dba4:	000b6c00 	andeq	r6, fp, r0, lsl #24
    dba8:	22672800 	rsbcs	r2, r7, #0
    dbac:	bb010000 	bllt	4dbb4 <DISABLE_IRQ+0x4db34>
    dbb0:	000007e6 	andeq	r0, r0, r6, ror #15
    dbb4:	00004b0f 	andeq	r4, r0, pc, lsl #22
    dbb8:	00236228 	eoreq	r6, r3, r8, lsr #4
    dbbc:	c1bb0100 	undefined instruction 0xc1bb0100
    dbc0:	2d000004 	stccs	0, cr0, [r0, #-16]
    dbc4:	1500004b 	strne	r0, [r0, #-75]	; 0x4b
    dbc8:	00002001 	andeq	r2, r0, r1
    dbcc:	0045bd01 	subeq	fp, r5, r1, lsl #26
    dbd0:	ec290000 	stc	0, cr0, [r9]
    dbd4:	5c000007 	stcpl	0, cr0, [r0], {7}
    dbd8:	18300071 	ldmdane	r0!, {r0, r4, r5, r6}
    dbdc:	01000006 	tsteq	r0, r6
    dbe0:	08041be8 	stmdaeq	r4, {r3, r5, r6, r7, r8, r9, fp, ip}
    dbe4:	f91b0000 	undefined instruction 0xf91b0000
    dbe8:	22000007 	andcs	r0, r0, #7
    dbec:	00000648 	andeq	r0, r0, r8, asr #12
    dbf0:	00080f19 	andeq	r0, r8, r9, lsl pc
    dbf4:	081a2400 	ldmdaeq	sl, {sl, sp}
    dbf8:	4b4b0000 	blmi	12cdc00 <MEM_SIZE+0xacdc00>
    dbfc:	39190000 	ldmdbcc	r9, {}
    dc00:	19000008 	stmdbne	r0, {r3}
    dc04:	00000823 	andeq	r0, r0, r3, lsr #16
    dc08:	00082e19 	andeq	r2, r8, r9, lsl lr
    dc0c:	076e2900 	strbeq	r2, [lr, -r0, lsl #18]!
    dc10:	71900000 	orrsvc	r0, r0, r0
    dc14:	06783000 	ldrbteq	r3, [r8], -r0
    dc18:	43010000 	movwmi	r0, #4096	; 0x1000
    dc1c:	0007861b 	andeq	r8, r7, fp, lsl r6
    dc20:	077b1b00 	ldrbeq	r1, [fp, -r0, lsl #22]!
    dc24:	00000000 	andeq	r0, r0, r0
    dc28:	01270000 	teqeq	r7, r0
    dc2c:	0000232e 	andeq	r2, r0, lr, lsr #6
    dc30:	45017201 	strmi	r7, [r1, #-513]	; 0x201
    dc34:	d8000000 	stmdale	r0, {}
    dc38:	80300071 	eorshi	r0, r0, r1, ror r0
    dc3c:	7f300072 	svcvc	0x00300072
    dc40:	0800004b 	stmdaeq	r0, {r0, r1, r3, r6}
    dc44:	2800000c 	stmdacs	r0, {r2, r3}
    dc48:	00002267 	andeq	r2, r0, r7, ror #4
    dc4c:	07e67201 	strbeq	r7, [r6, r1, lsl #4]!
    dc50:	4b9e0000 	blmi	fe78dc58 <rEINTPEND+0xa878dbb0>
    dc54:	6a280000 	bvs	a0dc5c <MEM_SIZE+0x20dc5c>
    dc58:	01000004 	tsteq	r0, r4
    dc5c:	00031b72 	andeq	r1, r3, r2, ror fp
    dc60:	004bbc00 	subeq	fp, fp, r0, lsl #24
    dc64:	227d2800 	rsbscs	r2, sp, #0
    dc68:	73010000 	movwvc	r0, #4096	; 0x1000
    dc6c:	0000061e 	andeq	r0, r0, lr, lsl r6
    dc70:	00004bcf 	andeq	r4, r0, pc, asr #23
    dc74:	00236228 	eoreq	r6, r3, r8, lsr #4
    dc78:	c1730100 	cmngt	r3, r0, lsl #2
    dc7c:	ed000004 	stc	0, cr0, [r0, #-16]
    dc80:	2800004b 	stmdacs	r0, {r0, r1, r3, r6}
    dc84:	000022db 	ldrdeq	r2, [r0], -fp
    dc88:	00907401 	addseq	r7, r0, r1, lsl #8
    dc8c:	4c000000 	stcmi	0, cr0, [r0], {0}
    dc90:	9d280000 	stcls	0, cr0, [r8]
    dc94:	01000023 	tsteq	r0, r3, lsr #32
    dc98:	00009074 	andeq	r9, r0, r4, ror r0
    dc9c:	004c1f00 	subeq	r1, ip, r0, lsl #30
    dca0:	23202800 	teqcs	r0, #0
    dca4:	74010000 	strvc	r0, [r1]
    dca8:	0000003a 	andeq	r0, r0, sl, lsr r0
    dcac:	00004c3f 	andeq	r4, r0, pc, lsr ip
    dcb0:	0007551a 	andeq	r5, r7, sl, lsl r5
    dcb4:	00725400 	rsbseq	r5, r2, r0, lsl #8
    dcb8:	00725c30 	rsbseq	r5, r2, r0, lsr ip
    dcbc:	1b980130 	blne	fe60e184 <rEINTPEND+0xa860e0dc>
    dcc0:	00000762 	andeq	r0, r0, r2, ror #14
    dcc4:	502a0000 	eorpl	r0, sl, r0
    dcc8:	0b00000e 	bleq	dd08 <DISABLE_IRQ+0xdc88>
    dccc:	00003a51 	andeq	r3, r0, r1, asr sl
    dcd0:	0c010100 	stfeqs	f0, [r1], {0}
    dcd4:	000002cb 	andeq	r0, r0, fp, asr #5
    dcd8:	00000c25 	andeq	r0, r0, r5, lsr #24
    dcdc:	0004d70d 	andeq	sp, r4, sp, lsl #14
    dce0:	2a000300 	bcs	e8e8 <DISABLE_IRQ+0xe868>
    dce4:	000012ea 	andeq	r1, r0, sl, ror #5
    dce8:	0c155d0b 	ldceq	13, cr5, [r5], {11}
    dcec:	01010000 	tsteq	r1, r0
    dcf0:	00145d2a 	andseq	r5, r4, sl, lsr #26
    dcf4:	905e0b00 	subsls	r0, lr, r0, lsl #22
    dcf8:	01000000 	tsteq	r0, r0
    dcfc:	13ec2a01 	mvnne	r2, #4096	; 0x1000
    dd00:	5f0b0000 	svcpl	0x000b0000
    dd04:	0000005e 	andeq	r0, r0, lr, asr r0
    dd08:	012a0101 	teqeq	sl, r1, lsl #2
    dd0c:	0b000015 	bleq	dd68 <DISABLE_IRQ+0xdce8>
    dd10:	00061360 	andeq	r1, r6, r0, ror #6
    dd14:	0c010100 	stfeqs	f0, [r1], {0}
    dd18:	00000085 	andeq	r0, r0, r5, lsl #1
    dd1c:	00000c69 	andeq	r0, r0, r9, ror #24
    dd20:	0004d70d 	andeq	sp, r4, sp, lsl #14
    dd24:	2a00ff00 	bcs	4d92c <DISABLE_IRQ+0x4d8ac>
    dd28:	0000141b 	andeq	r1, r0, fp, lsl r4
    dd2c:	0c59610b 	ldfeqe	f6, [r9], {11}
    dd30:	01010000 	tsteq	r1, r0
    dd34:	0013602a 	andseq	r6, r3, sl, lsr #32
    dd38:	92620b00 	rsbls	r0, r2, #0
    dd3c:	01000006 	tsteq	r0, r6
    dd40:	05800001 	streq	r0, [r0, #1]
    dd44:	00020000 	andeq	r0, r2, r0
    dd48:	000029c8 	andeq	r2, r0, r8, asr #19
    dd4c:	004d0104 	subeq	r0, sp, r4, lsl #2
    dd50:	38010000 	stmdacc	r1, {}
    dd54:	63000024 	movwvs	r0, #36	; 0x24
    dd58:	80000000 	andhi	r0, r0, r0
    dd5c:	bc300072 	ldclt	0, cr0, [r0], #-456	; 0xfffffe38
    dd60:	fa300073 	blx	c0df34 <MEM_SIZE+0x40df34>
    dd64:	0200002a 	andeq	r0, r0, #42	; 0x2a
    dd68:	00000564 	andeq	r0, r0, r4, ror #10
    dd6c:	01032102 	tsteq	r3, r2, lsl #2
    dd70:	0000a006 	andeq	sl, r0, r6
    dd74:	08010300 	stmdaeq	r1, {r8, r9}
    dd78:	0000009e 	muleq	r0, lr, r0
    dd7c:	0004f704 	andeq	pc, r4, r4, lsl #14
    dd80:	33240200 	teqcc	r4, #0
    dd84:	03000000 	movweq	r0, #0
    dd88:	008b0702 	addeq	r0, fp, r2, lsl #14
    dd8c:	02030000 	andeq	r0, r3, #0
    dd90:	00005905 	andeq	r5, r0, r5, lsl #18
    dd94:	03380400 	teqeq	r8, #0
    dd98:	28020000 	stmdacs	r2, {}
    dd9c:	0000005e 	andeq	r0, r0, lr, asr r0
    dda0:	37070403 	strcc	r0, [r7, -r3, lsl #8]
    dda4:	05000000 	streq	r0, [r0]
    dda8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    ddac:	08030074 	stmdaeq	r3, {r2, r4, r5, r6}
    ddb0:	00000005 	andeq	r0, r0, r5
    ddb4:	07080300 	streq	r0, [r8, -r0, lsl #6]
    ddb8:	0000002d 	andeq	r0, r0, sp, lsr #32
    ddbc:	00039f04 	andeq	r9, r3, r4, lsl #30
    ddc0:	5e2d0200 	cdppl	2, 2, cr0, cr13, cr0, {0}
    ddc4:	04000000 	streq	r0, [r0]
    ddc8:	00000a27 	andeq	r0, r0, r7, lsr #20
    ddcc:	00532a03 	subseq	r2, r3, r3, lsl #20
    ddd0:	29040000 	stmdbcs	r4, {}
    ddd4:	03000008 	movweq	r0, #8
    ddd8:	0000532c 	andeq	r5, r0, ip, lsr #6
    dddc:	0c090600 	stceq	6, cr0, [r9], {0}
    dde0:	04080000 	streq	r0, [r8]
    dde4:	0000c423 	andeq	ip, r0, r3, lsr #8
    dde8:	03110700 	tsteq	r1, #0
    ddec:	24040000 	strcs	r0, [r4]
    ddf0:	000000c4 	andeq	r0, r0, r4, asr #1
    ddf4:	07002302 	streq	r2, [r0, -r2, lsl #6]
    ddf8:	00000281 	andeq	r0, r0, r1, lsl #5
    ddfc:	00c42504 	sbceq	r2, r4, r4, lsl #10
    de00:	23020000 	movwcs	r0, #8192	; 0x2000
    de04:	04080004 	streq	r0, [r8], #-4
    de08:	0000009b 	muleq	r0, fp, r0
    de0c:	000c0904 	andeq	r0, ip, r4, lsl #18
    de10:	9b260400 	blls	98ee18 <MEM_SIZE+0x18ee18>
    de14:	06000000 	streq	r0, [r0], -r0
    de18:	0000065c 	andeq	r0, r0, ip, asr r6
    de1c:	1a2f0510 	bne	bcf264 <MEM_SIZE+0x3cf264>
    de20:	07000001 	streq	r0, [r0, -r1]
    de24:	00000ac9 	andeq	r0, r0, r9, asr #21
    de28:	00ca3105 	sbceq	r3, sl, r5, lsl #2
    de2c:	23020000 	movwcs	r0, #8192	; 0x2000
    de30:	08e00700 	stmiaeq	r0!, {r8, r9, sl}^
    de34:	32050000 	andcc	r0, r5, #0
    de38:	0000011a 	andeq	r0, r0, sl, lsl r1
    de3c:	07082302 	streq	r2, [r8, -r2, lsl #6]
    de40:	00000900 	andeq	r0, r0, r0, lsl #18
    de44:	003a3305 	eorseq	r3, sl, r5, lsl #6
    de48:	23020000 	movwcs	r0, #8192	; 0x2000
    de4c:	0427070c 	strteq	r0, [r7], #-1804	; 0x70c
    de50:	34050000 	strcc	r0, [r5]
    de54:	0000003a 	andeq	r0, r0, sl, lsr r0
    de58:	000d2302 	andeq	r2, sp, r2, lsl #6
    de5c:	003a0408 	eorseq	r0, sl, r8, lsl #8
    de60:	5c040000 	stcpl	0, cr0, [r4], {0}
    de64:	05000006 	streq	r0, [r0, #-6]
    de68:	0000d536 	andeq	sp, r0, r6, lsr r5
    de6c:	099f0600 	ldmibeq	pc, {r9, sl}
    de70:	056c0000 	strbeq	r0, [ip]!
    de74:	0002c03a 	andeq	ip, r2, sl, lsr r0
    de78:	14810700 	strne	r0, [r1], #1792	; 0x700
    de7c:	3b050000 	blcc	14de84 <DISABLE_IRQ+0x14de04>
    de80:	000002c0 	andeq	r0, r0, r0, asr #5
    de84:	07002302 	streq	r2, [r0, -r2, lsl #6]
    de88:	0000044d 	andeq	r0, r0, sp, asr #8
    de8c:	00ca4105 	sbceq	r4, sl, r5, lsl #2
    de90:	23020000 	movwcs	r0, #8192	; 0x2000
    de94:	05520704 	ldrbeq	r0, [r2, #-1796]	; 0x704
    de98:	45050000 	strmi	r0, [r5]
    de9c:	000002c6 	andeq	r0, r0, r6, asr #5
    dea0:	070c2302 	streq	r2, [ip, -r2, lsl #6]
    dea4:	00001aef 	andeq	r1, r0, pc, ror #21
    dea8:	00534b05 	subseq	r4, r3, r5, lsl #22
    deac:	23020000 	movwcs	r0, #8192	; 0x2000
    deb0:	08780710 	ldmdaeq	r8!, {r4, r8, r9, sl}^
    deb4:	4c050000 	stcmi	0, cr0, [r5], {0}
    deb8:	00000053 	andeq	r0, r0, r3, asr r0
    debc:	07142302 	ldreq	r2, [r4, -r2, lsl #6]
    dec0:	00001d35 	andeq	r1, r0, r5, lsr sp
    dec4:	003a4d05 	eorseq	r4, sl, r5, lsl #26
    dec8:	23020000 	movwcs	r0, #8192	; 0x2000
    decc:	1e5a0718 	mrcne	7, 2, r0, cr10, cr8, {0}
    ded0:	51050000 	tstpl	r5, r0
    ded4:	0000003a 	andeq	r0, r0, sl, lsr r0
    ded8:	07192302 	ldreq	r2, [r9, -r2, lsl #6]
    dedc:	00000364 	andeq	r0, r0, r4, ror #6
    dee0:	003a5305 	eorseq	r5, sl, r5, lsl #6
    dee4:	23020000 	movwcs	r0, #8192	; 0x2000
    dee8:	043f071a 	ldrteq	r0, [pc], #1818	; def0 <DISABLE_IRQ+0xde70>
    deec:	56050000 	strpl	r0, [r5], -r0
    def0:	0000003a 	andeq	r0, r0, sl, lsr r0
    def4:	071b2302 	ldreq	r2, [fp, -r2, lsl #6]
    def8:	00000bad 	andeq	r0, r0, sp, lsr #23
    defc:	033a5a05 	teqeq	sl, #20480	; 0x5000
    df00:	23020000 	movwcs	r0, #8192	; 0x2000
    df04:	0bf8071c 	bleq	ffe0fb7c <rEINTPEND+0xa9e0fad4>
    df08:	5f050000 	svcpl	0x00050000
    df0c:	000000ca 	andeq	r0, r0, sl, asr #1
    df10:	07202302 	streq	r2, [r0, -r2, lsl #6]!
    df14:	00000b03 	andeq	r0, r0, r3, lsl #22
    df18:	00536305 	subseq	r6, r3, r5, lsl #6
    df1c:	23020000 	movwcs	r0, #8192	; 0x2000
    df20:	06250728 	strteq	r0, [r5], -r8, lsr #14
    df24:	65050000 	strvs	r0, [r5]
    df28:	00000340 	andeq	r0, r0, r0, asr #6
    df2c:	072c2302 	streq	r2, [ip, -r2, lsl #6]!
    df30:	0000086e 	andeq	r0, r0, lr, ror #16
    df34:	00ca6605 	sbceq	r6, sl, r5, lsl #12
    df38:	23020000 	movwcs	r0, #8192	; 0x2000
    df3c:	0c0e0730 	stceq	7, cr0, [lr], {48}	; 0x30
    df40:	68050000 	stmdavs	r5, {}
    df44:	00000085 	andeq	r0, r0, r5, lsl #1
    df48:	07382302 	ldreq	r2, [r8, -r2, lsl #6]!
    df4c:	000007f3 	strdeq	r0, [r0], -r3
    df50:	00856905 	addeq	r6, r5, r5, lsl #18
    df54:	23020000 	movwcs	r0, #8192	; 0x2000
    df58:	05a7073c 	streq	r0, [r7, #1852]!	; 0x73c
    df5c:	6b050000 	blvs	14df64 <DISABLE_IRQ+0x14dee4>
    df60:	00000346 	andeq	r0, r0, r6, asr #6
    df64:	09402302 	stmdbeq	r0, {r1, r8, r9, sp}^
    df68:	0067736d 	rsbeq	r7, r7, sp, ror #6
    df6c:	02c06d05 	sbceq	r6, r0, #320	; 0x140
    df70:	23020000 	movwcs	r0, #8192	; 0x2000
    df74:	16300744 	ldrtne	r0, [r0], -r4, asr #14
    df78:	70050000 	andvc	r0, r5, r0
    df7c:	00000090 	muleq	r0, r0, r0
    df80:	07482302 	strbeq	r2, [r8, -r2, lsl #6]
    df84:	000008db 	ldrdeq	r0, [r0], -fp
    df88:	011a7305 	tsteq	sl, r5, lsl #6
    df8c:	23020000 	movwcs	r0, #8192	; 0x2000
    df90:	09ac074c 	stmibeq	ip!, {r2, r3, r6, r8, r9, sl}
    df94:	75050000 	strvc	r0, [r5]
    df98:	0000003a 	andeq	r0, r0, sl, lsr r0
    df9c:	07502302 	ldrbeq	r2, [r0, -r2, lsl #6]
    dfa0:	000007e6 	andeq	r0, r0, r6, ror #15
    dfa4:	003a7605 	eorseq	r7, sl, r5, lsl #12
    dfa8:	23020000 	movwcs	r0, #8192	; 0x2000
    dfac:	053d0751 	ldreq	r0, [sp, #-1873]!	; 0x751
    dfb0:	79050000 	stmdbvc	r5, {}
    dfb4:	0000034c 	andeq	r0, r0, ip, asr #6
    dfb8:	07542302 	ldrbeq	r2, [r4, -r2, lsl #6]
    dfbc:	00000ab5 	undefined instruction 0x00000ab5
    dfc0:	03cf7c05 	biceq	r7, pc, #1280	; 0x500
    dfc4:	23020000 	movwcs	r0, #8192	; 0x2000
    dfc8:	022b0758 	eoreq	r0, fp, #23068672	; 0x1600000
    dfcc:	80050000 	andhi	r0, r5, r0
    dfd0:	0000040c 	andeq	r0, r0, ip, lsl #8
    dfd4:	075c2302 	ldrbeq	r2, [ip, -r2, lsl #6]
    dfd8:	000004ad 	andeq	r0, r0, sp, lsr #9
    dfdc:	003a8405 	eorseq	r8, sl, r5, lsl #8
    dfe0:	23020000 	movwcs	r0, #8192	; 0x2000
    dfe4:	02550760 	subseq	r0, r5, #25165824	; 0x1800000
    dfe8:	85050000 	strhi	r0, [r5]
    dfec:	00000053 	andeq	r0, r0, r3, asr r0
    dff0:	07642302 	strbeq	r2, [r4, -r2, lsl #6]!
    dff4:	0000075a 	andeq	r0, r0, sl, asr r7
    dff8:	02c08605 	sbceq	r8, r0, #5242880	; 0x500000
    dffc:	23020000 	movwcs	r0, #8192	; 0x2000
    e000:	04080068 	streq	r0, [r8], #-104	; 0x68
    e004:	00000025 	andeq	r0, r0, r5, lsr #32
    e008:	0002c00a 	andeq	ip, r2, sl
    e00c:	0002d600 	andeq	sp, r2, r0, lsl #12
    e010:	02d60b00 	sbcseq	r0, r6, #0
    e014:	00000000 	andeq	r0, r0, r0
    e018:	0607040c 	streq	r0, [r7], -ip, lsl #8
    e01c:	00000b2f 	andeq	r0, r0, pc, lsr #22
    e020:	3a5a051c 	bcc	168f498 <MEM_SIZE+0xe8f498>
    e024:	07000003 	streq	r0, [r0, -r3]
    e028:	00000536 	andeq	r0, r0, r6, lsr r5
    e02c:	01202706 	teqeq	r0, r6, lsl #14
    e030:	23020000 	movwcs	r0, #8192	; 0x2000
    e034:	08670700 	stmdaeq	r7!, {r8, r9, sl}^
    e038:	2a060000 	bcs	18e040 <DISABLE_IRQ+0x18dfc0>
    e03c:	0000047f 	andeq	r0, r0, pc, ror r4
    e040:	07102302 	ldreq	r2, [r0, -r2, lsl #6]
    e044:	00000bad 	andeq	r0, r0, sp, lsr #23
    e048:	033a2c06 	teqeq	sl, #1536	; 0x600
    e04c:	23020000 	movwcs	r0, #8192	; 0x2000
    e050:	05f60714 	ldrbeq	r0, [r6, #1812]!	; 0x714
    e054:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    e058:	0000003a 	andeq	r0, r0, sl, lsr r0
    e05c:	07182302 	ldreq	r2, [r8, -r2, lsl #6]
    e060:	00000473 	andeq	r0, r0, r3, ror r4
    e064:	003a2f06 	eorseq	r2, sl, r6, lsl #30
    e068:	23020000 	movwcs	r0, #8192	; 0x2000
    e06c:	048e0719 	streq	r0, [lr], #1817	; 0x719
    e070:	30060000 	andcc	r0, r6, r0
    e074:	0000003a 	andeq	r0, r0, sl, lsr r0
    e078:	001a2302 	andseq	r2, sl, r2, lsl #6
    e07c:	02d90408 	sbcseq	r0, r9, #134217728	; 0x8000000
    e080:	04080000 	streq	r0, [r8]
    e084:	0000007a 	andeq	r0, r0, sl, ror r0
    e088:	00ca0408 	sbceq	r0, sl, r8, lsl #8
    e08c:	04080000 	streq	r0, [r8]
    e090:	00000120 	andeq	r0, r0, r0, lsr #2
    e094:	00074b06 	andeq	r4, r7, r6, lsl #22
    e098:	7c052c00 	stcvc	12, cr2, [r5], {0}
    e09c:	000003cf 	andeq	r0, r0, pc, asr #7
    e0a0:	00053607 	andeq	r3, r5, r7, lsl #12
    e0a4:	202e0700 	eorcs	r0, lr, r0, lsl #14
    e0a8:	02000001 	andeq	r0, r0, #1
    e0ac:	dd070023 	stcle	0, cr0, [r7, #-140]	; 0xffffff74
    e0b0:	07000007 	streq	r0, [r0, -r7]
    e0b4:	00046730 	andeq	r6, r4, r0, lsr r7
    e0b8:	10230200 	eorne	r0, r3, r0, lsl #4
    e0bc:	0005e407 	andeq	lr, r5, r7, lsl #8
    e0c0:	90310700 	eorsls	r0, r1, r0, lsl #14
    e0c4:	02000000 	andeq	r0, r0, #0
    e0c8:	0e071423 	cdpeq	4, 0, cr1, cr7, cr3, {1}
    e0cc:	0700000b 	streq	r0, [r0, -fp]
    e0d0:	00009032 	andeq	r9, r0, r2, lsr r0
    e0d4:	18230200 	stmdane	r3!, {r9}
    e0d8:	0005f007 	andeq	pc, r5, r7
    e0dc:	67340700 	ldrvs	r0, [r4, -r0, lsl #14]!
    e0e0:	02000004 	andeq	r0, r0, #4
    e0e4:	4e071c23 	cdpmi	12, 0, cr1, cr7, cr3, {1}
    e0e8:	07000001 	streq	r0, [r0, -r1]
    e0ec:	00046735 	andeq	r6, r4, r5, lsr r7
    e0f0:	20230200 	eorcs	r0, r3, r0, lsl #4
    e0f4:	00052707 	andeq	r2, r5, r7, lsl #14
    e0f8:	90360700 	eorsls	r0, r6, r0, lsl #14
    e0fc:	02000000 	andeq	r0, r0, #0
    e100:	9b072423 	blls	1d7194 <DISABLE_IRQ+0x1d7114>
    e104:	07000004 	streq	r0, [r0, -r4]
    e108:	00009037 	andeq	r9, r0, r7, lsr r0
    e10c:	28230200 	stmdacs	r3!, {r9}
    e110:	52040800 	andpl	r0, r4, #0
    e114:	06000003 	streq	r0, [r0], -r3
    e118:	00000aa7 	andeq	r0, r0, r7, lsr #21
    e11c:	0c800518 	cfstr32eq	mvfx0, [r0], {24}
    e120:	07000004 	streq	r0, [r0, -r4]
    e124:	00000536 	andeq	r0, r0, r6, lsr r5
    e128:	01202208 	teqeq	r0, r8, lsl #4
    e12c:	23020000 	movwcs	r0, #8192	; 0x2000
    e130:	04470700 	strbeq	r0, [r7], #-1792	; 0x700
    e134:	23080000 	movwcs	r0, #32768	; 0x8000
    e138:	00000053 	andeq	r0, r0, r3, asr r0
    e13c:	07102302 	ldreq	r2, [r0, -r2, lsl #6]
    e140:	00001b3f 	andeq	r1, r0, pc, lsr fp
    e144:	04792408 	ldrbteq	r2, [r9], #-1032	; 0x408
    e148:	23020000 	movwcs	r0, #8192	; 0x2000
    e14c:	04080014 	streq	r0, [r8], #-20
    e150:	000003d5 	ldrdeq	r0, [r0], -r5
    e154:	00099f04 	andeq	r9, r9, r4, lsl #30
    e158:	2b890500 	blcs	fe24f560 <rEINTPEND+0xa824f4b8>
    e15c:	06000001 	streq	r0, [r0], -r1
    e160:	00000b61 	andeq	r0, r0, r1, ror #22
    e164:	5421070c 	strtpl	r0, [r1], #-1804	; 0x70c
    e168:	07000004 	streq	r0, [r0, -r4]
    e16c:	00000311 	andeq	r0, r0, r1, lsl r3
    e170:	04542307 	ldrbeq	r2, [r4], #-775	; 0x307
    e174:	23020000 	movwcs	r0, #8192	; 0x2000
    e178:	05dc0700 	ldrbeq	r0, [ip, #1792]	; 0x700
    e17c:	24070000 	strcs	r0, [r7]
    e180:	0000045a 	andeq	r0, r0, sl, asr r4
    e184:	07042302 	streq	r2, [r4, -r2, lsl #6]
    e188:	00001630 	andeq	r1, r0, r0, lsr r6
    e18c:	00902507 	addseq	r2, r0, r7, lsl #10
    e190:	23020000 	movwcs	r0, #8192	; 0x2000
    e194:	04080008 	streq	r0, [r8], #-8
    e198:	0000041d 	andeq	r0, r0, sp, lsl r4
    e19c:	6104040d 	tstvs	r4, sp, lsl #8
    e1a0:	0700000b 	streq	r0, [r0, -fp]
    e1a4:	00041d27 	andeq	r1, r4, r7, lsr #26
    e1a8:	5c040800 	stcpl	8, cr0, [r4], {0}
    e1ac:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    e1b0:	00047901 	andeq	r7, r4, r1, lsl #18
    e1b4:	040c0f00 	streq	r0, [ip], #-3840	; 0xf00
    e1b8:	08000000 	stmdaeq	r0, {}
    e1bc:	00046d04 	andeq	r6, r4, r4, lsl #26
    e1c0:	12040800 	andne	r0, r4, #0
    e1c4:	10000004 	andne	r0, r0, r4
    e1c8:	00246501 	eoreq	r6, r4, r1, lsl #10
    e1cc:	802a0100 	eorhi	r0, sl, r0, lsl #2
    e1d0:	5c300072 	ldcpl	0, cr0, [r0], #-456	; 0xfffffe38
    e1d4:	5e300073 	mrcpl	0, 1, r0, cr0, cr3, {3}
    e1d8:	1100004c 	tstne	r0, ip, asr #32
    e1dc:	0000245a 	andeq	r2, r0, sl, asr r4
    e1e0:	5c011f01 	stcpl	15, cr1, [r1], {1}
    e1e4:	7c300073 	ldcvc	0, cr0, [r0], #-460	; 0xfffffe34
    e1e8:	89300073 	ldmdbhi	r0!, {r0, r1, r4, r5, r6}
    e1ec:	c100004c 	tstgt	r0, ip, asr #32
    e1f0:	12000004 	andne	r0, r0, #4
    e1f4:	00002431 	andeq	r2, r0, r1, lsr r4
    e1f8:	045a1f01 	ldrbeq	r1, [sl], #-3841	; 0xf01
    e1fc:	4ca80000 	stcmi	0, cr0, [r8]
    e200:	11000000 	tstne	r0, r0
    e204:	0000244f 	andeq	r2, r0, pc, asr #8
    e208:	7c011501 	cfstr32vc	mvfx1, [r1], {1}
    e20c:	9c300073 	ldcls	0, cr0, [r0], #-460	; 0xfffffe34
    e210:	bb300073 	bllt	c0e3e4 <MEM_SIZE+0x40e3e4>
    e214:	e900004c 	stmdb	r0, {r2, r3, r6}
    e218:	12000004 	andne	r0, r0, #4
    e21c:	00002431 	andeq	r2, r0, r1, lsr r4
    e220:	045a1501 	ldrbeq	r1, [sl], #-1281	; 0x501
    e224:	4cda0000 	ldclmi	0, cr0, [sl], {0}
    e228:	11000000 	tstne	r0, r0
    e22c:	00002444 	andeq	r2, r0, r4, asr #8
    e230:	9c010c01 	stcls	12, cr0, [r1], {1}
    e234:	bc300073 	ldclt	0, cr0, [r0], #-460	; 0xfffffe34
    e238:	ed300073 	ldc	0, cr0, [r0, #-460]!	; 0xfffffe34
    e23c:	1100004c 	tstne	r0, ip, asr #32
    e240:	12000005 	andne	r0, r0, #5
    e244:	00002431 	andeq	r2, r0, r1, lsr r4
    e248:	045a0c01 	ldrbeq	r0, [sl], #-3073	; 0xc01
    e24c:	4d0c0000 	stcmi	0, cr0, [ip]
    e250:	0a000000 	beq	e258 <DISABLE_IRQ+0xe1d8>
    e254:	00000412 	andeq	r0, r0, r2, lsl r4
    e258:	00000521 	andeq	r0, r0, r1, lsr #10
    e25c:	0002d60b 	andeq	sp, r2, fp, lsl #12
    e260:	13000200 	movwne	r0, #512	; 0x200
    e264:	000023f0 	strdeq	r2, [r0], -r0
    e268:	05110601 	ldreq	r0, [r1, #-1537]	; 0x601
    e26c:	03050000 	movweq	r0, #20480	; 0x5000
    e270:	30007e24 	andcc	r7, r0, r4, lsr #28
    e274:	00007a0a 	andeq	r7, r0, sl, lsl #20
    e278:	00054300 	andeq	r4, r5, r0, lsl #6
    e27c:	02d61400 	sbcseq	r1, r6, #0
    e280:	03ff0000 	mvnseq	r0, #0
    e284:	23fe1300 	mvnscs	r1, #0
    e288:	08010000 	stmdaeq	r1, {}
    e28c:	00000532 	andeq	r0, r0, r2, lsr r5
    e290:	7f680305 	svcvc	0x00680305
    e294:	0f133000 	svceq	0x00133000
    e298:	01000024 	tsteq	r0, r4, lsr #32
    e29c:	00053209 	andeq	r3, r5, r9, lsl #4
    e2a0:	68030500 	stmdavs	r3, {r8, sl}
    e2a4:	1330008f 	teqne	r0, #143	; 0x8f
    e2a8:	00002420 	andeq	r2, r0, r0, lsr #8
    e2ac:	05320a01 	ldreq	r0, [r2, #-2561]!	; 0xa01
    e2b0:	03050000 	movweq	r0, #20480	; 0x5000
    e2b4:	30009f68 	andcc	r9, r0, r8, ror #30
    e2b8:	0000ac15 	andeq	sl, r0, r5, lsl ip
    e2bc:	65280100 	strvs	r0, [r8, #-256]!	; 0x100
    e2c0:	01000000 	tsteq	r0, r0
    e2c4:	05620001 	strbeq	r0, [r2, #-1]!
    e2c8:	00020000 	andeq	r0, r2, r0
    e2cc:	00002ad2 	ldrdeq	r2, [r0], -r2
    e2d0:	004d0104 	subeq	r0, sp, r4, lsl #2
    e2d4:	78010000 	stmdavc	r1, {}
    e2d8:	63000024 	movwvs	r0, #36	; 0x24
    e2dc:	bc000000 	stclt	0, cr0, [r0], {0}
    e2e0:	dc300073 	ldcle	0, cr0, [r0], #-460	; 0xfffffe34
    e2e4:	c4300074 	ldrtgt	r0, [r0], #-116	; 0x74
    e2e8:	0200002b 	andeq	r0, r0, #43	; 0x2b
    e2ec:	00000564 	andeq	r0, r0, r4, ror #10
    e2f0:	01032102 	tsteq	r3, r2, lsl #2
    e2f4:	0000a006 	andeq	sl, r0, r6
    e2f8:	08010300 	stmdaeq	r1, {r8, r9}
    e2fc:	0000009e 	muleq	r0, lr, r0
    e300:	0004f704 	andeq	pc, r4, r4, lsl #14
    e304:	33240200 	teqcc	r4, #0
    e308:	03000000 	movweq	r0, #0
    e30c:	008b0702 	addeq	r0, fp, r2, lsl #14
    e310:	02030000 	andeq	r0, r3, #0
    e314:	00005905 	andeq	r5, r0, r5, lsl #18
    e318:	03380400 	teqeq	r8, #0
    e31c:	28020000 	stmdacs	r2, {}
    e320:	0000005e 	andeq	r0, r0, lr, asr r0
    e324:	37070403 	strcc	r0, [r7, -r3, lsl #8]
    e328:	05000000 	streq	r0, [r0]
    e32c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    e330:	08030074 	stmdaeq	r3, {r2, r4, r5, r6}
    e334:	00000005 	andeq	r0, r0, r5
    e338:	07080300 	streq	r0, [r8, -r0, lsl #6]
    e33c:	0000002d 	andeq	r0, r0, sp, lsr #32
    e340:	00039f04 	andeq	r9, r3, r4, lsl #30
    e344:	5e2d0200 	cdppl	2, 2, cr0, cr13, cr0, {0}
    e348:	04000000 	streq	r0, [r0]
    e34c:	00000a27 	andeq	r0, r0, r7, lsr #20
    e350:	00532a03 	subseq	r2, r3, r3, lsl #20
    e354:	29040000 	stmdbcs	r4, {}
    e358:	03000008 	movweq	r0, #8
    e35c:	0000532c 	andeq	r5, r0, ip, lsr #6
    e360:	0c090600 	stceq	6, cr0, [r9], {0}
    e364:	04080000 	streq	r0, [r8]
    e368:	0000c423 	andeq	ip, r0, r3, lsr #8
    e36c:	03110700 	tsteq	r1, #0
    e370:	24040000 	strcs	r0, [r4]
    e374:	000000c4 	andeq	r0, r0, r4, asr #1
    e378:	07002302 	streq	r2, [r0, -r2, lsl #6]
    e37c:	00000281 	andeq	r0, r0, r1, lsl #5
    e380:	00c42504 	sbceq	r2, r4, r4, lsl #10
    e384:	23020000 	movwcs	r0, #8192	; 0x2000
    e388:	04080004 	streq	r0, [r8], #-4
    e38c:	0000009b 	muleq	r0, fp, r0
    e390:	000c0904 	andeq	r0, ip, r4, lsl #18
    e394:	9b260400 	blls	98f39c <MEM_SIZE+0x18f39c>
    e398:	06000000 	streq	r0, [r0], -r0
    e39c:	0000065c 	andeq	r0, r0, ip, asr r6
    e3a0:	1a2f0510 	bne	bcf7e8 <MEM_SIZE+0x3cf7e8>
    e3a4:	07000001 	streq	r0, [r0, -r1]
    e3a8:	00000ac9 	andeq	r0, r0, r9, asr #21
    e3ac:	00ca3105 	sbceq	r3, sl, r5, lsl #2
    e3b0:	23020000 	movwcs	r0, #8192	; 0x2000
    e3b4:	08e00700 	stmiaeq	r0!, {r8, r9, sl}^
    e3b8:	32050000 	andcc	r0, r5, #0
    e3bc:	0000011a 	andeq	r0, r0, sl, lsl r1
    e3c0:	07082302 	streq	r2, [r8, -r2, lsl #6]
    e3c4:	00000900 	andeq	r0, r0, r0, lsl #18
    e3c8:	003a3305 	eorseq	r3, sl, r5, lsl #6
    e3cc:	23020000 	movwcs	r0, #8192	; 0x2000
    e3d0:	0427070c 	strteq	r0, [r7], #-1804	; 0x70c
    e3d4:	34050000 	strcc	r0, [r5]
    e3d8:	0000003a 	andeq	r0, r0, sl, lsr r0
    e3dc:	000d2302 	andeq	r2, sp, r2, lsl #6
    e3e0:	003a0408 	eorseq	r0, sl, r8, lsl #8
    e3e4:	5c040000 	stcpl	0, cr0, [r4], {0}
    e3e8:	05000006 	streq	r0, [r0, #-6]
    e3ec:	0000d536 	andeq	sp, r0, r6, lsr r5
    e3f0:	099f0600 	ldmibeq	pc, {r9, sl}
    e3f4:	056c0000 	strbeq	r0, [ip]!
    e3f8:	0002c03a 	andeq	ip, r2, sl, lsr r0
    e3fc:	14810700 	strne	r0, [r1], #1792	; 0x700
    e400:	3b050000 	blcc	14e408 <DISABLE_IRQ+0x14e388>
    e404:	000002c0 	andeq	r0, r0, r0, asr #5
    e408:	07002302 	streq	r2, [r0, -r2, lsl #6]
    e40c:	0000044d 	andeq	r0, r0, sp, asr #8
    e410:	00ca4105 	sbceq	r4, sl, r5, lsl #2
    e414:	23020000 	movwcs	r0, #8192	; 0x2000
    e418:	05520704 	ldrbeq	r0, [r2, #-1796]	; 0x704
    e41c:	45050000 	strmi	r0, [r5]
    e420:	000002c6 	andeq	r0, r0, r6, asr #5
    e424:	070c2302 	streq	r2, [ip, -r2, lsl #6]
    e428:	00001aef 	andeq	r1, r0, pc, ror #21
    e42c:	00534b05 	subseq	r4, r3, r5, lsl #22
    e430:	23020000 	movwcs	r0, #8192	; 0x2000
    e434:	08780710 	ldmdaeq	r8!, {r4, r8, r9, sl}^
    e438:	4c050000 	stcmi	0, cr0, [r5], {0}
    e43c:	00000053 	andeq	r0, r0, r3, asr r0
    e440:	07142302 	ldreq	r2, [r4, -r2, lsl #6]
    e444:	00001d35 	andeq	r1, r0, r5, lsr sp
    e448:	003a4d05 	eorseq	r4, sl, r5, lsl #26
    e44c:	23020000 	movwcs	r0, #8192	; 0x2000
    e450:	1e5a0718 	mrcne	7, 2, r0, cr10, cr8, {0}
    e454:	51050000 	tstpl	r5, r0
    e458:	0000003a 	andeq	r0, r0, sl, lsr r0
    e45c:	07192302 	ldreq	r2, [r9, -r2, lsl #6]
    e460:	00000364 	andeq	r0, r0, r4, ror #6
    e464:	003a5305 	eorseq	r5, sl, r5, lsl #6
    e468:	23020000 	movwcs	r0, #8192	; 0x2000
    e46c:	043f071a 	ldrteq	r0, [pc], #1818	; e474 <DISABLE_IRQ+0xe3f4>
    e470:	56050000 	strpl	r0, [r5], -r0
    e474:	0000003a 	andeq	r0, r0, sl, lsr r0
    e478:	071b2302 	ldreq	r2, [fp, -r2, lsl #6]
    e47c:	00000bad 	andeq	r0, r0, sp, lsr #23
    e480:	033a5a05 	teqeq	sl, #20480	; 0x5000
    e484:	23020000 	movwcs	r0, #8192	; 0x2000
    e488:	0bf8071c 	bleq	ffe10100 <rEINTPEND+0xa9e10058>
    e48c:	5f050000 	svcpl	0x00050000
    e490:	000000ca 	andeq	r0, r0, sl, asr #1
    e494:	07202302 	streq	r2, [r0, -r2, lsl #6]!
    e498:	00000b03 	andeq	r0, r0, r3, lsl #22
    e49c:	00536305 	subseq	r6, r3, r5, lsl #6
    e4a0:	23020000 	movwcs	r0, #8192	; 0x2000
    e4a4:	06250728 	strteq	r0, [r5], -r8, lsr #14
    e4a8:	65050000 	strvs	r0, [r5]
    e4ac:	00000340 	andeq	r0, r0, r0, asr #6
    e4b0:	072c2302 	streq	r2, [ip, -r2, lsl #6]!
    e4b4:	0000086e 	andeq	r0, r0, lr, ror #16
    e4b8:	00ca6605 	sbceq	r6, sl, r5, lsl #12
    e4bc:	23020000 	movwcs	r0, #8192	; 0x2000
    e4c0:	0c0e0730 	stceq	7, cr0, [lr], {48}	; 0x30
    e4c4:	68050000 	stmdavs	r5, {}
    e4c8:	00000085 	andeq	r0, r0, r5, lsl #1
    e4cc:	07382302 	ldreq	r2, [r8, -r2, lsl #6]!
    e4d0:	000007f3 	strdeq	r0, [r0], -r3
    e4d4:	00856905 	addeq	r6, r5, r5, lsl #18
    e4d8:	23020000 	movwcs	r0, #8192	; 0x2000
    e4dc:	05a7073c 	streq	r0, [r7, #1852]!	; 0x73c
    e4e0:	6b050000 	blvs	14e4e8 <DISABLE_IRQ+0x14e468>
    e4e4:	00000346 	andeq	r0, r0, r6, asr #6
    e4e8:	09402302 	stmdbeq	r0, {r1, r8, r9, sp}^
    e4ec:	0067736d 	rsbeq	r7, r7, sp, ror #6
    e4f0:	02c06d05 	sbceq	r6, r0, #320	; 0x140
    e4f4:	23020000 	movwcs	r0, #8192	; 0x2000
    e4f8:	16300744 	ldrtne	r0, [r0], -r4, asr #14
    e4fc:	70050000 	andvc	r0, r5, r0
    e500:	00000090 	muleq	r0, r0, r0
    e504:	07482302 	strbeq	r2, [r8, -r2, lsl #6]
    e508:	000008db 	ldrdeq	r0, [r0], -fp
    e50c:	011a7305 	tsteq	sl, r5, lsl #6
    e510:	23020000 	movwcs	r0, #8192	; 0x2000
    e514:	09ac074c 	stmibeq	ip!, {r2, r3, r6, r8, r9, sl}
    e518:	75050000 	strvc	r0, [r5]
    e51c:	0000003a 	andeq	r0, r0, sl, lsr r0
    e520:	07502302 	ldrbeq	r2, [r0, -r2, lsl #6]
    e524:	000007e6 	andeq	r0, r0, r6, ror #15
    e528:	003a7605 	eorseq	r7, sl, r5, lsl #12
    e52c:	23020000 	movwcs	r0, #8192	; 0x2000
    e530:	053d0751 	ldreq	r0, [sp, #-1873]!	; 0x751
    e534:	79050000 	stmdbvc	r5, {}
    e538:	0000034c 	andeq	r0, r0, ip, asr #6
    e53c:	07542302 	ldrbeq	r2, [r4, -r2, lsl #6]
    e540:	00000ab5 	undefined instruction 0x00000ab5
    e544:	03cf7c05 	biceq	r7, pc, #1280	; 0x500
    e548:	23020000 	movwcs	r0, #8192	; 0x2000
    e54c:	022b0758 	eoreq	r0, fp, #23068672	; 0x1600000
    e550:	80050000 	andhi	r0, r5, r0
    e554:	0000040c 	andeq	r0, r0, ip, lsl #8
    e558:	075c2302 	ldrbeq	r2, [ip, -r2, lsl #6]
    e55c:	000004ad 	andeq	r0, r0, sp, lsr #9
    e560:	003a8405 	eorseq	r8, sl, r5, lsl #8
    e564:	23020000 	movwcs	r0, #8192	; 0x2000
    e568:	02550760 	subseq	r0, r5, #25165824	; 0x1800000
    e56c:	85050000 	strhi	r0, [r5]
    e570:	00000053 	andeq	r0, r0, r3, asr r0
    e574:	07642302 	strbeq	r2, [r4, -r2, lsl #6]!
    e578:	0000075a 	andeq	r0, r0, sl, asr r7
    e57c:	02c08605 	sbceq	r8, r0, #5242880	; 0x500000
    e580:	23020000 	movwcs	r0, #8192	; 0x2000
    e584:	04080068 	streq	r0, [r8], #-104	; 0x68
    e588:	00000025 	andeq	r0, r0, r5, lsr #32
    e58c:	0002c00a 	andeq	ip, r2, sl
    e590:	0002d600 	andeq	sp, r2, r0, lsl #12
    e594:	02d60b00 	sbcseq	r0, r6, #0
    e598:	00000000 	andeq	r0, r0, r0
    e59c:	0607040c 	streq	r0, [r7], -ip, lsl #8
    e5a0:	00000b2f 	andeq	r0, r0, pc, lsr #22
    e5a4:	3a5a051c 	bcc	168fa1c <MEM_SIZE+0xe8fa1c>
    e5a8:	07000003 	streq	r0, [r0, -r3]
    e5ac:	00000536 	andeq	r0, r0, r6, lsr r5
    e5b0:	01202706 	teqeq	r0, r6, lsl #14
    e5b4:	23020000 	movwcs	r0, #8192	; 0x2000
    e5b8:	08670700 	stmdaeq	r7!, {r8, r9, sl}^
    e5bc:	2a060000 	bcs	18e5c4 <DISABLE_IRQ+0x18e544>
    e5c0:	0000048a 	andeq	r0, r0, sl, lsl #9
    e5c4:	07102302 	ldreq	r2, [r0, -r2, lsl #6]
    e5c8:	00000bad 	andeq	r0, r0, sp, lsr #23
    e5cc:	033a2c06 	teqeq	sl, #1536	; 0x600
    e5d0:	23020000 	movwcs	r0, #8192	; 0x2000
    e5d4:	05f60714 	ldrbeq	r0, [r6, #1812]!	; 0x714
    e5d8:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    e5dc:	0000003a 	andeq	r0, r0, sl, lsr r0
    e5e0:	07182302 	ldreq	r2, [r8, -r2, lsl #6]
    e5e4:	00000473 	andeq	r0, r0, r3, ror r4
    e5e8:	003a2f06 	eorseq	r2, sl, r6, lsl #30
    e5ec:	23020000 	movwcs	r0, #8192	; 0x2000
    e5f0:	048e0719 	streq	r0, [lr], #1817	; 0x719
    e5f4:	30060000 	andcc	r0, r6, r0
    e5f8:	0000003a 	andeq	r0, r0, sl, lsr r0
    e5fc:	001a2302 	andseq	r2, sl, r2, lsl #6
    e600:	02d90408 	sbcseq	r0, r9, #134217728	; 0x8000000
    e604:	04080000 	streq	r0, [r8]
    e608:	0000007a 	andeq	r0, r0, sl, ror r0
    e60c:	00ca0408 	sbceq	r0, sl, r8, lsl #8
    e610:	04080000 	streq	r0, [r8]
    e614:	00000120 	andeq	r0, r0, r0, lsr #2
    e618:	00074b06 	andeq	r4, r7, r6, lsl #22
    e61c:	7c052c00 	stcvc	12, cr2, [r5], {0}
    e620:	000003cf 	andeq	r0, r0, pc, asr #7
    e624:	00053607 	andeq	r3, r5, r7, lsl #12
    e628:	202e0700 	eorcs	r0, lr, r0, lsl #14
    e62c:	02000001 	andeq	r0, r0, #1
    e630:	dd070023 	stcle	0, cr0, [r7, #-140]	; 0xffffff74
    e634:	07000007 	streq	r0, [r0, -r7]
    e638:	00046730 	andeq	r6, r4, r0, lsr r7
    e63c:	10230200 	eorne	r0, r3, r0, lsl #4
    e640:	0005e407 	andeq	lr, r5, r7, lsl #8
    e644:	90310700 	eorsls	r0, r1, r0, lsl #14
    e648:	02000000 	andeq	r0, r0, #0
    e64c:	0e071423 	cdpeq	4, 0, cr1, cr7, cr3, {1}
    e650:	0700000b 	streq	r0, [r0, -fp]
    e654:	00009032 	andeq	r9, r0, r2, lsr r0
    e658:	18230200 	stmdane	r3!, {r9}
    e65c:	0005f007 	andeq	pc, r5, r7
    e660:	67340700 	ldrvs	r0, [r4, -r0, lsl #14]!
    e664:	02000004 	andeq	r0, r0, #4
    e668:	4e071c23 	cdpmi	12, 0, cr1, cr7, cr3, {1}
    e66c:	07000001 	streq	r0, [r0, -r1]
    e670:	00046735 	andeq	r6, r4, r5, lsr r7
    e674:	20230200 	eorcs	r0, r3, r0, lsl #4
    e678:	00052707 	andeq	r2, r5, r7, lsl #14
    e67c:	90360700 	eorsls	r0, r6, r0, lsl #14
    e680:	02000000 	andeq	r0, r0, #0
    e684:	9b072423 	blls	1d7718 <DISABLE_IRQ+0x1d7698>
    e688:	07000004 	streq	r0, [r0, -r4]
    e68c:	00009037 	andeq	r9, r0, r7, lsr r0
    e690:	28230200 	stmdacs	r3!, {r9}
    e694:	52040800 	andpl	r0, r4, #0
    e698:	06000003 	streq	r0, [r0], -r3
    e69c:	00000aa7 	andeq	r0, r0, r7, lsr #21
    e6a0:	0c800518 	cfstr32eq	mvfx0, [r0], {24}
    e6a4:	07000004 	streq	r0, [r0, -r4]
    e6a8:	00000536 	andeq	r0, r0, r6, lsr r5
    e6ac:	01202208 	teqeq	r0, r8, lsl #4
    e6b0:	23020000 	movwcs	r0, #8192	; 0x2000
    e6b4:	04470700 	strbeq	r0, [r7], #-1792	; 0x700
    e6b8:	23080000 	movwcs	r0, #32768	; 0x8000
    e6bc:	00000053 	andeq	r0, r0, r3, asr r0
    e6c0:	07102302 	ldreq	r2, [r0, -r2, lsl #6]
    e6c4:	00001b3f 	andeq	r1, r0, pc, lsr fp
    e6c8:	04792408 	ldrbteq	r2, [r9], #-1032	; 0x408
    e6cc:	23020000 	movwcs	r0, #8192	; 0x2000
    e6d0:	04080014 	streq	r0, [r8], #-20
    e6d4:	000003d5 	ldrdeq	r0, [r0], -r5
    e6d8:	00099f04 	andeq	r9, r9, r4, lsl #30
    e6dc:	2b890500 	blcs	fe24fae4 <rEINTPEND+0xa824fa3c>
    e6e0:	06000001 	streq	r0, [r0], -r1
    e6e4:	00000b61 	andeq	r0, r0, r1, ror #22
    e6e8:	5421070c 	strtpl	r0, [r1], #-1804	; 0x70c
    e6ec:	07000004 	streq	r0, [r0, -r4]
    e6f0:	00000311 	andeq	r0, r0, r1, lsl r3
    e6f4:	04542307 	ldrbeq	r2, [r4], #-775	; 0x307
    e6f8:	23020000 	movwcs	r0, #8192	; 0x2000
    e6fc:	05dc0700 	ldrbeq	r0, [ip, #1792]	; 0x700
    e700:	24070000 	strcs	r0, [r7]
    e704:	0000045a 	andeq	r0, r0, sl, asr r4
    e708:	07042302 	streq	r2, [r4, -r2, lsl #6]
    e70c:	00001630 	andeq	r1, r0, r0, lsr r6
    e710:	00902507 	addseq	r2, r0, r7, lsl #10
    e714:	23020000 	movwcs	r0, #8192	; 0x2000
    e718:	04080008 	streq	r0, [r8], #-8
    e71c:	0000041d 	andeq	r0, r0, sp, lsl r4
    e720:	6104040d 	tstvs	r4, sp, lsl #8
    e724:	0700000b 	streq	r0, [r0, -fp]
    e728:	00041d27 	andeq	r1, r4, r7, lsr #26
    e72c:	5c040800 	stcpl	8, cr0, [r4], {0}
    e730:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    e734:	00047901 	andeq	r7, r4, r1, lsl #18
    e738:	040c0f00 	streq	r0, [ip], #-3840	; 0xf00
    e73c:	08000000 	stmdaeq	r0, {}
    e740:	00046d04 	andeq	r6, r4, r4, lsl #26
    e744:	0aa70400 	beq	fe9cf74c <rEINTPEND+0xa89cf6a4>
    e748:	26080000 	strcs	r0, [r8], -r0
    e74c:	000003d5 	ldrdeq	r0, [r0], -r5
    e750:	04120408 	ldreq	r0, [r2], #-1032	; 0x408
    e754:	01100000 	tsteq	r0, r0
    e758:	0000246f 	andeq	r2, r0, pc, ror #8
    e75c:	73bc2701 	undefined instruction 0x73bc2701
    e760:	74803000 	strvc	r3, [r0]
    e764:	4d1f3000 	ldcmi	0, cr3, [pc]
    e768:	4f110000 	svcmi	0x00110000
    e76c:	01000024 	tsteq	r0, r4, lsr #32
    e770:	74800119 	strvc	r0, [r0], #281	; 0x119
    e774:	74ac3000 	strtvc	r3, [ip]
    e778:	4d4a3000 	stclmi	0, cr3, [sl]
    e77c:	04cc0000 	strbeq	r0, [ip]
    e780:	31120000 	tstcc	r2, r0
    e784:	01000024 	tsteq	r0, r4, lsr #32
    e788:	00045a19 	andeq	r5, r4, r9, lsl sl
    e78c:	004d6900 	subeq	r6, sp, r0, lsl #18
    e790:	44110000 	ldrmi	r0, [r1]
    e794:	01000024 	tsteq	r0, r4, lsr #32
    e798:	74ac010d 	strtvc	r0, [ip], #269	; 0x10d
    e79c:	74dc3000 	ldrbvc	r3, [ip]
    e7a0:	4d7c3000 	ldclmi	0, cr3, [ip]
    e7a4:	04f40000 	ldrbteq	r0, [r4]
    e7a8:	31120000 	tstcc	r2, r0
    e7ac:	01000024 	tsteq	r0, r4, lsr #32
    e7b0:	00045a0d 	andeq	r5, r4, sp, lsl #20
    e7b4:	004d9b00 	subeq	r9, sp, r0, lsl #22
    e7b8:	120a0000 	andne	r0, sl, #0
    e7bc:	04000004 	streq	r0, [r0], #-4
    e7c0:	0b000005 	bleq	e7dc <DISABLE_IRQ+0xe75c>
    e7c4:	000002d6 	ldrdeq	r0, [r0], -r6
    e7c8:	f0130001 	undefined instruction 0xf0130001
    e7cc:	01000023 	tsteq	r0, r3, lsr #32
    e7d0:	0004f406 	andeq	pc, r4, r6, lsl #8
    e7d4:	80030500 	andhi	r0, r3, r0, lsl #10
    e7d8:	0a3000af 	beq	c0ea9c <MEM_SIZE+0x40ea9c>
    e7dc:	0000007a 	andeq	r0, r0, sl, ror r0
    e7e0:	00000526 	andeq	r0, r0, r6, lsr #10
    e7e4:	0002d614 	andeq	sp, r2, r4, lsl r6
    e7e8:	0003ff00 	andeq	pc, r3, r0, lsl #30
    e7ec:	0023fe13 	eoreq	pc, r3, r3, lsl lr
    e7f0:	15080100 	strne	r0, [r8, #-256]	; 0x100
    e7f4:	05000005 	streq	r0, [r0, #-5]
    e7f8:	00b05803 	adcseq	r5, r0, r3, lsl #16
    e7fc:	240f1330 	strcs	r1, [pc], #816	; e804 <DISABLE_IRQ+0xe784>
    e800:	09010000 	stmdbeq	r1, {}
    e804:	00000515 	andeq	r0, r0, r5, lsl r5
    e808:	c0580305 	subsgt	r0, r8, r5, lsl #6
    e80c:	73153000 	tstvc	r5, #0
    e810:	0b010031 	bleq	4e8dc <DISABLE_IRQ+0x4e85c>
    e814:	0000047f 	andeq	r0, r0, pc, ror r4
    e818:	af680305 	svcge	0x00680305
    e81c:	ac163000 	ldcge	0, cr3, [r6], {0}
    e820:	01000000 	tsteq	r0, r0
    e824:	00006525 	andeq	r6, r0, r5, lsr #10
    e828:	00010100 	andeq	r0, r1, r0, lsl #2
    e82c:	00000573 	andeq	r0, r0, r3, ror r5
    e830:	2beb0002 	blcs	fface840 <rEINTPEND+0xa9ace798>
    e834:	01040000 	tsteq	r4, r0
    e838:	0000004d 	andeq	r0, r0, sp, asr #32
    e83c:	00248e01 	eoreq	r8, r4, r1, lsl #28
    e840:	00006300 	andeq	r6, r0, r0, lsl #6
    e844:	0074dc00 	rsbseq	sp, r4, r0, lsl #24
    e848:	00765430 	rsbseq	r5, r6, r0, lsr r4
    e84c:	002c8a30 	eoreq	r8, ip, r0, lsr sl
    e850:	05640200 	strbeq	r0, [r4, #-512]!	; 0x200
    e854:	21020000 	tstcs	r2, r0
    e858:	a0060103 	andge	r0, r6, r3, lsl #2
    e85c:	03000000 	movweq	r0, #0
    e860:	009e0801 	addseq	r0, lr, r1, lsl #16
    e864:	f7040000 	undefined instruction 0xf7040000
    e868:	02000004 	andeq	r0, r0, #4
    e86c:	00003324 	andeq	r3, r0, r4, lsr #6
    e870:	07020300 	streq	r0, [r2, -r0, lsl #6]
    e874:	0000008b 	andeq	r0, r0, fp, lsl #1
    e878:	59050203 	stmdbpl	r5, {r0, r1, r9}
    e87c:	04000000 	streq	r0, [r0]
    e880:	00000338 	andeq	r0, r0, r8, lsr r3
    e884:	005e2802 	subseq	r2, lr, r2, lsl #16
    e888:	04030000 	streq	r0, [r3]
    e88c:	00003707 	andeq	r3, r0, r7, lsl #14
    e890:	05040500 	streq	r0, [r4, #-1280]	; 0x500
    e894:	00746e69 	rsbseq	r6, r4, r9, ror #28
    e898:	00050803 	andeq	r0, r5, r3, lsl #16
    e89c:	03000000 	movweq	r0, #0
    e8a0:	002d0708 	eoreq	r0, sp, r8, lsl #14
    e8a4:	9f040000 	svcls	0x00040000
    e8a8:	02000003 	andeq	r0, r0, #3
    e8ac:	00005e2d 	andeq	r5, r0, sp, lsr #28
    e8b0:	0a270400 	beq	9cf8b8 <MEM_SIZE+0x1cf8b8>
    e8b4:	2a030000 	bcs	ce8bc <DISABLE_IRQ+0xce83c>
    e8b8:	00000053 	andeq	r0, r0, r3, asr r0
    e8bc:	00082904 	andeq	r2, r8, r4, lsl #18
    e8c0:	532c0300 	teqpl	ip, #0
    e8c4:	06000000 	streq	r0, [r0], -r0
    e8c8:	00000c09 	andeq	r0, r0, r9, lsl #24
    e8cc:	c4230408 	strtgt	r0, [r3], #-1032	; 0x408
    e8d0:	07000000 	streq	r0, [r0, -r0]
    e8d4:	00000311 	andeq	r0, r0, r1, lsl r3
    e8d8:	00c42404 	sbceq	r2, r4, r4, lsl #8
    e8dc:	23020000 	movwcs	r0, #8192	; 0x2000
    e8e0:	02810700 	addeq	r0, r1, #0
    e8e4:	25040000 	strcs	r0, [r4]
    e8e8:	000000c4 	andeq	r0, r0, r4, asr #1
    e8ec:	00042302 	andeq	r2, r4, r2, lsl #6
    e8f0:	009b0408 	addseq	r0, fp, r8, lsl #8
    e8f4:	09040000 	stmdbeq	r4, {}
    e8f8:	0400000c 	streq	r0, [r0], #-12
    e8fc:	00009b26 	andeq	r9, r0, r6, lsr #22
    e900:	065c0600 	ldrbeq	r0, [ip], -r0, lsl #12
    e904:	05100000 	ldreq	r0, [r0]
    e908:	00011a2f 	andeq	r1, r1, pc, lsr #20
    e90c:	0ac90700 	beq	ff250514 <rEINTPEND+0xa925046c>
    e910:	31050000 	tstcc	r5, r0
    e914:	000000ca 	andeq	r0, r0, sl, asr #1
    e918:	07002302 	streq	r2, [r0, -r2, lsl #6]
    e91c:	000008e0 	andeq	r0, r0, r0, ror #17
    e920:	011a3205 	tsteq	sl, r5, lsl #4
    e924:	23020000 	movwcs	r0, #8192	; 0x2000
    e928:	09000708 	stmdbeq	r0, {r3, r8, r9, sl}
    e92c:	33050000 	movwcc	r0, #20480	; 0x5000
    e930:	0000003a 	andeq	r0, r0, sl, lsr r0
    e934:	070c2302 	streq	r2, [ip, -r2, lsl #6]
    e938:	00000427 	andeq	r0, r0, r7, lsr #8
    e93c:	003a3405 	eorseq	r3, sl, r5, lsl #8
    e940:	23020000 	movwcs	r0, #8192	; 0x2000
    e944:	0408000d 	streq	r0, [r8], #-13
    e948:	0000003a 	andeq	r0, r0, sl, lsr r0
    e94c:	00065c04 	andeq	r5, r6, r4, lsl #24
    e950:	d5360500 	ldrle	r0, [r6, #-1280]!	; 0x500
    e954:	06000000 	streq	r0, [r0], -r0
    e958:	0000099f 	muleq	r0, pc, r9
    e95c:	c03a056c 	eorsgt	r0, sl, ip, ror #10
    e960:	07000002 	streq	r0, [r0, -r2]
    e964:	00001481 	andeq	r1, r0, r1, lsl #9
    e968:	02c03b05 	sbceq	r3, r0, #5120	; 0x1400
    e96c:	23020000 	movwcs	r0, #8192	; 0x2000
    e970:	044d0700 	strbeq	r0, [sp], #-1792	; 0x700
    e974:	41050000 	tstmi	r5, r0
    e978:	000000ca 	andeq	r0, r0, sl, asr #1
    e97c:	07042302 	streq	r2, [r4, -r2, lsl #6]
    e980:	00000552 	andeq	r0, r0, r2, asr r5
    e984:	02c64505 	sbceq	r4, r6, #20971520	; 0x1400000
    e988:	23020000 	movwcs	r0, #8192	; 0x2000
    e98c:	1aef070c 	bne	ffbd05c4 <rEINTPEND+0xa9bd051c>
    e990:	4b050000 	blmi	14e998 <DISABLE_IRQ+0x14e918>
    e994:	00000053 	andeq	r0, r0, r3, asr r0
    e998:	07102302 	ldreq	r2, [r0, -r2, lsl #6]
    e99c:	00000878 	andeq	r0, r0, r8, ror r8
    e9a0:	00534c05 	subseq	r4, r3, r5, lsl #24
    e9a4:	23020000 	movwcs	r0, #8192	; 0x2000
    e9a8:	1d350714 	ldcne	7, cr0, [r5, #-80]!	; 0xffffffb0
    e9ac:	4d050000 	stcmi	0, cr0, [r5]
    e9b0:	0000003a 	andeq	r0, r0, sl, lsr r0
    e9b4:	07182302 	ldreq	r2, [r8, -r2, lsl #6]
    e9b8:	00001e5a 	andeq	r1, r0, sl, asr lr
    e9bc:	003a5105 	eorseq	r5, sl, r5, lsl #2
    e9c0:	23020000 	movwcs	r0, #8192	; 0x2000
    e9c4:	03640719 	cmneq	r4, #6553600	; 0x640000
    e9c8:	53050000 	movwpl	r0, #20480	; 0x5000
    e9cc:	0000003a 	andeq	r0, r0, sl, lsr r0
    e9d0:	071a2302 	ldreq	r2, [sl, -r2, lsl #6]
    e9d4:	0000043f 	andeq	r0, r0, pc, lsr r4
    e9d8:	003a5605 	eorseq	r5, sl, r5, lsl #12
    e9dc:	23020000 	movwcs	r0, #8192	; 0x2000
    e9e0:	0bad071b 	bleq	feb50654 <rEINTPEND+0xa8b505ac>
    e9e4:	5a050000 	bpl	14e9ec <DISABLE_IRQ+0x14e96c>
    e9e8:	0000033a 	andeq	r0, r0, sl, lsr r3
    e9ec:	071c2302 	ldreq	r2, [ip, -r2, lsl #6]
    e9f0:	00000bf8 	strdeq	r0, [r0], -r8
    e9f4:	00ca5f05 	sbceq	r5, sl, r5, lsl #30
    e9f8:	23020000 	movwcs	r0, #8192	; 0x2000
    e9fc:	0b030720 	bleq	d0684 <DISABLE_IRQ+0xd0604>
    ea00:	63050000 	movwvs	r0, #20480	; 0x5000
    ea04:	00000053 	andeq	r0, r0, r3, asr r0
    ea08:	07282302 	streq	r2, [r8, -r2, lsl #6]!
    ea0c:	00000625 	andeq	r0, r0, r5, lsr #12
    ea10:	03406505 	movteq	r6, #1285	; 0x505
    ea14:	23020000 	movwcs	r0, #8192	; 0x2000
    ea18:	086e072c 	stmdaeq	lr!, {r2, r3, r5, r8, r9, sl}^
    ea1c:	66050000 	strvs	r0, [r5], -r0
    ea20:	000000ca 	andeq	r0, r0, sl, asr #1
    ea24:	07302302 	ldreq	r2, [r0, -r2, lsl #6]!
    ea28:	00000c0e 	andeq	r0, r0, lr, lsl #24
    ea2c:	00856805 	addeq	r6, r5, r5, lsl #16
    ea30:	23020000 	movwcs	r0, #8192	; 0x2000
    ea34:	07f30738 	undefined instruction 0x07f30738
    ea38:	69050000 	stmdbvs	r5, {}
    ea3c:	00000085 	andeq	r0, r0, r5, lsl #1
    ea40:	073c2302 	ldreq	r2, [ip, -r2, lsl #6]!
    ea44:	000005a7 	andeq	r0, r0, r7, lsr #11
    ea48:	03466b05 	movteq	r6, #27397	; 0x6b05
    ea4c:	23020000 	movwcs	r0, #8192	; 0x2000
    ea50:	736d0940 	cmnvc	sp, #1048576	; 0x100000
    ea54:	6d050067 	stcvs	0, cr0, [r5, #-412]	; 0xfffffe64
    ea58:	000002c0 	andeq	r0, r0, r0, asr #5
    ea5c:	07442302 	strbeq	r2, [r4, -r2, lsl #6]
    ea60:	00001630 	andeq	r1, r0, r0, lsr r6
    ea64:	00907005 	addseq	r7, r0, r5
    ea68:	23020000 	movwcs	r0, #8192	; 0x2000
    ea6c:	08db0748 	ldmeq	fp, {r3, r6, r8, r9, sl}^
    ea70:	73050000 	movwvc	r0, #20480	; 0x5000
    ea74:	0000011a 	andeq	r0, r0, sl, lsl r1
    ea78:	074c2302 	strbeq	r2, [ip, -r2, lsl #6]
    ea7c:	000009ac 	andeq	r0, r0, ip, lsr #19
    ea80:	003a7505 	eorseq	r7, sl, r5, lsl #10
    ea84:	23020000 	movwcs	r0, #8192	; 0x2000
    ea88:	07e60750 	ubfxeq	r0, r0, #14, #7
    ea8c:	76050000 	strvc	r0, [r5], -r0
    ea90:	0000003a 	andeq	r0, r0, sl, lsr r0
    ea94:	07512302 	ldrbeq	r2, [r1, -r2, lsl #6]
    ea98:	0000053d 	andeq	r0, r0, sp, lsr r5
    ea9c:	034c7905 	movteq	r7, #51461	; 0xc905
    eaa0:	23020000 	movwcs	r0, #8192	; 0x2000
    eaa4:	0ab50754 	beq	fed507fc <rEINTPEND+0xa8d50754>
    eaa8:	7c050000 	stcvc	0, cr0, [r5], {0}
    eaac:	000003cf 	andeq	r0, r0, pc, asr #7
    eab0:	07582302 	ldrbeq	r2, [r8, -r2, lsl #6]
    eab4:	0000022b 	andeq	r0, r0, fp, lsr #4
    eab8:	040c8005 	streq	r8, [ip], #-5
    eabc:	23020000 	movwcs	r0, #8192	; 0x2000
    eac0:	04ad075c 	strteq	r0, [sp], #1884	; 0x75c
    eac4:	84050000 	strhi	r0, [r5]
    eac8:	0000003a 	andeq	r0, r0, sl, lsr r0
    eacc:	07602302 	strbeq	r2, [r0, -r2, lsl #6]!
    ead0:	00000255 	andeq	r0, r0, r5, asr r2
    ead4:	00538505 	subseq	r8, r3, r5, lsl #10
    ead8:	23020000 	movwcs	r0, #8192	; 0x2000
    eadc:	075a0764 	ldrbeq	r0, [sl, -r4, ror #14]
    eae0:	86050000 	strhi	r0, [r5], -r0
    eae4:	000002c0 	andeq	r0, r0, r0, asr #5
    eae8:	00682302 	rsbeq	r2, r8, r2, lsl #6
    eaec:	00250408 	eoreq	r0, r5, r8, lsl #8
    eaf0:	c00a0000 	andgt	r0, sl, r0
    eaf4:	d6000002 	strle	r0, [r0], -r2
    eaf8:	0b000002 	bleq	eb08 <DISABLE_IRQ+0xea88>
    eafc:	000002d6 	ldrdeq	r0, [r0], -r6
    eb00:	040c0000 	streq	r0, [ip]
    eb04:	0b2f0607 	bleq	bd0328 <MEM_SIZE+0x3d0328>
    eb08:	051c0000 	ldreq	r0, [ip]
    eb0c:	00033a5a 	andeq	r3, r3, sl, asr sl
    eb10:	05360700 	ldreq	r0, [r6, #-1792]!	; 0x700
    eb14:	27060000 	strcs	r0, [r6, -r0]
    eb18:	00000120 	andeq	r0, r0, r0, lsr #2
    eb1c:	07002302 	streq	r2, [r0, -r2, lsl #6]
    eb20:	00000867 	andeq	r0, r0, r7, ror #16
    eb24:	047f2a06 	ldrbteq	r2, [pc], #2566	; eb2c <DISABLE_IRQ+0xeaac>
    eb28:	23020000 	movwcs	r0, #8192	; 0x2000
    eb2c:	0bad0710 	bleq	feb50774 <rEINTPEND+0xa8b506cc>
    eb30:	2c060000 	stccs	0, cr0, [r6], {0}
    eb34:	0000033a 	andeq	r0, r0, sl, lsr r3
    eb38:	07142302 	ldreq	r2, [r4, -r2, lsl #6]
    eb3c:	000005f6 	strdeq	r0, [r0], -r6
    eb40:	003a2e06 	eorseq	r2, sl, r6, lsl #28
    eb44:	23020000 	movwcs	r0, #8192	; 0x2000
    eb48:	04730718 	ldrbteq	r0, [r3], #-1816	; 0x718
    eb4c:	2f060000 	svccs	0x00060000
    eb50:	0000003a 	andeq	r0, r0, sl, lsr r0
    eb54:	07192302 	ldreq	r2, [r9, -r2, lsl #6]
    eb58:	0000048e 	andeq	r0, r0, lr, lsl #9
    eb5c:	003a3006 	eorseq	r3, sl, r6
    eb60:	23020000 	movwcs	r0, #8192	; 0x2000
    eb64:	0408001a 	streq	r0, [r8], #-26
    eb68:	000002d9 	ldrdeq	r0, [r0], -r9
    eb6c:	007a0408 	rsbseq	r0, sl, r8, lsl #8
    eb70:	04080000 	streq	r0, [r8]
    eb74:	000000ca 	andeq	r0, r0, sl, asr #1
    eb78:	01200408 	teqeq	r0, r8, lsl #8
    eb7c:	4b060000 	blmi	18eb84 <DISABLE_IRQ+0x18eb04>
    eb80:	2c000007 	stccs	0, cr0, [r0], {7}
    eb84:	03cf7c05 	biceq	r7, pc, #1280	; 0x500
    eb88:	36070000 	strcc	r0, [r7], -r0
    eb8c:	07000005 	streq	r0, [r0, -r5]
    eb90:	0001202e 	andeq	r2, r1, lr, lsr #32
    eb94:	00230200 	eoreq	r0, r3, r0, lsl #4
    eb98:	0007dd07 	andeq	sp, r7, r7, lsl #26
    eb9c:	67300700 	ldrvs	r0, [r0, -r0, lsl #14]!
    eba0:	02000004 	andeq	r0, r0, #4
    eba4:	e4071023 	str	r1, [r7], #-35	; 0x23
    eba8:	07000005 	streq	r0, [r0, -r5]
    ebac:	00009031 	andeq	r9, r0, r1, lsr r0
    ebb0:	14230200 	strtne	r0, [r3], #-512	; 0x200
    ebb4:	000b0e07 	andeq	r0, fp, r7, lsl #28
    ebb8:	90320700 	eorsls	r0, r2, r0, lsl #14
    ebbc:	02000000 	andeq	r0, r0, #0
    ebc0:	f0071823 	undefined instruction 0xf0071823
    ebc4:	07000005 	streq	r0, [r0, -r5]
    ebc8:	00046734 	andeq	r6, r4, r4, lsr r7
    ebcc:	1c230200 	sfmne	f0, 4, [r3]	; (stcne 2, cr0, [r3])
    ebd0:	00014e07 	andeq	r4, r1, r7, lsl #28
    ebd4:	67350700 	ldrvs	r0, [r5, -r0, lsl #14]!
    ebd8:	02000004 	andeq	r0, r0, #4
    ebdc:	27072023 	strcs	r2, [r7, -r3, lsr #32]
    ebe0:	07000005 	streq	r0, [r0, -r5]
    ebe4:	00009036 	andeq	r9, r0, r6, lsr r0
    ebe8:	24230200 	strtcs	r0, [r3], #-512	; 0x200
    ebec:	00049b07 	andeq	r9, r4, r7, lsl #22
    ebf0:	90370700 	eorsls	r0, r7, r0, lsl #14
    ebf4:	02000000 	andeq	r0, r0, #0
    ebf8:	08002823 	stmdaeq	r0, {r0, r1, r5, fp, sp}
    ebfc:	00035204 	andeq	r5, r3, r4, lsl #4
    ec00:	0aa70600 	beq	fe9d0408 <rEINTPEND+0xa89d0360>
    ec04:	05180000 	ldreq	r0, [r8]
    ec08:	00040c80 	andeq	r0, r4, r0, lsl #25
    ec0c:	05360700 	ldreq	r0, [r6, #-1792]!	; 0x700
    ec10:	22080000 	andcs	r0, r8, #0
    ec14:	00000120 	andeq	r0, r0, r0, lsr #2
    ec18:	07002302 	streq	r2, [r0, -r2, lsl #6]
    ec1c:	00000447 	andeq	r0, r0, r7, asr #8
    ec20:	00532308 	subseq	r2, r3, r8, lsl #6
    ec24:	23020000 	movwcs	r0, #8192	; 0x2000
    ec28:	1b3f0710 	blne	fd0870 <MEM_SIZE+0x7d0870>
    ec2c:	24080000 	strcs	r0, [r8]
    ec30:	00000479 	andeq	r0, r0, r9, ror r4
    ec34:	00142302 	andseq	r2, r4, r2, lsl #6
    ec38:	03d50408 	bicseq	r0, r5, #134217728	; 0x8000000
    ec3c:	9f040000 	svcls	0x00040000
    ec40:	05000009 	streq	r0, [r0, #-9]
    ec44:	00012b89 	andeq	r2, r1, r9, lsl #23
    ec48:	0b610600 	bleq	1850450 <MEM_SIZE+0x1050450>
    ec4c:	070c0000 	streq	r0, [ip, -r0]
    ec50:	00045421 	andeq	r5, r4, r1, lsr #8
    ec54:	03110700 	tsteq	r1, #0
    ec58:	23070000 	movwcs	r0, #28672	; 0x7000
    ec5c:	00000454 	andeq	r0, r0, r4, asr r4
    ec60:	07002302 	streq	r2, [r0, -r2, lsl #6]
    ec64:	000005dc 	ldrdeq	r0, [r0], -ip
    ec68:	045a2407 	ldrbeq	r2, [sl], #-1031	; 0x407
    ec6c:	23020000 	movwcs	r0, #8192	; 0x2000
    ec70:	16300704 	ldrtne	r0, [r0], -r4, lsl #14
    ec74:	25070000 	strcs	r0, [r7]
    ec78:	00000090 	muleq	r0, r0, r0
    ec7c:	00082302 	andeq	r2, r8, r2, lsl #6
    ec80:	041d0408 	ldreq	r0, [sp], #-1032	; 0x408
    ec84:	040d0000 	streq	r0, [sp]
    ec88:	000b6104 	andeq	r6, fp, r4, lsl #2
    ec8c:	1d270700 	stcne	7, cr0, [r7]
    ec90:	08000004 	stmdaeq	r0, {r2}
    ec94:	00045c04 	andeq	r5, r4, r4, lsl #24
    ec98:	79010e00 	stmdbvc	r1, {r9, sl, fp}
    ec9c:	0f000004 	svceq	0x00000004
    eca0:	0000040c 	andeq	r0, r0, ip, lsl #8
    eca4:	6d040800 	stcvs	8, cr0, [r4]
    eca8:	08000004 	stmdaeq	r0, {r2}
    ecac:	00041204 	andeq	r1, r4, r4, lsl #4
    ecb0:	0b2f0400 	bleq	bcfcb8 <MEM_SIZE+0x3cfcb8>
    ecb4:	32060000 	andcc	r0, r6, #0
    ecb8:	000002d9 	ldrdeq	r0, [r0], -r9
    ecbc:	24830110 	strcs	r0, [r3], #272	; 0x110
    ecc0:	37010000 	strcc	r0, [r1, -r0]
    ecc4:	300074dc 	ldrdcc	r7, [r0], -ip
    ecc8:	300075a4 	andcc	r7, r0, r4, lsr #11
    eccc:	00004dae 	andeq	r4, r0, lr, lsr #27
    ecd0:	00244f11 	eoreq	r4, r4, r1, lsl pc
    ecd4:	01220100 	teqeq	r2, r0, lsl #2
    ecd8:	300075a4 	andcc	r7, r0, r4, lsr #11
    ecdc:	300075f8 	strdcc	r7, [r0], -r8
    ece0:	00004dd9 	ldrdeq	r4, [r0], -r9
    ece4:	000004cc 	andeq	r0, r0, ip, asr #9
    ece8:	00243112 	eoreq	r3, r4, r2, lsl r1
    ecec:	5a220100 	bpl	88f0f4 <MEM_SIZE+0x8f0f4>
    ecf0:	f8000004 	undefined instruction 0xf8000004
    ecf4:	0000004d 	andeq	r0, r0, sp, asr #32
    ecf8:	00244411 	eoreq	r4, r4, r1, lsl r4
    ecfc:	010f0100 	tsteq	pc, r0, lsl #2
    ed00:	300075f8 	strdcc	r7, [r0], -r8
    ed04:	30007654 	andcc	r7, r0, r4, asr r6
    ed08:	00004e16 	andeq	r4, r0, r6, lsl lr
    ed0c:	000004f4 	strdeq	r0, [r0], -r4
    ed10:	00243112 	eoreq	r3, r4, r2, lsl r1
    ed14:	5a0f0100 	bpl	3cf11c <DISABLE_IRQ+0x3cf09c>
    ed18:	35000004 	strcc	r0, [r0, #-4]
    ed1c:	0000004e 	andeq	r0, r0, lr, asr #32
    ed20:	0004120a 	andeq	r1, r4, sl, lsl #4
    ed24:	00050400 	andeq	r0, r5, r0, lsl #8
    ed28:	02d60b00 	sbcseq	r0, r6, #0
    ed2c:	00010000 	andeq	r0, r1, r0
    ed30:	0023f013 	eoreq	pc, r3, r3, lsl r0
    ed34:	f4060100 	vst4.8	{d0,d2,d4,d6}, [r6], r0
    ed38:	05000004 	streq	r0, [r0, #-4]
    ed3c:	00d07403 	sbcseq	r7, r0, r3, lsl #8
    ed40:	007a0a30 	rsbseq	r0, sl, r0, lsr sl
    ed44:	05260000 	streq	r0, [r6]!
    ed48:	d6140000 	ldrle	r0, [r4], -r0
    ed4c:	ff000002 	undefined instruction 0xff000002
    ed50:	fe130003 	cdp2	0, 1, cr0, cr3, cr3, {0}
    ed54:	01000023 	tsteq	r0, r3, lsr #32
    ed58:	00051508 	andeq	r1, r5, r8, lsl #10
    ed5c:	4c030500 	cfstr32mi	mvfx0, [r3], {0}
    ed60:	133000d1 	teqne	r0, #209	; 0xd1
    ed64:	0000240f 	andeq	r2, r0, pc, lsl #8
    ed68:	05150901 	ldreq	r0, [r5, #-2305]	; 0x901
    ed6c:	03050000 	movweq	r0, #20480	; 0x5000
    ed70:	3000e14c 	andcc	lr, r0, ip, asr #2
    ed74:	00249b13 	eoreq	r9, r4, r3, lsl fp
    ed78:	650b0100 	strvs	r0, [fp, #-256]	; 0x100
    ed7c:	05000000 	streq	r0, [r0]
    ed80:	00f14c03 	rscseq	r4, r1, r3, lsl #24
    ed84:	316d1530 	cmncc	sp, r0, lsr r5
    ed88:	850d0100 	strhi	r0, [sp, #-256]	; 0x100
    ed8c:	05000004 	streq	r0, [r0, #-4]
    ed90:	00d05803 	sbcseq	r5, r0, r3, lsl #16
    ed94:	00ac1630 	adceq	r1, ip, r0, lsr r6
    ed98:	35010000 	strcc	r0, [r1]
    ed9c:	00000065 	andeq	r0, r0, r5, rrx
    eda0:	0c000101 	stfeqs	f0, [r0], {1}
    eda4:	02000006 	andeq	r0, r0, #6
    eda8:	002d0400 	eoreq	r0, sp, r0, lsl #8
    edac:	4d010400 	cfstrsmi	mvf0, [r1]
    edb0:	01000000 	tsteq	r0, r0
    edb4:	000024b6 	undefined instruction 0x000024b6
    edb8:	00000063 	andeq	r0, r0, r3, rrx
    edbc:	30007654 	andcc	r7, r0, r4, asr r6
    edc0:	30007798 	mulcc	r0, r8, r7
    edc4:	00002d61 	andeq	r2, r0, r1, ror #26
    edc8:	00056402 	andeq	r6, r5, r2, lsl #8
    edcc:	03210200 	teqeq	r1, #0
    edd0:	00a00601 	adceq	r0, r0, r1, lsl #12
    edd4:	01030000 	tsteq	r3, r0
    edd8:	00009e08 	andeq	r9, r0, r8, lsl #28
    eddc:	04f70400 	ldrbteq	r0, [r7], #1024	; 0x400
    ede0:	24020000 	strcs	r0, [r2]
    ede4:	00000033 	andeq	r0, r0, r3, lsr r0
    ede8:	8b070203 	blhi	1cf5fc <DISABLE_IRQ+0x1cf57c>
    edec:	03000000 	movweq	r0, #0
    edf0:	00590502 	subseq	r0, r9, r2, lsl #10
    edf4:	38040000 	stmdacc	r4, {}
    edf8:	02000003 	andeq	r0, r0, #3
    edfc:	00005e28 	andeq	r5, r0, r8, lsr #28
    ee00:	07040300 	streq	r0, [r4, -r0, lsl #6]
    ee04:	00000037 	andeq	r0, r0, r7, lsr r0
    ee08:	69050405 	stmdbvs	r5, {r0, r2, sl}
    ee0c:	0300746e 	movweq	r7, #1134	; 0x46e
    ee10:	00000508 	andeq	r0, r0, r8, lsl #10
    ee14:	08030000 	stmdaeq	r3, {}
    ee18:	00002d07 	andeq	r2, r0, r7, lsl #26
    ee1c:	039f0400 	orrseq	r0, pc, #0
    ee20:	2d020000 	stccs	0, cr0, [r2]
    ee24:	0000005e 	andeq	r0, r0, lr, asr r0
    ee28:	000a2704 	andeq	r2, sl, r4, lsl #14
    ee2c:	532a0300 	teqpl	sl, #0
    ee30:	04000000 	streq	r0, [r0]
    ee34:	00000829 	andeq	r0, r0, r9, lsr #16
    ee38:	00532c03 	subseq	r2, r3, r3, lsl #24
    ee3c:	09060000 	stmdbeq	r6, {}
    ee40:	0800000c 	stmdaeq	r0, {r2, r3}
    ee44:	00c42304 	sbceq	r2, r4, r4, lsl #6
    ee48:	11070000 	tstne	r7, r0
    ee4c:	04000003 	streq	r0, [r0], #-3
    ee50:	0000c424 	andeq	ip, r0, r4, lsr #8
    ee54:	00230200 	eoreq	r0, r3, r0, lsl #4
    ee58:	00028107 	andeq	r8, r2, r7, lsl #2
    ee5c:	c4250400 	strtgt	r0, [r5], #-1024	; 0x400
    ee60:	02000000 	andeq	r0, r0, #0
    ee64:	08000423 	stmdaeq	r0, {r0, r1, r5, sl}
    ee68:	00009b04 	andeq	r9, r0, r4, lsl #22
    ee6c:	0c090400 	cfstrseq	mvf0, [r9], {0}
    ee70:	26040000 	strcs	r0, [r4], -r0
    ee74:	0000009b 	muleq	r0, fp, r0
    ee78:	00065c06 	andeq	r5, r6, r6, lsl #24
    ee7c:	2f051000 	svccs	0x00051000
    ee80:	0000011a 	andeq	r0, r0, sl, lsl r1
    ee84:	000ac907 	andeq	ip, sl, r7, lsl #18
    ee88:	ca310500 	bgt	c50290 <MEM_SIZE+0x450290>
    ee8c:	02000000 	andeq	r0, r0, #0
    ee90:	e0070023 	and	r0, r7, r3, lsr #32
    ee94:	05000008 	streq	r0, [r0, #-8]
    ee98:	00011a32 	andeq	r1, r1, r2, lsr sl
    ee9c:	08230200 	stmdaeq	r3!, {r9}
    eea0:	00090007 	andeq	r0, r9, r7
    eea4:	3a330500 	bcc	cd02ac <MEM_SIZE+0x4d02ac>
    eea8:	02000000 	andeq	r0, r0, #0
    eeac:	27070c23 	strcs	r0, [r7, -r3, lsr #24]
    eeb0:	05000004 	streq	r0, [r0, #-4]
    eeb4:	00003a34 	andeq	r3, r0, r4, lsr sl
    eeb8:	0d230200 	sfmeq	f0, 4, [r3]	; (stceq 2, cr0, [r3])
    eebc:	3a040800 	bcc	110ec4 <DISABLE_IRQ+0x110e44>
    eec0:	04000000 	streq	r0, [r0]
    eec4:	0000065c 	andeq	r0, r0, ip, asr r6
    eec8:	00d53605 	sbcseq	r3, r5, r5, lsl #12
    eecc:	9f060000 	svcls	0x00060000
    eed0:	6c000009 	stcvs	0, cr0, [r0], {9}
    eed4:	02c03a05 	sbceq	r3, r0, #20480	; 0x5000
    eed8:	81070000 	tsthi	r7, r0
    eedc:	05000014 	streq	r0, [r0, #-20]
    eee0:	0002c03b 	andeq	ip, r2, fp, lsr r0
    eee4:	00230200 	eoreq	r0, r3, r0, lsl #4
    eee8:	00044d07 	andeq	r4, r4, r7, lsl #26
    eeec:	ca410500 	bgt	10502f4 <MEM_SIZE+0x8502f4>
    eef0:	02000000 	andeq	r0, r0, #0
    eef4:	52070423 	andpl	r0, r7, #587202560	; 0x23000000
    eef8:	05000005 	streq	r0, [r0, #-5]
    eefc:	0002c645 	andeq	ip, r2, r5, asr #12
    ef00:	0c230200 	sfmeq	f0, 4, [r3]	; (stceq 2, cr0, [r3])
    ef04:	001aef07 	andseq	lr, sl, r7, lsl #30
    ef08:	534b0500 	movtpl	r0, #46336	; 0xb500
    ef0c:	02000000 	andeq	r0, r0, #0
    ef10:	78071023 	stmdavc	r7, {r0, r1, r5, ip}
    ef14:	05000008 	streq	r0, [r0, #-8]
    ef18:	0000534c 	andeq	r5, r0, ip, asr #6
    ef1c:	14230200 	strtne	r0, [r3], #-512	; 0x200
    ef20:	001d3507 	andseq	r3, sp, r7, lsl #10
    ef24:	3a4d0500 	bcc	135032c <MEM_SIZE+0xb5032c>
    ef28:	02000000 	andeq	r0, r0, #0
    ef2c:	5a071823 	bpl	1d4fc0 <DISABLE_IRQ+0x1d4f40>
    ef30:	0500001e 	streq	r0, [r0, #-30]
    ef34:	00003a51 	andeq	r3, r0, r1, asr sl
    ef38:	19230200 	stmdbne	r3!, {r9}
    ef3c:	00036407 	andeq	r6, r3, r7, lsl #8
    ef40:	3a530500 	bcc	14d0348 <MEM_SIZE+0xcd0348>
    ef44:	02000000 	andeq	r0, r0, #0
    ef48:	3f071a23 	svccc	0x00071a23
    ef4c:	05000004 	streq	r0, [r0, #-4]
    ef50:	00003a56 	andeq	r3, r0, r6, asr sl
    ef54:	1b230200 	blne	8cf75c <MEM_SIZE+0xcf75c>
    ef58:	000bad07 	andeq	sl, fp, r7, lsl #26
    ef5c:	3a5a0500 	bcc	1690364 <MEM_SIZE+0xe90364>
    ef60:	02000003 	andeq	r0, r0, #3
    ef64:	f8071c23 	undefined instruction 0xf8071c23
    ef68:	0500000b 	streq	r0, [r0, #-11]
    ef6c:	0000ca5f 	andeq	ip, r0, pc, asr sl
    ef70:	20230200 	eorcs	r0, r3, r0, lsl #4
    ef74:	000b0307 	andeq	r0, fp, r7, lsl #6
    ef78:	53630500 	cmnpl	r3, #0
    ef7c:	02000000 	andeq	r0, r0, #0
    ef80:	25072823 	strcs	r2, [r7, #-2083]	; 0x823
    ef84:	05000006 	streq	r0, [r0, #-6]
    ef88:	00034065 	andeq	r4, r3, r5, rrx
    ef8c:	2c230200 	sfmcs	f0, 4, [r3]	; (stccs 2, cr0, [r3])
    ef90:	00086e07 	andeq	r6, r8, r7, lsl #28
    ef94:	ca660500 	bgt	199039c <MEM_SIZE+0x119039c>
    ef98:	02000000 	andeq	r0, r0, #0
    ef9c:	0e073023 	cdpeq	0, 0, cr3, cr7, cr3, {1}
    efa0:	0500000c 	streq	r0, [r0, #-12]
    efa4:	00008568 	andeq	r8, r0, r8, ror #10
    efa8:	38230200 	stmdacc	r3!, {r9}
    efac:	0007f307 	andeq	pc, r7, r7, lsl #6
    efb0:	85690500 	strbhi	r0, [r9, #-1280]!	; 0x500
    efb4:	02000000 	andeq	r0, r0, #0
    efb8:	a7073c23 	strge	r3, [r7, -r3, lsr #24]
    efbc:	05000005 	streq	r0, [r0, #-5]
    efc0:	0003466b 	andeq	r4, r3, fp, ror #12
    efc4:	40230200 	eormi	r0, r3, r0, lsl #4
    efc8:	67736d09 	ldrbvs	r6, [r3, -r9, lsl #26]!
    efcc:	c06d0500 	rsbgt	r0, sp, r0, lsl #10
    efd0:	02000002 	andeq	r0, r0, #2
    efd4:	30074423 	andcc	r4, r7, r3, lsr #8
    efd8:	05000016 	streq	r0, [r0, #-22]
    efdc:	00009070 	andeq	r9, r0, r0, ror r0
    efe0:	48230200 	stmdami	r3!, {r9}
    efe4:	0008db07 	andeq	sp, r8, r7, lsl #22
    efe8:	1a730500 	bne	1cd03f0 <MEM_SIZE+0x14d03f0>
    efec:	02000001 	andeq	r0, r0, #1
    eff0:	ac074c23 	stcge	12, cr4, [r7], {35}	; 0x23
    eff4:	05000009 	streq	r0, [r0, #-9]
    eff8:	00003a75 	andeq	r3, r0, r5, ror sl
    effc:	50230200 	eorpl	r0, r3, r0, lsl #4
    f000:	0007e607 	andeq	lr, r7, r7, lsl #12
    f004:	3a760500 	bcc	1d9040c <MEM_SIZE+0x159040c>
    f008:	02000000 	andeq	r0, r0, #0
    f00c:	3d075123 	stfccs	f5, [r7, #-140]	; 0xffffff74
    f010:	05000005 	streq	r0, [r0, #-5]
    f014:	00034c79 	andeq	r4, r3, r9, ror ip
    f018:	54230200 	strtpl	r0, [r3], #-512	; 0x200
    f01c:	000ab507 	andeq	fp, sl, r7, lsl #10
    f020:	cf7c0500 	svcgt	0x007c0500
    f024:	02000003 	andeq	r0, r0, #3
    f028:	2b075823 	blcs	1e50bc <DISABLE_IRQ+0x1e503c>
    f02c:	05000002 	streq	r0, [r0, #-2]
    f030:	00040c80 	andeq	r0, r4, r0, lsl #25
    f034:	5c230200 	sfmpl	f0, 4, [r3]	; (stcpl 2, cr0, [r3])
    f038:	0004ad07 	andeq	sl, r4, r7, lsl #26
    f03c:	3a840500 	bcc	fe110444 <rEINTPEND+0xa811039c>
    f040:	02000000 	andeq	r0, r0, #0
    f044:	55076023 	strpl	r6, [r7, #-35]	; 0x23
    f048:	05000002 	streq	r0, [r0, #-2]
    f04c:	00005385 	andeq	r5, r0, r5, lsl #7
    f050:	64230200 	strtvs	r0, [r3], #-512	; 0x200
    f054:	00075a07 	andeq	r5, r7, r7, lsl #20
    f058:	c0860500 	addgt	r0, r6, r0, lsl #10
    f05c:	02000002 	andeq	r0, r0, #2
    f060:	08006823 	stmdaeq	r0, {r0, r1, r5, fp, sp, lr}
    f064:	00002504 	andeq	r2, r0, r4, lsl #10
    f068:	02c00a00 	sbceq	r0, r0, #0
    f06c:	02d60000 	sbcseq	r0, r6, #0
    f070:	d60b0000 	strle	r0, [fp], -r0
    f074:	00000002 	andeq	r0, r0, r2
    f078:	07040c00 	streq	r0, [r4, -r0, lsl #24]
    f07c:	000b2f06 	andeq	r2, fp, r6, lsl #30
    f080:	5a051c00 	bpl	156088 <DISABLE_IRQ+0x156008>
    f084:	0000033a 	andeq	r0, r0, sl, lsr r3
    f088:	00053607 	andeq	r3, r5, r7, lsl #12
    f08c:	20270600 	eorcs	r0, r7, r0, lsl #12
    f090:	02000001 	andeq	r0, r0, #1
    f094:	67070023 	strvs	r0, [r7, -r3, lsr #32]
    f098:	06000008 	streq	r0, [r0], -r8
    f09c:	0004912a 	andeq	r9, r4, sl, lsr #2
    f0a0:	10230200 	eorne	r0, r3, r0, lsl #4
    f0a4:	000bad07 	andeq	sl, fp, r7, lsl #26
    f0a8:	3a2c0600 	bcc	b108b0 <MEM_SIZE+0x3108b0>
    f0ac:	02000003 	andeq	r0, r0, #3
    f0b0:	f6071423 	undefined instruction 0xf6071423
    f0b4:	06000005 	streq	r0, [r0], -r5
    f0b8:	00003a2e 	andeq	r3, r0, lr, lsr #20
    f0bc:	18230200 	stmdane	r3!, {r9}
    f0c0:	00047307 	andeq	r7, r4, r7, lsl #6
    f0c4:	3a2f0600 	bcc	bd08cc <MEM_SIZE+0x3d08cc>
    f0c8:	02000000 	andeq	r0, r0, #0
    f0cc:	8e071923 	cdphi	9, 0, cr1, cr7, cr3, {1}
    f0d0:	06000004 	streq	r0, [r0], -r4
    f0d4:	00003a30 	andeq	r3, r0, r0, lsr sl
    f0d8:	1a230200 	bne	8cf8e0 <MEM_SIZE+0xcf8e0>
    f0dc:	d9040800 	stmdble	r4, {fp}
    f0e0:	08000002 	stmdaeq	r0, {r1}
    f0e4:	00007a04 	andeq	r7, r0, r4, lsl #20
    f0e8:	ca040800 	bgt	1110f0 <DISABLE_IRQ+0x111070>
    f0ec:	08000000 	stmdaeq	r0, {}
    f0f0:	00012004 	andeq	r2, r1, r4
    f0f4:	074b0600 	strbeq	r0, [fp, -r0, lsl #12]
    f0f8:	052c0000 	streq	r0, [ip]!
    f0fc:	0003cf7c 	andeq	ip, r3, ip, ror pc
    f100:	05360700 	ldreq	r0, [r6, #-1792]!	; 0x700
    f104:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
    f108:	00000120 	andeq	r0, r0, r0, lsr #2
    f10c:	07002302 	streq	r2, [r0, -r2, lsl #6]
    f110:	000007dd 	ldrdeq	r0, [r0], -sp
    f114:	04793007 	ldrbteq	r3, [r9], #-7
    f118:	23020000 	movwcs	r0, #8192	; 0x2000
    f11c:	05e40710 	strbeq	r0, [r4, #1808]!	; 0x710
    f120:	31070000 	tstcc	r7, r0
    f124:	00000090 	muleq	r0, r0, r0
    f128:	07142302 	ldreq	r2, [r4, -r2, lsl #6]
    f12c:	00000b0e 	andeq	r0, r0, lr, lsl #22
    f130:	00903207 	addseq	r3, r0, r7, lsl #4
    f134:	23020000 	movwcs	r0, #8192	; 0x2000
    f138:	05f00718 	ldrbeq	r0, [r0, #1816]!	; 0x718
    f13c:	34070000 	strcc	r0, [r7]
    f140:	00000479 	andeq	r0, r0, r9, ror r4
    f144:	071c2302 	ldreq	r2, [ip, -r2, lsl #6]
    f148:	0000014e 	andeq	r0, r0, lr, asr #2
    f14c:	04793507 	ldrbteq	r3, [r9], #-1287	; 0x507
    f150:	23020000 	movwcs	r0, #8192	; 0x2000
    f154:	05270720 	streq	r0, [r7, #-1824]!	; 0x720
    f158:	36070000 	strcc	r0, [r7], -r0
    f15c:	00000090 	muleq	r0, r0, r0
    f160:	07242302 	streq	r2, [r4, -r2, lsl #6]!
    f164:	0000049b 	muleq	r0, fp, r4
    f168:	00903707 	addseq	r3, r0, r7, lsl #14
    f16c:	23020000 	movwcs	r0, #8192	; 0x2000
    f170:	04080028 	streq	r0, [r8], #-40	; 0x28
    f174:	00000352 	andeq	r0, r0, r2, asr r3
    f178:	000aa706 	andeq	sl, sl, r6, lsl #14
    f17c:	80051800 	andhi	r1, r5, r0, lsl #16
    f180:	0000040c 	andeq	r0, r0, ip, lsl #8
    f184:	00053607 	andeq	r3, r5, r7, lsl #12
    f188:	20220800 	eorcs	r0, r2, r0, lsl #16
    f18c:	02000001 	andeq	r0, r0, #1
    f190:	47070023 	strmi	r0, [r7, -r3, lsr #32]
    f194:	08000004 	stmdaeq	r0, {r2}
    f198:	00005323 	andeq	r5, r0, r3, lsr #6
    f19c:	10230200 	eorne	r0, r3, r0, lsl #4
    f1a0:	001b3f07 	andseq	r3, fp, r7, lsl #30
    f1a4:	8b240800 	blhi	9111ac <MEM_SIZE+0x1111ac>
    f1a8:	02000004 	andeq	r0, r0, #4
    f1ac:	08001423 	stmdaeq	r0, {r0, r1, r5, sl, ip}
    f1b0:	0003d504 	andeq	sp, r3, r4, lsl #10
    f1b4:	099f0400 	ldmibeq	pc, {sl}
    f1b8:	89050000 	stmdbhi	r5, {}
    f1bc:	0000012b 	andeq	r0, r0, fp, lsr #2
    f1c0:	04230408 	strteq	r0, [r3], #-1032	; 0x408
    f1c4:	010d0000 	tsteq	sp, r0
    f1c8:	0000042f 	andeq	r0, r0, pc, lsr #8
    f1cc:	0002c00e 	andeq	ip, r2, lr
    f1d0:	61060000 	tstvs	r6, r0
    f1d4:	0c00000b 	stceq	0, cr0, [r0], {11}
    f1d8:	04662107 	strbteq	r2, [r6], #-263	; 0x107
    f1dc:	11070000 	tstne	r7, r0
    f1e0:	07000003 	streq	r0, [r0, -r3]
    f1e4:	00046623 	andeq	r6, r4, r3, lsr #12
    f1e8:	00230200 	eoreq	r0, r3, r0, lsl #4
    f1ec:	0005dc07 	andeq	sp, r5, r7, lsl #24
    f1f0:	6c240700 	stcvs	7, cr0, [r4]
    f1f4:	02000004 	andeq	r0, r0, #4
    f1f8:	30070423 	andcc	r0, r7, r3, lsr #8
    f1fc:	07000016 	smladeq	r0, r6, r0, r0
    f200:	00009025 	andeq	r9, r0, r5, lsr #32
    f204:	08230200 	stmdaeq	r3!, {r9}
    f208:	2f040800 	svccs	0x00040800
    f20c:	0f000004 	svceq	0x00000004
    f210:	0b610404 	bleq	1850228 <MEM_SIZE+0x1050228>
    f214:	27070000 	strcs	r0, [r7, -r0]
    f218:	0000042f 	andeq	r0, r0, pc, lsr #8
    f21c:	046e0408 	strbteq	r0, [lr], #-1032	; 0x408
    f220:	010d0000 	tsteq	sp, r0
    f224:	0000048b 	andeq	r0, r0, fp, lsl #9
    f228:	00040c0e 	andeq	r0, r4, lr, lsl #24
    f22c:	04080000 	streq	r0, [r8]
    f230:	0000047f 	andeq	r0, r0, pc, ror r4
    f234:	04120408 	ldreq	r0, [r2], #-1032	; 0x408
    f238:	58060000 	stmdapl	r6, {}
    f23c:	2c000023 	stccs	0, cr0, [r0], {35}	; 0x23
    f240:	053e1f09 	ldreq	r1, [lr, #-3849]!	; 0xf09
    f244:	d0070000 	andle	r0, r7, r0
    f248:	09000022 	stmdbeq	r0, {r1, r5}
    f24c:	0000ca21 	andeq	ip, r0, r1, lsr #20
    f250:	00230200 	eoreq	r0, r3, r0, lsl #4
    f254:	00235007 	eoreq	r5, r3, r7
    f258:	46220900 	strtmi	r0, [r2], -r0, lsl #18
    f25c:	02000003 	andeq	r0, r0, #3
    f260:	e0070823 	and	r0, r7, r3, lsr #16
    f264:	09000008 	stmdbeq	r0, {r3}
    f268:	00011a24 	andeq	r1, r1, r4, lsr #20
    f26c:	0c230200 	sfmeq	f0, 4, [r3]	; (stceq 2, cr0, [r3])
    f270:	0023ae07 	eoreq	sl, r3, r7, lsl #28
    f274:	1d250900 	stcne	9, cr0, [r5]
    f278:	02000004 	andeq	r0, r0, #4
    f27c:	13071023 	movwne	r1, #28707	; 0x7023
    f280:	0900000c 	stmdbeq	r0, {r2, r3}
    f284:	00008527 	andeq	r8, r0, r7, lsr #10
    f288:	14230200 	strtne	r0, [r3], #-512	; 0x200
    f28c:	0007f807 	andeq	pc, r7, r7, lsl #16
    f290:	85280900 	strhi	r0, [r8, #-2304]!	; 0x900
    f294:	02000000 	andeq	r0, r0, #0
    f298:	73071823 	movwvc	r1, #30755	; 0x7823
    f29c:	09000023 	stmdbeq	r0, {r0, r1, r5}
    f2a0:	00008529 	andeq	r8, r0, r9, lsr #10
    f2a4:	1c230200 	sfmne	f0, 4, [r3]	; (stcne 2, cr0, [r3])
    f2a8:	00239d07 	eoreq	r9, r3, r7, lsl #26
    f2ac:	852a0900 	strhi	r0, [sl, #-2304]!	; 0x900
    f2b0:	02000000 	andeq	r0, r0, #0
    f2b4:	e9072023 	stmdb	r7, {r0, r1, r5, sp}
    f2b8:	09000022 	stmdbeq	r0, {r1, r5}
    f2bc:	0002c02b 	andeq	ip, r2, fp, lsr #32
    f2c0:	24230200 	strtcs	r0, [r3], #-512	; 0x200
    f2c4:	00227107 	eoreq	r7, r2, r7, lsl #2
    f2c8:	3a2c0900 	bcc	b116d0 <MEM_SIZE+0x3116d0>
    f2cc:	02000000 	andeq	r0, r0, #0
    f2d0:	27072823 	strcs	r2, [r7, -r3, lsr #16]
    f2d4:	09000004 	stmdbeq	r0, {r2}
    f2d8:	00003a2d 	andeq	r3, r0, sp, lsr #20
    f2dc:	29230200 	stmdbcs	r3!, {r9}
    f2e0:	23580400 	cmpcs	r8, #0
    f2e4:	2f090000 	svccs	0x00090000
    f2e8:	00000497 	muleq	r0, r7, r4
    f2ec:	24a00110 	strtcs	r0, [r0], #272	; 0x110
    f2f0:	2c010000 	stccs	0, cr0, [r1], {0}
    f2f4:	30007654 	andcc	r7, r0, r4, asr r6
    f2f8:	300076f4 	strdcc	r7, [r0], -r4
    f2fc:	00004e53 	andeq	r4, r0, r3, asr lr
    f300:	00244411 	eoreq	r4, r4, r1, lsl r4
    f304:	011f0100 	tsteq	pc, r0, lsl #2
    f308:	300076f4 	strdcc	r7, [r0], -r4
    f30c:	3000770c 	andcc	r7, r0, ip, lsl #14
    f310:	00004e7e 	andeq	r4, r0, lr, ror lr
    f314:	00000585 	andeq	r0, r0, r5, lsl #11
    f318:	00243112 	eoreq	r3, r4, r2, lsl r1
    f31c:	6c1f0100 	ldfvss	f0, [pc], {0}
    f320:	9d000004 	stcls	0, cr0, [r0, #-16]
    f324:	0000004e 	andeq	r0, r0, lr, asr #32
    f328:	0024ab11 	eoreq	sl, r4, r1, lsl fp
    f32c:	010e0100 	tsteq	lr, r0, lsl #2
    f330:	3000770c 	andcc	r7, r0, ip, lsl #14
    f334:	30007798 	mulcc	r0, r8, r7
    f338:	00004eb0 	undefined instruction 0x00004eb0
    f33c:	000005ad 	andeq	r0, r0, sp, lsr #11
    f340:	000f8d12 	andeq	r8, pc, r2, lsl sp
    f344:	6c0e0100 	stfvss	f0, [lr], {0}
    f348:	cf000004 	svcgt	0x00000004
    f34c:	0000004e 	andeq	r0, r0, lr, asr #32
    f350:	0023f013 	eoreq	pc, r3, r3, lsl r0
    f354:	12060100 	andne	r0, r6, #0
    f358:	05000004 	streq	r0, [r0, #-4]
    f35c:	00f17c03 	rscseq	r7, r1, r3, lsl #24
    f360:	007a0a30 	rsbseq	r0, sl, r0, lsr sl
    f364:	05cf0000 	strbeq	r0, [pc, #0]	; f36c <DISABLE_IRQ+0xf2ec>
    f368:	d6140000 	ldrle	r0, [r4], -r0
    f36c:	ff000002 	undefined instruction 0xff000002
    f370:	fe130003 	cdp2	0, 1, cr0, cr3, cr3, {0}
    f374:	01000023 	tsteq	r0, r3, lsr #32
    f378:	0005be08 	andeq	fp, r5, r8, lsl #28
    f37c:	e8030500 	stmda	r3, {r8, sl}
    f380:	153000f1 	ldrne	r0, [r0, #-241]!	; 0xf1
    f384:	00316d74 	eorseq	r6, r1, r4, ror sp
    f388:	053e0a01 	ldreq	r0, [lr, #-2561]!	; 0xa01
    f38c:	03050000 	movweq	r0, #20480	; 0x5000
    f390:	3000f150 	andcc	pc, r0, r0, asr r1
    f394:	00044713 	andeq	r4, r4, r3, lsl r7
    f398:	650c0100 	strvs	r0, [ip, #-256]	; 0x100
    f39c:	05000000 	streq	r0, [r0]
    f3a0:	0101e803 	tsteq	r1, r3, lsl #16
    f3a4:	00ac1630 	adceq	r1, ip, r0, lsr r6
    f3a8:	2a010000 	bcs	4f3b0 <DISABLE_IRQ+0x4f330>
    f3ac:	00000065 	andeq	r0, r0, r5, rrx
    f3b0:	50000101 	andpl	r0, r0, r1, lsl #2
    f3b4:	02000007 	andeq	r0, r0, #7
    f3b8:	002e1d00 	eoreq	r1, lr, r0, lsl #26
    f3bc:	4d010400 	cfstrsmi	mvf0, [r1]
    f3c0:	01000000 	tsteq	r0, r0
    f3c4:	000024d7 	ldrdeq	r2, [r0], -r7
    f3c8:	00000063 	andeq	r0, r0, r3, rrx
    f3cc:	30007798 	mulcc	r0, r8, r7
    f3d0:	300078ac 	andcc	r7, r0, ip, lsr #17
    f3d4:	00002e3a 	andeq	r2, r0, sl, lsr lr
    f3d8:	00056402 	andeq	r6, r5, r2, lsl #8
    f3dc:	03210200 	teqeq	r1, #0
    f3e0:	00a00601 	adceq	r0, r0, r1, lsl #12
    f3e4:	01030000 	tsteq	r3, r0
    f3e8:	00009e08 	andeq	r9, r0, r8, lsl #28
    f3ec:	04f70400 	ldrbteq	r0, [r7], #1024	; 0x400
    f3f0:	24020000 	strcs	r0, [r2]
    f3f4:	00000033 	andeq	r0, r0, r3, lsr r0
    f3f8:	8b070203 	blhi	1cfc0c <DISABLE_IRQ+0x1cfb8c>
    f3fc:	03000000 	movweq	r0, #0
    f400:	00590502 	subseq	r0, r9, r2, lsl #10
    f404:	38040000 	stmdacc	r4, {}
    f408:	02000003 	andeq	r0, r0, #3
    f40c:	00005e28 	andeq	r5, r0, r8, lsr #28
    f410:	07040300 	streq	r0, [r4, -r0, lsl #6]
    f414:	00000037 	andeq	r0, r0, r7, lsr r0
    f418:	69050405 	stmdbvs	r5, {r0, r2, sl}
    f41c:	0300746e 	movweq	r7, #1134	; 0x46e
    f420:	00000508 	andeq	r0, r0, r8, lsl #10
    f424:	08030000 	stmdaeq	r3, {}
    f428:	00002d07 	andeq	r2, r0, r7, lsl #26
    f42c:	039f0400 	orrseq	r0, pc, #0
    f430:	2d020000 	stccs	0, cr0, [r2]
    f434:	0000005e 	andeq	r0, r0, lr, asr r0
    f438:	000a2704 	andeq	r2, sl, r4, lsl #14
    f43c:	532a0300 	teqpl	sl, #0
    f440:	04000000 	streq	r0, [r0]
    f444:	00000829 	andeq	r0, r0, r9, lsr #16
    f448:	00532c03 	subseq	r2, r3, r3, lsl #24
    f44c:	04060000 	streq	r0, [r6]
    f450:	0240430a 	subeq	r4, r0, #671088640	; 0x28000000
    f454:	b5070000 	strlt	r0, [r7]
    f458:	0000000b 	andeq	r0, r0, fp
    f45c:	000b6e07 	andeq	r6, fp, r7, lsl #28
    f460:	aa070100 	bge	1cf868 <DISABLE_IRQ+0x1cf7e8>
    f464:	02000003 	andeq	r0, r0, #3
    f468:	00092107 	andeq	r2, r9, r7, lsl #2
    f46c:	35070300 	strcc	r0, [r7, #-768]	; 0x300
    f470:	04000006 	streq	r0, [r0], #-6
    f474:	000a3507 	andeq	r3, sl, r7, lsl #10
    f478:	d4070500 	strle	r0, [r7], #-1280	; 0x500
    f47c:	0600000a 	streq	r0, [r0], -sl
    f480:	0002ac07 	andeq	sl, r2, r7, lsl #24
    f484:	e3070700 	movw	r0, #30464	; 0x7700
    f488:	08000006 	stmdaeq	r0, {r1, r2}
    f48c:	0001ee07 	andeq	lr, r1, r7, lsl #28
    f490:	cd070900 	stcgt	9, cr0, [r7]
    f494:	0a000008 	beq	f4bc <DISABLE_IRQ+0xf43c>
    f498:	000ba107 	andeq	sl, fp, r7, lsl #2
    f49c:	80070b00 	andhi	r0, r7, r0, lsl #22
    f4a0:	0c000004 	stceq	0, cr0, [r0], {4}
    f4a4:	0008bc07 	andeq	fp, r8, r7, lsl #24
    f4a8:	05070d00 	streq	r0, [r7, #-3328]	; 0xd00
    f4ac:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
    f4b0:	0006d007 	andeq	sp, r6, r7
    f4b4:	40070f00 	andmi	r0, r7, r0, lsl #30
    f4b8:	10000003 	andne	r0, r0, r3
    f4bc:	00096a07 	andeq	r6, r9, r7, lsl #20
    f4c0:	39071100 	stmdbcc	r7, {r8, ip}
    f4c4:	1200000b 	andne	r0, r0, #11
    f4c8:	00060e07 	andeq	r0, r6, r7, lsl #28
    f4cc:	be071300 	cdplt	3, 0, cr1, cr7, cr0, {0}
    f4d0:	14000002 	strne	r0, [r0], #-2
    f4d4:	00069007 	andeq	r9, r6, r7
    f4d8:	e5071500 	str	r1, [r7, #-1280]	; 0x500
    f4dc:	16000008 	strne	r0, [r0], -r8
    f4e0:	0002d007 	andeq	sp, r2, r7
    f4e4:	0a071700 	beq	1d50ec <DISABLE_IRQ+0x1d506c>
    f4e8:	18000009 	stmdane	r0, {r0, r3}
    f4ec:	00021507 	andeq	r1, r2, r7, lsl #10
    f4f0:	76071900 	strvc	r1, [r7], -r0, lsl #18
    f4f4:	1a000007 	bne	f518 <DISABLE_IRQ+0xf498>
    f4f8:	0002f007 	andeq	pc, r2, r7
    f4fc:	c1071b00 	tstgt	r7, r0, lsl #22
    f500:	1c00000b 	stcne	0, cr0, [r0], {11}
    f504:	00040507 	andeq	r0, r4, r7, lsl #10
    f508:	10071d00 	andne	r1, r7, r0, lsl #26
    f50c:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
    f510:	00093207 	andeq	r3, r9, r7, lsl #4
    f514:	67071f00 	strvs	r1, [r7, -r0, lsl #30]
    f518:	20000002 	andcs	r0, r0, r2
    f51c:	0005b107 	andeq	fp, r5, r7, lsl #2
    f520:	44072100 	strmi	r2, [r7], #-256	; 0x100
    f524:	22000006 	andcs	r0, r0, #6
    f528:	0007ff07 	andeq	pc, r7, r7, lsl #30
    f52c:	ba072300 	blt	1d8134 <DISABLE_IRQ+0x1d80b4>
    f530:	24000003 	strcs	r0, [r0], #-3
    f534:	00089907 	andeq	r9, r8, r7, lsl #18
    f538:	4b072500 	blmi	1d8940 <DISABLE_IRQ+0x1d88c0>
    f53c:	2600000b 	strcs	r0, [r0], -fp
    f540:	00088307 	andeq	r8, r8, r7, lsl #6
    f544:	3e072700 	cdpcc	7, 0, cr2, cr7, cr0, {0}
    f548:	28000002 	stmdacs	r0, {r1}
    f54c:	0009b707 	andeq	fp, r9, r7, lsl #14
    f550:	e5072900 	str	r2, [r7, #-2304]	; 0x900
    f554:	2a00000a 	bcs	f584 <DISABLE_IRQ+0xf504>
    f558:	000a8707 	andeq	r8, sl, r7, lsl #14
    f55c:	48072b00 	stmdami	r7, {r8, r9, fp, sp}
    f560:	2c000009 	stccs	0, cr0, [r0], {9}
    f564:	0009f507 	andeq	pc, r9, r7, lsl #10
    f568:	c7072d00 	strgt	r2, [r7, -r0, lsl #26]
    f56c:	2e000009 	cdpcs	0, 0, cr0, cr0, cr9, {0}
    f570:	0003cf07 	andeq	ip, r3, r7, lsl #30
    f574:	a7072f00 	strge	r2, [r7, -r0, lsl #30]
    f578:	30000006 	andcc	r0, r0, r6
    f57c:	00041307 	andeq	r1, r4, r7, lsl #6
    f580:	89073100 	stmdbhi	r7, {r8, ip, sp}
    f584:	32000009 	andcc	r0, r0, #9
    f588:	00035207 	andeq	r5, r3, r7, lsl #4
    f58c:	fd073300 	stc2	3, cr3, [r7]
    f590:	34000005 	strcc	r0, [r0], #-5
    f594:	000bd507 	andeq	sp, fp, r7, lsl #10
    f598:	e1073500 	tst	r7, r0, lsl #10
    f59c:	36000004 	strcc	r0, [r0], -r4
    f5a0:	0007a807 	andeq	sl, r7, r7, lsl #16
    f5a4:	92073700 	andls	r3, r7, #0
    f5a8:	38000007 	stmdacc	r0, {r0, r1, r2}
    f5ac:	00031607 	andeq	r1, r3, r7, lsl #12
    f5b0:	f3073900 	vmls.i8	d3, d7, d0
    f5b4:	3a000006 	bcc	f5d4 <DISABLE_IRQ+0xf554>
    f5b8:	0003e207 	andeq	lr, r3, r7, lsl #4
    f5bc:	bc073b00 	stclt	11, cr3, [r7], {0}
    f5c0:	3c000006 	stccc	0, cr0, [r0], {6}
    f5c4:	00050f07 	andeq	r0, r5, r7, lsl #30
    f5c8:	6d073d00 	stcvs	13, cr3, [r7]
    f5cc:	3e000005 	cdpcc	0, 0, cr0, cr0, cr5, {0}
    f5d0:	0004cb07 	andeq	ip, r4, r7, lsl #22
    f5d4:	6e073f00 	cdpvs	15, 0, cr3, cr7, cr0, {0}
    f5d8:	c0000003 	andgt	r0, r0, r3
    f5dc:	058b0700 	streq	r0, [fp, #1792]	; 0x700
    f5e0:	00c10000 	sbceq	r0, r1, r0
    f5e4:	00083707 	andeq	r3, r8, r7, lsl #14
    f5e8:	0700c200 	streq	ip, [r0, -r0, lsl #4]
    f5ec:	00000674 	andeq	r0, r0, r4, ror r6
    f5f0:	080000c3 	stmdaeq	r0, {r0, r1, r6, r7}
    f5f4:	00000c09 	andeq	r0, r0, r9, lsl #24
    f5f8:	69230408 	stmdbvs	r3!, {r3, sl}
    f5fc:	09000002 	stmdbeq	r0, {r1}
    f600:	00000311 	andeq	r0, r0, r1, lsl r3
    f604:	02692404 	rsbeq	r2, r9, #67108864	; 0x4000000
    f608:	23020000 	movwcs	r0, #8192	; 0x2000
    f60c:	02810900 	addeq	r0, r1, #0
    f610:	25040000 	strcs	r0, [r4]
    f614:	00000269 	andeq	r0, r0, r9, ror #4
    f618:	00042302 	andeq	r2, r4, r2, lsl #6
    f61c:	0240040a 	subeq	r0, r0, #167772160	; 0xa000000
    f620:	09040000 	stmdbeq	r4, {}
    f624:	0400000c 	streq	r0, [r0], #-12
    f628:	00024026 	andeq	r4, r2, r6, lsr #32
    f62c:	065c0800 	ldrbeq	r0, [ip], -r0, lsl #16
    f630:	05100000 	ldreq	r0, [r0]
    f634:	0002bf2f 	andeq	fp, r2, pc, lsr #30
    f638:	0ac90900 	beq	ff251a40 <rEINTPEND+0xa9251998>
    f63c:	31050000 	tstcc	r5, r0
    f640:	0000026f 	andeq	r0, r0, pc, ror #4
    f644:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    f648:	000008e0 	andeq	r0, r0, r0, ror #17
    f64c:	02bf3205 	adcseq	r3, pc, #1342177280	; 0x50000000
    f650:	23020000 	movwcs	r0, #8192	; 0x2000
    f654:	09000908 	stmdbeq	r0, {r3, r8, fp}
    f658:	33050000 	movwcc	r0, #20480	; 0x5000
    f65c:	0000003a 	andeq	r0, r0, sl, lsr r0
    f660:	090c2302 	stmdbeq	ip, {r1, r8, r9, sp}
    f664:	00000427 	andeq	r0, r0, r7, lsr #8
    f668:	003a3405 	eorseq	r3, sl, r5, lsl #8
    f66c:	23020000 	movwcs	r0, #8192	; 0x2000
    f670:	040a000d 	streq	r0, [sl], #-13
    f674:	0000003a 	andeq	r0, r0, sl, lsr r0
    f678:	00065c04 	andeq	r5, r6, r4, lsl #24
    f67c:	7a360500 	bvc	d90a84 <MEM_SIZE+0x590a84>
    f680:	08000002 	stmdaeq	r0, {r1}
    f684:	0000099f 	muleq	r0, pc, r9
    f688:	653a056c 	ldrvs	r0, [sl, #-1388]!	; 0x56c
    f68c:	09000004 	stmdbeq	r0, {r2}
    f690:	00001481 	andeq	r1, r0, r1, lsl #9
    f694:	04653b05 	strbteq	r3, [r5], #-2821	; 0xb05
    f698:	23020000 	movwcs	r0, #8192	; 0x2000
    f69c:	044d0900 	strbeq	r0, [sp], #-2304	; 0x900
    f6a0:	41050000 	tstmi	r5, r0
    f6a4:	0000026f 	andeq	r0, r0, pc, ror #4
    f6a8:	09042302 	stmdbeq	r4, {r1, r8, r9, sp}
    f6ac:	00000552 	andeq	r0, r0, r2, asr r5
    f6b0:	046b4505 	strbteq	r4, [fp], #-1285	; 0x505
    f6b4:	23020000 	movwcs	r0, #8192	; 0x2000
    f6b8:	1aef090c 	bne	ffbd1af0 <rEINTPEND+0xa9bd1a48>
    f6bc:	4b050000 	blmi	14f6c4 <DISABLE_IRQ+0x14f644>
    f6c0:	00000053 	andeq	r0, r0, r3, asr r0
    f6c4:	09102302 	ldmdbeq	r0, {r1, r8, r9, sp}
    f6c8:	00000878 	andeq	r0, r0, r8, ror r8
    f6cc:	00534c05 	subseq	r4, r3, r5, lsl #24
    f6d0:	23020000 	movwcs	r0, #8192	; 0x2000
    f6d4:	1d350914 	ldcne	9, cr0, [r5, #-80]!	; 0xffffffb0
    f6d8:	4d050000 	stcmi	0, cr0, [r5]
    f6dc:	0000003a 	andeq	r0, r0, sl, lsr r0
    f6e0:	09182302 	ldmdbeq	r8, {r1, r8, r9, sp}
    f6e4:	00001e5a 	andeq	r1, r0, sl, asr lr
    f6e8:	003a5105 	eorseq	r5, sl, r5, lsl #2
    f6ec:	23020000 	movwcs	r0, #8192	; 0x2000
    f6f0:	03640919 	cmneq	r4, #409600	; 0x64000
    f6f4:	53050000 	movwpl	r0, #20480	; 0x5000
    f6f8:	0000003a 	andeq	r0, r0, sl, lsr r0
    f6fc:	091a2302 	ldmdbeq	sl, {r1, r8, r9, sp}
    f700:	0000043f 	andeq	r0, r0, pc, lsr r4
    f704:	003a5605 	eorseq	r5, sl, r5, lsl #12
    f708:	23020000 	movwcs	r0, #8192	; 0x2000
    f70c:	0bad091b 	bleq	feb51b80 <rEINTPEND+0xa8b51ad8>
    f710:	5a050000 	bpl	14f718 <DISABLE_IRQ+0x14f698>
    f714:	000004df 	ldrdeq	r0, [r0], -pc
    f718:	091c2302 	ldmdbeq	ip, {r1, r8, r9, sp}
    f71c:	00000bf8 	strdeq	r0, [r0], -r8
    f720:	026f5f05 	rsbeq	r5, pc, #20
    f724:	23020000 	movwcs	r0, #8192	; 0x2000
    f728:	0b030920 	bleq	d1bb0 <DISABLE_IRQ+0xd1b30>
    f72c:	63050000 	movwvs	r0, #20480	; 0x5000
    f730:	00000053 	andeq	r0, r0, r3, asr r0
    f734:	09282302 	stmdbeq	r8!, {r1, r8, r9, sp}
    f738:	00000625 	andeq	r0, r0, r5, lsr #12
    f73c:	04e56505 	strbteq	r6, [r5], #1285	; 0x505
    f740:	23020000 	movwcs	r0, #8192	; 0x2000
    f744:	086e092c 	stmdaeq	lr!, {r2, r3, r5, r8, fp}^
    f748:	66050000 	strvs	r0, [r5], -r0
    f74c:	0000026f 	andeq	r0, r0, pc, ror #4
    f750:	09302302 	ldmdbeq	r0!, {r1, r8, r9, sp}
    f754:	00000c0e 	andeq	r0, r0, lr, lsl #24
    f758:	00856805 	addeq	r6, r5, r5, lsl #16
    f75c:	23020000 	movwcs	r0, #8192	; 0x2000
    f760:	07f30938 	undefined instruction 0x07f30938
    f764:	69050000 	stmdbvs	r5, {}
    f768:	00000085 	andeq	r0, r0, r5, lsl #1
    f76c:	093c2302 	ldmdbeq	ip!, {r1, r8, r9, sp}
    f770:	000005a7 	andeq	r0, r0, r7, lsr #11
    f774:	04eb6b05 	strbteq	r6, [fp], #2821	; 0xb05
    f778:	23020000 	movwcs	r0, #8192	; 0x2000
    f77c:	736d0b40 	cmnvc	sp, #65536	; 0x10000
    f780:	6d050067 	stcvs	0, cr0, [r5, #-412]	; 0xfffffe64
    f784:	00000465 	andeq	r0, r0, r5, ror #8
    f788:	09442302 	stmdbeq	r4, {r1, r8, r9, sp}^
    f78c:	00001630 	andeq	r1, r0, r0, lsr r6
    f790:	00907005 	addseq	r7, r0, r5
    f794:	23020000 	movwcs	r0, #8192	; 0x2000
    f798:	08db0948 	ldmeq	fp, {r3, r6, r8, fp}^
    f79c:	73050000 	movwvc	r0, #20480	; 0x5000
    f7a0:	000002bf 	undefined instruction 0x000002bf
    f7a4:	094c2302 	stmdbeq	ip, {r1, r8, r9, sp}^
    f7a8:	000009ac 	andeq	r0, r0, ip, lsr #19
    f7ac:	003a7505 	eorseq	r7, sl, r5, lsl #10
    f7b0:	23020000 	movwcs	r0, #8192	; 0x2000
    f7b4:	07e60950 	ubfxeq	r0, r0, #18, #7
    f7b8:	76050000 	strvc	r0, [r5], -r0
    f7bc:	0000003a 	andeq	r0, r0, sl, lsr r0
    f7c0:	09512302 	ldmdbeq	r1, {r1, r8, r9, sp}^
    f7c4:	0000053d 	andeq	r0, r0, sp, lsr r5
    f7c8:	04f17905 	ldrbteq	r7, [r1], #2309	; 0x905
    f7cc:	23020000 	movwcs	r0, #8192	; 0x2000
    f7d0:	0ab50954 	beq	fed51d28 <rEINTPEND+0xa8d51c80>
    f7d4:	7c050000 	stcvc	0, cr0, [r5], {0}
    f7d8:	00000574 	andeq	r0, r0, r4, ror r5
    f7dc:	09582302 	ldmdbeq	r8, {r1, r8, r9, sp}^
    f7e0:	0000022b 	andeq	r0, r0, fp, lsr #4
    f7e4:	05b18005 	ldreq	r8, [r1, #5]!
    f7e8:	23020000 	movwcs	r0, #8192	; 0x2000
    f7ec:	04ad095c 	strteq	r0, [sp], #2396	; 0x95c
    f7f0:	84050000 	strhi	r0, [r5]
    f7f4:	0000003a 	andeq	r0, r0, sl, lsr r0
    f7f8:	09602302 	stmdbeq	r0!, {r1, r8, r9, sp}^
    f7fc:	00000255 	andeq	r0, r0, r5, asr r2
    f800:	00538505 	subseq	r8, r3, r5, lsl #10
    f804:	23020000 	movwcs	r0, #8192	; 0x2000
    f808:	075a0964 	ldrbeq	r0, [sl, -r4, ror #18]
    f80c:	86050000 	strhi	r0, [r5], -r0
    f810:	00000465 	andeq	r0, r0, r5, ror #8
    f814:	00682302 	rsbeq	r2, r8, r2, lsl #6
    f818:	0025040a 	eoreq	r0, r5, sl, lsl #8
    f81c:	650c0000 	strvs	r0, [ip]
    f820:	7b000004 	blvc	f838 <DISABLE_IRQ+0xf7b8>
    f824:	0d000004 	stceq	0, cr0, [r0, #-16]
    f828:	0000047b 	andeq	r0, r0, fp, ror r4
    f82c:	040e0000 	streq	r0, [lr]
    f830:	0b2f0807 	bleq	bd1854 <MEM_SIZE+0x3d1854>
    f834:	051c0000 	ldreq	r0, [ip]
    f838:	0004df5a 	andeq	sp, r4, sl, asr pc
    f83c:	05360900 	ldreq	r0, [r6, #-2304]!	; 0x900
    f840:	27060000 	strcs	r0, [r6, -r0]
    f844:	000002c5 	andeq	r0, r0, r5, asr #5
    f848:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    f84c:	00000867 	andeq	r0, r0, r7, ror #16
    f850:	06242a06 	strteq	r2, [r4], -r6, lsl #20
    f854:	23020000 	movwcs	r0, #8192	; 0x2000
    f858:	0bad0910 	bleq	feb51ca0 <rEINTPEND+0xa8b51bf8>
    f85c:	2c060000 	stccs	0, cr0, [r6], {0}
    f860:	000004df 	ldrdeq	r0, [r0], -pc
    f864:	09142302 	ldmdbeq	r4, {r1, r8, r9, sp}
    f868:	000005f6 	strdeq	r0, [r0], -r6
    f86c:	003a2e06 	eorseq	r2, sl, r6, lsl #28
    f870:	23020000 	movwcs	r0, #8192	; 0x2000
    f874:	04730918 	ldrbteq	r0, [r3], #-2328	; 0x918
    f878:	2f060000 	svccs	0x00060000
    f87c:	0000003a 	andeq	r0, r0, sl, lsr r0
    f880:	09192302 	ldmdbeq	r9, {r1, r8, r9, sp}
    f884:	0000048e 	andeq	r0, r0, lr, lsl #9
    f888:	003a3006 	eorseq	r3, sl, r6
    f88c:	23020000 	movwcs	r0, #8192	; 0x2000
    f890:	040a001a 	streq	r0, [sl], #-26
    f894:	0000047e 	andeq	r0, r0, lr, ror r4
    f898:	007a040a 	rsbseq	r0, sl, sl, lsl #8
    f89c:	040a0000 	streq	r0, [sl]
    f8a0:	0000026f 	andeq	r0, r0, pc, ror #4
    f8a4:	02c5040a 	sbceq	r0, r5, #167772160	; 0xa000000
    f8a8:	4b080000 	blmi	20f8b0 <DISABLE_IRQ+0x20f830>
    f8ac:	2c000007 	stccs	0, cr0, [r0], {7}
    f8b0:	05747c05 	ldrbeq	r7, [r4, #-3077]!	; 0xc05
    f8b4:	36090000 	strcc	r0, [r9], -r0
    f8b8:	07000005 	streq	r0, [r0, -r5]
    f8bc:	0002c52e 	andeq	ip, r2, lr, lsr #10
    f8c0:	00230200 	eoreq	r0, r3, r0, lsl #4
    f8c4:	0007dd09 	andeq	sp, r7, r9, lsl #26
    f8c8:	0c300700 	ldceq	7, cr0, [r0]
    f8cc:	02000006 	andeq	r0, r0, #6
    f8d0:	e4091023 	str	r1, [r9], #-35	; 0x23
    f8d4:	07000005 	streq	r0, [r0, -r5]
    f8d8:	00009031 	andeq	r9, r0, r1, lsr r0
    f8dc:	14230200 	strtne	r0, [r3], #-512	; 0x200
    f8e0:	000b0e09 	andeq	r0, fp, r9, lsl #28
    f8e4:	90320700 	eorsls	r0, r2, r0, lsl #14
    f8e8:	02000000 	andeq	r0, r0, #0
    f8ec:	f0091823 	undefined instruction 0xf0091823
    f8f0:	07000005 	streq	r0, [r0, -r5]
    f8f4:	00060c34 	andeq	r0, r6, r4, lsr ip
    f8f8:	1c230200 	sfmne	f0, 4, [r3]	; (stcne 2, cr0, [r3])
    f8fc:	00014e09 	andeq	r4, r1, r9, lsl #28
    f900:	0c350700 	ldceq	7, cr0, [r5]
    f904:	02000006 	andeq	r0, r0, #6
    f908:	27092023 	strcs	r2, [r9, -r3, lsr #32]
    f90c:	07000005 	streq	r0, [r0, -r5]
    f910:	00009036 	andeq	r9, r0, r6, lsr r0
    f914:	24230200 	strtcs	r0, [r3], #-512	; 0x200
    f918:	00049b09 	andeq	r9, r4, r9, lsl #22
    f91c:	90370700 	eorsls	r0, r7, r0, lsl #14
    f920:	02000000 	andeq	r0, r0, #0
    f924:	0a002823 	beq	199b8 <DISABLE_IRQ+0x19938>
    f928:	0004f704 	andeq	pc, r4, r4, lsl #14
    f92c:	0aa70800 	beq	fe9d1934 <rEINTPEND+0xa89d188c>
    f930:	05180000 	ldreq	r0, [r8]
    f934:	0005b180 	andeq	fp, r5, r0, lsl #3
    f938:	05360900 	ldreq	r0, [r6, #-2304]!	; 0x900
    f93c:	22080000 	andcs	r0, r8, #0
    f940:	000002c5 	andeq	r0, r0, r5, asr #5
    f944:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    f948:	00000447 	andeq	r0, r0, r7, asr #8
    f94c:	00532308 	subseq	r2, r3, r8, lsl #6
    f950:	23020000 	movwcs	r0, #8192	; 0x2000
    f954:	1b3f0910 	blne	fd1d9c <MEM_SIZE+0x7d1d9c>
    f958:	24080000 	strcs	r0, [r8]
    f95c:	0000061e 	andeq	r0, r0, lr, lsl r6
    f960:	00142302 	andseq	r2, r4, r2, lsl #6
    f964:	057a040a 	ldrbeq	r0, [sl, #-1034]!	; 0x40a
    f968:	9f040000 	svcls	0x00040000
    f96c:	05000009 	streq	r0, [r0, #-9]
    f970:	0002d089 	andeq	sp, r2, r9, lsl #1
    f974:	0b610800 	bleq	185197c <MEM_SIZE+0x105197c>
    f978:	070c0000 	streq	r0, [ip, -r0]
    f97c:	0005f921 	andeq	pc, r5, r1, lsr #18
    f980:	03110900 	tsteq	r1, #0
    f984:	23070000 	movwcs	r0, #28672	; 0x7000
    f988:	000005f9 	strdeq	r0, [r0], -r9
    f98c:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    f990:	000005dc 	ldrdeq	r0, [r0], -ip
    f994:	05ff2407 	ldrbeq	r2, [pc, #1031]!	; fda3 <DISABLE_IRQ+0xfd23>
    f998:	23020000 	movwcs	r0, #8192	; 0x2000
    f99c:	16300904 	ldrtne	r0, [r0], -r4, lsl #18
    f9a0:	25070000 	strcs	r0, [r7]
    f9a4:	00000090 	muleq	r0, r0, r0
    f9a8:	00082302 	andeq	r2, r8, r2, lsl #6
    f9ac:	05c2040a 	strbeq	r0, [r2, #1034]	; 0x40a
    f9b0:	040f0000 	streq	r0, [pc], #0	; f9b8 <DISABLE_IRQ+0xf938>
    f9b4:	000b6104 	andeq	r6, fp, r4, lsl #2
    f9b8:	c2270700 	eorgt	r0, r7, #0
    f9bc:	0a000005 	beq	f9d8 <DISABLE_IRQ+0xf958>
    f9c0:	00060104 	andeq	r0, r6, r4, lsl #2
    f9c4:	1e011000 	cdpne	0, 0, cr1, cr1, cr0, {0}
    f9c8:	11000006 	tstne	r0, r6
    f9cc:	000005b1 	undefined instruction 0x000005b1
    f9d0:	12040a00 	andne	r0, r4, #0
    f9d4:	0a000006 	beq	f9f4 <DISABLE_IRQ+0xf974>
    f9d8:	0005b704 	andeq	fp, r5, r4, lsl #14
    f9dc:	020c0800 	andeq	r0, ip, #0
    f9e0:	091c0000 	ldmdbeq	ip, {}
    f9e4:	00066f22 	andeq	r6, r6, r2, lsr #30
    f9e8:	05360900 	ldreq	r0, [r6, #-2304]!	; 0x900
    f9ec:	23090000 	movwcs	r0, #36864	; 0x9000
    f9f0:	000002c5 	andeq	r0, r0, r5, asr #5
    f9f4:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    f9f8:	00000293 	muleq	r0, r3, r2
    f9fc:	00532609 	subseq	r2, r3, r9, lsl #12
    fa00:	23020000 	movwcs	r0, #8192	; 0x2000
    fa04:	04c00910 	strbeq	r0, [r0], #2320	; 0x910
    fa08:	27090000 	strcs	r0, [r9, -r0]
    fa0c:	00000053 	andeq	r0, r0, r3, asr r0
    fa10:	09142302 	ldmdbeq	r4, {r1, r8, r9, sp}
    fa14:	00000a69 	andeq	r0, r0, r9, ror #20
    fa18:	02bf2a09 	adcseq	r2, pc, #36864	; 0x9000
    fa1c:	23020000 	movwcs	r0, #8192	; 0x2000
    fa20:	0c040018 	stceq	0, cr0, [r4], {24}
    fa24:	09000002 	stmdbeq	r0, {r1}
    fa28:	00062a2c 	andeq	r2, r6, ip, lsr #20
    fa2c:	cc011200 	sfmgt	f1, 4, [r1], {0}	; (stcgt 2, cr1, [r1], {0})
    fa30:	01000024 	tsteq	r0, r4, lsr #32
    fa34:	00779828 	rsbseq	r9, r7, r8, lsr #16
    fa38:	00784430 	rsbseq	r4, r8, r0, lsr r4
    fa3c:	004ee230 	subeq	lr, lr, r0, lsr r2
    fa40:	24441300 	strbcs	r1, [r4], #-768	; 0x300
    fa44:	12010000 	andne	r0, r1, #0
    fa48:	00784401 	rsbseq	r4, r8, r1, lsl #8
    fa4c:	0078ac30 	rsbseq	sl, r8, r0, lsr ip
    fa50:	004f0d30 	subeq	r0, pc, r0, lsr sp
    fa54:	0006c400 	andeq	ip, r6, r0, lsl #8
    fa58:	24311400 	ldrtcs	r1, [r1], #-1024	; 0x400
    fa5c:	12010000 	andne	r0, r1, #0
    fa60:	000005ff 	strdeq	r0, [r0], -pc
    fa64:	00004f38 	andeq	r4, r0, r8, lsr pc
    fa68:	0000ed15 	andeq	lr, r0, r5, lsl sp
    fa6c:	bf140100 	svclt	0x00140100
    fa70:	02000002 	andeq	r0, r0, #2
    fa74:	15006c91 	strne	r6, [r0, #-3217]	; 0xc91
    fa78:	000023f0 	strdeq	r2, [r0], -r0
    fa7c:	05b70601 	ldreq	r0, [r7, #1537]!	; 0x601
    fa80:	03050000 	movweq	r0, #20480	; 0x5000
    fa84:	30010608 	andcc	r0, r1, r8, lsl #12
    fa88:	00007a0c 	andeq	r7, r0, ip, lsl #20
    fa8c:	0006e600 	andeq	lr, r6, r0, lsl #12
    fa90:	047b1600 	ldrbteq	r1, [fp], #-1536	; 0x600
    fa94:	03ff0000 	mvnseq	r0, #0
    fa98:	23fe1500 	mvnscs	r1, #0
    fa9c:	08010000 	stmdaeq	r1, {}
    faa0:	000006d5 	ldrdeq	r0, [r0], -r5
    faa4:	06740305 	ldrbteq	r0, [r4], -r5, lsl #6
    faa8:	3a0c3001 	bcc	31bab4 <DISABLE_IRQ+0x31ba34>
    faac:	08000000 	stmdaeq	r0, {}
    fab0:	16000007 	strne	r0, [r0], -r7
    fab4:	0000047b 	andeq	r0, r0, fp, ror r4
    fab8:	150003ff 	strne	r0, [r0, #-1023]	; 0x3ff
    fabc:	00001740 	andeq	r1, r0, r0, asr #14
    fac0:	06f70a01 	ldrbteq	r0, [r7], r1, lsl #20
    fac4:	03050000 	movweq	r0, #20480	; 0x5000
    fac8:	30010208 	andcc	r0, r1, r8, lsl #4
    facc:	0024e417 	eoreq	lr, r4, r7, lsl r4
    fad0:	bf0c0100 	svclt	0x000c0100
    fad4:	15000002 	strne	r0, [r0, #-2]
    fad8:	000024c3 	andeq	r2, r0, r3, asr #9
    fadc:	066f0e01 	strbteq	r0, [pc], -r1, lsl #28
    fae0:	03050000 	movweq	r0, #20480	; 0x5000
    fae4:	300101ec 	andcc	r0, r1, ip, ror #3
    fae8:	00044715 	andeq	r4, r4, r5, lsl r7
    faec:	3a100100 	bcc	40fef4 <DISABLE_IRQ+0x40fe74>
    faf0:	05000000 	streq	r0, [r0]
    faf4:	01167403 	tsteq	r6, r3, lsl #8
    faf8:	00ac1830 	adceq	r1, ip, r0, lsr r8
    fafc:	26010000 	strcs	r0, [r1], -r0
    fb00:	00000065 	andeq	r0, r0, r5, rrx
    fb04:	53000101 	movwpl	r0, #257	; 0x101
    fb08:	02000007 	andeq	r0, r0, #7
    fb0c:	002f4a00 	eoreq	r4, pc, r0, lsl #20
    fb10:	4d010400 	cfstrsmi	mvf0, [r1]
    fb14:	01000000 	tsteq	r0, r0
    fb18:	000024f6 	strdeq	r2, [r0], -r6
    fb1c:	00000063 	andeq	r0, r0, r3, rrx
    fb20:	300078ac 	andcc	r7, r0, ip, lsr #17
    fb24:	30007a10 	andcc	r7, r0, r0, lsl sl
    fb28:	00002f2b 	andeq	r2, r0, fp, lsr #30
    fb2c:	00056402 	andeq	r6, r5, r2, lsl #8
    fb30:	03210200 	teqeq	r1, #0
    fb34:	00a00601 	adceq	r0, r0, r1, lsl #12
    fb38:	01030000 	tsteq	r3, r0
    fb3c:	00009e08 	andeq	r9, r0, r8, lsl #28
    fb40:	04f70400 	ldrbteq	r0, [r7], #1024	; 0x400
    fb44:	24020000 	strcs	r0, [r2]
    fb48:	00000033 	andeq	r0, r0, r3, lsr r0
    fb4c:	8b070203 	blhi	1d0360 <DISABLE_IRQ+0x1d02e0>
    fb50:	03000000 	movweq	r0, #0
    fb54:	00590502 	subseq	r0, r9, r2, lsl #10
    fb58:	38040000 	stmdacc	r4, {}
    fb5c:	02000003 	andeq	r0, r0, #3
    fb60:	00005e28 	andeq	r5, r0, r8, lsr #28
    fb64:	07040300 	streq	r0, [r4, -r0, lsl #6]
    fb68:	00000037 	andeq	r0, r0, r7, lsr r0
    fb6c:	69050405 	stmdbvs	r5, {r0, r2, sl}
    fb70:	0300746e 	movweq	r7, #1134	; 0x46e
    fb74:	00000508 	andeq	r0, r0, r8, lsl #10
    fb78:	08030000 	stmdaeq	r3, {}
    fb7c:	00002d07 	andeq	r2, r0, r7, lsl #26
    fb80:	039f0400 	orrseq	r0, pc, #0
    fb84:	2d020000 	stccs	0, cr0, [r2]
    fb88:	0000005e 	andeq	r0, r0, lr, asr r0
    fb8c:	000a2704 	andeq	r2, sl, r4, lsl #14
    fb90:	532a0300 	teqpl	sl, #0
    fb94:	04000000 	streq	r0, [r0]
    fb98:	00000829 	andeq	r0, r0, r9, lsr #16
    fb9c:	00532c03 	subseq	r2, r3, r3, lsl #24
    fba0:	04060000 	streq	r0, [r6]
    fba4:	0240430a 	subeq	r4, r0, #671088640	; 0x28000000
    fba8:	b5070000 	strlt	r0, [r7]
    fbac:	0000000b 	andeq	r0, r0, fp
    fbb0:	000b6e07 	andeq	r6, fp, r7, lsl #28
    fbb4:	aa070100 	bge	1cffbc <DISABLE_IRQ+0x1cff3c>
    fbb8:	02000003 	andeq	r0, r0, #3
    fbbc:	00092107 	andeq	r2, r9, r7, lsl #2
    fbc0:	35070300 	strcc	r0, [r7, #-768]	; 0x300
    fbc4:	04000006 	streq	r0, [r0], #-6
    fbc8:	000a3507 	andeq	r3, sl, r7, lsl #10
    fbcc:	d4070500 	strle	r0, [r7], #-1280	; 0x500
    fbd0:	0600000a 	streq	r0, [r0], -sl
    fbd4:	0002ac07 	andeq	sl, r2, r7, lsl #24
    fbd8:	e3070700 	movw	r0, #30464	; 0x7700
    fbdc:	08000006 	stmdaeq	r0, {r1, r2}
    fbe0:	0001ee07 	andeq	lr, r1, r7, lsl #28
    fbe4:	cd070900 	stcgt	9, cr0, [r7]
    fbe8:	0a000008 	beq	fc10 <DISABLE_IRQ+0xfb90>
    fbec:	000ba107 	andeq	sl, fp, r7, lsl #2
    fbf0:	80070b00 	andhi	r0, r7, r0, lsl #22
    fbf4:	0c000004 	stceq	0, cr0, [r0], {4}
    fbf8:	0008bc07 	andeq	fp, r8, r7, lsl #24
    fbfc:	05070d00 	streq	r0, [r7, #-3328]	; 0xd00
    fc00:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
    fc04:	0006d007 	andeq	sp, r6, r7
    fc08:	40070f00 	andmi	r0, r7, r0, lsl #30
    fc0c:	10000003 	andne	r0, r0, r3
    fc10:	00096a07 	andeq	r6, r9, r7, lsl #20
    fc14:	39071100 	stmdbcc	r7, {r8, ip}
    fc18:	1200000b 	andne	r0, r0, #11
    fc1c:	00060e07 	andeq	r0, r6, r7, lsl #28
    fc20:	be071300 	cdplt	3, 0, cr1, cr7, cr0, {0}
    fc24:	14000002 	strne	r0, [r0], #-2
    fc28:	00069007 	andeq	r9, r6, r7
    fc2c:	e5071500 	str	r1, [r7, #-1280]	; 0x500
    fc30:	16000008 	strne	r0, [r0], -r8
    fc34:	0002d007 	andeq	sp, r2, r7
    fc38:	0a071700 	beq	1d5840 <DISABLE_IRQ+0x1d57c0>
    fc3c:	18000009 	stmdane	r0, {r0, r3}
    fc40:	00021507 	andeq	r1, r2, r7, lsl #10
    fc44:	76071900 	strvc	r1, [r7], -r0, lsl #18
    fc48:	1a000007 	bne	fc6c <DISABLE_IRQ+0xfbec>
    fc4c:	0002f007 	andeq	pc, r2, r7
    fc50:	c1071b00 	tstgt	r7, r0, lsl #22
    fc54:	1c00000b 	stcne	0, cr0, [r0], {11}
    fc58:	00040507 	andeq	r0, r4, r7, lsl #10
    fc5c:	10071d00 	andne	r1, r7, r0, lsl #26
    fc60:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
    fc64:	00093207 	andeq	r3, r9, r7, lsl #4
    fc68:	67071f00 	strvs	r1, [r7, -r0, lsl #30]
    fc6c:	20000002 	andcs	r0, r0, r2
    fc70:	0005b107 	andeq	fp, r5, r7, lsl #2
    fc74:	44072100 	strmi	r2, [r7], #-256	; 0x100
    fc78:	22000006 	andcs	r0, r0, #6
    fc7c:	0007ff07 	andeq	pc, r7, r7, lsl #30
    fc80:	ba072300 	blt	1d8888 <DISABLE_IRQ+0x1d8808>
    fc84:	24000003 	strcs	r0, [r0], #-3
    fc88:	00089907 	andeq	r9, r8, r7, lsl #18
    fc8c:	4b072500 	blmi	1d9094 <DISABLE_IRQ+0x1d9014>
    fc90:	2600000b 	strcs	r0, [r0], -fp
    fc94:	00088307 	andeq	r8, r8, r7, lsl #6
    fc98:	3e072700 	cdpcc	7, 0, cr2, cr7, cr0, {0}
    fc9c:	28000002 	stmdacs	r0, {r1}
    fca0:	0009b707 	andeq	fp, r9, r7, lsl #14
    fca4:	e5072900 	str	r2, [r7, #-2304]	; 0x900
    fca8:	2a00000a 	bcs	fcd8 <DISABLE_IRQ+0xfc58>
    fcac:	000a8707 	andeq	r8, sl, r7, lsl #14
    fcb0:	48072b00 	stmdami	r7, {r8, r9, fp, sp}
    fcb4:	2c000009 	stccs	0, cr0, [r0], {9}
    fcb8:	0009f507 	andeq	pc, r9, r7, lsl #10
    fcbc:	c7072d00 	strgt	r2, [r7, -r0, lsl #26]
    fcc0:	2e000009 	cdpcs	0, 0, cr0, cr0, cr9, {0}
    fcc4:	0003cf07 	andeq	ip, r3, r7, lsl #30
    fcc8:	a7072f00 	strge	r2, [r7, -r0, lsl #30]
    fccc:	30000006 	andcc	r0, r0, r6
    fcd0:	00041307 	andeq	r1, r4, r7, lsl #6
    fcd4:	89073100 	stmdbhi	r7, {r8, ip, sp}
    fcd8:	32000009 	andcc	r0, r0, #9
    fcdc:	00035207 	andeq	r5, r3, r7, lsl #4
    fce0:	fd073300 	stc2	3, cr3, [r7]
    fce4:	34000005 	strcc	r0, [r0], #-5
    fce8:	000bd507 	andeq	sp, fp, r7, lsl #10
    fcec:	e1073500 	tst	r7, r0, lsl #10
    fcf0:	36000004 	strcc	r0, [r0], -r4
    fcf4:	0007a807 	andeq	sl, r7, r7, lsl #16
    fcf8:	92073700 	andls	r3, r7, #0
    fcfc:	38000007 	stmdacc	r0, {r0, r1, r2}
    fd00:	00031607 	andeq	r1, r3, r7, lsl #12
    fd04:	f3073900 	vmls.i8	d3, d7, d0
    fd08:	3a000006 	bcc	fd28 <DISABLE_IRQ+0xfca8>
    fd0c:	0003e207 	andeq	lr, r3, r7, lsl #4
    fd10:	bc073b00 	stclt	11, cr3, [r7], {0}
    fd14:	3c000006 	stccc	0, cr0, [r0], {6}
    fd18:	00050f07 	andeq	r0, r5, r7, lsl #30
    fd1c:	6d073d00 	stcvs	13, cr3, [r7]
    fd20:	3e000005 	cdpcc	0, 0, cr0, cr0, cr5, {0}
    fd24:	0004cb07 	andeq	ip, r4, r7, lsl #22
    fd28:	6e073f00 	cdpvs	15, 0, cr3, cr7, cr0, {0}
    fd2c:	c0000003 	andgt	r0, r0, r3
    fd30:	058b0700 	streq	r0, [fp, #1792]	; 0x700
    fd34:	00c10000 	sbceq	r0, r1, r0
    fd38:	00083707 	andeq	r3, r8, r7, lsl #14
    fd3c:	0700c200 	streq	ip, [r0, -r0, lsl #4]
    fd40:	00000674 	andeq	r0, r0, r4, ror r6
    fd44:	080000c3 	stmdaeq	r0, {r0, r1, r6, r7}
    fd48:	00000c09 	andeq	r0, r0, r9, lsl #24
    fd4c:	69230408 	stmdbvs	r3!, {r3, sl}
    fd50:	09000002 	stmdbeq	r0, {r1}
    fd54:	00000311 	andeq	r0, r0, r1, lsl r3
    fd58:	02692404 	rsbeq	r2, r9, #67108864	; 0x4000000
    fd5c:	23020000 	movwcs	r0, #8192	; 0x2000
    fd60:	02810900 	addeq	r0, r1, #0
    fd64:	25040000 	strcs	r0, [r4]
    fd68:	00000269 	andeq	r0, r0, r9, ror #4
    fd6c:	00042302 	andeq	r2, r4, r2, lsl #6
    fd70:	0240040a 	subeq	r0, r0, #167772160	; 0xa000000
    fd74:	09040000 	stmdbeq	r4, {}
    fd78:	0400000c 	streq	r0, [r0], #-12
    fd7c:	00024026 	andeq	r4, r2, r6, lsr #32
    fd80:	065c0800 	ldrbeq	r0, [ip], -r0, lsl #16
    fd84:	05100000 	ldreq	r0, [r0]
    fd88:	0002bf2f 	andeq	fp, r2, pc, lsr #30
    fd8c:	0ac90900 	beq	ff252194 <rEINTPEND+0xa92520ec>
    fd90:	31050000 	tstcc	r5, r0
    fd94:	0000026f 	andeq	r0, r0, pc, ror #4
    fd98:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    fd9c:	000008e0 	andeq	r0, r0, r0, ror #17
    fda0:	02bf3205 	adcseq	r3, pc, #1342177280	; 0x50000000
    fda4:	23020000 	movwcs	r0, #8192	; 0x2000
    fda8:	09000908 	stmdbeq	r0, {r3, r8, fp}
    fdac:	33050000 	movwcc	r0, #20480	; 0x5000
    fdb0:	0000003a 	andeq	r0, r0, sl, lsr r0
    fdb4:	090c2302 	stmdbeq	ip, {r1, r8, r9, sp}
    fdb8:	00000427 	andeq	r0, r0, r7, lsr #8
    fdbc:	003a3405 	eorseq	r3, sl, r5, lsl #8
    fdc0:	23020000 	movwcs	r0, #8192	; 0x2000
    fdc4:	040a000d 	streq	r0, [sl], #-13
    fdc8:	0000003a 	andeq	r0, r0, sl, lsr r0
    fdcc:	00065c04 	andeq	r5, r6, r4, lsl #24
    fdd0:	7a360500 	bvc	d911d8 <MEM_SIZE+0x5911d8>
    fdd4:	08000002 	stmdaeq	r0, {r1}
    fdd8:	0000099f 	muleq	r0, pc, r9
    fddc:	653a056c 	ldrvs	r0, [sl, #-1388]!	; 0x56c
    fde0:	09000004 	stmdbeq	r0, {r2}
    fde4:	00001481 	andeq	r1, r0, r1, lsl #9
    fde8:	04653b05 	strbteq	r3, [r5], #-2821	; 0xb05
    fdec:	23020000 	movwcs	r0, #8192	; 0x2000
    fdf0:	044d0900 	strbeq	r0, [sp], #-2304	; 0x900
    fdf4:	41050000 	tstmi	r5, r0
    fdf8:	0000026f 	andeq	r0, r0, pc, ror #4
    fdfc:	09042302 	stmdbeq	r4, {r1, r8, r9, sp}
    fe00:	00000552 	andeq	r0, r0, r2, asr r5
    fe04:	046b4505 	strbteq	r4, [fp], #-1285	; 0x505
    fe08:	23020000 	movwcs	r0, #8192	; 0x2000
    fe0c:	1aef090c 	bne	ffbd2244 <rEINTPEND+0xa9bd219c>
    fe10:	4b050000 	blmi	14fe18 <DISABLE_IRQ+0x14fd98>
    fe14:	00000053 	andeq	r0, r0, r3, asr r0
    fe18:	09102302 	ldmdbeq	r0, {r1, r8, r9, sp}
    fe1c:	00000878 	andeq	r0, r0, r8, ror r8
    fe20:	00534c05 	subseq	r4, r3, r5, lsl #24
    fe24:	23020000 	movwcs	r0, #8192	; 0x2000
    fe28:	1d350914 	ldcne	9, cr0, [r5, #-80]!	; 0xffffffb0
    fe2c:	4d050000 	stcmi	0, cr0, [r5]
    fe30:	0000003a 	andeq	r0, r0, sl, lsr r0
    fe34:	09182302 	ldmdbeq	r8, {r1, r8, r9, sp}
    fe38:	00001e5a 	andeq	r1, r0, sl, asr lr
    fe3c:	003a5105 	eorseq	r5, sl, r5, lsl #2
    fe40:	23020000 	movwcs	r0, #8192	; 0x2000
    fe44:	03640919 	cmneq	r4, #409600	; 0x64000
    fe48:	53050000 	movwpl	r0, #20480	; 0x5000
    fe4c:	0000003a 	andeq	r0, r0, sl, lsr r0
    fe50:	091a2302 	ldmdbeq	sl, {r1, r8, r9, sp}
    fe54:	0000043f 	andeq	r0, r0, pc, lsr r4
    fe58:	003a5605 	eorseq	r5, sl, r5, lsl #12
    fe5c:	23020000 	movwcs	r0, #8192	; 0x2000
    fe60:	0bad091b 	bleq	feb522d4 <rEINTPEND+0xa8b5222c>
    fe64:	5a050000 	bpl	14fe6c <DISABLE_IRQ+0x14fdec>
    fe68:	000004df 	ldrdeq	r0, [r0], -pc
    fe6c:	091c2302 	ldmdbeq	ip, {r1, r8, r9, sp}
    fe70:	00000bf8 	strdeq	r0, [r0], -r8
    fe74:	026f5f05 	rsbeq	r5, pc, #20
    fe78:	23020000 	movwcs	r0, #8192	; 0x2000
    fe7c:	0b030920 	bleq	d2304 <DISABLE_IRQ+0xd2284>
    fe80:	63050000 	movwvs	r0, #20480	; 0x5000
    fe84:	00000053 	andeq	r0, r0, r3, asr r0
    fe88:	09282302 	stmdbeq	r8!, {r1, r8, r9, sp}
    fe8c:	00000625 	andeq	r0, r0, r5, lsr #12
    fe90:	04e56505 	strbteq	r6, [r5], #1285	; 0x505
    fe94:	23020000 	movwcs	r0, #8192	; 0x2000
    fe98:	086e092c 	stmdaeq	lr!, {r2, r3, r5, r8, fp}^
    fe9c:	66050000 	strvs	r0, [r5], -r0
    fea0:	0000026f 	andeq	r0, r0, pc, ror #4
    fea4:	09302302 	ldmdbeq	r0!, {r1, r8, r9, sp}
    fea8:	00000c0e 	andeq	r0, r0, lr, lsl #24
    feac:	00856805 	addeq	r6, r5, r5, lsl #16
    feb0:	23020000 	movwcs	r0, #8192	; 0x2000
    feb4:	07f30938 	undefined instruction 0x07f30938
    feb8:	69050000 	stmdbvs	r5, {}
    febc:	00000085 	andeq	r0, r0, r5, lsl #1
    fec0:	093c2302 	ldmdbeq	ip!, {r1, r8, r9, sp}
    fec4:	000005a7 	andeq	r0, r0, r7, lsr #11
    fec8:	04eb6b05 	strbteq	r6, [fp], #2821	; 0xb05
    fecc:	23020000 	movwcs	r0, #8192	; 0x2000
    fed0:	736d0b40 	cmnvc	sp, #65536	; 0x10000
    fed4:	6d050067 	stcvs	0, cr0, [r5, #-412]	; 0xfffffe64
    fed8:	00000465 	andeq	r0, r0, r5, ror #8
    fedc:	09442302 	stmdbeq	r4, {r1, r8, r9, sp}^
    fee0:	00001630 	andeq	r1, r0, r0, lsr r6
    fee4:	00907005 	addseq	r7, r0, r5
    fee8:	23020000 	movwcs	r0, #8192	; 0x2000
    feec:	08db0948 	ldmeq	fp, {r3, r6, r8, fp}^
    fef0:	73050000 	movwvc	r0, #20480	; 0x5000
    fef4:	000002bf 	undefined instruction 0x000002bf
    fef8:	094c2302 	stmdbeq	ip, {r1, r8, r9, sp}^
    fefc:	000009ac 	andeq	r0, r0, ip, lsr #19
    ff00:	003a7505 	eorseq	r7, sl, r5, lsl #10
    ff04:	23020000 	movwcs	r0, #8192	; 0x2000
    ff08:	07e60950 	ubfxeq	r0, r0, #18, #7
    ff0c:	76050000 	strvc	r0, [r5], -r0
    ff10:	0000003a 	andeq	r0, r0, sl, lsr r0
    ff14:	09512302 	ldmdbeq	r1, {r1, r8, r9, sp}^
    ff18:	0000053d 	andeq	r0, r0, sp, lsr r5
    ff1c:	04f17905 	ldrbteq	r7, [r1], #2309	; 0x905
    ff20:	23020000 	movwcs	r0, #8192	; 0x2000
    ff24:	0ab50954 	beq	fed5247c <rEINTPEND+0xa8d523d4>
    ff28:	7c050000 	stcvc	0, cr0, [r5], {0}
    ff2c:	00000574 	andeq	r0, r0, r4, ror r5
    ff30:	09582302 	ldmdbeq	r8, {r1, r8, r9, sp}^
    ff34:	0000022b 	andeq	r0, r0, fp, lsr #4
    ff38:	05b18005 	ldreq	r8, [r1, #5]!
    ff3c:	23020000 	movwcs	r0, #8192	; 0x2000
    ff40:	04ad095c 	strteq	r0, [sp], #2396	; 0x95c
    ff44:	84050000 	strhi	r0, [r5]
    ff48:	0000003a 	andeq	r0, r0, sl, lsr r0
    ff4c:	09602302 	stmdbeq	r0!, {r1, r8, r9, sp}^
    ff50:	00000255 	andeq	r0, r0, r5, asr r2
    ff54:	00538505 	subseq	r8, r3, r5, lsl #10
    ff58:	23020000 	movwcs	r0, #8192	; 0x2000
    ff5c:	075a0964 	ldrbeq	r0, [sl, -r4, ror #18]
    ff60:	86050000 	strhi	r0, [r5], -r0
    ff64:	00000465 	andeq	r0, r0, r5, ror #8
    ff68:	00682302 	rsbeq	r2, r8, r2, lsl #6
    ff6c:	0025040a 	eoreq	r0, r5, sl, lsl #8
    ff70:	650c0000 	strvs	r0, [ip]
    ff74:	7b000004 	blvc	ff8c <DISABLE_IRQ+0xff0c>
    ff78:	0d000004 	stceq	0, cr0, [r0, #-16]
    ff7c:	0000047b 	andeq	r0, r0, fp, ror r4
    ff80:	040e0000 	streq	r0, [lr]
    ff84:	0b2f0807 	bleq	bd1fa8 <MEM_SIZE+0x3d1fa8>
    ff88:	051c0000 	ldreq	r0, [ip]
    ff8c:	0004df5a 	andeq	sp, r4, sl, asr pc
    ff90:	05360900 	ldreq	r0, [r6, #-2304]!	; 0x900
    ff94:	27060000 	strcs	r0, [r6, -r0]
    ff98:	000002c5 	andeq	r0, r0, r5, asr #5
    ff9c:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
    ffa0:	00000867 	andeq	r0, r0, r7, ror #16
    ffa4:	06242a06 	strteq	r2, [r4], -r6, lsl #20
    ffa8:	23020000 	movwcs	r0, #8192	; 0x2000
    ffac:	0bad0910 	bleq	feb523f4 <rEINTPEND+0xa8b5234c>
    ffb0:	2c060000 	stccs	0, cr0, [r6], {0}
    ffb4:	000004df 	ldrdeq	r0, [r0], -pc
    ffb8:	09142302 	ldmdbeq	r4, {r1, r8, r9, sp}
    ffbc:	000005f6 	strdeq	r0, [r0], -r6
    ffc0:	003a2e06 	eorseq	r2, sl, r6, lsl #28
    ffc4:	23020000 	movwcs	r0, #8192	; 0x2000
    ffc8:	04730918 	ldrbteq	r0, [r3], #-2328	; 0x918
    ffcc:	2f060000 	svccs	0x00060000
    ffd0:	0000003a 	andeq	r0, r0, sl, lsr r0
    ffd4:	09192302 	ldmdbeq	r9, {r1, r8, r9, sp}
    ffd8:	0000048e 	andeq	r0, r0, lr, lsl #9
    ffdc:	003a3006 	eorseq	r3, sl, r6
    ffe0:	23020000 	movwcs	r0, #8192	; 0x2000
    ffe4:	040a001a 	streq	r0, [sl], #-26
    ffe8:	0000047e 	andeq	r0, r0, lr, ror r4
    ffec:	007a040a 	rsbseq	r0, sl, sl, lsl #8
    fff0:	040a0000 	streq	r0, [sl]
    fff4:	0000026f 	andeq	r0, r0, pc, ror #4
    fff8:	02c5040a 	sbceq	r0, r5, #167772160	; 0xa000000
    fffc:	4b080000 	blmi	210004 <DISABLE_IRQ+0x20ff84>
   10000:	2c000007 	stccs	0, cr0, [r0], {7}
   10004:	05747c05 	ldrbeq	r7, [r4, #-3077]!	; 0xc05
   10008:	36090000 	strcc	r0, [r9], -r0
   1000c:	07000005 	streq	r0, [r0, -r5]
   10010:	0002c52e 	andeq	ip, r2, lr, lsr #10
   10014:	00230200 	eoreq	r0, r3, r0, lsl #4
   10018:	0007dd09 	andeq	sp, r7, r9, lsl #26
   1001c:	0c300700 	ldceq	7, cr0, [r0]
   10020:	02000006 	andeq	r0, r0, #6
   10024:	e4091023 	str	r1, [r9], #-35	; 0x23
   10028:	07000005 	streq	r0, [r0, -r5]
   1002c:	00009031 	andeq	r9, r0, r1, lsr r0
   10030:	14230200 	strtne	r0, [r3], #-512	; 0x200
   10034:	000b0e09 	andeq	r0, fp, r9, lsl #28
   10038:	90320700 	eorsls	r0, r2, r0, lsl #14
   1003c:	02000000 	andeq	r0, r0, #0
   10040:	f0091823 	undefined instruction 0xf0091823
   10044:	07000005 	streq	r0, [r0, -r5]
   10048:	00060c34 	andeq	r0, r6, r4, lsr ip
   1004c:	1c230200 	sfmne	f0, 4, [r3]	; (stcne 2, cr0, [r3])
   10050:	00014e09 	andeq	r4, r1, r9, lsl #28
   10054:	0c350700 	ldceq	7, cr0, [r5]
   10058:	02000006 	andeq	r0, r0, #6
   1005c:	27092023 	strcs	r2, [r9, -r3, lsr #32]
   10060:	07000005 	streq	r0, [r0, -r5]
   10064:	00009036 	andeq	r9, r0, r6, lsr r0
   10068:	24230200 	strtcs	r0, [r3], #-512	; 0x200
   1006c:	00049b09 	andeq	r9, r4, r9, lsl #22
   10070:	90370700 	eorsls	r0, r7, r0, lsl #14
   10074:	02000000 	andeq	r0, r0, #0
   10078:	0a002823 	beq	1a10c <DISABLE_IRQ+0x1a08c>
   1007c:	0004f704 	andeq	pc, r4, r4, lsl #14
   10080:	0aa70800 	beq	fe9d2088 <rEINTPEND+0xa89d1fe0>
   10084:	05180000 	ldreq	r0, [r8]
   10088:	0005b180 	andeq	fp, r5, r0, lsl #3
   1008c:	05360900 	ldreq	r0, [r6, #-2304]!	; 0x900
   10090:	22080000 	andcs	r0, r8, #0
   10094:	000002c5 	andeq	r0, r0, r5, asr #5
   10098:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
   1009c:	00000447 	andeq	r0, r0, r7, asr #8
   100a0:	00532308 	subseq	r2, r3, r8, lsl #6
   100a4:	23020000 	movwcs	r0, #8192	; 0x2000
   100a8:	1b3f0910 	blne	fd24f0 <MEM_SIZE+0x7d24f0>
   100ac:	24080000 	strcs	r0, [r8]
   100b0:	0000061e 	andeq	r0, r0, lr, lsl r6
   100b4:	00142302 	andseq	r2, r4, r2, lsl #6
   100b8:	057a040a 	ldrbeq	r0, [sl, #-1034]!	; 0x40a
   100bc:	9f040000 	svcls	0x00040000
   100c0:	05000009 	streq	r0, [r0, #-9]
   100c4:	0002d089 	andeq	sp, r2, r9, lsl #1
   100c8:	0b610800 	bleq	18520d0 <MEM_SIZE+0x10520d0>
   100cc:	070c0000 	streq	r0, [ip, -r0]
   100d0:	0005f921 	andeq	pc, r5, r1, lsr #18
   100d4:	03110900 	tsteq	r1, #0
   100d8:	23070000 	movwcs	r0, #28672	; 0x7000
   100dc:	000005f9 	strdeq	r0, [r0], -r9
   100e0:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
   100e4:	000005dc 	ldrdeq	r0, [r0], -ip
   100e8:	05ff2407 	ldrbeq	r2, [pc, #1031]!	; 104f7 <DISABLE_IRQ+0x10477>
   100ec:	23020000 	movwcs	r0, #8192	; 0x2000
   100f0:	16300904 	ldrtne	r0, [r0], -r4, lsl #18
   100f4:	25070000 	strcs	r0, [r7]
   100f8:	00000090 	muleq	r0, r0, r0
   100fc:	00082302 	andeq	r2, r8, r2, lsl #6
   10100:	05c2040a 	strbeq	r0, [r2, #1034]	; 0x40a
   10104:	040f0000 	streq	r0, [pc], #0	; 1010c <DISABLE_IRQ+0x1008c>
   10108:	000b6104 	andeq	r6, fp, r4, lsl #2
   1010c:	c2270700 	eorgt	r0, r7, #0
   10110:	0a000005 	beq	1012c <DISABLE_IRQ+0x100ac>
   10114:	00060104 	andeq	r0, r6, r4, lsl #2
   10118:	1e011000 	cdpne	0, 0, cr1, cr1, cr0, {0}
   1011c:	11000006 	tstne	r0, r6
   10120:	000005b1 	undefined instruction 0x000005b1
   10124:	12040a00 	andne	r0, r4, #0
   10128:	0a000006 	beq	10148 <DISABLE_IRQ+0x100c8>
   1012c:	0005b704 	andeq	fp, r5, r4, lsl #14
   10130:	0c250800 	stceq	8, cr0, [r5]
   10134:	09200000 	stmdbeq	r0!, {}
   10138:	00067d23 	andeq	r7, r6, r3, lsr #26
   1013c:	05360900 	ldreq	r0, [r6, #-2304]!	; 0x900
   10140:	24090000 	strcs	r0, [r9]
   10144:	000002c5 	andeq	r0, r0, r5, asr #5
   10148:	09002302 	stmdbeq	r0, {r1, r8, r9, sp}
   1014c:	00000c79 	andeq	r0, r0, r9, ror ip
   10150:	00532709 	subseq	r2, r3, r9, lsl #14
   10154:	23020000 	movwcs	r0, #8192	; 0x2000
   10158:	0cd40910 	ldcleq	9, cr0, [r4], {16}
   1015c:	2a090000 	bcs	250164 <DISABLE_IRQ+0x2500e4>
   10160:	00000053 	andeq	r0, r0, r3, asr r0
   10164:	09142302 	ldmdbeq	r4, {r1, r8, r9, sp}
   10168:	00000c45 	andeq	r0, r0, r5, asr #24
   1016c:	02bf2e09 	adcseq	r2, pc, #144	; 0x90
   10170:	23020000 	movwcs	r0, #8192	; 0x2000
   10174:	0c9a0918 	ldceq	9, cr0, [sl], {24}
   10178:	31090000 	tstcc	r9, r0
   1017c:	00000624 	andeq	r0, r0, r4, lsr #12
   10180:	001c2302 	andseq	r2, ip, r2, lsl #6
   10184:	000c2504 	andeq	r2, ip, r4, lsl #10
   10188:	2a330900 	bcs	cd2590 <MEM_SIZE+0x4d2590>
   1018c:	12000006 	andne	r0, r0, #6
   10190:	00250201 	eoreq	r0, r5, r1, lsl #4
   10194:	ac320100 	ldfges	f0, [r2]
   10198:	54300078 	ldrtpl	r0, [r0], #-120	; 0x78
   1019c:	56300079 	undefined instruction 0x56300079
   101a0:	1300004f 	movwne	r0, #79	; 0x4f
   101a4:	00002444 	andeq	r2, r0, r4, asr #8
   101a8:	54011001 	strpl	r1, [r1], #-1
   101ac:	10300079 	eorsne	r0, r0, r9, ror r0
   101b0:	8130007a 	teqhi	r0, sl, ror r0
   101b4:	d200004f 	andle	r0, r0, #79	; 0x4f
   101b8:	14000006 	strne	r0, [r0], #-6
   101bc:	00002431 	andeq	r2, r0, r1, lsr r4
   101c0:	05ff1001 	ldrbeq	r1, [pc, #1]!	; 101c9 <DISABLE_IRQ+0x10149>
   101c4:	4fac0000 	svcmi	0x00ac0000
   101c8:	ed150000 	ldc	0, cr0, [r5]
   101cc:	01000000 	tsteq	r0, r0
   101d0:	0002bf12 	andeq	fp, r2, r2, lsl pc
   101d4:	6c910200 	lfmvs	f0, 4, [r1], {0}	; (ldcvs 2, cr0, [r1], {0})
   101d8:	23f01500 	mvnscs	r1, #0
   101dc:	06010000 	streq	r0, [r1], -r0
   101e0:	000005b7 	undefined instruction 0x000005b7
   101e4:	1a980305 	bne	fe610e00 <rEINTPEND+0xa8610d58>
   101e8:	7a0c3001 	bvc	31c1f4 <DISABLE_IRQ+0x31c174>
   101ec:	f4000000 	vst4.8	{d0-d3}, [r0], r0
   101f0:	16000006 	strne	r0, [r0], -r6
   101f4:	0000047b 	andeq	r0, r0, fp, ror r4
   101f8:	150003ff 	strne	r0, [r0, #-1023]	; 0x3ff
   101fc:	000023fe 	strdeq	r2, [r0], -lr
   10200:	06e30801 	strbteq	r0, [r3], r1, lsl #16
   10204:	03050000 	movweq	r0, #20480	; 0x5000
   10208:	30011b04 	andcc	r1, r1, r4, lsl #22
   1020c:	00003a0c 	andeq	r3, r0, ip, lsl #20
   10210:	00071600 	andeq	r1, r7, r0, lsl #12
   10214:	047b1600 	ldrbteq	r1, [fp], #-1536	; 0x600
   10218:	03ff0000 	mvnseq	r0, #0
   1021c:	17401500 	strbne	r1, [r0, -r0, lsl #10]
   10220:	0a010000 	beq	50228 <DISABLE_IRQ+0x501a8>
   10224:	00000705 	andeq	r0, r0, r5, lsl #14
   10228:	16980305 	ldrne	r0, [r8], r5, lsl #6
   1022c:	ec153001 	ldc	0, cr3, [r5], {1}
   10230:	01000024 	tsteq	r0, r4, lsr #32
   10234:	00067d0c 	andeq	r7, r6, ip, lsl #26
   10238:	78030500 	stmdavc	r3, {r8, sl}
   1023c:	15300116 	ldrne	r0, [r0, #-278]!	; 0x116
   10240:	00000447 	andeq	r0, r0, r7, asr #8
   10244:	003a0e01 	eorseq	r0, sl, r1, lsl #28
   10248:	03050000 	movweq	r0, #20480	; 0x5000
   1024c:	30012b04 	andcc	r2, r1, r4, lsl #22
   10250:	0000ac17 	andeq	sl, r0, r7, lsl ip
   10254:	65300100 	ldrvs	r0, [r0, #-256]!	; 0x100
   10258:	01000000 	tsteq	r0, r0
   1025c:	01990001 	orrseq	r0, r9, r1
   10260:	00020000 	andeq	r0, r2, r0
   10264:	0000306a 	andeq	r3, r0, sl, rrx
   10268:	004d0104 	subeq	r0, sp, r4, lsl #2
   1026c:	b9010000 	stmdblt	r1, {}
   10270:	63000025 	movwvs	r0, #37	; 0x25
   10274:	10000000 	andne	r0, r0, r0
   10278:	1030007a 	eorsne	r0, r0, sl, ror r0
   1027c:	2930007b 	ldmdbcs	r0!, {r0, r1, r3, r4, r5, r6}
   10280:	02000030 	andeq	r0, r0, #48	; 0x30
   10284:	00000564 	andeq	r0, r0, r4, ror #10
   10288:	01032102 	tsteq	r3, r2, lsl #2
   1028c:	0000a006 	andeq	sl, r0, r6
   10290:	08010300 	stmdaeq	r1, {r8, r9}
   10294:	0000009e 	muleq	r0, lr, r0
   10298:	8b070203 	blhi	1d0aac <DISABLE_IRQ+0x1d0a2c>
   1029c:	03000000 	movweq	r0, #0
   102a0:	00590502 	subseq	r0, r9, r2, lsl #10
   102a4:	38040000 	stmdacc	r4, {}
   102a8:	02000003 	andeq	r0, r0, #3
   102ac:	00005328 	andeq	r5, r0, r8, lsr #6
   102b0:	07040300 	streq	r0, [r4, -r0, lsl #6]
   102b4:	00000037 	andeq	r0, r0, r7, lsr r0
   102b8:	69050405 	stmdbvs	r5, {r0, r2, sl}
   102bc:	0300746e 	movweq	r7, #1134	; 0x46e
   102c0:	00000508 	andeq	r0, r0, r8, lsl #10
   102c4:	08030000 	stmdaeq	r3, {}
   102c8:	00002d07 	andeq	r2, r0, r7, lsl #26
   102cc:	039f0400 	orrseq	r0, pc, #0
   102d0:	2d020000 	stccs	0, cr0, [r2]
   102d4:	00000053 	andeq	r0, r0, r3, asr r0
   102d8:	00250406 	eoreq	r0, r5, r6, lsl #8
   102dc:	04070000 	streq	r0, [r7]
   102e0:	6f040607 	svcvs	0x00040607
   102e4:	04000000 	streq	r0, [r0]
   102e8:	00001f25 	andeq	r1, r0, r5, lsr #30
   102ec:	00942103 	addseq	r2, r4, r3, lsl #2
   102f0:	04060000 	streq	r0, [r6]
   102f4:	0000009a 	muleq	r0, sl, r0
   102f8:	00a60108 	adceq	r0, r6, r8, lsl #2
   102fc:	7a090000 	bvc	250304 <DISABLE_IRQ+0x250284>
   10300:	00000000 	andeq	r0, r0, r0
   10304:	2591010a 	ldrcs	r0, [r1, #266]	; 0x10a
   10308:	06010000 	streq	r0, [r1], -r0
   1030c:	00007a01 	andeq	r7, r0, r1, lsl #20
   10310:	007a1000 	rsbseq	r1, sl, r0
   10314:	007af430 	rsbseq	pc, sl, r0, lsr r4
   10318:	004fca30 	subeq	ip, pc, r0, lsr sl
   1031c:	00011800 	andeq	r1, r1, r0, lsl #16
   10320:	253c0b00 	ldrcs	r0, [ip, #-2816]!	; 0xb00
   10324:	06010000 	streq	r0, [r1], -r0
   10328:	00000083 	andeq	r0, r0, r3, lsl #1
   1032c:	00004ff6 	strdeq	r4, [r0], -r6
   10330:	0025690b 	eoreq	r6, r5, fp, lsl #18
   10334:	48060100 	stmdami	r6, {r8}
   10338:	09000000 	stmdbeq	r0, {}
   1033c:	0c000050 	stceq	0, cr0, [r0], {80}	; 0x50
   10340:	00000f8d 	andeq	r0, r0, sp, lsl #31
   10344:	007a0601 	rsbseq	r0, sl, r1, lsl #12
   10348:	52010000 	andpl	r0, r1, #0
   1034c:	0025350b 	eoreq	r3, r5, fp, lsl #10
   10350:	89060100 	stmdbhi	r6, {r8}
   10354:	1c000000 	stcne	0, cr0, [r0], {0}
   10358:	0d000050 	stceq	0, cr0, [r0, #-320]	; 0xfffffec0
   1035c:	006b7473 	rsbeq	r7, fp, r3, ror r4
   10360:	01180801 	tsteq	r8, r1, lsl #16
   10364:	502f0000 	eorpl	r0, pc, r0
   10368:	830e0000 	movwhi	r0, #57344	; 0xe000
   1036c:	0100001f 	tsteq	r0, pc, lsl r0
   10370:	00004809 	andeq	r4, r0, r9, lsl #16
   10374:	04060000 	streq	r0, [r6]
   10378:	00000048 	andeq	r0, r0, r8, asr #32
   1037c:	2583010f 	strcs	r0, [r3, #271]	; 0x10f
   10380:	23010000 	movwcs	r0, #4096	; 0x1000
   10384:	30007af4 	strdcc	r7, [r0], -r4
   10388:	30007af8 	strdcc	r7, [r0], -r8
   1038c:	010f5d01 	tsteq	pc, r1, lsl #26
   10390:	00002558 	andeq	r2, r0, r8, asr r5
   10394:	7af82901 	bvc	ffe1a7a0 <rEINTPEND+0xa9e1a6f8>
   10398:	7afc3000 	bvc	fff1c3a0 <rEINTPEND+0xa9f1c2f8>
   1039c:	5d013000 	stcpl	0, cr3, [r1]
   103a0:	2572010f 	ldrbcs	r0, [r2, #-271]!	; 0x10f
   103a4:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
   103a8:	30007afc 	strdcc	r7, [r0], -ip
   103ac:	30007b00 	andcc	r7, r0, r0, lsl #22
   103b0:	010f5d01 	tsteq	pc, r1, lsl #26
   103b4:	0000250c 	andeq	r2, r0, ip, lsl #10
   103b8:	7b003301 	blvc	1cfc4 <DISABLE_IRQ+0x1cf44>
   103bc:	7b043000 	blvc	11c3c4 <DISABLE_IRQ+0x11c344>
   103c0:	5d013000 	stcpl	0, cr3, [r1]
   103c4:	2520010f 	strcs	r0, [r0, #-271]!	; 0x10f
   103c8:	38010000 	stmdacc	r1, {}
   103cc:	30007b04 	andcc	r7, r0, r4, lsl #22
   103d0:	30007b08 	andcc	r7, r0, r8, lsl #22
   103d4:	010f5d01 	tsteq	pc, r1, lsl #26
   103d8:	000025a1 	andeq	r2, r0, r1, lsr #11
   103dc:	7b083e01 	blvc	21fbe8 <DISABLE_IRQ+0x21fb68>
   103e0:	7b0c3000 	blvc	31c3e8 <DISABLE_IRQ+0x31c368>
   103e4:	5d013000 	stcpl	0, cr3, [r1]
   103e8:	2547010f 	strbcs	r0, [r7, #-271]	; 0x10f
   103ec:	43010000 	movwmi	r0, #4096	; 0x1000
   103f0:	30007b0c 	andcc	r7, r0, ip, lsl #22
   103f4:	30007b10 	andcc	r7, r0, r0, lsl fp
   103f8:	07005d01 	streq	r5, [r0, -r1, lsl #26]
   103fc:	02000015 	andeq	r0, r0, #21
   10400:	00313400 	eorseq	r3, r1, r0, lsl #8
   10404:	4d010400 	cfstrsmi	mvf0, [r1]
   10408:	01000000 	tsteq	r0, r0
   1040c:	000027f8 	strdeq	r2, [r0], -r8
   10410:	00000063 	andeq	r0, r0, r3, rrx
   10414:	30007b10 	andcc	r7, r0, r0, lsl fp
   10418:	30007bf8 	strdcc	r7, [r0], -r8
   1041c:	000030cb 	andeq	r3, r0, fp, asr #1
   10420:	00056402 	andeq	r6, r5, r2, lsl #8
   10424:	03210200 	teqeq	r1, #0
   10428:	00a00601 	adceq	r0, r0, r1, lsl #12
   1042c:	01030000 	tsteq	r3, r0
   10430:	00009e08 	andeq	r9, r0, r8, lsl #28
   10434:	04f70400 	ldrbteq	r0, [r7], #1024	; 0x400
   10438:	24020000 	strcs	r0, [r2]
   1043c:	00000033 	andeq	r0, r0, r3, lsr r0
   10440:	8b070203 	blhi	1d0c54 <DISABLE_IRQ+0x1d0bd4>
   10444:	03000000 	movweq	r0, #0
   10448:	00590502 	subseq	r0, r9, r2, lsl #10
   1044c:	38040000 	stmdacc	r4, {}
   10450:	02000003 	andeq	r0, r0, #3
   10454:	00005e28 	andeq	r5, r0, r8, lsr #28
   10458:	07040300 	streq	r0, [r4, -r0, lsl #6]
   1045c:	00000037 	andeq	r0, r0, r7, lsr r0
   10460:	69050405 	stmdbvs	r5, {r0, r2, sl}
   10464:	0300746e 	movweq	r7, #1134	; 0x46e
   10468:	00000508 	andeq	r0, r0, r8, lsl #10
   1046c:	08030000 	stmdaeq	r3, {}
   10470:	00002d07 	andeq	r2, r0, r7, lsl #26
   10474:	039f0400 	orrseq	r0, pc, #0
   10478:	2d020000 	stccs	0, cr0, [r2]
   1047c:	0000005e 	andeq	r0, r0, lr, asr r0
   10480:	000a2704 	andeq	r2, sl, r4, lsl #14
   10484:	532a0300 	teqpl	sl, #0
   10488:	04000000 	streq	r0, [r0]
   1048c:	0000144b 	andeq	r1, r0, fp, asr #8
   10490:	003a2b03 	eorseq	r2, sl, r3, lsl #22
   10494:	29040000 	stmdbcs	r4, {}
   10498:	03000008 	movweq	r0, #8
   1049c:	0000532c 	andeq	r5, r0, ip, lsr #6
   104a0:	0c090600 	stceq	6, cr0, [r9], {0}
   104a4:	04080000 	streq	r0, [r8]
   104a8:	0000cf23 	andeq	ip, r0, r3, lsr #30
   104ac:	03110700 	tsteq	r1, #0
   104b0:	24040000 	strcs	r0, [r4]
   104b4:	000000cf 	andeq	r0, r0, pc, asr #1
   104b8:	07002302 	streq	r2, [r0, -r2, lsl #6]
   104bc:	00000281 	andeq	r0, r0, r1, lsl #5
   104c0:	00cf2504 	sbceq	r2, pc, r4, lsl #10
   104c4:	23020000 	movwcs	r0, #8192	; 0x2000
   104c8:	04080004 	streq	r0, [r8], #-4
   104cc:	000000a6 	andeq	r0, r0, r6, lsr #1
   104d0:	000c0904 	andeq	r0, ip, r4, lsl #18
   104d4:	a6260400 	strtge	r0, [r6], -r0, lsl #8
   104d8:	06000000 	streq	r0, [r0], -r0
   104dc:	0000065c 	andeq	r0, r0, ip, asr r6
   104e0:	252f0510 	strcs	r0, [pc, #-1296]!	; ffd8 <DISABLE_IRQ+0xff58>
   104e4:	07000001 	streq	r0, [r0, -r1]
   104e8:	00000ac9 	andeq	r0, r0, r9, asr #21
   104ec:	00d53105 	sbcseq	r3, r5, r5, lsl #2
   104f0:	23020000 	movwcs	r0, #8192	; 0x2000
   104f4:	08e00700 	stmiaeq	r0!, {r8, r9, sl}^
   104f8:	32050000 	andcc	r0, r5, #0
   104fc:	00000125 	andeq	r0, r0, r5, lsr #2
   10500:	07082302 	streq	r2, [r8, -r2, lsl #6]
   10504:	00000900 	andeq	r0, r0, r0, lsl #18
   10508:	003a3305 	eorseq	r3, sl, r5, lsl #6
   1050c:	23020000 	movwcs	r0, #8192	; 0x2000
   10510:	0427070c 	strteq	r0, [r7], #-1804	; 0x70c
   10514:	34050000 	strcc	r0, [r5]
   10518:	0000003a 	andeq	r0, r0, sl, lsr r0
   1051c:	000d2302 	andeq	r2, sp, r2, lsl #6
   10520:	003a0408 	eorseq	r0, sl, r8, lsl #8
   10524:	5c040000 	stcpl	0, cr0, [r4], {0}
   10528:	05000006 	streq	r0, [r0, #-6]
   1052c:	0000e036 	andeq	lr, r0, r6, lsr r0
   10530:	099f0600 	ldmibeq	pc, {r9, sl}
   10534:	056c0000 	strbeq	r0, [ip]!
   10538:	0002cb3a 	andeq	ip, r2, sl, lsr fp
   1053c:	14810700 	strne	r0, [r1], #1792	; 0x700
   10540:	3b050000 	blcc	150548 <DISABLE_IRQ+0x1504c8>
   10544:	000002cb 	andeq	r0, r0, fp, asr #5
   10548:	07002302 	streq	r2, [r0, -r2, lsl #6]
   1054c:	0000044d 	andeq	r0, r0, sp, asr #8
   10550:	00d54105 	sbcseq	r4, r5, r5, lsl #2
   10554:	23020000 	movwcs	r0, #8192	; 0x2000
   10558:	05520704 	ldrbeq	r0, [r2, #-1796]	; 0x704
   1055c:	45050000 	strmi	r0, [r5]
   10560:	000002d1 	ldrdeq	r0, [r0], -r1
   10564:	070c2302 	streq	r2, [ip, -r2, lsl #6]
   10568:	00001aef 	andeq	r1, r0, pc, ror #21
   1056c:	00534b05 	subseq	r4, r3, r5, lsl #22
   10570:	23020000 	movwcs	r0, #8192	; 0x2000
   10574:	08780710 	ldmdaeq	r8!, {r4, r8, r9, sl}^
   10578:	4c050000 	stcmi	0, cr0, [r5], {0}
   1057c:	00000053 	andeq	r0, r0, r3, asr r0
   10580:	07142302 	ldreq	r2, [r4, -r2, lsl #6]
   10584:	00001d35 	andeq	r1, r0, r5, lsr sp
   10588:	003a4d05 	eorseq	r4, sl, r5, lsl #26
   1058c:	23020000 	movwcs	r0, #8192	; 0x2000
   10590:	1e5a0718 	mrcne	7, 2, r0, cr10, cr8, {0}
   10594:	51050000 	tstpl	r5, r0
   10598:	0000003a 	andeq	r0, r0, sl, lsr r0
   1059c:	07192302 	ldreq	r2, [r9, -r2, lsl #6]
   105a0:	00000364 	andeq	r0, r0, r4, ror #6
   105a4:	003a5305 	eorseq	r5, sl, r5, lsl #6
   105a8:	23020000 	movwcs	r0, #8192	; 0x2000
   105ac:	043f071a 	ldrteq	r0, [pc], #1818	; 105b4 <DISABLE_IRQ+0x10534>
   105b0:	56050000 	strpl	r0, [r5], -r0
   105b4:	0000003a 	andeq	r0, r0, sl, lsr r0
   105b8:	071b2302 	ldreq	r2, [fp, -r2, lsl #6]
   105bc:	00000bad 	andeq	r0, r0, sp, lsr #23
   105c0:	03455a05 	movteq	r5, #23045	; 0x5a05
   105c4:	23020000 	movwcs	r0, #8192	; 0x2000
   105c8:	0bf8071c 	bleq	ffe12240 <rEINTPEND+0xa9e12198>
   105cc:	5f050000 	svcpl	0x00050000
   105d0:	000000d5 	ldrdeq	r0, [r0], -r5
   105d4:	07202302 	streq	r2, [r0, -r2, lsl #6]!
   105d8:	00000b03 	andeq	r0, r0, r3, lsl #22
   105dc:	00536305 	subseq	r6, r3, r5, lsl #6
   105e0:	23020000 	movwcs	r0, #8192	; 0x2000
   105e4:	06250728 	strteq	r0, [r5], -r8, lsr #14
   105e8:	65050000 	strvs	r0, [r5]
   105ec:	0000034b 	andeq	r0, r0, fp, asr #6
   105f0:	072c2302 	streq	r2, [ip, -r2, lsl #6]!
   105f4:	0000086e 	andeq	r0, r0, lr, ror #16
   105f8:	00d56605 	sbcseq	r6, r5, r5, lsl #12
   105fc:	23020000 	movwcs	r0, #8192	; 0x2000
   10600:	0c0e0730 	stceq	7, cr0, [lr], {48}	; 0x30
   10604:	68050000 	stmdavs	r5, {}
   10608:	00000085 	andeq	r0, r0, r5, lsl #1
   1060c:	07382302 	ldreq	r2, [r8, -r2, lsl #6]!
   10610:	000007f3 	strdeq	r0, [r0], -r3
   10614:	00856905 	addeq	r6, r5, r5, lsl #18
   10618:	23020000 	movwcs	r0, #8192	; 0x2000
   1061c:	05a7073c 	streq	r0, [r7, #1852]!	; 0x73c
   10620:	6b050000 	blvs	150628 <DISABLE_IRQ+0x1505a8>
   10624:	00000351 	andeq	r0, r0, r1, asr r3
   10628:	09402302 	stmdbeq	r0, {r1, r8, r9, sp}^
   1062c:	0067736d 	rsbeq	r7, r7, sp, ror #6
   10630:	02cb6d05 	sbceq	r6, fp, #320	; 0x140
   10634:	23020000 	movwcs	r0, #8192	; 0x2000
   10638:	16300744 	ldrtne	r0, [r0], -r4, asr #14
   1063c:	70050000 	andvc	r0, r5, r0
   10640:	0000009b 	muleq	r0, fp, r0
   10644:	07482302 	strbeq	r2, [r8, -r2, lsl #6]
   10648:	000008db 	ldrdeq	r0, [r0], -fp
   1064c:	01257305 	teqeq	r5, r5, lsl #6
   10650:	23020000 	movwcs	r0, #8192	; 0x2000
   10654:	09ac074c 	stmibeq	ip!, {r2, r3, r6, r8, r9, sl}
   10658:	75050000 	strvc	r0, [r5]
   1065c:	0000003a 	andeq	r0, r0, sl, lsr r0
   10660:	07502302 	ldrbeq	r2, [r0, -r2, lsl #6]
   10664:	000007e6 	andeq	r0, r0, r6, ror #15
   10668:	003a7605 	eorseq	r7, sl, r5, lsl #12
   1066c:	23020000 	movwcs	r0, #8192	; 0x2000
   10670:	053d0751 	ldreq	r0, [sp, #-1873]!	; 0x751
   10674:	79050000 	stmdbvc	r5, {}
   10678:	00000357 	andeq	r0, r0, r7, asr r3
   1067c:	07542302 	ldrbeq	r2, [r4, -r2, lsl #6]
   10680:	00000ab5 	undefined instruction 0x00000ab5
   10684:	03da7c05 	bicseq	r7, sl, #1280	; 0x500
   10688:	23020000 	movwcs	r0, #8192	; 0x2000
   1068c:	022b0758 	eoreq	r0, fp, #23068672	; 0x1600000
   10690:	80050000 	andhi	r0, r5, r0
   10694:	00000417 	andeq	r0, r0, r7, lsl r4
   10698:	075c2302 	ldrbeq	r2, [ip, -r2, lsl #6]
   1069c:	000004ad 	andeq	r0, r0, sp, lsr #9
   106a0:	003a8405 	eorseq	r8, sl, r5, lsl #8
   106a4:	23020000 	movwcs	r0, #8192	; 0x2000
   106a8:	02550760 	subseq	r0, r5, #25165824	; 0x1800000
   106ac:	85050000 	strhi	r0, [r5]
   106b0:	00000053 	andeq	r0, r0, r3, asr r0
   106b4:	07642302 	strbeq	r2, [r4, -r2, lsl #6]!
   106b8:	0000075a 	andeq	r0, r0, sl, asr r7
   106bc:	02cb8605 	sbceq	r8, fp, #5242880	; 0x500000
   106c0:	23020000 	movwcs	r0, #8192	; 0x2000
   106c4:	04080068 	streq	r0, [r8], #-104	; 0x68
   106c8:	00000025 	andeq	r0, r0, r5, lsr #32
   106cc:	0002cb0a 	andeq	ip, r2, sl, lsl #22
   106d0:	0002e100 	andeq	lr, r2, r0, lsl #2
   106d4:	02e10b00 	rsceq	r0, r1, #0
   106d8:	00000000 	andeq	r0, r0, r0
   106dc:	0607040c 	streq	r0, [r7], -ip, lsl #8
   106e0:	00000b2f 	andeq	r0, r0, pc, lsr #22
   106e4:	455a051c 	ldrbmi	r0, [sl, #-1308]	; 0x51c
   106e8:	07000003 	streq	r0, [r0, -r3]
   106ec:	00000536 	andeq	r0, r0, r6, lsr r5
   106f0:	012b2706 	teqeq	fp, r6, lsl #14
   106f4:	23020000 	movwcs	r0, #8192	; 0x2000
   106f8:	08670700 	stmdaeq	r7!, {r8, r9, sl}^
   106fc:	2a060000 	bcs	190704 <DISABLE_IRQ+0x190684>
   10700:	00000600 	andeq	r0, r0, r0, lsl #12
   10704:	07102302 	ldreq	r2, [r0, -r2, lsl #6]
   10708:	00000bad 	andeq	r0, r0, sp, lsr #23
   1070c:	03452c06 	movteq	r2, #23558	; 0x5c06
   10710:	23020000 	movwcs	r0, #8192	; 0x2000
   10714:	05f60714 	ldrbeq	r0, [r6, #1812]!	; 0x714
   10718:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
   1071c:	0000003a 	andeq	r0, r0, sl, lsr r0
   10720:	07182302 	ldreq	r2, [r8, -r2, lsl #6]
   10724:	00000473 	andeq	r0, r0, r3, ror r4
   10728:	003a2f06 	eorseq	r2, sl, r6, lsl #30
   1072c:	23020000 	movwcs	r0, #8192	; 0x2000
   10730:	048e0719 	streq	r0, [lr], #1817	; 0x719
   10734:	30060000 	andcc	r0, r6, r0
   10738:	0000003a 	andeq	r0, r0, sl, lsr r0
   1073c:	001a2302 	andseq	r2, sl, r2, lsl #6
   10740:	02e40408 	rsceq	r0, r4, #134217728	; 0x8000000
   10744:	04080000 	streq	r0, [r8]
   10748:	0000007a 	andeq	r0, r0, sl, ror r0
   1074c:	00d50408 	sbcseq	r0, r5, r8, lsl #8
   10750:	04080000 	streq	r0, [r8]
   10754:	0000012b 	andeq	r0, r0, fp, lsr #2
   10758:	00074b06 	andeq	r4, r7, r6, lsl #22
   1075c:	7c052c00 	stcvc	12, cr2, [r5], {0}
   10760:	000003da 	ldrdeq	r0, [r0], -sl
   10764:	00053607 	andeq	r3, r5, r7, lsl #12
   10768:	2b2e0700 	blcs	b92370 <MEM_SIZE+0x392370>
   1076c:	02000001 	andeq	r0, r0, #1
   10770:	dd070023 	stcle	0, cr0, [r7, #-140]	; 0xffffff74
   10774:	07000007 	streq	r0, [r0, -r7]
   10778:	00055230 	andeq	r5, r5, r0, lsr r2
   1077c:	10230200 	eorne	r0, r3, r0, lsl #4
   10780:	0005e407 	andeq	lr, r5, r7, lsl #8
   10784:	9b310700 	blls	c5238c <MEM_SIZE+0x45238c>
   10788:	02000000 	andeq	r0, r0, #0
   1078c:	0e071423 	cdpeq	4, 0, cr1, cr7, cr3, {1}
   10790:	0700000b 	streq	r0, [r0, -fp]
   10794:	00009b32 	andeq	r9, r0, r2, lsr fp
   10798:	18230200 	stmdane	r3!, {r9}
   1079c:	0005f007 	andeq	pc, r5, r7
   107a0:	52340700 	eorspl	r0, r4, #0
   107a4:	02000005 	andeq	r0, r0, #5
   107a8:	4e071c23 	cdpmi	12, 0, cr1, cr7, cr3, {1}
   107ac:	07000001 	streq	r0, [r0, -r1]
   107b0:	00055235 	andeq	r5, r5, r5, lsr r2
   107b4:	20230200 	eorcs	r0, r3, r0, lsl #4
   107b8:	00052707 	andeq	r2, r5, r7, lsl #14
   107bc:	9b360700 	blls	d923c4 <MEM_SIZE+0x5923c4>
   107c0:	02000000 	andeq	r0, r0, #0
   107c4:	9b072423 	blls	1d9858 <DISABLE_IRQ+0x1d97d8>
   107c8:	07000004 	streq	r0, [r0, -r4]
   107cc:	00009b37 	andeq	r9, r0, r7, lsr fp
   107d0:	28230200 	stmdacs	r3!, {r9}
   107d4:	5d040800 	stcpl	8, cr0, [r4]
   107d8:	06000003 	streq	r0, [r0], -r3
   107dc:	00000aa7 	andeq	r0, r0, r7, lsr #21
   107e0:	17800518 	usada8ne	r0, r8, r5, r0
   107e4:	07000004 	streq	r0, [r0, -r4]
   107e8:	00000536 	andeq	r0, r0, r6, lsr r5
   107ec:	012b2208 	teqeq	fp, r8, lsl #4
   107f0:	23020000 	movwcs	r0, #8192	; 0x2000
   107f4:	04470700 	strbeq	r0, [r7], #-1792	; 0x700
   107f8:	23080000 	movwcs	r0, #32768	; 0x8000
   107fc:	00000053 	andeq	r0, r0, r3, asr r0
   10800:	07102302 	ldreq	r2, [r0, -r2, lsl #6]
   10804:	00001b3f 	andeq	r1, r0, pc, lsr fp
   10808:	05e92408 	strbeq	r2, [r9, #1032]!	; 0x408
   1080c:	23020000 	movwcs	r0, #8192	; 0x2000
   10810:	04080014 	streq	r0, [r8], #-20
   10814:	000003e0 	andeq	r0, r0, r0, ror #7
   10818:	00099f04 	andeq	r9, r9, r4, lsl #30
   1081c:	36890500 	strcc	r0, [r9], r0, lsl #10
   10820:	06000001 	streq	r0, [r0], -r1
   10824:	000019af 	andeq	r1, r0, pc, lsr #19
   10828:	9720091c 	undefined instruction 0x9720091c
   1082c:	07000004 	streq	r0, [r0, -r4]
   10830:	0000193b 	andeq	r1, r0, fp, lsr r9
   10834:	04972209 	ldreq	r2, [r7], #521	; 0x209
   10838:	23020000 	movwcs	r0, #8192	; 0x2000
   1083c:	18ba0700 	ldmne	sl!, {r8, r9, sl}
   10840:	23090000 	movwcs	r0, #36864	; 0x9000
   10844:	00000497 	muleq	r0, r7, r4
   10848:	07042302 	streq	r2, [r4, -r2, lsl #6]
   1084c:	000005f0 	strdeq	r0, [r0], -r0
   10850:	04972409 	ldreq	r2, [r7], #1033	; 0x409
   10854:	23020000 	movwcs	r0, #8192	; 0x2000
   10858:	014e0708 	cmpeq	lr, r8, lsl #14
   1085c:	25090000 	strcs	r0, [r9]
   10860:	00000497 	muleq	r0, r7, r4
   10864:	070c2302 	streq	r2, [ip, -r2, lsl #6]
   10868:	0000181b 	andeq	r1, r0, fp, lsl r8
   1086c:	009b2609 	addseq	r2, fp, r9, lsl #12
   10870:	23020000 	movwcs	r0, #8192	; 0x2000
   10874:	19700710 	ldmdbne	r0!, {r4, r8, r9, sl}^
   10878:	27090000 	strcs	r0, [r9, -r0]
   1087c:	0000009b 	muleq	r0, fp, r0
   10880:	07142302 	ldreq	r2, [r4, -r2, lsl #6]
   10884:	00000b0e 	andeq	r0, r0, lr, lsl #22
   10888:	009b2809 	addseq	r2, fp, r9, lsl #16
   1088c:	23020000 	movwcs	r0, #8192	; 0x2000
   10890:	04080018 	streq	r0, [r8], #-24
   10894:	000002cb 	andeq	r0, r0, fp, asr #5
   10898:	0019af04 	andseq	sl, r9, r4, lsl #30
   1089c:	282a0900 	stmdacs	sl!, {r8, fp}
   108a0:	06000004 	streq	r0, [r0], -r4
   108a4:	000018ab 	andeq	r1, r0, fp, lsr #17
   108a8:	df380930 	svcle	0x00380930
   108ac:	07000004 	streq	r0, [r0, -r4]
   108b0:	00000536 	andeq	r0, r0, r6, lsr r5
   108b4:	012b3909 	teqeq	fp, r9, lsl #18
   108b8:	23020000 	movwcs	r0, #8192	; 0x2000
   108bc:	18fd0700 	ldmne	sp!, {r8, r9, sl}^
   108c0:	3a090000 	bcc	2508c8 <DISABLE_IRQ+0x250848>
   108c4:	0000049d 	muleq	r0, sp, r4
   108c8:	07102302 	ldreq	r2, [r0, -r2, lsl #6]
   108cc:	00001899 	muleq	r0, r9, r8
   108d0:	04f13b09 	ldrbteq	r3, [r1], #2825	; 0xb09
   108d4:	23020000 	movwcs	r0, #8192	; 0x2000
   108d8:	010d002c 	tsteq	sp, ip, lsr #32
   108dc:	000004eb 	andeq	r0, r0, fp, ror #9
   108e0:	0004eb0e 	andeq	lr, r4, lr, lsl #22
   108e4:	04080000 	streq	r0, [r8]
   108e8:	000004a8 	andeq	r0, r0, r8, lsr #9
   108ec:	04df0408 	ldrbeq	r0, [pc], #1032	; 108f4 <DISABLE_IRQ+0x10874>
   108f0:	ab040000 	blge	1108f8 <DISABLE_IRQ+0x110878>
   108f4:	09000018 	stmdbeq	r0, {r3, r4}
   108f8:	0004a83d 	andeq	sl, r4, sp, lsr r8
   108fc:	f7040800 	undefined instruction 0xf7040800
   10900:	06000004 	streq	r0, [r0], -r4
   10904:	00000b61 	andeq	r0, r0, r1, ror #22
   10908:	3f21070c 	svccc	0x0021070c
   1090c:	07000005 	streq	r0, [r0, -r5]
   10910:	00000311 	andeq	r0, r0, r1, lsl r3
   10914:	053f2307 	ldreq	r2, [pc, #-775]!	; 10615 <DISABLE_IRQ+0x10595>
   10918:	23020000 	movwcs	r0, #8192	; 0x2000
   1091c:	05dc0700 	ldrbeq	r0, [ip, #1792]	; 0x700
   10920:	24070000 	strcs	r0, [r7]
   10924:	00000545 	andeq	r0, r0, r5, asr #10
   10928:	07042302 	streq	r2, [r4, -r2, lsl #6]
   1092c:	00001630 	andeq	r1, r0, r0, lsr r6
   10930:	009b2507 	addseq	r2, fp, r7, lsl #10
   10934:	23020000 	movwcs	r0, #8192	; 0x2000
   10938:	04080008 	streq	r0, [r8], #-8
   1093c:	00000508 	andeq	r0, r0, r8, lsl #10
   10940:	6104040f 	tstvs	r4, pc, lsl #8
   10944:	0700000b 	streq	r0, [r0, -fp]
   10948:	00050827 	andeq	r0, r5, r7, lsr #16
   1094c:	47040800 	strmi	r0, [r4, -r0, lsl #16]
   10950:	04000005 	streq	r0, [r0], #-5
   10954:	0000074b 	andeq	r0, r0, fp, asr #14
   10958:	035d3907 	cmpeq	sp, #114688	; 0x1c000
   1095c:	e7060000 	str	r0, [r6, -r0]
   10960:	28000016 	stmdacs	r0, {r1, r2, r4}
   10964:	05d2220a 	ldrbeq	r2, [r2, #522]	; 0x20a
   10968:	36070000 	strcc	r0, [r7], -r0
   1096c:	0a000005 	beq	10988 <DISABLE_IRQ+0x10908>
   10970:	00012b23 	andeq	r2, r1, r3, lsr #22
   10974:	00230200 	eoreq	r0, r3, r0, lsl #4
   10978:	00174907 	andseq	r4, r7, r7, lsl #18
   1097c:	9b250a00 	blls	953184 <MEM_SIZE+0x153184>
   10980:	02000000 	andeq	r0, r0, #0
   10984:	cb071023 	blgt	1d4a18 <DISABLE_IRQ+0x1d4998>
   10988:	0a000016 	beq	109e8 <DISABLE_IRQ+0x10968>
   1098c:	00009b26 	andeq	r9, r0, r6, lsr #22
   10990:	14230200 	strtne	r0, [r3], #-512	; 0x200
   10994:	00174707 	andseq	r4, r7, r7, lsl #14
   10998:	9b270a00 	blls	9d31a0 <MEM_SIZE+0x1d31a0>
   1099c:	02000000 	andeq	r0, r0, #0
   109a0:	ac071823 	stcge	8, cr1, [r7], {35}	; 0x23
   109a4:	0a000005 	beq	109c0 <DISABLE_IRQ+0x10940>
   109a8:	00009b28 	andeq	r9, r0, r8, lsr #22
   109ac:	1c230200 	sfmne	f0, 4, [r3]	; (stcne 2, cr0, [r3])
   109b0:	00176607 	andseq	r6, r7, r7, lsl #12
   109b4:	9b290a00 	blls	a531bc <MEM_SIZE+0x2531bc>
   109b8:	02000000 	andeq	r0, r0, #0
   109bc:	40072023 	andmi	r2, r7, r3, lsr #32
   109c0:	0a000017 	beq	10a24 <DISABLE_IRQ+0x109a4>
   109c4:	0002cb2a 	andeq	ip, r2, sl, lsr #22
   109c8:	24230200 	strtcs	r0, [r3], #-512	; 0x200
   109cc:	16e70400 	strbtne	r0, [r7], r0, lsl #8
   109d0:	2c0a0000 	stccs	0, cr0, [sl], {0}
   109d4:	00000563 	andeq	r0, r0, r3, ror #10
   109d8:	05e9010d 	strbeq	r0, [r9, #269]!	; 0x10d
   109dc:	170e0000 	strne	r0, [lr, -r0]
   109e0:	00000004 	andeq	r0, r0, r4
   109e4:	05dd0408 	ldrbeq	r0, [sp, #1032]	; 0x408
   109e8:	a7040000 	strge	r0, [r4, -r0]
   109ec:	0800000a 	stmdaeq	r0, {r1, r3}
   109f0:	0003e026 	andeq	lr, r3, r6, lsr #32
   109f4:	ef040800 	svc	0x00040800
   109f8:	08000005 	stmdaeq	r0, {r0, r2}
   109fc:	00041d04 	andeq	r1, r4, r4, lsl #26
   10a00:	0b2f0400 	bleq	bd1a08 <MEM_SIZE+0x3d1a08>
   10a04:	32060000 	andcc	r0, r6, #0
   10a08:	000002e4 	andeq	r0, r0, r4, ror #5
   10a0c:	000ec206 	andeq	ip, lr, r6, lsl #4
   10a10:	220b1400 	andcs	r1, fp, #0
   10a14:	0000063a 	andeq	r0, r0, sl, lsr r6
   10a18:	00053607 	andeq	r3, r5, r7, lsl #12
   10a1c:	2b230b00 	blcs	8d3624 <MEM_SIZE+0xd3624>
   10a20:	02000001 	andeq	r0, r0, #1
   10a24:	10070023 	andne	r0, r7, r3, lsr #32
   10a28:	0b00000e 	bleq	10a68 <DISABLE_IRQ+0x109e8>
   10a2c:	00005324 	andeq	r5, r0, r4, lsr #6
   10a30:	10230200 	eorne	r0, r3, r0, lsl #4
   10a34:	0ec20400 	cdpeq	4, 12, cr0, cr2, cr0, {0}
   10a38:	260b0000 	strcs	r0, [fp], -r0
   10a3c:	00000611 	andeq	r0, r0, r1, lsl r6
   10a40:	00020c06 	andeq	r0, r2, r6, lsl #24
   10a44:	220c1c00 	andcs	r1, ip, #0
   10a48:	0000068a 	andeq	r0, r0, sl, lsl #13
   10a4c:	00053607 	andeq	r3, r5, r7, lsl #12
   10a50:	2b230c00 	blcs	8d3a58 <MEM_SIZE+0xd3a58>
   10a54:	02000001 	andeq	r0, r0, #1
   10a58:	93070023 	movwls	r0, #28707	; 0x7023
   10a5c:	0c000002 	stceq	0, cr0, [r0], {2}
   10a60:	00005326 	andeq	r5, r0, r6, lsr #6
   10a64:	10230200 	eorne	r0, r3, r0, lsl #4
   10a68:	0004c007 	andeq	ip, r4, r7
   10a6c:	53270c00 	teqpl	r7, #0
   10a70:	02000000 	andeq	r0, r0, #0
   10a74:	69071423 	stmdbvs	r7, {r0, r1, r5, sl, ip}
   10a78:	0c00000a 	stceq	0, cr0, [r0], {10}
   10a7c:	0001252a 	andeq	r2, r1, sl, lsr #10
   10a80:	18230200 	stmdane	r3!, {r9}
   10a84:	020c0400 	andeq	r0, ip, #0
   10a88:	2c0c0000 	stccs	0, cr0, [ip], {0}
   10a8c:	00000645 	andeq	r0, r0, r5, asr #12
   10a90:	000c2506 	andeq	r2, ip, r6, lsl #10
   10a94:	230d2000 	movwcs	r2, #53248	; 0xd000
   10a98:	000006e8 	andeq	r0, r0, r8, ror #13
   10a9c:	00053607 	andeq	r3, r5, r7, lsl #12
   10aa0:	2b240d00 	blcs	913ea8 <MEM_SIZE+0x113ea8>
   10aa4:	02000001 	andeq	r0, r0, #1
   10aa8:	79070023 	stmdbvc	r7, {r0, r1, r5}
   10aac:	0d00000c 	stceq	0, cr0, [r0, #-48]	; 0xffffffd0
   10ab0:	00005327 	andeq	r5, r0, r7, lsr #6
   10ab4:	10230200 	eorne	r0, r3, r0, lsl #4
   10ab8:	000cd407 	andeq	sp, ip, r7, lsl #8
   10abc:	532a0d00 	teqpl	sl, #0
   10ac0:	02000000 	andeq	r0, r0, #0
   10ac4:	45071423 	strmi	r1, [r7, #-1059]	; 0x423
   10ac8:	0d00000c 	stceq	0, cr0, [r0, #-48]	; 0xffffffd0
   10acc:	0001252e 	andeq	r2, r1, lr, lsr #10
   10ad0:	18230200 	stmdane	r3!, {r9}
   10ad4:	000c9a07 	andeq	r9, ip, r7, lsl #20
   10ad8:	00310d00 	eorseq	r0, r1, r0, lsl #26
   10adc:	02000006 	andeq	r0, r0, #6
   10ae0:	04001c23 	streq	r1, [r0], #-3107	; 0xc23
   10ae4:	00000c25 	andeq	r0, r0, r5, lsr #24
   10ae8:	0695330d 	ldreq	r3, [r5], sp, lsl #6
   10aec:	8c060000 	stchi	0, cr0, [r6], {0}
   10af0:	04000014 	streq	r0, [r0], #-20
   10af4:	070e200e 	streq	r2, [lr, -lr]
   10af8:	77070000 	strvc	r0, [r7, -r0]
   10afc:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
   10b00:	00071f22 	andeq	r1, r7, r2, lsr #30
   10b04:	00230200 	eoreq	r0, r3, r0, lsl #4
   10b08:	1f010d00 	svcne	0x00010d00
   10b0c:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
   10b10:	00000090 	muleq	r0, r0, r0
   10b14:	0005450e 	andeq	r4, r5, lr, lsl #10
   10b18:	04080000 	streq	r0, [r8]
   10b1c:	0000070e 	andeq	r0, r0, lr, lsl #14
   10b20:	00148c04 	andseq	r8, r4, r4, lsl #24
   10b24:	f3240e00 	vcgt.f32	d0, d4, d0
   10b28:	08000006 	stmdaeq	r0, {r1, r2}
   10b2c:	00072504 	andeq	r2, r7, r4, lsl #10
   10b30:	7c011000 	stcvc	0, cr1, [r1], {0}
   10b34:	01000027 	tsteq	r0, r7, lsr #32
   10b38:	7b100105 	blvc	410f54 <DISABLE_IRQ+0x410ed4>
   10b3c:	7b143000 	blvc	51cb44 <DISABLE_IRQ+0x51cac4>
   10b40:	5d013000 	stcpl	0, cr3, [r1]
   10b44:	288c0111 	stmcs	ip, {r0, r4, r8}
   10b48:	0b010000 	bleq	50b50 <DISABLE_IRQ+0x50ad0>
   10b4c:	007b1401 	rsbseq	r1, fp, r1, lsl #8
   10b50:	007b1830 	rsbseq	r1, fp, r0, lsr r8
   10b54:	7a5d0130 	bvc	175101c <MEM_SIZE+0xf5101c>
   10b58:	12000007 	andne	r0, r0, #7
   10b5c:	00002887 	andeq	r2, r0, r7, lsl #17
   10b60:	06000b01 	streq	r0, [r0], -r1, lsl #22
   10b64:	50010000 	andpl	r0, r1, r0
   10b68:	006f7413 	rsbeq	r7, pc, r3, lsl r4
   10b6c:	06000b01 	streq	r0, [r0], -r1, lsl #22
   10b70:	51010000 	tstpl	r1, r0
   10b74:	2f011100 	svccs	0x00011100
   10b78:	01000026 	tsteq	r0, r6, lsr #32
   10b7c:	7b180111 	blvc	610fc8 <DISABLE_IRQ+0x610f48>
   10b80:	7b1c3000 	blvc	71cb88 <DISABLE_IRQ+0x71cb08>
   10b84:	5d013000 	stcpl	0, cr3, [r1]
   10b88:	000007ab 	andeq	r0, r0, fp, lsr #15
   10b8c:	00288712 	eoreq	r8, r8, r2, lsl r7
   10b90:	00110100 	andseq	r0, r1, r0, lsl #2
   10b94:	01000006 	tsteq	r0, r6
   10b98:	6f741350 	svcvs	0x00741350
   10b9c:	00110100 	andseq	r0, r1, r0, lsl #2
   10ba0:	01000006 	tsteq	r0, r6
   10ba4:	01110051 	tsteq	r1, r1, asr r0
   10ba8:	000025d9 	ldrdeq	r2, [r0], -r9
   10bac:	1c011701 	stcne	7, cr1, [r1], {1}
   10bb0:	2030007b 	eorscs	r0, r0, fp, ror r0
   10bb4:	0130007b 	teqeq	r0, fp, ror r0
   10bb8:	0007d05d 	andeq	sp, r7, sp, asr r0
   10bbc:	26161200 	ldrcs	r1, [r6], -r0, lsl #4
   10bc0:	17010000 	strne	r0, [r1, -r0]
   10bc4:	00000600 	andeq	r0, r0, r0, lsl #12
   10bc8:	11005001 	tstne	r0, r1
   10bcc:	0026c701 	eoreq	ip, r6, r1, lsl #14
   10bd0:	011d0100 	tsteq	sp, r0, lsl #2
   10bd4:	30007b20 	andcc	r7, r0, r0, lsr #22
   10bd8:	30007b24 	andcc	r7, r0, r4, lsr #22
   10bdc:	08025d01 	stmdaeq	r2, {r0, r8, sl, fp, ip, lr}
   10be0:	16120000 	ldrne	r0, [r2], -r0
   10be4:	01000026 	tsteq	r0, r6, lsr #32
   10be8:	0006001d 	andeq	r0, r6, sp, lsl r0
   10bec:	12500100 	subsne	r0, r0, #0
   10bf0:	00001e5a 	andeq	r1, r0, sl, asr lr
   10bf4:	003a1d01 	eorseq	r1, sl, r1, lsl #26
   10bf8:	51010000 	tstpl	r1, r0
   10bfc:	9f011100 	svcls	0x00011100
   10c00:	01000028 	tsteq	r0, r8, lsr #32
   10c04:	7b240124 	blvc	91109c <MEM_SIZE+0x11109c>
   10c08:	7b283000 	blvc	a1cc10 <MEM_SIZE+0x21cc10>
   10c0c:	5d013000 	stcpl	0, cr3, [r1]
   10c10:	00000834 	andeq	r0, r0, r4, lsr r8
   10c14:	0014e512 	andseq	lr, r4, r2, lsl r5
   10c18:	00240100 	eoreq	r0, r4, r0, lsl #2
   10c1c:	01000006 	tsteq	r0, r6
   10c20:	26161250 	undefined instruction 0x26161250
   10c24:	24010000 	strcs	r0, [r1]
   10c28:	00000600 	andeq	r0, r0, r0, lsl #12
   10c2c:	11005101 	tstne	r0, r1, lsl #2
   10c30:	00267701 	eoreq	r7, r6, r1, lsl #14
   10c34:	01290100 	teqeq	r9, r0, lsl #2
   10c38:	30007b28 	andcc	r7, r0, r8, lsr #22
   10c3c:	30007b2c 	andcc	r7, r0, ip, lsr #22
   10c40:	08665d01 	stmdaeq	r6!, {r0, r8, sl, fp, ip, lr}^
   10c44:	e5120000 	ldr	r0, [r2]
   10c48:	01000014 	tsteq	r0, r4, lsl r0
   10c4c:	00060029 	andeq	r0, r6, r9, lsr #32
   10c50:	12500100 	subsne	r0, r0, #0
   10c54:	00002a9e 	muleq	r0, lr, sl
   10c58:	06002901 	streq	r2, [r0], -r1, lsl #18
   10c5c:	51010000 	tstpl	r1, r0
   10c60:	5a011100 	bpl	55068 <DISABLE_IRQ+0x54fe8>
   10c64:	01000028 	tsteq	r0, r8, lsr #32
   10c68:	7b2c0130 	blvc	b11130 <MEM_SIZE+0x311130>
   10c6c:	7b303000 	blvc	c1cc74 <MEM_SIZE+0x41cc74>
   10c70:	5d013000 	stcpl	0, cr3, [r1]
   10c74:	0000088b 	andeq	r0, r0, fp, lsl #17
   10c78:	00261612 	eoreq	r1, r6, r2, lsl r6
   10c7c:	00300100 	eorseq	r0, r0, r0, lsl #2
   10c80:	01000006 	tsteq	r0, r6
   10c84:	01110050 	tsteq	r1, r0, asr r0
   10c88:	00002ab9 	undefined instruction 0x00002ab9
   10c8c:	30013701 	andcc	r3, r1, r1, lsl #14
   10c90:	3430007b 	ldrtcc	r0, [r0], #-123	; 0x7b
   10c94:	0130007b 	teqeq	r0, fp, ror r0
   10c98:	0008b05d 	andeq	fp, r8, sp, asr r0
   10c9c:	26161200 	ldrcs	r1, [r6], -r0, lsl #4
   10ca0:	37010000 	strcc	r0, [r1, -r0]
   10ca4:	00000600 	andeq	r0, r0, r0, lsl #12
   10ca8:	11005001 	tstne	r0, r1
   10cac:	002a8701 	eoreq	r8, sl, r1, lsl #14
   10cb0:	013e0100 	teqeq	lr, r0, lsl #2
   10cb4:	30007b34 	andcc	r7, r0, r4, lsr fp
   10cb8:	30007b38 	andcc	r7, r0, r8, lsr fp
   10cbc:	08ec5d01 	stmiaeq	ip!, {r0, r8, sl, fp, ip, lr}^
   10cc0:	70130000 	andsvc	r0, r3, r0
   10cc4:	303e0100 	eorscc	r0, lr, r0, lsl #2
   10cc8:	01000007 	tsteq	r0, r7
   10ccc:	76651350 	undefined instruction 0x76651350
   10cd0:	903e0100 	eorsls	r0, lr, r0, lsl #2
   10cd4:	01000000 	tsteq	r0, r0
   10cd8:	13c41251 	bicne	r1, r4, #268435461	; 0x10000005
   10cdc:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
   10ce0:	00000545 	andeq	r0, r0, r5, asr #10
   10ce4:	10005201 	andne	r5, r0, r1, lsl #4
   10ce8:	00264601 	eoreq	r4, r6, r1, lsl #12
   10cec:	01440100 	cmpeq	r4, r0, lsl #2
   10cf0:	30007b38 	andcc	r7, r0, r8, lsr fp
   10cf4:	30007b3c 	andcc	r7, r0, ip, lsr fp
   10cf8:	01115d01 	tsteq	r1, r1, lsl #26
   10cfc:	000028b3 	undefined instruction 0x000028b3
   10d00:	3c014c01 	stccc	12, cr4, [r1], {1}
   10d04:	4030007b 	eorsmi	r0, r0, fp, ror r0
   10d08:	0130007b 	teqeq	r0, fp, ror r0
   10d0c:	0009675d 	andeq	r6, r9, sp, asr r7
   10d10:	11781200 	cmnne	r8, r0, lsl #4
   10d14:	4c010000 	stcmi	0, cr0, [r1], {0}
   10d18:	0000003a 	andeq	r0, r0, sl, lsr r0
   10d1c:	34125001 	ldrcc	r5, [r2], #-1
   10d20:	01000020 	tsteq	r0, r0, lsr #32
   10d24:	0005454c 	andeq	r4, r5, ip, asr #10
   10d28:	12510100 	subsne	r0, r1, #0
   10d2c:	000010ad 	andeq	r1, r0, sp, lsr #1
   10d30:	05454c01 	strbeq	r4, [r5, #-3073]	; 0xc01
   10d34:	52010000 	andpl	r0, r1, #0
   10d38:	00163012 	andseq	r3, r6, r2, lsl r0
   10d3c:	534c0100 	movtpl	r0, #49408	; 0xc100
   10d40:	01000000 	tsteq	r0, r0
   10d44:	0e101253 	mrceq	2, 0, r1, cr0, cr3, {2}
   10d48:	4c010000 	stcmi	0, cr0, [r1], {0}
   10d4c:	00000053 	andeq	r0, r0, r3, asr r0
   10d50:	13009102 	movwne	r9, #258	; 0x102
   10d54:	0074706f 	rsbseq	r7, r4, pc, rrx
   10d58:	003a4c01 	eorseq	r4, sl, r1, lsl #24
   10d5c:	91020000 	tstls	r2, r0
   10d60:	01110004 	tsteq	r1, r4
   10d64:	000028e7 	andeq	r2, r0, r7, ror #17
   10d68:	40015201 	andmi	r5, r1, r1, lsl #4
   10d6c:	4430007b 	ldrtmi	r0, [r0], #-123	; 0x7b
   10d70:	0130007b 	teqeq	r0, fp, ror r0
   10d74:	0009995d 	andeq	r9, r9, sp, asr r9
   10d78:	26161200 	ldrcs	r1, [r6], -r0, lsl #4
   10d7c:	52010000 	andpl	r0, r1, #0
   10d80:	00000600 	andeq	r0, r0, r0, lsl #12
   10d84:	f3125001 	vhadd.u16	d5, d2, d1
   10d88:	01000014 	tsteq	r0, r4, lsl r0
   10d8c:	0005fa52 	andeq	pc, r5, r2, asr sl
   10d90:	00510100 	subseq	r0, r1, r0, lsl #2
   10d94:	286d0111 	stmdacs	sp!, {r0, r4, r8}^
   10d98:	5a010000 	bpl	50da0 <DISABLE_IRQ+0x50d20>
   10d9c:	007b4401 	rsbseq	r4, fp, r1, lsl #8
   10da0:	007b4830 	rsbseq	r4, fp, r0, lsr r8
   10da4:	cb5d0130 	blgt	175126c <MEM_SIZE+0xf5126c>
   10da8:	12000009 	andne	r0, r0, #9
   10dac:	00002616 	andeq	r2, r0, r6, lsl r6
   10db0:	06005a01 	streq	r5, [r0], -r1, lsl #20
   10db4:	50010000 	andpl	r0, r1, r0
   10db8:	0014f312 	andseq	pc, r4, r2, lsl r3
   10dbc:	fa5a0100 	blx	16911c4 <MEM_SIZE+0xe911c4>
   10dc0:	01000005 	tsteq	r0, r5
   10dc4:	01110051 	tsteq	r1, r1, asr r0
   10dc8:	000025ec 	andeq	r2, r0, ip, ror #11
   10dcc:	48016001 	stmdami	r1, {r0, sp, lr}
   10dd0:	4c30007b 	ldcmi	0, cr0, [r0], #-492	; 0xfffffe14
   10dd4:	0130007b 	teqeq	r0, fp, ror r0
   10dd8:	0009fd5d 	andeq	pc, r9, sp, asr sp
   10ddc:	26161200 	ldrcs	r1, [r6], -r0, lsl #4
   10de0:	60010000 	andvs	r0, r1, r0
   10de4:	00000600 	andeq	r0, r0, r0, lsl #12
   10de8:	f3125001 	vhadd.u16	d5, d2, d1
   10dec:	01000014 	tsteq	r0, r4, lsl r0
   10df0:	0005fa60 	andeq	pc, r5, r0, ror #20
   10df4:	00510100 	subseq	r0, r1, r0, lsl #2
   10df8:	29630111 	stmdbcs	r3!, {r0, r4, r8}^
   10dfc:	67010000 	strvs	r0, [r1, -r0]
   10e00:	007b4c01 	rsbseq	r4, fp, r1, lsl #24
   10e04:	007b5030 	rsbseq	r5, fp, r0, lsr r0
   10e08:	2f5d0130 	svccs	0x005d0130
   10e0c:	1200000a 	andne	r0, r0, #10
   10e10:	00002616 	andeq	r2, r0, r6, lsl r6
   10e14:	06006701 	streq	r6, [r0], -r1, lsl #14
   10e18:	50010000 	andpl	r0, r1, r0
   10e1c:	0014f312 	andseq	pc, r4, r2, lsl r3
   10e20:	fa670100 	blx	19d1228 <MEM_SIZE+0x11d1228>
   10e24:	01000005 	tsteq	r0, r5
   10e28:	01110051 	tsteq	r1, r1, asr r0
   10e2c:	00002814 	andeq	r2, r0, r4, lsl r8
   10e30:	50016e01 	andpl	r6, r1, r1, lsl #28
   10e34:	5430007b 	ldrtpl	r0, [r0], #-123	; 0x7b
   10e38:	0130007b 	teqeq	r0, fp, ror r0
   10e3c:	000a6e5d 	andeq	r6, sl, sp, asr lr
   10e40:	26161200 	ldrcs	r1, [r6], -r0, lsl #4
   10e44:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
   10e48:	00000600 	andeq	r0, r0, r0, lsl #12
   10e4c:	f3125001 	vhadd.u16	d5, d2, d1
   10e50:	01000014 	tsteq	r0, r4, lsl r0
   10e54:	0005fa6e 	andeq	pc, r5, lr, ror #20
   10e58:	12510100 	subsne	r0, r1, #0
   10e5c:	00000dc1 	andeq	r0, r0, r1, asr #27
   10e60:	00856e01 	addeq	r6, r5, r1, lsl #28
   10e64:	52010000 	andpl	r0, r1, #0
   10e68:	cb011100 	blgt	55270 <DISABLE_IRQ+0x551f0>
   10e6c:	0100002a 	tsteq	r0, sl, lsr #32
   10e70:	7b540174 	blvc	1511448 <MEM_SIZE+0xd11448>
   10e74:	7b583000 	blvc	161ce7c <MEM_SIZE+0xe1ce7c>
   10e78:	5d013000 	stcpl	0, cr3, [r1]
   10e7c:	00000aad 	andeq	r0, r0, sp, lsr #21
   10e80:	00261612 	eoreq	r1, r6, r2, lsl r6
   10e84:	00740100 	rsbseq	r0, r4, r0, lsl #2
   10e88:	01000006 	tsteq	r0, r6
   10e8c:	2aab1250 	bcs	fead57d4 <rEINTPEND+0xa8ad572c>
   10e90:	74010000 	strvc	r0, [r1]
   10e94:	00000600 	andeq	r0, r0, r0, lsl #12
   10e98:	92125101 	andsls	r5, r2, #1073741824	; 0x40000000
   10e9c:	01000019 	tsteq	r0, r9, lsl r0
   10ea0:	00003a74 	andeq	r3, r0, r4, ror sl
   10ea4:	00520100 	subseq	r0, r2, r0, lsl #2
   10ea8:	28c70111 	stmiacs	r7, {r0, r4, r8}^
   10eac:	7a010000 	bvc	50eb4 <DISABLE_IRQ+0x50e34>
   10eb0:	007b5801 	rsbseq	r5, fp, r1, lsl #16
   10eb4:	007b5c30 	rsbseq	r5, fp, r0, lsr ip
   10eb8:	df5d0130 	svcle	0x005d0130
   10ebc:	1200000a 	andne	r0, r0, #10
   10ec0:	00002616 	andeq	r2, r0, r6, lsl r6
   10ec4:	06007a01 	streq	r7, [r0], -r1, lsl #20
   10ec8:	50010000 	andpl	r0, r1, r0
   10ecc:	0014f312 	andseq	pc, r4, r2, lsl r3
   10ed0:	fa7a0100 	blx	1e912d8 <MEM_SIZE+0x16912d8>
   10ed4:	01000005 	tsteq	r0, r5
   10ed8:	01110051 	tsteq	r1, r1, asr r0
   10edc:	00002afd 	strdeq	r2, [r0], -sp
   10ee0:	5c018101 	stfpld	f0, [r1], {1}
   10ee4:	6030007b 	eorsvs	r0, r0, fp, ror r0
   10ee8:	0130007b 	teqeq	r0, fp, ror r0
   10eec:	000b115d 	andeq	r1, fp, sp, asr r1
   10ef0:	26161200 	ldrcs	r1, [r6], -r0, lsl #4
   10ef4:	81010000 	tsthi	r1, r0
   10ef8:	00000600 	andeq	r0, r0, r0, lsl #12
   10efc:	80125001 	andshi	r5, r2, r1
   10f00:	01000029 	tsteq	r0, r9, lsr #32
   10f04:	00050281 	andeq	r0, r5, r1, lsl #5
   10f08:	00510100 	subseq	r0, r1, r0, lsl #2
   10f0c:	2a3a0111 	bcs	e91358 <MEM_SIZE+0x691358>
   10f10:	87010000 	strhi	r0, [r1, -r0]
   10f14:	007b6001 	rsbseq	r6, fp, r1
   10f18:	007b6430 	rsbseq	r6, fp, r0, lsr r4
   10f1c:	5d5d0130 	ldfple	f0, [sp, #-192]	; 0xffffff40
   10f20:	1200000b 	andne	r0, r0, #11
   10f24:	00002616 	andeq	r2, r0, r6, lsl r6
   10f28:	06008701 	streq	r8, [r0], -r1, lsl #14
   10f2c:	50010000 	andpl	r0, r1, r0
   10f30:	00298012 	eoreq	r8, r9, r2, lsl r0
   10f34:	02870100 	addeq	r0, r7, #0
   10f38:	01000005 	tsteq	r0, r5
   10f3c:	736d1351 	cmnvc	sp, #1140850689	; 0x44000001
   10f40:	87010067 	strhi	r0, [r1, -r7, rrx]
   10f44:	00000545 	andeq	r0, r0, r5, asr #10
   10f48:	8a125201 	bhi	4a5754 <DISABLE_IRQ+0x4a56d4>
   10f4c:	01000017 	tsteq	r0, r7, lsl r0
   10f50:	00003a87 	andeq	r3, r0, r7, lsl #21
   10f54:	00530100 	subseq	r0, r3, r0, lsl #2
   10f58:	26040111 	undefined instruction 0x26040111
   10f5c:	8d010000 	stchi	0, cr0, [r1]
   10f60:	007b6401 	rsbseq	r6, fp, r1, lsl #8
   10f64:	007b6830 	rsbseq	r6, fp, r0, lsr r8
   10f68:	a95d0130 	ldmdbge	sp, {r4, r5, r8}^
   10f6c:	1200000b 	andne	r0, r0, #11
   10f70:	00002616 	andeq	r2, r0, r6, lsl r6
   10f74:	06008d01 	streq	r8, [r0], -r1, lsl #26
   10f78:	50010000 	andpl	r0, r1, r0
   10f7c:	002aab12 	eoreq	sl, sl, r2, lsl fp
   10f80:	008d0100 	addeq	r0, sp, r0, lsl #2
   10f84:	01000006 	tsteq	r0, r6
   10f88:	736d1351 	cmnvc	sp, #1140850689	; 0x44000001
   10f8c:	8d010067 	stchi	0, cr0, [r1, #-412]	; 0xfffffe64
   10f90:	00000545 	andeq	r0, r0, r5, asr #10
   10f94:	92125201 	andsls	r5, r2, #268435456	; 0x10000000
   10f98:	01000019 	tsteq	r0, r9, lsl r0
   10f9c:	00003a8d 	andeq	r3, r0, sp, lsl #21
   10fa0:	00530100 	subseq	r0, r3, r0, lsl #2
   10fa4:	27110111 	undefined instruction 0x27110111
   10fa8:	93010000 	movwls	r0, #4096	; 0x1000
   10fac:	007b6801 	rsbseq	r6, fp, r1, lsl #16
   10fb0:	007b6c30 	rsbseq	r6, fp, r0, lsr ip
   10fb4:	f55d0130 	undefined instruction 0xf55d0130
   10fb8:	1200000b 	andne	r0, r0, #11
   10fbc:	00002616 	andeq	r2, r0, r6, lsl r6
   10fc0:	06009301 	streq	r9, [r0], -r1, lsl #6
   10fc4:	50010000 	andpl	r0, r1, r0
   10fc8:	00298012 	eoreq	r8, r9, r2, lsl r0
   10fcc:	02930100 	addseq	r0, r3, #0
   10fd0:	01000005 	tsteq	r0, r5
   10fd4:	0dc11251 	sfmeq	f1, 2, [r1, #324]	; (stcleq 2, cr1, [r1, #324])	; 0x144
   10fd8:	93010000 	movwls	r0, #4096	; 0x1000
   10fdc:	00000085 	andeq	r0, r0, r5, lsl #1
   10fe0:	6d135201 	lfmvs	f5, 4, [r3, #-4]	; (ldcvs 2, cr5, [r3, #-4])
   10fe4:	01006773 	tsteq	r0, r3, ror r7
   10fe8:	00054593 	muleq	r5, r3, r5
   10fec:	00530100 	subseq	r0, r3, r0, lsl #2
   10ff0:	26b20111 	ssatcs	r0, #19, r1, lsl #2
   10ff4:	99010000 	stmdbls	r1, {}
   10ff8:	007b6c01 	rsbseq	r6, fp, r1, lsl #24
   10ffc:	007b7030 	rsbseq	r7, fp, r0, lsr r0
   11000:	415d0130 	cmpmi	sp, r0, lsr r1
   11004:	1200000c 	andne	r0, r0, #12
   11008:	00002616 	andeq	r2, r0, r6, lsl r6
   1100c:	06009901 	streq	r9, [r0], -r1, lsl #18
   11010:	50010000 	andpl	r0, r1, r0
   11014:	00298012 	eoreq	r8, r9, r2, lsl r0
   11018:	02990100 	addseq	r0, r9, #0
   1101c:	01000005 	tsteq	r0, r5
   11020:	736d1351 	cmnvc	sp, #1140850689	; 0x44000001
   11024:	99010067 	stmdbls	r1, {r0, r1, r2, r5, r6}
   11028:	00000545 	andeq	r0, r0, r5, asr #10
   1102c:	8a125201 	bhi	4a5838 <DISABLE_IRQ+0x4a57b8>
   11030:	01000017 	tsteq	r0, r7, lsl r0
   11034:	00003a99 	muleq	r0, r9, sl
   11038:	00530100 	subseq	r0, r3, r0, lsl #2
   1103c:	28430111 	stmdacs	r3, {r0, r4, r8}^
   11040:	9f010000 	svcls	0x00010000
   11044:	007b7001 	rsbseq	r7, fp, r1
   11048:	007b7430 	rsbseq	r7, fp, r0, lsr r4
   1104c:	805d0130 	subshi	r0, sp, r0, lsr r1
   11050:	1200000c 	andne	r0, r0, #12
   11054:	00002616 	andeq	r2, r0, r6, lsl r6
   11058:	06009f01 	streq	r9, [r0], -r1, lsl #30
   1105c:	50010000 	andpl	r0, r1, r0
   11060:	00298012 	eoreq	r8, r9, r2, lsl r0
   11064:	029f0100 	addseq	r0, pc, #0
   11068:	01000005 	tsteq	r0, r5
   1106c:	0dc11251 	sfmeq	f1, 2, [r1, #324]	; (stcleq 2, cr1, [r1, #324])	; 0x144
   11070:	9f010000 	svcls	0x00010000
   11074:	00000085 	andeq	r0, r0, r5, lsl #1
   11078:	11005201 	tstne	r0, r1, lsl #4
   1107c:	0028ff01 	eoreq	pc, r8, r1, lsl #30
   11080:	01a70100 	undefined instruction 0x01a70100
   11084:	30007b74 	andcc	r7, r0, r4, ror fp
   11088:	30007b78 	andcc	r7, r0, r8, ror fp
   1108c:	0cb25d01 	ldceq	13, cr5, [r2], #4
   11090:	16120000 	ldrne	r0, [r2], -r0
   11094:	01000026 	tsteq	r0, r6, lsr #32
   11098:	000600a7 	andeq	r0, r6, r7, lsr #1
   1109c:	12500100 	subsne	r0, r0, #0
   110a0:	00002980 	andeq	r2, r0, r0, lsl #19
   110a4:	0502a701 	streq	sl, [r2, #-1793]	; 0x701
   110a8:	51010000 	tstpl	r1, r0
   110ac:	ea011100 	b	554b4 <DISABLE_IRQ+0x55434>
   110b0:	01000029 	tsteq	r0, r9, lsr #32
   110b4:	7b7801af 	blvc	1e11778 <MEM_SIZE+0x1611778>
   110b8:	7b7c3000 	blvc	1f1d0c0 <MEM_SIZE+0x171d0c0>
   110bc:	5d013000 	stcpl	0, cr3, [r1]
   110c0:	00000ce4 	andeq	r0, r0, r4, ror #25
   110c4:	00261612 	eoreq	r1, r6, r2, lsl r6
   110c8:	00af0100 	adceq	r0, pc, r0, lsl #2
   110cc:	01000006 	tsteq	r0, r6
   110d0:	29801250 	stmibcs	r0, {r4, r6, r9, ip}
   110d4:	af010000 	svcge	0x00010000
   110d8:	00000502 	andeq	r0, r0, r2, lsl #10
   110dc:	11005101 	tstne	r0, r1, lsl #2
   110e0:	00280001 	eoreq	r0, r8, r1
   110e4:	01b60100 	undefined instruction 0x01b60100
   110e8:	30007b7c 	andcc	r7, r0, ip, ror fp
   110ec:	30007b80 	andcc	r7, r0, r0, lsl #23
   110f0:	0d3e5d01 	ldceq	13, cr5, [lr, #-4]!
   110f4:	16120000 	ldrne	r0, [r2], -r0
   110f8:	01000026 	tsteq	r0, r6, lsr #32
   110fc:	000600b6 	strheq	r0, [r6], -r6
   11100:	12500100 	subsne	r0, r0, #0
   11104:	00001248 	andeq	r1, r0, r8, asr #4
   11108:	0d3eb601 	ldceq	6, cr11, [lr, #-4]!
   1110c:	51010000 	tstpl	r1, r0
   11110:	00046a12 	andeq	r6, r4, r2, lsl sl
   11114:	25b60100 	ldrcs	r0, [r6, #256]!	; 0x100
   11118:	01000001 	tsteq	r0, r1
   1111c:	05f61252 	ldrbeq	r1, [r6, #594]!	; 0x252
   11120:	b6010000 	strlt	r0, [r1], -r0
   11124:	0000003a 	andeq	r0, r0, sl, lsr r0
   11128:	73125301 	tstvc	r2, #67108864	; 0x4000000
   1112c:	01000004 	tsteq	r0, r4
   11130:	00003ab6 	undefined instruction 0x00003ab6
   11134:	00910200 	addseq	r0, r1, r0, lsl #4
   11138:	06040800 	streq	r0, [r4], -r0, lsl #16
   1113c:	11000006 	tstne	r0, r6
   11140:	00279f01 	eoreq	r9, r7, r1, lsl #30
   11144:	01bc0100 	undefined instruction 0x01bc0100
   11148:	30007b80 	andcc	r7, r0, r0, lsl #23
   1114c:	30007b84 	andcc	r7, r0, r4, lsl #23
   11150:	0d835d01 	stceq	13, cr5, [r3, #4]
   11154:	16120000 	ldrne	r0, [r2], -r0
   11158:	01000026 	tsteq	r0, r6, lsr #32
   1115c:	000600bc 	strheq	r0, [r6], -ip
   11160:	13500100 	cmpne	r0, #0
   11164:	00626374 	rsbeq	r6, r2, r4, ror r3
   11168:	0600bc01 	streq	fp, [r0], -r1, lsl #24
   1116c:	51010000 	tstpl	r1, r0
   11170:	00124112 	andseq	r4, r2, r2, lsl r1
   11174:	3abc0100 	bcc	fef1157c <rEINTPEND+0xa8f114d4>
   11178:	01000000 	tsteq	r0, r0
   1117c:	01110052 	tsteq	r1, r2, asr r0
   11180:	0000268a 	andeq	r2, r0, sl, lsl #13
   11184:	8401c201 	strhi	ip, [r1], #-513	; 0x201
   11188:	8830007b 	ldmdahi	r0!, {r0, r1, r3, r4, r5, r6}
   1118c:	0130007b 	teqeq	r0, fp, ror r0
   11190:	000dc25d 	andeq	ip, sp, sp, asr r2
   11194:	26161200 	ldrcs	r1, [r6], -r0, lsl #4
   11198:	c2010000 	andgt	r0, r1, #0
   1119c:	00000600 	andeq	r0, r0, r0, lsl #12
   111a0:	50125001 	andspl	r5, r2, r1
   111a4:	0100002a 	tsteq	r0, sl, lsr #32
   111a8:	000d3ec2 	andeq	r3, sp, r2, asr #29
   111ac:	12510100 	subsne	r0, r1, #0
   111b0:	00000dc1 	andeq	r0, r0, r1, asr #27
   111b4:	0085c201 	addeq	ip, r5, r1, lsl #4
   111b8:	52010000 	andpl	r0, r1, #0
   111bc:	6b011100 	blvs	555c4 <DISABLE_IRQ+0x55544>
   111c0:	01000027 	tsteq	r0, r7, lsr #32
   111c4:	7b8801c7 	blvc	fe2118e8 <rEINTPEND+0xa8211840>
   111c8:	7b8c3000 	blvc	fe31d1d0 <rEINTPEND+0xa831d128>
   111cc:	5d013000 	stcpl	0, cr3, [r1]
   111d0:	00000e01 	andeq	r0, r0, r1, lsl #28
   111d4:	00261612 	eoreq	r1, r6, r2, lsl r6
   111d8:	00c70100 	sbceq	r0, r7, r0, lsl #2
   111dc:	01000006 	tsteq	r0, r6
   111e0:	2a501250 	bcs	1415b28 <MEM_SIZE+0xc15b28>
   111e4:	c7010000 	strgt	r0, [r1, -r0]
   111e8:	00000d3e 	andeq	r0, r0, lr, lsr sp
   111ec:	c1125101 	tstgt	r2, r1, lsl #2
   111f0:	0100000d 	tsteq	r0, sp
   111f4:	000085c7 	andeq	r8, r0, r7, asr #11
   111f8:	00520100 	subseq	r0, r2, r0, lsl #2
   111fc:	261b0111 	undefined instruction 0x261b0111
   11200:	cc010000 	stcgt	0, cr0, [r1], {0}
   11204:	007b8c01 	rsbseq	r8, fp, r1, lsl #24
   11208:	007b9030 	rsbseq	r9, fp, r0, lsr r0
   1120c:	335d0130 	cmpcc	sp, #12
   11210:	1200000e 	andne	r0, r0, #14
   11214:	00002616 	andeq	r2, r0, r6, lsl r6
   11218:	0600cc01 	streq	ip, [r0], -r1, lsl #24
   1121c:	50010000 	andpl	r0, r1, r0
   11220:	00086712 	andeq	r6, r8, r2, lsl r7
   11224:	00cc0100 	sbceq	r0, ip, r0, lsl #2
   11228:	01000006 	tsteq	r0, r6
   1122c:	01110051 	tsteq	r1, r1, asr r0
   11230:	00002a5a 	andeq	r2, r0, sl, asr sl
   11234:	9001d301 	andls	sp, r1, r1, lsl #6
   11238:	9430007b 	ldrtls	r0, [r0], #-123	; 0x7b
   1123c:	0130007b 	teqeq	r0, fp, ror r0
   11240:	000e725d 	andeq	r7, lr, sp, asr r2
   11244:	26161200 	ldrcs	r1, [r6], -r0, lsl #4
   11248:	d3010000 	movwle	r0, #4096	; 0x1000
   1124c:	00000600 	andeq	r0, r0, r0, lsl #12
   11250:	50125001 	andspl	r5, r2, r1
   11254:	0100002a 	tsteq	r0, sl, lsr #32
   11258:	000d3ed3 	ldrdeq	r3, [sp], -r3
   1125c:	12510100 	subsne	r0, r1, #0
   11260:	00000dc1 	andeq	r0, r0, r1, asr #27
   11264:	0085d301 	addeq	sp, r5, r1, lsl #6
   11268:	52010000 	andpl	r0, r1, #0
   1126c:	4e011100 	adfmis	f1, f1, f0
   11270:	01000027 	tsteq	r0, r7, lsr #32
   11274:	7b9401d9 	blvc	fe5119e0 <rEINTPEND+0xa8511938>
   11278:	7b983000 	blvc	fe61d280 <rEINTPEND+0xa861d1d8>
   1127c:	5d013000 	stcpl	0, cr3, [r1]
   11280:	00000ea4 	andeq	r0, r0, r4, lsr #29
   11284:	00261612 	eoreq	r1, r6, r2, lsl r6
   11288:	00d90100 	sbcseq	r0, r9, r0, lsl #2
   1128c:	01000006 	tsteq	r0, r6
   11290:	2a501250 	bcs	1415bd8 <MEM_SIZE+0xc15bd8>
   11294:	d9010000 	stmdble	r1, {}
   11298:	00000d3e 	andeq	r0, r0, lr, lsr sp
   1129c:	11005101 	tstne	r0, r1, lsl #2
   112a0:	0029b801 	eoreq	fp, r9, r1, lsl #16
   112a4:	01dd0100 	bicseq	r0, sp, r0, lsl #2
   112a8:	30007b98 	mulcc	r0, r8, fp
   112ac:	30007b9c 	mulcc	r0, ip, fp
   112b0:	0ed65d01 	cdpeq	13, 13, cr5, cr6, cr1, {0}
   112b4:	16120000 	ldrne	r0, [r2], -r0
   112b8:	01000026 	tsteq	r0, r6, lsr #32
   112bc:	000600dd 	ldrdeq	r0, [r6], -sp
   112c0:	12500100 	subsne	r0, r0, #0
   112c4:	00002aab 	andeq	r2, r0, fp, lsr #21
   112c8:	0600dd01 	streq	sp, [r0], -r1, lsl #26
   112cc:	51010000 	tstpl	r1, r0
   112d0:	2f011100 	svccs	0x00011100
   112d4:	01000028 	tsteq	r0, r8, lsr #32
   112d8:	7b9c01e2 	blvc	fe711a68 <rEINTPEND+0xa87119c0>
   112dc:	7ba03000 	blvc	fe81d2e4 <rEINTPEND+0xa881d23c>
   112e0:	5d013000 	stcpl	0, cr3, [r1]
   112e4:	00000f08 	andeq	r0, r0, r8, lsl #30
   112e8:	00261612 	eoreq	r1, r6, r2, lsl r6
   112ec:	00e20100 	rsceq	r0, r2, r0, lsl #2
   112f0:	01000006 	tsteq	r0, r6
   112f4:	2a501250 	bcs	1415c3c <MEM_SIZE+0xc15c3c>
   112f8:	e2010000 	and	r0, r1, #0
   112fc:	00000d3e 	andeq	r0, r0, lr, lsr sp
   11300:	11005101 	tstne	r0, r1, lsl #2
   11304:	0027b401 	eoreq	fp, r7, r1, lsl #8
   11308:	01e70100 	mvneq	r0, r0, lsl #2
   1130c:	30007ba0 	andcc	r7, r0, r0, lsr #23
   11310:	30007ba4 	andcc	r7, r0, r4, lsr #23
   11314:	0f2d5d01 	svceq	0x002d5d01
   11318:	e5120000 	ldr	r0, [r2]
   1131c:	01000014 	tsteq	r0, r4, lsl r0
   11320:	000600e7 	andeq	r0, r6, r7, ror #1
   11324:	00500100 	subseq	r0, r0, r0, lsl #2
   11328:	27880111 	usada8cs	r8, r1, r1, r0
   1132c:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
   11330:	007ba401 	rsbseq	sl, fp, r1, lsl #8
   11334:	007ba830 	rsbseq	sl, fp, r0, lsr r8
   11338:	5f5d0130 	svcpl	0x005d0130
   1133c:	1200000f 	andne	r0, r0, #15
   11340:	000014e5 	andeq	r1, r0, r5, ror #9
   11344:	0600ee01 	streq	lr, [r0], -r1, lsl #28
   11348:	50010000 	andpl	r0, r1, r0
   1134c:	002ae012 	eoreq	lr, sl, r2, lsl r0
   11350:	5fee0100 	svcpl	0x00ee0100
   11354:	0100000f 	tsteq	r0, pc
   11358:	04080051 	streq	r0, [r8], #-81	; 0x51
   1135c:	0000068a 	andeq	r0, r0, sl, lsl #13
   11360:	25c00111 	strbcs	r0, [r0, #273]	; 0x111
   11364:	f5010000 	undefined instruction 0xf5010000
   11368:	007ba801 	rsbseq	sl, fp, r1, lsl #16
   1136c:	007bac30 	rsbseq	sl, fp, r0, lsr ip
   11370:	975d0130 	smmlarls	sp, r0, r1, r0
   11374:	1200000f 	andne	r0, r0, #15
   11378:	000014e5 	andeq	r1, r0, r5, ror #9
   1137c:	0600f501 	streq	pc, [r0], -r1, lsl #10
   11380:	50010000 	andpl	r0, r1, r0
   11384:	002ae012 	eoreq	lr, sl, r2, lsl r0
   11388:	5ff50100 	svcpl	0x00f50100
   1138c:	0100000f 	tsteq	r0, pc
   11390:	01110051 	tsteq	r1, r1, asr r0
   11394:	00002a71 	andeq	r2, r0, r1, ror sl
   11398:	ac01fb01 	stcge	11, cr15, [r1], {1}
   1139c:	b030007b 	eorslt	r0, r0, fp, ror r0
   113a0:	0130007b 	teqeq	r0, fp, ror r0
   113a4:	000fc95d 	andeq	ip, pc, sp, asr r9
   113a8:	14e51200 	strbtne	r1, [r5], #512	; 0x200
   113ac:	fb010000 	blx	513b6 <DISABLE_IRQ+0x51336>
   113b0:	00000600 	andeq	r0, r0, r0, lsl #12
   113b4:	e0125001 	ands	r5, r2, r1
   113b8:	0100002a 	tsteq	r0, sl, lsr #32
   113bc:	000fc9fb 	strdeq	ip, [pc], -fp
   113c0:	00510100 	subseq	r0, r1, r0, lsl #2
   113c4:	06e80408 	strbteq	r0, [r8], r8, lsl #8
   113c8:	01140000 	tsteq	r4, r0
   113cc:	00002ae9 	andeq	r2, r0, r9, ror #21
   113d0:	01010401 	tsteq	r1, r1, lsl #8
   113d4:	30007bb0 	undefined instruction 0x30007bb0
   113d8:	30007bb4 	undefined instruction 0x30007bb4
   113dc:	10205d01 	eorne	r5, r0, r1, lsl #26
   113e0:	e5150000 	ldr	r0, [r5]
   113e4:	01000014 	tsteq	r0, r4, lsl r0
   113e8:	06000104 	streq	r0, [r0], -r4, lsl #2
   113ec:	50010000 	andpl	r0, r1, r0
   113f0:	002a1c15 	eoreq	r1, sl, r5, lsl ip
   113f4:	01040100 	tsteq	r4, r0, lsl #2
   113f8:	00001020 	andeq	r1, r0, r0, lsr #32
   113fc:	e0155101 	ands	r5, r5, r1, lsl #2
   11400:	01000008 	tsteq	r0, r8
   11404:	01250104 	teqeq	r5, r4, lsl #2
   11408:	52010000 	andpl	r0, r1, #0
   1140c:	000f5e15 	andeq	r5, pc, r5, lsl lr
   11410:	01040100 	tsteq	r4, r0, lsl #2
   11414:	00000053 	andeq	r0, r0, r3, asr r0
   11418:	08005301 	stmdaeq	r0, {r0, r8, r9, ip, lr}
   1141c:	00063a04 	andeq	r3, r6, r4, lsl #20
   11420:	3d011400 	cfstrscc	mvf1, [r1]
   11424:	01000027 	tsteq	r0, r7, lsr #32
   11428:	b401010a 	strlt	r0, [r1], #-266	; 0x10a
   1142c:	b830007b 	ldmdalt	r0!, {r0, r1, r3, r4, r5, r6}
   11430:	0130007b 	teqeq	r0, fp, ror r0
   11434:	00105b5d 	andseq	r5, r0, sp, asr fp
   11438:	14e51500 	strbtne	r1, [r5], #1280	; 0x500
   1143c:	0a010000 	beq	51444 <DISABLE_IRQ+0x513c4>
   11440:	00060001 	andeq	r0, r6, r1
   11444:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
   11448:	00002a1c 	andeq	r2, r0, ip, lsl sl
   1144c:	20010a01 	andcs	r0, r1, r1, lsl #20
   11450:	01000010 	tsteq	r0, r0, lsl r0
   11454:	01140051 	tsteq	r4, r1, asr r0
   11458:	00002726 	andeq	r2, r0, r6, lsr #14
   1145c:	01011001 	tsteq	r1, r1
   11460:	30007bb8 	undefined instruction 0x30007bb8
   11464:	30007bbc 	undefined instruction 0x30007bbc
   11468:	109e5d01 	addsne	r5, lr, r1, lsl #26
   1146c:	e5150000 	ldr	r0, [r5]
   11470:	01000014 	tsteq	r0, r4, lsl r0
   11474:	06000110 	undefined instruction 0x06000110
   11478:	50010000 	andpl	r0, r1, r0
   1147c:	002a1c15 	eoreq	r1, sl, r5, lsl ip
   11480:	01100100 	tsteq	r0, r0, lsl #2
   11484:	00001020 	andeq	r1, r0, r0, lsr #32
   11488:	c1155101 	tstgt	r5, r1, lsl #2
   1148c:	0100000d 	tsteq	r0, sp
   11490:	00850110 	addeq	r0, r5, r0, lsl r1
   11494:	52010000 	andpl	r0, r1, #0
   11498:	e6011400 	str	r1, [r1], -r0, lsl #8
   1149c:	01000027 	tsteq	r0, r7, lsr #32
   114a0:	bc010117 	stflts	f0, [r1], {23}
   114a4:	c030007b 	eorsgt	r0, r0, fp, ror r0
   114a8:	0130007b 	teqeq	r0, fp, ror r0
   114ac:	0010d35d 	andseq	sp, r0, sp, asr r3
   114b0:	14e51500 	strbtne	r1, [r5], #1280	; 0x500
   114b4:	17010000 	strne	r0, [r1, -r0]
   114b8:	00060001 	andeq	r0, r6, r1
   114bc:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
   114c0:	00002616 	andeq	r2, r0, r6, lsl r6
   114c4:	00011701 	andeq	r1, r1, r1, lsl #14
   114c8:	01000006 	tsteq	r0, r6
   114cc:	01140051 	tsteq	r4, r1, asr r0
   114d0:	00002a26 	andeq	r2, r0, r6, lsr #20
   114d4:	01011e01 	tsteq	r1, r1, lsl #28
   114d8:	30007bc0 	andcc	r7, r0, r0, asr #23
   114dc:	30007bc4 	andcc	r7, r0, r4, asr #23
   114e0:	11085d01 	tstne	r8, r1, lsl #26
   114e4:	e5150000 	ldr	r0, [r5]
   114e8:	01000014 	tsteq	r0, r4, lsl r0
   114ec:	0600011e 	undefined instruction 0x0600011e
   114f0:	50010000 	andpl	r0, r1, r0
   114f4:	002a1c15 	eoreq	r1, sl, r5, lsl ip
   114f8:	011e0100 	tsteq	lr, r0, lsl #2
   114fc:	00001020 	andeq	r1, r0, r0, lsr #32
   11500:	14005101 	strne	r5, [r0], #-257	; 0x101
   11504:	00293001 	eoreq	r3, r9, r1
   11508:	01250100 	teqeq	r5, r0, lsl #2
   1150c:	007bc401 	rsbseq	ip, fp, r1, lsl #8
   11510:	007bc830 	rsbseq	ip, fp, r0, lsr r8
   11514:	3d5d0130 	ldfcce	f0, [sp, #-192]	; 0xffffff40
   11518:	15000011 	strne	r0, [r0, #-17]
   1151c:	000014e5 	andeq	r1, r0, r5, ror #9
   11520:	00012501 	andeq	r2, r1, r1, lsl #10
   11524:	01000006 	tsteq	r0, r6
   11528:	0aba1550 	beq	fee96a70 <rEINTPEND+0xa8e969c8>
   1152c:	25010000 	strcs	r0, [r1]
   11530:	00113d01 	andseq	r3, r1, r1, lsl #26
   11534:	00510100 	subseq	r0, r1, r0, lsl #2
   11538:	05580408 	ldrbeq	r0, [r8, #-1032]	; 0x408
   1153c:	01140000 	tsteq	r4, r0
   11540:	000027cc 	andeq	r2, r0, ip, asr #15
   11544:	01012c01 	tsteq	r1, r1, lsl #24
   11548:	30007bc8 	andcc	r7, r0, r8, asr #23
   1154c:	30007bcc 	andcc	r7, r0, ip, asr #23
   11550:	11a35d01 	undefined instruction 0x11a35d01
   11554:	e5150000 	ldr	r0, [r5]
   11558:	01000014 	tsteq	r0, r4, lsl r0
   1155c:	0600012c 	streq	r0, [r0], -ip, lsr #2
   11560:	50010000 	andpl	r0, r1, r0
   11564:	000aba15 	andeq	fp, sl, r5, lsl sl
   11568:	012c0100 	teqeq	ip, r0, lsl #2
   1156c:	0000113d 	andeq	r1, r0, sp, lsr r1
   11570:	6d165101 	ldfvss	f5, [r6, #-4]
   11574:	01006773 	tsteq	r0, r3, ror r7
   11578:	0545012c 	strbeq	r0, [r5, #-300]	; 0x12c
   1157c:	52010000 	andpl	r0, r1, #0
   11580:	00163015 	andseq	r3, r6, r5, lsl r0
   11584:	012c0100 	teqeq	ip, r0, lsl #2
   11588:	0000009b 	muleq	r0, fp, r0
   1158c:	8a155301 	bhi	566198 <DISABLE_IRQ+0x566118>
   11590:	01000017 	tsteq	r0, r7, lsl r0
   11594:	003a012c 	eorseq	r0, sl, ip, lsr #2
   11598:	91020000 	tstls	r2, r0
   1159c:	01140000 	tsteq	r4, r0
   115a0:	000026f6 	strdeq	r2, [r0], -r6
   115a4:	01013201 	tsteq	r1, r1, lsl #4
   115a8:	30007bcc 	andcc	r7, r0, ip, asr #23
   115ac:	30007bd0 	ldrdcc	r7, [r0], -r0
   115b0:	12035d01 	andne	r5, r3, #64	; 0x40
   115b4:	e5150000 	ldr	r0, [r5]
   115b8:	01000014 	tsteq	r0, r4, lsl r0
   115bc:	06000132 	undefined instruction 0x06000132
   115c0:	50010000 	andpl	r0, r1, r0
   115c4:	000aba15 	andeq	fp, sl, r5, lsl sl
   115c8:	01320100 	teqeq	r2, r0, lsl #2
   115cc:	0000113d 	andeq	r1, r0, sp, lsr r1
   115d0:	6d165101 	ldfvss	f5, [r6, #-4]
   115d4:	01006773 	tsteq	r0, r3, ror r7
   115d8:	05450132 	strbeq	r0, [r5, #-306]	; 0x132
   115dc:	52010000 	andpl	r0, r1, #0
   115e0:	00163015 	andseq	r3, r6, r5, lsl r0
   115e4:	01320100 	teqeq	r2, r0, lsl #2
   115e8:	0000009b 	muleq	r0, fp, r0
   115ec:	8a155301 	bhi	5661f8 <DISABLE_IRQ+0x566178>
   115f0:	01000017 	tsteq	r0, r7, lsl r0
   115f4:	003a0132 	eorseq	r0, sl, r2, lsr r1
   115f8:	91020000 	tstls	r2, r0
   115fc:	01140000 	tsteq	r4, r0
   11600:	00002b11 	andeq	r2, r0, r1, lsl fp
   11604:	01013901 	tsteq	r1, r1, lsl #18
   11608:	30007bd0 	ldrdcc	r7, [r0], -r0
   1160c:	30007bd4 	ldrdcc	r7, [r0], -r4
   11610:	12635d01 	rsbne	r5, r3, #64	; 0x40
   11614:	e5150000 	ldr	r0, [r5]
   11618:	01000014 	tsteq	r0, r4, lsl r0
   1161c:	06000139 	undefined instruction 0x06000139
   11620:	50010000 	andpl	r0, r1, r0
   11624:	002aab15 	eoreq	sl, sl, r5, lsl fp
   11628:	01390100 	teqeq	r9, r0, lsl #2
   1162c:	00000600 	andeq	r0, r0, r0, lsl #12
   11630:	6d165101 	ldfvss	f5, [r6, #-4]
   11634:	01006773 	tsteq	r0, r3, ror r7
   11638:	05450139 	strbeq	r0, [r5, #-313]	; 0x139
   1163c:	52010000 	andpl	r0, r1, #0
   11640:	00163015 	andseq	r3, r6, r5, lsl r0
   11644:	01390100 	teqeq	r9, r0, lsl #2
   11648:	0000009b 	muleq	r0, fp, r0
   1164c:	92155301 	andsls	r5, r5, #67108864	; 0x4000000
   11650:	01000019 	tsteq	r0, r9, lsl r0
   11654:	003a0139 	eorseq	r0, sl, r9, lsr r1
   11658:	91020000 	tstls	r2, r0
   1165c:	01140000 	tsteq	r4, r0
   11660:	00002949 	andeq	r2, r0, r9, asr #18
   11664:	01013e01 	tsteq	r1, r1, lsl #28
   11668:	30007bd4 	ldrdcc	r7, [r0], -r4
   1166c:	30007bd8 	ldrdcc	r7, [r0], -r8
   11670:	12c35d01 	sbcne	r5, r3, #64	; 0x40
   11674:	e5150000 	ldr	r0, [r5]
   11678:	01000014 	tsteq	r0, r4, lsl r0
   1167c:	0600013e 	undefined instruction 0x0600013e
   11680:	50010000 	andpl	r0, r1, r0
   11684:	000aba15 	andeq	fp, sl, r5, lsl sl
   11688:	013e0100 	teqeq	lr, r0, lsl #2
   1168c:	0000113d 	andeq	r1, r0, sp, lsr r1
   11690:	c1155101 	tstgt	r5, r1, lsl #2
   11694:	0100000d 	tsteq	r0, sp
   11698:	0085013e 	addeq	r0, r5, lr, lsr r1
   1169c:	52010000 	andpl	r0, r1, #0
   116a0:	67736d16 	undefined instruction 0x67736d16
   116a4:	013e0100 	teqeq	lr, r0, lsl #2
   116a8:	00000545 	andeq	r0, r0, r5, asr #10
   116ac:	30155301 	andscc	r5, r5, r1, lsl #6
   116b0:	01000016 	tsteq	r0, r6, lsl r0
   116b4:	0053013e 	subseq	r0, r3, lr, lsr r1
   116b8:	91020000 	tstls	r2, r0
   116bc:	01140000 	tsteq	r4, r0
   116c0:	0000299c 	muleq	r0, ip, r9
   116c4:	01014301 	tsteq	r1, r1, lsl #6
   116c8:	30007bd8 	ldrdcc	r7, [r0], -r8
   116cc:	30007bdc 	ldrdcc	r7, [r0], -ip
   116d0:	13065d01 	movwne	r5, #27905	; 0x6d01
   116d4:	e5150000 	ldr	r0, [r5]
   116d8:	01000014 	tsteq	r0, r4, lsl r0
   116dc:	06000143 	streq	r0, [r0], -r3, asr #2
   116e0:	50010000 	andpl	r0, r1, r0
   116e4:	000aba15 	andeq	fp, sl, r5, lsl sl
   116e8:	01430100 	cmpeq	r3, r0, lsl #2
   116ec:	0000113d 	andeq	r1, r0, sp, lsr r1
   116f0:	c1155101 	tstgt	r5, r1, lsl #2
   116f4:	0100000d 	tsteq	r0, sp
   116f8:	00850143 	addeq	r0, r5, r3, asr #2
   116fc:	52010000 	andpl	r0, r1, #0
   11700:	5f011400 	svcpl	0x00011400
   11704:	01000026 	tsteq	r0, r6, lsr #32
   11708:	dc010148 	stfles	f0, [r1], {72}	; 0x48
   1170c:	e030007b 	eors	r0, r0, fp, ror r0
   11710:	0130007b 	teqeq	r0, fp, ror r0
   11714:	00133b5d 	andseq	r3, r3, sp, asr fp
   11718:	14e51500 	strbtne	r1, [r5], #1280	; 0x500
   1171c:	48010000 	stmdami	r1, {}
   11720:	00060001 	andeq	r0, r6, r1
   11724:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
   11728:	00000aba 	undefined instruction 0x00000aba
   1172c:	3d014801 	stccc	8, cr4, [r1, #-4]
   11730:	01000011 	tsteq	r0, r1, lsl r0
   11734:	01140051 	tsteq	r4, r1, asr r0
   11738:	00002b2d 	andeq	r2, r0, sp, lsr #22
   1173c:	01014e01 	tsteq	r1, r1, lsl #28
   11740:	30007be0 	andcc	r7, r0, r0, ror #23
   11744:	30007be4 	andcc	r7, r0, r4, ror #23
   11748:	13705d01 	cmnne	r0, #64	; 0x40
   1174c:	e5150000 	ldr	r0, [r5]
   11750:	01000014 	tsteq	r0, r4, lsl r0
   11754:	0600014e 	streq	r0, [r0], -lr, asr #2
   11758:	50010000 	andpl	r0, r1, r0
   1175c:	000aba15 	andeq	fp, sl, r5, lsl sl
   11760:	014e0100 	cmpeq	lr, r0, lsl #2
   11764:	0000113d 	andeq	r1, r0, sp, lsr r1
   11768:	14005101 	strne	r5, [r0], #-257	; 0x101
   1176c:	0029cf01 	eoreq	ip, r9, r1, lsl #30
   11770:	01550100 	cmpeq	r5, r0, lsl #2
   11774:	007be401 	rsbseq	lr, fp, r1, lsl #8
   11778:	007be830 	rsbseq	lr, fp, r0, lsr r8
   1177c:	a55d0130 	ldrbge	r0, [sp, #-304]	; 0x130
   11780:	15000013 	strne	r0, [r0, #-19]
   11784:	000014e5 	andeq	r1, r0, r5, ror #9
   11788:	00015501 	andeq	r5, r1, r1, lsl #10
   1178c:	01000006 	tsteq	r0, r6
   11790:	26a11550 	ssatcs	r1, #2, r0, asr #10
   11794:	55010000 	strpl	r0, [r1]
   11798:	0013a501 	andseq	sl, r3, r1, lsl #10
   1179c:	00510100 	subseq	r0, r1, r0, lsl #2
   117a0:	05d20408 	ldrbeq	r0, [r2, #1032]	; 0x408
   117a4:	01140000 	tsteq	r4, r0
   117a8:	0000298a 	andeq	r2, r0, sl, lsl #19
   117ac:	01015c01 	tsteq	r1, r1, lsl #24
   117b0:	30007be8 	andcc	r7, r0, r8, ror #23
   117b4:	30007bec 	andcc	r7, r0, ip, ror #23
   117b8:	140b5d01 	strne	r5, [fp], #-3329	; 0xd01
   117bc:	e5150000 	ldr	r0, [r5]
   117c0:	01000014 	tsteq	r0, r4, lsl r0
   117c4:	0600015c 	undefined instruction 0x0600015c
   117c8:	50010000 	andpl	r0, r1, r0
   117cc:	0026a115 	eoreq	sl, r6, r5, lsl r1
   117d0:	015c0100 	cmpeq	ip, r0, lsl #2
   117d4:	000013a5 	andeq	r1, r0, r5, lsr #7
   117d8:	ad155101 	ldfges	f5, [r5, #-4]
   117dc:	01000010 	tsteq	r0, r0, lsl r0
   117e0:	02cb015c 	sbceq	r0, fp, #23
   117e4:	52010000 	andpl	r0, r1, #0
   117e8:	00163015 	andseq	r3, r6, r5, lsl r0
   117ec:	015c0100 	cmpeq	ip, r0, lsl #2
   117f0:	0000009b 	muleq	r0, fp, r0
   117f4:	8a155301 	bhi	566400 <DISABLE_IRQ+0x566380>
   117f8:	01000017 	tsteq	r0, r7, lsl r0
   117fc:	003a015c 	eorseq	r0, sl, ip, asr r1
   11800:	91020000 	tstls	r2, r0
   11804:	01140000 	tsteq	r4, r0
   11808:	000026e3 	andeq	r2, r0, r3, ror #13
   1180c:	01016101 	tsteq	r1, r1, lsl #2
   11810:	30007bec 	andcc	r7, r0, ip, ror #23
   11814:	30007bf0 	strdcc	r7, [r0], -r0
   11818:	146b5d01 	strbtne	r5, [fp], #-3329	; 0xd01
   1181c:	e5150000 	ldr	r0, [r5]
   11820:	01000014 	tsteq	r0, r4, lsl r0
   11824:	06000161 	streq	r0, [r0], -r1, ror #2
   11828:	50010000 	andpl	r0, r1, r0
   1182c:	0026a115 	eoreq	sl, r6, r5, lsl r1
   11830:	01610100 	cmneq	r1, r0, lsl #2
   11834:	000013a5 	andeq	r1, r0, r5, lsr #7
   11838:	ad155101 	ldfges	f5, [r5, #-4]
   1183c:	01000010 	tsteq	r0, r0, lsl r0
   11840:	02cb0161 	sbceq	r0, fp, #1073741848	; 0x40000018
   11844:	52010000 	andpl	r0, r1, #0
   11848:	00163015 	andseq	r3, r6, r5, lsl r0
   1184c:	01610100 	cmneq	r1, r0, lsl #2
   11850:	0000009b 	muleq	r0, fp, r0
   11854:	8a155301 	bhi	566460 <DISABLE_IRQ+0x5663e0>
   11858:	01000017 	tsteq	r0, r7, lsl r0
   1185c:	003a0161 	eorseq	r0, sl, r1, ror #2
   11860:	91020000 	tstls	r2, r0
   11864:	01140000 	tsteq	r4, r0
   11868:	00002912 	andeq	r2, r0, r2, lsl r9
   1186c:	01016801 	tsteq	r1, r1, lsl #16
   11870:	30007bf0 	strdcc	r7, [r0], -r0
   11874:	30007bf4 	strdcc	r7, [r0], -r4
   11878:	14cb5d01 	strbne	r5, [fp], #3329	; 0xd01
   1187c:	e5150000 	ldr	r0, [r5]
   11880:	01000014 	tsteq	r0, r4, lsl r0
   11884:	06000168 	streq	r0, [r0], -r8, ror #2
   11888:	50010000 	andpl	r0, r1, r0
   1188c:	002aab15 	eoreq	sl, sl, r5, lsl fp
   11890:	01680100 	cmneq	r8, r0, lsl #2
   11894:	00000600 	andeq	r0, r0, r0, lsl #12
   11898:	ad155101 	ldfges	f5, [r5, #-4]
   1189c:	01000010 	tsteq	r0, r0, lsl r0
   118a0:	02cb0168 	sbceq	r0, fp, #26
   118a4:	52010000 	andpl	r0, r1, #0
   118a8:	00163015 	andseq	r3, r6, r5, lsl r0
   118ac:	01680100 	cmneq	r8, r0, lsl #2
   118b0:	0000009b 	muleq	r0, fp, r0
   118b4:	8a155301 	bhi	5664c0 <DISABLE_IRQ+0x566440>
   118b8:	01000017 	tsteq	r0, r7, lsl r0
   118bc:	003a0168 	eorseq	r0, sl, r8, ror #2
   118c0:	91020000 	tstls	r2, r0
   118c4:	01170000 	tsteq	r7, r0
   118c8:	000029fe 	strdeq	r2, [r0], -lr
   118cc:	01016f01 	tsteq	r1, r1, lsl #30
   118d0:	30007bf4 	strdcc	r7, [r0], -r4
   118d4:	30007bf8 	strdcc	r7, [r0], -r8
   118d8:	e5155d01 	ldr	r5, [r5, #-3329]	; 0xd01
   118dc:	01000014 	tsteq	r0, r4, lsl r0
   118e0:	0600016f 	streq	r0, [r0], -pc, ror #2
   118e4:	50010000 	andpl	r0, r1, r0
   118e8:	0026a115 	eoreq	sl, r6, r5, lsl r1
   118ec:	016f0100 	cmneq	pc, r0, lsl #2
   118f0:	000013a5 	andeq	r1, r0, r5, lsr #7
   118f4:	c1155101 	tstgt	r5, r1, lsl #2
   118f8:	0100000d 	tsteq	r0, sp
   118fc:	0085016f 	addeq	r0, r5, pc, ror #2
   11900:	52010000 	andpl	r0, r1, #0
   11904:	00500000 	subseq	r0, r0, r0
   11908:	00020000 	andeq	r0, r2, r0
   1190c:	00003272 	andeq	r3, r0, r2, ror r2
   11910:	32460104 	subcc	r0, r6, #1
   11914:	7bf80000 	blvc	ffe1191c <rEINTPEND+0xa9e11874>
   11918:	7cb83000 	ldcvc	0, cr3, [r8]
   1191c:	70633000 	rsbvc	r3, r3, r0
   11920:	00732e75 	rsbseq	r2, r3, r5, ror lr
   11924:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 0xffffff44
   11928:	65722f65 	ldrbvs	r2, [r2, #-3941]!	; 0xf65
   1192c:	69736c61 	ldmdbvs	r3!, {r0, r5, r6, sl, fp, sp, lr}^
   11930:	65442f6c 	strbvs	r2, [r4, #-3948]	; 0xf6c
   11934:	6f746b73 	svcvs	0x00746b73
   11938:	6f632f70 	svcvs	0x00632f70
   1193c:	672f6564 	strvs	r6, [pc, -r4, ror #10]!
   11940:	75687469 	strbvc	r7, [r8, #-1129]!	; 0x469
   11944:	61722f62 	cmnvs	r2, r2, ror #30
   11948:	00736f77 	rsbseq	r6, r3, r7, ror pc
   1194c:	20554e47 	subscs	r4, r5, r7, asr #28
   11950:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
   11954:	0030322e 	eorseq	r3, r0, lr, lsr #4
   11958:	Address 0x00011958 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	10001101 	andne	r1, r0, r1, lsl #2
       4:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
       8:	1b080301 	blne	200c14 <DISABLE_IRQ+0x200b94>
       c:	13082508 	movwne	r2, #34056	; 0x8508
      10:	00000005 	andeq	r0, r0, r5
      14:	10001101 	andne	r1, r0, r1, lsl #2
      18:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
      1c:	1b080301 	blne	200c28 <DISABLE_IRQ+0x200ba8>
      20:	13082508 	movwne	r2, #34056	; 0x8508
      24:	00000005 	andeq	r0, r0, r5
      28:	25011101 	strcs	r1, [r1, #-257]	; 0x101
      2c:	030b130e 	movweq	r1, #45838	; 0xb30e
      30:	110e1b0e 	tstne	lr, lr, lsl #22
      34:	10011201 	andne	r1, r1, r1, lsl #4
      38:	02000006 	andeq	r0, r0, #6
      3c:	0b0b0024 	bleq	2c00d4 <DISABLE_IRQ+0x2c0054>
      40:	0e030b3e 	vmoveq.16	d3[0], r0
      44:	24030000 	strcs	r0, [r3]
      48:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      4c:	0008030b 	andeq	r0, r8, fp, lsl #6
      50:	00240400 	eoreq	r0, r4, r0, lsl #8
      54:	0b3e0b0b 	bleq	f82c88 <MEM_SIZE+0x782c88>
      58:	16050000 	strne	r0, [r5], -r0
      5c:	3a0e0300 	bcc	380c64 <DISABLE_IRQ+0x380be4>
      60:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      64:	06000013 	undefined instruction 0x06000013
      68:	0b0b000f 	bleq	2c00ac <DISABLE_IRQ+0x2c002c>
      6c:	00001349 	andeq	r1, r0, r9, asr #6
      70:	27001507 	strcs	r1, [r0, -r7, lsl #10]
      74:	0800000c 	stmdaeq	r0, {r2, r3}
      78:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 0xffffff48
      7c:	0b3a0e03 	bleq	e83890 <MEM_SIZE+0x683890>
      80:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
      84:	13010b20 	movwne	r0, #6944	; 0x1b20
      88:	34090000 	strcc	r0, [r9]
      8c:	3a080300 	bcc	200c94 <DISABLE_IRQ+0x200c14>
      90:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      94:	0a000013 	beq	e8 <DISABLE_IRQ+0x68>
      98:	13490026 	movtne	r0, #36902	; 0x9026
      9c:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
      a0:	030c3f01 	movweq	r3, #52993	; 0xcf01
      a4:	3b0b3a0e 	blcc	2ce8e4 <DISABLE_IRQ+0x2ce864>
      a8:	110c270b 	tstne	ip, fp, lsl #14
      ac:	40011201 	andmi	r1, r1, r1, lsl #4
      b0:	0013010a 	andseq	r0, r3, sl, lsl #2
      b4:	012e0c00 	teqeq	lr, r0, lsl #24
      b8:	01111331 	tsteq	r1, r1, lsr r3
      bc:	0a400112 	beq	100050c <MEM_SIZE+0x80050c>
      c0:	00001301 	andeq	r1, r0, r1, lsl #6
      c4:	3100340d 	tstcc	r0, sp, lsl #8
      c8:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
      cc:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 0xffffff48
      d0:	0b3a0e03 	bleq	e838e4 <MEM_SIZE+0x6838e4>
      d4:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
      d8:	01120111 	tsteq	r2, r1, lsl r1
      dc:	00000640 	andeq	r0, r0, r0, asr #12
      e0:	3f012e0f 	svccc	0x00012e0f
      e4:	3a0e030c 	bcc	380d1c <DISABLE_IRQ+0x380c9c>
      e8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
      ec:	1201110c 	andne	r1, r1, #3
      f0:	01064001 	tsteq	r6, r1
      f4:	10000013 	andne	r0, r0, r3, lsl r0
      f8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
      fc:	01120111 	tsteq	r2, r1, lsl r1
     100:	0b590b58 	bleq	1642e68 <MEM_SIZE+0xe42e68>
     104:	0b110000 	bleq	44010c <DISABLE_IRQ+0x44008c>
     108:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     10c:	12000001 	andne	r0, r0, #1
     110:	13490101 	movtne	r0, #37121	; 0x9101
     114:	00001301 	andeq	r1, r0, r1, lsl #6
     118:	49002113 	stmdbmi	r0, {r0, r1, r4, r8, sp}
     11c:	000b2f13 	andeq	r2, fp, r3, lsl pc
     120:	00341400 	eorseq	r1, r4, r0, lsl #8
     124:	0b3a0e03 	bleq	e83938 <MEM_SIZE+0x683938>
     128:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     12c:	00000a02 	andeq	r0, r0, r2, lsl #20
     130:	03003415 	movweq	r3, #1045	; 0x415
     134:	3b0b3a0e 	blcc	2ce974 <DISABLE_IRQ+0x2ce8f4>
     138:	3f13490b 	svccc	0x0013490b
     13c:	000a020c 	andeq	r0, sl, ip, lsl #4
     140:	11010000 	tstne	r1, r0
     144:	11061000 	tstne	r6, r0
     148:	03011201 	movweq	r1, #4609	; 0x1201
     14c:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
     150:	00051308 	andeq	r1, r5, r8, lsl #6
     154:	11010000 	tstne	r1, r0
     158:	130e2501 	movwne	r2, #58625	; 0xe501
     15c:	1b0e030b 	blne	380d90 <DISABLE_IRQ+0x380d10>
     160:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     164:	00061001 	andeq	r1, r6, r1
     168:	012e0200 	teqeq	lr, r0, lsl #4
     16c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     170:	0b3b0b3a 	bleq	ec2e60 <MEM_SIZE+0x6c2e60>
     174:	13490c27 	movtne	r0, #39975	; 0x9c27
     178:	13010b20 	movwne	r0, #6944	; 0x1b20
     17c:	05030000 	streq	r0, [r3]
     180:	3a0e0300 	bcc	380d88 <DISABLE_IRQ+0x380d08>
     184:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     188:	04000013 	streq	r0, [r0], #-19
     18c:	0b0b0024 	bleq	2c0224 <DISABLE_IRQ+0x2c01a4>
     190:	0e030b3e 	vmoveq.16	d3[0], r0
     194:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
     198:	030c3f01 	movweq	r3, #52993	; 0xcf01
     19c:	3b0b3a0e 	blcc	2ce9dc <DISABLE_IRQ+0x2ce95c>
     1a0:	110c270b 	tstne	ip, fp, lsl #14
     1a4:	40011201 	andmi	r1, r1, r1, lsl #4
     1a8:	0013010a 	andseq	r0, r3, sl, lsl #2
     1ac:	00340600 	eorseq	r0, r4, r0, lsl #12
     1b0:	0b3a0803 	bleq	e821c4 <MEM_SIZE+0x6821c4>
     1b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     1b8:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
     1bc:	11133101 	tstne	r3, r1, lsl #2
     1c0:	40011201 	andmi	r1, r1, r1, lsl #4
     1c4:	0013010a 	andseq	r0, r3, sl, lsl #2
     1c8:	00050800 	andeq	r0, r5, r0, lsl #16
     1cc:	06021331 	undefined instruction 0x06021331
     1d0:	34090000 	strcc	r0, [r9]
     1d4:	3a080300 	bcc	200ddc <DISABLE_IRQ+0x200d5c>
     1d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1dc:	00060213 	andeq	r0, r6, r3, lsl r2
     1e0:	00340a00 	eorseq	r0, r4, r0, lsl #20
     1e4:	0b3a0e03 	bleq	e839f8 <MEM_SIZE+0x6839f8>
     1e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     1ec:	340b0000 	strcc	r0, [fp]
     1f0:	3a080300 	bcc	200df8 <DISABLE_IRQ+0x200d78>
     1f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1f8:	000a0213 	andeq	r0, sl, r3, lsl r2
     1fc:	011d0c00 	tsteq	sp, r0, lsl #24
     200:	01111331 	tsteq	r1, r1, lsr r3
     204:	0b580112 	bleq	1600654 <MEM_SIZE+0xe00654>
     208:	00000b59 	andeq	r0, r0, r9, asr fp
     20c:	3100050d 	tstcc	r0, sp, lsl #10
     210:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     214:	0b0b0024 	bleq	2c02ac <DISABLE_IRQ+0x2c022c>
     218:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     21c:	01000000 	tsteq	r0, r0
     220:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     224:	0e030b13 	vmoveq.32	d3[0], r0
     228:	01110e1b 	tsteq	r1, fp, lsl lr
     22c:	06100112 	undefined instruction 0x06100112
     230:	24020000 	strcs	r0, [r2]
     234:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     238:	000e030b 	andeq	r0, lr, fp, lsl #6
     23c:	00240300 	eoreq	r0, r4, r0, lsl #6
     240:	0b3e0b0b 	bleq	f82e74 <MEM_SIZE+0x782e74>
     244:	00000803 	andeq	r0, r0, r3, lsl #16
     248:	03001604 	movweq	r1, #1540	; 0x604
     24c:	3b0b3a0e 	blcc	2cea8c <DISABLE_IRQ+0x2cea0c>
     250:	0013490b 	andseq	r4, r3, fp, lsl #18
     254:	00240500 	eoreq	r0, r4, r0, lsl #10
     258:	0b3e0b0b 	bleq	f82e8c <MEM_SIZE+0x782e8c>
     25c:	0f060000 	svceq	0x00060000
     260:	000b0b00 	andeq	r0, fp, r0, lsl #22
     264:	000f0700 	andeq	r0, pc, r0, lsl #14
     268:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     26c:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
     270:	030c3f01 	movweq	r3, #52993	; 0xcf01
     274:	3b0b3a0e 	blcc	2ceab4 <DISABLE_IRQ+0x2cea34>
     278:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     27c:	010b2013 	tsteq	fp, r3, lsl r0
     280:	09000013 	stmdbeq	r0, {r0, r1, r4}
     284:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     288:	0b3b0b3a 	bleq	ec2f78 <MEM_SIZE+0x6c2f78>
     28c:	00001349 	andeq	r1, r0, r9, asr #6
     290:	0300050a 	movweq	r0, #1290	; 0x50a
     294:	3b0b3a08 	blcc	2ceabc <DISABLE_IRQ+0x2cea3c>
     298:	0013490b 	andseq	r4, r3, fp, lsl #18
     29c:	00340b00 	eorseq	r0, r4, r0, lsl #22
     2a0:	0b3a0803 	bleq	e822b4 <MEM_SIZE+0x6822b4>
     2a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     2a8:	260c0000 	strcs	r0, [ip], -r0
     2ac:	0d000000 	stceq	0, cr0, [r0]
     2b0:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 0xffffff48
     2b4:	0b3a0e03 	bleq	e83ac8 <MEM_SIZE+0x683ac8>
     2b8:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
     2bc:	13010b20 	movwne	r0, #6944	; 0x1b20
     2c0:	180e0000 	stmdane	lr, {}
     2c4:	0f000000 	svceq	0x00000000
     2c8:	13490026 	movtne	r0, #36902	; 0x9026
     2cc:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
     2d0:	11133101 	tstne	r3, r1, lsl #2
     2d4:	40011201 	andmi	r1, r1, r1, lsl #4
     2d8:	0013010a 	andseq	r0, r3, sl, lsl #2
     2dc:	00051100 	andeq	r1, r5, r0, lsl #2
     2e0:	06021331 	undefined instruction 0x06021331
     2e4:	05120000 	ldreq	r0, [r2]
     2e8:	02133100 	andseq	r3, r3, #0
     2ec:	1300000a 	movwne	r0, #10
     2f0:	13310034 	teqne	r1, #52	; 0x34
     2f4:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     2f8:	030c3f01 	movweq	r3, #52993	; 0xcf01
     2fc:	3b0b3a0e 	blcc	2ceb3c <DISABLE_IRQ+0x2ceabc>
     300:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     304:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     308:	010a4001 	tsteq	sl, r1
     30c:	15000013 	strne	r0, [r0, #-19]
     310:	08030005 	stmdaeq	r3, {r0, r2}
     314:	0b3b0b3a 	bleq	ec3004 <MEM_SIZE+0x6c3004>
     318:	06021349 	streq	r1, [r2], -r9, asr #6
     31c:	05160000 	ldreq	r0, [r6]
     320:	3a0e0300 	bcc	380f28 <DISABLE_IRQ+0x380ea8>
     324:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     328:	00060213 	andeq	r0, r6, r3, lsl r2
     32c:	00341700 	eorseq	r1, r4, r0, lsl #14
     330:	0b3a0803 	bleq	e82344 <MEM_SIZE+0x682344>
     334:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     338:	00000602 	andeq	r0, r0, r2, lsl #12
     33c:	03003418 	movweq	r3, #1048	; 0x418
     340:	3b0b3a0e 	blcc	2ceb80 <DISABLE_IRQ+0x2ceb00>
     344:	0013490b 	andseq	r4, r3, fp, lsl #18
     348:	00051900 	andeq	r1, r5, r0, lsl #18
     34c:	0b3a0e03 	bleq	e83b60 <MEM_SIZE+0x683b60>
     350:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     354:	00000a02 	andeq	r0, r0, r2, lsl #20
     358:	3f012e1a 	svccc	0x00012e1a
     35c:	3a0e030c 	bcc	380f94 <DISABLE_IRQ+0x380f14>
     360:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     364:	1113490c 	tstne	r3, ip, lsl #18
     368:	40011201 	andmi	r1, r1, r1, lsl #4
     36c:	00130106 	andseq	r0, r3, r6, lsl #2
     370:	00341b00 	eorseq	r1, r4, r0, lsl #22
     374:	0b3a0803 	bleq	e82388 <MEM_SIZE+0x682388>
     378:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     37c:	00000a02 	andeq	r0, r0, r2, lsl #20
     380:	0300341c 	movweq	r3, #1052	; 0x41c
     384:	3b0b3a0e 	blcc	2cebc4 <DISABLE_IRQ+0x2ceb44>
     388:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     38c:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
     390:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     394:	0b1e0000 	bleq	78039c <DISABLE_IRQ+0x78031c>
     398:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     39c:	1f000001 	svcne	0x00000001
     3a0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     3a4:	01120111 	tsteq	r2, r1, lsl r1
     3a8:	0b590b58 	bleq	1643110 <MEM_SIZE+0xe43110>
     3ac:	05200000 	streq	r0, [r0]!
     3b0:	00133100 	andseq	r3, r3, r0, lsl #2
     3b4:	012e2100 	teqeq	lr, r0, lsl #2
     3b8:	01111331 	tsteq	r1, r1, lsr r3
     3bc:	06400112 	undefined instruction 0x06400112
     3c0:	00001301 	andeq	r1, r0, r1, lsl #6
     3c4:	3f012e22 	svccc	0x00012e22
     3c8:	3a0e030c 	bcc	381000 <DISABLE_IRQ+0x380f80>
     3cc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     3d0:	1201110c 	andne	r1, r1, #3
     3d4:	010a4001 	tsteq	sl, r1
     3d8:	23000013 	movwcs	r0, #19
     3dc:	08030034 	stmdaeq	r3, {r2, r4, r5}
     3e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     3e4:	00001349 	andeq	r1, r0, r9, asr #6
     3e8:	3f012e24 	svccc	0x00012e24
     3ec:	3a0e030c 	bcc	381024 <DISABLE_IRQ+0x380fa4>
     3f0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     3f4:	1201110c 	andne	r1, r1, #3
     3f8:	01064001 	tsteq	r6, r1
     3fc:	25000013 	strcs	r0, [r0, #-19]
     400:	13490101 	movtne	r0, #37121	; 0x9101
     404:	00001301 	andeq	r1, r0, r1, lsl #6
     408:	49002126 	stmdbmi	r0, {r1, r2, r5, r8, sp}
     40c:	00052f13 	andeq	r2, r5, r3, lsl pc
     410:	00342700 	eorseq	r2, r4, r0, lsl #14
     414:	0b3a0e03 	bleq	e83c28 <MEM_SIZE+0x683c28>
     418:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     41c:	0a020c3f 	beq	83520 <DISABLE_IRQ+0x834a0>
     420:	21280000 	teqcs	r8, r0
     424:	2f134900 	svccs	0x00134900
     428:	0000000b 	andeq	r0, r0, fp
     42c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     430:	030b130e 	movweq	r1, #45838	; 0xb30e
     434:	110e1b0e 	tstne	lr, lr, lsl #22
     438:	10011201 	andne	r1, r1, r1, lsl #4
     43c:	02000006 	andeq	r0, r0, #6
     440:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 0xffffff48
     444:	0b3a0e03 	bleq	e83c58 <MEM_SIZE+0x683c58>
     448:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
     44c:	01120111 	tsteq	r2, r1, lsl r1
     450:	00000640 	andeq	r0, r0, r0, asr #12
     454:	3f012e03 	svccc	0x00012e03
     458:	3a0e030c 	bcc	381090 <DISABLE_IRQ+0x381010>
     45c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     460:	1201110c 	andne	r1, r1, #3
     464:	010a4001 	tsteq	sl, r1
     468:	04000013 	streq	r0, [r0], #-19
     46c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     470:	0b3b0b3a 	bleq	ec3160 <MEM_SIZE+0x6c3160>
     474:	0a021349 	beq	851a0 <DISABLE_IRQ+0x85120>
     478:	24050000 	strcs	r0, [r5]
     47c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     480:	000e030b 	andeq	r0, lr, fp, lsl #6
     484:	012e0600 	teqeq	lr, r0, lsl #12
     488:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     48c:	0b3b0b3a 	bleq	ec317c <MEM_SIZE+0x6c317c>
     490:	01110c27 	tsteq	r1, r7, lsr #24
     494:	06400112 	undefined instruction 0x06400112
     498:	34070000 	strcc	r0, [r7]
     49c:	3a080300 	bcc	2010a4 <DISABLE_IRQ+0x201024>
     4a0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4a4:	00060213 	andeq	r0, r6, r3, lsl r2
     4a8:	11010000 	tstne	r1, r0
     4ac:	130e2501 	movwne	r2, #58625	; 0xe501
     4b0:	1b0e030b 	blne	3810e4 <DISABLE_IRQ+0x381064>
     4b4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     4b8:	00061001 	andeq	r1, r6, r1
     4bc:	00160200 	andseq	r0, r6, r0, lsl #4
     4c0:	0b3a0e03 	bleq	e83cd4 <MEM_SIZE+0x683cd4>
     4c4:	00000b3b 	andeq	r0, r0, fp, lsr fp
     4c8:	0b002403 	bleq	94dc <DISABLE_IRQ+0x945c>
     4cc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     4d0:	0400000e 	streq	r0, [r0], #-14
     4d4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     4d8:	0b3b0b3a 	bleq	ec31c8 <MEM_SIZE+0x6c31c8>
     4dc:	00001349 	andeq	r1, r0, r9, asr #6
     4e0:	0b002405 	bleq	94fc <DISABLE_IRQ+0x947c>
     4e4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     4e8:	06000008 	streq	r0, [r0], -r8
     4ec:	0b0b0104 	bleq	2c0904 <DISABLE_IRQ+0x2c0884>
     4f0:	0b3b0b3a 	bleq	ec31e0 <MEM_SIZE+0x6c31e0>
     4f4:	00001301 	andeq	r1, r0, r1, lsl #6
     4f8:	03002807 	movweq	r2, #2055	; 0x807
     4fc:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     500:	01130800 	tsteq	r3, r0, lsl #16
     504:	0b0b0e03 	bleq	2c3d18 <DISABLE_IRQ+0x2c3c98>
     508:	0b3b0b3a 	bleq	ec31f8 <MEM_SIZE+0x6c31f8>
     50c:	00001301 	andeq	r1, r0, r1, lsl #6
     510:	03000d09 	movweq	r0, #3337	; 0xd09
     514:	3b0b3a0e 	blcc	2ced54 <DISABLE_IRQ+0x2cecd4>
     518:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     51c:	0a00000a 	beq	54c <DISABLE_IRQ+0x4cc>
     520:	0b0b000f 	bleq	2c0564 <DISABLE_IRQ+0x2c04e4>
     524:	00001349 	andeq	r1, r0, r9, asr #6
     528:	03000d0b 	movweq	r0, #3339	; 0xd0b
     52c:	3b0b3a08 	blcc	2ced54 <DISABLE_IRQ+0x2cecd4>
     530:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     534:	0c00000a 	stceq	0, cr0, [r0], {10}
     538:	13490101 	movtne	r0, #37121	; 0x9101
     53c:	00001301 	andeq	r1, r0, r1, lsl #6
     540:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
     544:	000b2f13 	andeq	r2, fp, r3, lsl pc
     548:	00240e00 	eoreq	r0, r4, r0, lsl #28
     54c:	0b3e0b0b 	bleq	f83180 <MEM_SIZE+0x783180>
     550:	0f0f0000 	svceq	0x000f0000
     554:	000b0b00 	andeq	r0, fp, r0, lsl #22
     558:	01151000 	tsteq	r5, r0
     55c:	13010c27 	movwne	r0, #7207	; 0x1c27
     560:	05110000 	ldreq	r0, [r1]
     564:	00134900 	andseq	r4, r3, r0, lsl #18
     568:	012e1200 	teqeq	lr, r0, lsl #4
     56c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     570:	0b3b0b3a 	bleq	ec3260 <MEM_SIZE+0x6c3260>
     574:	13490c27 	movtne	r0, #39975	; 0x9c27
     578:	01120111 	tsteq	r2, r1, lsl r1
     57c:	13010640 	movwne	r0, #5696	; 0x1640
     580:	05130000 	ldreq	r0, [r3]
     584:	3a0e0300 	bcc	38118c <DISABLE_IRQ+0x38110c>
     588:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     58c:	00060213 	andeq	r0, r6, r3, lsl r2
     590:	00341400 	eorseq	r1, r4, r0, lsl #8
     594:	0b3a0e03 	bleq	e83da8 <MEM_SIZE+0x683da8>
     598:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     59c:	34150000 	ldrcc	r0, [r5]
     5a0:	3a0e0300 	bcc	3811a8 <DISABLE_IRQ+0x381128>
     5a4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     5a8:	16000013 	undefined instruction 0x16000013
     5ac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     5b0:	0b3b0b3a 	bleq	ec32a0 <MEM_SIZE+0x6c32a0>
     5b4:	0a021349 	beq	852e0 <DISABLE_IRQ+0x85260>
     5b8:	34170000 	ldrcc	r0, [r7]
     5bc:	3a0e0300 	bcc	3811c4 <DISABLE_IRQ+0x381144>
     5c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     5c4:	00060213 	andeq	r0, r6, r3, lsl r2
     5c8:	00341800 	eorseq	r1, r4, r0, lsl #16
     5cc:	0b3a0e03 	bleq	e83de0 <MEM_SIZE+0x683de0>
     5d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     5d4:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
     5d8:	01000000 	tsteq	r0, r0
     5dc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     5e0:	0e030b13 	vmoveq.32	d3[0], r0
     5e4:	01110e1b 	tsteq	r1, fp, lsl lr
     5e8:	06100112 	undefined instruction 0x06100112
     5ec:	16020000 	strne	r0, [r2], -r0
     5f0:	3a0e0300 	bcc	3811f8 <DISABLE_IRQ+0x381178>
     5f4:	000b3b0b 	andeq	r3, fp, fp, lsl #22
     5f8:	00240300 	eoreq	r0, r4, r0, lsl #6
     5fc:	0b3e0b0b 	bleq	f83230 <MEM_SIZE+0x783230>
     600:	00000e03 	andeq	r0, r0, r3, lsl #28
     604:	03001604 	movweq	r1, #1540	; 0x604
     608:	3b0b3a0e 	blcc	2cee48 <DISABLE_IRQ+0x2cedc8>
     60c:	0013490b 	andseq	r4, r3, fp, lsl #18
     610:	00240500 	eoreq	r0, r4, r0, lsl #10
     614:	0b3e0b0b 	bleq	f83248 <MEM_SIZE+0x783248>
     618:	00000803 	andeq	r0, r0, r3, lsl #16
     61c:	0b010406 	bleq	4163c <DISABLE_IRQ+0x415bc>
     620:	3b0b3a0b 	blcc	2cee54 <DISABLE_IRQ+0x2cedd4>
     624:	0013010b 	andseq	r0, r3, fp, lsl #2
     628:	00280700 	eoreq	r0, r8, r0, lsl #14
     62c:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     630:	13080000 	movwne	r0, #32768	; 0x8000
     634:	0b0e0301 	bleq	381240 <DISABLE_IRQ+0x3811c0>
     638:	3b0b3a0b 	blcc	2cee6c <DISABLE_IRQ+0x2cedec>
     63c:	0013010b 	andseq	r0, r3, fp, lsl #2
     640:	000d0900 	andeq	r0, sp, r0, lsl #18
     644:	0b3a0e03 	bleq	e83e58 <MEM_SIZE+0x683e58>
     648:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     64c:	00000a38 	andeq	r0, r0, r8, lsr sl
     650:	0b000f0a 	bleq	4280 <DISABLE_IRQ+0x4200>
     654:	0013490b 	andseq	r4, r3, fp, lsl #18
     658:	000d0b00 	andeq	r0, sp, r0, lsl #22
     65c:	0b3a0803 	bleq	e82670 <MEM_SIZE+0x682670>
     660:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     664:	00000a38 	andeq	r0, r0, r8, lsr sl
     668:	4901010c 	stmdbmi	r1, {r2, r3, r8}
     66c:	00130113 	andseq	r0, r3, r3, lsl r1
     670:	00210d00 	eoreq	r0, r1, r0, lsl #26
     674:	0b2f1349 	bleq	bc53a0 <MEM_SIZE+0x3c53a0>
     678:	240e0000 	strcs	r0, [lr]
     67c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     680:	0f00000b 	svceq	0x0000000b
     684:	0b0b000f 	bleq	2c06c8 <DISABLE_IRQ+0x2c0648>
     688:	15100000 	ldrne	r0, [r0]
     68c:	010c2701 	tsteq	ip, r1, lsl #14
     690:	11000013 	tstne	r0, r3, lsl r0
     694:	13490005 	movtne	r0, #36869	; 0x9005
     698:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
     69c:	030c3f01 	movweq	r3, #52993	; 0xcf01
     6a0:	3b0b3a0e 	blcc	2ceee0 <DISABLE_IRQ+0x2cee60>
     6a4:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     6a8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     6ac:	01064001 	tsteq	r6, r1
     6b0:	13000013 	movwne	r0, #19
     6b4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     6b8:	0b3b0b3a 	bleq	ec33a8 <MEM_SIZE+0x6c33a8>
     6bc:	06021349 	streq	r1, [r2], -r9, asr #6
     6c0:	05140000 	ldreq	r0, [r4]
     6c4:	3a0e0300 	bcc	3812cc <DISABLE_IRQ+0x38124c>
     6c8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6cc:	000a0213 	andeq	r0, sl, r3, lsl r2
     6d0:	00341500 	eorseq	r1, r4, r0, lsl #10
     6d4:	0b3a0e03 	bleq	e83ee8 <MEM_SIZE+0x683ee8>
     6d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     6dc:	00000602 	andeq	r0, r0, r2, lsl #12
     6e0:	03003416 	movweq	r3, #1046	; 0x416
     6e4:	3b0b3a0e 	blcc	2cef24 <DISABLE_IRQ+0x2ceea4>
     6e8:	0013490b 	andseq	r4, r3, fp, lsl #18
     6ec:	012e1700 	teqeq	lr, r0, lsl #14
     6f0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     6f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     6f8:	13490c27 	movtne	r0, #39975	; 0x9c27
     6fc:	01120111 	tsteq	r2, r1, lsl r1
     700:	13010640 	movwne	r0, #5696	; 0x1640
     704:	05180000 	ldreq	r0, [r8]
     708:	3a0e0300 	bcc	381310 <DISABLE_IRQ+0x381290>
     70c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     710:	00060213 	andeq	r0, r6, r3, lsl r2
     714:	00341900 	eorseq	r1, r4, r0, lsl #18
     718:	0b3a0e03 	bleq	e83f2c <MEM_SIZE+0x683f2c>
     71c:	1349053b 	movtne	r0, #38203	; 0x953b
     720:	00000602 	andeq	r0, r0, r2, lsl #12
     724:	0300341a 	movweq	r3, #1050	; 0x41a
     728:	3b0b3a0e 	blcc	2cef68 <DISABLE_IRQ+0x2ceee8>
     72c:	00134905 	andseq	r4, r3, r5, lsl #18
     730:	012e1b00 	teqeq	lr, r0, lsl #22
     734:	0b3a0e03 	bleq	e83f48 <MEM_SIZE+0x683f48>
     738:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
     73c:	0b201349 	bleq	805468 <MEM_SIZE+0x5468>
     740:	00001301 	andeq	r1, r0, r1, lsl #6
     744:	0300051c 	movweq	r0, #1308	; 0x51c
     748:	3b0b3a0e 	blcc	2cef88 <DISABLE_IRQ+0x2cef08>
     74c:	0013490b 	andseq	r4, r3, fp, lsl #18
     750:	011d1d00 	tsteq	sp, r0, lsl #26
     754:	01521331 	cmpeq	r2, r1, lsr r3
     758:	0b580655 	bleq	16020b4 <MEM_SIZE+0xe020b4>
     75c:	00000559 	andeq	r0, r0, r9, asr r5
     760:	3100051e 	tstcc	r0, lr, lsl r5
     764:	1f000013 	svcne	0x00000013
     768:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     76c:	34200000 	strtcc	r0, [r0]
     770:	02133100 	andseq	r3, r3, #0
     774:	21000006 	tstcs	r0, r6
     778:	13310034 	teqne	r1, #52	; 0x34
     77c:	34220000 	strtcc	r0, [r2]
     780:	3a0e0300 	bcc	381388 <DISABLE_IRQ+0x381308>
     784:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     788:	3c0c3f13 	stccc	15, cr3, [ip], {19}
     78c:	0000000c 	andeq	r0, r0, ip
     790:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     794:	030b130e 	movweq	r1, #45838	; 0xb30e
     798:	110e1b0e 	tstne	lr, lr, lsl #22
     79c:	10011201 	andne	r1, r1, r1, lsl #4
     7a0:	02000006 	andeq	r0, r0, #6
     7a4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     7a8:	0b3b0b3a 	bleq	ec3498 <MEM_SIZE+0x6c3498>
     7ac:	24030000 	strcs	r0, [r3]
     7b0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     7b4:	000e030b 	andeq	r0, lr, fp, lsl #6
     7b8:	00160400 	andseq	r0, r6, r0, lsl #8
     7bc:	0b3a0e03 	bleq	e83fd0 <MEM_SIZE+0x683fd0>
     7c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     7c4:	24050000 	strcs	r0, [r5]
     7c8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     7cc:	0008030b 	andeq	r0, r8, fp, lsl #6
     7d0:	01040600 	tsteq	r4, r0, lsl #12
     7d4:	0b3a0b0b 	bleq	e83408 <MEM_SIZE+0x683408>
     7d8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     7dc:	28070000 	stmdacs	r7, {}
     7e0:	1c0e0300 	stcne	3, cr0, [lr], {0}
     7e4:	0800000d 	stmdaeq	r0, {r0, r2, r3}
     7e8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     7ec:	0b3a0b0b 	bleq	e83420 <MEM_SIZE+0x683420>
     7f0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     7f4:	0d090000 	stceq	0, cr0, [r9]
     7f8:	3a0e0300 	bcc	381400 <DISABLE_IRQ+0x381380>
     7fc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     800:	000a3813 	andeq	r3, sl, r3, lsl r8
     804:	000f0a00 	andeq	r0, pc, r0, lsl #20
     808:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     80c:	0d0b0000 	stceq	0, cr0, [fp]
     810:	3a080300 	bcc	201418 <DISABLE_IRQ+0x201398>
     814:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     818:	000a3813 	andeq	r3, sl, r3, lsl r8
     81c:	01010c00 	tsteq	r1, r0, lsl #24
     820:	13011349 	movwne	r1, #4937	; 0x1349
     824:	210d0000 	tstcs	sp, r0
     828:	2f134900 	svccs	0x00134900
     82c:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
     830:	0b0b0024 	bleq	2c08c8 <DISABLE_IRQ+0x2c0848>
     834:	00000b3e 	andeq	r0, r0, lr, lsr fp
     838:	0b000f0f 	bleq	447c <DISABLE_IRQ+0x43fc>
     83c:	1000000b 	andne	r0, r0, fp
     840:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
     844:	00001301 	andeq	r1, r0, r1, lsl #6
     848:	49000511 	stmdbmi	r0, {r0, r4, r8, sl}
     84c:	12000013 	andne	r0, r0, #19
     850:	0e03012e 	adfeqsp	f0, f3, #0.5
     854:	0b3b0b3a 	bleq	ec3544 <MEM_SIZE+0x6c3544>
     858:	13490c27 	movtne	r0, #39975	; 0x9c27
     85c:	13010b20 	movwne	r0, #6944	; 0x1b20
     860:	05130000 	ldreq	r0, [r3]
     864:	3a0e0300 	bcc	38146c <DISABLE_IRQ+0x3813ec>
     868:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     86c:	14000013 	strne	r0, [r0], #-19
     870:	0e03012e 	adfeqsp	f0, f3, #0.5
     874:	0b3b0b3a 	bleq	ec3564 <MEM_SIZE+0x6c3564>
     878:	0b200c27 	bleq	80391c <MEM_SIZE+0x391c>
     87c:	00001301 	andeq	r1, r0, r1, lsl #6
     880:	3f012e15 	svccc	0x00012e15
     884:	3a0e030c 	bcc	3814bc <DISABLE_IRQ+0x38143c>
     888:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     88c:	1113490c 	tstne	r3, ip, lsl #18
     890:	40011201 	andmi	r1, r1, r1, lsl #4
     894:	00130106 	andseq	r0, r3, r6, lsl #2
     898:	00051600 	andeq	r1, r5, r0, lsl #12
     89c:	0b3a0e03 	bleq	e840b0 <MEM_SIZE+0x6840b0>
     8a0:	1349053b 	movtne	r0, #38203	; 0x953b
     8a4:	00000602 	andeq	r0, r0, r2, lsl #12
     8a8:	03003417 	movweq	r3, #1047	; 0x417
     8ac:	3b0b3a0e 	blcc	2cf0ec <DISABLE_IRQ+0x2cf06c>
     8b0:	00134905 	andseq	r4, r3, r5, lsl #18
     8b4:	011d1800 	tsteq	sp, r0, lsl #16
     8b8:	01521331 	cmpeq	r2, r1, lsr r3
     8bc:	0b580655 	bleq	1602218 <MEM_SIZE+0xe02218>
     8c0:	00000559 	andeq	r0, r0, r9, asr r5
     8c4:	31000519 	tstcc	r0, r9, lsl r5
     8c8:	1a000013 	bne	91c <DISABLE_IRQ+0x89c>
     8cc:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 0xffffff48
     8d0:	0b3a0e03 	bleq	e840e4 <MEM_SIZE+0x6840e4>
     8d4:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
     8d8:	01111349 	tsteq	r1, r9, asr #6
     8dc:	06400112 	undefined instruction 0x06400112
     8e0:	00001301 	andeq	r1, r0, r1, lsl #6
     8e4:	0300051b 	movweq	r0, #1307	; 0x51b
     8e8:	3b0b3a0e 	blcc	2cf128 <DISABLE_IRQ+0x2cf0a8>
     8ec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     8f0:	1c000006 	stcne	0, cr0, [r0], {6}
     8f4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     8f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     8fc:	06021349 	streq	r1, [r2], -r9, asr #6
     900:	341d0000 	ldrcc	r0, [sp]
     904:	3a0e0300 	bcc	38150c <DISABLE_IRQ+0x38148c>
     908:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     90c:	000a0213 	andeq	r0, sl, r3, lsl r2
     910:	00341e00 	eorseq	r1, r4, r0, lsl #28
     914:	0b3a0e03 	bleq	e84128 <MEM_SIZE+0x684128>
     918:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     91c:	1d1f0000 	ldcne	0, cr0, [pc]
     920:	11133101 	tstne	r3, r1, lsl #2
     924:	58011201 	stmdapl	r1, {r0, r9, ip}
     928:	000b590b 	andeq	r5, fp, fp, lsl #18
     92c:	00342000 	eorseq	r2, r4, r0
     930:	0b3a0e03 	bleq	e84144 <MEM_SIZE+0x684144>
     934:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     938:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
     93c:	01000000 	tsteq	r0, r0
     940:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     944:	0e030b13 	vmoveq.32	d3[0], r0
     948:	01110e1b 	tsteq	r1, fp, lsl lr
     94c:	06100112 	undefined instruction 0x06100112
     950:	16020000 	strne	r0, [r2], -r0
     954:	3a0e0300 	bcc	38155c <DISABLE_IRQ+0x3814dc>
     958:	000b3b0b 	andeq	r3, fp, fp, lsl #22
     95c:	00240300 	eoreq	r0, r4, r0, lsl #6
     960:	0b3e0b0b 	bleq	f83594 <MEM_SIZE+0x783594>
     964:	00000e03 	andeq	r0, r0, r3, lsl #28
     968:	03001604 	movweq	r1, #1540	; 0x604
     96c:	3b0b3a0e 	blcc	2cf1ac <DISABLE_IRQ+0x2cf12c>
     970:	0013490b 	andseq	r4, r3, fp, lsl #18
     974:	00240500 	eoreq	r0, r4, r0, lsl #10
     978:	0b3e0b0b 	bleq	f835ac <MEM_SIZE+0x7835ac>
     97c:	00000803 	andeq	r0, r0, r3, lsl #16
     980:	03011306 	movweq	r1, #4870	; 0x1306
     984:	3a0b0b0e 	bcc	2c35c4 <DISABLE_IRQ+0x2c3544>
     988:	010b3b0b 	tsteq	fp, fp, lsl #22
     98c:	07000013 	smladeq	r0, r3, r0, r0
     990:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     994:	0b3b0b3a 	bleq	ec3684 <MEM_SIZE+0x6c3684>
     998:	0a381349 	beq	e056c4 <MEM_SIZE+0x6056c4>
     99c:	0f080000 	svceq	0x00080000
     9a0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     9a4:	09000013 	stmdbeq	r0, {r0, r1, r4}
     9a8:	0e030104 	adfeqs	f0, f3, f4
     9ac:	0b3a0b0b 	bleq	e835e0 <MEM_SIZE+0x6835e0>
     9b0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     9b4:	280a0000 	stmdacs	sl, {}
     9b8:	1c0e0300 	stcne	3, cr0, [lr], {0}
     9bc:	0b00000d 	bleq	9f8 <DISABLE_IRQ+0x978>
     9c0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     9c4:	0b3b0b3a 	bleq	ec36b4 <MEM_SIZE+0x6c36b4>
     9c8:	0a381349 	beq	e056f4 <MEM_SIZE+0x6056f4>
     9cc:	010c0000 	tsteq	ip, r0
     9d0:	01134901 	tsteq	r3, r1, lsl #18
     9d4:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     9d8:	13490021 	movtne	r0, #36897	; 0x9021
     9dc:	00000b2f 	andeq	r0, r0, pc, lsr #22
     9e0:	0b00240e 	bleq	9a20 <DISABLE_IRQ+0x99a0>
     9e4:	000b3e0b 	andeq	r3, fp, fp, lsl #28
     9e8:	000f0f00 	andeq	r0, pc, r0, lsl #30
     9ec:	00000b0b 	andeq	r0, r0, fp, lsl #22
     9f0:	27011510 	smladcs	r1, r0, r5, r1
     9f4:	0013010c 	andseq	r0, r3, ip, lsl #2
     9f8:	00051100 	andeq	r1, r5, r0, lsl #2
     9fc:	00001349 	andeq	r1, r0, r9, asr #6
     a00:	3f012e12 	svccc	0x00012e12
     a04:	3a0e030c 	bcc	38163c <DISABLE_IRQ+0x3815bc>
     a08:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     a0c:	1201110c 	andne	r1, r1, #3
     a10:	01064001 	tsteq	r6, r1
     a14:	13000013 	movwne	r0, #19
     a18:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     a1c:	0b3b0b3a 	bleq	ec370c <MEM_SIZE+0x6c370c>
     a20:	06021349 	streq	r1, [r2], -r9, asr #6
     a24:	34140000 	ldrcc	r0, [r4]
     a28:	3a0e0300 	bcc	381630 <DISABLE_IRQ+0x3815b0>
     a2c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a30:	000a0213 	andeq	r0, sl, r3, lsl r2
     a34:	00341500 	eorseq	r1, r4, r0, lsl #10
     a38:	0b3a0e03 	bleq	e8424c <MEM_SIZE+0x68424c>
     a3c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     a40:	00000602 	andeq	r0, r0, r2, lsl #12
     a44:	03003416 	movweq	r3, #1046	; 0x416
     a48:	3b0b3a0e 	blcc	2cf288 <DISABLE_IRQ+0x2cf208>
     a4c:	0013490b 	andseq	r4, r3, fp, lsl #18
     a50:	00341700 	eorseq	r1, r4, r0, lsl #14
     a54:	0b3a0e03 	bleq	e84268 <MEM_SIZE+0x684268>
     a58:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     a5c:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
     a60:	01000000 	tsteq	r0, r0
     a64:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     a68:	0e030b13 	vmoveq.32	d3[0], r0
     a6c:	01110e1b 	tsteq	r1, fp, lsl lr
     a70:	06100112 	undefined instruction 0x06100112
     a74:	24020000 	strcs	r0, [r2]
     a78:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     a7c:	000e030b 	andeq	r0, lr, fp, lsl #6
     a80:	00240300 	eoreq	r0, r4, r0, lsl #6
     a84:	0b3e0b0b 	bleq	f836b8 <MEM_SIZE+0x7836b8>
     a88:	00000803 	andeq	r0, r0, r3, lsl #16
     a8c:	0b002404 	bleq	9aa4 <DISABLE_IRQ+0x9a24>
     a90:	000b3e0b 	andeq	r3, fp, fp, lsl #28
     a94:	11010000 	tstne	r1, r0
     a98:	130e2501 	movwne	r2, #58625	; 0xe501
     a9c:	1b0e030b 	blne	3816d0 <DISABLE_IRQ+0x381650>
     aa0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     aa4:	00061001 	andeq	r1, r6, r1
     aa8:	00160200 	andseq	r0, r6, r0, lsl #4
     aac:	0b3a0e03 	bleq	e842c0 <MEM_SIZE+0x6842c0>
     ab0:	00000b3b 	andeq	r0, r0, fp, lsr fp
     ab4:	0b002403 	bleq	9ac8 <DISABLE_IRQ+0x9a48>
     ab8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     abc:	0400000e 	streq	r0, [r0], #-14
     ac0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     ac4:	0b3b0b3a 	bleq	ec37b4 <MEM_SIZE+0x6c37b4>
     ac8:	00001349 	andeq	r1, r0, r9, asr #6
     acc:	0b002405 	bleq	9ae8 <DISABLE_IRQ+0x9a68>
     ad0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     ad4:	06000008 	streq	r0, [r0], -r8
     ad8:	0b0b0104 	bleq	2c0ef0 <DISABLE_IRQ+0x2c0e70>
     adc:	0b3b0b3a 	bleq	ec37cc <MEM_SIZE+0x6c37cc>
     ae0:	00001301 	andeq	r1, r0, r1, lsl #6
     ae4:	03002807 	movweq	r2, #2055	; 0x807
     ae8:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     aec:	01130800 	tsteq	r3, r0, lsl #16
     af0:	0b0b0e03 	bleq	2c4304 <DISABLE_IRQ+0x2c4284>
     af4:	0b3b0b3a 	bleq	ec37e4 <MEM_SIZE+0x6c37e4>
     af8:	00001301 	andeq	r1, r0, r1, lsl #6
     afc:	03000d09 	movweq	r0, #3337	; 0xd09
     b00:	3b0b3a0e 	blcc	2cf340 <DISABLE_IRQ+0x2cf2c0>
     b04:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     b08:	0a00000a 	beq	b38 <DISABLE_IRQ+0xab8>
     b0c:	0b0b000f 	bleq	2c0b50 <DISABLE_IRQ+0x2c0ad0>
     b10:	00001349 	andeq	r1, r0, r9, asr #6
     b14:	03000d0b 	movweq	r0, #3339	; 0xd0b
     b18:	3b0b3a08 	blcc	2cf340 <DISABLE_IRQ+0x2cf2c0>
     b1c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     b20:	0c00000a 	stceq	0, cr0, [r0], {10}
     b24:	13490101 	movtne	r0, #37121	; 0x9101
     b28:	00001301 	andeq	r1, r0, r1, lsl #6
     b2c:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
     b30:	000b2f13 	andeq	r2, fp, r3, lsl pc
     b34:	00240e00 	eoreq	r0, r4, r0, lsl #28
     b38:	0b3e0b0b 	bleq	f8376c <MEM_SIZE+0x78376c>
     b3c:	150f0000 	strne	r0, [pc, #0]	; b44 <DISABLE_IRQ+0xac4>
     b40:	010c2701 	tsteq	ip, r1, lsl #14
     b44:	10000013 	andne	r0, r0, r3, lsl r0
     b48:	13490005 	movtne	r0, #36869	; 0x9005
     b4c:	0f110000 	svceq	0x00110000
     b50:	000b0b00 	andeq	r0, fp, r0, lsl #22
     b54:	01151200 	tsteq	r5, r0, lsl #4
     b58:	13490c27 	movtne	r0, #39975	; 0x9c27
     b5c:	00001301 	andeq	r1, r0, r1, lsl #6
     b60:	03012e13 	movweq	r2, #7699	; 0x1e13
     b64:	3b0b3a0e 	blcc	2cf3a4 <DISABLE_IRQ+0x2cf324>
     b68:	200c270b 	andcs	r2, ip, fp, lsl #14
     b6c:	0013010b 	andseq	r0, r3, fp, lsl #2
     b70:	00051400 	andeq	r1, r5, r0, lsl #8
     b74:	0b3a0e03 	bleq	e84388 <MEM_SIZE+0x684388>
     b78:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     b7c:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
     b80:	3a0e0301 	bcc	38178c <DISABLE_IRQ+0x38170c>
     b84:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     b88:	2013490c 	andscs	r4, r3, ip, lsl #18
     b8c:	0013010b 	andseq	r0, r3, fp, lsl #2
     b90:	00051600 	andeq	r1, r5, r0, lsl #12
     b94:	0b3a0803 	bleq	e82ba8 <MEM_SIZE+0x682ba8>
     b98:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     b9c:	34170000 	ldrcc	r0, [r7]
     ba0:	3a080300 	bcc	2017a8 <DISABLE_IRQ+0x201728>
     ba4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ba8:	18000013 	stmdane	r0, {r0, r1, r4}
     bac:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 0xffffff48
     bb0:	0b3a0e03 	bleq	e843c4 <MEM_SIZE+0x6843c4>
     bb4:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
     bb8:	01111349 	tsteq	r1, r9, asr #6
     bbc:	06400112 	undefined instruction 0x06400112
     bc0:	00001301 	andeq	r1, r0, r1, lsl #6
     bc4:	03000519 	movweq	r0, #1305	; 0x519
     bc8:	3b0b3a0e 	blcc	2cf408 <DISABLE_IRQ+0x2cf388>
     bcc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     bd0:	1a000006 	bne	bf0 <DISABLE_IRQ+0xb70>
     bd4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     bd8:	0b3b0b3a 	bleq	ec38c8 <MEM_SIZE+0x6c38c8>
     bdc:	0a021349 	beq	85908 <DISABLE_IRQ+0x85888>
     be0:	1d1b0000 	ldcne	0, cr0, [fp]
     be4:	11133101 	tstne	r3, r1, lsl #2
     be8:	58011201 	stmdapl	r1, {r0, r9, ip}
     bec:	000b590b 	andeq	r5, fp, fp, lsl #18
     bf0:	00051c00 	andeq	r1, r5, r0, lsl #24
     bf4:	00001331 	andeq	r1, r0, r1, lsr r3
     bf8:	3f012e1d 	svccc	0x00012e1d
     bfc:	3a0e030c 	bcc	381834 <DISABLE_IRQ+0x3817b4>
     c00:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     c04:	1113490c 	tstne	r3, ip, lsl #18
     c08:	40011201 	andmi	r1, r1, r1, lsl #4
     c0c:	00130106 	andseq	r0, r3, r6, lsl #2
     c10:	00051e00 	andeq	r1, r5, r0, lsl #28
     c14:	0b3a0803 	bleq	e82c28 <MEM_SIZE+0x682c28>
     c18:	1349053b 	movtne	r0, #38203	; 0x953b
     c1c:	00000602 	andeq	r0, r0, r2, lsl #12
     c20:	0300051f 	movweq	r0, #1311	; 0x51f
     c24:	3b0b3a0e 	blcc	2cf464 <DISABLE_IRQ+0x2cf3e4>
     c28:	02134905 	andseq	r4, r3, #81920	; 0x14000
     c2c:	20000006 	andcs	r0, r0, r6
     c30:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     c34:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     c38:	00001349 	andeq	r1, r0, r9, asr #6
     c3c:	31011d21 	tstcc	r1, r1, lsr #26
     c40:	55015213 	strpl	r5, [r1, #-531]	; 0x213
     c44:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     c48:	22000005 	andcs	r0, r0, #5
     c4c:	08030005 	stmdaeq	r3, {r0, r2}
     c50:	0b3b0b3a 	bleq	ec3940 <MEM_SIZE+0x6c3940>
     c54:	06021349 	streq	r1, [r2], -r9, asr #6
     c58:	34230000 	strtcc	r0, [r3]
     c5c:	3a0e0300 	bcc	381864 <DISABLE_IRQ+0x3817e4>
     c60:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c64:	00060213 	andeq	r0, r6, r3, lsl r2
     c68:	00342400 	eorseq	r2, r4, r0, lsl #8
     c6c:	0b3a0e03 	bleq	e84480 <MEM_SIZE+0x684480>
     c70:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c74:	34250000 	strtcc	r0, [r5]
     c78:	3a080300 	bcc	201880 <DISABLE_IRQ+0x201800>
     c7c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c80:	00060213 	andeq	r0, r6, r3, lsl r2
     c84:	011d2600 	tsteq	sp, r0, lsl #12
     c88:	01521331 	cmpeq	r2, r1, lsr r3
     c8c:	0b580655 	bleq	16025e8 <MEM_SIZE+0xe025e8>
     c90:	00000b59 	andeq	r0, r0, r9, asr fp
     c94:	55010b27 	strpl	r0, [r1, #-2855]	; 0xb27
     c98:	28000006 	stmdacs	r0, {r1, r2}
     c9c:	13310034 	teqne	r1, #52	; 0x34
     ca0:	34290000 	strtcc	r0, [r9]
     ca4:	02133100 	andseq	r3, r3, #0
     ca8:	2a000006 	bcs	cc8 <DISABLE_IRQ+0xc48>
     cac:	0111010b 	tsteq	r1, fp, lsl #2
     cb0:	00000112 	andeq	r0, r0, r2, lsl r1
     cb4:	0300342b 	movweq	r3, #1067	; 0x42b
     cb8:	3b0b3a0e 	blcc	2cf4f8 <DISABLE_IRQ+0x2cf478>
     cbc:	3f13490b 	svccc	0x0013490b
     cc0:	000c3c0c 	andeq	r3, ip, ip, lsl #24
     cc4:	11010000 	tstne	r1, r0
     cc8:	130e2501 	movwne	r2, #58625	; 0xe501
     ccc:	1b0e030b 	blne	381900 <DISABLE_IRQ+0x381880>
     cd0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     cd4:	00061001 	andeq	r1, r6, r1
     cd8:	00160200 	andseq	r0, r6, r0, lsl #4
     cdc:	0b3a0e03 	bleq	e844f0 <MEM_SIZE+0x6844f0>
     ce0:	00000b3b 	andeq	r0, r0, fp, lsr fp
     ce4:	0b002403 	bleq	9cf8 <DISABLE_IRQ+0x9c78>
     ce8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     cec:	0400000e 	streq	r0, [r0], #-14
     cf0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     cf4:	0b3b0b3a 	bleq	ec39e4 <MEM_SIZE+0x6c39e4>
     cf8:	00001349 	andeq	r1, r0, r9, asr #6
     cfc:	0b002405 	bleq	9d18 <DISABLE_IRQ+0x9c98>
     d00:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     d04:	06000008 	streq	r0, [r0], -r8
     d08:	0b0b0104 	bleq	2c1120 <DISABLE_IRQ+0x2c10a0>
     d0c:	0b3b0b3a 	bleq	ec39fc <MEM_SIZE+0x6c39fc>
     d10:	00001301 	andeq	r1, r0, r1, lsl #6
     d14:	03002807 	movweq	r2, #2055	; 0x807
     d18:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     d1c:	01130800 	tsteq	r3, r0, lsl #16
     d20:	0b0b0e03 	bleq	2c4534 <DISABLE_IRQ+0x2c44b4>
     d24:	0b3b0b3a 	bleq	ec3a14 <MEM_SIZE+0x6c3a14>
     d28:	00001301 	andeq	r1, r0, r1, lsl #6
     d2c:	03000d09 	movweq	r0, #3337	; 0xd09
     d30:	3b0b3a0e 	blcc	2cf570 <DISABLE_IRQ+0x2cf4f0>
     d34:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     d38:	0a00000a 	beq	d68 <DISABLE_IRQ+0xce8>
     d3c:	0b0b000f 	bleq	2c0d80 <DISABLE_IRQ+0x2c0d00>
     d40:	00001349 	andeq	r1, r0, r9, asr #6
     d44:	03000d0b 	movweq	r0, #3339	; 0xd0b
     d48:	3b0b3a08 	blcc	2cf570 <DISABLE_IRQ+0x2cf4f0>
     d4c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     d50:	0c00000a 	stceq	0, cr0, [r0], {10}
     d54:	13490101 	movtne	r0, #37121	; 0x9101
     d58:	00001301 	andeq	r1, r0, r1, lsl #6
     d5c:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
     d60:	000b2f13 	andeq	r2, fp, r3, lsl pc
     d64:	00240e00 	eoreq	r0, r4, r0, lsl #28
     d68:	0b3e0b0b 	bleq	f8399c <MEM_SIZE+0x78399c>
     d6c:	0f0f0000 	svceq	0x000f0000
     d70:	000b0b00 	andeq	r0, fp, r0, lsl #22
     d74:	01151000 	tsteq	r5, r0
     d78:	13010c27 	movwne	r0, #7207	; 0x1c27
     d7c:	05110000 	ldreq	r0, [r1]
     d80:	00134900 	andseq	r4, r3, r0, lsl #18
     d84:	012e1200 	teqeq	lr, r0, lsl #4
     d88:	0b3a0e03 	bleq	e8459c <MEM_SIZE+0x68459c>
     d8c:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
     d90:	0b201349 	bleq	805abc <MEM_SIZE+0x5abc>
     d94:	00001301 	andeq	r1, r0, r1, lsl #6
     d98:	03000513 	movweq	r0, #1299	; 0x513
     d9c:	3b0b3a0e 	blcc	2cf5dc <DISABLE_IRQ+0x2cf55c>
     da0:	0013490b 	andseq	r4, r3, fp, lsl #18
     da4:	012e1400 	teqeq	lr, r0, lsl #8
     da8:	0b3a0e03 	bleq	e845bc <MEM_SIZE+0x6845bc>
     dac:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
     db0:	13010b20 	movwne	r0, #6944	; 0x1b20
     db4:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
     db8:	030c3f01 	movweq	r3, #52993	; 0xcf01
     dbc:	3b0b3a0e 	blcc	2cf5fc <DISABLE_IRQ+0x2cf57c>
     dc0:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     dc4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     dc8:	01064001 	tsteq	r6, r1
     dcc:	16000013 	undefined instruction 0x16000013
     dd0:	08030005 	stmdaeq	r3, {r0, r2}
     dd4:	0b3b0b3a 	bleq	ec3ac4 <MEM_SIZE+0x6c3ac4>
     dd8:	06021349 	streq	r1, [r2], -r9, asr #6
     ddc:	05170000 	ldreq	r0, [r7]
     de0:	3a0e0300 	bcc	3819e8 <DISABLE_IRQ+0x381968>
     de4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     de8:	000a0213 	andeq	r0, sl, r3, lsl r2
     dec:	00341800 	eorseq	r1, r4, r0, lsl #16
     df0:	0b3a0e03 	bleq	e84604 <MEM_SIZE+0x684604>
     df4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     df8:	00000602 	andeq	r0, r0, r2, lsl #12
     dfc:	03003419 	movweq	r3, #1049	; 0x419
     e00:	3b0b3a08 	blcc	2cf628 <DISABLE_IRQ+0x2cf5a8>
     e04:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     e08:	1a000006 	bne	e28 <DISABLE_IRQ+0xda8>
     e0c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     e10:	0b3b0b3a 	bleq	ec3b00 <MEM_SIZE+0x6c3b00>
     e14:	00001349 	andeq	r1, r0, r9, asr #6
     e18:	31011d1b 	tstcc	r1, fp, lsl sp
     e1c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     e20:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     e24:	1c00000b 	stcne	0, cr0, [r0], {11}
     e28:	13310005 	teqne	r1, #5
     e2c:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
     e30:	3a0e0301 	bcc	381a3c <DISABLE_IRQ+0x3819bc>
     e34:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     e38:	1201110c 	andne	r1, r1, #3
     e3c:	01064001 	tsteq	r6, r1
     e40:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     e44:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     e48:	0b3b0b3a 	bleq	ec3b38 <MEM_SIZE+0x6c3b38>
     e4c:	06021349 	streq	r1, [r2], -r9, asr #6
     e50:	341f0000 	ldrcc	r0, [pc], #0	; e58 <DISABLE_IRQ+0xdd8>
     e54:	3a0e0300 	bcc	381a5c <DISABLE_IRQ+0x3819dc>
     e58:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e5c:	000a0213 	andeq	r0, sl, r3, lsl r2
     e60:	012e2000 	teqeq	lr, r0
     e64:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     e68:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     e6c:	13490c27 	movtne	r0, #39975	; 0x9c27
     e70:	01120111 	tsteq	r2, r1, lsl r1
     e74:	13010640 	movwne	r0, #5696	; 0x1640
     e78:	05210000 	streq	r0, [r1]!
     e7c:	3a0e0300 	bcc	381a84 <DISABLE_IRQ+0x381a04>
     e80:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e84:	00060213 	andeq	r0, r6, r3, lsl r2
     e88:	00342200 	eorseq	r2, r4, r0, lsl #4
     e8c:	0b3a0e03 	bleq	e846a0 <MEM_SIZE+0x6846a0>
     e90:	1349053b 	movtne	r0, #38203	; 0x953b
     e94:	1d230000 	stcne	0, cr0, [r3]
     e98:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     e9c:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
     ea0:	0005590b 	andeq	r5, r5, fp, lsl #18
     ea4:	012e2400 	teqeq	lr, r0, lsl #8
     ea8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     eac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     eb0:	01110c27 	tsteq	r1, r7, lsr #24
     eb4:	0a400112 	beq	1001304 <MEM_SIZE+0x801304>
     eb8:	00001301 	andeq	r1, r0, r1, lsl #6
     ebc:	03000525 	movweq	r0, #1317	; 0x525
     ec0:	3b0b3a08 	blcc	2cf6e8 <DISABLE_IRQ+0x2cf668>
     ec4:	02134905 	andseq	r4, r3, #81920	; 0x14000
     ec8:	26000006 	strcs	r0, [r0], -r6
     ecc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     ed0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     ed4:	06021349 	streq	r1, [r2], -r9, asr #6
     ed8:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
     edc:	030c3f01 	movweq	r3, #52993	; 0xcf01
     ee0:	3b0b3a0e 	blcc	2cf720 <DISABLE_IRQ+0x2cf6a0>
     ee4:	110c270b 	tstne	ip, fp, lsl #14
     ee8:	40011201 	andmi	r1, r1, r1, lsl #4
     eec:	00130106 	andseq	r0, r3, r6, lsl #2
     ef0:	012e2800 	teqeq	lr, r0, lsl #16
     ef4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     ef8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     efc:	01110c27 	tsteq	r1, r7, lsr #24
     f00:	06400112 	undefined instruction 0x06400112
     f04:	00001301 	andeq	r1, r0, r1, lsl #6
     f08:	03003429 	movweq	r3, #1065	; 0x429
     f0c:	3b0b3a0e 	blcc	2cf74c <DISABLE_IRQ+0x2cf6cc>
     f10:	02134905 	andseq	r4, r3, #81920	; 0x14000
     f14:	2a00000a 	bcs	f44 <DISABLE_IRQ+0xec4>
     f18:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     f1c:	01120111 	tsteq	r2, r1, lsl r1
     f20:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
     f24:	342b0000 	strtcc	r0, [fp]
     f28:	3a080300 	bcc	201b30 <DISABLE_IRQ+0x201ab0>
     f2c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f30:	00060213 	andeq	r0, r6, r3, lsl r2
     f34:	00342c00 	eorseq	r2, r4, r0, lsl #24
     f38:	0b3a0e03 	bleq	e8474c <MEM_SIZE+0x68474c>
     f3c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f40:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
     f44:	01000000 	tsteq	r0, r0
     f48:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     f4c:	0e030b13 	vmoveq.32	d3[0], r0
     f50:	01110e1b 	tsteq	r1, fp, lsl lr
     f54:	06100112 	undefined instruction 0x06100112
     f58:	16020000 	strne	r0, [r2], -r0
     f5c:	3a0e0300 	bcc	381b64 <DISABLE_IRQ+0x381ae4>
     f60:	000b3b0b 	andeq	r3, fp, fp, lsl #22
     f64:	00240300 	eoreq	r0, r4, r0, lsl #6
     f68:	0b3e0b0b 	bleq	f83b9c <MEM_SIZE+0x783b9c>
     f6c:	00000e03 	andeq	r0, r0, r3, lsl #28
     f70:	03001604 	movweq	r1, #1540	; 0x604
     f74:	3b0b3a0e 	blcc	2cf7b4 <DISABLE_IRQ+0x2cf734>
     f78:	0013490b 	andseq	r4, r3, fp, lsl #18
     f7c:	00240500 	eoreq	r0, r4, r0, lsl #10
     f80:	0b3e0b0b 	bleq	f83bb4 <MEM_SIZE+0x783bb4>
     f84:	00000803 	andeq	r0, r0, r3, lsl #16
     f88:	03011306 	movweq	r1, #4870	; 0x1306
     f8c:	3a0b0b0e 	bcc	2c3bcc <DISABLE_IRQ+0x2c3b4c>
     f90:	010b3b0b 	tsteq	fp, fp, lsl #22
     f94:	07000013 	smladeq	r0, r3, r0, r0
     f98:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     f9c:	0b3b0b3a 	bleq	ec3c8c <MEM_SIZE+0x6c3c8c>
     fa0:	0a381349 	beq	e05ccc <MEM_SIZE+0x605ccc>
     fa4:	0f080000 	svceq	0x00080000
     fa8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     fac:	09000013 	stmdbeq	r0, {r0, r1, r4}
     fb0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     fb4:	0b3b0b3a 	bleq	ec3ca4 <MEM_SIZE+0x6c3ca4>
     fb8:	0a381349 	beq	e05ce4 <MEM_SIZE+0x605ce4>
     fbc:	010a0000 	tsteq	sl, r0
     fc0:	01134901 	tsteq	r3, r1, lsl #18
     fc4:	0b000013 	bleq	1018 <DISABLE_IRQ+0xf98>
     fc8:	13490021 	movtne	r0, #36897	; 0x9021
     fcc:	00000b2f 	andeq	r0, r0, pc, lsr #22
     fd0:	0b00240c 	bleq	a008 <DISABLE_IRQ+0x9f88>
     fd4:	000b3e0b 	andeq	r3, fp, fp, lsl #28
     fd8:	01130d00 	tsteq	r3, r0, lsl #26
     fdc:	050b0e03 	streq	r0, [fp, #-3587]	; 0xe03
     fe0:	0b3b0b3a 	bleq	ec3cd0 <MEM_SIZE+0x6c3cd0>
     fe4:	00001301 	andeq	r1, r0, r1, lsl #6
     fe8:	0b000f0e 	bleq	4c28 <DISABLE_IRQ+0x4ba8>
     fec:	0f00000b 	svceq	0x0000000b
     ff0:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
     ff4:	00001301 	andeq	r1, r0, r1, lsl #6
     ff8:	49000510 	stmdbmi	r0, {r4, r8, sl}
     ffc:	11000013 	tstne	r0, r3, lsl r0
    1000:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1004:	0b3b0b3a 	bleq	ec3cf4 <MEM_SIZE+0x6c3cf4>
    1008:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 0xfffffedc
    100c:	00000a02 	andeq	r0, r0, r2, lsl #20
    1010:	01110100 	tsteq	r1, r0, lsl #2
    1014:	0b130e25 	bleq	4c48b0 <DISABLE_IRQ+0x4c4830>
    1018:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    101c:	01120111 	tsteq	r2, r1, lsl r1
    1020:	00000610 	andeq	r0, r0, r0, lsl r6
    1024:	03001602 	movweq	r1, #1538	; 0x602
    1028:	3b0b3a0e 	blcc	2cf868 <DISABLE_IRQ+0x2cf7e8>
    102c:	0300000b 	movweq	r0, #11
    1030:	0b0b0024 	bleq	2c10c8 <DISABLE_IRQ+0x2c1048>
    1034:	0e030b3e 	vmoveq.16	d3[0], r0
    1038:	16040000 	strne	r0, [r4], -r0
    103c:	3a0e0300 	bcc	381c44 <DISABLE_IRQ+0x381bc4>
    1040:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1044:	05000013 	streq	r0, [r0, #-19]
    1048:	0b0b0024 	bleq	2c10e0 <DISABLE_IRQ+0x2c1060>
    104c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1050:	04060000 	streq	r0, [r6]
    1054:	3a0b0b01 	bcc	2c3c60 <DISABLE_IRQ+0x2c3be0>
    1058:	010b3b0b 	tsteq	fp, fp, lsl #22
    105c:	07000013 	smladeq	r0, r3, r0, r0
    1060:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1064:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1068:	03011308 	movweq	r1, #4872	; 0x1308
    106c:	3a0b0b0e 	bcc	2c3cac <DISABLE_IRQ+0x2c3c2c>
    1070:	010b3b0b 	tsteq	fp, fp, lsl #22
    1074:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1078:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    107c:	0b3b0b3a 	bleq	ec3d6c <MEM_SIZE+0x6c3d6c>
    1080:	0a381349 	beq	e05dac <MEM_SIZE+0x605dac>
    1084:	0f0a0000 	svceq	0x000a0000
    1088:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    108c:	0b000013 	bleq	10e0 <DISABLE_IRQ+0x1060>
    1090:	0e030104 	adfeqs	f0, f3, f4
    1094:	0b3a0b0b 	bleq	e83cc8 <MEM_SIZE+0x683cc8>
    1098:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    109c:	0d0c0000 	stceq	0, cr0, [ip]
    10a0:	3a080300 	bcc	201ca8 <DISABLE_IRQ+0x201c28>
    10a4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10a8:	000a3813 	andeq	r3, sl, r3, lsl r8
    10ac:	01010d00 	tsteq	r1, r0, lsl #26
    10b0:	13011349 	movwne	r1, #4937	; 0x1349
    10b4:	210e0000 	tstcs	lr, r0
    10b8:	2f134900 	svccs	0x00134900
    10bc:	0f00000b 	svceq	0x0000000b
    10c0:	0b0b0024 	bleq	2c1158 <DISABLE_IRQ+0x2c10d8>
    10c4:	00000b3e 	andeq	r0, r0, lr, lsr fp
    10c8:	03011310 	movweq	r1, #4880	; 0x1310
    10cc:	3a050b0e 	bcc	143d0c <DISABLE_IRQ+0x143c8c>
    10d0:	010b3b0b 	tsteq	fp, fp, lsl #22
    10d4:	11000013 	tstne	r0, r3, lsl r0
    10d8:	0b0b000f 	bleq	2c111c <DISABLE_IRQ+0x2c109c>
    10dc:	15120000 	ldrne	r0, [r2]
    10e0:	010c2701 	tsteq	ip, r1, lsl #14
    10e4:	13000013 	movwne	r0, #19
    10e8:	13490005 	movtne	r0, #36869	; 0x9005
    10ec:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    10f0:	3a0e0301 	bcc	381cfc <DISABLE_IRQ+0x381c7c>
    10f4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    10f8:	010b200c 	tsteq	fp, ip
    10fc:	15000013 	strne	r0, [r0, #-19]
    1100:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1104:	0b3b0b3a 	bleq	ec3df4 <MEM_SIZE+0x6c3df4>
    1108:	00001349 	andeq	r1, r0, r9, asr #6
    110c:	03003416 	movweq	r3, #1046	; 0x416
    1110:	3b0b3a08 	blcc	2cf938 <DISABLE_IRQ+0x2cf8b8>
    1114:	0013490b 	andseq	r4, r3, fp, lsl #18
    1118:	00341700 	eorseq	r1, r4, r0, lsl #14
    111c:	0b3a0e03 	bleq	e84930 <MEM_SIZE+0x684930>
    1120:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1124:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
    1128:	030c3f01 	movweq	r3, #52993	; 0xcf01
    112c:	3b0b3a0e 	blcc	2cf96c <DISABLE_IRQ+0x2cf8ec>
    1130:	200c270b 	andcs	r2, ip, fp, lsl #14
    1134:	0013010b 	andseq	r0, r3, fp, lsl #2
    1138:	00051900 	andeq	r1, r5, r0, lsl #18
    113c:	0b3a0803 	bleq	e83150 <MEM_SIZE+0x683150>
    1140:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1144:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
    1148:	3a0e0301 	bcc	381d54 <DISABLE_IRQ+0x381cd4>
    114c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1150:	2013490c 	andscs	r4, r3, ip, lsl #18
    1154:	0013010b 	andseq	r0, r3, fp, lsl #2
    1158:	012e1b00 	teqeq	lr, r0, lsl #22
    115c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1160:	0b3b0b3a 	bleq	ec3e50 <MEM_SIZE+0x6c3e50>
    1164:	01110c27 	tsteq	r1, r7, lsr #24
    1168:	0a400112 	beq	10015b8 <MEM_SIZE+0x8015b8>
    116c:	00001301 	andeq	r1, r0, r1, lsl #6
    1170:	0300051c 	movweq	r0, #1308	; 0x51c
    1174:	3b0b3a08 	blcc	2cf99c <DISABLE_IRQ+0x2cf91c>
    1178:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    117c:	1d00000a 	stcne	0, cr0, [r0, #-40]	; 0xffffffd8
    1180:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1184:	06550152 	undefined instruction 0x06550152
    1188:	0b590b58 	bleq	1643ef0 <MEM_SIZE+0xe43ef0>
    118c:	051e0000 	ldreq	r0, [lr]
    1190:	00133100 	andseq	r3, r3, r0, lsl #2
    1194:	012e1f00 	teqeq	lr, r0, lsl #30
    1198:	01111331 	tsteq	r1, r1, lsr r3
    119c:	06400112 	undefined instruction 0x06400112
    11a0:	00001301 	andeq	r1, r0, r1, lsl #6
    11a4:	31000520 	tstcc	r0, r0, lsr #10
    11a8:	000a0213 	andeq	r0, sl, r3, lsl r2
    11ac:	00052100 	andeq	r2, r5, r0, lsl #2
    11b0:	06021331 	undefined instruction 0x06021331
    11b4:	34220000 	strtcc	r0, [r2]
    11b8:	02133100 	andseq	r3, r3, #0
    11bc:	2300000a 	movwcs	r0, #10
    11c0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    11c4:	06550152 	undefined instruction 0x06550152
    11c8:	0b590b58 	bleq	1643f30 <MEM_SIZE+0xe43f30>
    11cc:	00001301 	andeq	r1, r0, r1, lsl #6
    11d0:	55010b24 	strpl	r0, [r1, #-2852]	; 0xb24
    11d4:	25000006 	strcs	r0, [r0, #-6]
    11d8:	13310034 	teqne	r1, #52	; 0x34
    11dc:	1d260000 	stcne	0, cr0, [r6]
    11e0:	11133101 	tstne	r3, r1, lsl #2
    11e4:	58011201 	stmdapl	r1, {r0, r9, ip}
    11e8:	000b590b 	andeq	r5, fp, fp, lsl #18
    11ec:	011d2700 	tsteq	sp, r0, lsl #14
    11f0:	01111331 	tsteq	r1, r1, lsr r3
    11f4:	0b580112 	bleq	1601644 <MEM_SIZE+0xe01644>
    11f8:	13010b59 	movwne	r0, #7001	; 0x1b59
    11fc:	0b280000 	bleq	a01204 <MEM_SIZE+0x201204>
    1200:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    1204:	29000001 	stmdbcs	r0, {r0}
    1208:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 0xffffff48
    120c:	0b3a0e03 	bleq	e84a20 <MEM_SIZE+0x684a20>
    1210:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
    1214:	01120111 	tsteq	r2, r1, lsl r1
    1218:	13010640 	movwne	r0, #5696	; 0x1640
    121c:	052a0000 	streq	r0, [sl]!
    1220:	3a0e0300 	bcc	381e28 <DISABLE_IRQ+0x381da8>
    1224:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1228:	00060213 	andeq	r0, r6, r3, lsl r2
    122c:	00342b00 	eorseq	r2, r4, r0, lsl #22
    1230:	06021331 	undefined instruction 0x06021331
    1234:	052c0000 	streq	r0, [ip]!
    1238:	3a080300 	bcc	201e40 <DISABLE_IRQ+0x201dc0>
    123c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1240:	00060213 	andeq	r0, r6, r3, lsl r2
    1244:	00052d00 	andeq	r2, r5, r0, lsl #26
    1248:	0b3a0e03 	bleq	e84a5c <MEM_SIZE+0x684a5c>
    124c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1250:	00000a02 	andeq	r0, r0, r2, lsl #20
    1254:	3f012e2e 	svccc	0x00012e2e
    1258:	3a0e030c 	bcc	381e90 <DISABLE_IRQ+0x381e10>
    125c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1260:	1201110c 	andne	r1, r1, #3
    1264:	010a4001 	tsteq	sl, r1
    1268:	2f000013 	svccs	0x00000013
    126c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1270:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1274:	0a021349 	beq	85fa0 <DISABLE_IRQ+0x85f20>
    1278:	34300000 	ldrtcc	r0, [r0]
    127c:	3a0e0300 	bcc	381e84 <DISABLE_IRQ+0x381e04>
    1280:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1284:	31000013 	tstcc	r0, r3, lsl r0
    1288:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    128c:	06550152 	undefined instruction 0x06550152
    1290:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
    1294:	00001301 	andeq	r1, r0, r1, lsl #6
    1298:	31011d32 	tstcc	r1, r2, lsr sp
    129c:	55015213 	strpl	r5, [r1, #-531]	; 0x213
    12a0:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    12a4:	33000005 	movwcc	r0, #5
    12a8:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 0xffffff48
    12ac:	0b3a0e03 	bleq	e84ac0 <MEM_SIZE+0x684ac0>
    12b0:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
    12b4:	01111349 	tsteq	r1, r9, asr #6
    12b8:	06400112 	undefined instruction 0x06400112
    12bc:	00001301 	andeq	r1, r0, r1, lsl #6
    12c0:	03000534 	movweq	r0, #1332	; 0x534
    12c4:	3b0b3a0e 	blcc	2cfb04 <DISABLE_IRQ+0x2cfa84>
    12c8:	02134905 	andseq	r4, r3, #81920	; 0x14000
    12cc:	35000006 	strcc	r0, [r0, #-6]
    12d0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    12d4:	01120111 	tsteq	r2, r1, lsl r1
    12d8:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
    12dc:	00001301 	andeq	r1, r0, r1, lsl #6
    12e0:	03012e36 	movweq	r2, #7734	; 0x1e36
    12e4:	3b0b3a0e 	blcc	2cfb24 <DISABLE_IRQ+0x2cfaa4>
    12e8:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    12ec:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    12f0:	01064001 	tsteq	r6, r1
    12f4:	37000013 	smladcc	r0, r3, r0, r0
    12f8:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 0xffffff48
    12fc:	0b3a0e03 	bleq	e84b10 <MEM_SIZE+0x684b10>
    1300:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
    1304:	01111349 	tsteq	r1, r9, asr #6
    1308:	0a400112 	beq	1001758 <MEM_SIZE+0x801758>
    130c:	00001301 	andeq	r1, r0, r1, lsl #6
    1310:	03000538 	movweq	r0, #1336	; 0x538
    1314:	3b0b3a08 	blcc	2cfb3c <DISABLE_IRQ+0x2cfabc>
    1318:	02134905 	andseq	r4, r3, #81920	; 0x14000
    131c:	39000006 	stmdbcc	r0, {r1, r2}
    1320:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1324:	0b3b0b3a 	bleq	ec4014 <MEM_SIZE+0x6c4014>
    1328:	06021349 	streq	r1, [r2], -r9, asr #6
    132c:	343a0000 	ldrtcc	r0, [sl]
    1330:	3a0e0300 	bcc	381f38 <DISABLE_IRQ+0x381eb8>
    1334:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1338:	00060213 	andeq	r0, r6, r3, lsl r2
    133c:	00343b00 	eorseq	r3, r4, r0, lsl #22
    1340:	0b3a0e03 	bleq	e84b54 <MEM_SIZE+0x684b54>
    1344:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1348:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    134c:	01000000 	tsteq	r0, r0
    1350:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1354:	0e030b13 	vmoveq.32	d3[0], r0
    1358:	01110e1b 	tsteq	r1, fp, lsl lr
    135c:	06100112 	undefined instruction 0x06100112
    1360:	16020000 	strne	r0, [r2], -r0
    1364:	3a0e0300 	bcc	381f6c <DISABLE_IRQ+0x381eec>
    1368:	000b3b0b 	andeq	r3, fp, fp, lsl #22
    136c:	00240300 	eoreq	r0, r4, r0, lsl #6
    1370:	0b3e0b0b 	bleq	f83fa4 <MEM_SIZE+0x783fa4>
    1374:	00000e03 	andeq	r0, r0, r3, lsl #28
    1378:	03001604 	movweq	r1, #1540	; 0x604
    137c:	3b0b3a0e 	blcc	2cfbbc <DISABLE_IRQ+0x2cfb3c>
    1380:	0013490b 	andseq	r4, r3, fp, lsl #18
    1384:	00240500 	eoreq	r0, r4, r0, lsl #10
    1388:	0b3e0b0b 	bleq	f83fbc <MEM_SIZE+0x783fbc>
    138c:	00000803 	andeq	r0, r0, r3, lsl #16
    1390:	0b010406 	bleq	423b0 <DISABLE_IRQ+0x42330>
    1394:	3b0b3a0b 	blcc	2cfbc8 <DISABLE_IRQ+0x2cfb48>
    1398:	0013010b 	andseq	r0, r3, fp, lsl #2
    139c:	00280700 	eoreq	r0, r8, r0, lsl #14
    13a0:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    13a4:	13080000 	movwne	r0, #32768	; 0x8000
    13a8:	0b0e0301 	bleq	381fb4 <DISABLE_IRQ+0x381f34>
    13ac:	3b0b3a0b 	blcc	2cfbe0 <DISABLE_IRQ+0x2cfb60>
    13b0:	0013010b 	andseq	r0, r3, fp, lsl #2
    13b4:	000d0900 	andeq	r0, sp, r0, lsl #18
    13b8:	0b3a0e03 	bleq	e84bcc <MEM_SIZE+0x684bcc>
    13bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    13c0:	00000a38 	andeq	r0, r0, r8, lsr sl
    13c4:	0b000f0a 	bleq	4ff4 <DISABLE_IRQ+0x4f74>
    13c8:	0013490b 	andseq	r4, r3, fp, lsl #18
    13cc:	000d0b00 	andeq	r0, sp, r0, lsl #22
    13d0:	0b3a0803 	bleq	e833e4 <MEM_SIZE+0x6833e4>
    13d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    13d8:	00000a38 	andeq	r0, r0, r8, lsr sl
    13dc:	4901010c 	stmdbmi	r1, {r2, r3, r8}
    13e0:	00130113 	andseq	r0, r3, r3, lsl r1
    13e4:	00210d00 	eoreq	r0, r1, r0, lsl #26
    13e8:	0b2f1349 	bleq	bc6114 <MEM_SIZE+0x3c6114>
    13ec:	240e0000 	strcs	r0, [lr]
    13f0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    13f4:	0f00000b 	svceq	0x0000000b
    13f8:	0b0b000f 	bleq	2c143c <DISABLE_IRQ+0x2c13bc>
    13fc:	15100000 	ldrne	r0, [r0]
    1400:	010c2701 	tsteq	ip, r1, lsl #14
    1404:	11000013 	tstne	r0, r3, lsl r0
    1408:	13490005 	movtne	r0, #36869	; 0x9005
    140c:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
    1410:	3a0e0301 	bcc	38201c <DISABLE_IRQ+0x381f9c>
    1414:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1418:	2013490c 	andscs	r4, r3, ip, lsl #18
    141c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1420:	00051300 	andeq	r1, r5, r0, lsl #6
    1424:	0b3a0e03 	bleq	e84c38 <MEM_SIZE+0x684c38>
    1428:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    142c:	05140000 	ldreq	r0, [r4]
    1430:	3a080300 	bcc	202038 <DISABLE_IRQ+0x201fb8>
    1434:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1438:	15000013 	strne	r0, [r0, #-19]
    143c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1440:	0b3b0b3a 	bleq	ec4130 <MEM_SIZE+0x6c4130>
    1444:	00001349 	andeq	r1, r0, r9, asr #6
    1448:	03012e16 	movweq	r2, #7702	; 0x1e16
    144c:	3b0b3a0e 	blcc	2cfc8c <DISABLE_IRQ+0x2cfc0c>
    1450:	200c270b 	andcs	r2, ip, fp, lsl #14
    1454:	0013010b 	andseq	r0, r3, fp, lsl #2
    1458:	012e1700 	teqeq	lr, r0, lsl #14
    145c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1460:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1464:	13490c27 	movtne	r0, #39975	; 0x9c27
    1468:	01120111 	tsteq	r2, r1, lsl r1
    146c:	13010640 	movwne	r0, #5696	; 0x1640
    1470:	05180000 	ldreq	r0, [r8]
    1474:	3a080300 	bcc	20207c <DISABLE_IRQ+0x201ffc>
    1478:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    147c:	00060213 	andeq	r0, r6, r3, lsl r2
    1480:	00051900 	andeq	r1, r5, r0, lsl #18
    1484:	0b3a0e03 	bleq	e84c98 <MEM_SIZE+0x684c98>
    1488:	1349053b 	movtne	r0, #38203	; 0x953b
    148c:	00000602 	andeq	r0, r0, r2, lsl #12
    1490:	0300341a 	movweq	r3, #1050	; 0x41a
    1494:	3b0b3a0e 	blcc	2cfcd4 <DISABLE_IRQ+0x2cfc54>
    1498:	00134905 	andseq	r4, r3, r5, lsl #18
    149c:	011d1b00 	tsteq	sp, r0, lsl #22
    14a0:	01521331 	cmpeq	r2, r1, lsr r3
    14a4:	0b580655 	bleq	1602e00 <MEM_SIZE+0xe02e00>
    14a8:	00000559 	andeq	r0, r0, r9, asr r5
    14ac:	3100051c 	tstcc	r0, ip, lsl r5
    14b0:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    14b4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    14b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    14bc:	06021349 	streq	r1, [r2], -r9, asr #6
    14c0:	1d1e0000 	ldcne	0, cr0, [lr]
    14c4:	11133101 	tstne	r3, r1, lsl #2
    14c8:	58011201 	stmdapl	r1, {r0, r9, ip}
    14cc:	0105590b 	tsteq	r5, fp, lsl #18
    14d0:	1f000013 	svcne	0x00000013
    14d4:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    14d8:	34200000 	strtcc	r0, [r0]
    14dc:	02133100 	andseq	r3, r3, #0
    14e0:	21000006 	tstcs	r0, r6
    14e4:	13310034 	teqne	r1, #52	; 0x34
    14e8:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
    14ec:	030c3f01 	movweq	r3, #52993	; 0xcf01
    14f0:	3b0b3a0e 	blcc	2cfd30 <DISABLE_IRQ+0x2cfcb0>
    14f4:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    14f8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    14fc:	01064001 	tsteq	r6, r1
    1500:	23000013 	movwcs	r0, #19
    1504:	08030005 	stmdaeq	r3, {r0, r2}
    1508:	0b3b0b3a 	bleq	ec41f8 <MEM_SIZE+0x6c41f8>
    150c:	06021349 	streq	r1, [r2], -r9, asr #6
    1510:	05240000 	streq	r0, [r4]!
    1514:	3a0e0300 	bcc	38211c <DISABLE_IRQ+0x38209c>
    1518:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    151c:	00060213 	andeq	r0, r6, r3, lsl r2
    1520:	00342500 	eorseq	r2, r4, r0, lsl #10
    1524:	0b3a0e03 	bleq	e84d38 <MEM_SIZE+0x684d38>
    1528:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    152c:	00000602 	andeq	r0, r0, r2, lsl #12
    1530:	31011d26 	tstcc	r1, r6, lsr #26
    1534:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1538:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    153c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1540:	011d2700 	tsteq	sp, r0, lsl #14
    1544:	01521331 	cmpeq	r2, r1, lsr r3
    1548:	0b580655 	bleq	1602ea4 <MEM_SIZE+0xe02ea4>
    154c:	00000b59 	andeq	r0, r0, r9, asr fp
    1550:	03000528 	movweq	r0, #1320	; 0x528
    1554:	3b0b3a0e 	blcc	2cfd94 <DISABLE_IRQ+0x2cfd14>
    1558:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    155c:	2900000a 	stmdbcs	r0, {r1, r3}
    1560:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1564:	01120111 	tsteq	r2, r1, lsl r1
    1568:	0b590b58 	bleq	16442d0 <MEM_SIZE+0xe442d0>
    156c:	342a0000 	strtcc	r0, [sl]
    1570:	3a0e0300 	bcc	382178 <DISABLE_IRQ+0x3820f8>
    1574:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1578:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    157c:	0000000c 	andeq	r0, r0, ip
    1580:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    1584:	030b130e 	movweq	r1, #45838	; 0xb30e
    1588:	110e1b0e 	tstne	lr, lr, lsl #22
    158c:	10011201 	andne	r1, r1, r1, lsl #4
    1590:	02000006 	andeq	r0, r0, #6
    1594:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1598:	0b3b0b3a 	bleq	ec4288 <MEM_SIZE+0x6c4288>
    159c:	24030000 	strcs	r0, [r3]
    15a0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    15a4:	000e030b 	andeq	r0, lr, fp, lsl #6
    15a8:	00160400 	andseq	r0, r6, r0, lsl #8
    15ac:	0b3a0e03 	bleq	e84dc0 <MEM_SIZE+0x684dc0>
    15b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    15b4:	24050000 	strcs	r0, [r5]
    15b8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    15bc:	0008030b 	andeq	r0, r8, fp, lsl #6
    15c0:	01040600 	tsteq	r4, r0, lsl #12
    15c4:	0b3a0b0b 	bleq	e841f8 <MEM_SIZE+0x6841f8>
    15c8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    15cc:	28070000 	stmdacs	r7, {}
    15d0:	1c0e0300 	stcne	3, cr0, [lr], {0}
    15d4:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    15d8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    15dc:	0b3a0b0b 	bleq	e84210 <MEM_SIZE+0x684210>
    15e0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    15e4:	0d090000 	stceq	0, cr0, [r9]
    15e8:	3a0e0300 	bcc	3821f0 <DISABLE_IRQ+0x382170>
    15ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15f0:	000a3813 	andeq	r3, sl, r3, lsl r8
    15f4:	000f0a00 	andeq	r0, pc, r0, lsl #20
    15f8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    15fc:	0d0b0000 	stceq	0, cr0, [fp]
    1600:	3a080300 	bcc	202208 <DISABLE_IRQ+0x202188>
    1604:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1608:	000a3813 	andeq	r3, sl, r3, lsl r8
    160c:	01010c00 	tsteq	r1, r0, lsl #24
    1610:	13011349 	movwne	r1, #4937	; 0x1349
    1614:	210d0000 	tstcs	sp, r0
    1618:	2f134900 	svccs	0x00134900
    161c:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    1620:	0b0b0024 	bleq	2c16b8 <DISABLE_IRQ+0x2c1638>
    1624:	00000b3e 	andeq	r0, r0, lr, lsr fp
    1628:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    162c:	0013010c 	andseq	r0, r3, ip, lsl #2
    1630:	00051000 	andeq	r1, r5, r0
    1634:	00001349 	andeq	r1, r0, r9, asr #6
    1638:	0b000f11 	bleq	5284 <DISABLE_IRQ+0x5204>
    163c:	1200000b 	andne	r0, r0, #11
    1640:	0e03012e 	adfeqsp	f0, f3, #0.5
    1644:	0b3b0b3a 	bleq	ec4334 <MEM_SIZE+0x6c4334>
    1648:	13490c27 	movtne	r0, #39975	; 0x9c27
    164c:	13010b20 	movwne	r0, #6944	; 0x1b20
    1650:	05130000 	ldreq	r0, [r3]
    1654:	3a0e0300 	bcc	38225c <DISABLE_IRQ+0x3821dc>
    1658:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    165c:	14000013 	strne	r0, [r0], #-19
    1660:	0e03012e 	adfeqsp	f0, f3, #0.5
    1664:	0b3b0b3a 	bleq	ec4354 <MEM_SIZE+0x6c4354>
    1668:	0b200c27 	bleq	80470c <MEM_SIZE+0x470c>
    166c:	00001301 	andeq	r1, r0, r1, lsl #6
    1670:	3f012e15 	svccc	0x00012e15
    1674:	3a0e030c 	bcc	3822ac <DISABLE_IRQ+0x38222c>
    1678:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    167c:	1113490c 	tstne	r3, ip, lsl #18
    1680:	40011201 	andmi	r1, r1, r1, lsl #4
    1684:	00130106 	andseq	r0, r3, r6, lsl #2
    1688:	00051600 	andeq	r1, r5, r0, lsl #12
    168c:	0b3a0803 	bleq	e836a0 <MEM_SIZE+0x6836a0>
    1690:	1349053b 	movtne	r0, #38203	; 0x953b
    1694:	00000602 	andeq	r0, r0, r2, lsl #12
    1698:	03000517 	movweq	r0, #1303	; 0x517
    169c:	3b0b3a0e 	blcc	2cfedc <DISABLE_IRQ+0x2cfe5c>
    16a0:	02134905 	andseq	r4, r3, #81920	; 0x14000
    16a4:	18000006 	stmdane	r0, {r1, r2}
    16a8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    16ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    16b0:	00001349 	andeq	r1, r0, r9, asr #6
    16b4:	31011d19 	tstcc	r1, r9, lsl sp
    16b8:	55015213 	strpl	r5, [r1, #-531]	; 0x213
    16bc:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    16c0:	1a000005 	bne	16dc <DISABLE_IRQ+0x165c>
    16c4:	13310005 	teqne	r1, #5
    16c8:	341b0000 	ldrcc	r0, [fp]
    16cc:	3a0e0300 	bcc	3822d4 <DISABLE_IRQ+0x382254>
    16d0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    16d4:	00060213 	andeq	r0, r6, r3, lsl r2
    16d8:	012e1c00 	teqeq	lr, r0, lsl #24
    16dc:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    16e0:	0b3b0b3a 	bleq	ec43d0 <MEM_SIZE+0x6c43d0>
    16e4:	13490c27 	movtne	r0, #39975	; 0x9c27
    16e8:	01120111 	tsteq	r2, r1, lsl r1
    16ec:	13010640 	movwne	r0, #5696	; 0x1640
    16f0:	051d0000 	ldreq	r0, [sp]
    16f4:	3a080300 	bcc	2022fc <DISABLE_IRQ+0x20227c>
    16f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    16fc:	00060213 	andeq	r0, r6, r3, lsl r2
    1700:	00051e00 	andeq	r1, r5, r0, lsl #28
    1704:	0b3a0e03 	bleq	e84f18 <MEM_SIZE+0x684f18>
    1708:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    170c:	00000602 	andeq	r0, r0, r2, lsl #12
    1710:	0300341f 	movweq	r3, #1055	; 0x41f
    1714:	3b0b3a0e 	blcc	2cff54 <DISABLE_IRQ+0x2cfed4>
    1718:	0013490b 	andseq	r4, r3, fp, lsl #18
    171c:	011d2000 	tsteq	sp, r0
    1720:	01111331 	tsteq	r1, r1, lsr r3
    1724:	0b580112 	bleq	1601b74 <MEM_SIZE+0xe01b74>
    1728:	13010b59 	movwne	r0, #7001	; 0x1b59
    172c:	1d210000 	stcne	0, cr0, [r1]
    1730:	11133101 	tstne	r3, r1, lsl #2
    1734:	58011201 	stmdapl	r1, {r0, r9, ip}
    1738:	000b590b 	andeq	r5, fp, fp, lsl #18
    173c:	00342200 	eorseq	r2, r4, r0, lsl #4
    1740:	0b3a0e03 	bleq	e84f54 <MEM_SIZE+0x684f54>
    1744:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1748:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    174c:	01000000 	tsteq	r0, r0
    1750:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1754:	0e030b13 	vmoveq.32	d3[0], r0
    1758:	01110e1b 	tsteq	r1, fp, lsl lr
    175c:	06100112 	undefined instruction 0x06100112
    1760:	16020000 	strne	r0, [r2], -r0
    1764:	3a0e0300 	bcc	38236c <DISABLE_IRQ+0x3822ec>
    1768:	000b3b0b 	andeq	r3, fp, fp, lsl #22
    176c:	00240300 	eoreq	r0, r4, r0, lsl #6
    1770:	0b3e0b0b 	bleq	f843a4 <MEM_SIZE+0x7843a4>
    1774:	00000e03 	andeq	r0, r0, r3, lsl #28
    1778:	03001604 	movweq	r1, #1540	; 0x604
    177c:	3b0b3a0e 	blcc	2cffbc <DISABLE_IRQ+0x2cff3c>
    1780:	0013490b 	andseq	r4, r3, fp, lsl #18
    1784:	00240500 	eoreq	r0, r4, r0, lsl #10
    1788:	0b3e0b0b 	bleq	f843bc <MEM_SIZE+0x7843bc>
    178c:	00000803 	andeq	r0, r0, r3, lsl #16
    1790:	0b010406 	bleq	427b0 <DISABLE_IRQ+0x42730>
    1794:	3b0b3a0b 	blcc	2cffc8 <DISABLE_IRQ+0x2cff48>
    1798:	0013010b 	andseq	r0, r3, fp, lsl #2
    179c:	00280700 	eoreq	r0, r8, r0, lsl #14
    17a0:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    17a4:	13080000 	movwne	r0, #32768	; 0x8000
    17a8:	0b0e0301 	bleq	3823b4 <DISABLE_IRQ+0x382334>
    17ac:	3b0b3a0b 	blcc	2cffe0 <DISABLE_IRQ+0x2cff60>
    17b0:	0013010b 	andseq	r0, r3, fp, lsl #2
    17b4:	000d0900 	andeq	r0, sp, r0, lsl #18
    17b8:	0b3a0e03 	bleq	e84fcc <MEM_SIZE+0x684fcc>
    17bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    17c0:	00000a38 	andeq	r0, r0, r8, lsr sl
    17c4:	0b000f0a 	bleq	53f4 <DISABLE_IRQ+0x5374>
    17c8:	0013490b 	andseq	r4, r3, fp, lsl #18
    17cc:	000d0b00 	andeq	r0, sp, r0, lsl #22
    17d0:	0b3a0803 	bleq	e837e4 <MEM_SIZE+0x6837e4>
    17d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    17d8:	00000a38 	andeq	r0, r0, r8, lsr sl
    17dc:	4901010c 	stmdbmi	r1, {r2, r3, r8}
    17e0:	00130113 	andseq	r0, r3, r3, lsl r1
    17e4:	00210d00 	eoreq	r0, r1, r0, lsl #26
    17e8:	0b2f1349 	bleq	bc6514 <MEM_SIZE+0x3c6514>
    17ec:	240e0000 	strcs	r0, [lr]
    17f0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    17f4:	0f00000b 	svceq	0x0000000b
    17f8:	0b0b000f 	bleq	2c183c <DISABLE_IRQ+0x2c17bc>
    17fc:	15100000 	ldrne	r0, [r0]
    1800:	010c2701 	tsteq	ip, r1, lsl #14
    1804:	11000013 	tstne	r0, r3, lsl r0
    1808:	13490005 	movtne	r0, #36869	; 0x9005
    180c:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
    1810:	3a0e0301 	bcc	38241c <DISABLE_IRQ+0x38239c>
    1814:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1818:	2013490c 	andscs	r4, r3, ip, lsl #18
    181c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1820:	00051300 	andeq	r1, r5, r0, lsl #6
    1824:	0b3a0e03 	bleq	e85038 <MEM_SIZE+0x685038>
    1828:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    182c:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    1830:	3a0e0301 	bcc	38243c <DISABLE_IRQ+0x3823bc>
    1834:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1838:	010b200c 	tsteq	fp, ip
    183c:	15000013 	strne	r0, [r0, #-19]
    1840:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 0xffffff48
    1844:	0b3a0e03 	bleq	e85058 <MEM_SIZE+0x685058>
    1848:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
    184c:	01111349 	tsteq	r1, r9, asr #6
    1850:	06400112 	undefined instruction 0x06400112
    1854:	00001301 	andeq	r1, r0, r1, lsl #6
    1858:	03000516 	movweq	r0, #1302	; 0x516
    185c:	3b0b3a08 	blcc	2d0084 <DISABLE_IRQ+0x2d0004>
    1860:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1864:	17000006 	strne	r0, [r0, -r6]
    1868:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    186c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1870:	06021349 	streq	r1, [r2], -r9, asr #6
    1874:	34180000 	ldrcc	r0, [r8]
    1878:	3a0e0300 	bcc	382480 <DISABLE_IRQ+0x382400>
    187c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1880:	19000013 	stmdbne	r0, {r0, r1, r4}
    1884:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1888:	06550152 	undefined instruction 0x06550152
    188c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
    1890:	051a0000 	ldreq	r0, [sl]
    1894:	00133100 	andseq	r3, r3, r0, lsl #2
    1898:	00341b00 	eorseq	r1, r4, r0, lsl #22
    189c:	0b3a0e03 	bleq	e850b0 <MEM_SIZE+0x6850b0>
    18a0:	1349053b 	movtne	r0, #38203	; 0x953b
    18a4:	00000602 	andeq	r0, r0, r2, lsl #12
    18a8:	3f012e1c 	svccc	0x00012e1c
    18ac:	3a0e030c 	bcc	3824e4 <DISABLE_IRQ+0x382464>
    18b0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    18b4:	1113490c 	tstne	r3, ip, lsl #18
    18b8:	40011201 	andmi	r1, r1, r1, lsl #4
    18bc:	00130106 	andseq	r0, r3, r6, lsl #2
    18c0:	00051d00 	andeq	r1, r5, r0, lsl #26
    18c4:	0b3a0803 	bleq	e838d8 <MEM_SIZE+0x6838d8>
    18c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    18cc:	00000602 	andeq	r0, r0, r2, lsl #12
    18d0:	0300051e 	movweq	r0, #1310	; 0x51e
    18d4:	3b0b3a0e 	blcc	2d0114 <DISABLE_IRQ+0x2d0094>
    18d8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    18dc:	1f000006 	svcne	0x00000006
    18e0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    18e4:	0b3b0b3a 	bleq	ec45d4 <MEM_SIZE+0x6c45d4>
    18e8:	00001349 	andeq	r1, r0, r9, asr #6
    18ec:	03003420 	movweq	r3, #1056	; 0x420
    18f0:	3b0b3a0e 	blcc	2d0130 <DISABLE_IRQ+0x2d00b0>
    18f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    18f8:	21000006 	tstcs	r0, r6
    18fc:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1900:	01120111 	tsteq	r2, r1, lsl r1
    1904:	0b590b58 	bleq	164466c <MEM_SIZE+0xe4466c>
    1908:	00001301 	andeq	r1, r0, r1, lsl #6
    190c:	31011d22 	tstcc	r1, r2, lsr #26
    1910:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1914:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    1918:	2300000b 	movwcs	r0, #11
    191c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1920:	0b3b0b3a 	bleq	ec4610 <MEM_SIZE+0x6c4610>
    1924:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 0xfffffedc
    1928:	00000c3c 	andeq	r0, r0, ip, lsr ip
    192c:	01110100 	tsteq	r1, r0, lsl #2
    1930:	0b130e25 	bleq	4c51cc <DISABLE_IRQ+0x4c514c>
    1934:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1938:	01120111 	tsteq	r2, r1, lsl r1
    193c:	00000610 	andeq	r0, r0, r0, lsl r6
    1940:	03001602 	movweq	r1, #1538	; 0x602
    1944:	3b0b3a0e 	blcc	2d0184 <DISABLE_IRQ+0x2d0104>
    1948:	0300000b 	movweq	r0, #11
    194c:	0b0b0024 	bleq	2c19e4 <DISABLE_IRQ+0x2c1964>
    1950:	0e030b3e 	vmoveq.16	d3[0], r0
    1954:	16040000 	strne	r0, [r4], -r0
    1958:	3a0e0300 	bcc	382560 <DISABLE_IRQ+0x3824e0>
    195c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1960:	05000013 	streq	r0, [r0, #-19]
    1964:	0b0b0024 	bleq	2c19fc <DISABLE_IRQ+0x2c197c>
    1968:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    196c:	04060000 	streq	r0, [r6]
    1970:	3a0b0b01 	bcc	2c457c <DISABLE_IRQ+0x2c44fc>
    1974:	010b3b0b 	tsteq	fp, fp, lsl #22
    1978:	07000013 	smladeq	r0, r3, r0, r0
    197c:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1980:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1984:	03011308 	movweq	r1, #4872	; 0x1308
    1988:	3a0b0b0e 	bcc	2c45c8 <DISABLE_IRQ+0x2c4548>
    198c:	010b3b0b 	tsteq	fp, fp, lsl #22
    1990:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1994:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1998:	0b3b0b3a 	bleq	ec4688 <MEM_SIZE+0x6c4688>
    199c:	0a381349 	beq	e066c8 <MEM_SIZE+0x6066c8>
    19a0:	0f0a0000 	svceq	0x000a0000
    19a4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    19a8:	0b000013 	bleq	19fc <DISABLE_IRQ+0x197c>
    19ac:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    19b0:	0b3b0b3a 	bleq	ec46a0 <MEM_SIZE+0x6c46a0>
    19b4:	0a381349 	beq	e066e0 <MEM_SIZE+0x6066e0>
    19b8:	010c0000 	tsteq	ip, r0
    19bc:	01134901 	tsteq	r3, r1, lsl #18
    19c0:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    19c4:	13490021 	movtne	r0, #36897	; 0x9021
    19c8:	00000b2f 	andeq	r0, r0, pc, lsr #22
    19cc:	0b00240e 	bleq	aa0c <DISABLE_IRQ+0xa98c>
    19d0:	000b3e0b 	andeq	r3, fp, fp, lsl #28
    19d4:	01130f00 	tsteq	r3, r0, lsl #30
    19d8:	050b0e03 	streq	r0, [fp, #-3587]	; 0xe03
    19dc:	0b3b0b3a 	bleq	ec46cc <MEM_SIZE+0x6c46cc>
    19e0:	00001301 	andeq	r1, r0, r1, lsl #6
    19e4:	0b000f10 	bleq	562c <DISABLE_IRQ+0x55ac>
    19e8:	1100000b 	tstne	r0, fp
    19ec:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    19f0:	00001301 	andeq	r1, r0, r1, lsl #6
    19f4:	49000512 	stmdbmi	r0, {r1, r4, r8, sl}
    19f8:	13000013 	movwne	r0, #19
    19fc:	0e03012e 	adfeqsp	f0, f3, #0.5
    1a00:	0b3b0b3a 	bleq	ec46f0 <MEM_SIZE+0x6c46f0>
    1a04:	13490c27 	movtne	r0, #39975	; 0x9c27
    1a08:	13010b20 	movwne	r0, #6944	; 0x1b20
    1a0c:	05140000 	ldreq	r0, [r4]
    1a10:	3a0e0300 	bcc	382618 <DISABLE_IRQ+0x382598>
    1a14:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a18:	15000013 	strne	r0, [r0, #-19]
    1a1c:	0e03012e 	adfeqsp	f0, f3, #0.5
    1a20:	0b3b0b3a 	bleq	ec4710 <MEM_SIZE+0x6c4710>
    1a24:	0b200c27 	bleq	804ac8 <MEM_SIZE+0x4ac8>
    1a28:	00001301 	andeq	r1, r0, r1, lsl #6
    1a2c:	3f012e16 	svccc	0x00012e16
    1a30:	3a0e030c 	bcc	382668 <DISABLE_IRQ+0x3825e8>
    1a34:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1a38:	1201110c 	andne	r1, r1, #3
    1a3c:	01064001 	tsteq	r6, r1
    1a40:	17000013 	smladne	r0, r3, r0, r0
    1a44:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1a48:	0b3b0b3a 	bleq	ec4738 <MEM_SIZE+0x6c4738>
    1a4c:	06021349 	streq	r1, [r2], -r9, asr #6
    1a50:	34180000 	ldrcc	r0, [r8]
    1a54:	3a0e0300 	bcc	38265c <DISABLE_IRQ+0x3825dc>
    1a58:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a5c:	000a0213 	andeq	r0, sl, r3, lsl r2
    1a60:	00341900 	eorseq	r1, r4, r0, lsl #18
    1a64:	0b3a0e03 	bleq	e85278 <MEM_SIZE+0x685278>
    1a68:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1a6c:	1d1a0000 	ldcne	0, cr0, [sl]
    1a70:	11133101 	tstne	r3, r1, lsl #2
    1a74:	58011201 	stmdapl	r1, {r0, r9, ip}
    1a78:	000b590b 	andeq	r5, fp, fp, lsl #18
    1a7c:	00051b00 	andeq	r1, r5, r0, lsl #22
    1a80:	00001331 	andeq	r1, r0, r1, lsr r3
    1a84:	3f002e1c 	svccc	0x00002e1c
    1a88:	3a0e030c 	bcc	3826c0 <DISABLE_IRQ+0x382640>
    1a8c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1a90:	1113490c 	tstne	r3, ip, lsl #18
    1a94:	40011201 	andmi	r1, r1, r1, lsl #4
    1a98:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    1a9c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 0xffffff48
    1aa0:	0b3a0e03 	bleq	e852b4 <MEM_SIZE+0x6852b4>
    1aa4:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
    1aa8:	01111349 	tsteq	r1, r9, asr #6
    1aac:	06400112 	undefined instruction 0x06400112
    1ab0:	00001301 	andeq	r1, r0, r1, lsl #6
    1ab4:	31011d1e 	tstcc	r1, lr, lsl sp
    1ab8:	55015213 	strpl	r5, [r1, #-531]	; 0x213
    1abc:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    1ac0:	1f00000b 	svcne	0x0000000b
    1ac4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1ac8:	0b3b0b3a 	bleq	ec47b8 <MEM_SIZE+0x6c47b8>
    1acc:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 0xfffffedc
    1ad0:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1ad4:	01110100 	tsteq	r1, r0, lsl #2
    1ad8:	0b130e25 	bleq	4c5374 <DISABLE_IRQ+0x4c52f4>
    1adc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1ae0:	01120111 	tsteq	r2, r1, lsl r1
    1ae4:	00000610 	andeq	r0, r0, r0, lsl r6
    1ae8:	03001602 	movweq	r1, #1538	; 0x602
    1aec:	3b0b3a0e 	blcc	2d032c <DISABLE_IRQ+0x2d02ac>
    1af0:	0300000b 	movweq	r0, #11
    1af4:	0b0b0024 	bleq	2c1b8c <DISABLE_IRQ+0x2c1b0c>
    1af8:	0e030b3e 	vmoveq.16	d3[0], r0
    1afc:	16040000 	strne	r0, [r4], -r0
    1b00:	3a0e0300 	bcc	382708 <DISABLE_IRQ+0x382688>
    1b04:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b08:	05000013 	streq	r0, [r0, #-19]
    1b0c:	0b0b0024 	bleq	2c1ba4 <DISABLE_IRQ+0x2c1b24>
    1b10:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1b14:	04060000 	streq	r0, [r6]
    1b18:	3a0b0b01 	bcc	2c4724 <DISABLE_IRQ+0x2c46a4>
    1b1c:	010b3b0b 	tsteq	fp, fp, lsl #22
    1b20:	07000013 	smladeq	r0, r3, r0, r0
    1b24:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1b28:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1b2c:	03011308 	movweq	r1, #4872	; 0x1308
    1b30:	3a0b0b0e 	bcc	2c4770 <DISABLE_IRQ+0x2c46f0>
    1b34:	010b3b0b 	tsteq	fp, fp, lsl #22
    1b38:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1b3c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1b40:	0b3b0b3a 	bleq	ec4830 <MEM_SIZE+0x6c4830>
    1b44:	0a381349 	beq	e06870 <MEM_SIZE+0x606870>
    1b48:	0f0a0000 	svceq	0x000a0000
    1b4c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1b50:	0b000013 	bleq	1ba4 <DISABLE_IRQ+0x1b24>
    1b54:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1b58:	0b3b0b3a 	bleq	ec4848 <MEM_SIZE+0x6c4848>
    1b5c:	0a381349 	beq	e06888 <MEM_SIZE+0x606888>
    1b60:	010c0000 	tsteq	ip, r0
    1b64:	01134901 	tsteq	r3, r1, lsl #18
    1b68:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1b6c:	13490021 	movtne	r0, #36897	; 0x9021
    1b70:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1b74:	0b00240e 	bleq	abb4 <DISABLE_IRQ+0xab34>
    1b78:	000b3e0b 	andeq	r3, fp, fp, lsl #28
    1b7c:	000f0f00 	andeq	r0, pc, r0, lsl #30
    1b80:	00000b0b 	andeq	r0, r0, fp, lsl #22
    1b84:	27011510 	smladcs	r1, r0, r5, r1
    1b88:	0013010c 	andseq	r0, r3, ip, lsl #2
    1b8c:	00051100 	andeq	r1, r5, r0, lsl #2
    1b90:	00001349 	andeq	r1, r0, r9, asr #6
    1b94:	03012e12 	movweq	r2, #7698	; 0x1e12
    1b98:	3b0b3a0e 	blcc	2d03d8 <DISABLE_IRQ+0x2d0358>
    1b9c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1ba0:	010b2013 	tsteq	fp, r3, lsl r0
    1ba4:	13000013 	movwne	r0, #19
    1ba8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1bac:	0b3b0b3a 	bleq	ec489c <MEM_SIZE+0x6c489c>
    1bb0:	00001349 	andeq	r1, r0, r9, asr #6
    1bb4:	03012e14 	movweq	r2, #7700	; 0x1e14
    1bb8:	3b0b3a0e 	blcc	2d03f8 <DISABLE_IRQ+0x2d0378>
    1bbc:	200c270b 	andcs	r2, ip, fp, lsl #14
    1bc0:	0013010b 	andseq	r0, r3, fp, lsl #2
    1bc4:	012e1500 	teqeq	lr, r0, lsl #10
    1bc8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1bcc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1bd0:	13490c27 	movtne	r0, #39975	; 0x9c27
    1bd4:	01120111 	tsteq	r2, r1, lsl r1
    1bd8:	13010640 	movwne	r0, #5696	; 0x1640
    1bdc:	05160000 	ldreq	r0, [r6]
    1be0:	3a0e0300 	bcc	3827e8 <DISABLE_IRQ+0x382768>
    1be4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1be8:	00060213 	andeq	r0, r6, r3, lsl r2
    1bec:	00341700 	eorseq	r1, r4, r0, lsl #14
    1bf0:	0b3a0e03 	bleq	e85404 <MEM_SIZE+0x685404>
    1bf4:	1349053b 	movtne	r0, #38203	; 0x953b
    1bf8:	1d180000 	ldcne	0, cr0, [r8]
    1bfc:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    1c00:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    1c04:	0005590b 	andeq	r5, r5, fp, lsl #18
    1c08:	00051900 	andeq	r1, r5, r0, lsl #18
    1c0c:	00001331 	andeq	r1, r0, r1, lsr r3
    1c10:	0300341a 	movweq	r3, #1050	; 0x41a
    1c14:	3b0b3a0e 	blcc	2d0454 <DISABLE_IRQ+0x2d03d4>
    1c18:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1c1c:	1b000006 	blne	1c3c <DISABLE_IRQ+0x1bbc>
    1c20:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 0xffffff48
    1c24:	0b3a0e03 	bleq	e85438 <MEM_SIZE+0x685438>
    1c28:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
    1c2c:	01111349 	tsteq	r1, r9, asr #6
    1c30:	06400112 	undefined instruction 0x06400112
    1c34:	00001301 	andeq	r1, r0, r1, lsl #6
    1c38:	0300051c 	movweq	r0, #1308	; 0x51c
    1c3c:	3b0b3a0e 	blcc	2d047c <DISABLE_IRQ+0x2d03fc>
    1c40:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1c44:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    1c48:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1c4c:	0b3b0b3a 	bleq	ec493c <MEM_SIZE+0x6c493c>
    1c50:	00001349 	andeq	r1, r0, r9, asr #6
    1c54:	31011d1e 	tstcc	r1, lr, lsl sp
    1c58:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1c5c:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    1c60:	0013010b 	andseq	r0, r3, fp, lsl #2
    1c64:	011d1f00 	tsteq	sp, r0, lsl #30
    1c68:	01111331 	tsteq	r1, r1, lsr r3
    1c6c:	0b580112 	bleq	16020bc <MEM_SIZE+0xe020bc>
    1c70:	00000b59 	andeq	r0, r0, r9, asr fp
    1c74:	03003420 	movweq	r3, #1056	; 0x420
    1c78:	3b0b3a0e 	blcc	2d04b8 <DISABLE_IRQ+0x2d0438>
    1c7c:	3f13490b 	svccc	0x0013490b
    1c80:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1c84:	11010000 	tstne	r1, r0
    1c88:	130e2501 	movwne	r2, #58625	; 0xe501
    1c8c:	1b0e030b 	blne	3828c0 <DISABLE_IRQ+0x382840>
    1c90:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    1c94:	00061001 	andeq	r1, r6, r1
    1c98:	00240200 	eoreq	r0, r4, r0, lsl #4
    1c9c:	0b3e0b0b 	bleq	f848d0 <MEM_SIZE+0x7848d0>
    1ca0:	00000e03 	andeq	r0, r0, r3, lsl #28
    1ca4:	0b002403 	bleq	acb8 <DISABLE_IRQ+0xac38>
    1ca8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1cac:	04000008 	streq	r0, [r0], #-8
    1cb0:	0b0b0024 	bleq	2c1d48 <DISABLE_IRQ+0x2c1cc8>
    1cb4:	00000b3e 	andeq	r0, r0, lr, lsr fp
    1cb8:	01110100 	tsteq	r1, r0, lsl #2
    1cbc:	0b130e25 	bleq	4c5558 <DISABLE_IRQ+0x4c54d8>
    1cc0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1cc4:	01120111 	tsteq	r2, r1, lsl r1
    1cc8:	00000610 	andeq	r0, r0, r0, lsl r6
    1ccc:	03001602 	movweq	r1, #1538	; 0x602
    1cd0:	3b0b3a0e 	blcc	2d0510 <DISABLE_IRQ+0x2d0490>
    1cd4:	0300000b 	movweq	r0, #11
    1cd8:	0b0b0024 	bleq	2c1d70 <DISABLE_IRQ+0x2c1cf0>
    1cdc:	0e030b3e 	vmoveq.16	d3[0], r0
    1ce0:	16040000 	strne	r0, [r4], -r0
    1ce4:	3a0e0300 	bcc	3828ec <DISABLE_IRQ+0x38286c>
    1ce8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1cec:	05000013 	streq	r0, [r0, #-19]
    1cf0:	0b0b0024 	bleq	2c1d88 <DISABLE_IRQ+0x2c1d08>
    1cf4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1cf8:	04060000 	streq	r0, [r6]
    1cfc:	3a0b0b01 	bcc	2c4908 <DISABLE_IRQ+0x2c4888>
    1d00:	010b3b0b 	tsteq	fp, fp, lsl #22
    1d04:	07000013 	smladeq	r0, r3, r0, r0
    1d08:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1d0c:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1d10:	03011308 	movweq	r1, #4872	; 0x1308
    1d14:	3a0b0b0e 	bcc	2c4954 <DISABLE_IRQ+0x2c48d4>
    1d18:	010b3b0b 	tsteq	fp, fp, lsl #22
    1d1c:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1d20:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1d24:	0b3b0b3a 	bleq	ec4a14 <MEM_SIZE+0x6c4a14>
    1d28:	0a381349 	beq	e06a54 <MEM_SIZE+0x606a54>
    1d2c:	0f0a0000 	svceq	0x000a0000
    1d30:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1d34:	0b000013 	bleq	1d88 <DISABLE_IRQ+0x1d08>
    1d38:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1d3c:	0b3b0b3a 	bleq	ec4a2c <MEM_SIZE+0x6c4a2c>
    1d40:	0a381349 	beq	e06a6c <MEM_SIZE+0x606a6c>
    1d44:	010c0000 	tsteq	ip, r0
    1d48:	01134901 	tsteq	r3, r1, lsl #18
    1d4c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1d50:	13490021 	movtne	r0, #36897	; 0x9021
    1d54:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1d58:	0b00240e 	bleq	ad98 <DISABLE_IRQ+0xad18>
    1d5c:	000b3e0b 	andeq	r3, fp, fp, lsl #28
    1d60:	01130f00 	tsteq	r3, r0, lsl #30
    1d64:	050b0e03 	streq	r0, [fp, #-3587]	; 0xe03
    1d68:	0b3b0b3a 	bleq	ec4a58 <MEM_SIZE+0x6c4a58>
    1d6c:	00001301 	andeq	r1, r0, r1, lsl #6
    1d70:	0b000f10 	bleq	59b8 <DISABLE_IRQ+0x5938>
    1d74:	1100000b 	tstne	r0, fp
    1d78:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    1d7c:	00001301 	andeq	r1, r0, r1, lsl #6
    1d80:	49000512 	stmdbmi	r0, {r1, r4, r8, sl}
    1d84:	13000013 	movwne	r0, #19
    1d88:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 0xffffff48
    1d8c:	0b3a0e03 	bleq	e855a0 <MEM_SIZE+0x6855a0>
    1d90:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
    1d94:	01111349 	tsteq	r1, r9, asr #6
    1d98:	0a400112 	beq	10021e8 <MEM_SIZE+0x8021e8>
    1d9c:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    1da0:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1da4:	3b0b3a0e 	blcc	2d05e4 <DISABLE_IRQ+0x2d0564>
    1da8:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
    1dac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1db0:	010a4001 	tsteq	sl, r1
    1db4:	15000013 	strne	r0, [r0, #-19]
    1db8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1dbc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1dc0:	06021349 	streq	r1, [r2], -r9, asr #6
    1dc4:	05160000 	ldreq	r0, [r6]
    1dc8:	3a080300 	bcc	2029d0 <DISABLE_IRQ+0x202950>
    1dcc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1dd0:	000a0213 	andeq	r0, sl, r3, lsl r2
    1dd4:	00341700 	eorseq	r1, r4, r0, lsl #14
    1dd8:	0b3a0e03 	bleq	e855ec <MEM_SIZE+0x6855ec>
    1ddc:	1349053b 	movtne	r0, #38203	; 0x953b
    1de0:	34180000 	ldrcc	r0, [r8]
    1de4:	3a0e0300 	bcc	3829ec <DISABLE_IRQ+0x38296c>
    1de8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1dec:	00060213 	andeq	r0, r6, r3, lsl r2
    1df0:	00051900 	andeq	r1, r5, r0, lsl #18
    1df4:	0b3a0803 	bleq	e83e08 <MEM_SIZE+0x683e08>
    1df8:	1349053b 	movtne	r0, #38203	; 0x953b
    1dfc:	00000602 	andeq	r0, r0, r2, lsl #12
    1e00:	0300051a 	movweq	r0, #1306	; 0x51a
    1e04:	3b0b3a0e 	blcc	2d0644 <DISABLE_IRQ+0x2d05c4>
    1e08:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1e0c:	1b00000a 	blne	1e3c <DISABLE_IRQ+0x1dbc>
    1e10:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1e14:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1e18:	00001349 	andeq	r1, r0, r9, asr #6
    1e1c:	4900261c 	stmdbmi	r0, {r2, r3, r4, r9, sl, sp}
    1e20:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    1e24:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 0xffffff48
    1e28:	0b3a0e03 	bleq	e8563c <MEM_SIZE+0x68563c>
    1e2c:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
    1e30:	01111349 	tsteq	r1, r9, asr #6
    1e34:	06400112 	undefined instruction 0x06400112
    1e38:	00001301 	andeq	r1, r0, r1, lsl #6
    1e3c:	0300341e 	movweq	r3, #1054	; 0x41e
    1e40:	3b0b3a08 	blcc	2d0668 <DISABLE_IRQ+0x2d05e8>
    1e44:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1e48:	1f00000a 	svcne	0x0000000a
    1e4c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 0xffffff48
    1e50:	0b3a0e03 	bleq	e85664 <MEM_SIZE+0x685664>
    1e54:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
    1e58:	01111349 	tsteq	r1, r9, asr #6
    1e5c:	06400112 	undefined instruction 0x06400112
    1e60:	00001301 	andeq	r1, r0, r1, lsl #6
    1e64:	03003420 	movweq	r3, #1056	; 0x420
    1e68:	3b0b3a0e 	blcc	2d06a8 <DISABLE_IRQ+0x2d0628>
    1e6c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1e70:	002e2100 	eoreq	r2, lr, r0, lsl #2
    1e74:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1e78:	0b3b0b3a 	bleq	ec4b68 <MEM_SIZE+0x6c4b68>
    1e7c:	01110c27 	tsteq	r1, r7, lsr #24
    1e80:	06400112 	undefined instruction 0x06400112
    1e84:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
    1e88:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1e8c:	3b0b3a0e 	blcc	2d06cc <DISABLE_IRQ+0x2d064c>
    1e90:	110c270b 	tstne	ip, fp, lsl #14
    1e94:	40011201 	andmi	r1, r1, r1, lsl #4
    1e98:	00130106 	andseq	r0, r3, r6, lsl #2
    1e9c:	00342300 	eorseq	r2, r4, r0, lsl #6
    1ea0:	0b3a0e03 	bleq	e856b4 <MEM_SIZE+0x6856b4>
    1ea4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1ea8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1eac:	01000000 	tsteq	r0, r0
    1eb0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1eb4:	0e030b13 	vmoveq.32	d3[0], r0
    1eb8:	01110e1b 	tsteq	r1, fp, lsl lr
    1ebc:	06100112 	undefined instruction 0x06100112
    1ec0:	16020000 	strne	r0, [r2], -r0
    1ec4:	3a0e0300 	bcc	382acc <DISABLE_IRQ+0x382a4c>
    1ec8:	000b3b0b 	andeq	r3, fp, fp, lsl #22
    1ecc:	00240300 	eoreq	r0, r4, r0, lsl #6
    1ed0:	0b3e0b0b 	bleq	f84b04 <MEM_SIZE+0x784b04>
    1ed4:	00000e03 	andeq	r0, r0, r3, lsl #28
    1ed8:	03001604 	movweq	r1, #1540	; 0x604
    1edc:	3b0b3a0e 	blcc	2d071c <DISABLE_IRQ+0x2d069c>
    1ee0:	0013490b 	andseq	r4, r3, fp, lsl #18
    1ee4:	00240500 	eoreq	r0, r4, r0, lsl #10
    1ee8:	0b3e0b0b 	bleq	f84b1c <MEM_SIZE+0x784b1c>
    1eec:	00000803 	andeq	r0, r0, r3, lsl #16
    1ef0:	0b010406 	bleq	42f10 <DISABLE_IRQ+0x42e90>
    1ef4:	3b0b3a0b 	blcc	2d0728 <DISABLE_IRQ+0x2d06a8>
    1ef8:	0013010b 	andseq	r0, r3, fp, lsl #2
    1efc:	00280700 	eoreq	r0, r8, r0, lsl #14
    1f00:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    1f04:	13080000 	movwne	r0, #32768	; 0x8000
    1f08:	0b0e0301 	bleq	382b14 <DISABLE_IRQ+0x382a94>
    1f0c:	3b0b3a0b 	blcc	2d0740 <DISABLE_IRQ+0x2d06c0>
    1f10:	0013010b 	andseq	r0, r3, fp, lsl #2
    1f14:	000d0900 	andeq	r0, sp, r0, lsl #18
    1f18:	0b3a0e03 	bleq	e8572c <MEM_SIZE+0x68572c>
    1f1c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1f20:	00000a38 	andeq	r0, r0, r8, lsr sl
    1f24:	0b000f0a 	bleq	5b54 <DISABLE_IRQ+0x5ad4>
    1f28:	0013490b 	andseq	r4, r3, fp, lsl #18
    1f2c:	01040b00 	tsteq	r4, r0, lsl #22
    1f30:	0b0b0e03 	bleq	2c5744 <DISABLE_IRQ+0x2c56c4>
    1f34:	0b3b0b3a 	bleq	ec4c24 <MEM_SIZE+0x6c4c24>
    1f38:	00001301 	andeq	r1, r0, r1, lsl #6
    1f3c:	03000d0c 	movweq	r0, #3340	; 0xd0c
    1f40:	3b0b3a08 	blcc	2d0768 <DISABLE_IRQ+0x2d06e8>
    1f44:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1f48:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
    1f4c:	13490101 	movtne	r0, #37121	; 0x9101
    1f50:	00001301 	andeq	r1, r0, r1, lsl #6
    1f54:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
    1f58:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1f5c:	00240f00 	eoreq	r0, r4, r0, lsl #30
    1f60:	0b3e0b0b 	bleq	f84b94 <MEM_SIZE+0x784b94>
    1f64:	13100000 	tstne	r0, #0
    1f68:	0b0e0301 	bleq	382b74 <DISABLE_IRQ+0x382af4>
    1f6c:	3b0b3a05 	blcc	2d0788 <DISABLE_IRQ+0x2d0708>
    1f70:	0013010b 	andseq	r0, r3, fp, lsl #2
    1f74:	01151100 	tsteq	r5, r0, lsl #2
    1f78:	13010c27 	movwne	r0, #7207	; 0x1c27
    1f7c:	05120000 	ldreq	r0, [r2]
    1f80:	00134900 	andseq	r4, r3, r0, lsl #18
    1f84:	000f1300 	andeq	r1, pc, r0, lsl #6
    1f88:	00000b0b 	andeq	r0, r0, fp, lsl #22
    1f8c:	03012e14 	movweq	r2, #7700	; 0x1e14
    1f90:	3b0b3a0e 	blcc	2d07d0 <DISABLE_IRQ+0x2d0750>
    1f94:	200c270b 	andcs	r2, ip, fp, lsl #14
    1f98:	0013010b 	andseq	r0, r3, fp, lsl #2
    1f9c:	00051500 	andeq	r1, r5, r0, lsl #10
    1fa0:	0b3a0e03 	bleq	e857b4 <MEM_SIZE+0x6857b4>
    1fa4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1fa8:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    1fac:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1fb0:	3b0b3a0e 	blcc	2d07f0 <DISABLE_IRQ+0x2d0770>
    1fb4:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1fb8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1fbc:	010a4001 	tsteq	sl, r1
    1fc0:	17000013 	smladne	r0, r3, r0, r0
    1fc4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1fc8:	0b3b0b3a 	bleq	ec4cb8 <MEM_SIZE+0x6c4cb8>
    1fcc:	06021349 	streq	r1, [r2], -r9, asr #6
    1fd0:	05180000 	ldreq	r0, [r8]
    1fd4:	3a0e0300 	bcc	382bdc <DISABLE_IRQ+0x382b5c>
    1fd8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1fdc:	000a0213 	andeq	r0, sl, r3, lsl r2
    1fe0:	00341900 	eorseq	r1, r4, r0, lsl #18
    1fe4:	0b3a0e03 	bleq	e857f8 <MEM_SIZE+0x6857f8>
    1fe8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1fec:	00000602 	andeq	r0, r0, r2, lsl #12
    1ff0:	0300341a 	movweq	r3, #1050	; 0x41a
    1ff4:	3b0b3a0e 	blcc	2d0834 <DISABLE_IRQ+0x2d07b4>
    1ff8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1ffc:	1b00000a 	blne	202c <DISABLE_IRQ+0x1fac>
    2000:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 0xffffff48
    2004:	0b3a0e03 	bleq	e85818 <MEM_SIZE+0x685818>
    2008:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
    200c:	01111349 	tsteq	r1, r9, asr #6
    2010:	0a400112 	beq	1002460 <MEM_SIZE+0x802460>
    2014:	00001301 	andeq	r1, r0, r1, lsl #6
    2018:	0300051c 	movweq	r0, #1308	; 0x51c
    201c:	3b0b3a0e 	blcc	2d085c <DISABLE_IRQ+0x2d07dc>
    2020:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2024:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    2028:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 0xffffff48
    202c:	0b3a0e03 	bleq	e85840 <MEM_SIZE+0x685840>
    2030:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
    2034:	01111349 	tsteq	r1, r9, asr #6
    2038:	0a400112 	beq	1002488 <MEM_SIZE+0x802488>
    203c:	341e0000 	ldrcc	r0, [lr]
    2040:	3a0e0300 	bcc	382c48 <DISABLE_IRQ+0x382bc8>
    2044:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2048:	1f000013 	svcne	0x00000013
    204c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 0xffffff48
    2050:	0b3a0e03 	bleq	e85864 <MEM_SIZE+0x685864>
    2054:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
    2058:	01120111 	tsteq	r2, r1, lsl r1
    205c:	13010640 	movwne	r0, #5696	; 0x1640
    2060:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    2064:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2068:	3b0b3a0e 	blcc	2d08a8 <DISABLE_IRQ+0x2d0828>
    206c:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
    2070:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2074:	01064001 	tsteq	r6, r1
    2078:	21000013 	tstcs	r0, r3, lsl r0
    207c:	08030005 	stmdaeq	r3, {r0, r2}
    2080:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2084:	06021349 	streq	r1, [r2], -r9, asr #6
    2088:	34220000 	strtcc	r0, [r2]
    208c:	3a0e0300 	bcc	382c94 <DISABLE_IRQ+0x382c14>
    2090:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2094:	00060213 	andeq	r0, r6, r3, lsl r2
    2098:	011d2300 	tsteq	sp, r0, lsl #6
    209c:	01521331 	cmpeq	r2, r1, lsr r3
    20a0:	0b580655 	bleq	16039fc <MEM_SIZE+0xe039fc>
    20a4:	00000559 	andeq	r0, r0, r9, asr r5
    20a8:	31000524 	tstcc	r0, r4, lsr #10
    20ac:	25000013 	strcs	r0, [r0, #-19]
    20b0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    20b4:	06550152 	undefined instruction 0x06550152
    20b8:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
    20bc:	00001301 	andeq	r1, r0, r1, lsl #6
    20c0:	03000a26 	movweq	r0, #2598	; 0xa26
    20c4:	3b0b3a0e 	blcc	2d0904 <DISABLE_IRQ+0x2d0884>
    20c8:	00011105 	andeq	r1, r1, r5, lsl #2
    20cc:	012e2700 	teqeq	lr, r0, lsl #14
    20d0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    20d4:	0b3b0b3a 	bleq	ec4dc4 <MEM_SIZE+0x6c4dc4>
    20d8:	13490c27 	movtne	r0, #39975	; 0x9c27
    20dc:	01120111 	tsteq	r2, r1, lsl r1
    20e0:	13010640 	movwne	r0, #5696	; 0x1640
    20e4:	34280000 	strtcc	r0, [r8]
    20e8:	3a0e0300 	bcc	382cf0 <DISABLE_IRQ+0x382c70>
    20ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    20f0:	29000013 	stmdbcs	r0, {r0, r1, r4}
    20f4:	08030034 	stmdaeq	r3, {r2, r4, r5}
    20f8:	0b3b0b3a 	bleq	ec4de8 <MEM_SIZE+0x6c4de8>
    20fc:	06021349 	streq	r1, [r2], -r9, asr #6
    2100:	1d2a0000 	stcne	0, cr0, [sl]
    2104:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    2108:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    210c:	000b590b 	andeq	r5, fp, fp, lsl #18
    2110:	00342b00 	eorseq	r2, r4, r0, lsl #22
    2114:	0b3a0e03 	bleq	e85928 <MEM_SIZE+0x685928>
    2118:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    211c:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    2120:	01000000 	tsteq	r0, r0
    2124:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2128:	0e030b13 	vmoveq.32	d3[0], r0
    212c:	01110e1b 	tsteq	r1, fp, lsl lr
    2130:	06100112 	undefined instruction 0x06100112
    2134:	16020000 	strne	r0, [r2], -r0
    2138:	3a0e0300 	bcc	382d40 <DISABLE_IRQ+0x382cc0>
    213c:	000b3b0b 	andeq	r3, fp, fp, lsl #22
    2140:	00240300 	eoreq	r0, r4, r0, lsl #6
    2144:	0b3e0b0b 	bleq	f84d78 <MEM_SIZE+0x784d78>
    2148:	00000e03 	andeq	r0, r0, r3, lsl #28
    214c:	03001604 	movweq	r1, #1540	; 0x604
    2150:	3b0b3a0e 	blcc	2d0990 <DISABLE_IRQ+0x2d0910>
    2154:	0013490b 	andseq	r4, r3, fp, lsl #18
    2158:	00240500 	eoreq	r0, r4, r0, lsl #10
    215c:	0b3e0b0b 	bleq	f84d90 <MEM_SIZE+0x784d90>
    2160:	00000803 	andeq	r0, r0, r3, lsl #16
    2164:	0b010406 	bleq	43184 <DISABLE_IRQ+0x43104>
    2168:	3b0b3a0b 	blcc	2d099c <DISABLE_IRQ+0x2d091c>
    216c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2170:	00280700 	eoreq	r0, r8, r0, lsl #14
    2174:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    2178:	13080000 	movwne	r0, #32768	; 0x8000
    217c:	0b0e0301 	bleq	382d88 <DISABLE_IRQ+0x382d08>
    2180:	3b0b3a0b 	blcc	2d09b4 <DISABLE_IRQ+0x2d0934>
    2184:	0013010b 	andseq	r0, r3, fp, lsl #2
    2188:	000d0900 	andeq	r0, sp, r0, lsl #18
    218c:	0b3a0e03 	bleq	e859a0 <MEM_SIZE+0x6859a0>
    2190:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2194:	00000a38 	andeq	r0, r0, r8, lsr sl
    2198:	0b000f0a 	bleq	5dc8 <DISABLE_IRQ+0x5d48>
    219c:	0013490b 	andseq	r4, r3, fp, lsl #18
    21a0:	000d0b00 	andeq	r0, sp, r0, lsl #22
    21a4:	0b3a0803 	bleq	e841b8 <MEM_SIZE+0x6841b8>
    21a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    21ac:	00000a38 	andeq	r0, r0, r8, lsr sl
    21b0:	4901010c 	stmdbmi	r1, {r2, r3, r8}
    21b4:	00130113 	andseq	r0, r3, r3, lsl r1
    21b8:	00210d00 	eoreq	r0, r1, r0, lsl #26
    21bc:	0b2f1349 	bleq	bc6ee8 <MEM_SIZE+0x3c6ee8>
    21c0:	240e0000 	strcs	r0, [lr]
    21c4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    21c8:	0f00000b 	svceq	0x0000000b
    21cc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    21d0:	0b3a050b 	bleq	e83604 <MEM_SIZE+0x683604>
    21d4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    21d8:	15100000 	ldrne	r0, [r0]
    21dc:	010c2701 	tsteq	ip, r1, lsl #14
    21e0:	11000013 	tstne	r0, r3, lsl r0
    21e4:	13490005 	movtne	r0, #36869	; 0x9005
    21e8:	0f120000 	svceq	0x00120000
    21ec:	000b0b00 	andeq	r0, fp, r0, lsl #22
    21f0:	012e1300 	teqeq	lr, r0, lsl #6
    21f4:	0b3a0e03 	bleq	e85a08 <MEM_SIZE+0x685a08>
    21f8:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
    21fc:	13010b20 	movwne	r0, #6944	; 0x1b20
    2200:	34140000 	ldrcc	r0, [r4]
    2204:	3a0e0300 	bcc	382e0c <DISABLE_IRQ+0x382d8c>
    2208:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    220c:	15000013 	strne	r0, [r0, #-19]
    2210:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 0xffffff48
    2214:	0b3a0e03 	bleq	e85a28 <MEM_SIZE+0x685a28>
    2218:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
    221c:	01120111 	tsteq	r2, r1, lsl r1
    2220:	13010640 	movwne	r0, #5696	; 0x1640
    2224:	1d160000 	ldcne	0, cr0, [r6]
    2228:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    222c:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    2230:	0005590b 	andeq	r5, r5, fp, lsl #18
    2234:	010b1700 	tsteq	fp, r0, lsl #14
    2238:	00000655 	andeq	r0, r0, r5, asr r6
    223c:	31003418 	tstcc	r0, r8, lsl r4
    2240:	19000013 	stmdbne	r0, {r0, r1, r4}
    2244:	13310034 	teqne	r1, #52	; 0x34
    2248:	00000602 	andeq	r0, r0, r2, lsl #12
    224c:	03012e1a 	movweq	r2, #7706	; 0x1e1a
    2250:	3b0b3a0e 	blcc	2d0a90 <DISABLE_IRQ+0x2d0a10>
    2254:	110c2705 	tstne	ip, r5, lsl #14
    2258:	40011201 	andmi	r1, r1, r1, lsl #4
    225c:	00130106 	andseq	r0, r3, r6, lsl #2
    2260:	00051b00 	andeq	r1, r5, r0, lsl #22
    2264:	0b3a0803 	bleq	e84278 <MEM_SIZE+0x684278>
    2268:	1349053b 	movtne	r0, #38203	; 0x953b
    226c:	00000602 	andeq	r0, r0, r2, lsl #12
    2270:	0300051c 	movweq	r0, #1308	; 0x51c
    2274:	3b0b3a0e 	blcc	2d0ab4 <DISABLE_IRQ+0x2d0a34>
    2278:	02134905 	andseq	r4, r3, #81920	; 0x14000
    227c:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    2280:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2284:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2288:	0a021349 	beq	86fb4 <DISABLE_IRQ+0x86f34>
    228c:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
    2290:	3a0e0301 	bcc	382e9c <DISABLE_IRQ+0x382e1c>
    2294:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2298:	1201110c 	andne	r1, r1, #3
    229c:	01064001 	tsteq	r6, r1
    22a0:	1f000013 	svcne	0x00000013
    22a4:	08030005 	stmdaeq	r3, {r0, r2}
    22a8:	0b3b0b3a 	bleq	ec4f98 <MEM_SIZE+0x6c4f98>
    22ac:	06021349 	streq	r1, [r2], -r9, asr #6
    22b0:	05200000 	streq	r0, [r0]!
    22b4:	3a0e0300 	bcc	382ebc <DISABLE_IRQ+0x382e3c>
    22b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    22bc:	00060213 	andeq	r0, r6, r3, lsl r2
    22c0:	00342100 	eorseq	r2, r4, r0, lsl #2
    22c4:	0b3a0803 	bleq	e842d8 <MEM_SIZE+0x6842d8>
    22c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    22cc:	00000602 	andeq	r0, r0, r2, lsl #12
    22d0:	03003422 	movweq	r3, #1058	; 0x422
    22d4:	3b0b3a0e 	blcc	2d0b14 <DISABLE_IRQ+0x2d0a94>
    22d8:	0013490b 	andseq	r4, r3, fp, lsl #18
    22dc:	00342300 	eorseq	r2, r4, r0, lsl #6
    22e0:	0b3a0e03 	bleq	e85af4 <MEM_SIZE+0x685af4>
    22e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    22e8:	00000602 	andeq	r0, r0, r2, lsl #12
    22ec:	03003424 	movweq	r3, #1060	; 0x424
    22f0:	3b0b3a0e 	blcc	2d0b30 <DISABLE_IRQ+0x2d0ab0>
    22f4:	02134905 	andseq	r4, r3, #81920	; 0x14000
    22f8:	25000006 	strcs	r0, [r0, #-6]
    22fc:	0e03012e 	adfeqsp	f0, f3, #0.5
    2300:	0b3b0b3a 	bleq	ec4ff0 <MEM_SIZE+0x6c4ff0>
    2304:	13490c27 	movtne	r0, #39975	; 0x9c27
    2308:	01120111 	tsteq	r2, r1, lsl r1
    230c:	13010640 	movwne	r0, #5696	; 0x1640
    2310:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
    2314:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2318:	3b0b3a0e 	blcc	2d0b58 <DISABLE_IRQ+0x2d0ad8>
    231c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    2320:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2324:	010a4001 	tsteq	sl, r1
    2328:	27000013 	smladcs	r0, r3, r0, r0
    232c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 0xffffff48
    2330:	0b3a0e03 	bleq	e85b44 <MEM_SIZE+0x685b44>
    2334:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
    2338:	01111349 	tsteq	r1, r9, asr #6
    233c:	06400112 	undefined instruction 0x06400112
    2340:	00001301 	andeq	r1, r0, r1, lsl #6
    2344:	3f012e28 	svccc	0x00012e28
    2348:	3a0e030c 	bcc	382f80 <DISABLE_IRQ+0x382f00>
    234c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2350:	1113490c 	tstne	r3, ip, lsl #18
    2354:	40011201 	andmi	r1, r1, r1, lsl #4
    2358:	00130106 	andseq	r0, r3, r6, lsl #2
    235c:	00342900 	eorseq	r2, r4, r0, lsl #18
    2360:	0b3a0803 	bleq	e84374 <MEM_SIZE+0x684374>
    2364:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2368:	342a0000 	strtcc	r0, [sl]
    236c:	3a0e0300 	bcc	382f74 <DISABLE_IRQ+0x382ef4>
    2370:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2374:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    2378:	0000000c 	andeq	r0, r0, ip
    237c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    2380:	030b130e 	movweq	r1, #45838	; 0xb30e
    2384:	110e1b0e 	tstne	lr, lr, lsl #22
    2388:	10011201 	andne	r1, r1, r1, lsl #4
    238c:	02000006 	andeq	r0, r0, #6
    2390:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2394:	0b3b0b3a 	bleq	ec5084 <MEM_SIZE+0x6c5084>
    2398:	24030000 	strcs	r0, [r3]
    239c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    23a0:	000e030b 	andeq	r0, lr, fp, lsl #6
    23a4:	00160400 	andseq	r0, r6, r0, lsl #8
    23a8:	0b3a0e03 	bleq	e85bbc <MEM_SIZE+0x685bbc>
    23ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    23b0:	24050000 	strcs	r0, [r5]
    23b4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    23b8:	0008030b 	andeq	r0, r8, fp, lsl #6
    23bc:	01130600 	tsteq	r3, r0, lsl #12
    23c0:	0b0b0e03 	bleq	2c5bd4 <DISABLE_IRQ+0x2c5b54>
    23c4:	0b3b0b3a 	bleq	ec50b4 <MEM_SIZE+0x6c50b4>
    23c8:	00001301 	andeq	r1, r0, r1, lsl #6
    23cc:	03000d07 	movweq	r0, #3335	; 0xd07
    23d0:	3b0b3a0e 	blcc	2d0c10 <DISABLE_IRQ+0x2d0b90>
    23d4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    23d8:	0800000a 	stmdaeq	r0, {r1, r3}
    23dc:	0b0b000f 	bleq	2c2420 <DISABLE_IRQ+0x2c23a0>
    23e0:	00001349 	andeq	r1, r0, r9, asr #6
    23e4:	03000d09 	movweq	r0, #3337	; 0xd09
    23e8:	3b0b3a08 	blcc	2d0c10 <DISABLE_IRQ+0x2d0b90>
    23ec:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    23f0:	0a00000a 	beq	2420 <DISABLE_IRQ+0x23a0>
    23f4:	13490101 	movtne	r0, #37121	; 0x9101
    23f8:	00001301 	andeq	r1, r0, r1, lsl #6
    23fc:	4900210b 	stmdbmi	r0, {r0, r1, r3, r8, sp}
    2400:	000b2f13 	andeq	r2, fp, r3, lsl pc
    2404:	00240c00 	eoreq	r0, r4, r0, lsl #24
    2408:	0b3e0b0b 	bleq	f8503c <MEM_SIZE+0x78503c>
    240c:	0f0d0000 	svceq	0x000d0000
    2410:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2414:	01150e00 	tsteq	r5, r0, lsl #28
    2418:	13010c27 	movwne	r0, #7207	; 0x1c27
    241c:	050f0000 	streq	r0, [pc, #0]	; 2424 <DISABLE_IRQ+0x23a4>
    2420:	00134900 	andseq	r4, r3, r0, lsl #18
    2424:	012e1000 	teqeq	lr, r0
    2428:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    242c:	0b3b0b3a 	bleq	ec511c <MEM_SIZE+0x6c511c>
    2430:	13490c27 	movtne	r0, #39975	; 0x9c27
    2434:	01120111 	tsteq	r2, r1, lsl r1
    2438:	13010640 	movwne	r0, #5696	; 0x1640
    243c:	05110000 	ldreq	r0, [r1]
    2440:	3a0e0300 	bcc	383048 <DISABLE_IRQ+0x382fc8>
    2444:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2448:	00060213 	andeq	r0, r6, r3, lsl r2
    244c:	00051200 	andeq	r1, r5, r0, lsl #4
    2450:	0b3a0e03 	bleq	e85c64 <MEM_SIZE+0x685c64>
    2454:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2458:	00000a02 	andeq	r0, r0, r2, lsl #20
    245c:	03003413 	movweq	r3, #1043	; 0x413
    2460:	3b0b3a0e 	blcc	2d0ca0 <DISABLE_IRQ+0x2d0c20>
    2464:	3f13490b 	svccc	0x0013490b
    2468:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    246c:	11010000 	tstne	r1, r0
    2470:	130e2501 	movwne	r2, #58625	; 0xe501
    2474:	1b0e030b 	blne	3830a8 <DISABLE_IRQ+0x383028>
    2478:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    247c:	00061001 	andeq	r1, r6, r1
    2480:	00160200 	andseq	r0, r6, r0, lsl #4
    2484:	0b3a0e03 	bleq	e85c98 <MEM_SIZE+0x685c98>
    2488:	00000b3b 	andeq	r0, r0, fp, lsr fp
    248c:	0b002403 	bleq	b4a0 <DISABLE_IRQ+0xb420>
    2490:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2494:	0400000e 	streq	r0, [r0], #-14
    2498:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    249c:	0b3b0b3a 	bleq	ec518c <MEM_SIZE+0x6c518c>
    24a0:	00001349 	andeq	r1, r0, r9, asr #6
    24a4:	0b002405 	bleq	b4c0 <DISABLE_IRQ+0xb440>
    24a8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    24ac:	06000008 	streq	r0, [r0], -r8
    24b0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    24b4:	0b3a0b0b 	bleq	e850e8 <MEM_SIZE+0x6850e8>
    24b8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    24bc:	0d070000 	stceq	0, cr0, [r7]
    24c0:	3a0e0300 	bcc	3830c8 <DISABLE_IRQ+0x383048>
    24c4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    24c8:	000a3813 	andeq	r3, sl, r3, lsl r8
    24cc:	000f0800 	andeq	r0, pc, r0, lsl #16
    24d0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    24d4:	0d090000 	stceq	0, cr0, [r9]
    24d8:	3a080300 	bcc	2030e0 <DISABLE_IRQ+0x203060>
    24dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    24e0:	000a3813 	andeq	r3, sl, r3, lsl r8
    24e4:	01010a00 	tsteq	r1, r0, lsl #20
    24e8:	13011349 	movwne	r1, #4937	; 0x1349
    24ec:	210b0000 	tstcs	fp, r0
    24f0:	2f134900 	svccs	0x00134900
    24f4:	0c00000b 	stceq	0, cr0, [r0], {11}
    24f8:	0b0b0024 	bleq	2c2590 <DISABLE_IRQ+0x2c2510>
    24fc:	00000b3e 	andeq	r0, r0, lr, lsr fp
    2500:	0b000f0d 	bleq	613c <DISABLE_IRQ+0x60bc>
    2504:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    2508:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    250c:	00001301 	andeq	r1, r0, r1, lsl #6
    2510:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
    2514:	10000013 	andne	r0, r0, r3, lsl r0
    2518:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 0xffffff48
    251c:	0b3a0e03 	bleq	e85d30 <MEM_SIZE+0x685d30>
    2520:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
    2524:	01111349 	tsteq	r1, r9, asr #6
    2528:	06400112 	undefined instruction 0x06400112
    252c:	00001301 	andeq	r1, r0, r1, lsl #6
    2530:	03000511 	movweq	r0, #1297	; 0x511
    2534:	3b0b3a0e 	blcc	2d0d74 <DISABLE_IRQ+0x2d0cf4>
    2538:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    253c:	12000006 	andne	r0, r0, #6
    2540:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2544:	0b3b0b3a 	bleq	ec5234 <MEM_SIZE+0x6c5234>
    2548:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 0xfffffedc
    254c:	00000c3c 	andeq	r0, r0, ip, lsr ip
    2550:	01110100 	tsteq	r1, r0, lsl #2
    2554:	0b130e25 	bleq	4c5df0 <DISABLE_IRQ+0x4c5d70>
    2558:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    255c:	01120111 	tsteq	r2, r1, lsl r1
    2560:	00000610 	andeq	r0, r0, r0, lsl r6
    2564:	03001602 	movweq	r1, #1538	; 0x602
    2568:	3b0b3a0e 	blcc	2d0da8 <DISABLE_IRQ+0x2d0d28>
    256c:	0300000b 	movweq	r0, #11
    2570:	0b0b0024 	bleq	2c2608 <DISABLE_IRQ+0x2c2588>
    2574:	0e030b3e 	vmoveq.16	d3[0], r0
    2578:	16040000 	strne	r0, [r4], -r0
    257c:	3a0e0300 	bcc	383184 <DISABLE_IRQ+0x383104>
    2580:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2584:	05000013 	streq	r0, [r0, #-19]
    2588:	0b0b0024 	bleq	2c2620 <DISABLE_IRQ+0x2c25a0>
    258c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2590:	04060000 	streq	r0, [r6]
    2594:	3a0b0b01 	bcc	2c51a0 <DISABLE_IRQ+0x2c5120>
    2598:	010b3b0b 	tsteq	fp, fp, lsl #22
    259c:	07000013 	smladeq	r0, r3, r0, r0
    25a0:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    25a4:	00000d1c 	andeq	r0, r0, ip, lsl sp
    25a8:	03011308 	movweq	r1, #4872	; 0x1308
    25ac:	3a0b0b0e 	bcc	2c51ec <DISABLE_IRQ+0x2c516c>
    25b0:	010b3b0b 	tsteq	fp, fp, lsl #22
    25b4:	09000013 	stmdbeq	r0, {r0, r1, r4}
    25b8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    25bc:	0b3b0b3a 	bleq	ec52ac <MEM_SIZE+0x6c52ac>
    25c0:	0a381349 	beq	e072ec <MEM_SIZE+0x6072ec>
    25c4:	0f0a0000 	svceq	0x000a0000
    25c8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    25cc:	0b000013 	bleq	2620 <DISABLE_IRQ+0x25a0>
    25d0:	0e030104 	adfeqs	f0, f3, f4
    25d4:	0b3a0b0b 	bleq	e85208 <MEM_SIZE+0x685208>
    25d8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    25dc:	0d0c0000 	stceq	0, cr0, [ip]
    25e0:	3a080300 	bcc	2031e8 <DISABLE_IRQ+0x203168>
    25e4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    25e8:	000a3813 	andeq	r3, sl, r3, lsl r8
    25ec:	01010d00 	tsteq	r1, r0, lsl #26
    25f0:	13011349 	movwne	r1, #4937	; 0x1349
    25f4:	210e0000 	tstcs	lr, r0
    25f8:	2f134900 	svccs	0x00134900
    25fc:	0f00000b 	svceq	0x0000000b
    2600:	0b0b0024 	bleq	2c2698 <DISABLE_IRQ+0x2c2618>
    2604:	00000b3e 	andeq	r0, r0, lr, lsr fp
    2608:	03011310 	movweq	r1, #4880	; 0x1310
    260c:	3a050b0e 	bcc	14524c <DISABLE_IRQ+0x1451cc>
    2610:	010b3b0b 	tsteq	fp, fp, lsl #22
    2614:	11000013 	tstne	r0, r3, lsl r0
    2618:	0b0b000f 	bleq	2c265c <DISABLE_IRQ+0x2c25dc>
    261c:	15120000 	ldrne	r0, [r2]
    2620:	010c2701 	tsteq	ip, r1, lsl #14
    2624:	13000013 	movwne	r0, #19
    2628:	13490005 	movtne	r0, #36869	; 0x9005
    262c:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    2630:	3a0e0301 	bcc	38323c <DISABLE_IRQ+0x3831bc>
    2634:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2638:	010b200c 	tsteq	fp, ip
    263c:	15000013 	strne	r0, [r0, #-19]
    2640:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2644:	0b3b0b3a 	bleq	ec5334 <MEM_SIZE+0x6c5334>
    2648:	00001349 	andeq	r1, r0, r9, asr #6
    264c:	03003416 	movweq	r3, #1046	; 0x416
    2650:	3b0b3a08 	blcc	2d0e78 <DISABLE_IRQ+0x2d0df8>
    2654:	0013490b 	andseq	r4, r3, fp, lsl #18
    2658:	00341700 	eorseq	r1, r4, r0, lsl #14
    265c:	0b3a0e03 	bleq	e85e70 <MEM_SIZE+0x685e70>
    2660:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2664:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
    2668:	030c3f01 	movweq	r3, #52993	; 0xcf01
    266c:	3b0b3a0e 	blcc	2d0eac <DISABLE_IRQ+0x2d0e2c>
    2670:	200c270b 	andcs	r2, ip, fp, lsl #14
    2674:	0013010b 	andseq	r0, r3, fp, lsl #2
    2678:	012e1900 	teqeq	lr, r0, lsl #18
    267c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    2680:	0b3b0b3a 	bleq	ec5370 <MEM_SIZE+0x6c5370>
    2684:	01110c27 	tsteq	r1, r7, lsr #24
    2688:	0a400112 	beq	1002ad8 <MEM_SIZE+0x802ad8>
    268c:	00001301 	andeq	r1, r0, r1, lsl #6
    2690:	31011d1a 	tstcc	r1, sl, lsl sp
    2694:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2698:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    269c:	1b00000b 	blne	26d0 <DISABLE_IRQ+0x2650>
    26a0:	13310005 	teqne	r1, #5
    26a4:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
    26a8:	030c3f01 	movweq	r3, #52993	; 0xcf01
    26ac:	3b0b3a0e 	blcc	2d0eec <DISABLE_IRQ+0x2d0e6c>
    26b0:	110c270b 	tstne	ip, fp, lsl #14
    26b4:	40011201 	andmi	r1, r1, r1, lsl #4
    26b8:	00130106 	andseq	r0, r3, r6, lsl #2
    26bc:	00051d00 	andeq	r1, r5, r0, lsl #26
    26c0:	0b3a0e03 	bleq	e85ed4 <MEM_SIZE+0x685ed4>
    26c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    26c8:	00000a02 	andeq	r0, r0, r2, lsl #20
    26cc:	0300051e 	movweq	r0, #1310	; 0x51e
    26d0:	3b0b3a0e 	blcc	2d0f10 <DISABLE_IRQ+0x2d0e90>
    26d4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    26d8:	1f000006 	svcne	0x00000006
    26dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    26e0:	0b3b0b3a 	bleq	ec53d0 <MEM_SIZE+0x6c53d0>
    26e4:	06021349 	streq	r1, [r2], -r9, asr #6
    26e8:	1d200000 	stcne	0, cr0, [r0]
    26ec:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    26f0:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    26f4:	000b590b 	andeq	r5, fp, fp, lsl #18
    26f8:	010b2100 	tsteq	fp, r0, lsl #2
    26fc:	00000655 	andeq	r0, r0, r5, asr r6
    2700:	31003422 	tstcc	r0, r2, lsr #8
    2704:	23000013 	movwcs	r0, #19
    2708:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
    270c:	01120111 	tsteq	r2, r1, lsl r1
    2710:	13010a40 	movwne	r0, #6720	; 0x1a40
    2714:	05240000 	streq	r0, [r4]!
    2718:	02133100 	andseq	r3, r3, #0
    271c:	2500000a 	strcs	r0, [r0, #-10]
    2720:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 0xffffff48
    2724:	0b3a0e03 	bleq	e85f38 <MEM_SIZE+0x685f38>
    2728:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
    272c:	01120111 	tsteq	r2, r1, lsl r1
    2730:	00000640 	andeq	r0, r0, r0, asr #12
    2734:	03003426 	movweq	r3, #1062	; 0x426
    2738:	3b0b3a0e 	blcc	2d0f78 <DISABLE_IRQ+0x2d0ef8>
    273c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2740:	2700000a 	strcs	r0, [r0, -sl]
    2744:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2748:	01120111 	tsteq	r2, r1, lsl r1
    274c:	0b590b58 	bleq	16454b4 <MEM_SIZE+0xe454b4>
    2750:	00001301 	andeq	r1, r0, r1, lsl #6
    2754:	11010b28 	tstne	r1, r8, lsr #22
    2758:	00011201 	andeq	r1, r1, r1, lsl #4
    275c:	011d2900 	tsteq	sp, r0, lsl #18
    2760:	01521331 	cmpeq	r2, r1, lsr r3
    2764:	0b580655 	bleq	16040c0 <MEM_SIZE+0xe040c0>
    2768:	13010b59 	movwne	r0, #7001	; 0x1b59
    276c:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
    2770:	3a0e0301 	bcc	38337c <DISABLE_IRQ+0x3832fc>
    2774:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2778:	1201110c 	andne	r1, r1, #3
    277c:	01064001 	tsteq	r6, r1
    2780:	2b000013 	blcs	27d4 <DISABLE_IRQ+0x2754>
    2784:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2788:	0b3b0b3a 	bleq	ec5478 <MEM_SIZE+0x6c5478>
    278c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 0xfffffedc
    2790:	00000c3c 	andeq	r0, r0, ip, lsr ip
    2794:	01110100 	tsteq	r1, r0, lsl #2
    2798:	0b130e25 	bleq	4c6034 <DISABLE_IRQ+0x4c5fb4>
    279c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    27a0:	01120111 	tsteq	r2, r1, lsl r1
    27a4:	00000610 	andeq	r0, r0, r0, lsl r6
    27a8:	03001602 	movweq	r1, #1538	; 0x602
    27ac:	3b0b3a0e 	blcc	2d0fec <DISABLE_IRQ+0x2d0f6c>
    27b0:	0300000b 	movweq	r0, #11
    27b4:	0b0b0024 	bleq	2c284c <DISABLE_IRQ+0x2c27cc>
    27b8:	0e030b3e 	vmoveq.16	d3[0], r0
    27bc:	16040000 	strne	r0, [r4], -r0
    27c0:	3a0e0300 	bcc	3833c8 <DISABLE_IRQ+0x383348>
    27c4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    27c8:	05000013 	streq	r0, [r0, #-19]
    27cc:	0b0b0024 	bleq	2c2864 <DISABLE_IRQ+0x2c27e4>
    27d0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    27d4:	04060000 	streq	r0, [r6]
    27d8:	3a0b0b01 	bcc	2c53e4 <DISABLE_IRQ+0x2c5364>
    27dc:	010b3b0b 	tsteq	fp, fp, lsl #22
    27e0:	07000013 	smladeq	r0, r3, r0, r0
    27e4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    27e8:	00000d1c 	andeq	r0, r0, ip, lsl sp
    27ec:	03011308 	movweq	r1, #4872	; 0x1308
    27f0:	3a0b0b0e 	bcc	2c5430 <DISABLE_IRQ+0x2c53b0>
    27f4:	010b3b0b 	tsteq	fp, fp, lsl #22
    27f8:	09000013 	stmdbeq	r0, {r0, r1, r4}
    27fc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2800:	0b3b0b3a 	bleq	ec54f0 <MEM_SIZE+0x6c54f0>
    2804:	0a381349 	beq	e07530 <MEM_SIZE+0x607530>
    2808:	0f0a0000 	svceq	0x000a0000
    280c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2810:	0b000013 	bleq	2864 <DISABLE_IRQ+0x27e4>
    2814:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    2818:	0b3b0b3a 	bleq	ec5508 <MEM_SIZE+0x6c5508>
    281c:	0a381349 	beq	e07548 <MEM_SIZE+0x607548>
    2820:	010c0000 	tsteq	ip, r0
    2824:	01134901 	tsteq	r3, r1, lsl #18
    2828:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    282c:	13490021 	movtne	r0, #36897	; 0x9021
    2830:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2834:	0b00240e 	bleq	b874 <DISABLE_IRQ+0xb7f4>
    2838:	000b3e0b 	andeq	r3, fp, fp, lsl #28
    283c:	01150f00 	tsteq	r5, r0, lsl #30
    2840:	13010c27 	movwne	r0, #7207	; 0x1c27
    2844:	05100000 	ldreq	r0, [r0]
    2848:	00134900 	andseq	r4, r3, r0, lsl #18
    284c:	000f1100 	andeq	r1, pc, r0, lsl #2
    2850:	00000b0b 	andeq	r0, r0, fp, lsl #22
    2854:	03012e12 	movweq	r2, #7698	; 0x1e12
    2858:	3b0b3a0e 	blcc	2d1098 <DISABLE_IRQ+0x2d1018>
    285c:	200c270b 	andcs	r2, ip, fp, lsl #14
    2860:	0013010b 	andseq	r0, r3, fp, lsl #2
    2864:	00051300 	andeq	r1, r5, r0, lsl #6
    2868:	0b3a0e03 	bleq	e8607c <MEM_SIZE+0x68607c>
    286c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2870:	34140000 	ldrcc	r0, [r4]
    2874:	3a080300 	bcc	20347c <DISABLE_IRQ+0x2033fc>
    2878:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    287c:	15000013 	strne	r0, [r0, #-19]
    2880:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2884:	0b3b0b3a 	bleq	ec5574 <MEM_SIZE+0x6c5574>
    2888:	00001349 	andeq	r1, r0, r9, asr #6
    288c:	3f012e16 	svccc	0x00012e16
    2890:	3a0e030c 	bcc	3834c8 <DISABLE_IRQ+0x383448>
    2894:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2898:	1201110c 	andne	r1, r1, #3
    289c:	01064001 	tsteq	r6, r1
    28a0:	17000013 	smladne	r0, r3, r0, r0
    28a4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    28a8:	01120111 	tsteq	r2, r1, lsl r1
    28ac:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
    28b0:	0b180000 	bleq	6028b8 <DISABLE_IRQ+0x602838>
    28b4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    28b8:	19000001 	stmdbne	r0, {r0}
    28bc:	13310034 	teqne	r1, #52	; 0x34
    28c0:	1d1a0000 	ldcne	0, cr0, [sl]
    28c4:	11133101 	tstne	r3, r1, lsl #2
    28c8:	58011201 	stmdapl	r1, {r0, r9, ip}
    28cc:	000b590b 	andeq	r5, fp, fp, lsl #18
    28d0:	00051b00 	andeq	r1, r5, r0, lsl #22
    28d4:	00001331 	andeq	r1, r0, r1, lsr r3
    28d8:	3f002e1c 	svccc	0x00002e1c
    28dc:	3a0e030c 	bcc	383514 <DISABLE_IRQ+0x383494>
    28e0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    28e4:	1201110c 	andne	r1, r1, #3
    28e8:	00064001 	andeq	r4, r6, r1
    28ec:	00051d00 	andeq	r1, r5, r0, lsl #26
    28f0:	0b3a0803 	bleq	e84904 <MEM_SIZE+0x684904>
    28f4:	1349053b 	movtne	r0, #38203	; 0x953b
    28f8:	00000602 	andeq	r0, r0, r2, lsl #12
    28fc:	0300341e 	movweq	r3, #1054	; 0x41e
    2900:	3b0b3a0e 	blcc	2d1140 <DISABLE_IRQ+0x2d10c0>
    2904:	00134905 	andseq	r4, r3, r5, lsl #18
    2908:	00341f00 	eorseq	r1, r4, r0, lsl #30
    290c:	0b3a0e03 	bleq	e86120 <MEM_SIZE+0x686120>
    2910:	1349053b 	movtne	r0, #38203	; 0x953b
    2914:	00000602 	andeq	r0, r0, r2, lsl #12
    2918:	03003420 	movweq	r3, #1056	; 0x420
    291c:	3b0b3a0e 	blcc	2d115c <DISABLE_IRQ+0x2d10dc>
    2920:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2924:	2100000a 	tstcs	r0, sl
    2928:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    292c:	06550152 	undefined instruction 0x06550152
    2930:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
    2934:	00001301 	andeq	r1, r0, r1, lsl #6
    2938:	55010b22 	strpl	r0, [r1, #-2850]	; 0xb22
    293c:	23000006 	movwcs	r0, #6
    2940:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2944:	06550152 	undefined instruction 0x06550152
    2948:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
    294c:	34240000 	strtcc	r0, [r4]
    2950:	02133100 	andseq	r3, r3, #0
    2954:	25000006 	strcs	r0, [r0, #-6]
    2958:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 0xffffff48
    295c:	0b3a0e03 	bleq	e86170 <MEM_SIZE+0x686170>
    2960:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
    2964:	01111349 	tsteq	r1, r9, asr #6
    2968:	06400112 	undefined instruction 0x06400112
    296c:	00001301 	andeq	r1, r0, r1, lsl #6
    2970:	03000526 	movweq	r0, #1318	; 0x526
    2974:	3b0b3a0e 	blcc	2d11b4 <DISABLE_IRQ+0x2d1134>
    2978:	02134905 	andseq	r4, r3, #81920	; 0x14000
    297c:	27000006 	strcs	r0, [r0, -r6]
    2980:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 0xffffff48
    2984:	0b3a0e03 	bleq	e86198 <MEM_SIZE+0x686198>
    2988:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
    298c:	01111349 	tsteq	r1, r9, asr #6
    2990:	06400112 	undefined instruction 0x06400112
    2994:	00001301 	andeq	r1, r0, r1, lsl #6
    2998:	03000528 	movweq	r0, #1320	; 0x528
    299c:	3b0b3a0e 	blcc	2d11dc <DISABLE_IRQ+0x2d115c>
    29a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    29a4:	29000006 	stmdbcs	r0, {r1, r2}
    29a8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    29ac:	06550152 	undefined instruction 0x06550152
    29b0:	0b590b58 	bleq	1645718 <MEM_SIZE+0xe45718>
    29b4:	342a0000 	strtcc	r0, [sl]
    29b8:	3a0e0300 	bcc	3835c0 <DISABLE_IRQ+0x383540>
    29bc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    29c0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    29c4:	0000000c 	andeq	r0, r0, ip
    29c8:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    29cc:	030b130e 	movweq	r1, #45838	; 0xb30e
    29d0:	110e1b0e 	tstne	lr, lr, lsl #22
    29d4:	10011201 	andne	r1, r1, r1, lsl #4
    29d8:	02000006 	andeq	r0, r0, #6
    29dc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    29e0:	0b3b0b3a 	bleq	ec56d0 <MEM_SIZE+0x6c56d0>
    29e4:	24030000 	strcs	r0, [r3]
    29e8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    29ec:	000e030b 	andeq	r0, lr, fp, lsl #6
    29f0:	00160400 	andseq	r0, r6, r0, lsl #8
    29f4:	0b3a0e03 	bleq	e86208 <MEM_SIZE+0x686208>
    29f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    29fc:	24050000 	strcs	r0, [r5]
    2a00:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2a04:	0008030b 	andeq	r0, r8, fp, lsl #6
    2a08:	01130600 	tsteq	r3, r0, lsl #12
    2a0c:	0b0b0e03 	bleq	2c6220 <DISABLE_IRQ+0x2c61a0>
    2a10:	0b3b0b3a 	bleq	ec5700 <MEM_SIZE+0x6c5700>
    2a14:	00001301 	andeq	r1, r0, r1, lsl #6
    2a18:	03000d07 	movweq	r0, #3335	; 0xd07
    2a1c:	3b0b3a0e 	blcc	2d125c <DISABLE_IRQ+0x2d11dc>
    2a20:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2a24:	0800000a 	stmdaeq	r0, {r1, r3}
    2a28:	0b0b000f 	bleq	2c2a6c <DISABLE_IRQ+0x2c29ec>
    2a2c:	00001349 	andeq	r1, r0, r9, asr #6
    2a30:	03000d09 	movweq	r0, #3337	; 0xd09
    2a34:	3b0b3a08 	blcc	2d125c <DISABLE_IRQ+0x2d11dc>
    2a38:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2a3c:	0a00000a 	beq	2a6c <DISABLE_IRQ+0x29ec>
    2a40:	13490101 	movtne	r0, #37121	; 0x9101
    2a44:	00001301 	andeq	r1, r0, r1, lsl #6
    2a48:	4900210b 	stmdbmi	r0, {r0, r1, r3, r8, sp}
    2a4c:	000b2f13 	andeq	r2, fp, r3, lsl pc
    2a50:	00240c00 	eoreq	r0, r4, r0, lsl #24
    2a54:	0b3e0b0b 	bleq	f85688 <MEM_SIZE+0x785688>
    2a58:	0f0d0000 	svceq	0x000d0000
    2a5c:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2a60:	01150e00 	tsteq	r5, r0, lsl #28
    2a64:	13010c27 	movwne	r0, #7207	; 0x1c27
    2a68:	050f0000 	streq	r0, [pc, #0]	; 2a70 <DISABLE_IRQ+0x29f0>
    2a6c:	00134900 	andseq	r4, r3, r0, lsl #18
    2a70:	002e1000 	eoreq	r1, lr, r0
    2a74:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    2a78:	0b3b0b3a 	bleq	ec5768 <MEM_SIZE+0x6c5768>
    2a7c:	01120111 	tsteq	r2, r1, lsl r1
    2a80:	00000640 	andeq	r0, r0, r0, asr #12
    2a84:	03012e11 	movweq	r2, #7697	; 0x1e11
    2a88:	3b0b3a0e 	blcc	2d12c8 <DISABLE_IRQ+0x2d1248>
    2a8c:	110c270b 	tstne	ip, fp, lsl #14
    2a90:	40011201 	andmi	r1, r1, r1, lsl #4
    2a94:	00130106 	andseq	r0, r3, r6, lsl #2
    2a98:	00051200 	andeq	r1, r5, r0, lsl #4
    2a9c:	0b3a0e03 	bleq	e862b0 <MEM_SIZE+0x6862b0>
    2aa0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2aa4:	00000602 	andeq	r0, r0, r2, lsl #12
    2aa8:	03003413 	movweq	r3, #1043	; 0x413
    2aac:	3b0b3a0e 	blcc	2d12ec <DISABLE_IRQ+0x2d126c>
    2ab0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2ab4:	1400000a 	strne	r0, [r0], #-10
    2ab8:	13490021 	movtne	r0, #36897	; 0x9021
    2abc:	0000052f 	andeq	r0, r0, pc, lsr #10
    2ac0:	03003415 	movweq	r3, #1045	; 0x415
    2ac4:	3b0b3a0e 	blcc	2d1304 <DISABLE_IRQ+0x2d1284>
    2ac8:	3f13490b 	svccc	0x0013490b
    2acc:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    2ad0:	11010000 	tstne	r1, r0
    2ad4:	130e2501 	movwne	r2, #58625	; 0xe501
    2ad8:	1b0e030b 	blne	38370c <DISABLE_IRQ+0x38368c>
    2adc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    2ae0:	00061001 	andeq	r1, r6, r1
    2ae4:	00160200 	andseq	r0, r6, r0, lsl #4
    2ae8:	0b3a0e03 	bleq	e862fc <MEM_SIZE+0x6862fc>
    2aec:	00000b3b 	andeq	r0, r0, fp, lsr fp
    2af0:	0b002403 	bleq	bb04 <DISABLE_IRQ+0xba84>
    2af4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2af8:	0400000e 	streq	r0, [r0], #-14
    2afc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2b00:	0b3b0b3a 	bleq	ec57f0 <MEM_SIZE+0x6c57f0>
    2b04:	00001349 	andeq	r1, r0, r9, asr #6
    2b08:	0b002405 	bleq	bb24 <DISABLE_IRQ+0xbaa4>
    2b0c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2b10:	06000008 	streq	r0, [r0], -r8
    2b14:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2b18:	0b3a0b0b 	bleq	e8574c <MEM_SIZE+0x68574c>
    2b1c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2b20:	0d070000 	stceq	0, cr0, [r7]
    2b24:	3a0e0300 	bcc	38372c <DISABLE_IRQ+0x3836ac>
    2b28:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2b2c:	000a3813 	andeq	r3, sl, r3, lsl r8
    2b30:	000f0800 	andeq	r0, pc, r0, lsl #16
    2b34:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2b38:	0d090000 	stceq	0, cr0, [r9]
    2b3c:	3a080300 	bcc	203744 <DISABLE_IRQ+0x2036c4>
    2b40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2b44:	000a3813 	andeq	r3, sl, r3, lsl r8
    2b48:	01010a00 	tsteq	r1, r0, lsl #20
    2b4c:	13011349 	movwne	r1, #4937	; 0x1349
    2b50:	210b0000 	tstcs	fp, r0
    2b54:	2f134900 	svccs	0x00134900
    2b58:	0c00000b 	stceq	0, cr0, [r0], {11}
    2b5c:	0b0b0024 	bleq	2c2bf4 <DISABLE_IRQ+0x2c2b74>
    2b60:	00000b3e 	andeq	r0, r0, lr, lsr fp
    2b64:	0b000f0d 	bleq	67a0 <DISABLE_IRQ+0x6720>
    2b68:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    2b6c:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    2b70:	00001301 	andeq	r1, r0, r1, lsl #6
    2b74:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
    2b78:	10000013 	andne	r0, r0, r3, lsl r0
    2b7c:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 0xffffff48
    2b80:	0b3a0e03 	bleq	e86394 <MEM_SIZE+0x686394>
    2b84:	01110b3b 	tsteq	r1, fp, lsr fp
    2b88:	06400112 	undefined instruction 0x06400112
    2b8c:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
    2b90:	3a0e0301 	bcc	38379c <DISABLE_IRQ+0x38371c>
    2b94:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2b98:	1201110c 	andne	r1, r1, #3
    2b9c:	01064001 	tsteq	r6, r1
    2ba0:	12000013 	andne	r0, r0, #19
    2ba4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2ba8:	0b3b0b3a 	bleq	ec5898 <MEM_SIZE+0x6c5898>
    2bac:	06021349 	streq	r1, [r2], -r9, asr #6
    2bb0:	34130000 	ldrcc	r0, [r3]
    2bb4:	3a0e0300 	bcc	3837bc <DISABLE_IRQ+0x38373c>
    2bb8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2bbc:	000a0213 	andeq	r0, sl, r3, lsl r2
    2bc0:	00211400 	eoreq	r1, r1, r0, lsl #8
    2bc4:	052f1349 	streq	r1, [pc, #-841]!	; 2883 <DISABLE_IRQ+0x2803>
    2bc8:	34150000 	ldrcc	r0, [r5]
    2bcc:	3a080300 	bcc	2037d4 <DISABLE_IRQ+0x203754>
    2bd0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2bd4:	000a0213 	andeq	r0, sl, r3, lsl r2
    2bd8:	00341600 	eorseq	r1, r4, r0, lsl #12
    2bdc:	0b3a0e03 	bleq	e863f0 <MEM_SIZE+0x6863f0>
    2be0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2be4:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    2be8:	01000000 	tsteq	r0, r0
    2bec:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2bf0:	0e030b13 	vmoveq.32	d3[0], r0
    2bf4:	01110e1b 	tsteq	r1, fp, lsl lr
    2bf8:	06100112 	undefined instruction 0x06100112
    2bfc:	16020000 	strne	r0, [r2], -r0
    2c00:	3a0e0300 	bcc	383808 <DISABLE_IRQ+0x383788>
    2c04:	000b3b0b 	andeq	r3, fp, fp, lsl #22
    2c08:	00240300 	eoreq	r0, r4, r0, lsl #6
    2c0c:	0b3e0b0b 	bleq	f85840 <MEM_SIZE+0x785840>
    2c10:	00000e03 	andeq	r0, r0, r3, lsl #28
    2c14:	03001604 	movweq	r1, #1540	; 0x604
    2c18:	3b0b3a0e 	blcc	2d1458 <DISABLE_IRQ+0x2d13d8>
    2c1c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2c20:	00240500 	eoreq	r0, r4, r0, lsl #10
    2c24:	0b3e0b0b 	bleq	f85858 <MEM_SIZE+0x785858>
    2c28:	00000803 	andeq	r0, r0, r3, lsl #16
    2c2c:	03011306 	movweq	r1, #4870	; 0x1306
    2c30:	3a0b0b0e 	bcc	2c5870 <DISABLE_IRQ+0x2c57f0>
    2c34:	010b3b0b 	tsteq	fp, fp, lsl #22
    2c38:	07000013 	smladeq	r0, r3, r0, r0
    2c3c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2c40:	0b3b0b3a 	bleq	ec5930 <MEM_SIZE+0x6c5930>
    2c44:	0a381349 	beq	e07970 <MEM_SIZE+0x607970>
    2c48:	0f080000 	svceq	0x00080000
    2c4c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2c50:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2c54:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    2c58:	0b3b0b3a 	bleq	ec5948 <MEM_SIZE+0x6c5948>
    2c5c:	0a381349 	beq	e07988 <MEM_SIZE+0x607988>
    2c60:	010a0000 	tsteq	sl, r0
    2c64:	01134901 	tsteq	r3, r1, lsl #18
    2c68:	0b000013 	bleq	2cbc <DISABLE_IRQ+0x2c3c>
    2c6c:	13490021 	movtne	r0, #36897	; 0x9021
    2c70:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2c74:	0b00240c 	bleq	bcac <DISABLE_IRQ+0xbc2c>
    2c78:	000b3e0b 	andeq	r3, fp, fp, lsl #28
    2c7c:	000f0d00 	andeq	r0, pc, r0, lsl #26
    2c80:	00000b0b 	andeq	r0, r0, fp, lsl #22
    2c84:	2701150e 	strcs	r1, [r1, -lr, lsl #10]
    2c88:	0013010c 	andseq	r0, r3, ip, lsl #2
    2c8c:	00050f00 	andeq	r0, r5, r0, lsl #30
    2c90:	00001349 	andeq	r1, r0, r9, asr #6
    2c94:	3f002e10 	svccc	0x00002e10
    2c98:	3a0e030c 	bcc	3838d0 <DISABLE_IRQ+0x383850>
    2c9c:	110b3b0b 	tstne	fp, fp, lsl #22
    2ca0:	40011201 	andmi	r1, r1, r1, lsl #4
    2ca4:	11000006 	tstne	r0, r6
    2ca8:	0e03012e 	adfeqsp	f0, f3, #0.5
    2cac:	0b3b0b3a 	bleq	ec599c <MEM_SIZE+0x6c599c>
    2cb0:	01110c27 	tsteq	r1, r7, lsr #24
    2cb4:	06400112 	undefined instruction 0x06400112
    2cb8:	00001301 	andeq	r1, r0, r1, lsl #6
    2cbc:	03000512 	movweq	r0, #1298	; 0x512
    2cc0:	3b0b3a0e 	blcc	2d1500 <DISABLE_IRQ+0x2d1480>
    2cc4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2cc8:	13000006 	movwne	r0, #6
    2ccc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2cd0:	0b3b0b3a 	bleq	ec59c0 <MEM_SIZE+0x6c59c0>
    2cd4:	0a021349 	beq	87a00 <DISABLE_IRQ+0x87980>
    2cd8:	21140000 	tstcs	r4, r0
    2cdc:	2f134900 	svccs	0x00134900
    2ce0:	15000005 	strne	r0, [r0, #-5]
    2ce4:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2ce8:	0b3b0b3a 	bleq	ec59d8 <MEM_SIZE+0x6c59d8>
    2cec:	0a021349 	beq	87a18 <DISABLE_IRQ+0x87998>
    2cf0:	34160000 	ldrcc	r0, [r6]
    2cf4:	3a0e0300 	bcc	3838fc <DISABLE_IRQ+0x38387c>
    2cf8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2cfc:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    2d00:	0000000c 	andeq	r0, r0, ip
    2d04:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    2d08:	030b130e 	movweq	r1, #45838	; 0xb30e
    2d0c:	110e1b0e 	tstne	lr, lr, lsl #22
    2d10:	10011201 	andne	r1, r1, r1, lsl #4
    2d14:	02000006 	andeq	r0, r0, #6
    2d18:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2d1c:	0b3b0b3a 	bleq	ec5a0c <MEM_SIZE+0x6c5a0c>
    2d20:	24030000 	strcs	r0, [r3]
    2d24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2d28:	000e030b 	andeq	r0, lr, fp, lsl #6
    2d2c:	00160400 	andseq	r0, r6, r0, lsl #8
    2d30:	0b3a0e03 	bleq	e86544 <MEM_SIZE+0x686544>
    2d34:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2d38:	24050000 	strcs	r0, [r5]
    2d3c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2d40:	0008030b 	andeq	r0, r8, fp, lsl #6
    2d44:	01130600 	tsteq	r3, r0, lsl #12
    2d48:	0b0b0e03 	bleq	2c655c <DISABLE_IRQ+0x2c64dc>
    2d4c:	0b3b0b3a 	bleq	ec5a3c <MEM_SIZE+0x6c5a3c>
    2d50:	00001301 	andeq	r1, r0, r1, lsl #6
    2d54:	03000d07 	movweq	r0, #3335	; 0xd07
    2d58:	3b0b3a0e 	blcc	2d1598 <DISABLE_IRQ+0x2d1518>
    2d5c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2d60:	0800000a 	stmdaeq	r0, {r1, r3}
    2d64:	0b0b000f 	bleq	2c2da8 <DISABLE_IRQ+0x2c2d28>
    2d68:	00001349 	andeq	r1, r0, r9, asr #6
    2d6c:	03000d09 	movweq	r0, #3337	; 0xd09
    2d70:	3b0b3a08 	blcc	2d1598 <DISABLE_IRQ+0x2d1518>
    2d74:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2d78:	0a00000a 	beq	2da8 <DISABLE_IRQ+0x2d28>
    2d7c:	13490101 	movtne	r0, #37121	; 0x9101
    2d80:	00001301 	andeq	r1, r0, r1, lsl #6
    2d84:	4900210b 	stmdbmi	r0, {r0, r1, r3, r8, sp}
    2d88:	000b2f13 	andeq	r2, fp, r3, lsl pc
    2d8c:	00240c00 	eoreq	r0, r4, r0, lsl #24
    2d90:	0b3e0b0b 	bleq	f859c4 <MEM_SIZE+0x7859c4>
    2d94:	150d0000 	strne	r0, [sp]
    2d98:	010c2701 	tsteq	ip, r1, lsl #14
    2d9c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    2da0:	13490005 	movtne	r0, #36869	; 0x9005
    2da4:	0f0f0000 	svceq	0x000f0000
    2da8:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2dac:	002e1000 	eoreq	r1, lr, r0
    2db0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    2db4:	0b3b0b3a 	bleq	ec5aa4 <MEM_SIZE+0x6c5aa4>
    2db8:	01120111 	tsteq	r2, r1, lsl r1
    2dbc:	00000640 	andeq	r0, r0, r0, asr #12
    2dc0:	03012e11 	movweq	r2, #7697	; 0x1e11
    2dc4:	3b0b3a0e 	blcc	2d1604 <DISABLE_IRQ+0x2d1584>
    2dc8:	110c270b 	tstne	ip, fp, lsl #14
    2dcc:	40011201 	andmi	r1, r1, r1, lsl #4
    2dd0:	00130106 	andseq	r0, r3, r6, lsl #2
    2dd4:	00051200 	andeq	r1, r5, r0, lsl #4
    2dd8:	0b3a0e03 	bleq	e865ec <MEM_SIZE+0x6865ec>
    2ddc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2de0:	00000602 	andeq	r0, r0, r2, lsl #12
    2de4:	03003413 	movweq	r3, #1043	; 0x413
    2de8:	3b0b3a0e 	blcc	2d1628 <DISABLE_IRQ+0x2d15a8>
    2dec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2df0:	1400000a 	strne	r0, [r0], #-10
    2df4:	13490021 	movtne	r0, #36897	; 0x9021
    2df8:	0000052f 	andeq	r0, r0, pc, lsr #10
    2dfc:	03003415 	movweq	r3, #1045	; 0x415
    2e00:	3b0b3a08 	blcc	2d1628 <DISABLE_IRQ+0x2d15a8>
    2e04:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2e08:	1600000a 	strne	r0, [r0], -sl
    2e0c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2e10:	0b3b0b3a 	bleq	ec5b00 <MEM_SIZE+0x6c5b00>
    2e14:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 0xfffffedc
    2e18:	00000c3c 	andeq	r0, r0, ip, lsr ip
    2e1c:	01110100 	tsteq	r1, r0, lsl #2
    2e20:	0b130e25 	bleq	4c66bc <DISABLE_IRQ+0x4c663c>
    2e24:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2e28:	01120111 	tsteq	r2, r1, lsl r1
    2e2c:	00000610 	andeq	r0, r0, r0, lsl r6
    2e30:	03001602 	movweq	r1, #1538	; 0x602
    2e34:	3b0b3a0e 	blcc	2d1674 <DISABLE_IRQ+0x2d15f4>
    2e38:	0300000b 	movweq	r0, #11
    2e3c:	0b0b0024 	bleq	2c2ed4 <DISABLE_IRQ+0x2c2e54>
    2e40:	0e030b3e 	vmoveq.16	d3[0], r0
    2e44:	16040000 	strne	r0, [r4], -r0
    2e48:	3a0e0300 	bcc	383a50 <DISABLE_IRQ+0x3839d0>
    2e4c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2e50:	05000013 	streq	r0, [r0, #-19]
    2e54:	0b0b0024 	bleq	2c2eec <DISABLE_IRQ+0x2c2e6c>
    2e58:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2e5c:	04060000 	streq	r0, [r6]
    2e60:	3a0b0b01 	bcc	2c5a6c <DISABLE_IRQ+0x2c59ec>
    2e64:	010b3b0b 	tsteq	fp, fp, lsl #22
    2e68:	07000013 	smladeq	r0, r3, r0, r0
    2e6c:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    2e70:	00000d1c 	andeq	r0, r0, ip, lsl sp
    2e74:	03011308 	movweq	r1, #4872	; 0x1308
    2e78:	3a0b0b0e 	bcc	2c5ab8 <DISABLE_IRQ+0x2c5a38>
    2e7c:	010b3b0b 	tsteq	fp, fp, lsl #22
    2e80:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2e84:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2e88:	0b3b0b3a 	bleq	ec5b78 <MEM_SIZE+0x6c5b78>
    2e8c:	0a381349 	beq	e07bb8 <MEM_SIZE+0x607bb8>
    2e90:	0f0a0000 	svceq	0x000a0000
    2e94:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2e98:	0b000013 	bleq	2eec <DISABLE_IRQ+0x2e6c>
    2e9c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    2ea0:	0b3b0b3a 	bleq	ec5b90 <MEM_SIZE+0x6c5b90>
    2ea4:	0a381349 	beq	e07bd0 <MEM_SIZE+0x607bd0>
    2ea8:	010c0000 	tsteq	ip, r0
    2eac:	01134901 	tsteq	r3, r1, lsl #18
    2eb0:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    2eb4:	13490021 	movtne	r0, #36897	; 0x9021
    2eb8:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2ebc:	0b00240e 	bleq	befc <DISABLE_IRQ+0xbe7c>
    2ec0:	000b3e0b 	andeq	r3, fp, fp, lsl #28
    2ec4:	000f0f00 	andeq	r0, pc, r0, lsl #30
    2ec8:	00000b0b 	andeq	r0, r0, fp, lsl #22
    2ecc:	27011510 	smladcs	r1, r0, r5, r1
    2ed0:	0013010c 	andseq	r0, r3, ip, lsl #2
    2ed4:	00051100 	andeq	r1, r5, r0, lsl #2
    2ed8:	00001349 	andeq	r1, r0, r9, asr #6
    2edc:	3f002e12 	svccc	0x00002e12
    2ee0:	3a0e030c 	bcc	383b18 <DISABLE_IRQ+0x383a98>
    2ee4:	110b3b0b 	tstne	fp, fp, lsl #22
    2ee8:	40011201 	andmi	r1, r1, r1, lsl #4
    2eec:	13000006 	movwne	r0, #6
    2ef0:	0e03012e 	adfeqsp	f0, f3, #0.5
    2ef4:	0b3b0b3a 	bleq	ec5be4 <MEM_SIZE+0x6c5be4>
    2ef8:	01110c27 	tsteq	r1, r7, lsr #24
    2efc:	06400112 	undefined instruction 0x06400112
    2f00:	00001301 	andeq	r1, r0, r1, lsl #6
    2f04:	03000514 	movweq	r0, #1300	; 0x514
    2f08:	3b0b3a0e 	blcc	2d1748 <DISABLE_IRQ+0x2d16c8>
    2f0c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2f10:	15000006 	strne	r0, [r0, #-6]
    2f14:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2f18:	0b3b0b3a 	bleq	ec5c08 <MEM_SIZE+0x6c5c08>
    2f1c:	0a021349 	beq	87c48 <DISABLE_IRQ+0x87bc8>
    2f20:	21160000 	tstcs	r6, r0
    2f24:	2f134900 	svccs	0x00134900
    2f28:	17000005 	strne	r0, [r0, -r5]
    2f2c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2f30:	0b3b0b3a 	bleq	ec5c20 <MEM_SIZE+0x6c5c20>
    2f34:	00001349 	andeq	r1, r0, r9, asr #6
    2f38:	03003418 	movweq	r3, #1048	; 0x418
    2f3c:	3b0b3a0e 	blcc	2d177c <DISABLE_IRQ+0x2d16fc>
    2f40:	3f13490b 	svccc	0x0013490b
    2f44:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    2f48:	11010000 	tstne	r1, r0
    2f4c:	130e2501 	movwne	r2, #58625	; 0xe501
    2f50:	1b0e030b 	blne	383b84 <DISABLE_IRQ+0x383b04>
    2f54:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    2f58:	00061001 	andeq	r1, r6, r1
    2f5c:	00160200 	andseq	r0, r6, r0, lsl #4
    2f60:	0b3a0e03 	bleq	e86774 <MEM_SIZE+0x686774>
    2f64:	00000b3b 	andeq	r0, r0, fp, lsr fp
    2f68:	0b002403 	bleq	bf7c <DISABLE_IRQ+0xbefc>
    2f6c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2f70:	0400000e 	streq	r0, [r0], #-14
    2f74:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2f78:	0b3b0b3a 	bleq	ec5c68 <MEM_SIZE+0x6c5c68>
    2f7c:	00001349 	andeq	r1, r0, r9, asr #6
    2f80:	0b002405 	bleq	bf9c <DISABLE_IRQ+0xbf1c>
    2f84:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2f88:	06000008 	streq	r0, [r0], -r8
    2f8c:	0b0b0104 	bleq	2c33a4 <DISABLE_IRQ+0x2c3324>
    2f90:	0b3b0b3a 	bleq	ec5c80 <MEM_SIZE+0x6c5c80>
    2f94:	00001301 	andeq	r1, r0, r1, lsl #6
    2f98:	03002807 	movweq	r2, #2055	; 0x807
    2f9c:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    2fa0:	01130800 	tsteq	r3, r0, lsl #16
    2fa4:	0b0b0e03 	bleq	2c67b8 <DISABLE_IRQ+0x2c6738>
    2fa8:	0b3b0b3a 	bleq	ec5c98 <MEM_SIZE+0x6c5c98>
    2fac:	00001301 	andeq	r1, r0, r1, lsl #6
    2fb0:	03000d09 	movweq	r0, #3337	; 0xd09
    2fb4:	3b0b3a0e 	blcc	2d17f4 <DISABLE_IRQ+0x2d1774>
    2fb8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2fbc:	0a00000a 	beq	2fec <DISABLE_IRQ+0x2f6c>
    2fc0:	0b0b000f 	bleq	2c3004 <DISABLE_IRQ+0x2c2f84>
    2fc4:	00001349 	andeq	r1, r0, r9, asr #6
    2fc8:	03000d0b 	movweq	r0, #3339	; 0xd0b
    2fcc:	3b0b3a08 	blcc	2d17f4 <DISABLE_IRQ+0x2d1774>
    2fd0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2fd4:	0c00000a 	stceq	0, cr0, [r0], {10}
    2fd8:	13490101 	movtne	r0, #37121	; 0x9101
    2fdc:	00001301 	andeq	r1, r0, r1, lsl #6
    2fe0:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
    2fe4:	000b2f13 	andeq	r2, fp, r3, lsl pc
    2fe8:	00240e00 	eoreq	r0, r4, r0, lsl #28
    2fec:	0b3e0b0b 	bleq	f85c20 <MEM_SIZE+0x785c20>
    2ff0:	0f0f0000 	svceq	0x000f0000
    2ff4:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2ff8:	01151000 	tsteq	r5, r0
    2ffc:	13010c27 	movwne	r0, #7207	; 0x1c27
    3000:	05110000 	ldreq	r0, [r1]
    3004:	00134900 	andseq	r4, r3, r0, lsl #18
    3008:	002e1200 	eoreq	r1, lr, r0, lsl #4
    300c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    3010:	0b3b0b3a 	bleq	ec5d00 <MEM_SIZE+0x6c5d00>
    3014:	01120111 	tsteq	r2, r1, lsl r1
    3018:	00000640 	andeq	r0, r0, r0, asr #12
    301c:	03012e13 	movweq	r2, #7699	; 0x1e13
    3020:	3b0b3a0e 	blcc	2d1860 <DISABLE_IRQ+0x2d17e0>
    3024:	110c270b 	tstne	ip, fp, lsl #14
    3028:	40011201 	andmi	r1, r1, r1, lsl #4
    302c:	00130106 	andseq	r0, r3, r6, lsl #2
    3030:	00051400 	andeq	r1, r5, r0, lsl #8
    3034:	0b3a0e03 	bleq	e86848 <MEM_SIZE+0x686848>
    3038:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    303c:	00000602 	andeq	r0, r0, r2, lsl #12
    3040:	03003415 	movweq	r3, #1045	; 0x415
    3044:	3b0b3a0e 	blcc	2d1884 <DISABLE_IRQ+0x2d1804>
    3048:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    304c:	1600000a 	strne	r0, [r0], -sl
    3050:	13490021 	movtne	r0, #36897	; 0x9021
    3054:	0000052f 	andeq	r0, r0, pc, lsr #10
    3058:	03003417 	movweq	r3, #1047	; 0x417
    305c:	3b0b3a0e 	blcc	2d189c <DISABLE_IRQ+0x2d181c>
    3060:	3f13490b 	svccc	0x0013490b
    3064:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    3068:	11010000 	tstne	r1, r0
    306c:	130e2501 	movwne	r2, #58625	; 0xe501
    3070:	1b0e030b 	blne	383ca4 <DISABLE_IRQ+0x383c24>
    3074:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    3078:	00061001 	andeq	r1, r6, r1
    307c:	00160200 	andseq	r0, r6, r0, lsl #4
    3080:	0b3a0e03 	bleq	e86894 <MEM_SIZE+0x686894>
    3084:	00000b3b 	andeq	r0, r0, fp, lsr fp
    3088:	0b002403 	bleq	c09c <DISABLE_IRQ+0xc01c>
    308c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3090:	0400000e 	streq	r0, [r0], #-14
    3094:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3098:	0b3b0b3a 	bleq	ec5d88 <MEM_SIZE+0x6c5d88>
    309c:	00001349 	andeq	r1, r0, r9, asr #6
    30a0:	0b002405 	bleq	c0bc <DISABLE_IRQ+0xc03c>
    30a4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    30a8:	06000008 	streq	r0, [r0], -r8
    30ac:	0b0b000f 	bleq	2c30f0 <DISABLE_IRQ+0x2c3070>
    30b0:	00001349 	andeq	r1, r0, r9, asr #6
    30b4:	0b002407 	bleq	c0d8 <DISABLE_IRQ+0xc058>
    30b8:	000b3e0b 	andeq	r3, fp, fp, lsl #28
    30bc:	01150800 	tsteq	r5, r0, lsl #16
    30c0:	13010c27 	movwne	r0, #7207	; 0x1c27
    30c4:	05090000 	streq	r0, [r9]
    30c8:	00134900 	andseq	r4, r3, r0, lsl #18
    30cc:	012e0a00 	teqeq	lr, r0, lsl #20
    30d0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    30d4:	0b3b0b3a 	bleq	ec5dc4 <MEM_SIZE+0x6c5dc4>
    30d8:	13490c27 	movtne	r0, #39975	; 0x9c27
    30dc:	01120111 	tsteq	r2, r1, lsl r1
    30e0:	13010640 	movwne	r0, #5696	; 0x1640
    30e4:	050b0000 	streq	r0, [fp]
    30e8:	3a0e0300 	bcc	383cf0 <DISABLE_IRQ+0x383c70>
    30ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    30f0:	00060213 	andeq	r0, r6, r3, lsl r2
    30f4:	00050c00 	andeq	r0, r5, r0, lsl #24
    30f8:	0b3a0e03 	bleq	e8690c <MEM_SIZE+0x68690c>
    30fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3100:	00000a02 	andeq	r0, r0, r2, lsl #20
    3104:	0300340d 	movweq	r3, #1037	; 0x40d
    3108:	3b0b3a08 	blcc	2d1930 <DISABLE_IRQ+0x2d18b0>
    310c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3110:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    3114:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3118:	0b3b0b3a 	bleq	ec5e08 <MEM_SIZE+0x6c5e08>
    311c:	00001349 	andeq	r1, r0, r9, asr #6
    3120:	3f002e0f 	svccc	0x00002e0f
    3124:	3a0e030c 	bcc	383d5c <DISABLE_IRQ+0x383cdc>
    3128:	110b3b0b 	tstne	fp, fp, lsl #22
    312c:	40011201 	andmi	r1, r1, r1, lsl #4
    3130:	0000000a 	andeq	r0, r0, sl
    3134:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    3138:	030b130e 	movweq	r1, #45838	; 0xb30e
    313c:	110e1b0e 	tstne	lr, lr, lsl #22
    3140:	10011201 	andne	r1, r1, r1, lsl #4
    3144:	02000006 	andeq	r0, r0, #6
    3148:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    314c:	0b3b0b3a 	bleq	ec5e3c <MEM_SIZE+0x6c5e3c>
    3150:	24030000 	strcs	r0, [r3]
    3154:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3158:	000e030b 	andeq	r0, lr, fp, lsl #6
    315c:	00160400 	andseq	r0, r6, r0, lsl #8
    3160:	0b3a0e03 	bleq	e86974 <MEM_SIZE+0x686974>
    3164:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3168:	24050000 	strcs	r0, [r5]
    316c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3170:	0008030b 	andeq	r0, r8, fp, lsl #6
    3174:	01130600 	tsteq	r3, r0, lsl #12
    3178:	0b0b0e03 	bleq	2c698c <DISABLE_IRQ+0x2c690c>
    317c:	0b3b0b3a 	bleq	ec5e6c <MEM_SIZE+0x6c5e6c>
    3180:	00001301 	andeq	r1, r0, r1, lsl #6
    3184:	03000d07 	movweq	r0, #3335	; 0xd07
    3188:	3b0b3a0e 	blcc	2d19c8 <DISABLE_IRQ+0x2d1948>
    318c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    3190:	0800000a 	stmdaeq	r0, {r1, r3}
    3194:	0b0b000f 	bleq	2c31d8 <DISABLE_IRQ+0x2c3158>
    3198:	00001349 	andeq	r1, r0, r9, asr #6
    319c:	03000d09 	movweq	r0, #3337	; 0xd09
    31a0:	3b0b3a08 	blcc	2d19c8 <DISABLE_IRQ+0x2d1948>
    31a4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    31a8:	0a00000a 	beq	31d8 <DISABLE_IRQ+0x3158>
    31ac:	13490101 	movtne	r0, #37121	; 0x9101
    31b0:	00001301 	andeq	r1, r0, r1, lsl #6
    31b4:	4900210b 	stmdbmi	r0, {r0, r1, r3, r8, sp}
    31b8:	000b2f13 	andeq	r2, fp, r3, lsl pc
    31bc:	00240c00 	eoreq	r0, r4, r0, lsl #24
    31c0:	0b3e0b0b 	bleq	f85df4 <MEM_SIZE+0x785df4>
    31c4:	150d0000 	strne	r0, [sp]
    31c8:	010c2701 	tsteq	ip, r1, lsl #14
    31cc:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    31d0:	13490005 	movtne	r0, #36869	; 0x9005
    31d4:	0f0f0000 	svceq	0x000f0000
    31d8:	000b0b00 	andeq	r0, fp, r0, lsl #22
    31dc:	002e1000 	eoreq	r1, lr, r0
    31e0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    31e4:	0b3b0b3a 	bleq	ec5ed4 <MEM_SIZE+0x6c5ed4>
    31e8:	01110c27 	tsteq	r1, r7, lsr #24
    31ec:	0a400112 	beq	100363c <MEM_SIZE+0x80363c>
    31f0:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
    31f4:	030c3f01 	movweq	r3, #52993	; 0xcf01
    31f8:	3b0b3a0e 	blcc	2d1a38 <DISABLE_IRQ+0x2d19b8>
    31fc:	110c270b 	tstne	ip, fp, lsl #14
    3200:	40011201 	andmi	r1, r1, r1, lsl #4
    3204:	0013010a 	andseq	r0, r3, sl, lsl #2
    3208:	00051200 	andeq	r1, r5, r0, lsl #4
    320c:	0b3a0e03 	bleq	e86a20 <MEM_SIZE+0x686a20>
    3210:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3214:	00000a02 	andeq	r0, r0, r2, lsl #20
    3218:	03000513 	movweq	r0, #1299	; 0x513
    321c:	3b0b3a08 	blcc	2d1a44 <DISABLE_IRQ+0x2d19c4>
    3220:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3224:	1400000a 	strne	r0, [r0], #-10
    3228:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 0xffffff48
    322c:	0b3a0e03 	bleq	e86a40 <MEM_SIZE+0x686a40>
    3230:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
    3234:	01120111 	tsteq	r2, r1, lsl r1
    3238:	13010a40 	movwne	r0, #6720	; 0x1a40
    323c:	05150000 	ldreq	r0, [r5]
    3240:	3a0e0300 	bcc	383e48 <DISABLE_IRQ+0x383dc8>
    3244:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3248:	000a0213 	andeq	r0, sl, r3, lsl r2
    324c:	00051600 	andeq	r1, r5, r0, lsl #12
    3250:	0b3a0803 	bleq	e85264 <MEM_SIZE+0x685264>
    3254:	1349053b 	movtne	r0, #38203	; 0x953b
    3258:	00000a02 	andeq	r0, r0, r2, lsl #20
    325c:	3f012e17 	svccc	0x00012e17
    3260:	3a0e030c 	bcc	383e98 <DISABLE_IRQ+0x383e18>
    3264:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3268:	1201110c 	andne	r1, r1, #3
    326c:	000a4001 	andeq	r4, sl, r1
    3270:	11010000 	tstne	r1, r0
    3274:	11061000 	tstne	r6, r0
    3278:	03011201 	movweq	r1, #4609	; 0x1201
    327c:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
    3280:	00051308 	andeq	r1, r5, r8, lsl #6
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	30000040 	andcc	r0, r0, r0, asr #32
  14:	00000070 	andeq	r0, r0, r0, ror r0
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00550002 	subseq	r0, r5, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	30000000 	andcc	r0, r0, r0
  34:	00000040 	andeq	r0, r0, r0, asr #32
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	00ab0002 	adceq	r0, fp, r2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	300000b0 	strhcc	r0, [r0], -r0
  54:	00000124 	andeq	r0, r0, r4, lsr #2
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	02120002 	andseq	r0, r2, #2
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	300001d4 	ldrdcc	r0, [r0], -r4
  74:	00000090 	muleq	r0, r0, r0
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	026b0002 	rsbeq	r0, fp, #2
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	30000264 	andcc	r0, r0, r4, ror #4
  94:	000000ec 	andeq	r0, r0, ip, ror #1
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	039e0002 	orrseq	r0, lr, #2
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	30000350 	andcc	r0, r0, r0, asr r3
  b4:	000004b0 	undefined instruction 0x000004b0
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	07880002 	streq	r0, [r8, r2]
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	30000800 	andcc	r0, r0, r0, lsl #16
  d4:	00000080 	andeq	r0, r0, r0, lsl #1
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	08290002 	stmdaeq	r9!, {r1}
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	30000880 	andcc	r0, r0, r0, lsl #17
  f4:	000001f0 	strdeq	r0, [r0], -r0
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	108a0002 	addne	r0, sl, r2
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	30000a70 	andcc	r0, r0, r0, ror sl
 114:	00000330 	andeq	r0, r0, r0, lsr r3
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	19960002 	ldmibne	r6, {r1}
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	30000da0 	andcc	r0, r0, r0, lsr #27
 134:	000005c4 	andeq	r0, r0, r4, asr #11
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	23740002 	cmncs	r4, #2
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	30001364 	andcc	r1, r0, r4, ror #6
 154:	00000068 	andeq	r0, r0, r8, rrx
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	295c0002 	ldmdbcs	ip, {r1}^
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	300013cc 	andcc	r1, r0, ip, asr #7
 174:	000005a4 	andeq	r0, r0, r4, lsr #11
	...
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	34ee0002 	strbtcc	r0, [lr], #2
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	30001970 	andcc	r1, r0, r0, ror r9
 194:	0000090c 	andeq	r0, r0, ip, lsl #18
	...
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	48fc0002 	ldmmi	ip!, {r1}^
 1a8:	00040000 	andeq	r0, r4, r0
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	3000227c 	andcc	r2, r0, ip, ror r2
 1b4:	0000052c 	andeq	r0, r0, ip, lsr #10
	...
 1c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c4:	58700002 	ldmdapl	r0!, {r1}^
 1c8:	00040000 	andeq	r0, r4, r0
 1cc:	00000000 	andeq	r0, r0, r0
 1d0:	300027a8 	andcc	r2, r0, r8, lsr #15
 1d4:	000007f8 	strdeq	r0, [r0], -r8
	...
 1e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e4:	64ea0002 	strbtvs	r0, [sl], #2
 1e8:	00040000 	andeq	r0, r4, r0
 1ec:	00000000 	andeq	r0, r0, r0
 1f0:	30002fa0 	andcc	r2, r0, r0, lsr #31
 1f4:	00000994 	muleq	r0, r4, r9
	...
 200:	0000001c 	andeq	r0, r0, ip, lsl r0
 204:	71040002 	tstvc	r4, r2
 208:	00040000 	andeq	r0, r4, r0
 20c:	00000000 	andeq	r0, r0, r0
 210:	30003934 	andcc	r3, r0, r4, lsr r9
 214:	00000990 	muleq	r0, r0, r9
	...
 220:	0000001c 	andeq	r0, r0, ip, lsl r0
 224:	7c630002 	stclvc	0, cr0, [r3], #-8
 228:	00040000 	andeq	r0, r4, r0
 22c:	00000000 	andeq	r0, r0, r0
 230:	300042c4 	andcc	r4, r0, r4, asr #5
 234:	0000024c 	andeq	r0, r0, ip, asr #4
	...
 240:	0000001c 	andeq	r0, r0, ip, lsl r0
 244:	84d60002 	ldrbhi	r0, [r6], #2
 248:	00040000 	andeq	r0, r4, r0
 24c:	00000000 	andeq	r0, r0, r0
 250:	30004510 	andcc	r4, r0, r0, lsl r5
 254:	00000774 	andeq	r0, r0, r4, ror r7
	...
 260:	0000001c 	andeq	r0, r0, ip, lsl r0
 264:	8f500002 	svchi	0x00500002
 268:	00040000 	andeq	r0, r4, r0
 26c:	00000000 	andeq	r0, r0, r0
 270:	30004c84 	andcc	r4, r0, r4, lsl #25
 274:	000002f8 	strdeq	r0, [r0], -r8
	...
 280:	0000001c 	andeq	r0, r0, ip, lsl r0
 284:	98d30002 	ldmls	r3, {r1}^
 288:	00040000 	andeq	r0, r4, r0
 28c:	00000000 	andeq	r0, r0, r0
 290:	30004f7c 	andcc	r4, r0, ip, ror pc
 294:	00001214 	andeq	r1, r0, r4, lsl r2
	...
 2a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a4:	aabd0002 	bge	fef402b4 <rEINTPEND+0xa8f4020c>
 2a8:	00040000 	andeq	r0, r4, r0
 2ac:	00000000 	andeq	r0, r0, r0
 2b0:	30006190 	mulcc	r0, r0, r1
 2b4:	000006c4 	andeq	r0, r0, r4, asr #13
	...
 2c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c4:	b8eb0002 	stmialt	fp!, {r1}^
 2c8:	00040000 	andeq	r0, r4, r0
 2cc:	00000000 	andeq	r0, r0, r0
 2d0:	30006854 	andcc	r6, r0, r4, asr r8
 2d4:	000000c0 	andeq	r0, r0, r0, asr #1
	...
 2e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e4:	bfa30002 	svclt	0x00a30002
 2e8:	00040000 	andeq	r0, r4, r0
 2ec:	00000000 	andeq	r0, r0, r0
 2f0:	30006914 	andcc	r6, r0, r4, lsl r9
 2f4:	00000084 	andeq	r0, r0, r4, lsl #1
	...
 300:	0000001c 	andeq	r0, r0, ip, lsl r0
 304:	c56f0002 	strbgt	r0, [pc, #-2]!	; 30a <DISABLE_IRQ+0x28a>
 308:	00040000 	andeq	r0, r4, r0
 30c:	00000000 	andeq	r0, r0, r0
 310:	30006998 	mulcc	r0, r8, r9
 314:	0000038c 	andeq	r0, r0, ip, lsl #7
	...
 320:	0000001c 	andeq	r0, r0, ip, lsl r0
 324:	d0be0002 	adcsle	r0, lr, r2
 328:	00040000 	andeq	r0, r4, r0
 32c:	00000000 	andeq	r0, r0, r0
 330:	30006d24 	andcc	r6, r0, r4, lsr #26
 334:	0000055c 	andeq	r0, r0, ip, asr r5
	...
 340:	0000001c 	andeq	r0, r0, ip, lsl r0
 344:	dd420002 	stclle	0, cr0, [r2, #-8]
 348:	00040000 	andeq	r0, r4, r0
 34c:	00000000 	andeq	r0, r0, r0
 350:	30007280 	andcc	r7, r0, r0, lsl #5
 354:	0000013c 	andeq	r0, r0, ip, lsr r1
	...
 360:	0000001c 	andeq	r0, r0, ip, lsl r0
 364:	e2c60002 	sbc	r0, r6, #2
 368:	00040000 	andeq	r0, r4, r0
 36c:	00000000 	andeq	r0, r0, r0
 370:	300073bc 	undefined instruction 0x300073bc
 374:	00000120 	andeq	r0, r0, r0, lsr #2
	...
 380:	0000001c 	andeq	r0, r0, ip, lsl r0
 384:	e82c0002 	stmda	ip!, {r1}
 388:	00040000 	andeq	r0, r4, r0
 38c:	00000000 	andeq	r0, r0, r0
 390:	300074dc 	ldrdcc	r7, [r0], -ip
 394:	00000178 	andeq	r0, r0, r8, ror r1
	...
 3a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a4:	eda30002 	stc	0, cr0, [r3, #8]!
 3a8:	00040000 	andeq	r0, r4, r0
 3ac:	00000000 	andeq	r0, r0, r0
 3b0:	30007654 	andcc	r7, r0, r4, asr r6
 3b4:	00000144 	andeq	r0, r0, r4, asr #2
	...
 3c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c4:	f3b30002 	vaddl.u<illegal width 64>	q0, d3, d2
 3c8:	00040000 	andeq	r0, r4, r0
 3cc:	00000000 	andeq	r0, r0, r0
 3d0:	30007798 	mulcc	r0, r8, r7
 3d4:	00000114 	andeq	r0, r0, r4, lsl r1
	...
 3e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e4:	fb070002 	blx	1c03f6 <DISABLE_IRQ+0x1c0376>
 3e8:	00040000 	andeq	r0, r4, r0
 3ec:	00000000 	andeq	r0, r0, r0
 3f0:	300078ac 	andcc	r7, r0, ip, lsr #17
 3f4:	00000164 	andeq	r0, r0, r4, ror #2
	...
 400:	0000001c 	andeq	r0, r0, ip, lsl r0
 404:	025e0002 	subseq	r0, lr, #2
 408:	00040001 	andeq	r0, r4, r1
 40c:	00000000 	andeq	r0, r0, r0
 410:	30007a10 	andcc	r7, r0, r0, lsl sl
 414:	00000100 	andeq	r0, r0, r0, lsl #2
	...
 420:	0000001c 	andeq	r0, r0, ip, lsl r0
 424:	03fb0002 	mvnseq	r0, #2
 428:	00040001 	andeq	r0, r4, r1
 42c:	00000000 	andeq	r0, r0, r0
 430:	30007b10 	andcc	r7, r0, r0, lsl fp
 434:	000000e8 	andeq	r0, r0, r8, ror #1
	...
 440:	0000001c 	andeq	r0, r0, ip, lsl r0
 444:	19060002 	stmdbne	r6, {r1}
 448:	00040001 	andeq	r0, r4, r1
 44c:	00000000 	andeq	r0, r0, r0
 450:	30007bf8 	strdcc	r7, [r0], -r8
 454:	000000c0 	andeq	r0, r0, r0, asr #1
	...

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 	undefined instruction 0xffffffff
       8:	7c010001 	stcvc	0, cr0, [r1], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000000c 	andeq	r0, r0, ip
      14:	00000000 	andeq	r0, r0, r0
      18:	300000b0 	strhcc	r0, [r0], -r0
      1c:	00000024 	andeq	r0, r0, r4, lsr #32
      20:	0000000c 	andeq	r0, r0, ip
      24:	00000000 	andeq	r0, r0, r0
      28:	300000d4 	ldrdcc	r0, [r0], -r4
      2c:	00000024 	andeq	r0, r0, r4, lsr #32
      30:	00000018 	andeq	r0, r0, r8, lsl r0
      34:	00000000 	andeq	r0, r0, r0
      38:	300000f8 	strdcc	r0, [r0], -r8
      3c:	00000070 	andeq	r0, r0, r0, ror r0
      40:	11080e4c 	tstne	r8, ip, asr #28
      44:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
      48:	00000002 	andeq	r0, r0, r2
      4c:	00000018 	andeq	r0, r0, r8, lsl r0
      50:	00000000 	andeq	r0, r0, r0
      54:	30000168 	andcc	r0, r0, r8, ror #2
      58:	0000006c 	andeq	r0, r0, ip, rrx
      5c:	11080e44 	tstne	r8, r4, asr #28
      60:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
      64:	00000002 	andeq	r0, r0, r2
      68:	0000000c 	andeq	r0, r0, ip
      6c:	ffffffff 	undefined instruction 0xffffffff
      70:	7c010001 	stcvc	0, cr0, [r1], {1}
      74:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      78:	0000000c 	andeq	r0, r0, ip
      7c:	00000068 	andeq	r0, r0, r8, rrx
      80:	30000264 	andcc	r0, r0, r4, ror #4
      84:	0000002c 	andeq	r0, r0, ip, lsr #32
      88:	0000000c 	andeq	r0, r0, ip
      8c:	00000068 	andeq	r0, r0, r8, rrx
      90:	30000290 	mulcc	r0, r0, r2
      94:	00000010 	andeq	r0, r0, r0, lsl r0
      98:	0000000c 	andeq	r0, r0, ip
      9c:	00000068 	andeq	r0, r0, r8, rrx
      a0:	300002a0 	andcc	r0, r0, r0, lsr #5
      a4:	00000018 	andeq	r0, r0, r8, lsl r0
      a8:	0000000c 	andeq	r0, r0, ip
      ac:	00000068 	andeq	r0, r0, r8, rrx
      b0:	300002b8 	undefined instruction 0x300002b8
      b4:	00000098 	muleq	r0, r8, r0
      b8:	0000000c 	andeq	r0, r0, ip
      bc:	ffffffff 	undefined instruction 0xffffffff
      c0:	7c010001 	stcvc	0, cr0, [r1], {1}
      c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      c8:	0000000c 	andeq	r0, r0, ip
      cc:	000000b8 	strheq	r0, [r0], -r8
      d0:	30000350 	andcc	r0, r0, r0, asr r3
      d4:	00000024 	andeq	r0, r0, r4, lsr #32
      d8:	0000000c 	andeq	r0, r0, ip
      dc:	000000b8 	strheq	r0, [r0], -r8
      e0:	30000374 	andcc	r0, r0, r4, ror r3
      e4:	000000dc 	ldrdeq	r0, [r0], -ip
      e8:	0000000c 	andeq	r0, r0, ip
      ec:	000000b8 	strheq	r0, [r0], -r8
      f0:	30000450 	andcc	r0, r0, r0, asr r4
      f4:	000001a8 	andeq	r0, r0, r8, lsr #3
      f8:	00000030 	andeq	r0, r0, r0, lsr r0
      fc:	000000b8 	strheq	r0, [r0], -r8
     100:	300005f8 	strdcc	r0, [r0], -r8
     104:	000001a4 	andeq	r0, r0, r4, lsr #3
     108:	44240e44 	strtmi	r0, [r4], #-3652	; 0xe44
     10c:	0e11300e 	cdpeq	0, 1, cr3, cr1, cr14, {0}
     110:	020b1101 	andeq	r1, fp, #1073741824	; 0x40000000
     114:	11030a11 	tstne	r3, r1, lsl sl
     118:	08110409 	ldmdaeq	r1, {r0, r3, sl}
     11c:	06071105 	streq	r1, [r7], -r5, lsl #2
     120:	11070611 	tstne	r7, r1, lsl r6
     124:	04110805 	ldreq	r0, [r1], #-2053	; 0x805
     128:	00000009 	andeq	r0, r0, r9
     12c:	0000001c 	andeq	r0, r0, ip, lsl r0
     130:	000000b8 	strheq	r0, [r0], -r8
     134:	3000079c 	mulcc	r0, ip, r7
     138:	0000000c 	andeq	r0, r0, ip
     13c:	11100e44 	tstne	r0, r4, asr #28
     140:	02110103 	andseq	r0, r1, #-1073741824	; 0xc0000000
     144:	03011102 	movweq	r1, #4354	; 0x1102
     148:	00040011 	andeq	r0, r4, r1, lsl r0
     14c:	0000000c 	andeq	r0, r0, ip
     150:	000000b8 	strheq	r0, [r0], -r8
     154:	300007a8 	andcc	r0, r0, r8, lsr #15
     158:	00000004 	andeq	r0, r0, r4
     15c:	0000001c 	andeq	r0, r0, ip, lsl r0
     160:	000000b8 	strheq	r0, [r0], -r8
     164:	300007ac 	andcc	r0, r0, ip, lsr #15
     168:	00000054 	andeq	r0, r0, r4, asr r0
     16c:	11100e44 	tstne	r0, r4, asr #28
     170:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     174:	03051102 	movweq	r1, #20738	; 0x5102
     178:	00040411 	andeq	r0, r4, r1, lsl r4
     17c:	0000000c 	andeq	r0, r0, ip
     180:	ffffffff 	undefined instruction 0xffffffff
     184:	7c010001 	stcvc	0, cr0, [r1], {1}
     188:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     18c:	00000014 	andeq	r0, r0, r4, lsl r0
     190:	0000017c 	andeq	r0, r0, ip, ror r1
     194:	30000800 	andcc	r0, r0, r0, lsl #16
     198:	00000018 	andeq	r0, r0, r8, lsl r0
     19c:	11040e44 	tstne	r4, r4, asr #28
     1a0:	00000104 	andeq	r0, r0, r4, lsl #2
     1a4:	00000014 	andeq	r0, r0, r4, lsl r0
     1a8:	0000017c 	andeq	r0, r0, ip, ror r1
     1ac:	30000818 	andcc	r0, r0, r8, lsl r8
     1b0:	00000018 	andeq	r0, r0, r8, lsl r0
     1b4:	11040e44 	tstne	r4, r4, asr #28
     1b8:	00000104 	andeq	r0, r0, r4, lsl #2
     1bc:	0000000c 	andeq	r0, r0, ip
     1c0:	0000017c 	andeq	r0, r0, ip, ror r1
     1c4:	30000830 	andcc	r0, r0, r0, lsr r8
     1c8:	00000018 	andeq	r0, r0, r8, lsl r0
     1cc:	00000018 	andeq	r0, r0, r8, lsl r0
     1d0:	0000017c 	andeq	r0, r0, ip, ror r1
     1d4:	30000848 	andcc	r0, r0, r8, asr #16
     1d8:	00000038 	andeq	r0, r0, r8, lsr r0
     1dc:	11080e58 	tstne	r8, r8, asr lr
     1e0:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
     1e4:	00000002 	andeq	r0, r0, r2
     1e8:	0000000c 	andeq	r0, r0, ip
     1ec:	ffffffff 	undefined instruction 0xffffffff
     1f0:	7c010001 	stcvc	0, cr0, [r1], {1}
     1f4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     1f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     1fc:	000001e8 	andeq	r0, r0, r8, ror #3
     200:	30000880 	andcc	r0, r0, r0, lsl #17
     204:	00000060 	andeq	r0, r0, r0, rrx
     208:	11100e44 	tstne	r0, r4, asr #28
     20c:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     210:	03051102 	movweq	r1, #20738	; 0x5102
     214:	00040411 	andeq	r0, r4, r1, lsl r4
     218:	0000001c 	andeq	r0, r0, ip, lsl r0
     21c:	000001e8 	andeq	r0, r0, r8, ror #3
     220:	300008e0 	andcc	r0, r0, r0, ror #17
     224:	000000a4 	andeq	r0, r0, r4, lsr #1
     228:	110c0e44 	tstne	ip, r4, asr #28
     22c:	0511010e 	ldreq	r0, [r1, #-270]	; 0x10e
     230:	03041102 	movweq	r1, #16642	; 0x4102
     234:	00180e48 	andseq	r0, r8, r8, asr #28
     238:	00000024 	andeq	r0, r0, r4, lsr #32
     23c:	000001e8 	andeq	r0, r0, r8, ror #3
     240:	30000984 	andcc	r0, r0, r4, lsl #19
     244:	000000ec 	andeq	r0, r0, ip, ror #1
     248:	11180e44 	tstne	r8, r4, asr #28
     24c:	0811010e 	ldmdaeq	r1, {r1, r2, r3, r8}
     250:	03071102 	movweq	r1, #28930	; 0x7102
     254:	11040611 	tstne	r4, r1, lsl r6
     258:	04110505 	ldreq	r0, [r1], #-1285	; 0x505
     25c:	00000006 	andeq	r0, r0, r6
     260:	0000000c 	andeq	r0, r0, ip
     264:	ffffffff 	undefined instruction 0xffffffff
     268:	7c010001 	stcvc	0, cr0, [r1], {1}
     26c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     270:	00000018 	andeq	r0, r0, r8, lsl r0
     274:	00000260 	andeq	r0, r0, r0, ror #4
     278:	30000a70 	andcc	r0, r0, r0, ror sl
     27c:	0000009c 	muleq	r0, ip, r0
     280:	110c0e48 	tstne	ip, r8, asr #28
     284:	05110106 	ldreq	r0, [r1, #-262]	; 0x106
     288:	03041102 	movweq	r1, #16642	; 0x4102
     28c:	00000018 	andeq	r0, r0, r8, lsl r0
     290:	00000260 	andeq	r0, r0, r0, ror #4
     294:	30000b0c 	andcc	r0, r0, ip, lsl #22
     298:	0000008c 	andeq	r0, r0, ip, lsl #1
     29c:	11080e44 	tstne	r8, r4, asr #28
     2a0:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
     2a4:	100e4802 	andne	r4, lr, r2, lsl #16
     2a8:	00000030 	andeq	r0, r0, r0, lsr r0
     2ac:	00000260 	andeq	r0, r0, r0, ror #4
     2b0:	30000b98 	mulcc	r0, r8, fp
     2b4:	00000208 	andeq	r0, r0, r8, lsl #4
     2b8:	11240e44 	teqne	r4, r4, asr #28
     2bc:	0b11010e 	bleq	4406fc <DISABLE_IRQ+0x44067c>
     2c0:	030a1102 	movweq	r1, #41218	; 0xa102
     2c4:	11040911 	tstne	r4, r1, lsl r9
     2c8:	07110508 	ldreq	r0, [r1, -r8, lsl #10]
     2cc:	07061106 	streq	r1, [r6, -r6, lsl #2]
     2d0:	11080511 	tstne	r8, r1, lsl r5
     2d4:	0e480904 	cdpeq	9, 4, cr0, cr8, cr4, {0}
     2d8:	00000030 	andeq	r0, r0, r0, lsr r0
     2dc:	0000000c 	andeq	r0, r0, ip
     2e0:	ffffffff 	undefined instruction 0xffffffff
     2e4:	7c010001 	stcvc	0, cr0, [r1], {1}
     2e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     2f0:	000002dc 	ldrdeq	r0, [r0], -ip
     2f4:	30000da0 	andcc	r0, r0, r0, lsr #27
     2f8:	00000104 	andeq	r0, r0, r4, lsl #2
     2fc:	11100e44 	tstne	r0, r4, asr #28
     300:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     304:	03051102 	movweq	r1, #20738	; 0x5102
     308:	00040411 	andeq	r0, r4, r1, lsl r4
     30c:	00000028 	andeq	r0, r0, r8, lsr #32
     310:	000002dc 	ldrdeq	r0, [r0], -ip
     314:	30000ea4 	andcc	r0, r0, r4, lsr #29
     318:	00000184 	andeq	r0, r0, r4, lsl #3
     31c:	11200e44 	teqne	r0, r4, asr #28
     320:	0a11010e 	beq	440760 <DISABLE_IRQ+0x4406e0>
     324:	03091102 	movweq	r1, #37122	; 0x9102
     328:	11040811 	tstne	r4, r1, lsl r8
     32c:	06110507 	ldreq	r0, [r1], -r7, lsl #10
     330:	07051106 	streq	r1, [r5, -r6, lsl #2]
     334:	00080411 	andeq	r0, r8, r1, lsl r4
     338:	00000020 	andeq	r0, r0, r0, lsr #32
     33c:	000002dc 	ldrdeq	r0, [r0], -ip
     340:	30001028 	andcc	r1, r0, r8, lsr #32
     344:	00000078 	andeq	r0, r0, r8, ror r0
     348:	48100e44 	ldmdami	r0, {r2, r6, r9, sl, fp}
     34c:	0e11180e 	cdpeq	8, 1, cr1, cr1, cr14, {0}
     350:	02061101 	andeq	r1, r6, #1073741824	; 0x40000000
     354:	11030511 	tstne	r3, r1, lsl r5
     358:	00000404 	andeq	r0, r0, r4, lsl #8
     35c:	00000030 	andeq	r0, r0, r0, lsr r0
     360:	000002dc 	ldrdeq	r0, [r0], -ip
     364:	300010a0 	andcc	r1, r0, r0, lsr #1
     368:	00000268 	andeq	r0, r0, r8, ror #4
     36c:	11280e44 	teqne	r8, r4, asr #28
     370:	0b11010e 	bleq	4407b0 <DISABLE_IRQ+0x440730>
     374:	030a1102 	movweq	r1, #41218	; 0xa102
     378:	11040911 	tstne	r4, r1, lsl r9
     37c:	07110508 	ldreq	r0, [r1, -r8, lsl #10]
     380:	07061106 	streq	r1, [r6, -r6, lsl #2]
     384:	11080511 	tstne	r8, r1, lsl r5
     388:	03110904 	tsteq	r1, #65536	; 0x10000
     38c:	0000000a 	andeq	r0, r0, sl
     390:	0000001c 	andeq	r0, r0, ip, lsl r0
     394:	000002dc 	ldrdeq	r0, [r0], -ip
     398:	30001308 	andcc	r1, r0, r8, lsl #6
     39c:	0000005c 	andeq	r0, r0, ip, asr r0
     3a0:	11100e48 	tstne	r0, r8, asr #28
     3a4:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     3a8:	03051102 	movweq	r1, #20738	; 0x5102
     3ac:	00040411 	andeq	r0, r4, r1, lsl r4
     3b0:	0000000c 	andeq	r0, r0, ip
     3b4:	ffffffff 	undefined instruction 0xffffffff
     3b8:	7c010001 	stcvc	0, cr0, [r1], {1}
     3bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     3c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     3c4:	000003b0 	undefined instruction 0x000003b0
     3c8:	30001364 	andcc	r1, r0, r4, ror #6
     3cc:	00000068 	andeq	r0, r0, r8, rrx
     3d0:	11100e44 	tstne	r0, r4, asr #28
     3d4:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     3d8:	03051102 	movweq	r1, #20738	; 0x5102
     3dc:	00040411 	andeq	r0, r4, r1, lsl r4
     3e0:	0000000c 	andeq	r0, r0, ip
     3e4:	ffffffff 	undefined instruction 0xffffffff
     3e8:	7c010001 	stcvc	0, cr0, [r1], {1}
     3ec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     3f0:	00000014 	andeq	r0, r0, r4, lsl r0
     3f4:	000003e0 	andeq	r0, r0, r0, ror #7
     3f8:	300013cc 	andcc	r1, r0, ip, asr #7
     3fc:	0000004c 	andeq	r0, r0, ip, asr #32
     400:	11040e44 	tstne	r4, r4, asr #28
     404:	00000104 	andeq	r0, r0, r4, lsl #2
     408:	00000018 	andeq	r0, r0, r8, lsl r0
     40c:	000003e0 	andeq	r0, r0, r0, ror #7
     410:	30001418 	andcc	r1, r0, r8, lsl r4
     414:	00000070 	andeq	r0, r0, r0, ror r0
     418:	11080e44 	tstne	r8, r4, asr #28
     41c:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
     420:	180e4802 	stmdane	lr, {r1, fp, lr}
     424:	0000001c 	andeq	r0, r0, ip, lsl r0
     428:	000003e0 	andeq	r0, r0, r0, ror #7
     42c:	30001488 	andcc	r1, r0, r8, lsl #9
     430:	00000094 	muleq	r0, r4, r0
     434:	11100e44 	tstne	r0, r4, asr #28
     438:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     43c:	03051102 	movweq	r1, #20738	; 0x5102
     440:	00040411 	andeq	r0, r4, r1, lsl r4
     444:	0000001c 	andeq	r0, r0, ip, lsl r0
     448:	000003e0 	andeq	r0, r0, r0, ror #7
     44c:	3000151c 	andcc	r1, r0, ip, lsl r5
     450:	000000b8 	strheq	r0, [r0], -r8
     454:	11100e44 	tstne	r0, r4, asr #28
     458:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     45c:	03051102 	movweq	r1, #20738	; 0x5102
     460:	00040411 	andeq	r0, r4, r1, lsl r4
     464:	00000028 	andeq	r0, r0, r8, lsr #32
     468:	000003e0 	andeq	r0, r0, r0, ror #7
     46c:	300015d4 	ldrdcc	r1, [r0], -r4
     470:	000001e4 	andeq	r0, r0, r4, ror #3
     474:	111c0e44 	tstne	ip, r4, asr #28
     478:	0a11010e 	beq	4408b8 <DISABLE_IRQ+0x440838>
     47c:	03081102 	movweq	r1, #33026	; 0x8102
     480:	11040711 	tstne	r4, r1, lsl r7
     484:	05110506 	ldreq	r0, [r1, #-1286]	; 0x506
     488:	07041106 	streq	r1, [r4, -r6, lsl #2]
     48c:	00280e48 	eoreq	r0, r8, r8, asr #28
     490:	00000024 	andeq	r0, r0, r4, lsr #32
     494:	000003e0 	andeq	r0, r0, r0, ror #7
     498:	300017b8 	undefined instruction 0x300017b8
     49c:	000001b8 	undefined instruction 0x000001b8
     4a0:	11140e44 	tstne	r4, r4, asr #28
     4a4:	0711010e 	ldreq	r0, [r1, -lr, lsl #2]
     4a8:	03061102 	movweq	r1, #24834	; 0x6102
     4ac:	11040511 	tstne	r4, r1, lsl r5
     4b0:	0e480504 	cdpeq	5, 4, cr0, cr8, cr4, {0}
     4b4:	00000028 	andeq	r0, r0, r8, lsr #32
     4b8:	0000000c 	andeq	r0, r0, ip
     4bc:	ffffffff 	undefined instruction 0xffffffff
     4c0:	7c010001 	stcvc	0, cr0, [r1], {1}
     4c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     4c8:	00000018 	andeq	r0, r0, r8, lsl r0
     4cc:	000004b8 	undefined instruction 0x000004b8
     4d0:	30001970 	andcc	r1, r0, r0, ror r9
     4d4:	000000c4 	andeq	r0, r0, r4, asr #1
     4d8:	11080e48 	tstne	r8, r8, asr #28
     4dc:	04110105 	ldreq	r0, [r1], #-261	; 0x105
     4e0:	00000002 	andeq	r0, r0, r2
     4e4:	0000001c 	andeq	r0, r0, ip, lsl r0
     4e8:	000004b8 	undefined instruction 0x000004b8
     4ec:	30001a34 	andcc	r1, r0, r4, lsr sl
     4f0:	000000a8 	andeq	r0, r0, r8, lsr #1
     4f4:	11100e44 	tstne	r0, r4, asr #28
     4f8:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     4fc:	03051102 	movweq	r1, #20738	; 0x5102
     500:	00040411 	andeq	r0, r4, r1, lsl r4
     504:	0000001c 	andeq	r0, r0, ip, lsl r0
     508:	000004b8 	undefined instruction 0x000004b8
     50c:	30001adc 	ldrdcc	r1, [r0], -ip
     510:	000000f8 	strdeq	r0, [r0], -r8
     514:	11100e44 	tstne	r0, r4, asr #28
     518:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     51c:	03051102 	movweq	r1, #20738	; 0x5102
     520:	00040411 	andeq	r0, r4, r1, lsl r4
     524:	0000000c 	andeq	r0, r0, ip
     528:	000004b8 	undefined instruction 0x000004b8
     52c:	30001bd4 	ldrdcc	r1, [r0], -r4
     530:	0000003c 	andeq	r0, r0, ip, lsr r0
     534:	00000018 	andeq	r0, r0, r8, lsl r0
     538:	000004b8 	undefined instruction 0x000004b8
     53c:	30001c10 	andcc	r1, r0, r0, lsl ip
     540:	00000064 	andeq	r0, r0, r4, rrx
     544:	11080e44 	tstne	r8, r4, asr #28
     548:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
     54c:	00000002 	andeq	r0, r0, r2
     550:	00000024 	andeq	r0, r0, r4, lsr #32
     554:	000004b8 	undefined instruction 0x000004b8
     558:	30001c74 	andcc	r1, r0, r4, ror ip
     55c:	00000088 	andeq	r0, r0, r8, lsl #1
     560:	11180e44 	tstne	r8, r4, asr #28
     564:	0811010e 	ldmdaeq	r1, {r1, r2, r3, r8}
     568:	03071102 	movweq	r1, #28930	; 0x7102
     56c:	11040611 	tstne	r4, r1, lsl r6
     570:	04110505 	ldreq	r0, [r1], #-1285	; 0x505
     574:	00000006 	andeq	r0, r0, r6
     578:	00000024 	andeq	r0, r0, r4, lsr #32
     57c:	000004b8 	undefined instruction 0x000004b8
     580:	30001cfc 	strdcc	r1, [r0], -ip
     584:	00000208 	andeq	r0, r0, r8, lsl #4
     588:	11180e44 	tstne	r8, r4, asr #28
     58c:	0811010e 	ldmdaeq	r1, {r1, r2, r3, r8}
     590:	03071102 	movweq	r1, #28930	; 0x7102
     594:	11040611 	tstne	r4, r1, lsl r6
     598:	04110505 	ldreq	r0, [r1], #-1285	; 0x505
     59c:	00000006 	andeq	r0, r0, r6
     5a0:	00000028 	andeq	r0, r0, r8, lsr #32
     5a4:	000004b8 	undefined instruction 0x000004b8
     5a8:	30001f04 	andcc	r1, r0, r4, lsl #30
     5ac:	000002d8 	ldrdeq	r0, [r0], -r8
     5b0:	11200e44 	teqne	r0, r4, asr #28
     5b4:	0a11010e 	beq	4409f4 <DISABLE_IRQ+0x440974>
     5b8:	03091102 	movweq	r1, #37122	; 0x9102
     5bc:	11040811 	tstne	r4, r1, lsl r8
     5c0:	06110507 	ldreq	r0, [r1], -r7, lsl #10
     5c4:	07051106 	streq	r1, [r5, -r6, lsl #2]
     5c8:	00080411 	andeq	r0, r8, r1, lsl r4
     5cc:	00000020 	andeq	r0, r0, r0, lsr #32
     5d0:	000004b8 	undefined instruction 0x000004b8
     5d4:	300021dc 	ldrdcc	r2, [r0], -ip
     5d8:	000000a0 	andeq	r0, r0, r0, lsr #1
     5dc:	11100e44 	tstne	r0, r4, asr #28
     5e0:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     5e4:	03051102 	movweq	r1, #20738	; 0x5102
     5e8:	48040411 	stmdami	r4, {r0, r4, sl}
     5ec:	0000180e 	andeq	r1, r0, lr, lsl #16
     5f0:	0000000c 	andeq	r0, r0, ip
     5f4:	ffffffff 	undefined instruction 0xffffffff
     5f8:	7c010001 	stcvc	0, cr0, [r1], {1}
     5fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     600:	0000000c 	andeq	r0, r0, ip
     604:	000005f0 	strdeq	r0, [r0], -r0
     608:	3000227c 	andcc	r2, r0, ip, ror r2
     60c:	00000038 	andeq	r0, r0, r8, lsr r0
     610:	00000018 	andeq	r0, r0, r8, lsl r0
     614:	000005f0 	strdeq	r0, [r0], -r0
     618:	300022b4 	undefined instruction 0x300022b4
     61c:	00000058 	andeq	r0, r0, r8, asr r0
     620:	11080e44 	tstne	r8, r4, asr #28
     624:	04110105 	ldreq	r0, [r1], #-261	; 0x105
     628:	00000002 	andeq	r0, r0, r2
     62c:	00000018 	andeq	r0, r0, r8, lsl r0
     630:	000005f0 	strdeq	r0, [r0], -r0
     634:	3000230c 	andcc	r2, r0, ip, lsl #6
     638:	0000005c 	andeq	r0, r0, ip, asr r0
     63c:	11080e44 	tstne	r8, r4, asr #28
     640:	04110105 	ldreq	r0, [r1], #-261	; 0x105
     644:	00000002 	andeq	r0, r0, r2
     648:	00000018 	andeq	r0, r0, r8, lsl r0
     64c:	000005f0 	strdeq	r0, [r0], -r0
     650:	30002368 	andcc	r2, r0, r8, ror #6
     654:	000000c0 	andeq	r0, r0, r0, asr #1
     658:	11080e44 	tstne	r8, r4, asr #28
     65c:	04110105 	ldreq	r0, [r1], #-261	; 0x105
     660:	00000002 	andeq	r0, r0, r2
     664:	00000014 	andeq	r0, r0, r4, lsl r0
     668:	000005f0 	strdeq	r0, [r0], -r0
     66c:	30002428 	andcc	r2, r0, r8, lsr #8
     670:	00000044 	andeq	r0, r0, r4, asr #32
     674:	11040e4c 	tstne	r4, ip, asr #28
     678:	00000104 	andeq	r0, r0, r4, lsl #2
     67c:	0000000c 	andeq	r0, r0, ip
     680:	000005f0 	strdeq	r0, [r0], -r0
     684:	3000246c 	andcc	r2, r0, ip, ror #8
     688:	00000040 	andeq	r0, r0, r0, asr #32
     68c:	0000000c 	andeq	r0, r0, ip
     690:	000005f0 	strdeq	r0, [r0], -r0
     694:	300024ac 	andcc	r2, r0, ip, lsr #9
     698:	00000078 	andeq	r0, r0, r8, ror r0
     69c:	00000018 	andeq	r0, r0, r8, lsl r0
     6a0:	000005f0 	strdeq	r0, [r0], -r0
     6a4:	30002524 	andcc	r2, r0, r4, lsr #10
     6a8:	00000094 	muleq	r0, r4, r0
     6ac:	11080e44 	tstne	r8, r4, asr #28
     6b0:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
     6b4:	00000002 	andeq	r0, r0, r2
     6b8:	00000018 	andeq	r0, r0, r8, lsl r0
     6bc:	000005f0 	strdeq	r0, [r0], -r0
     6c0:	300025b8 	undefined instruction 0x300025b8
     6c4:	00000090 	muleq	r0, r0, r0
     6c8:	11080e44 	tstne	r8, r4, asr #28
     6cc:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
     6d0:	00000002 	andeq	r0, r0, r2
     6d4:	0000000c 	andeq	r0, r0, ip
     6d8:	000005f0 	strdeq	r0, [r0], -r0
     6dc:	30002648 	andcc	r2, r0, r8, asr #12
     6e0:	0000000c 	andeq	r0, r0, ip
     6e4:	0000000c 	andeq	r0, r0, ip
     6e8:	000005f0 	strdeq	r0, [r0], -r0
     6ec:	30002654 	andcc	r2, r0, r4, asr r6
     6f0:	00000008 	andeq	r0, r0, r8
     6f4:	0000000c 	andeq	r0, r0, ip
     6f8:	000005f0 	strdeq	r0, [r0], -r0
     6fc:	3000265c 	andcc	r2, r0, ip, asr r6
     700:	00000004 	andeq	r0, r0, r4
     704:	0000001c 	andeq	r0, r0, ip, lsl r0
     708:	000005f0 	strdeq	r0, [r0], -r0
     70c:	30002660 	andcc	r2, r0, r0, ror #12
     710:	00000080 	andeq	r0, r0, r0, lsl #1
     714:	11100e44 	tstne	r0, r4, asr #28
     718:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     71c:	03051102 	movweq	r1, #20738	; 0x5102
     720:	00040411 	andeq	r0, r4, r1, lsl r4
     724:	0000001c 	andeq	r0, r0, ip, lsl r0
     728:	000005f0 	strdeq	r0, [r0], -r0
     72c:	300026e0 	andcc	r2, r0, r0, ror #13
     730:	000000c8 	andeq	r0, r0, r8, asr #1
     734:	11100e48 	tstne	r0, r8, asr #28
     738:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     73c:	03051102 	movweq	r1, #20738	; 0x5102
     740:	00040411 	andeq	r0, r4, r1, lsl r4
     744:	0000000c 	andeq	r0, r0, ip
     748:	ffffffff 	undefined instruction 0xffffffff
     74c:	7c010001 	stcvc	0, cr0, [r1], {1}
     750:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     754:	0000001c 	andeq	r0, r0, ip, lsl r0
     758:	00000744 	andeq	r0, r0, r4, asr #14
     75c:	300027a8 	andcc	r2, r0, r8, lsr #15
     760:	00000068 	andeq	r0, r0, r8, rrx
     764:	11100e44 	tstne	r0, r4, asr #28
     768:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     76c:	03051102 	movweq	r1, #20738	; 0x5102
     770:	00040411 	andeq	r0, r4, r1, lsl r4
     774:	0000001c 	andeq	r0, r0, ip, lsl r0
     778:	00000744 	andeq	r0, r0, r4, asr #14
     77c:	30002810 	andcc	r2, r0, r0, lsl r8
     780:	000000d0 	ldrdeq	r0, [r0], -r0
     784:	11100e44 	tstne	r0, r4, asr #28
     788:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     78c:	03051102 	movweq	r1, #20738	; 0x5102
     790:	00040411 	andeq	r0, r4, r1, lsl r4
     794:	0000001c 	andeq	r0, r0, ip, lsl r0
     798:	00000744 	andeq	r0, r0, r4, asr #14
     79c:	300028e0 	andcc	r2, r0, r0, ror #17
     7a0:	000000e8 	andeq	r0, r0, r8, ror #1
     7a4:	11100e44 	tstne	r0, r4, asr #28
     7a8:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     7ac:	03051102 	movweq	r1, #20738	; 0x5102
     7b0:	00040411 	andeq	r0, r4, r1, lsl r4
     7b4:	00000030 	andeq	r0, r0, r0, lsr r0
     7b8:	00000744 	andeq	r0, r0, r4, asr #14
     7bc:	300029c8 	andcc	r2, r0, r8, asr #19
     7c0:	0000025c 	andeq	r0, r0, ip, asr r2
     7c4:	11240e44 	teqne	r4, r4, asr #28
     7c8:	0b11010e 	bleq	440c08 <DISABLE_IRQ+0x440b88>
     7cc:	030a1102 	movweq	r1, #41218	; 0xa102
     7d0:	11040911 	tstne	r4, r1, lsl r9
     7d4:	07110508 	ldreq	r0, [r1, -r8, lsl #10]
     7d8:	07061106 	streq	r1, [r6, -r6, lsl #2]
     7dc:	11080511 	tstne	r8, r1, lsl r5
     7e0:	0e4c0904 	cdpeq	9, 4, cr0, cr12, cr4, {0}
     7e4:	00000030 	andeq	r0, r0, r0, lsr r0
     7e8:	00000030 	andeq	r0, r0, r0, lsr r0
     7ec:	00000744 	andeq	r0, r0, r4, asr #14
     7f0:	30002c24 	andcc	r2, r0, r4, lsr #24
     7f4:	00000248 	andeq	r0, r0, r8, asr #4
     7f8:	11240e44 	teqne	r4, r4, asr #28
     7fc:	0b11010e 	bleq	440c3c <DISABLE_IRQ+0x440bbc>
     800:	030a1102 	movweq	r1, #41218	; 0xa102
     804:	11040911 	tstne	r4, r1, lsl r9
     808:	07110508 	ldreq	r0, [r1, -r8, lsl #10]
     80c:	07061106 	streq	r1, [r6, -r6, lsl #2]
     810:	11080511 	tstne	r8, r1, lsl r5
     814:	0e480904 	cdpeq	9, 4, cr0, cr8, cr4, {0}
     818:	00000038 	andeq	r0, r0, r8, lsr r0
     81c:	00000018 	andeq	r0, r0, r8, lsl r0
     820:	00000744 	andeq	r0, r0, r4, asr #14
     824:	30002e6c 	andcc	r2, r0, ip, ror #28
     828:	000000a0 	andeq	r0, r0, r0, lsr #1
     82c:	48040e44 	stmdami	r4, {r2, r6, r9, sl, fp}
     830:	0e11100e 	cdpeq	0, 1, cr1, cr1, cr14, {0}
     834:	00000001 	andeq	r0, r0, r1
     838:	00000018 	andeq	r0, r0, r8, lsl r0
     83c:	00000744 	andeq	r0, r0, r4, asr #14
     840:	30002f0c 	andcc	r2, r0, ip, lsl #30
     844:	00000094 	muleq	r0, r4, r0
     848:	11080e48 	tstne	r8, r8, asr #28
     84c:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
     850:	00000002 	andeq	r0, r0, r2
     854:	0000000c 	andeq	r0, r0, ip
     858:	ffffffff 	undefined instruction 0xffffffff
     85c:	7c010001 	stcvc	0, cr0, [r1], {1}
     860:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     864:	00000024 	andeq	r0, r0, r4, lsr #32
     868:	00000854 	andeq	r0, r0, r4, asr r8
     86c:	30002fa0 	andcc	r2, r0, r0, lsr #31
     870:	0000008c 	andeq	r0, r0, ip, lsl #1
     874:	11180e44 	tstne	r8, r4, asr #28
     878:	0811010e 	ldmdaeq	r1, {r1, r2, r3, r8}
     87c:	03071102 	movweq	r1, #28930	; 0x7102
     880:	11040611 	tstne	r4, r1, lsl r6
     884:	04110505 	ldreq	r0, [r1], #-1285	; 0x505
     888:	00000006 	andeq	r0, r0, r6
     88c:	00000024 	andeq	r0, r0, r4, lsr #32
     890:	00000854 	andeq	r0, r0, r4, asr r8
     894:	3000302c 	andcc	r3, r0, ip, lsr #32
     898:	000000c8 	andeq	r0, r0, r8, asr #1
     89c:	11180e44 	tstne	r8, r4, asr #28
     8a0:	0811010e 	ldmdaeq	r1, {r1, r2, r3, r8}
     8a4:	03071102 	movweq	r1, #28930	; 0x7102
     8a8:	11040611 	tstne	r4, r1, lsl r6
     8ac:	04110505 	ldreq	r0, [r1], #-1285	; 0x505
     8b0:	00000006 	andeq	r0, r0, r6
     8b4:	0000001c 	andeq	r0, r0, ip, lsl r0
     8b8:	00000854 	andeq	r0, r0, r4, asr r8
     8bc:	300030f4 	strdcc	r3, [r0], -r4
     8c0:	000000fc 	strdeq	r0, [r0], -ip
     8c4:	11100e44 	tstne	r0, r4, asr #28
     8c8:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     8cc:	03051102 	movweq	r1, #20738	; 0x5102
     8d0:	00040411 	andeq	r0, r4, r1, lsl r4
     8d4:	0000001c 	andeq	r0, r0, ip, lsl r0
     8d8:	00000854 	andeq	r0, r0, r4, asr r8
     8dc:	300031f0 	strdcc	r3, [r0], -r0
     8e0:	000000e0 	andeq	r0, r0, r0, ror #1
     8e4:	11100e44 	tstne	r0, r4, asr #28
     8e8:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     8ec:	03051102 	movweq	r1, #20738	; 0x5102
     8f0:	00040411 	andeq	r0, r4, r1, lsl r4
     8f4:	00000024 	andeq	r0, r0, r4, lsr #32
     8f8:	00000854 	andeq	r0, r0, r4, asr r8
     8fc:	300032d0 	ldrdcc	r3, [r0], -r0
     900:	00000210 	andeq	r0, r0, r0, lsl r2
     904:	11180e44 	tstne	r8, r4, asr #28
     908:	0811010e 	ldmdaeq	r1, {r1, r2, r3, r8}
     90c:	03071102 	movweq	r1, #28930	; 0x7102
     910:	11040611 	tstne	r4, r1, lsl r6
     914:	04110505 	ldreq	r0, [r1], #-1285	; 0x505
     918:	00000006 	andeq	r0, r0, r6
     91c:	00000024 	andeq	r0, r0, r4, lsr #32
     920:	00000854 	andeq	r0, r0, r4, asr r8
     924:	300034e0 	andcc	r3, r0, r0, ror #9
     928:	00000238 	andeq	r0, r0, r8, lsr r2
     92c:	11180e44 	tstne	r8, r4, asr #28
     930:	0811010e 	ldmdaeq	r1, {r1, r2, r3, r8}
     934:	03071102 	movweq	r1, #28930	; 0x7102
     938:	11040611 	tstne	r4, r1, lsl r6
     93c:	04110505 	ldreq	r0, [r1], #-1285	; 0x505
     940:	00000006 	andeq	r0, r0, r6
     944:	0000001c 	andeq	r0, r0, ip, lsl r0
     948:	00000854 	andeq	r0, r0, r4, asr r8
     94c:	30003718 	andcc	r3, r0, r8, lsl r7
     950:	00000078 	andeq	r0, r0, r8, ror r0
     954:	110c0e44 	tstne	ip, r4, asr #28
     958:	0511010e 	ldreq	r0, [r1, #-270]	; 0x10e
     95c:	03041102 	movweq	r1, #16642	; 0x4102
     960:	00180e48 	andseq	r0, r8, r8, asr #28
     964:	00000018 	andeq	r0, r0, r8, lsl r0
     968:	00000854 	andeq	r0, r0, r4, asr r8
     96c:	30003790 	mulcc	r0, r0, r7
     970:	0000008c 	andeq	r0, r0, ip, lsl #1
     974:	48040e44 	stmdami	r4, {r2, r6, r9, sl, fp}
     978:	0e11100e 	cdpeq	0, 1, cr1, cr1, cr14, {0}
     97c:	00000001 	andeq	r0, r0, r1
     980:	00000018 	andeq	r0, r0, r8, lsl r0
     984:	00000854 	andeq	r0, r0, r4, asr r8
     988:	3000381c 	andcc	r3, r0, ip, lsl r8
     98c:	00000090 	muleq	r0, r0, r0
     990:	48040e44 	stmdami	r4, {r2, r6, r9, sl, fp}
     994:	0e11100e 	cdpeq	0, 1, cr1, cr1, cr14, {0}
     998:	00000001 	andeq	r0, r0, r1
     99c:	00000018 	andeq	r0, r0, r8, lsl r0
     9a0:	00000854 	andeq	r0, r0, r4, asr r8
     9a4:	300038ac 	andcc	r3, r0, ip, lsr #17
     9a8:	00000088 	andeq	r0, r0, r8, lsl #1
     9ac:	11080e48 	tstne	r8, r8, asr #28
     9b0:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
     9b4:	00000002 	andeq	r0, r0, r2
     9b8:	0000000c 	andeq	r0, r0, ip
     9bc:	ffffffff 	undefined instruction 0xffffffff
     9c0:	7c010001 	stcvc	0, cr0, [r1], {1}
     9c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     9c8:	00000024 	andeq	r0, r0, r4, lsr #32
     9cc:	000009b8 	undefined instruction 0x000009b8
     9d0:	30003934 	andcc	r3, r0, r4, lsr r9
     9d4:	00000080 	andeq	r0, r0, r0, lsl #1
     9d8:	11180e44 	tstne	r8, r4, asr #28
     9dc:	0811010e 	ldmdaeq	r1, {r1, r2, r3, r8}
     9e0:	03071102 	movweq	r1, #28930	; 0x7102
     9e4:	11040611 	tstne	r4, r1, lsl r6
     9e8:	04110505 	ldreq	r0, [r1], #-1285	; 0x505
     9ec:	00000006 	andeq	r0, r0, r6
     9f0:	0000001c 	andeq	r0, r0, ip, lsl r0
     9f4:	000009b8 	undefined instruction 0x000009b8
     9f8:	300039b4 	undefined instruction 0x300039b4
     9fc:	000000fc 	strdeq	r0, [r0], -ip
     a00:	11100e44 	tstne	r0, r4, asr #28
     a04:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     a08:	03051102 	movweq	r1, #20738	; 0x5102
     a0c:	00040411 	andeq	r0, r4, r1, lsl r4
     a10:	0000001c 	andeq	r0, r0, ip, lsl r0
     a14:	000009b8 	undefined instruction 0x000009b8
     a18:	30003ab0 	undefined instruction 0x30003ab0
     a1c:	00000100 	andeq	r0, r0, r0, lsl #2
     a20:	11100e44 	tstne	r0, r4, asr #28
     a24:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     a28:	03051102 	movweq	r1, #20738	; 0x5102
     a2c:	00040411 	andeq	r0, r4, r1, lsl r4
     a30:	00000028 	andeq	r0, r0, r8, lsr #32
     a34:	000009b8 	undefined instruction 0x000009b8
     a38:	30003bb0 	undefined instruction 0x30003bb0
     a3c:	00000270 	andeq	r0, r0, r0, ror r2
     a40:	111c0e44 	tstne	ip, r4, asr #28
     a44:	0a11010e 	beq	440e84 <DISABLE_IRQ+0x440e04>
     a48:	03081102 	movweq	r1, #33026	; 0x8102
     a4c:	11040711 	tstne	r4, r1, lsl r7
     a50:	05110506 	ldreq	r0, [r1, #-1286]	; 0x506
     a54:	07041106 	streq	r1, [r4, -r6, lsl #2]
     a58:	00280e4c 	eoreq	r0, r8, ip, asr #28
     a5c:	00000028 	andeq	r0, r0, r8, lsr #32
     a60:	000009b8 	undefined instruction 0x000009b8
     a64:	30003e20 	andcc	r3, r0, r0, lsr #28
     a68:	00000248 	andeq	r0, r0, r8, asr #4
     a6c:	111c0e44 	tstne	ip, r4, asr #28
     a70:	0a11010e 	beq	440eb0 <DISABLE_IRQ+0x440e30>
     a74:	03081102 	movweq	r1, #33026	; 0x8102
     a78:	11040711 	tstne	r4, r1, lsl r7
     a7c:	05110506 	ldreq	r0, [r1, #-1286]	; 0x506
     a80:	07041106 	streq	r1, [r4, -r6, lsl #2]
     a84:	00280e48 	eoreq	r0, r8, r8, asr #28
     a88:	00000020 	andeq	r0, r0, r0, lsr #32
     a8c:	000009b8 	undefined instruction 0x000009b8
     a90:	30004068 	andcc	r4, r0, r8, rrx
     a94:	0000007c 	andeq	r0, r0, ip, ror r0
     a98:	11100e44 	tstne	r0, r4, asr #28
     a9c:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     aa0:	03051102 	movweq	r1, #20738	; 0x5102
     aa4:	48040411 	stmdami	r4, {r0, r4, sl}
     aa8:	0000180e 	andeq	r1, r0, lr, lsl #16
     aac:	00000018 	andeq	r0, r0, r8, lsl r0
     ab0:	000009b8 	undefined instruction 0x000009b8
     ab4:	300040e4 	andcc	r4, r0, r4, ror #1
     ab8:	00000094 	muleq	r0, r4, r0
     abc:	48040e44 	stmdami	r4, {r2, r6, r9, sl, fp}
     ac0:	0e11100e 	cdpeq	0, 1, cr1, cr1, cr14, {0}
     ac4:	00000001 	andeq	r0, r0, r1
     ac8:	00000018 	andeq	r0, r0, r8, lsl r0
     acc:	000009b8 	undefined instruction 0x000009b8
     ad0:	30004178 	andcc	r4, r0, r8, ror r1
     ad4:	00000094 	muleq	r0, r4, r0
     ad8:	48040e44 	stmdami	r4, {r2, r6, r9, sl, fp}
     adc:	0e11100e 	cdpeq	0, 1, cr1, cr1, cr14, {0}
     ae0:	00000001 	andeq	r0, r0, r1
     ae4:	00000018 	andeq	r0, r0, r8, lsl r0
     ae8:	000009b8 	undefined instruction 0x000009b8
     aec:	3000420c 	andcc	r4, r0, ip, lsl #4
     af0:	000000b8 	strheq	r0, [r0], -r8
     af4:	11080e48 	tstne	r8, r8, asr #28
     af8:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
     afc:	00000002 	andeq	r0, r0, r2
     b00:	0000000c 	andeq	r0, r0, ip
     b04:	ffffffff 	undefined instruction 0xffffffff
     b08:	7c010001 	stcvc	0, cr0, [r1], {1}
     b0c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b10:	0000001c 	andeq	r0, r0, ip, lsl r0
     b14:	00000b00 	andeq	r0, r0, r0, lsl #22
     b18:	300042c4 	andcc	r4, r0, r4, asr #5
     b1c:	000000cc 	andeq	r0, r0, ip, asr #1
     b20:	11100e44 	tstne	r0, r4, asr #28
     b24:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     b28:	03051102 	movweq	r1, #20738	; 0x5102
     b2c:	00040411 	andeq	r0, r4, r1, lsl r4
     b30:	00000018 	andeq	r0, r0, r8, lsl r0
     b34:	00000b00 	andeq	r0, r0, r0, lsl #22
     b38:	30004390 	mulcc	r0, r0, r3
     b3c:	0000005c 	andeq	r0, r0, ip, asr r0
     b40:	11080e44 	tstne	r8, r4, asr #28
     b44:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
     b48:	00000002 	andeq	r0, r0, r2
     b4c:	00000018 	andeq	r0, r0, r8, lsl r0
     b50:	00000b00 	andeq	r0, r0, r0, lsl #22
     b54:	300043ec 	andcc	r4, r0, ip, ror #7
     b58:	000000a8 	andeq	r0, r0, r8, lsr #1
     b5c:	44080e44 	strmi	r0, [r8], #-3652	; 0xe44
     b60:	0e11200e 	cdpeq	0, 1, cr2, cr1, cr14, {0}
     b64:	02041101 	andeq	r1, r4, #1073741824	; 0x40000000
     b68:	00000018 	andeq	r0, r0, r8, lsl r0
     b6c:	00000b00 	andeq	r0, r0, r0, lsl #22
     b70:	30004494 	mulcc	r0, r4, r4
     b74:	0000007c 	andeq	r0, r0, ip, ror r0
     b78:	11080e44 	tstne	r8, r4, asr #28
     b7c:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
     b80:	00000002 	andeq	r0, r0, r2
     b84:	0000000c 	andeq	r0, r0, ip
     b88:	ffffffff 	undefined instruction 0xffffffff
     b8c:	7c010001 	stcvc	0, cr0, [r1], {1}
     b90:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b94:	0000001c 	andeq	r0, r0, ip, lsl r0
     b98:	00000b84 	andeq	r0, r0, r4, lsl #23
     b9c:	30004510 	andcc	r4, r0, r0, lsl r5
     ba0:	00000118 	andeq	r0, r0, r8, lsl r1
     ba4:	11100e44 	tstne	r0, r4, asr #28
     ba8:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     bac:	03051102 	movweq	r1, #20738	; 0x5102
     bb0:	00040411 	andeq	r0, r4, r1, lsl r4
     bb4:	00000024 	andeq	r0, r0, r4, lsr #32
     bb8:	00000b84 	andeq	r0, r0, r4, lsl #23
     bbc:	30004628 	andcc	r4, r0, r8, lsr #12
     bc0:	000000c8 	andeq	r0, r0, r8, asr #1
     bc4:	11180e44 	tstne	r8, r4, asr #28
     bc8:	0811010e 	ldmdaeq	r1, {r1, r2, r3, r8}
     bcc:	03071102 	movweq	r1, #28930	; 0x7102
     bd0:	11040611 	tstne	r4, r1, lsl r6
     bd4:	04110505 	ldreq	r0, [r1], #-1285	; 0x505
     bd8:	00000006 	andeq	r0, r0, r6
     bdc:	0000001c 	andeq	r0, r0, ip, lsl r0
     be0:	00000b84 	andeq	r0, r0, r4, lsl #23
     be4:	300046f0 	strdcc	r4, [r0], -r0
     be8:	000000fc 	strdeq	r0, [r0], -ip
     bec:	11100e44 	tstne	r0, r4, asr #28
     bf0:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     bf4:	03051102 	movweq	r1, #20738	; 0x5102
     bf8:	00040411 	andeq	r0, r4, r1, lsl r4
     bfc:	00000024 	andeq	r0, r0, r4, lsr #32
     c00:	00000b84 	andeq	r0, r0, r4, lsl #23
     c04:	300047ec 	andcc	r4, r0, ip, ror #15
     c08:	000001ac 	andeq	r0, r0, ip, lsr #3
     c0c:	11180e44 	tstne	r8, r4, asr #28
     c10:	0811010e 	ldmdaeq	r1, {r1, r2, r3, r8}
     c14:	03071102 	movweq	r1, #28930	; 0x7102
     c18:	11040611 	tstne	r4, r1, lsl r6
     c1c:	04110505 	ldreq	r0, [r1], #-1285	; 0x505
     c20:	00000006 	andeq	r0, r0, r6
     c24:	00000024 	andeq	r0, r0, r4, lsr #32
     c28:	00000b84 	andeq	r0, r0, r4, lsl #23
     c2c:	30004998 	mulcc	r0, r8, r9
     c30:	000001b4 	undefined instruction 0x000001b4
     c34:	11180e44 	tstne	r8, r4, asr #28
     c38:	0811010e 	ldmdaeq	r1, {r1, r2, r3, r8}
     c3c:	03071102 	movweq	r1, #28930	; 0x7102
     c40:	11040611 	tstne	r4, r1, lsl r6
     c44:	04110505 	ldreq	r0, [r1], #-1285	; 0x505
     c48:	00000006 	andeq	r0, r0, r6
     c4c:	00000018 	andeq	r0, r0, r8, lsl r0
     c50:	00000b84 	andeq	r0, r0, r4, lsl #23
     c54:	30004b4c 	andcc	r4, r0, ip, asr #22
     c58:	00000060 	andeq	r0, r0, r0, rrx
     c5c:	48040e44 	stmdami	r4, {r2, r6, r9, sl, fp}
     c60:	0e11100e 	cdpeq	0, 1, cr1, cr1, cr14, {0}
     c64:	00000001 	andeq	r0, r0, r1
     c68:	00000018 	andeq	r0, r0, r8, lsl r0
     c6c:	00000b84 	andeq	r0, r0, r4, lsl #23
     c70:	30004bac 	andcc	r4, r0, ip, lsr #23
     c74:	00000078 	andeq	r0, r0, r8, ror r0
     c78:	48040e44 	stmdami	r4, {r2, r6, r9, sl, fp}
     c7c:	0e11100e 	cdpeq	0, 1, cr1, cr1, cr14, {0}
     c80:	00000001 	andeq	r0, r0, r1
     c84:	00000018 	andeq	r0, r0, r8, lsl r0
     c88:	00000b84 	andeq	r0, r0, r4, lsl #23
     c8c:	30004c24 	andcc	r4, r0, r4, lsr #24
     c90:	00000060 	andeq	r0, r0, r0, rrx
     c94:	11080e48 	tstne	r8, r8, asr #28
     c98:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
     c9c:	00000002 	andeq	r0, r0, r2
     ca0:	0000000c 	andeq	r0, r0, ip
     ca4:	ffffffff 	undefined instruction 0xffffffff
     ca8:	7c010001 	stcvc	0, cr0, [r1], {1}
     cac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     cb0:	0000000c 	andeq	r0, r0, ip
     cb4:	00000ca0 	andeq	r0, r0, r0, lsr #25
     cb8:	30004c84 	andcc	r4, r0, r4, lsl #25
     cbc:	00000010 	andeq	r0, r0, r0, lsl r0
     cc0:	0000000c 	andeq	r0, r0, ip
     cc4:	00000ca0 	andeq	r0, r0, r0, lsr #25
     cc8:	30004c94 	mulcc	r0, r4, ip
     ccc:	00000058 	andeq	r0, r0, r8, asr r0
     cd0:	0000000c 	andeq	r0, r0, ip
     cd4:	00000ca0 	andeq	r0, r0, r0, lsr #25
     cd8:	30004cec 	andcc	r4, r0, ip, ror #25
     cdc:	00000020 	andeq	r0, r0, r0, lsr #32
     ce0:	0000000c 	andeq	r0, r0, ip
     ce4:	00000ca0 	andeq	r0, r0, r0, lsr #25
     ce8:	30004d0c 	andcc	r4, r0, ip, lsl #26
     cec:	00000024 	andeq	r0, r0, r4, lsr #32
     cf0:	00000014 	andeq	r0, r0, r4, lsl r0
     cf4:	00000ca0 	andeq	r0, r0, r0, lsr #25
     cf8:	30004d30 	andcc	r4, r0, r0, lsr sp
     cfc:	000000c0 	andeq	r0, r0, r0, asr #1
     d00:	11040e4c 	tstne	r4, ip, asr #28
     d04:	00000104 	andeq	r0, r0, r4, lsl #2
     d08:	00000018 	andeq	r0, r0, r8, lsl r0
     d0c:	00000ca0 	andeq	r0, r0, r0, lsr #25
     d10:	30004df0 	strdcc	r4, [r0], -r0
     d14:	0000003c 	andeq	r0, r0, ip, lsr r0
     d18:	11080e44 	tstne	r8, r4, asr #28
     d1c:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
     d20:	00000002 	andeq	r0, r0, r2
     d24:	0000001c 	andeq	r0, r0, ip, lsl r0
     d28:	00000ca0 	andeq	r0, r0, r0, lsr #25
     d2c:	30004e2c 	andcc	r4, r0, ip, lsr #28
     d30:	00000084 	andeq	r0, r0, r4, lsl #1
     d34:	11100e44 	tstne	r0, r4, asr #28
     d38:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     d3c:	03051102 	movweq	r1, #20738	; 0x5102
     d40:	00040411 	andeq	r0, r4, r1, lsl r4
     d44:	00000018 	andeq	r0, r0, r8, lsl r0
     d48:	00000ca0 	andeq	r0, r0, r0, lsr #25
     d4c:	30004eb0 	undefined instruction 0x30004eb0
     d50:	00000034 	andeq	r0, r0, r4, lsr r0
     d54:	11080e44 	tstne	r8, r4, asr #28
     d58:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
     d5c:	00000002 	andeq	r0, r0, r2
     d60:	00000018 	andeq	r0, r0, r8, lsl r0
     d64:	00000ca0 	andeq	r0, r0, r0, lsr #25
     d68:	30004ee4 	andcc	r4, r0, r4, ror #29
     d6c:	00000098 	muleq	r0, r8, r0
     d70:	11080e44 	tstne	r8, r4, asr #28
     d74:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
     d78:	00000002 	andeq	r0, r0, r2
     d7c:	0000000c 	andeq	r0, r0, ip
     d80:	ffffffff 	undefined instruction 0xffffffff
     d84:	7c010001 	stcvc	0, cr0, [r1], {1}
     d88:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d8c:	0000000c 	andeq	r0, r0, ip
     d90:	00000d7c 	andeq	r0, r0, ip, ror sp
     d94:	30004f7c 	andcc	r4, r0, ip, ror pc
     d98:	00000048 	andeq	r0, r0, r8, asr #32
     d9c:	0000000c 	andeq	r0, r0, ip
     da0:	00000d7c 	andeq	r0, r0, ip, ror sp
     da4:	30004fc4 	andcc	r4, r0, r4, asr #31
     da8:	0000000c 	andeq	r0, r0, ip
     dac:	0000000c 	andeq	r0, r0, ip
     db0:	00000d7c 	andeq	r0, r0, ip, ror sp
     db4:	30004fd0 	ldrdcc	r4, [r0], -r0
     db8:	00000010 	andeq	r0, r0, r0, lsl r0
     dbc:	0000000c 	andeq	r0, r0, ip
     dc0:	00000d7c 	andeq	r0, r0, ip, ror sp
     dc4:	30004fe0 	andcc	r4, r0, r0, ror #31
     dc8:	0000000c 	andeq	r0, r0, ip
     dcc:	0000001c 	andeq	r0, r0, ip, lsl r0
     dd0:	00000d7c 	andeq	r0, r0, ip, ror sp
     dd4:	30004fec 	andcc	r4, r0, ip, ror #31
     dd8:	00000028 	andeq	r0, r0, r8, lsr #32
     ddc:	11100e44 	tstne	r0, r4, asr #28
     de0:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     de4:	03051102 	movweq	r1, #20738	; 0x5102
     de8:	00040411 	andeq	r0, r4, r1, lsl r4
     dec:	0000001c 	andeq	r0, r0, ip, lsl r0
     df0:	00000d7c 	andeq	r0, r0, ip, ror sp
     df4:	30005014 	andcc	r5, r0, r4, lsl r0
     df8:	00000058 	andeq	r0, r0, r8, asr r0
     dfc:	11100e44 	tstne	r0, r4, asr #28
     e00:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     e04:	03051102 	movweq	r1, #20738	; 0x5102
     e08:	00040411 	andeq	r0, r4, r1, lsl r4
     e0c:	00000024 	andeq	r0, r0, r4, lsr #32
     e10:	00000d7c 	andeq	r0, r0, ip, ror sp
     e14:	3000506c 	andcc	r5, r0, ip, rrx
     e18:	00000098 	muleq	r0, r8, r0
     e1c:	11180e44 	tstne	r8, r4, asr #28
     e20:	0811010e 	ldmdaeq	r1, {r1, r2, r3, r8}
     e24:	03071102 	movweq	r1, #28930	; 0x7102
     e28:	11040611 	tstne	r4, r1, lsl r6
     e2c:	04110505 	ldreq	r0, [r1], #-1285	; 0x505
     e30:	00000006 	andeq	r0, r0, r6
     e34:	00000020 	andeq	r0, r0, r0, lsr #32
     e38:	00000d7c 	andeq	r0, r0, ip, ror sp
     e3c:	30005104 	andcc	r5, r0, r4, lsl #2
     e40:	000000a4 	andeq	r0, r0, r4, lsr #1
     e44:	11100e44 	tstne	r0, r4, asr #28
     e48:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     e4c:	03051102 	movweq	r1, #20738	; 0x5102
     e50:	48040411 	stmdami	r4, {r0, r4, sl}
     e54:	0000180e 	andeq	r1, r0, lr, lsl #16
     e58:	0000001c 	andeq	r0, r0, ip, lsl r0
     e5c:	00000d7c 	andeq	r0, r0, ip, ror sp
     e60:	300051a8 	andcc	r5, r0, r8, lsr #3
     e64:	00000098 	muleq	r0, r8, r0
     e68:	11100e44 	tstne	r0, r4, asr #28
     e6c:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     e70:	03051102 	movweq	r1, #20738	; 0x5102
     e74:	00040411 	andeq	r0, r4, r1, lsl r4
     e78:	00000024 	andeq	r0, r0, r4, lsr #32
     e7c:	00000d7c 	andeq	r0, r0, ip, ror sp
     e80:	30005240 	andcc	r5, r0, r0, asr #4
     e84:	000000c0 	andeq	r0, r0, r0, asr #1
     e88:	11180e44 	tstne	r8, r4, asr #28
     e8c:	0811010e 	ldmdaeq	r1, {r1, r2, r3, r8}
     e90:	03071102 	movweq	r1, #28930	; 0x7102
     e94:	11040611 	tstne	r4, r1, lsl r6
     e98:	04110505 	ldreq	r0, [r1], #-1285	; 0x505
     e9c:	00000006 	andeq	r0, r0, r6
     ea0:	0000001c 	andeq	r0, r0, ip, lsl r0
     ea4:	00000d7c 	andeq	r0, r0, ip, ror sp
     ea8:	30005300 	andcc	r5, r0, r0, lsl #6
     eac:	0000006c 	andeq	r0, r0, ip, rrx
     eb0:	11100e44 	tstne	r0, r4, asr #28
     eb4:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     eb8:	03051102 	movweq	r1, #20738	; 0x5102
     ebc:	00040411 	andeq	r0, r4, r1, lsl r4
     ec0:	0000001c 	andeq	r0, r0, ip, lsl r0
     ec4:	00000d7c 	andeq	r0, r0, ip, ror sp
     ec8:	3000536c 	andcc	r5, r0, ip, ror #6
     ecc:	00000180 	andeq	r0, r0, r0, lsl #3
     ed0:	11100e44 	tstne	r0, r4, asr #28
     ed4:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     ed8:	03051102 	movweq	r1, #20738	; 0x5102
     edc:	00040411 	andeq	r0, r4, r1, lsl r4
     ee0:	0000001c 	andeq	r0, r0, ip, lsl r0
     ee4:	00000d7c 	andeq	r0, r0, ip, ror sp
     ee8:	300054ec 	andcc	r5, r0, ip, ror #9
     eec:	000001cc 	andeq	r0, r0, ip, asr #3
     ef0:	11100e44 	tstne	r0, r4, asr #28
     ef4:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     ef8:	03051102 	movweq	r1, #20738	; 0x5102
     efc:	00040411 	andeq	r0, r4, r1, lsl r4
     f00:	00000024 	andeq	r0, r0, r4, lsr #32
     f04:	00000d7c 	andeq	r0, r0, ip, ror sp
     f08:	300056b8 	undefined instruction 0x300056b8
     f0c:	000000c0 	andeq	r0, r0, r0, asr #1
     f10:	11180e44 	tstne	r8, r4, asr #28
     f14:	0811010e 	ldmdaeq	r1, {r1, r2, r3, r8}
     f18:	03071102 	movweq	r1, #28930	; 0x7102
     f1c:	11040611 	tstne	r4, r1, lsl r6
     f20:	04110505 	ldreq	r0, [r1], #-1285	; 0x505
     f24:	00000006 	andeq	r0, r0, r6
     f28:	00000024 	andeq	r0, r0, r4, lsr #32
     f2c:	00000d7c 	andeq	r0, r0, ip, ror sp
     f30:	30005778 	andcc	r5, r0, r8, ror r7
     f34:	00000150 	andeq	r0, r0, r0, asr r1
     f38:	11180e44 	tstne	r8, r4, asr #28
     f3c:	0811010e 	ldmdaeq	r1, {r1, r2, r3, r8}
     f40:	03071102 	movweq	r1, #28930	; 0x7102
     f44:	11040611 	tstne	r4, r1, lsl r6
     f48:	04110505 	ldreq	r0, [r1], #-1285	; 0x505
     f4c:	200e5006 	andcs	r5, lr, r6
     f50:	0000001c 	andeq	r0, r0, ip, lsl r0
     f54:	00000d7c 	andeq	r0, r0, ip, ror sp
     f58:	300058c8 	andcc	r5, r0, r8, asr #17
     f5c:	000001ac 	andeq	r0, r0, ip, lsr #3
     f60:	11100e44 	tstne	r0, r4, asr #28
     f64:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     f68:	03051102 	movweq	r1, #20738	; 0x5102
     f6c:	00040411 	andeq	r0, r4, r1, lsl r4
     f70:	00000018 	andeq	r0, r0, r8, lsl r0
     f74:	00000d7c 	andeq	r0, r0, ip, ror sp
     f78:	30005a74 	andcc	r5, r0, r4, ror sl
     f7c:	00000074 	andeq	r0, r0, r4, ror r0
     f80:	48040e44 	stmdami	r4, {r2, r6, r9, sl, fp}
     f84:	0e11100e 	cdpeq	0, 1, cr1, cr1, cr14, {0}
     f88:	00000001 	andeq	r0, r0, r1
     f8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f90:	00000d7c 	andeq	r0, r0, ip, ror sp
     f94:	30005ae8 	andcc	r5, r0, r8, ror #21
     f98:	000001c8 	andeq	r0, r0, r8, asr #3
     f9c:	11100e44 	tstne	r0, r4, asr #28
     fa0:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     fa4:	03051102 	movweq	r1, #20738	; 0x5102
     fa8:	00040411 	andeq	r0, r4, r1, lsl r4
     fac:	0000000c 	andeq	r0, r0, ip
     fb0:	00000d7c 	andeq	r0, r0, ip, ror sp
     fb4:	30005cb0 	undefined instruction 0x30005cb0
     fb8:	00000048 	andeq	r0, r0, r8, asr #32
     fbc:	0000001c 	andeq	r0, r0, ip, lsl r0
     fc0:	00000d7c 	andeq	r0, r0, ip, ror sp
     fc4:	30005cf8 	strdcc	r5, [r0], -r8
     fc8:	00000100 	andeq	r0, r0, r0, lsl #2
     fcc:	11100e44 	tstne	r0, r4, asr #28
     fd0:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
     fd4:	03051102 	movweq	r1, #20738	; 0x5102
     fd8:	00040411 	andeq	r0, r4, r1, lsl r4
     fdc:	00000014 	andeq	r0, r0, r4, lsl r0
     fe0:	00000d7c 	andeq	r0, r0, ip, ror sp
     fe4:	30005df8 	strdcc	r5, [r0], -r8
     fe8:	00000098 	muleq	r0, r8, r0
     fec:	11040e44 	tstne	r4, r4, asr #28
     ff0:	00000104 	andeq	r0, r0, r4, lsl #2
     ff4:	00000030 	andeq	r0, r0, r0, lsr r0
     ff8:	00000d7c 	andeq	r0, r0, ip, ror sp
     ffc:	30005e90 	mulcc	r0, r0, lr
    1000:	00000300 	andeq	r0, r0, r0, lsl #6
    1004:	11240e44 	teqne	r4, r4, asr #28
    1008:	0b11010e 	bleq	441448 <DISABLE_IRQ+0x4413c8>
    100c:	030a1102 	movweq	r1, #41218	; 0xa102
    1010:	11040911 	tstne	r4, r1, lsl r9
    1014:	07110508 	ldreq	r0, [r1, -r8, lsl #10]
    1018:	07061106 	streq	r1, [r6, -r6, lsl #2]
    101c:	11080511 	tstne	r8, r1, lsl r5
    1020:	0e480904 	cdpeq	9, 4, cr0, cr8, cr4, {0}
    1024:	00000030 	andeq	r0, r0, r0, lsr r0
    1028:	0000000c 	andeq	r0, r0, ip
    102c:	ffffffff 	undefined instruction 0xffffffff
    1030:	7c010001 	stcvc	0, cr0, [r1], {1}
    1034:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1038:	0000001c 	andeq	r0, r0, ip, lsl r0
    103c:	00001028 	andeq	r1, r0, r8, lsr #32
    1040:	30006190 	mulcc	r0, r0, r1
    1044:	000000cc 	andeq	r0, r0, ip, asr #1
    1048:	480c0e44 	stmdami	ip, {r2, r6, r9, sl, fp}
    104c:	0e11280e 	cdpeq	8, 1, cr2, cr1, cr14, {0}
    1050:	02051101 	andeq	r1, r5, #1073741824	; 0x40000000
    1054:	00030411 	andeq	r0, r3, r1, lsl r4
    1058:	00000018 	andeq	r0, r0, r8, lsl r0
    105c:	00001028 	andeq	r1, r0, r8, lsr #32
    1060:	3000625c 	andcc	r6, r0, ip, asr r2
    1064:	0000016c 	andeq	r0, r0, ip, ror #2
    1068:	11080e44 	tstne	r8, r4, asr #28
    106c:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
    1070:	100e4802 	andne	r4, lr, r2, lsl #16
    1074:	00000018 	andeq	r0, r0, r8, lsl r0
    1078:	00001028 	andeq	r1, r0, r8, lsr #32
    107c:	300063c8 	andcc	r6, r0, r8, asr #7
    1080:	0000002c 	andeq	r0, r0, ip, lsr #32
    1084:	11080e44 	tstne	r8, r4, asr #28
    1088:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
    108c:	00000002 	andeq	r0, r0, r2
    1090:	00000030 	andeq	r0, r0, r0, lsr r0
    1094:	00001028 	andeq	r1, r0, r8, lsr #32
    1098:	300063f4 	strdcc	r6, [r0], -r4
    109c:	000000f8 	strdeq	r0, [r0], -r8
    10a0:	44240e44 	strtmi	r0, [r4], #-3652	; 0xe44
    10a4:	0e11300e 	cdpeq	0, 1, cr3, cr1, cr14, {0}
    10a8:	020b1101 	andeq	r1, fp, #1073741824	; 0x40000000
    10ac:	11030a11 	tstne	r3, r1, lsl sl
    10b0:	08110409 	ldmdaeq	r1, {r0, r3, sl}
    10b4:	06071105 	streq	r1, [r7], -r5, lsl #2
    10b8:	11070611 	tstne	r7, r1, lsl r6
    10bc:	04110805 	ldreq	r0, [r1], #-2053	; 0x805
    10c0:	00000009 	andeq	r0, r0, r9
    10c4:	00000030 	andeq	r0, r0, r0, lsr r0
    10c8:	00001028 	andeq	r1, r0, r8, lsr #32
    10cc:	300064ec 	andcc	r6, r0, ip, ror #9
    10d0:	00000124 	andeq	r0, r0, r4, lsr #2
    10d4:	11240e44 	teqne	r4, r4, asr #28
    10d8:	0b11010e 	bleq	441518 <DISABLE_IRQ+0x441498>
    10dc:	030a1102 	movweq	r1, #41218	; 0xa102
    10e0:	11040911 	tstne	r4, r1, lsl r9
    10e4:	07110508 	ldreq	r0, [r1, -r8, lsl #10]
    10e8:	07061106 	streq	r1, [r6, -r6, lsl #2]
    10ec:	11080511 	tstne	r8, r1, lsl r5
    10f0:	0e480904 	cdpeq	9, 4, cr0, cr8, cr4, {0}
    10f4:	00000030 	andeq	r0, r0, r0, lsr r0
    10f8:	00000024 	andeq	r0, r0, r4, lsr #32
    10fc:	00001028 	andeq	r1, r0, r8, lsr #32
    1100:	30006610 	andcc	r6, r0, r0, lsl r6
    1104:	0000011c 	andeq	r0, r0, ip, lsl r1
    1108:	11180e44 	tstne	r8, r4, asr #28
    110c:	0811010e 	ldmdaeq	r1, {r1, r2, r3, r8}
    1110:	03071102 	movweq	r1, #28930	; 0x7102
    1114:	11040611 	tstne	r4, r1, lsl r6
    1118:	04110505 	ldreq	r0, [r1], #-1285	; 0x505
    111c:	00000006 	andeq	r0, r0, r6
    1120:	0000000c 	andeq	r0, r0, ip
    1124:	00001028 	andeq	r1, r0, r8, lsr #32
    1128:	3000672c 	andcc	r6, r0, ip, lsr #14
    112c:	00000008 	andeq	r0, r0, r8
    1130:	0000000c 	andeq	r0, r0, ip
    1134:	00001028 	andeq	r1, r0, r8, lsr #32
    1138:	30006734 	andcc	r6, r0, r4, lsr r7
    113c:	00000008 	andeq	r0, r0, r8
    1140:	0000002c 	andeq	r0, r0, ip, lsr #32
    1144:	00001028 	andeq	r1, r0, r8, lsr #32
    1148:	3000673c 	andcc	r6, r0, ip, lsr r7
    114c:	000000bc 	strheq	r0, [r0], -ip
    1150:	44200e44 	strtmi	r0, [r0], #-3652	; 0xe44
    1154:	0e11280e 	cdpeq	8, 1, cr2, cr1, cr14, {0}
    1158:	020a1101 	andeq	r1, sl, #1073741824	; 0x40000000
    115c:	11030911 	tstne	r3, r1, lsl r9
    1160:	07110408 	ldreq	r0, [r1, -r8, lsl #8]
    1164:	06061105 	streq	r1, [r6], -r5, lsl #2
    1168:	11070511 	tstne	r7, r1, lsl r5
    116c:	00000804 	andeq	r0, r0, r4, lsl #16
    1170:	00000018 	andeq	r0, r0, r8, lsl r0
    1174:	00001028 	andeq	r1, r0, r8, lsr #32
    1178:	300067f8 	strdcc	r6, [r0], -r8
    117c:	0000005c 	andeq	r0, r0, ip, asr r0
    1180:	11080e44 	tstne	r8, r4, asr #28
    1184:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
    1188:	00000002 	andeq	r0, r0, r2
    118c:	0000000c 	andeq	r0, r0, ip
    1190:	ffffffff 	undefined instruction 0xffffffff
    1194:	7c010001 	stcvc	0, cr0, [r1], {1}
    1198:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    119c:	00000018 	andeq	r0, r0, r8, lsl r0
    11a0:	0000118c 	andeq	r1, r0, ip, lsl #3
    11a4:	30006854 	andcc	r6, r0, r4, asr r8
    11a8:	00000014 	andeq	r0, r0, r4, lsl r0
    11ac:	11080e44 	tstne	r8, r4, asr #28
    11b0:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
    11b4:	00000002 	andeq	r0, r0, r2
    11b8:	00000018 	andeq	r0, r0, r8, lsl r0
    11bc:	0000118c 	andeq	r1, r0, ip, lsl #3
    11c0:	30006868 	andcc	r6, r0, r8, ror #16
    11c4:	00000014 	andeq	r0, r0, r4, lsl r0
    11c8:	11080e44 	tstne	r8, r4, asr #28
    11cc:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
    11d0:	00000002 	andeq	r0, r0, r2
    11d4:	00000018 	andeq	r0, r0, r8, lsl r0
    11d8:	0000118c 	andeq	r1, r0, ip, lsl #3
    11dc:	3000687c 	andcc	r6, r0, ip, ror r8
    11e0:	00000014 	andeq	r0, r0, r4, lsl r0
    11e4:	11080e44 	tstne	r8, r4, asr #28
    11e8:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
    11ec:	00000002 	andeq	r0, r0, r2
    11f0:	00000018 	andeq	r0, r0, r8, lsl r0
    11f4:	0000118c 	andeq	r1, r0, ip, lsl #3
    11f8:	30006890 	mulcc	r0, r0, r8
    11fc:	00000014 	andeq	r0, r0, r4, lsl r0
    1200:	11080e44 	tstne	r8, r4, asr #28
    1204:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
    1208:	00000002 	andeq	r0, r0, r2
    120c:	00000018 	andeq	r0, r0, r8, lsl r0
    1210:	0000118c 	andeq	r1, r0, ip, lsl #3
    1214:	300068a4 	andcc	r6, r0, r4, lsr #17
    1218:	00000014 	andeq	r0, r0, r4, lsl r0
    121c:	11080e44 	tstne	r8, r4, asr #28
    1220:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
    1224:	00000002 	andeq	r0, r0, r2
    1228:	00000018 	andeq	r0, r0, r8, lsl r0
    122c:	0000118c 	andeq	r1, r0, ip, lsl #3
    1230:	300068b8 	undefined instruction 0x300068b8
    1234:	00000034 	andeq	r0, r0, r4, lsr r0
    1238:	11080e48 	tstne	r8, r8, asr #28
    123c:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
    1240:	00000002 	andeq	r0, r0, r2
    1244:	00000018 	andeq	r0, r0, r8, lsl r0
    1248:	0000118c 	andeq	r1, r0, ip, lsl #3
    124c:	300068ec 	andcc	r6, r0, ip, ror #17
    1250:	00000028 	andeq	r0, r0, r8, lsr #32
    1254:	11080e48 	tstne	r8, r8, asr #28
    1258:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
    125c:	00000002 	andeq	r0, r0, r2
    1260:	0000000c 	andeq	r0, r0, ip
    1264:	ffffffff 	undefined instruction 0xffffffff
    1268:	7c010001 	stcvc	0, cr0, [r1], {1}
    126c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1270:	00000018 	andeq	r0, r0, r8, lsl r0
    1274:	00001260 	andeq	r1, r0, r0, ror #4
    1278:	30006914 	andcc	r6, r0, r4, lsl r9
    127c:	00000014 	andeq	r0, r0, r4, lsl r0
    1280:	11080e44 	tstne	r8, r4, asr #28
    1284:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
    1288:	00000002 	andeq	r0, r0, r2
    128c:	00000018 	andeq	r0, r0, r8, lsl r0
    1290:	00001260 	andeq	r1, r0, r0, ror #4
    1294:	30006928 	andcc	r6, r0, r8, lsr #18
    1298:	00000014 	andeq	r0, r0, r4, lsl r0
    129c:	11080e44 	tstne	r8, r4, asr #28
    12a0:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
    12a4:	00000002 	andeq	r0, r0, r2
    12a8:	00000018 	andeq	r0, r0, r8, lsl r0
    12ac:	00001260 	andeq	r1, r0, r0, ror #4
    12b0:	3000693c 	andcc	r6, r0, ip, lsr r9
    12b4:	00000024 	andeq	r0, r0, r4, lsr #32
    12b8:	11080e50 	tstne	r8, r0, asr lr
    12bc:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
    12c0:	00000002 	andeq	r0, r0, r2
    12c4:	00000018 	andeq	r0, r0, r8, lsl r0
    12c8:	00001260 	andeq	r1, r0, r0, ror #4
    12cc:	30006960 	andcc	r6, r0, r0, ror #18
    12d0:	00000014 	andeq	r0, r0, r4, lsl r0
    12d4:	11080e44 	tstne	r8, r4, asr #28
    12d8:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
    12dc:	00000002 	andeq	r0, r0, r2
    12e0:	00000018 	andeq	r0, r0, r8, lsl r0
    12e4:	00001260 	andeq	r1, r0, r0, ror #4
    12e8:	30006974 	andcc	r6, r0, r4, ror r9
    12ec:	00000024 	andeq	r0, r0, r4, lsr #32
    12f0:	11080e4c 	tstne	r8, ip, asr #28
    12f4:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
    12f8:	00000002 	andeq	r0, r0, r2
    12fc:	0000000c 	andeq	r0, r0, ip
    1300:	ffffffff 	undefined instruction 0xffffffff
    1304:	7c010001 	stcvc	0, cr0, [r1], {1}
    1308:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    130c:	0000000c 	andeq	r0, r0, ip
    1310:	000012fc 	strdeq	r1, [r0], -ip
    1314:	30006998 	mulcc	r0, r8, r9
    1318:	00000024 	andeq	r0, r0, r4, lsr #32
    131c:	00000018 	andeq	r0, r0, r8, lsl r0
    1320:	000012fc 	strdeq	r1, [r0], -ip
    1324:	300069bc 	undefined instruction 0x300069bc
    1328:	00000090 	muleq	r0, r0, r0
    132c:	11080e48 	tstne	r8, r8, asr #28
    1330:	04110105 	ldreq	r0, [r1], #-261	; 0x105
    1334:	00000002 	andeq	r0, r0, r2
    1338:	0000000c 	andeq	r0, r0, ip
    133c:	000012fc 	strdeq	r1, [r0], -ip
    1340:	30006a4c 	andcc	r6, r0, ip, asr #20
    1344:	0000002c 	andeq	r0, r0, ip, lsr #32
    1348:	0000001c 	andeq	r0, r0, ip, lsl r0
    134c:	000012fc 	strdeq	r1, [r0], -ip
    1350:	30006a78 	andcc	r6, r0, r8, ror sl
    1354:	00000080 	andeq	r0, r0, r0, lsl #1
    1358:	110c0e44 	tstne	ip, r4, asr #28
    135c:	0511010e 	ldreq	r0, [r1, #-270]	; 0x10e
    1360:	03041102 	movweq	r1, #16642	; 0x4102
    1364:	00280e48 	eoreq	r0, r8, r8, asr #28
    1368:	00000030 	andeq	r0, r0, r0, lsr r0
    136c:	000012fc 	strdeq	r1, [r0], -ip
    1370:	30006af8 	strdcc	r6, [r0], -r8
    1374:	000001fc 	strdeq	r0, [r0], -ip
    1378:	11280e44 	teqne	r8, r4, asr #28
    137c:	0b11010e 	bleq	4417bc <DISABLE_IRQ+0x44173c>
    1380:	030a1102 	movweq	r1, #41218	; 0xa102
    1384:	11040911 	tstne	r4, r1, lsl r9
    1388:	07110508 	ldreq	r0, [r1, -r8, lsl #10]
    138c:	07061106 	streq	r1, [r6, -r6, lsl #2]
    1390:	11080511 	tstne	r8, r1, lsl r5
    1394:	03110904 	tsteq	r1, #65536	; 0x10000
    1398:	0000000a 	andeq	r0, r0, sl
    139c:	00000018 	andeq	r0, r0, r8, lsl r0
    13a0:	000012fc 	strdeq	r1, [r0], -ip
    13a4:	30006cf4 	strdcc	r6, [r0], -r4
    13a8:	00000030 	andeq	r0, r0, r0, lsr r0
    13ac:	11080e44 	tstne	r8, r4, asr #28
    13b0:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
    13b4:	00000002 	andeq	r0, r0, r2
    13b8:	0000000c 	andeq	r0, r0, ip
    13bc:	ffffffff 	undefined instruction 0xffffffff
    13c0:	7c010001 	stcvc	0, cr0, [r1], {1}
    13c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    13c8:	00000018 	andeq	r0, r0, r8, lsl r0
    13cc:	000013b8 	undefined instruction 0x000013b8
    13d0:	30006d24 	andcc	r6, r0, r4, lsr #26
    13d4:	000000a8 	andeq	r0, r0, r8, lsr #1
    13d8:	54080e44 	strpl	r0, [r8], #-3652	; 0xe44
    13dc:	0e11200e 	cdpeq	0, 1, cr2, cr1, cr14, {0}
    13e0:	02041101 	andeq	r1, r4, #1073741824	; 0x40000000
    13e4:	00000018 	andeq	r0, r0, r8, lsl r0
    13e8:	000013b8 	undefined instruction 0x000013b8
    13ec:	30006dcc 	andcc	r6, r0, ip, asr #27
    13f0:	00000038 	andeq	r0, r0, r8, lsr r0
    13f4:	11080e48 	tstne	r8, r8, asr #28
    13f8:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
    13fc:	00000002 	andeq	r0, r0, r2
    1400:	00000028 	andeq	r0, r0, r8, lsr #32
    1404:	000013b8 	undefined instruction 0x000013b8
    1408:	30006e04 	andcc	r6, r0, r4, lsl #28
    140c:	00000140 	andeq	r0, r0, r0, asr #2
    1410:	11200e44 	teqne	r0, r4, asr #28
    1414:	0a11010e 	beq	441854 <DISABLE_IRQ+0x4417d4>
    1418:	03091102 	movweq	r1, #37122	; 0x9102
    141c:	11040811 	tstne	r4, r1, lsl r8
    1420:	06110507 	ldreq	r0, [r1], -r7, lsl #10
    1424:	07051106 	streq	r1, [r5, -r6, lsl #2]
    1428:	00080411 	andeq	r0, r8, r1, lsl r4
    142c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1430:	000013b8 	undefined instruction 0x000013b8
    1434:	30006f44 	andcc	r6, r0, r4, asr #30
    1438:	0000008c 	andeq	r0, r0, ip, lsl #1
    143c:	11100e44 	tstne	r0, r4, asr #28
    1440:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
    1444:	03051102 	movweq	r1, #20738	; 0x5102
    1448:	00040411 	andeq	r0, r4, r1, lsl r4
    144c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1450:	000013b8 	undefined instruction 0x000013b8
    1454:	30006fd0 	ldrdcc	r6, [r0], -r0
    1458:	00000094 	muleq	r0, r4, r0
    145c:	11100e44 	tstne	r0, r4, asr #28
    1460:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
    1464:	03051102 	movweq	r1, #20738	; 0x5102
    1468:	00040411 	andeq	r0, r4, r1, lsl r4
    146c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1470:	000013b8 	undefined instruction 0x000013b8
    1474:	30007064 	andcc	r7, r0, r4, rrx
    1478:	00000080 	andeq	r0, r0, r0, lsl #1
    147c:	110c0e44 	tstne	ip, r4, asr #28
    1480:	0511010e 	ldreq	r0, [r1, #-270]	; 0x10e
    1484:	03041102 	movweq	r1, #16642	; 0x4102
    1488:	00180e48 	andseq	r0, r8, r8, asr #28
    148c:	00000018 	andeq	r0, r0, r8, lsl r0
    1490:	000013b8 	undefined instruction 0x000013b8
    1494:	300070e4 	andcc	r7, r0, r4, ror #1
    1498:	000000f4 	strdeq	r0, [r0], -r4
    149c:	11080e44 	tstne	r8, r4, asr #28
    14a0:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
    14a4:	00000002 	andeq	r0, r0, r2
    14a8:	00000024 	andeq	r0, r0, r4, lsr #32
    14ac:	000013b8 	undefined instruction 0x000013b8
    14b0:	300071d8 	ldrdcc	r7, [r0], -r8
    14b4:	000000a8 	andeq	r0, r0, r8, lsr #1
    14b8:	11180e44 	tstne	r8, r4, asr #28
    14bc:	0811010e 	ldmdaeq	r1, {r1, r2, r3, r8}
    14c0:	03071102 	movweq	r1, #28930	; 0x7102
    14c4:	11040611 	tstne	r4, r1, lsl r6
    14c8:	04110505 	ldreq	r0, [r1], #-1285	; 0x505
    14cc:	00000006 	andeq	r0, r0, r6
    14d0:	0000000c 	andeq	r0, r0, ip
    14d4:	ffffffff 	undefined instruction 0xffffffff
    14d8:	7c010001 	stcvc	0, cr0, [r1], {1}
    14dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    14e0:	00000024 	andeq	r0, r0, r4, lsr #32
    14e4:	000014d0 	ldrdeq	r1, [r0], -r0
    14e8:	30007280 	andcc	r7, r0, r0, lsl #5
    14ec:	000000dc 	ldrdeq	r0, [r0], -ip
    14f0:	48180e44 	ldmdami	r8, {r2, r6, r9, sl, fp}
    14f4:	0e11300e 	cdpeq	0, 1, cr3, cr1, cr14, {0}
    14f8:	02081101 	andeq	r1, r8, #1073741824	; 0x40000000
    14fc:	11030711 	tstne	r3, r1, lsl r7
    1500:	05110406 	ldreq	r0, [r1, #-1030]	; 0x406
    1504:	06041105 	streq	r1, [r4], -r5, lsl #2
    1508:	00000018 	andeq	r0, r0, r8, lsl r0
    150c:	000014d0 	ldrdeq	r1, [r0], -r0
    1510:	3000735c 	andcc	r7, r0, ip, asr r3
    1514:	00000020 	andeq	r0, r0, r0, lsr #32
    1518:	11080e44 	tstne	r8, r4, asr #28
    151c:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
    1520:	00000002 	andeq	r0, r0, r2
    1524:	00000018 	andeq	r0, r0, r8, lsl r0
    1528:	000014d0 	ldrdeq	r1, [r0], -r0
    152c:	3000737c 	andcc	r7, r0, ip, ror r3
    1530:	00000020 	andeq	r0, r0, r0, lsr #32
    1534:	11080e44 	tstne	r8, r4, asr #28
    1538:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
    153c:	00000002 	andeq	r0, r0, r2
    1540:	00000018 	andeq	r0, r0, r8, lsl r0
    1544:	000014d0 	ldrdeq	r1, [r0], -r0
    1548:	3000739c 	mulcc	r0, ip, r3
    154c:	00000020 	andeq	r0, r0, r0, lsr #32
    1550:	11080e44 	tstne	r8, r4, asr #28
    1554:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
    1558:	00000002 	andeq	r0, r0, r2
    155c:	0000000c 	andeq	r0, r0, ip
    1560:	ffffffff 	undefined instruction 0xffffffff
    1564:	7c010001 	stcvc	0, cr0, [r1], {1}
    1568:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    156c:	00000024 	andeq	r0, r0, r4, lsr #32
    1570:	0000155c 	andeq	r1, r0, ip, asr r5
    1574:	300073bc 	undefined instruction 0x300073bc
    1578:	000000c4 	andeq	r0, r0, r4, asr #1
    157c:	48140e44 	ldmdami	r4, {r2, r6, r9, sl, fp}
    1580:	0e11300e 	cdpeq	0, 1, cr3, cr1, cr14, {0}
    1584:	02071101 	andeq	r1, r7, #1073741824	; 0x40000000
    1588:	11030611 	tstne	r3, r1, lsl r6
    158c:	04110405 	ldreq	r0, [r1], #-1029	; 0x405
    1590:	00000005 	andeq	r0, r0, r5
    1594:	00000018 	andeq	r0, r0, r8, lsl r0
    1598:	0000155c 	andeq	r1, r0, ip, asr r5
    159c:	30007480 	andcc	r7, r0, r0, lsl #9
    15a0:	0000002c 	andeq	r0, r0, ip, lsr #32
    15a4:	11080e44 	tstne	r8, r4, asr #28
    15a8:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
    15ac:	00000002 	andeq	r0, r0, r2
    15b0:	00000018 	andeq	r0, r0, r8, lsl r0
    15b4:	0000155c 	andeq	r1, r0, ip, asr r5
    15b8:	300074ac 	andcc	r7, r0, ip, lsr #9
    15bc:	00000030 	andeq	r0, r0, r0, lsr r0
    15c0:	11080e44 	tstne	r8, r4, asr #28
    15c4:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
    15c8:	00000002 	andeq	r0, r0, r2
    15cc:	0000000c 	andeq	r0, r0, ip
    15d0:	ffffffff 	undefined instruction 0xffffffff
    15d4:	7c010001 	stcvc	0, cr0, [r1], {1}
    15d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    15dc:	00000024 	andeq	r0, r0, r4, lsr #32
    15e0:	000015cc 	andeq	r1, r0, ip, asr #11
    15e4:	300074dc 	ldrdcc	r7, [r0], -ip
    15e8:	000000c8 	andeq	r0, r0, r8, asr #1
    15ec:	48140e44 	ldmdami	r4, {r2, r6, r9, sl, fp}
    15f0:	0e11300e 	cdpeq	0, 1, cr3, cr1, cr14, {0}
    15f4:	02071101 	andeq	r1, r7, #1073741824	; 0x40000000
    15f8:	11030611 	tstne	r3, r1, lsl r6
    15fc:	04110405 	ldreq	r0, [r1], #-1029	; 0x405
    1600:	00000005 	andeq	r0, r0, r5
    1604:	0000001c 	andeq	r0, r0, ip, lsl r0
    1608:	000015cc 	andeq	r1, r0, ip, asr #11
    160c:	300075a4 	andcc	r7, r0, r4, lsr #11
    1610:	00000054 	andeq	r0, r0, r4, asr r0
    1614:	11100e44 	tstne	r0, r4, asr #28
    1618:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
    161c:	03051102 	movweq	r1, #20738	; 0x5102
    1620:	00040411 	andeq	r0, r4, r1, lsl r4
    1624:	0000001c 	andeq	r0, r0, ip, lsl r0
    1628:	000015cc 	andeq	r1, r0, ip, asr #11
    162c:	300075f8 	strdcc	r7, [r0], -r8
    1630:	0000005c 	andeq	r0, r0, ip, asr r0
    1634:	11100e44 	tstne	r0, r4, asr #28
    1638:	0611010e 	ldreq	r0, [r1], -lr, lsl #2
    163c:	03051102 	movweq	r1, #20738	; 0x5102
    1640:	00040411 	andeq	r0, r4, r1, lsl r4
    1644:	0000000c 	andeq	r0, r0, ip
    1648:	ffffffff 	undefined instruction 0xffffffff
    164c:	7c010001 	stcvc	0, cr0, [r1], {1}
    1650:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1654:	00000020 	andeq	r0, r0, r0, lsr #32
    1658:	00001644 	andeq	r1, r0, r4, asr #12
    165c:	30007654 	andcc	r7, r0, r4, asr r6
    1660:	000000a0 	andeq	r0, r0, r0, lsr #1
    1664:	48100e44 	ldmdami	r0, {r2, r6, r9, sl, fp}
    1668:	0e11280e 	cdpeq	8, 1, cr2, cr1, cr14, {0}
    166c:	02061101 	andeq	r1, r6, #1073741824	; 0x40000000
    1670:	11030511 	tstne	r3, r1, lsl r5
    1674:	00000404 	andeq	r0, r0, r4, lsl #8
    1678:	00000018 	andeq	r0, r0, r8, lsl r0
    167c:	00001644 	andeq	r1, r0, r4, asr #12
    1680:	300076f4 	strdcc	r7, [r0], -r4
    1684:	00000018 	andeq	r0, r0, r8, lsl r0
    1688:	11080e44 	tstne	r8, r4, asr #28
    168c:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
    1690:	00000002 	andeq	r0, r0, r2
    1694:	00000018 	andeq	r0, r0, r8, lsl r0
    1698:	00001644 	andeq	r1, r0, r4, asr #12
    169c:	3000770c 	andcc	r7, r0, ip, lsl #14
    16a0:	0000008c 	andeq	r0, r0, ip, lsl #1
    16a4:	11080e50 	tstne	r8, r0, asr lr
    16a8:	0411010e 	ldreq	r0, [r1], #-270	; 0x10e
    16ac:	00000002 	andeq	r0, r0, r2
    16b0:	0000000c 	andeq	r0, r0, ip
    16b4:	ffffffff 	undefined instruction 0xffffffff
    16b8:	7c010001 	stcvc	0, cr0, [r1], {1}
    16bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    16c0:	0000001c 	andeq	r0, r0, ip, lsl r0
    16c4:	000016b0 	undefined instruction 0x000016b0
    16c8:	30007798 	mulcc	r0, r8, r7
    16cc:	000000ac 	andeq	r0, r0, ip, lsr #1
    16d0:	480c0e44 	stmdami	ip, {r2, r6, r9, sl, fp}
    16d4:	0e11280e 	cdpeq	8, 1, cr2, cr1, cr14, {0}
    16d8:	02051101 	andeq	r1, r5, #1073741824	; 0x40000000
    16dc:	00030411 	andeq	r0, r3, r1, lsl r4
    16e0:	0000001c 	andeq	r0, r0, ip, lsl r0
    16e4:	000016b0 	undefined instruction 0x000016b0
    16e8:	30007844 	andcc	r7, r0, r4, asr #16
    16ec:	00000068 	andeq	r0, r0, r8, rrx
    16f0:	440c0e44 	strmi	r0, [ip], #-3652	; 0xe44
    16f4:	0e11180e 	cdpeq	8, 1, cr1, cr1, cr14, {0}
    16f8:	02051101 	andeq	r1, r5, #1073741824	; 0x40000000
    16fc:	00030411 	andeq	r0, r3, r1, lsl r4
    1700:	0000000c 	andeq	r0, r0, ip
    1704:	ffffffff 	undefined instruction 0xffffffff
    1708:	7c010001 	stcvc	0, cr0, [r1], {1}
    170c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1710:	00000018 	andeq	r0, r0, r8, lsl r0
    1714:	00001700 	andeq	r1, r0, r0, lsl #14
    1718:	300078ac 	andcc	r7, r0, ip, lsr #17
    171c:	000000a8 	andeq	r0, r0, r8, lsr #1
    1720:	48080e44 	stmdami	r8, {r2, r6, r9, sl, fp}
    1724:	0e11200e 	cdpeq	0, 1, cr2, cr1, cr14, {0}
    1728:	02041101 	andeq	r1, r4, #1073741824	; 0x40000000
    172c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1730:	00001700 	andeq	r1, r0, r0, lsl #14
    1734:	30007954 	andcc	r7, r0, r4, asr r9
    1738:	000000bc 	strheq	r0, [r0], -ip
    173c:	440c0e44 	strmi	r0, [ip], #-3652	; 0xe44
    1740:	0e11180e 	cdpeq	8, 1, cr1, cr1, cr14, {0}
    1744:	02051101 	andeq	r1, r5, #1073741824	; 0x40000000
    1748:	00030411 	andeq	r0, r3, r1, lsl r4
    174c:	0000000c 	andeq	r0, r0, ip
    1750:	ffffffff 	undefined instruction 0xffffffff
    1754:	7c010001 	stcvc	0, cr0, [r1], {1}
    1758:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    175c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1760:	0000174c 	andeq	r1, r0, ip, asr #14
    1764:	30007a10 	andcc	r7, r0, r0, lsl sl
    1768:	000000e4 	andeq	r0, r0, r4, ror #1
    176c:	11200e48 	teqne	r0, r8, asr #28
    1770:	0a11010b 	beq	441ba4 <DISABLE_IRQ+0x441b24>
    1774:	03091102 	movweq	r1, #37122	; 0x9102
    1778:	11040811 	tstne	r4, r1, lsl r8
    177c:	06110507 	ldreq	r0, [r1], -r7, lsl #10
    1780:	07051106 	streq	r1, [r5, -r6, lsl #2]
    1784:	60080411 	andvs	r0, r8, r1, lsl r4
    1788:	0000480e 	andeq	r4, r0, lr, lsl #16
    178c:	0000000c 	andeq	r0, r0, ip
    1790:	0000174c 	andeq	r1, r0, ip, asr #14
    1794:	30007af4 	strdcc	r7, [r0], -r4
    1798:	00000004 	andeq	r0, r0, r4
    179c:	0000000c 	andeq	r0, r0, ip
    17a0:	0000174c 	andeq	r1, r0, ip, asr #14
    17a4:	30007af8 	strdcc	r7, [r0], -r8
    17a8:	00000004 	andeq	r0, r0, r4
    17ac:	0000000c 	andeq	r0, r0, ip
    17b0:	0000174c 	andeq	r1, r0, ip, asr #14
    17b4:	30007afc 	strdcc	r7, [r0], -ip
    17b8:	00000004 	andeq	r0, r0, r4
    17bc:	0000000c 	andeq	r0, r0, ip
    17c0:	0000174c 	andeq	r1, r0, ip, asr #14
    17c4:	30007b00 	andcc	r7, r0, r0, lsl #22
    17c8:	00000004 	andeq	r0, r0, r4
    17cc:	0000000c 	andeq	r0, r0, ip
    17d0:	0000174c 	andeq	r1, r0, ip, asr #14
    17d4:	30007b04 	andcc	r7, r0, r4, lsl #22
    17d8:	00000004 	andeq	r0, r0, r4
    17dc:	0000000c 	andeq	r0, r0, ip
    17e0:	0000174c 	andeq	r1, r0, ip, asr #14
    17e4:	30007b08 	andcc	r7, r0, r8, lsl #22
    17e8:	00000004 	andeq	r0, r0, r4
    17ec:	0000000c 	andeq	r0, r0, ip
    17f0:	0000174c 	andeq	r1, r0, ip, asr #14
    17f4:	30007b0c 	andcc	r7, r0, ip, lsl #22
    17f8:	00000004 	andeq	r0, r0, r4
    17fc:	0000000c 	andeq	r0, r0, ip
    1800:	ffffffff 	undefined instruction 0xffffffff
    1804:	7c010001 	stcvc	0, cr0, [r1], {1}
    1808:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    180c:	0000000c 	andeq	r0, r0, ip
    1810:	000017fc 	strdeq	r1, [r0], -ip
    1814:	30007b10 	andcc	r7, r0, r0, lsl fp
    1818:	00000004 	andeq	r0, r0, r4
    181c:	0000000c 	andeq	r0, r0, ip
    1820:	000017fc 	strdeq	r1, [r0], -ip
    1824:	30007b14 	andcc	r7, r0, r4, lsl fp
    1828:	00000004 	andeq	r0, r0, r4
    182c:	0000000c 	andeq	r0, r0, ip
    1830:	000017fc 	strdeq	r1, [r0], -ip
    1834:	30007b18 	andcc	r7, r0, r8, lsl fp
    1838:	00000004 	andeq	r0, r0, r4
    183c:	0000000c 	andeq	r0, r0, ip
    1840:	000017fc 	strdeq	r1, [r0], -ip
    1844:	30007b1c 	andcc	r7, r0, ip, lsl fp
    1848:	00000004 	andeq	r0, r0, r4
    184c:	0000000c 	andeq	r0, r0, ip
    1850:	000017fc 	strdeq	r1, [r0], -ip
    1854:	30007b20 	andcc	r7, r0, r0, lsr #22
    1858:	00000004 	andeq	r0, r0, r4
    185c:	0000000c 	andeq	r0, r0, ip
    1860:	000017fc 	strdeq	r1, [r0], -ip
    1864:	30007b24 	andcc	r7, r0, r4, lsr #22
    1868:	00000004 	andeq	r0, r0, r4
    186c:	0000000c 	andeq	r0, r0, ip
    1870:	000017fc 	strdeq	r1, [r0], -ip
    1874:	30007b28 	andcc	r7, r0, r8, lsr #22
    1878:	00000004 	andeq	r0, r0, r4
    187c:	0000000c 	andeq	r0, r0, ip
    1880:	000017fc 	strdeq	r1, [r0], -ip
    1884:	30007b2c 	andcc	r7, r0, ip, lsr #22
    1888:	00000004 	andeq	r0, r0, r4
    188c:	0000000c 	andeq	r0, r0, ip
    1890:	000017fc 	strdeq	r1, [r0], -ip
    1894:	30007b30 	andcc	r7, r0, r0, lsr fp
    1898:	00000004 	andeq	r0, r0, r4
    189c:	0000000c 	andeq	r0, r0, ip
    18a0:	000017fc 	strdeq	r1, [r0], -ip
    18a4:	30007b34 	andcc	r7, r0, r4, lsr fp
    18a8:	00000004 	andeq	r0, r0, r4
    18ac:	0000000c 	andeq	r0, r0, ip
    18b0:	000017fc 	strdeq	r1, [r0], -ip
    18b4:	30007b38 	andcc	r7, r0, r8, lsr fp
    18b8:	00000004 	andeq	r0, r0, r4
    18bc:	0000000c 	andeq	r0, r0, ip
    18c0:	000017fc 	strdeq	r1, [r0], -ip
    18c4:	30007b3c 	andcc	r7, r0, ip, lsr fp
    18c8:	00000004 	andeq	r0, r0, r4
    18cc:	0000000c 	andeq	r0, r0, ip
    18d0:	000017fc 	strdeq	r1, [r0], -ip
    18d4:	30007b40 	andcc	r7, r0, r0, asr #22
    18d8:	00000004 	andeq	r0, r0, r4
    18dc:	0000000c 	andeq	r0, r0, ip
    18e0:	000017fc 	strdeq	r1, [r0], -ip
    18e4:	30007b44 	andcc	r7, r0, r4, asr #22
    18e8:	00000004 	andeq	r0, r0, r4
    18ec:	0000000c 	andeq	r0, r0, ip
    18f0:	000017fc 	strdeq	r1, [r0], -ip
    18f4:	30007b48 	andcc	r7, r0, r8, asr #22
    18f8:	00000004 	andeq	r0, r0, r4
    18fc:	0000000c 	andeq	r0, r0, ip
    1900:	000017fc 	strdeq	r1, [r0], -ip
    1904:	30007b4c 	andcc	r7, r0, ip, asr #22
    1908:	00000004 	andeq	r0, r0, r4
    190c:	0000000c 	andeq	r0, r0, ip
    1910:	000017fc 	strdeq	r1, [r0], -ip
    1914:	30007b50 	andcc	r7, r0, r0, asr fp
    1918:	00000004 	andeq	r0, r0, r4
    191c:	0000000c 	andeq	r0, r0, ip
    1920:	000017fc 	strdeq	r1, [r0], -ip
    1924:	30007b54 	andcc	r7, r0, r4, asr fp
    1928:	00000004 	andeq	r0, r0, r4
    192c:	0000000c 	andeq	r0, r0, ip
    1930:	000017fc 	strdeq	r1, [r0], -ip
    1934:	30007b58 	andcc	r7, r0, r8, asr fp
    1938:	00000004 	andeq	r0, r0, r4
    193c:	0000000c 	andeq	r0, r0, ip
    1940:	000017fc 	strdeq	r1, [r0], -ip
    1944:	30007b5c 	andcc	r7, r0, ip, asr fp
    1948:	00000004 	andeq	r0, r0, r4
    194c:	0000000c 	andeq	r0, r0, ip
    1950:	000017fc 	strdeq	r1, [r0], -ip
    1954:	30007b60 	andcc	r7, r0, r0, ror #22
    1958:	00000004 	andeq	r0, r0, r4
    195c:	0000000c 	andeq	r0, r0, ip
    1960:	000017fc 	strdeq	r1, [r0], -ip
    1964:	30007b64 	andcc	r7, r0, r4, ror #22
    1968:	00000004 	andeq	r0, r0, r4
    196c:	0000000c 	andeq	r0, r0, ip
    1970:	000017fc 	strdeq	r1, [r0], -ip
    1974:	30007b68 	andcc	r7, r0, r8, ror #22
    1978:	00000004 	andeq	r0, r0, r4
    197c:	0000000c 	andeq	r0, r0, ip
    1980:	000017fc 	strdeq	r1, [r0], -ip
    1984:	30007b6c 	andcc	r7, r0, ip, ror #22
    1988:	00000004 	andeq	r0, r0, r4
    198c:	0000000c 	andeq	r0, r0, ip
    1990:	000017fc 	strdeq	r1, [r0], -ip
    1994:	30007b70 	andcc	r7, r0, r0, ror fp
    1998:	00000004 	andeq	r0, r0, r4
    199c:	0000000c 	andeq	r0, r0, ip
    19a0:	000017fc 	strdeq	r1, [r0], -ip
    19a4:	30007b74 	andcc	r7, r0, r4, ror fp
    19a8:	00000004 	andeq	r0, r0, r4
    19ac:	0000000c 	andeq	r0, r0, ip
    19b0:	000017fc 	strdeq	r1, [r0], -ip
    19b4:	30007b78 	andcc	r7, r0, r8, ror fp
    19b8:	00000004 	andeq	r0, r0, r4
    19bc:	0000000c 	andeq	r0, r0, ip
    19c0:	000017fc 	strdeq	r1, [r0], -ip
    19c4:	30007b7c 	andcc	r7, r0, ip, ror fp
    19c8:	00000004 	andeq	r0, r0, r4
    19cc:	0000000c 	andeq	r0, r0, ip
    19d0:	000017fc 	strdeq	r1, [r0], -ip
    19d4:	30007b80 	andcc	r7, r0, r0, lsl #23
    19d8:	00000004 	andeq	r0, r0, r4
    19dc:	0000000c 	andeq	r0, r0, ip
    19e0:	000017fc 	strdeq	r1, [r0], -ip
    19e4:	30007b84 	andcc	r7, r0, r4, lsl #23
    19e8:	00000004 	andeq	r0, r0, r4
    19ec:	0000000c 	andeq	r0, r0, ip
    19f0:	000017fc 	strdeq	r1, [r0], -ip
    19f4:	30007b88 	andcc	r7, r0, r8, lsl #23
    19f8:	00000004 	andeq	r0, r0, r4
    19fc:	0000000c 	andeq	r0, r0, ip
    1a00:	000017fc 	strdeq	r1, [r0], -ip
    1a04:	30007b8c 	andcc	r7, r0, ip, lsl #23
    1a08:	00000004 	andeq	r0, r0, r4
    1a0c:	0000000c 	andeq	r0, r0, ip
    1a10:	000017fc 	strdeq	r1, [r0], -ip
    1a14:	30007b90 	mulcc	r0, r0, fp
    1a18:	00000004 	andeq	r0, r0, r4
    1a1c:	0000000c 	andeq	r0, r0, ip
    1a20:	000017fc 	strdeq	r1, [r0], -ip
    1a24:	30007b94 	mulcc	r0, r4, fp
    1a28:	00000004 	andeq	r0, r0, r4
    1a2c:	0000000c 	andeq	r0, r0, ip
    1a30:	000017fc 	strdeq	r1, [r0], -ip
    1a34:	30007b98 	mulcc	r0, r8, fp
    1a38:	00000004 	andeq	r0, r0, r4
    1a3c:	0000000c 	andeq	r0, r0, ip
    1a40:	000017fc 	strdeq	r1, [r0], -ip
    1a44:	30007b9c 	mulcc	r0, ip, fp
    1a48:	00000004 	andeq	r0, r0, r4
    1a4c:	0000000c 	andeq	r0, r0, ip
    1a50:	000017fc 	strdeq	r1, [r0], -ip
    1a54:	30007ba0 	andcc	r7, r0, r0, lsr #23
    1a58:	00000004 	andeq	r0, r0, r4
    1a5c:	0000000c 	andeq	r0, r0, ip
    1a60:	000017fc 	strdeq	r1, [r0], -ip
    1a64:	30007ba4 	andcc	r7, r0, r4, lsr #23
    1a68:	00000004 	andeq	r0, r0, r4
    1a6c:	0000000c 	andeq	r0, r0, ip
    1a70:	000017fc 	strdeq	r1, [r0], -ip
    1a74:	30007ba8 	andcc	r7, r0, r8, lsr #23
    1a78:	00000004 	andeq	r0, r0, r4
    1a7c:	0000000c 	andeq	r0, r0, ip
    1a80:	000017fc 	strdeq	r1, [r0], -ip
    1a84:	30007bac 	andcc	r7, r0, ip, lsr #23
    1a88:	00000004 	andeq	r0, r0, r4
    1a8c:	0000000c 	andeq	r0, r0, ip
    1a90:	000017fc 	strdeq	r1, [r0], -ip
    1a94:	30007bb0 	undefined instruction 0x30007bb0
    1a98:	00000004 	andeq	r0, r0, r4
    1a9c:	0000000c 	andeq	r0, r0, ip
    1aa0:	000017fc 	strdeq	r1, [r0], -ip
    1aa4:	30007bb4 	undefined instruction 0x30007bb4
    1aa8:	00000004 	andeq	r0, r0, r4
    1aac:	0000000c 	andeq	r0, r0, ip
    1ab0:	000017fc 	strdeq	r1, [r0], -ip
    1ab4:	30007bb8 	undefined instruction 0x30007bb8
    1ab8:	00000004 	andeq	r0, r0, r4
    1abc:	0000000c 	andeq	r0, r0, ip
    1ac0:	000017fc 	strdeq	r1, [r0], -ip
    1ac4:	30007bbc 	undefined instruction 0x30007bbc
    1ac8:	00000004 	andeq	r0, r0, r4
    1acc:	0000000c 	andeq	r0, r0, ip
    1ad0:	000017fc 	strdeq	r1, [r0], -ip
    1ad4:	30007bc0 	andcc	r7, r0, r0, asr #23
    1ad8:	00000004 	andeq	r0, r0, r4
    1adc:	0000000c 	andeq	r0, r0, ip
    1ae0:	000017fc 	strdeq	r1, [r0], -ip
    1ae4:	30007bc4 	andcc	r7, r0, r4, asr #23
    1ae8:	00000004 	andeq	r0, r0, r4
    1aec:	0000000c 	andeq	r0, r0, ip
    1af0:	000017fc 	strdeq	r1, [r0], -ip
    1af4:	30007bc8 	andcc	r7, r0, r8, asr #23
    1af8:	00000004 	andeq	r0, r0, r4
    1afc:	0000000c 	andeq	r0, r0, ip
    1b00:	000017fc 	strdeq	r1, [r0], -ip
    1b04:	30007bcc 	andcc	r7, r0, ip, asr #23
    1b08:	00000004 	andeq	r0, r0, r4
    1b0c:	0000000c 	andeq	r0, r0, ip
    1b10:	000017fc 	strdeq	r1, [r0], -ip
    1b14:	30007bd0 	ldrdcc	r7, [r0], -r0
    1b18:	00000004 	andeq	r0, r0, r4
    1b1c:	0000000c 	andeq	r0, r0, ip
    1b20:	000017fc 	strdeq	r1, [r0], -ip
    1b24:	30007bd4 	ldrdcc	r7, [r0], -r4
    1b28:	00000004 	andeq	r0, r0, r4
    1b2c:	0000000c 	andeq	r0, r0, ip
    1b30:	000017fc 	strdeq	r1, [r0], -ip
    1b34:	30007bd8 	ldrdcc	r7, [r0], -r8
    1b38:	00000004 	andeq	r0, r0, r4
    1b3c:	0000000c 	andeq	r0, r0, ip
    1b40:	000017fc 	strdeq	r1, [r0], -ip
    1b44:	30007bdc 	ldrdcc	r7, [r0], -ip
    1b48:	00000004 	andeq	r0, r0, r4
    1b4c:	0000000c 	andeq	r0, r0, ip
    1b50:	000017fc 	strdeq	r1, [r0], -ip
    1b54:	30007be0 	andcc	r7, r0, r0, ror #23
    1b58:	00000004 	andeq	r0, r0, r4
    1b5c:	0000000c 	andeq	r0, r0, ip
    1b60:	000017fc 	strdeq	r1, [r0], -ip
    1b64:	30007be4 	andcc	r7, r0, r4, ror #23
    1b68:	00000004 	andeq	r0, r0, r4
    1b6c:	0000000c 	andeq	r0, r0, ip
    1b70:	000017fc 	strdeq	r1, [r0], -ip
    1b74:	30007be8 	andcc	r7, r0, r8, ror #23
    1b78:	00000004 	andeq	r0, r0, r4
    1b7c:	0000000c 	andeq	r0, r0, ip
    1b80:	000017fc 	strdeq	r1, [r0], -ip
    1b84:	30007bec 	andcc	r7, r0, ip, ror #23
    1b88:	00000004 	andeq	r0, r0, r4
    1b8c:	0000000c 	andeq	r0, r0, ip
    1b90:	000017fc 	strdeq	r1, [r0], -ip
    1b94:	30007bf0 	strdcc	r7, [r0], -r0
    1b98:	00000004 	andeq	r0, r0, r4
    1b9c:	0000000c 	andeq	r0, r0, ip
    1ba0:	000017fc 	strdeq	r1, [r0], -ip
    1ba4:	30007bf4 	strdcc	r7, [r0], -r4
    1ba8:	00000004 	andeq	r0, r0, r4

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000048 	andeq	r0, r0, r8, asr #32
       4:	00000054 	andeq	r0, r0, r4, asr r0
       8:	545d0001 	ldrbpl	r0, [sp], #-1
       c:	b8000000 	stmdalt	r0, {}
      10:	02000000 	andeq	r0, r0, #0
      14:	00087d00 	andeq	r7, r8, r0, lsl #26
      18:	00000000 	andeq	r0, r0, r0
      1c:	b8000000 	stmdalt	r0, {}
      20:	bc000000 	stclt	0, cr0, [r0], {0}
      24:	01000000 	tsteq	r0, r0
      28:	00bc5d00 	adcseq	r5, ip, r0, lsl #26
      2c:	01240000 	teqeq	r4, r0
      30:	00020000 	andeq	r0, r2, r0
      34:	0000087d 	andeq	r0, r0, sp, ror r8
      38:	00000000 	andeq	r0, r0, r0
      3c:	002c0000 	eoreq	r0, ip, r0
      40:	00300000 	eorseq	r0, r0, r0
      44:	00010000 	andeq	r0, r1, r0
      48:	00000050 	andeq	r0, r0, r0, asr r0
      4c:	00000000 	andeq	r0, r0, r0
      50:	00003c00 	andeq	r3, r0, r0, lsl #24
      54:	00004000 	andeq	r4, r0, r0
      58:	50000100 	andpl	r0, r0, r0, lsl #2
	...
      64:	0000003c 	andeq	r0, r0, ip, lsr r0
      68:	00000044 	andeq	r0, r0, r4, asr #32
      6c:	00510001 	subseq	r0, r1, r1
      70:	00000000 	andeq	r0, r0, r0
      74:	68000000 	stmdavs	r0, {}
      78:	8c000000 	stchi	0, cr0, [r0], {0}
      7c:	01000000 	tsteq	r0, r0
      80:	00a05100 	adceq	r5, r0, r0, lsl #2
      84:	00bc0000 	adcseq	r0, ip, r0
      88:	00010000 	andeq	r0, r1, r0
      8c:	0000cc51 	andeq	ip, r0, r1, asr ip
      90:	0000ec00 	andeq	lr, r0, r0, lsl #24
      94:	51000100 	tstpl	r0, r0, lsl #2
	...
      a4:	00000020 	andeq	r0, r0, r0, lsr #32
      a8:	00500001 	subseq	r0, r0, r1
      ac:	00000000 	andeq	r0, r0, r0
      b0:	24000000 	strcs	r0, [r0]
      b4:	dc000000 	stcle	0, cr0, [r0], {0}
      b8:	01000000 	tsteq	r0, r0
      bc:	00e05000 	rsceq	r5, r0, r0
      c0:	01000000 	tsteq	r0, r0
      c4:	00010000 	andeq	r0, r1, r0
      c8:	00000050 	andeq	r0, r0, r0, asr r0
      cc:	00000000 	andeq	r0, r0, r0
      d0:	00002400 	andeq	r2, r0, r0, lsl #8
      d4:	00004c00 	andeq	r4, r0, r0, lsl #24
      d8:	51000100 	tstpl	r0, r0, lsl #2
      dc:	00000064 	andeq	r0, r0, r4, rrx
      e0:	00000078 	andeq	r0, r0, r8, ror r0
      e4:	00510001 	subseq	r0, r1, r1
      e8:	00000000 	andeq	r0, r0, r0
      ec:	24000000 	strcs	r0, [r0]
      f0:	28000000 	stmdacs	r0, {}
      f4:	01000000 	tsteq	r0, r0
      f8:	00005200 	andeq	r5, r0, r0, lsl #4
      fc:	00000000 	andeq	r0, r0, r0
     100:	00240000 	eoreq	r0, r4, r0
     104:	00340000 	eorseq	r0, r4, r0
     108:	00010000 	andeq	r0, r1, r0
     10c:	00004453 	andeq	r4, r0, r3, asr r4
     110:	00004800 	andeq	r4, r0, r0, lsl #16
     114:	53000100 	movwpl	r0, #256	; 0x100
     118:	00000064 	andeq	r0, r0, r4, rrx
     11c:	00000084 	andeq	r0, r0, r4, lsl #1
     120:	00530001 	subseq	r0, r3, r1
     124:	00000000 	andeq	r0, r0, r0
     128:	48000000 	stmdami	r0, {}
     12c:	64000000 	strvs	r0, [r0]
     130:	01000000 	tsteq	r0, r0
     134:	00945300 	addseq	r5, r4, r0, lsl #6
     138:	01000000 	tsteq	r0, r0
     13c:	00010000 	andeq	r0, r1, r0
     140:	0000005c 	andeq	r0, r0, ip, asr r0
     144:	00000000 	andeq	r0, r0, r0
     148:	00010000 	andeq	r0, r1, r0
     14c:	00012400 	andeq	r2, r1, r0, lsl #8
     150:	50000100 	andpl	r0, r0, r0, lsl #2
     154:	00000124 	andeq	r0, r0, r4, lsr #2
     158:	00000144 	andeq	r0, r0, r4, asr #2
     15c:	445c0001 	ldrbmi	r0, [ip], #-1
     160:	48000001 	stmdami	r0, {r0}
     164:	01000001 	tsteq	r0, r1
     168:	01485000 	cmpeq	r8, r0
     16c:	014c0000 	cmpeq	ip, r0
     170:	00010000 	andeq	r0, r1, r0
     174:	00014c5c 	andeq	r4, r1, ip, asr ip
     178:	00022000 	andeq	r2, r2, r0
     17c:	50000100 	andpl	r0, r0, r0, lsl #2
     180:	00000220 	andeq	r0, r0, r0, lsr #4
     184:	00000224 	andeq	r0, r0, r4, lsr #4
     188:	245c0001 	ldrbcs	r0, [ip], #-1
     18c:	3c000002 	stccc	0, cr0, [r0], {2}
     190:	01000002 	tsteq	r0, r2
     194:	023c5000 	eorseq	r5, ip, #0
     198:	02400000 	subeq	r0, r0, #0
     19c:	00010000 	andeq	r0, r1, r0
     1a0:	0002405c 	andeq	r4, r2, ip, asr r0
     1a4:	00025000 	andeq	r5, r2, r0
     1a8:	50000100 	andpl	r0, r0, r0, lsl #2
     1ac:	00000250 	andeq	r0, r0, r0, asr r2
     1b0:	00000254 	andeq	r0, r0, r4, asr r2
     1b4:	545c0001 	ldrbpl	r0, [ip], #-1
     1b8:	6c000002 	stcvs	0, cr0, [r0], {2}
     1bc:	01000002 	tsteq	r0, r2
     1c0:	026c5000 	rsbeq	r5, ip, #0
     1c4:	02700000 	rsbseq	r0, r0, #0
     1c8:	00010000 	andeq	r0, r1, r0
     1cc:	0002705c 	andeq	r7, r2, ip, asr r0
     1d0:	00028800 	andeq	r8, r2, r0, lsl #16
     1d4:	50000100 	andpl	r0, r0, r0, lsl #2
     1d8:	00000288 	andeq	r0, r0, r8, lsl #5
     1dc:	0000028c 	andeq	r0, r0, ip, lsl #5
     1e0:	8c5c0001 	mrrchi	0, 0, r0, ip, cr1
     1e4:	a4000002 	strge	r0, [r0], #-2
     1e8:	01000002 	tsteq	r0, r2
     1ec:	02a45000 	adceq	r5, r4, #0
     1f0:	02a80000 	adceq	r0, r8, #0
     1f4:	00010000 	andeq	r0, r1, r0
     1f8:	0000005c 	andeq	r0, r0, ip, asr r0
     1fc:	00000000 	andeq	r0, r0, r0
     200:	0002a800 	andeq	sl, r2, r0, lsl #16
     204:	0002ac00 	andeq	sl, r2, r0, lsl #24
     208:	5d000100 	stfpls	f0, [r0]
     20c:	000002ac 	andeq	r0, r0, ip, lsr #5
     210:	000002b0 	undefined instruction 0x000002b0
     214:	247d0002 	ldrbtcs	r0, [sp], #-2
     218:	000002b0 	undefined instruction 0x000002b0
     21c:	0000044c 	andeq	r0, r0, ip, asr #8
     220:	307d0002 	rsbscc	r0, sp, r2
	...
     22c:	000002a8 	andeq	r0, r0, r8, lsr #5
     230:	000002e8 	andeq	r0, r0, r8, ror #5
     234:	e8500001 	ldmda	r0, {r0}^
     238:	4c000002 	stcmi	0, cr0, [r0], {2}
     23c:	01000004 	tsteq	r0, r4
     240:	00005a00 	andeq	r5, r0, r0, lsl #20
     244:	00000000 	andeq	r0, r0, r0
     248:	02a80000 	adceq	r0, r8, #0
     24c:	02d80000 	sbcseq	r0, r8, #0
     250:	00010000 	andeq	r0, r1, r0
     254:	0002d851 	andeq	sp, r2, r1, asr r8
     258:	00044c00 	andeq	r4, r4, r0, lsl #24
     25c:	5b000100 	blpl	664 <DISABLE_IRQ+0x5e4>
	...
     268:	000002a8 	andeq	r0, r0, r8, lsr #5
     26c:	000002e8 	andeq	r0, r0, r8, ror #5
     270:	e8520001 	ldmda	r2, {r0}^
     274:	4c000002 	stcmi	0, cr0, [r0], {2}
     278:	01000004 	tsteq	r0, r4
     27c:	00005400 	andeq	r5, r0, r0, lsl #8
     280:	00000000 	andeq	r0, r0, r0
     284:	02a80000 	adceq	r0, r8, #0
     288:	02bc0000 	adcseq	r0, ip, #0
     28c:	00010000 	andeq	r0, r1, r0
     290:	0002bc53 	andeq	fp, r2, r3, asr ip
     294:	00044c00 	andeq	r4, r4, r0, lsl #24
     298:	58000100 	stmdapl	r0, {r8}
	...
     2a4:	000003c0 	andeq	r0, r0, r0, asr #7
     2a8:	000003cc 	andeq	r0, r0, ip, asr #7
     2ac:	38510001 	ldmdacc	r1, {r0}^
     2b0:	3c000004 	stccc	0, cr0, [r0], {4}
     2b4:	01000004 	tsteq	r0, r4
     2b8:	04485100 	strbeq	r5, [r8], #-256	; 0x100
     2bc:	044c0000 	strbeq	r0, [ip]
     2c0:	00010000 	andeq	r0, r1, r0
     2c4:	00000051 	andeq	r0, r0, r1, asr r0
     2c8:	00000000 	andeq	r0, r0, r0
     2cc:	0002e800 	andeq	lr, r2, r0, lsl #16
     2d0:	0002f400 	andeq	pc, r2, r0, lsl #8
     2d4:	52000100 	andpl	r0, r0, #0
     2d8:	00000340 	andeq	r0, r0, r0, asr #6
     2dc:	00000374 	andeq	r0, r0, r4, ror r3
     2e0:	f8520001 	undefined instruction 0xf8520001
     2e4:	10000003 	andne	r0, r0, r3
     2e8:	01000004 	tsteq	r0, r4
     2ec:	04185200 	ldreq	r5, [r8], #-512	; 0x200
     2f0:	042c0000 	strteq	r0, [ip]
     2f4:	00010000 	andeq	r0, r1, r0
     2f8:	00000052 	andeq	r0, r0, r2, asr r0
     2fc:	00000000 	andeq	r0, r0, r0
     300:	0002c400 	andeq	ip, r2, r0, lsl #8
     304:	00030400 	andeq	r0, r3, r0, lsl #8
     308:	77000200 	strvc	r0, [r0, -r0, lsl #4]
     30c:	0003047c 	andeq	r0, r3, ip, ror r4
     310:	00035000 	andeq	r5, r3, r0
     314:	91000200 	tstls	r0, r0, lsl #4
     318:	0003504c 	andeq	r5, r3, ip, asr #32
     31c:	00037400 	andeq	r7, r3, r0, lsl #8
     320:	77000200 	strvc	r0, [r0, -r0, lsl #4]
     324:	0003747c 	andeq	r7, r3, ip, ror r4
     328:	00044c00 	andeq	r4, r4, r0, lsl #24
     32c:	91000200 	tstls	r0, r0, lsl #4
     330:	0000004c 	andeq	r0, r0, ip, asr #32
     334:	00000000 	andeq	r0, r0, r0
     338:	0002e800 	andeq	lr, r2, r0, lsl #16
     33c:	0002f000 	andeq	pc, r2, r0
     340:	51000100 	tstpl	r0, r0, lsl #2
     344:	0000031c 	andeq	r0, r0, ip, lsl r3
     348:	00000374 	andeq	r0, r0, r4, ror r3
     34c:	00510001 	subseq	r0, r1, r1
     350:	00000000 	andeq	r0, r0, r0
     354:	4c000000 	stcmi	0, cr0, [r0], {0}
     358:	50000004 	andpl	r0, r0, r4
     35c:	01000004 	tsteq	r0, r4
     360:	04505d00 	ldrbeq	r5, [r0], #-3328	; 0xd00
     364:	04580000 	ldrbeq	r0, [r8]
     368:	00020000 	andeq	r0, r2, r0
     36c:	0000107d 	andeq	r1, r0, sp, ror r0
     370:	00000000 	andeq	r0, r0, r0
     374:	045c0000 	ldrbeq	r0, [ip]
     378:	04600000 	strbteq	r0, [r0]
     37c:	00010000 	andeq	r0, r1, r0
     380:	0004605d 	andeq	r6, r4, sp, asr r0
     384:	0004b000 	andeq	fp, r4, r0
     388:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
     38c:	00000010 	andeq	r0, r0, r0, lsl r0
     390:	00000000 	andeq	r0, r0, r0
     394:	00045c00 	andeq	r5, r4, r0, lsl #24
     398:	00046c00 	andeq	r6, r4, r0, lsl #24
     39c:	50000100 	andpl	r0, r0, r0, lsl #2
     3a0:	0000046c 	andeq	r0, r0, ip, ror #8
     3a4:	00000488 	andeq	r0, r0, r8, lsl #9
     3a8:	90540001 	subsls	r0, r4, r1
     3ac:	98000004 	stmdals	r0, {r2}
     3b0:	01000004 	tsteq	r0, r4
     3b4:	04a45400 	strteq	r5, [r4], #1024	; 0x400
     3b8:	04b00000 	ldrteq	r0, [r0]
     3bc:	00010000 	andeq	r0, r1, r0
     3c0:	00000054 	andeq	r0, r0, r4, asr r0
     3c4:	00000000 	andeq	r0, r0, r0
     3c8:	00045c00 	andeq	r5, r4, r0, lsl #24
     3cc:	00046c00 	andeq	r6, r4, r0, lsl #24
     3d0:	51000100 	tstpl	r0, r0, lsl #2
     3d4:	0000046c 	andeq	r0, r0, ip, ror #8
     3d8:	0000048c 	andeq	r0, r0, ip, lsl #9
     3dc:	90550001 	subsls	r0, r5, r1
     3e0:	b0000004 	andlt	r0, r0, r4
     3e4:	01000004 	tsteq	r0, r4
     3e8:	00005500 	andeq	r5, r0, r0, lsl #10
	...
     3f4:	00040000 	andeq	r0, r4, r0
     3f8:	00010000 	andeq	r0, r1, r0
     3fc:	0000045d 	andeq	r0, r0, sp, asr r4
     400:	00001800 	andeq	r1, r0, r0, lsl #16
     404:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
     408:	00000004 	andeq	r0, r0, r4
     40c:	00000000 	andeq	r0, r0, r0
     410:	00001800 	andeq	r1, r0, r0, lsl #16
     414:	00001c00 	andeq	r1, r0, r0, lsl #24
     418:	5d000100 	stfpls	f0, [r0]
     41c:	0000001c 	andeq	r0, r0, ip, lsl r0
     420:	00000030 	andeq	r0, r0, r0, lsr r0
     424:	047d0002 	ldrbteq	r0, [sp], #-2
	...
     430:	00000048 	andeq	r0, r0, r8, asr #32
     434:	00000060 	andeq	r0, r0, r0, rrx
     438:	605d0001 	subsvs	r0, sp, r1
     43c:	80000000 	andhi	r0, r0, r0
     440:	02000000 	andeq	r0, r0, #0
     444:	00087d00 	andeq	r7, r8, r0, lsl #26
     448:	00000000 	andeq	r0, r0, r0
     44c:	58000000 	stmdapl	r0, {}
     450:	70000000 	andvc	r0, r0, r0
     454:	01000000 	tsteq	r0, r0
     458:	00005200 	andeq	r5, r0, r0, lsl #4
	...
     464:	00040000 	andeq	r0, r4, r0
     468:	00010000 	andeq	r0, r1, r0
     46c:	0000045d 	andeq	r0, r0, sp, asr r4
     470:	00006000 	andeq	r6, r0, r0
     474:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
     478:	00000010 	andeq	r0, r0, r0, lsl r0
	...
     484:	00001000 	andeq	r1, r0, r0
     488:	50000100 	andpl	r0, r0, r0, lsl #2
     48c:	00000010 	andeq	r0, r0, r0, lsl r0
     490:	00000018 	andeq	r0, r0, r8, lsl r0
     494:	18540001 	ldmdane	r4, {r0}^
     498:	24000000 	strcs	r0, [r0]
     49c:	01000000 	tsteq	r0, r0
     4a0:	00245000 	eoreq	r5, r4, r0
     4a4:	00600000 	rsbeq	r0, r0, r0
     4a8:	00010000 	andeq	r0, r1, r0
     4ac:	00000054 	andeq	r0, r0, r4, asr r0
	...
     4b8:	00001000 	andeq	r1, r0, r0
     4bc:	51000100 	tstpl	r0, r0, lsl #2
     4c0:	00000010 	andeq	r0, r0, r0, lsl r0
     4c4:	00000060 	andeq	r0, r0, r0, rrx
     4c8:	00550001 	subseq	r0, r5, r1
     4cc:	00000000 	andeq	r0, r0, r0
     4d0:	60000000 	andvs	r0, r0, r0
     4d4:	64000000 	strvs	r0, [r0]
     4d8:	01000000 	tsteq	r0, r0
     4dc:	00645d00 	rsbeq	r5, r4, r0, lsl #26
     4e0:	006c0000 	rsbeq	r0, ip, r0
     4e4:	00020000 	andeq	r0, r2, r0
     4e8:	006c0c7d 	rsbeq	r0, ip, sp, ror ip
     4ec:	01040000 	tsteq	r4, r0
     4f0:	00020000 	andeq	r0, r2, r0
     4f4:	0000187d 	andeq	r1, r0, sp, ror r8
     4f8:	00000000 	andeq	r0, r0, r0
     4fc:	00600000 	rsbeq	r0, r0, r0
     500:	00940000 	addseq	r0, r4, r0
     504:	00010000 	andeq	r0, r1, r0
     508:	0000a050 	andeq	sl, r0, r0, asr r0
     50c:	0000a800 	andeq	sl, r0, r0, lsl #16
     510:	50000100 	andpl	r0, r0, r0, lsl #2
     514:	000000ac 	andeq	r0, r0, ip, lsr #1
     518:	000000d8 	ldrdeq	r0, [r0], -r8
     51c:	e4540001 	ldrb	r0, [r4], #-1
     520:	fc000000 	stc2	0, cr0, [r0], {0}
     524:	01000000 	tsteq	r0, r0
     528:	00005400 	andeq	r5, r0, r0, lsl #8
     52c:	00000000 	andeq	r0, r0, r0
     530:	00600000 	rsbeq	r0, r0, r0
     534:	00a40000 	adceq	r0, r4, r0
     538:	00010000 	andeq	r0, r1, r0
     53c:	0000c851 	andeq	ip, r0, r1, asr r8
     540:	0000e000 	andeq	lr, r0, r0
     544:	51000100 	tstpl	r0, r0, lsl #2
     548:	000000e8 	andeq	r0, r0, r8, ror #1
     54c:	000000f0 	strdeq	r0, [r0], -r0
     550:	00510001 	subseq	r0, r1, r1
     554:	00000000 	andeq	r0, r0, r0
     558:	c0000000 	andgt	r0, r0, r0
     55c:	cc000000 	stcgt	0, cr0, [r0], {0}
     560:	01000000 	tsteq	r0, r0
     564:	00005200 	andeq	r5, r0, r0, lsl #4
     568:	00000000 	andeq	r0, r0, r0
     56c:	01040000 	tsteq	r4, r0
     570:	01080000 	tsteq	r8, r0
     574:	00010000 	andeq	r0, r1, r0
     578:	0001085d 	andeq	r0, r1, sp, asr r8
     57c:	0001f000 	andeq	pc, r1, r0
     580:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
     584:	00000018 	andeq	r0, r0, r8, lsl r0
     588:	00000000 	andeq	r0, r0, r0
     58c:	00010400 	andeq	r0, r1, r0, lsl #8
     590:	00011800 	andeq	r1, r1, r0, lsl #16
     594:	50000100 	andpl	r0, r0, r0, lsl #2
     598:	00000118 	andeq	r0, r0, r8, lsl r1
     59c:	000001f0 	strdeq	r0, [r0], -r0
     5a0:	00540001 	subseq	r0, r4, r1
     5a4:	00000000 	andeq	r0, r0, r0
     5a8:	04000000 	streq	r0, [r0]
     5ac:	74000001 	strvc	r0, [r0], #-1
     5b0:	01000001 	tsteq	r0, r1
     5b4:	01ac5100 	undefined instruction 0x01ac5100
     5b8:	01b80000 	undefined instruction 0x01b80000
     5bc:	00010000 	andeq	r0, r1, r0
     5c0:	0001dc51 	andeq	sp, r1, r1, asr ip
     5c4:	0001f000 	andeq	pc, r1, r0
     5c8:	51000100 	tstpl	r0, r0, lsl #2
	...
     5d4:	00000104 	andeq	r0, r0, r4, lsl #2
     5d8:	000001d8 	ldrdeq	r0, [r0], -r8
     5dc:	dc520001 	mrrcle	0, 0, r0, r2, cr1
     5e0:	f0000001 	undefined instruction 0xf0000001
     5e4:	01000001 	tsteq	r0, r1
     5e8:	00005200 	andeq	r5, r0, r0, lsl #4
     5ec:	00000000 	andeq	r0, r0, r0
     5f0:	01040000 	tsteq	r4, r0
     5f4:	01c00000 	biceq	r0, r0, r0
     5f8:	00010000 	andeq	r0, r1, r0
     5fc:	0001dc53 	andeq	sp, r1, r3, asr ip
     600:	0001f000 	andeq	pc, r1, r0
     604:	53000100 	movwpl	r0, #256	; 0x100
	...
     610:	00000104 	andeq	r0, r0, r4, lsl #2
     614:	0000011c 	andeq	r0, r0, ip, lsl r1
     618:	00910002 	addseq	r0, r1, r2
     61c:	0000011c 	andeq	r0, r0, ip, lsl r1
     620:	00000150 	andeq	r0, r0, r0, asr r1
     624:	505c0001 	subspl	r0, ip, r1
     628:	e4000001 	str	r0, [r0], #-1
     62c:	02000001 	andeq	r0, r0, #1
     630:	e4789100 	ldrbt	r9, [r8], #-256	; 0x100
     634:	f0000001 	undefined instruction 0xf0000001
     638:	01000001 	tsteq	r0, r1
     63c:	00005c00 	andeq	r5, r0, r0, lsl #24
     640:	00000000 	andeq	r0, r0, r0
     644:	01680000 	cmneq	r8, r0
     648:	01d00000 	bicseq	r0, r0, r0
     64c:	00010000 	andeq	r0, r1, r0
     650:	00000050 	andeq	r0, r0, r0, asr r0
     654:	00000000 	andeq	r0, r0, r0
     658:	00015c00 	andeq	r5, r1, r0, lsl #24
     65c:	00017800 	andeq	r7, r1, r0, lsl #16
     660:	5e000100 	adfpls	f0, f0, f0
     664:	00000178 	andeq	r0, r0, r8, ror r1
     668:	000001e4 	andeq	r0, r0, r4, ror #3
     66c:	00560001 	subseq	r0, r6, r1
     670:	00000000 	andeq	r0, r0, r0
     674:	4c000000 	stcmi	0, cr0, [r0], {0}
     678:	5c000001 	stcpl	0, cr0, [r0], {1}
     67c:	01000001 	tsteq	r0, r1
     680:	01705e00 	cmneq	r0, r0, lsl #28
     684:	01980000 	orrseq	r0, r8, r0
     688:	00010000 	andeq	r0, r1, r0
     68c:	0001985e 	andeq	r9, r1, lr, asr r8
     690:	0001ac00 	andeq	sl, r1, r0, lsl #24
     694:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     698:	000001ac 	andeq	r0, r0, ip, lsr #3
     69c:	000001d8 	ldrdeq	r0, [r0], -r8
     6a0:	005e0001 	subseq	r0, lr, r1
     6a4:	00000000 	andeq	r0, r0, r0
     6a8:	50000000 	andpl	r0, r0, r0
     6ac:	d8000001 	stmdale	r0, {r0}
     6b0:	01000001 	tsteq	r0, r1
     6b4:	00005c00 	andeq	r5, r0, r0, lsl #24
	...
     6c0:	00080000 	andeq	r0, r8, r0
     6c4:	00010000 	andeq	r0, r1, r0
     6c8:	0000085d 	andeq	r0, r0, sp, asr r8
     6cc:	00009c00 	andeq	r9, r0, r0, lsl #24
     6d0:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
     6d4:	0000000c 	andeq	r0, r0, ip
	...
     6e0:	00001c00 	andeq	r1, r0, r0, lsl #24
     6e4:	50000100 	andpl	r0, r0, r0, lsl #2
     6e8:	0000003c 	andeq	r0, r0, ip, lsr r0
     6ec:	0000007c 	andeq	r0, r0, ip, ror r0
     6f0:	8c500001 	mrrchi	0, 0, r0, r0, cr1
     6f4:	90000000 	andls	r0, r0, r0
     6f8:	01000000 	tsteq	r0, r0
     6fc:	00005000 	andeq	r5, r0, r0
	...
     708:	00380000 	eorseq	r0, r8, r0
     70c:	00010000 	andeq	r0, r1, r0
     710:	00007c53 	andeq	r7, r0, r3, asr ip
     714:	00009c00 	andeq	r9, r0, r0, lsl #24
     718:	53000100 	movwpl	r0, #256	; 0x100
	...
     724:	00000034 	andeq	r0, r0, r4, lsr r0
     728:	0000004c 	andeq	r0, r0, ip, asr #32
     72c:	4c550001 	mrrcmi	0, 0, r0, r5, cr1
     730:	58000000 	stmdapl	r0, {}
     734:	01000000 	tsteq	r0, r0
     738:	00585400 	subseq	r5, r8, r0, lsl #8
     73c:	00840000 	addeq	r0, r4, r0
     740:	00010000 	andeq	r0, r1, r0
     744:	00000056 	andeq	r0, r0, r6, asr r0
     748:	00000000 	andeq	r0, r0, r0
     74c:	00009c00 	andeq	r9, r0, r0, lsl #24
     750:	0000a000 	andeq	sl, r0, r0
     754:	5d000100 	stfpls	f0, [r0]
     758:	000000a0 	andeq	r0, r0, r0, lsr #1
     75c:	000000a8 	andeq	r0, r0, r8, lsr #1
     760:	087d0002 	ldmdaeq	sp!, {r1}^
     764:	000000a8 	andeq	r0, r0, r8, lsr #1
     768:	00000128 	andeq	r0, r0, r8, lsr #2
     76c:	107d0002 	rsbsne	r0, sp, r2
	...
     778:	0000009c 	muleq	r0, ip, r0
     77c:	000000ac 	andeq	r0, r0, ip, lsr #1
     780:	ac500001 	mrrcge	0, 0, r0, r0, cr1
     784:	28000000 	stmdacs	r0, {}
     788:	01000001 	tsteq	r0, r1
     78c:	00005400 	andeq	r5, r0, r0, lsl #8
     790:	00000000 	andeq	r0, r0, r0
     794:	009c0000 	addseq	r0, ip, r0
     798:	00d40000 	sbcseq	r0, r4, r0
     79c:	00010000 	andeq	r0, r1, r0
     7a0:	0000e451 	andeq	lr, r0, r1, asr r4
     7a4:	0000f000 	andeq	pc, r0, r0
     7a8:	51000100 	tstpl	r0, r0, lsl #2
     7ac:	00000118 	andeq	r0, r0, r8, lsl r1
     7b0:	00000128 	andeq	r0, r0, r8, lsr #2
     7b4:	00510001 	subseq	r0, r1, r1
     7b8:	00000000 	andeq	r0, r0, r0
     7bc:	e4000000 	str	r0, [r0]
     7c0:	10000000 	andne	r0, r0, r0
     7c4:	01000001 	tsteq	r0, r1
     7c8:	00005300 	andeq	r5, r0, r0, lsl #6
     7cc:	00000000 	andeq	r0, r0, r0
     7d0:	01280000 	teqeq	r8, r0
     7d4:	012c0000 	teqeq	ip, r0
     7d8:	00010000 	andeq	r0, r1, r0
     7dc:	00012c5d 	andeq	r2, r1, sp, asr ip
     7e0:	00013400 	andeq	r3, r1, r0, lsl #8
     7e4:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
     7e8:	00013424 	andeq	r3, r1, r4, lsr #8
     7ec:	00033000 	andeq	r3, r3, r0
     7f0:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
     7f4:	00000030 	andeq	r0, r0, r0, lsr r0
     7f8:	00000000 	andeq	r0, r0, r0
     7fc:	00012800 	andeq	r2, r1, r0, lsl #16
     800:	00013c00 	andeq	r3, r1, r0, lsl #24
     804:	50000100 	andpl	r0, r0, r0, lsl #2
     808:	0000013c 	andeq	r0, r0, ip, lsr r1
     80c:	00000150 	andeq	r0, r0, r0, asr r1
     810:	50540001 	subspl	r0, r4, r1
     814:	58000001 	stmdapl	r0, {r0}
     818:	01000001 	tsteq	r0, r1
     81c:	01645000 	cmneq	r4, r0
     820:	01800000 	orreq	r0, r0, r0
     824:	00010000 	andeq	r0, r1, r0
     828:	00018c50 	andeq	r8, r1, r0, asr ip
     82c:	00027c00 	andeq	r7, r2, r0, lsl #24
     830:	54000100 	strpl	r0, [r0], #-256	; 0x100
     834:	00000288 	andeq	r0, r0, r8, lsl #5
     838:	000002a4 	andeq	r0, r0, r4, lsr #5
     83c:	a4540001 	ldrbge	r0, [r4], #-1
     840:	a8000002 	stmdage	r0, {r1}
     844:	01000002 	tsteq	r0, r2
     848:	02a85000 	adceq	r5, r8, #0
     84c:	03200000 	teqeq	r0, #0
     850:	00010000 	andeq	r0, r1, r0
     854:	00000054 	andeq	r0, r0, r4, asr r0
     858:	00000000 	andeq	r0, r0, r0
     85c:	00012800 	andeq	r2, r1, r0, lsl #16
     860:	00013c00 	andeq	r3, r1, r0, lsl #24
     864:	51000100 	tstpl	r0, r0, lsl #2
     868:	0000013c 	andeq	r0, r0, ip, lsr r1
     86c:	00000144 	andeq	r0, r0, r4, asr #2
     870:	44560001 	ldrbmi	r0, [r6], #-1
     874:	54000001 	strpl	r0, [r0], #-1
     878:	01000001 	tsteq	r0, r1
     87c:	01545100 	cmpeq	r4, r0, lsl #2
     880:	01640000 	cmneq	r4, r0
     884:	00010000 	andeq	r0, r1, r0
     888:	00016456 	andeq	r6, r1, r6, asr r4
     88c:	00017000 	andeq	r7, r1, r0
     890:	51000100 	tstpl	r0, r0, lsl #2
     894:	00000170 	andeq	r0, r0, r0, ror r1
     898:	00000330 	andeq	r0, r0, r0, lsr r3
     89c:	00560001 	subseq	r0, r6, r1
     8a0:	00000000 	andeq	r0, r0, r0
     8a4:	28000000 	stmdacs	r0, {}
     8a8:	68000001 	stmdavs	r0, {r0}
     8ac:	01000001 	tsteq	r0, r1
     8b0:	017c5200 	cmneq	ip, r0, lsl #4
     8b4:	02200000 	eoreq	r0, r0, #0
     8b8:	00010000 	andeq	r0, r1, r0
     8bc:	0002205a 	andeq	r2, r2, sl, asr r0
     8c0:	00022c00 	andeq	r2, r2, r0, lsl #24
     8c4:	51000100 	tstpl	r0, r0, lsl #2
     8c8:	0000022c 	andeq	r0, r0, ip, lsr #4
     8cc:	000002a0 	andeq	r0, r0, r0, lsr #5
     8d0:	a05a0001 	subsge	r0, sl, r1
     8d4:	a8000002 	stmdage	r0, {r1}
     8d8:	01000002 	tsteq	r0, r2
     8dc:	02a85200 	adceq	r5, r8, #0
     8e0:	02bc0000 	adcseq	r0, ip, #0
     8e4:	00010000 	andeq	r0, r1, r0
     8e8:	0002bc51 	andeq	fp, r2, r1, asr ip
     8ec:	00033000 	andeq	r3, r3, r0
     8f0:	5a000100 	bpl	cf8 <DISABLE_IRQ+0xc78>
	...
     8fc:	00000150 	andeq	r0, r0, r0, asr r1
     900:	000002a0 	andeq	r0, r0, r0, lsr #5
     904:	a4540001 	ldrbge	r0, [r4], #-1
     908:	30000002 	andcc	r0, r0, r2
     90c:	01000003 	tsteq	r0, r3
     910:	00005400 	andeq	r5, r0, r0, lsl #8
     914:	00000000 	andeq	r0, r0, r0
     918:	02580000 	subseq	r0, r8, #0
     91c:	025c0000 	subseq	r0, ip, #0
     920:	00010000 	andeq	r0, r1, r0
     924:	00027c53 	andeq	r7, r2, r3, asr ip
     928:	00028400 	andeq	r8, r2, r0, lsl #8
     92c:	53000100 	movwpl	r0, #256	; 0x100
     930:	000002ec 	andeq	r0, r0, ip, ror #5
     934:	00000300 	andeq	r0, r0, r0, lsl #6
     938:	14530001 	ldrbne	r0, [r3], #-1
     93c:	30000003 	andcc	r0, r0, r3
     940:	01000003 	tsteq	r0, r3
     944:	00005300 	andeq	r5, r0, r0, lsl #6
     948:	00000000 	andeq	r0, r0, r0
     94c:	01540000 	cmpeq	r4, r0
     950:	01640000 	cmneq	r4, r0
     954:	00010000 	andeq	r0, r1, r0
     958:	00017859 	andeq	r7, r1, r9, asr r8
     95c:	0002a000 	andeq	sl, r2, r0
     960:	59000100 	stmdbpl	r0, {r8}
     964:	000002a8 	andeq	r0, r0, r8, lsr #5
     968:	00000330 	andeq	r0, r0, r0, lsr r3
     96c:	00590001 	subseq	r0, r9, r1
     970:	00000000 	andeq	r0, r0, r0
     974:	54000000 	strpl	r0, [r0]
     978:	64000001 	strvs	r0, [r0], #-1
     97c:	01000001 	tsteq	r0, r1
     980:	018c5500 	orreq	r5, ip, r0, lsl #10
     984:	01b40000 	undefined instruction 0x01b40000
     988:	00010000 	andeq	r0, r1, r0
     98c:	00024c55 	andeq	r4, r2, r5, asr ip
     990:	00028800 	andeq	r8, r2, r0, lsl #16
     994:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     998:	00000310 	andeq	r0, r0, r0, lsl r3
     99c:	00000330 	andeq	r0, r0, r0, lsr r3
     9a0:	00550001 	subseq	r0, r5, r1
     9a4:	00000000 	andeq	r0, r0, r0
     9a8:	b4000000 	strlt	r0, [r0]
     9ac:	58000001 	stmdapl	r0, {r0}
     9b0:	01000002 	tsteq	r0, r2
     9b4:	02885500 	addeq	r5, r8, #0
     9b8:	02a00000 	adceq	r0, r0, #0
     9bc:	00010000 	andeq	r0, r1, r0
     9c0:	0002a855 	andeq	sl, r2, r5, asr r8
     9c4:	00031000 	andeq	r1, r3, r0
     9c8:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
     9d4:	000001bc 	undefined instruction 0x000001bc
     9d8:	000001d0 	ldrdeq	r0, [r0], -r0
     9dc:	185c0001 	ldmdane	ip, {r0}^
     9e0:	50000002 	andpl	r0, r0, r2
     9e4:	01000002 	tsteq	r0, r2
     9e8:	02885c00 	addeq	r5, r8, #0
     9ec:	02a00000 	adceq	r0, r0, #0
     9f0:	00010000 	andeq	r0, r1, r0
     9f4:	0002a85c 	andeq	sl, r2, ip, asr r8
     9f8:	0002c400 	andeq	ip, r2, r0, lsl #8
     9fc:	5c000100 	stfpls	f0, [r0], {0}
     a00:	000002c4 	andeq	r0, r0, r4, asr #5
     a04:	000002e0 	andeq	r0, r0, r0, ror #5
     a08:	e0530001 	subs	r0, r3, r1
     a0c:	04000002 	streq	r0, [r0], #-2
     a10:	01000003 	tsteq	r0, r3
     a14:	00005c00 	andeq	r5, r0, r0, lsl #24
     a18:	00000000 	andeq	r0, r0, r0
     a1c:	01b80000 	undefined instruction 0x01b80000
     a20:	01cc0000 	biceq	r0, ip, r0
     a24:	00010000 	andeq	r0, r1, r0
     a28:	0001f453 	andeq	pc, r1, r3, asr r4
     a2c:	00025000 	andeq	r5, r2, r0
     a30:	53000100 	movwpl	r0, #256	; 0x100
     a34:	00000288 	andeq	r0, r0, r8, lsl #5
     a38:	000002a0 	andeq	r0, r0, r0, lsr #5
     a3c:	a8530001 	ldmdage	r3, {r0}^
     a40:	b4000002 	strlt	r0, [r0], #-2
     a44:	01000002 	tsteq	r0, r2
     a48:	00005300 	andeq	r5, r0, r0, lsl #6
     a4c:	00000000 	andeq	r0, r0, r0
     a50:	01a40000 	undefined instruction 0x01a40000
     a54:	01d00000 	bicseq	r0, r0, r0
     a58:	00010000 	andeq	r0, r1, r0
     a5c:	0001dc52 	andeq	sp, r1, r2, asr ip
     a60:	00025000 	andeq	r5, r2, r0
     a64:	52000100 	andpl	r0, r0, #0
     a68:	00000288 	andeq	r0, r0, r8, lsl #5
     a6c:	000002a0 	andeq	r0, r0, r0, lsr #5
     a70:	a8520001 	ldmdage	r2, {r0}^
     a74:	04000002 	streq	r0, [r0], #-2
     a78:	01000003 	tsteq	r0, r3
     a7c:	00005200 	andeq	r5, r0, r0, lsl #4
	...
     a88:	00040000 	andeq	r0, r4, r0
     a8c:	00010000 	andeq	r0, r1, r0
     a90:	0000045d 	andeq	r0, r0, sp, asr r4
     a94:	00010400 	andeq	r0, r1, r0, lsl #8
     a98:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
     a9c:	00000010 	andeq	r0, r0, r0, lsl r0
	...
     aa8:	00000c00 	andeq	r0, r0, r0, lsl #24
     aac:	50000100 	andpl	r0, r0, r0, lsl #2
     ab0:	0000000c 	andeq	r0, r0, ip
     ab4:	00000104 	andeq	r0, r0, r4, lsl #2
     ab8:	00540001 	subseq	r0, r4, r1
     abc:	00000000 	andeq	r0, r0, r0
     ac0:	04000000 	streq	r0, [r0]
     ac4:	08000001 	stmdaeq	r0, {r0}
     ac8:	01000001 	tsteq	r0, r1
     acc:	01085d00 	tsteq	r8, r0, lsl #26
     ad0:	02880000 	addeq	r0, r8, #0
     ad4:	00020000 	andeq	r0, r2, r0
     ad8:	0000207d 	andeq	r2, r0, sp, ror r0
     adc:	00000000 	andeq	r0, r0, r0
     ae0:	01040000 	tsteq	r4, r0
     ae4:	011c0000 	tsteq	ip, r0
     ae8:	00010000 	andeq	r0, r1, r0
     aec:	00011c50 	andeq	r1, r1, r0, asr ip
     af0:	0001f800 	andeq	pc, r1, r0, lsl #16
     af4:	54000100 	strpl	r0, [r0], #-256	; 0x100
     af8:	0000022c 	andeq	r0, r0, ip, lsr #4
     afc:	00000278 	andeq	r0, r0, r8, ror r2
     b00:	00540001 	subseq	r0, r4, r1
     b04:	00000000 	andeq	r0, r0, r0
     b08:	04000000 	streq	r0, [r0]
     b0c:	1c000001 	stcne	0, cr0, [r0], {1}
     b10:	01000001 	tsteq	r0, r1
     b14:	011c5100 	tsteq	ip, r0, lsl #2
     b18:	01780000 	cmneq	r8, r0
     b1c:	00010000 	andeq	r0, r1, r0
     b20:	00022c57 	andeq	r2, r2, r7, asr ip
     b24:	00024400 	andeq	r4, r2, r0, lsl #8
     b28:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
     b34:	00000104 	andeq	r0, r0, r4, lsl #2
     b38:	0000011c 	andeq	r0, r0, ip, lsl r1
     b3c:	1c520001 	mrrcne	0, 0, r0, r2, cr1
     b40:	74000001 	strvc	r0, [r0], #-1
     b44:	01000001 	tsteq	r0, r1
     b48:	022c5600 	eoreq	r5, ip, #0
     b4c:	02780000 	rsbseq	r0, r8, #0
     b50:	00010000 	andeq	r0, r1, r0
     b54:	00000056 	andeq	r0, r0, r6, asr r0
     b58:	00000000 	andeq	r0, r0, r0
     b5c:	00015c00 	andeq	r5, r1, r0, lsl #24
     b60:	00016400 	andeq	r6, r1, r0, lsl #8
     b64:	56000100 	strpl	r0, [r0], -r0, lsl #2
     b68:	00000174 	andeq	r0, r0, r4, ror r1
     b6c:	0000018c 	andeq	r0, r0, ip, lsl #3
     b70:	a8560001 	ldmdage	r6, {r0}^
     b74:	b4000001 	strlt	r0, [r0], #-1
     b78:	01000001 	tsteq	r0, r1
     b7c:	01f05600 	mvnseq	r5, r0, lsl #12
     b80:	022c0000 	eoreq	r0, ip, #0
     b84:	00010000 	andeq	r0, r1, r0
     b88:	00027856 	andeq	r7, r2, r6, asr r8
     b8c:	00028800 	andeq	r8, r2, r0, lsl #16
     b90:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     b9c:	0000015c 	andeq	r0, r0, ip, asr r1
     ba0:	00000164 	andeq	r0, r0, r4, ror #2
     ba4:	8c560001 	mrrchi	0, 0, r0, r6, cr1
     ba8:	2c000001 	stccs	0, cr0, [r0], {1}
     bac:	01000002 	tsteq	r0, r2
     bb0:	02785600 	rsbseq	r5, r8, #0
     bb4:	02880000 	addeq	r0, r8, #0
     bb8:	00010000 	andeq	r0, r1, r0
     bbc:	00000056 	andeq	r0, r0, r6, asr r0
     bc0:	00000000 	andeq	r0, r0, r0
     bc4:	00015c00 	andeq	r5, r1, r0, lsl #24
     bc8:	00016400 	andeq	r6, r1, r0, lsl #8
     bcc:	5a000100 	bpl	fd4 <DISABLE_IRQ+0xf54>
     bd0:	0000018c 	andeq	r0, r0, ip, lsl #3
     bd4:	0000022c 	andeq	r0, r0, ip, lsr #4
     bd8:	785a0001 	ldmdavc	sl, {r0}^
     bdc:	88000002 	stmdahi	r0, {r1}
     be0:	01000002 	tsteq	r0, r2
     be4:	00005a00 	andeq	r5, r0, r0, lsl #20
     be8:	00000000 	andeq	r0, r0, r0
     bec:	015c0000 	cmpeq	ip, r0
     bf0:	01640000 	cmneq	r4, r0
     bf4:	00010000 	andeq	r0, r1, r0
     bf8:	00018c59 	andeq	r8, r1, r9, asr ip
     bfc:	00022c00 	andeq	r2, r2, r0, lsl #24
     c00:	59000100 	stmdbpl	r0, {r8}
     c04:	00000278 	andeq	r0, r0, r8, ror r2
     c08:	00000288 	andeq	r0, r0, r8, lsl #5
     c0c:	00590001 	subseq	r0, r9, r1
     c10:	00000000 	andeq	r0, r0, r0
     c14:	88000000 	stmdahi	r0, {}
     c18:	8c000002 	stchi	0, cr0, [r0], {2}
     c1c:	01000002 	tsteq	r0, r2
     c20:	028c5d00 	addeq	r5, ip, #0
     c24:	02940000 	addseq	r0, r4, #0
     c28:	00020000 	andeq	r0, r2, r0
     c2c:	0294107d 	addseq	r1, r4, #125	; 0x7d
     c30:	03000000 	movweq	r0, #0
     c34:	00020000 	andeq	r0, r2, r0
     c38:	0000187d 	andeq	r1, r0, sp, ror r8
     c3c:	00000000 	andeq	r0, r0, r0
     c40:	02880000 	addeq	r0, r8, #0
     c44:	02a00000 	adceq	r0, r0, #0
     c48:	00010000 	andeq	r0, r1, r0
     c4c:	0002a050 	andeq	sl, r2, r0, asr r0
     c50:	0002d800 	andeq	sp, r2, r0, lsl #16
     c54:	53000100 	movwpl	r0, #256	; 0x100
     c58:	000002d8 	ldrdeq	r0, [r0], -r8
     c5c:	000002e8 	andeq	r0, r0, r8, ror #5
     c60:	f0530001 	undefined instruction 0xf0530001
     c64:	00000002 	andeq	r0, r0, r2
     c68:	01000003 	tsteq	r0, r3
     c6c:	00005300 	andeq	r5, r0, r0, lsl #6
     c70:	00000000 	andeq	r0, r0, r0
     c74:	02880000 	addeq	r0, r8, #0
     c78:	02a40000 	adceq	r0, r4, #0
     c7c:	00010000 	andeq	r0, r1, r0
     c80:	0002a451 	andeq	sl, r2, r1, asr r4
     c84:	00030000 	andeq	r0, r3, r0
     c88:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     c94:	00000288 	andeq	r0, r0, r8, lsl #5
     c98:	000002a4 	andeq	r0, r0, r4, lsr #5
     c9c:	a4520001 	ldrbge	r0, [r2], #-1
     ca0:	bc000002 	stclt	0, cr0, [r0], {2}
     ca4:	01000002 	tsteq	r0, r2
     ca8:	02bc5c00 	adcseq	r5, ip, #0
     cac:	02d80000 	sbcseq	r0, r8, #0
     cb0:	00010000 	andeq	r0, r1, r0
     cb4:	0002d852 	andeq	sp, r2, r2, asr r8
     cb8:	0002e000 	andeq	lr, r2, r0
     cbc:	52000100 	andpl	r0, r0, #0
     cc0:	000002e0 	andeq	r0, r0, r0, ror #5
     cc4:	000002f0 	strdeq	r0, [r0], -r0
     cc8:	f05c0001 	undefined instruction 0xf05c0001
     ccc:	00000002 	andeq	r0, r0, r2
     cd0:	01000003 	tsteq	r0, r3
     cd4:	00005200 	andeq	r5, r0, r0, lsl #4
     cd8:	00000000 	andeq	r0, r0, r0
     cdc:	03000000 	movweq	r0, #0
     ce0:	03040000 	movweq	r0, #16384	; 0x4000
     ce4:	00010000 	andeq	r0, r1, r0
     ce8:	0003045d 	andeq	r0, r3, sp, asr r4
     cec:	00056800 	andeq	r6, r5, r0, lsl #16
     cf0:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
     cf4:	00000028 	andeq	r0, r0, r8, lsr #32
     cf8:	00000000 	andeq	r0, r0, r0
     cfc:	00030000 	andeq	r0, r3, r0
     d00:	00032000 	andeq	r2, r3, r0
     d04:	50000100 	andpl	r0, r0, r0, lsl #2
     d08:	00000320 	andeq	r0, r0, r0, lsr #6
     d0c:	00000568 	andeq	r0, r0, r8, ror #10
     d10:	00550001 	subseq	r0, r5, r1
	...
     d1c:	20000003 	andcs	r0, r0, r3
     d20:	01000003 	tsteq	r0, r3
     d24:	03205100 	teqeq	r0, #0
     d28:	04180000 	ldreq	r0, [r8]
     d2c:	00010000 	andeq	r0, r1, r0
     d30:	00041c56 	andeq	r1, r4, r6, asr ip
     d34:	00052400 	andeq	r2, r5, r0, lsl #8
     d38:	56000100 	strpl	r0, [r0], -r0, lsl #2
     d3c:	0000054c 	andeq	r0, r0, ip, asr #10
     d40:	00000554 	andeq	r0, r0, r4, asr r5
     d44:	00560001 	subseq	r0, r6, r1
	...
     d50:	20000003 	andcs	r0, r0, r3
     d54:	01000003 	tsteq	r0, r3
     d58:	03205200 	teqeq	r0, #0
     d5c:	03400000 	movteq	r0, #0
     d60:	00010000 	andeq	r0, r1, r0
     d64:	00034054 	andeq	r4, r3, r4, asr r0
     d68:	00035800 	andeq	r5, r3, r0, lsl #16
     d6c:	52000100 	andpl	r0, r0, #0
     d70:	00000358 	andeq	r0, r0, r8, asr r3
     d74:	000003d8 	ldrdeq	r0, [r0], -r8
     d78:	fc540001 	mrrc2	0, 0, r0, r4, cr1
     d7c:	24000003 	strcs	r0, [r0], #-3
     d80:	01000004 	tsteq	r0, r4
     d84:	04585400 	ldrbeq	r5, [r8], #-1024	; 0x400
     d88:	04840000 	streq	r0, [r4]
     d8c:	00010000 	andeq	r0, r1, r0
     d90:	00049854 	andeq	r9, r4, r4, asr r8
     d94:	00052000 	andeq	r2, r5, r0
     d98:	54000100 	strpl	r0, [r0], #-256	; 0x100
     d9c:	0000054c 	andeq	r0, r0, ip, asr #10
     da0:	00000554 	andeq	r0, r0, r4, asr r5
     da4:	00540001 	subseq	r0, r4, r1
	...
     db0:	04000003 	streq	r0, [r0], #-3
     db4:	01000003 	tsteq	r0, r3
     db8:	03185300 	tsteq	r8, #0
     dbc:	03200000 	teqeq	r0, #0
     dc0:	00010000 	andeq	r0, r1, r0
     dc4:	00032053 	andeq	r2, r3, r3, asr r0
     dc8:	00056800 	andeq	r6, r5, r0, lsl #16
     dcc:	5b000100 	blpl	11d4 <DISABLE_IRQ+0x1154>
	...
     dd8:	00000300 	andeq	r0, r0, r0, lsl #6
     ddc:	00000320 	andeq	r0, r0, r0, lsr #6
     de0:	00910002 	addseq	r0, r1, r2
     de4:	00000320 	andeq	r0, r0, r0, lsr #6
     de8:	000003d0 	ldrdeq	r0, [r0], -r0
     dec:	78910002 	ldmvc	r1, {r1}
     df0:	000003d0 	ldrdeq	r0, [r0], -r0
     df4:	000003ec 	andeq	r0, r0, ip, ror #7
     df8:	ec580001 	mrrc	0, 0, r0, r8, cr1
     dfc:	58000003 	stmdapl	r0, {r0, r1}
     e00:	02000004 	andeq	r0, r0, #4
     e04:	58789100 	ldmdapl	r8!, {r8, ip, pc}^
     e08:	74000004 	strvc	r0, [r0], #-4
     e0c:	01000004 	tsteq	r0, r4
     e10:	04745800 	ldrbteq	r5, [r4], #-2048	; 0x800
     e14:	048c0000 	streq	r0, [ip]
     e18:	00020000 	andeq	r0, r2, r0
     e1c:	048c7891 	streq	r7, [ip], #2193	; 0x891
     e20:	04940000 	ldreq	r0, [r4]
     e24:	00010000 	andeq	r0, r1, r0
     e28:	00049458 	andeq	r9, r4, r8, asr r4
     e2c:	00049800 	andeq	r9, r4, r0, lsl #16
     e30:	91000200 	tstls	r0, r0, lsl #4
     e34:	00049878 	andeq	r9, r4, r8, ror r8
     e38:	0004fc00 	andeq	pc, r4, r0, lsl #24
     e3c:	58000100 	stmdapl	r0, {r8}
     e40:	000004fc 	strdeq	r0, [r0], -ip
     e44:	0000054c 	andeq	r0, r0, ip, asr #10
     e48:	78910002 	ldmvc	r1, {r1}
     e4c:	0000054c 	andeq	r0, r0, ip, asr #10
     e50:	00000554 	andeq	r0, r0, r4, asr r5
     e54:	54580001 	ldrbpl	r0, [r8], #-1
     e58:	68000005 	stmdavs	r0, {r0, r2}
     e5c:	02000005 	andeq	r0, r0, #5
     e60:	00789100 	rsbseq	r9, r8, r0, lsl #2
     e64:	00000000 	andeq	r0, r0, r0
     e68:	68000000 	stmdavs	r0, {}
     e6c:	70000005 	andvc	r0, r0, r5
     e70:	01000005 	tsteq	r0, r5
     e74:	05705d00 	ldrbeq	r5, [r0, #-3328]!	; 0xd00
     e78:	05c40000 	strbeq	r0, [r4]
     e7c:	00020000 	andeq	r0, r2, r0
     e80:	0000107d 	andeq	r1, r0, sp, ror r0
     e84:	00000000 	andeq	r0, r0, r0
     e88:	05680000 	strbeq	r0, [r8]!
     e8c:	057c0000 	ldrbeq	r0, [ip]!
     e90:	00010000 	andeq	r0, r1, r0
     e94:	00057c50 	andeq	r7, r5, r0, asr ip
     e98:	0005b400 	andeq	fp, r5, r0, lsl #8
     e9c:	5c000100 	stfpls	f0, [r0], {0}
     ea0:	000005b8 	undefined instruction 0x000005b8
     ea4:	000005c4 	andeq	r0, r0, r4, asr #11
     ea8:	005c0001 	subseq	r0, ip, r1
     eac:	00000000 	andeq	r0, r0, r0
     eb0:	68000000 	stmdavs	r0, {}
     eb4:	80000005 	andhi	r0, r0, r5
     eb8:	01000005 	tsteq	r0, r5
     ebc:	05805100 	streq	r5, [r0, #256]	; 0x100
     ec0:	05c40000 	strbeq	r0, [r4]
     ec4:	00010000 	andeq	r0, r1, r0
     ec8:	00000055 	andeq	r0, r0, r5, asr r0
     ecc:	00000000 	andeq	r0, r0, r0
     ed0:	00056800 	andeq	r6, r5, r0, lsl #16
     ed4:	00058000 	andeq	r8, r5, r0
     ed8:	52000100 	andpl	r0, r0, #0
     edc:	00000580 	andeq	r0, r0, r0, lsl #11
     ee0:	000005b4 	undefined instruction 0x000005b4
     ee4:	b8530001 	ldmdalt	r3, {r0}^
     ee8:	c4000005 	strgt	r0, [r0], #-5
     eec:	01000005 	tsteq	r0, r5
     ef0:	00005300 	andeq	r5, r0, r0, lsl #6
	...
     efc:	00040000 	andeq	r0, r4, r0
     f00:	00010000 	andeq	r0, r1, r0
     f04:	0000045d 	andeq	r0, r0, sp, asr r4
     f08:	00006800 	andeq	r6, r0, r0, lsl #16
     f0c:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
     f10:	00000010 	andeq	r0, r0, r0, lsl r0
	...
     f1c:	00003800 	andeq	r3, r0, r0, lsl #16
     f20:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     f2c:	00000014 	andeq	r0, r0, r4, lsl r0
     f30:	0000003c 	andeq	r0, r0, ip, lsr r0
     f34:	00510001 	subseq	r0, r1, r1
     f38:	00000000 	andeq	r0, r0, r0
     f3c:	18000000 	stmdane	r0, {}
     f40:	3c000000 	stccc	0, cr0, [r0], {0}
     f44:	01000000 	tsteq	r0, r0
     f48:	00005300 	andeq	r5, r0, r0, lsl #6
	...
     f54:	00040000 	andeq	r0, r4, r0
     f58:	00010000 	andeq	r0, r1, r0
     f5c:	0000045d 	andeq	r0, r0, sp, asr r4
     f60:	00004c00 	andeq	r4, r0, r0, lsl #24
     f64:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
     f68:	00000004 	andeq	r0, r0, r4
	...
     f74:	00004400 	andeq	r4, r0, r0, lsl #8
     f78:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     f88:	00000014 	andeq	r0, r0, r4, lsl r0
     f8c:	00530001 	subseq	r0, r3, r1
     f90:	00000000 	andeq	r0, r0, r0
     f94:	4c000000 	stcmi	0, cr0, [r0], {0}
     f98:	50000000 	andpl	r0, r0, r0
     f9c:	01000000 	tsteq	r0, r0
     fa0:	00505d00 	subseq	r5, r0, r0, lsl #26
     fa4:	00580000 	subseq	r0, r8, r0
     fa8:	00020000 	andeq	r0, r2, r0
     fac:	0058087d 	subseq	r0, r8, sp, ror r8
     fb0:	00bc0000 	adcseq	r0, ip, r0
     fb4:	00020000 	andeq	r0, r2, r0
     fb8:	0000187d 	andeq	r1, r0, sp, ror r8
     fbc:	00000000 	andeq	r0, r0, r0
     fc0:	004c0000 	subeq	r0, ip, r0
     fc4:	005c0000 	subseq	r0, ip, r0
     fc8:	00010000 	andeq	r0, r1, r0
     fcc:	00005c50 	andeq	r5, r0, r0, asr ip
     fd0:	0000bc00 	andeq	fp, r0, r0, lsl #24
     fd4:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     fe0:	0000004c 	andeq	r0, r0, ip, asr #32
     fe4:	00000080 	andeq	r0, r0, r0, lsl #1
     fe8:	b0510001 	subslt	r0, r1, r1
     fec:	b4000000 	strlt	r0, [r0]
     ff0:	01000000 	tsteq	r0, r0
     ff4:	00005100 	andeq	r5, r0, r0, lsl #2
     ff8:	00000000 	andeq	r0, r0, r0
     ffc:	004c0000 	subeq	r0, ip, r0
    1000:	00840000 	addeq	r0, r4, r0
    1004:	00010000 	andeq	r0, r1, r0
    1008:	00009c52 	andeq	r9, r0, r2, asr ip
    100c:	0000a000 	andeq	sl, r0, r0
    1010:	52000100 	andpl	r0, r0, #0
	...
    101c:	0000004c 	andeq	r0, r0, ip, asr #32
    1020:	00000088 	andeq	r0, r0, r8, lsl #1
    1024:	a8530001 	ldmdage	r3, {r0}^
    1028:	ac000000 	stcge	0, cr0, [r0], {0}
    102c:	01000000 	tsteq	r0, r0
    1030:	00005300 	andeq	r5, r0, r0, lsl #6
    1034:	00000000 	andeq	r0, r0, r0
    1038:	00bc0000 	adcseq	r0, ip, r0
    103c:	00c00000 	sbceq	r0, r0, r0
    1040:	00010000 	andeq	r0, r1, r0
    1044:	0000c05d 	andeq	ip, r0, sp, asr r0
    1048:	00015000 	andeq	r5, r1, r0
    104c:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    1050:	00000010 	andeq	r0, r0, r0, lsl r0
    1054:	00000000 	andeq	r0, r0, r0
    1058:	0000bc00 	andeq	fp, r0, r0, lsl #24
    105c:	0000c800 	andeq	ip, r0, r0, lsl #16
    1060:	50000100 	andpl	r0, r0, r0, lsl #2
    1064:	000000c8 	andeq	r0, r0, r8, asr #1
    1068:	00000150 	andeq	r0, r0, r0, asr r1
    106c:	00550001 	subseq	r0, r5, r1
    1070:	00000000 	andeq	r0, r0, r0
    1074:	50000000 	andpl	r0, r0, r0
    1078:	54000001 	strpl	r0, [r0], #-1
    107c:	01000001 	tsteq	r0, r1
    1080:	01545d00 	cmpeq	r4, r0, lsl #26
    1084:	02080000 	andeq	r0, r8, #0
    1088:	00020000 	andeq	r0, r2, r0
    108c:	0000107d 	andeq	r1, r0, sp, ror r0
    1090:	00000000 	andeq	r0, r0, r0
    1094:	01500000 	cmpeq	r0, r0
    1098:	015c0000 	cmpeq	ip, r0
    109c:	00010000 	andeq	r0, r1, r0
    10a0:	00015c50 	andeq	r5, r1, r0, asr ip
    10a4:	0001d000 	andeq	sp, r1, r0
    10a8:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    10b4:	00000208 	andeq	r0, r0, r8, lsl #4
    10b8:	0000020c 	andeq	r0, r0, ip, lsl #4
    10bc:	0c5d0001 	mrrceq	0, 0, r0, sp, cr1
    10c0:	14000002 	strne	r0, [r0], #-2
    10c4:	02000002 	andeq	r0, r0, #2
    10c8:	141c7d00 	ldrne	r7, [ip], #-3328	; 0xd00
    10cc:	ec000002 	stc	0, cr0, [r0], {2}
    10d0:	02000003 	andeq	r0, r0, #3
    10d4:	00287d00 	eoreq	r7, r8, r0, lsl #26
    10d8:	00000000 	andeq	r0, r0, r0
    10dc:	08000000 	stmdaeq	r0, {}
    10e0:	28000002 	stmdacs	r0, {r1}
    10e4:	01000002 	tsteq	r0, r2
    10e8:	02285000 	eoreq	r5, r8, #0
    10ec:	03ec0000 	mvneq	r0, #0
    10f0:	00010000 	andeq	r0, r1, r0
    10f4:	00000055 	andeq	r0, r0, r5, asr r0
    10f8:	00000000 	andeq	r0, r0, r0
    10fc:	00020800 	andeq	r0, r2, r0, lsl #16
    1100:	00022800 	andeq	r2, r2, r0, lsl #16
    1104:	51000100 	tstpl	r0, r0, lsl #2
    1108:	00000228 	andeq	r0, r0, r8, lsr #4
    110c:	00000234 	andeq	r0, r0, r4, lsr r2
    1110:	34540001 	ldrbcc	r0, [r4], #-1
    1114:	58000002 	stmdapl	r0, {r1}
    1118:	01000002 	tsteq	r0, r2
    111c:	02585100 	subseq	r5, r8, #0
    1120:	02680000 	rsbeq	r0, r8, #0
    1124:	00010000 	andeq	r0, r1, r0
    1128:	00026854 	andeq	r6, r2, r4, asr r8
    112c:	00027000 	andeq	r7, r2, r0
    1130:	51000100 	tstpl	r0, r0, lsl #2
    1134:	00000270 	andeq	r0, r0, r0, ror r2
    1138:	000003ec 	andeq	r0, r0, ip, ror #7
    113c:	00540001 	subseq	r0, r4, r1
    1140:	00000000 	andeq	r0, r0, r0
    1144:	08000000 	stmdaeq	r0, {}
    1148:	28000002 	stmdacs	r0, {r1}
    114c:	01000002 	tsteq	r0, r2
    1150:	02285200 	eoreq	r5, r8, #0
    1154:	03ec0000 	mvneq	r0, #0
    1158:	00010000 	andeq	r0, r1, r0
    115c:	00000056 	andeq	r0, r0, r6, asr r0
    1160:	00000000 	andeq	r0, r0, r0
    1164:	00020800 	andeq	r0, r2, r0, lsl #16
    1168:	00026c00 	andeq	r6, r2, r0, lsl #24
    116c:	53000100 	movwpl	r0, #256	; 0x100
    1170:	000002a4 	andeq	r0, r0, r4, lsr #5
    1174:	000002a8 	andeq	r0, r0, r8, lsr #5
    1178:	bc530001 	mrrclt	0, 0, r0, r3, cr1
    117c:	c0000002 	andgt	r0, r0, r2
    1180:	01000002 	tsteq	r0, r2
    1184:	02ec5300 	rsceq	r5, ip, #0
    1188:	02f00000 	rscseq	r0, r0, #0
    118c:	00010000 	andeq	r0, r1, r0
    1190:	00039c53 	andeq	r9, r3, r3, asr ip
    1194:	0003a000 	andeq	sl, r3, r0
    1198:	53000100 	movwpl	r0, #256	; 0x100
    119c:	000003d0 	ldrdeq	r0, [r0], -r0
    11a0:	000003dc 	ldrdeq	r0, [r0], -ip
    11a4:	00530001 	subseq	r0, r3, r1
    11a8:	00000000 	andeq	r0, r0, r0
    11ac:	08000000 	stmdaeq	r0, {}
    11b0:	28000002 	stmdacs	r0, {r1}
    11b4:	02000002 	andeq	r0, r0, #2
    11b8:	28009100 	stmdacs	r0, {r8, ip, pc}
    11bc:	ec000002 	stc	0, cr0, [r0], {2}
    11c0:	01000003 	tsteq	r0, r3
    11c4:	00005a00 	andeq	r5, r0, r0, lsl #20
    11c8:	00000000 	andeq	r0, r0, r0
    11cc:	02240000 	eoreq	r0, r4, #0
    11d0:	023c0000 	eorseq	r0, ip, #0
    11d4:	00010000 	andeq	r0, r1, r0
    11d8:	00024457 	andeq	r4, r2, r7, asr r4
    11dc:	00028c00 	andeq	r8, r2, r0, lsl #24
    11e0:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    11e4:	000002ac 	andeq	r0, r0, ip, lsr #5
    11e8:	00000310 	andeq	r0, r0, r0, lsl r3
    11ec:	84570001 	ldrbhi	r0, [r7], #-1
    11f0:	a0000003 	andge	r0, r0, r3
    11f4:	01000003 	tsteq	r0, r3
    11f8:	03ac5700 	undefined instruction 0x03ac5700
    11fc:	03ec0000 	mvneq	r0, #0
    1200:	00010000 	andeq	r0, r1, r0
    1204:	00000057 	andeq	r0, r0, r7, asr r0
    1208:	00000000 	andeq	r0, r0, r0
    120c:	00025800 	andeq	r5, r2, r0, lsl #16
    1210:	00026800 	andeq	r6, r2, r0, lsl #16
    1214:	58000100 	stmdapl	r0, {r8}
    1218:	000002d4 	ldrdeq	r0, [r0], -r4
    121c:	00000310 	andeq	r0, r0, r0, lsl r3
    1220:	b8580001 	ldmdalt	r8, {r0}^
    1224:	dc000003 	stcle	0, cr0, [r0], {3}
    1228:	01000003 	tsteq	r0, r3
    122c:	00005000 	andeq	r5, r0, r0
    1230:	00000000 	andeq	r0, r0, r0
    1234:	03ec0000 	mvneq	r0, #0
    1238:	03f00000 	mvnseq	r0, #0
    123c:	00010000 	andeq	r0, r1, r0
    1240:	0003f05d 	andeq	pc, r3, sp, asr r0
    1244:	0003f800 	andeq	pc, r3, r0, lsl #16
    1248:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    124c:	0003f814 	andeq	pc, r3, r4, lsl r8
    1250:	0005a400 	andeq	sl, r5, r0, lsl #8
    1254:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    1258:	00000028 	andeq	r0, r0, r8, lsr #32
    125c:	00000000 	andeq	r0, r0, r0
    1260:	0003ec00 	andeq	lr, r3, r0, lsl #24
    1264:	0003fc00 	andeq	pc, r3, r0, lsl #24
    1268:	50000100 	andpl	r0, r0, r0, lsl #2
    126c:	000003fc 	strdeq	r0, [r0], -ip
    1270:	000005a4 	andeq	r0, r0, r4, lsr #11
    1274:	00540001 	subseq	r0, r4, r1
    1278:	00000000 	andeq	r0, r0, r0
    127c:	ec000000 	stc	0, cr0, [r0], {0}
    1280:	34000003 	strcc	r0, [r0], #-3
    1284:	01000004 	tsteq	r0, r4
    1288:	046c5100 	strbteq	r5, [ip], #-256	; 0x100
    128c:	04740000 	ldrbteq	r0, [r4]
    1290:	00010000 	andeq	r0, r1, r0
    1294:	00000051 	andeq	r0, r0, r1, asr r0
    1298:	00000000 	andeq	r0, r0, r0
    129c:	0003ec00 	andeq	lr, r3, r0, lsl #24
    12a0:	00043800 	andeq	r3, r4, r0, lsl #16
    12a4:	52000100 	andpl	r0, r0, #0
    12a8:	00000470 	andeq	r0, r0, r0, ror r4
    12ac:	00000474 	andeq	r0, r0, r4, ror r4
    12b0:	00520001 	subseq	r0, r2, r1
    12b4:	00000000 	andeq	r0, r0, r0
    12b8:	ec000000 	stc	0, cr0, [r0], {0}
    12bc:	3c000003 	stccc	0, cr0, [r0], {3}
    12c0:	01000004 	tsteq	r0, r4
    12c4:	04685300 	strbteq	r5, [r8], #-768	; 0x300
    12c8:	04740000 	ldrbteq	r0, [r4]
    12cc:	00010000 	andeq	r0, r1, r0
    12d0:	00000053 	andeq	r0, r0, r3, asr r0
    12d4:	00000000 	andeq	r0, r0, r0
    12d8:	0003fc00 	andeq	pc, r3, r0, lsl #24
    12dc:	00040400 	andeq	r0, r4, r0, lsl #8
    12e0:	50000100 	andpl	r0, r0, r0, lsl #2
    12e4:	00000410 	andeq	r0, r0, r0, lsl r4
    12e8:	00000418 	andeq	r0, r0, r8, lsl r4
    12ec:	20500001 	subscs	r0, r0, r1
    12f0:	24000004 	strcs	r0, [r0], #-4
    12f4:	01000004 	tsteq	r0, r4
    12f8:	04305000 	ldrteq	r5, [r0]
    12fc:	04400000 	strbeq	r0, [r0]
    1300:	00010000 	andeq	r0, r1, r0
    1304:	00046050 	andeq	r6, r4, r0, asr r0
    1308:	00047400 	andeq	r7, r4, r0, lsl #8
    130c:	50000100 	andpl	r0, r0, r0, lsl #2
    1310:	000004e4 	andeq	r0, r0, r4, ror #9
    1314:	000004e8 	andeq	r0, r0, r8, ror #9
    1318:	00500001 	subseq	r0, r0, r1
    131c:	04000005 	streq	r0, [r0], #-5
    1320:	01000005 	tsteq	r0, r5
    1324:	05905000 	ldreq	r5, [r0]
    1328:	05940000 	ldreq	r0, [r4]
    132c:	00010000 	andeq	r0, r1, r0
    1330:	00000050 	andeq	r0, r0, r0, asr r0
    1334:	00000000 	andeq	r0, r0, r0
    1338:	00042400 	andeq	r2, r4, r0, lsl #8
    133c:	00043000 	andeq	r3, r4, r0
    1340:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1344:	00000450 	andeq	r0, r0, r0, asr r4
    1348:	000005a4 	andeq	r0, r0, r4, lsr #11
    134c:	00560001 	subseq	r0, r6, r1
    1350:	00000000 	andeq	r0, r0, r0
    1354:	10000000 	andne	r0, r0, r0
    1358:	70000005 	andvc	r0, r0, r5
    135c:	01000005 	tsteq	r0, r5
    1360:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    136c:	00080000 	andeq	r0, r8, r0
    1370:	00010000 	andeq	r0, r1, r0
    1374:	0000085d 	andeq	r0, r0, sp, asr r8
    1378:	0000c400 	andeq	ip, r0, r0, lsl #8
    137c:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    1380:	00000008 	andeq	r0, r0, r8
	...
    138c:	00002c00 	andeq	r2, r0, r0, lsl #24
    1390:	50000100 	andpl	r0, r0, r0, lsl #2
    1394:	000000b0 	strheq	r0, [r0], -r0
    1398:	000000c4 	andeq	r0, r0, r4, asr #1
    139c:	00500001 	subseq	r0, r0, r1
    13a0:	00000000 	andeq	r0, r0, r0
    13a4:	04000000 	streq	r0, [r0]
    13a8:	98000000 	stmdals	r0, {}
    13ac:	01000000 	tsteq	r0, r0
    13b0:	00b05300 	adcseq	r5, r0, r0, lsl #6
    13b4:	00c40000 	sbceq	r0, r4, r0
    13b8:	00010000 	andeq	r0, r1, r0
    13bc:	00000053 	andeq	r0, r0, r3, asr r0
    13c0:	00000000 	andeq	r0, r0, r0
    13c4:	00002c00 	andeq	r2, r0, r0, lsl #24
    13c8:	0000a800 	andeq	sl, r0, r0, lsl #16
    13cc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    13d8:	0000001c 	andeq	r0, r0, ip, lsl r0
    13dc:	000000b0 	strheq	r0, [r0], -r0
    13e0:	bc550001 	mrrclt	0, 0, r0, r5, cr1
    13e4:	c4000000 	strgt	r0, [r0]
    13e8:	01000000 	tsteq	r0, r0
    13ec:	00005500 	andeq	r5, r0, r0, lsl #10
    13f0:	00000000 	andeq	r0, r0, r0
    13f4:	00340000 	eorseq	r0, r4, r0
    13f8:	00b00000 	adcseq	r0, r0, r0
    13fc:	00010000 	andeq	r0, r1, r0
    1400:	00000054 	andeq	r0, r0, r4, asr r0
    1404:	00000000 	andeq	r0, r0, r0
    1408:	0000c400 	andeq	ip, r0, r0, lsl #8
    140c:	0000c800 	andeq	ip, r0, r0, lsl #16
    1410:	5d000100 	stfpls	f0, [r0]
    1414:	000000c8 	andeq	r0, r0, r8, asr #1
    1418:	0000016c 	andeq	r0, r0, ip, ror #2
    141c:	107d0002 	rsbsne	r0, sp, r2
	...
    1428:	000000c4 	andeq	r0, r0, r4, asr #1
    142c:	000000dc 	ldrdeq	r0, [r0], -ip
    1430:	dc500001 	mrrcle	0, 0, r0, r0, cr1
    1434:	6c000000 	stcvs	0, cr0, [r0], {0}
    1438:	01000001 	tsteq	r0, r1
    143c:	00005500 	andeq	r5, r0, r0, lsl #10
    1440:	00000000 	andeq	r0, r0, r0
    1444:	00c40000 	sbceq	r0, r4, r0
    1448:	01280000 	teqeq	r8, r0
    144c:	00010000 	andeq	r0, r1, r0
    1450:	00014451 	andeq	r4, r1, r1, asr r4
    1454:	00016c00 	andeq	r6, r1, r0, lsl #24
    1458:	51000100 	tstpl	r0, r0, lsl #2
	...
    1464:	000000d4 	ldrdeq	r0, [r0], -r4
    1468:	000000f0 	strdeq	r0, [r0], -r0
    146c:	04520001 	ldrbeq	r0, [r2], #-1
    1470:	30000001 	andcc	r0, r0, r1
    1474:	01000001 	tsteq	r0, r1
    1478:	01445200 	cmpeq	r4, r0, lsl #4
    147c:	014c0000 	cmpeq	ip, r0
    1480:	00010000 	andeq	r0, r1, r0
    1484:	00015c52 	andeq	r5, r1, r2, asr ip
    1488:	00016c00 	andeq	r6, r1, r0, lsl #24
    148c:	52000100 	andpl	r0, r0, #0
	...
    1498:	000000dc 	ldrdeq	r0, [r0], -ip
    149c:	0000012c 	andeq	r0, r0, ip, lsr #2
    14a0:	44500001 	ldrbmi	r0, [r0], #-1
    14a4:	6c000001 	stcvs	0, cr0, [r0], {1}
    14a8:	01000001 	tsteq	r0, r1
    14ac:	00005000 	andeq	r5, r0, r0
    14b0:	00000000 	andeq	r0, r0, r0
    14b4:	016c0000 	cmneq	ip, r0
    14b8:	01700000 	cmneq	r0, r0
    14bc:	00010000 	andeq	r0, r1, r0
    14c0:	0001705d 	andeq	r7, r1, sp, asr r0
    14c4:	00026400 	andeq	r6, r2, r0, lsl #8
    14c8:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    14cc:	00000010 	andeq	r0, r0, r0, lsl r0
    14d0:	00000000 	andeq	r0, r0, r0
    14d4:	00016c00 	andeq	r6, r1, r0, lsl #24
    14d8:	00017800 	andeq	r7, r1, r0, lsl #16
    14dc:	50000100 	andpl	r0, r0, r0, lsl #2
    14e0:	00000178 	andeq	r0, r0, r8, ror r1
    14e4:	00000264 	andeq	r0, r0, r4, ror #4
    14e8:	00540001 	subseq	r0, r4, r1
    14ec:	00000000 	andeq	r0, r0, r0
    14f0:	64000000 	strvs	r0, [r0]
    14f4:	98000002 	stmdals	r0, {r1}
    14f8:	01000002 	tsteq	r0, r2
    14fc:	00005000 	andeq	r5, r0, r0
    1500:	00000000 	andeq	r0, r0, r0
    1504:	02680000 	rsbeq	r0, r8, #0
    1508:	02840000 	addeq	r0, r4, #0
    150c:	00010000 	andeq	r0, r1, r0
    1510:	00000053 	andeq	r0, r0, r3, asr r0
    1514:	00000000 	andeq	r0, r0, r0
    1518:	00028400 	andeq	r8, r2, r0, lsl #8
    151c:	0002a000 	andeq	sl, r2, r0
    1520:	53000100 	movwpl	r0, #256	; 0x100
	...
    152c:	000002a0 	andeq	r0, r0, r0, lsr #5
    1530:	000002a4 	andeq	r0, r0, r4, lsr #5
    1534:	a45d0001 	ldrbge	r0, [sp], #-1
    1538:	04000002 	streq	r0, [r0], #-2
    153c:	02000003 	andeq	r0, r0, #3
    1540:	00087d00 	andeq	r7, r8, r0, lsl #26
    1544:	00000000 	andeq	r0, r0, r0
    1548:	a0000000 	andge	r0, r0, r0
    154c:	e8000002 	stmda	r0, {r1}
    1550:	01000002 	tsteq	r0, r2
    1554:	02f45000 	rscseq	r5, r4, #0
    1558:	02f80000 	rscseq	r0, r8, #0
    155c:	00010000 	andeq	r0, r1, r0
    1560:	00000050 	andeq	r0, r0, r0, asr r0
    1564:	00000000 	andeq	r0, r0, r0
    1568:	0002a000 	andeq	sl, r2, r0
    156c:	0002ec00 	andeq	lr, r2, r0, lsl #24
    1570:	51000100 	tstpl	r0, r0, lsl #2
    1574:	000002f4 	strdeq	r0, [r0], -r4
    1578:	000002fc 	strdeq	r0, [r0], -ip
    157c:	00510001 	subseq	r0, r1, r1
    1580:	00000000 	andeq	r0, r0, r0
    1584:	a8000000 	stmdage	r0, {}
    1588:	d0000002 	andle	r0, r0, r2
    158c:	01000002 	tsteq	r0, r2
    1590:	00005300 	andeq	r5, r0, r0, lsl #6
    1594:	00000000 	andeq	r0, r0, r0
    1598:	02b40000 	adcseq	r0, r4, #0
    159c:	02bc0000 	adcseq	r0, ip, #0
    15a0:	00010000 	andeq	r0, r1, r0
    15a4:	0002cc5c 	andeq	ip, r2, ip, asr ip
    15a8:	0002f400 	andeq	pc, r2, r0, lsl #8
    15ac:	5c000100 	stfpls	f0, [r0], {0}
    15b0:	000002f4 	strdeq	r0, [r0], -r4
    15b4:	00000300 	andeq	r0, r0, r0, lsl #6
    15b8:	005c0001 	subseq	r0, ip, r1
    15bc:	00000000 	andeq	r0, r0, r0
    15c0:	04000000 	streq	r0, [r0]
    15c4:	08000003 	stmdaeq	r0, {r0, r1}
    15c8:	01000003 	tsteq	r0, r3
    15cc:	03085d00 	movweq	r5, #36096	; 0x8d00
    15d0:	038c0000 	orreq	r0, ip, #0
    15d4:	00020000 	andeq	r0, r2, r0
    15d8:	0000187d 	andeq	r1, r0, sp, ror r8
    15dc:	00000000 	andeq	r0, r0, r0
    15e0:	03040000 	movweq	r0, #16384	; 0x4000
    15e4:	031c0000 	tsteq	ip, #0
    15e8:	00010000 	andeq	r0, r1, r0
    15ec:	00032850 	andeq	r2, r3, r0, asr r8
    15f0:	00033c00 	andeq	r3, r3, r0, lsl #24
    15f4:	50000100 	andpl	r0, r0, r0, lsl #2
    15f8:	00000384 	andeq	r0, r0, r4, lsl #7
    15fc:	0000038c 	andeq	r0, r0, ip, lsl #7
    1600:	00500001 	subseq	r0, r0, r1
    1604:	00000000 	andeq	r0, r0, r0
    1608:	0c000000 	stceq	0, cr0, [r0], {0}
    160c:	24000003 	strcs	r0, [r0], #-3
    1610:	01000003 	tsteq	r0, r3
    1614:	03245600 	teqeq	r4, #0
    1618:	03280000 	teqeq	r8, #0
    161c:	00010000 	andeq	r0, r1, r0
    1620:	00032854 	andeq	r2, r3, r4, asr r8
    1624:	00033000 	andeq	r3, r3, r0
    1628:	56000100 	strpl	r0, [r0], -r0, lsl #2
    162c:	00000330 	andeq	r0, r0, r0, lsr r3
    1630:	00000344 	andeq	r0, r0, r4, asr #6
    1634:	44540001 	ldrbmi	r0, [r4], #-1
    1638:	8c000003 	stchi	0, cr0, [r0], {3}
    163c:	01000003 	tsteq	r0, r3
    1640:	00005600 	andeq	r5, r0, r0, lsl #12
    1644:	00000000 	andeq	r0, r0, r0
    1648:	038c0000 	orreq	r0, ip, #0
    164c:	03900000 	orrseq	r0, r0, #0
    1650:	00010000 	andeq	r0, r1, r0
    1654:	0003905d 	andeq	r9, r3, sp, asr r0
    1658:	00059400 	andeq	r9, r5, r0, lsl #8
    165c:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    1660:	00000018 	andeq	r0, r0, r8, lsl r0
    1664:	00000000 	andeq	r0, r0, r0
    1668:	00038c00 	andeq	r8, r3, r0, lsl #24
    166c:	00039800 	andeq	r9, r3, r0, lsl #16
    1670:	50000100 	andpl	r0, r0, r0, lsl #2
    1674:	00000398 	muleq	r0, r8, r3
    1678:	00000594 	muleq	r0, r4, r5
    167c:	00550001 	subseq	r0, r5, r1
    1680:	00000000 	andeq	r0, r0, r0
    1684:	b0000000 	andlt	r0, r0, r0
    1688:	b8000003 	stmdalt	r0, {r0, r1}
    168c:	01000003 	tsteq	r0, r3
    1690:	04b05700 	ldrteq	r5, [r0], #1792	; 0x700
    1694:	05180000 	ldreq	r0, [r8]
    1698:	00010000 	andeq	r0, r1, r0
    169c:	00055c57 	andeq	r5, r5, r7, asr ip
    16a0:	00058000 	andeq	r8, r5, r0
    16a4:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    16b0:	00000594 	muleq	r0, r4, r5
    16b4:	00000598 	muleq	r0, r8, r5
    16b8:	985d0001 	ldmdals	sp, {r0}^
    16bc:	6c000005 	stcvs	0, cr0, [r0], {5}
    16c0:	02000008 	andeq	r0, r0, #8
    16c4:	00207d00 	eoreq	r7, r0, r0, lsl #26
    16c8:	00000000 	andeq	r0, r0, r0
    16cc:	94000000 	strls	r0, [r0]
    16d0:	a4000005 	strge	r0, [r0], #-5
    16d4:	01000005 	tsteq	r0, r5
    16d8:	05a45000 	streq	r5, [r4]!
    16dc:	086c0000 	stmdaeq	ip!, {}^
    16e0:	00010000 	andeq	r0, r1, r0
    16e4:	00000055 	andeq	r0, r0, r5, asr r0
    16e8:	00000000 	andeq	r0, r0, r0
    16ec:	00059400 	andeq	r9, r5, r0, lsl #8
    16f0:	0005a800 	andeq	sl, r5, r0, lsl #16
    16f4:	51000100 	tstpl	r0, r0, lsl #2
    16f8:	000005a8 	andeq	r0, r0, r8, lsr #11
    16fc:	0000086c 	andeq	r0, r0, ip, ror #16
    1700:	00560001 	subseq	r0, r6, r1
    1704:	00000000 	andeq	r0, r0, r0
    1708:	a4000000 	strge	r0, [r0]
    170c:	bc000005 	stclt	0, cr0, [r0], {5}
    1710:	01000005 	tsteq	r0, r5
    1714:	05c45000 	strbeq	r5, [r4]
    1718:	05cc0000 	strbeq	r0, [ip]
    171c:	00010000 	andeq	r0, r1, r0
    1720:	00060c50 	andeq	r0, r6, r0, asr ip
    1724:	00061000 	andeq	r1, r6, r0
    1728:	50000100 	andpl	r0, r0, r0, lsl #2
    172c:	00000618 	andeq	r0, r0, r8, lsl r6
    1730:	0000061c 	andeq	r0, r0, ip, lsl r6
    1734:	74500001 	ldrbvc	r0, [r0], #-1
    1738:	78000006 	stmdavc	r0, {r1, r2}
    173c:	01000006 	tsteq	r0, r6
    1740:	06a05000 	strteq	r5, [r0], r0
    1744:	06a40000 	strteq	r0, [r4], r0
    1748:	00010000 	andeq	r0, r1, r0
    174c:	0006e850 	andeq	lr, r6, r0, asr r8
    1750:	0006ec00 	andeq	lr, r6, r0, lsl #24
    1754:	50000100 	andpl	r0, r0, r0, lsl #2
    1758:	0000071c 	andeq	r0, r0, ip, lsl r7
    175c:	00000720 	andeq	r0, r0, r0, lsr #14
    1760:	7c500001 	mrrcvc	0, 0, r0, r0, cr1
    1764:	80000007 	andhi	r0, r0, r7
    1768:	01000007 	tsteq	r0, r7
    176c:	07885000 	streq	r5, [r8, r0]
    1770:	078c0000 	streq	r0, [ip, r0]
    1774:	00010000 	andeq	r0, r1, r0
    1778:	0007f850 	andeq	pc, r7, r0, asr r8
    177c:	0007fc00 	andeq	pc, r7, r0, lsl #24
    1780:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    178c:	0000086c 	andeq	r0, r0, ip, ror #16
    1790:	00000870 	andeq	r0, r0, r0, ror r8
    1794:	705d0001 	subsvc	r0, sp, r1
    1798:	78000008 	stmdavc	r0, {r3}
    179c:	02000008 	andeq	r0, r0, #8
    17a0:	78107d00 	ldmdavc	r0, {r8, sl, fp, ip, sp, lr}
    17a4:	0c000008 	stceq	0, cr0, [r0], {8}
    17a8:	02000009 	andeq	r0, r0, #9
    17ac:	00187d00 	andseq	r7, r8, r0, lsl #26
    17b0:	00000000 	andeq	r0, r0, r0
    17b4:	6c000000 	stcvs	0, cr0, [r0], {0}
    17b8:	88000008 	stmdahi	r0, {r3}
    17bc:	01000008 	tsteq	r0, r8
    17c0:	08885000 	stmeq	r8, {ip, lr}
    17c4:	090c0000 	stmdbeq	ip, {}
    17c8:	00010000 	andeq	r0, r1, r0
    17cc:	00000056 	andeq	r0, r0, r6, asr r0
    17d0:	00000000 	andeq	r0, r0, r0
    17d4:	00086c00 	andeq	r6, r8, r0, lsl #24
    17d8:	00088c00 	andeq	r8, r8, r0, lsl #24
    17dc:	51000100 	tstpl	r0, r0, lsl #2
    17e0:	0000088c 	andeq	r0, r0, ip, lsl #17
    17e4:	000008c4 	andeq	r0, r0, r4, asr #17
    17e8:	c4550001 	ldrbgt	r0, [r5], #-1
    17ec:	e8000008 	stmda	r0, {r3}
    17f0:	01000008 	tsteq	r0, r8
    17f4:	08e85100 	stmiaeq	r8!, {r8, ip, lr}^
    17f8:	090c0000 	stmdbeq	ip, {}
    17fc:	00010000 	andeq	r0, r1, r0
    1800:	00000055 	andeq	r0, r0, r5, asr r0
    1804:	00000000 	andeq	r0, r0, r0
    1808:	00086c00 	andeq	r6, r8, r0, lsl #24
    180c:	00088c00 	andeq	r8, r8, r0, lsl #24
    1810:	52000100 	andpl	r0, r0, #0
    1814:	0000088c 	andeq	r0, r0, ip, lsl #17
    1818:	0000089c 	muleq	r0, ip, r8
    181c:	9c5c0001 	mrrcls	0, 0, r0, ip, cr1
    1820:	ec000008 	stc	0, cr0, [r0], {8}
    1824:	01000008 	tsteq	r0, r8
    1828:	08ec5200 	stmiaeq	ip!, {r9, ip, lr}^
    182c:	08f80000 	ldmeq	r8!, {}^
    1830:	00010000 	andeq	r0, r1, r0
    1834:	0008fc5c 	andeq	pc, r8, ip, asr ip
    1838:	00090c00 	andeq	r0, r9, r0, lsl #24
    183c:	5c000100 	stfpls	f0, [r0], {0}
	...
    1848:	0000086c 	andeq	r0, r0, ip, ror #16
    184c:	0000088c 	andeq	r0, r0, ip, lsl #17
    1850:	8c530001 	mrrchi	0, 0, r0, r3, cr1
    1854:	0c000008 	stceq	0, cr0, [r0], {8}
    1858:	01000009 	tsteq	r0, r9
    185c:	00005400 	andeq	r5, r0, r0, lsl #8
    1860:	00000000 	andeq	r0, r0, r0
    1864:	00380000 	eorseq	r0, r8, r0
    1868:	003c0000 	eorseq	r0, ip, r0
    186c:	00010000 	andeq	r0, r1, r0
    1870:	00003c5d 	andeq	r3, r0, sp, asr ip
    1874:	00009000 	andeq	r9, r0, r0
    1878:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    187c:	00000008 	andeq	r0, r0, r8
    1880:	00000000 	andeq	r0, r0, r0
    1884:	00003800 	andeq	r3, r0, r0, lsl #16
    1888:	00005c00 	andeq	r5, r0, r0, lsl #24
    188c:	51000100 	tstpl	r0, r0, lsl #2
	...
    1898:	00000090 	muleq	r0, r0, r0
    189c:	00000094 	muleq	r0, r4, r0
    18a0:	945d0001 	ldrbls	r0, [sp], #-1
    18a4:	ec000000 	stc	0, cr0, [r0], {0}
    18a8:	02000000 	andeq	r0, r0, #0
    18ac:	00087d00 	andeq	r7, r8, r0, lsl #26
    18b0:	00000000 	andeq	r0, r0, r0
    18b4:	90000000 	andls	r0, r0, r0
    18b8:	c4000000 	strgt	r0, [r0]
    18bc:	01000000 	tsteq	r0, r0
    18c0:	00005100 	andeq	r5, r0, r0, lsl #2
    18c4:	00000000 	andeq	r0, r0, r0
    18c8:	00ec0000 	rsceq	r0, ip, r0
    18cc:	00f00000 	rscseq	r0, r0, r0
    18d0:	00010000 	andeq	r0, r1, r0
    18d4:	0000f05d 	andeq	pc, r0, sp, asr r0
    18d8:	0001ac00 	andeq	sl, r1, r0, lsl #24
    18dc:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    18e0:	00000008 	andeq	r0, r0, r8
    18e4:	00000000 	andeq	r0, r0, r0
    18e8:	0000ec00 	andeq	lr, r0, r0, lsl #24
    18ec:	00012000 	andeq	r2, r1, r0
    18f0:	51000100 	tstpl	r0, r0, lsl #2
    18f4:	00000158 	andeq	r0, r0, r8, asr r1
    18f8:	00000184 	andeq	r0, r0, r4, lsl #3
    18fc:	00510001 	subseq	r0, r1, r1
    1900:	00000000 	andeq	r0, r0, r0
    1904:	30000000 	andcc	r0, r0, r0
    1908:	58000001 	stmdapl	r0, {r0}
    190c:	01000001 	tsteq	r0, r1
    1910:	00005100 	andeq	r5, r0, r0, lsl #2
    1914:	00000000 	andeq	r0, r0, r0
    1918:	01500000 	cmpeq	r0, r0
    191c:	01580000 	cmpeq	r8, r0
    1920:	00010000 	andeq	r0, r1, r0
    1924:	00018451 	andeq	r8, r1, r1, asr r4
    1928:	0001ac00 	andeq	sl, r1, r0, lsl #24
    192c:	51000100 	tstpl	r0, r0, lsl #2
	...
    1938:	000001ac 	andeq	r0, r0, ip, lsr #3
    193c:	000001b8 	undefined instruction 0x000001b8
    1940:	b85d0001 	ldmdalt	sp, {r0}^
    1944:	f0000001 	undefined instruction 0xf0000001
    1948:	02000001 	andeq	r0, r0, #1
    194c:	00047d00 	andeq	r7, r4, r0, lsl #26
    1950:	00000000 	andeq	r0, r0, r0
    1954:	ac000000 	stcge	0, cr0, [r0], {0}
    1958:	cc000001 	stcgt	0, cr0, [r0], {1}
    195c:	01000001 	tsteq	r0, r1
    1960:	00005000 	andeq	r5, r0, r0
    1964:	00000000 	andeq	r0, r0, r0
    1968:	01f00000 	mvnseq	r0, r0
    196c:	02080000 	andeq	r0, r8, #0
    1970:	00010000 	andeq	r0, r1, r0
    1974:	00000050 	andeq	r0, r0, r0, asr r0
    1978:	00000000 	andeq	r0, r0, r0
    197c:	0002a800 	andeq	sl, r2, r0, lsl #16
    1980:	0002ac00 	andeq	sl, r2, r0, lsl #24
    1984:	5d000100 	stfpls	f0, [r0]
    1988:	000002ac 	andeq	r0, r0, ip, lsr #5
    198c:	0000033c 	andeq	r0, r0, ip, lsr r3
    1990:	087d0002 	ldmdaeq	sp!, {r1}^
	...
    199c:	000002a8 	andeq	r0, r0, r8, lsr #5
    19a0:	000002d8 	ldrdeq	r0, [r0], -r8
    19a4:	d8500001 	ldmdale	r0, {r0}^
    19a8:	3c000002 	stccc	0, cr0, [r0], {2}
    19ac:	01000003 	tsteq	r0, r3
    19b0:	00005400 	andeq	r5, r0, r0, lsl #8
    19b4:	00000000 	andeq	r0, r0, r0
    19b8:	033c0000 	teqeq	ip, #0
    19bc:	03400000 	movteq	r0, #0
    19c0:	00010000 	andeq	r0, r1, r0
    19c4:	0003405d 	andeq	r4, r3, sp, asr r0
    19c8:	0003cc00 	andeq	ip, r3, r0, lsl #24
    19cc:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    19d0:	00000008 	andeq	r0, r0, r8
    19d4:	00000000 	andeq	r0, r0, r0
    19d8:	00033c00 	andeq	r3, r3, r0, lsl #24
    19dc:	00036c00 	andeq	r6, r3, r0, lsl #24
    19e0:	50000100 	andpl	r0, r0, r0, lsl #2
    19e4:	0000036c 	andeq	r0, r0, ip, ror #6
    19e8:	000003cc 	andeq	r0, r0, ip, asr #7
    19ec:	00540001 	subseq	r0, r4, r1
    19f0:	00000000 	andeq	r0, r0, r0
    19f4:	cc000000 	stcgt	0, cr0, [r0], {0}
    19f8:	d8000003 	stmdale	r0, {r0, r1}
    19fc:	01000003 	tsteq	r0, r3
    1a00:	00005000 	andeq	r5, r0, r0
    1a04:	00000000 	andeq	r0, r0, r0
    1a08:	03cc0000 	biceq	r0, ip, #0
    1a0c:	03d80000 	bicseq	r0, r8, #0
    1a10:	00010000 	andeq	r0, r1, r0
    1a14:	00000051 	andeq	r0, r0, r1, asr r0
    1a18:	00000000 	andeq	r0, r0, r0
    1a1c:	0003cc00 	andeq	ip, r3, r0, lsl #24
    1a20:	0003d800 	andeq	sp, r3, r0, lsl #16
    1a24:	52000100 	andpl	r0, r0, #0
	...
    1a30:	000003d8 	ldrdeq	r0, [r0], -r8
    1a34:	000003e0 	andeq	r0, r0, r0, ror #7
    1a38:	00500001 	subseq	r0, r0, r1
    1a3c:	00000000 	andeq	r0, r0, r0
    1a40:	d8000000 	stmdale	r0, {}
    1a44:	e0000003 	and	r0, r0, r3
    1a48:	01000003 	tsteq	r0, r3
    1a4c:	00005100 	andeq	r5, r0, r0, lsl #2
    1a50:	00000000 	andeq	r0, r0, r0
    1a54:	03e00000 	mvneq	r0, #0
    1a58:	03e40000 	mvneq	r0, #0
    1a5c:	00010000 	andeq	r0, r1, r0
    1a60:	00000050 	andeq	r0, r0, r0, asr r0
    1a64:	00000000 	andeq	r0, r0, r0
    1a68:	0003e400 	andeq	lr, r3, r0, lsl #8
    1a6c:	0003e800 	andeq	lr, r3, r0, lsl #16
    1a70:	5d000100 	stfpls	f0, [r0]
    1a74:	000003e8 	andeq	r0, r0, r8, ror #7
    1a78:	00000464 	andeq	r0, r0, r4, ror #8
    1a7c:	107d0002 	rsbsne	r0, sp, r2
	...
    1a88:	000003e4 	andeq	r0, r0, r4, ror #7
    1a8c:	00000400 	andeq	r0, r0, r0, lsl #8
    1a90:	00500001 	subseq	r0, r0, r1
    1a94:	64000004 	strvs	r0, [r0], #-4
    1a98:	01000004 	tsteq	r0, r4
    1a9c:	00005400 	andeq	r5, r0, r0, lsl #8
    1aa0:	00000000 	andeq	r0, r0, r0
    1aa4:	03e40000 	mvneq	r0, #0
    1aa8:	04080000 	streq	r0, [r8]
    1aac:	00010000 	andeq	r0, r1, r0
    1ab0:	00000051 	andeq	r0, r0, r1, asr r0
    1ab4:	00000000 	andeq	r0, r0, r0
    1ab8:	00045800 	andeq	r5, r4, r0, lsl #16
    1abc:	00045c00 	andeq	r5, r4, r0, lsl #24
    1ac0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1acc:	000003f0 	strdeq	r0, [r0], -r0
    1ad0:	00000450 	andeq	r0, r0, r0, asr r4
    1ad4:	00520001 	subseq	r0, r2, r1
    1ad8:	00000000 	andeq	r0, r0, r0
    1adc:	18000000 	stmdane	r0, {}
    1ae0:	20000004 	andcs	r0, r0, r4
    1ae4:	01000004 	tsteq	r0, r4
    1ae8:	04245000 	strteq	r5, [r4]
    1aec:	04540000 	ldrbeq	r0, [r4]
    1af0:	00010000 	andeq	r0, r1, r0
    1af4:	00000050 	andeq	r0, r0, r0, asr r0
    1af8:	00000000 	andeq	r0, r0, r0
    1afc:	00046400 	andeq	r6, r4, r0, lsl #8
    1b00:	00046c00 	andeq	r6, r4, r0, lsl #24
    1b04:	5d000100 	stfpls	f0, [r0]
    1b08:	0000046c 	andeq	r0, r0, ip, ror #8
    1b0c:	0000052c 	andeq	r0, r0, ip, lsr #10
    1b10:	107d0002 	rsbsne	r0, sp, r2
	...
    1b1c:	00000464 	andeq	r0, r0, r4, ror #8
    1b20:	0000048c 	andeq	r0, r0, ip, lsl #9
    1b24:	8c500001 	mrrchi	0, 0, r0, r0, cr1
    1b28:	2c000004 	stccs	0, cr0, [r0], {4}
    1b2c:	01000005 	tsteq	r0, r5
    1b30:	00005400 	andeq	r5, r0, r0, lsl #8
    1b34:	00000000 	andeq	r0, r0, r0
    1b38:	04640000 	strbteq	r0, [r4]
    1b3c:	04880000 	streq	r0, [r8]
    1b40:	00010000 	andeq	r0, r1, r0
    1b44:	00048851 	andeq	r8, r4, r1, asr r8
    1b48:	00052c00 	andeq	r2, r5, r0, lsl #24
    1b4c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    1b58:	00000464 	andeq	r0, r0, r4, ror #8
    1b5c:	00000490 	muleq	r0, r0, r4
    1b60:	98520001 	ldmdals	r2, {r0}^
    1b64:	a4000004 	strge	r0, [r0], #-4
    1b68:	01000004 	tsteq	r0, r4
    1b6c:	00005200 	andeq	r5, r0, r0, lsl #4
    1b70:	00000000 	andeq	r0, r0, r0
    1b74:	04b80000 	ldrteq	r0, [r8]
    1b78:	04e00000 	strbteq	r0, [r0]
    1b7c:	00010000 	andeq	r0, r1, r0
    1b80:	00050451 	andeq	r0, r5, r1, asr r4
    1b84:	00050c00 	andeq	r0, r5, r0, lsl #24
    1b88:	51000100 	tstpl	r0, r0, lsl #2
	...
    1b94:	000004b4 	undefined instruction 0x000004b4
    1b98:	0000050c 	andeq	r0, r0, ip, lsl #10
    1b9c:	00530001 	subseq	r0, r3, r1
	...
    1ba8:	04000000 	streq	r0, [r0]
    1bac:	01000000 	tsteq	r0, r0
    1bb0:	00045d00 	andeq	r5, r4, r0, lsl #26
    1bb4:	00680000 	rsbeq	r0, r8, r0
    1bb8:	00020000 	andeq	r0, r2, r0
    1bbc:	0000107d 	andeq	r1, r0, sp, ror r0
	...
    1bc8:	00140000 	andseq	r0, r4, r0
    1bcc:	00010000 	andeq	r0, r1, r0
    1bd0:	00001450 	andeq	r1, r0, r0, asr r4
    1bd4:	00006800 	andeq	r6, r0, r0, lsl #16
    1bd8:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    1be8:	00000014 	andeq	r0, r0, r4, lsl r0
    1bec:	14510001 	ldrbne	r0, [r1], #-1
    1bf0:	1c000000 	stcne	0, cr0, [r0], {0}
    1bf4:	01000000 	tsteq	r0, r0
    1bf8:	001c5500 	andseq	r5, ip, r0, lsl #10
    1bfc:	00280000 	eoreq	r0, r8, r0
    1c00:	00010000 	andeq	r0, r1, r0
    1c04:	00002851 	andeq	r2, r0, r1, asr r8
    1c08:	00006800 	andeq	r6, r0, r0, lsl #16
    1c0c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    1c1c:	00000014 	andeq	r0, r0, r4, lsl r0
    1c20:	14520001 	ldrbne	r0, [r2], #-1
    1c24:	24000000 	strcs	r0, [r0]
    1c28:	01000000 	tsteq	r0, r0
    1c2c:	00245600 	eoreq	r5, r4, r0, lsl #12
    1c30:	00280000 	eoreq	r0, r8, r0
    1c34:	00010000 	andeq	r0, r1, r0
    1c38:	00002852 	andeq	r2, r0, r2, asr r8
    1c3c:	00006800 	andeq	r6, r0, r0, lsl #16
    1c40:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    1c4c:	00000068 	andeq	r0, r0, r8, rrx
    1c50:	0000006c 	andeq	r0, r0, ip, rrx
    1c54:	6c5d0001 	mrrcvs	0, 0, r0, sp, cr1
    1c58:	38000000 	stmdacc	r0, {}
    1c5c:	02000001 	andeq	r0, r0, #1
    1c60:	00107d00 	andseq	r7, r0, r0, lsl #26
    1c64:	00000000 	andeq	r0, r0, r0
    1c68:	68000000 	stmdavs	r0, {}
    1c6c:	80000000 	andhi	r0, r0, r0
    1c70:	01000000 	tsteq	r0, r0
    1c74:	00805000 	addeq	r5, r0, r0
    1c78:	01380000 	teqeq	r8, r0
    1c7c:	00010000 	andeq	r0, r1, r0
    1c80:	00000055 	andeq	r0, r0, r5, asr r0
    1c84:	00000000 	andeq	r0, r0, r0
    1c88:	00013800 	andeq	r3, r1, r0, lsl #16
    1c8c:	00013c00 	andeq	r3, r1, r0, lsl #24
    1c90:	5d000100 	stfpls	f0, [r0]
    1c94:	0000013c 	andeq	r0, r0, ip, lsr r1
    1c98:	00000220 	andeq	r0, r0, r0, lsr #4
    1c9c:	107d0002 	rsbsne	r0, sp, r2
	...
    1ca8:	00000138 	andeq	r0, r0, r8, lsr r1
    1cac:	00000144 	andeq	r0, r0, r4, asr #2
    1cb0:	44500001 	ldrbmi	r0, [r0], #-1
    1cb4:	e8000001 	stmda	r0, {r0}
    1cb8:	01000001 	tsteq	r0, r1
    1cbc:	00005400 	andeq	r5, r0, r0, lsl #8
    1cc0:	00000000 	andeq	r0, r0, r0
    1cc4:	02200000 	eoreq	r0, r0, #0
    1cc8:	02240000 	eoreq	r0, r4, #0
    1ccc:	00010000 	andeq	r0, r1, r0
    1cd0:	0002245d 	andeq	r2, r2, sp, asr r4
    1cd4:	00023000 	andeq	r3, r2, r0
    1cd8:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    1cdc:	00023024 	andeq	r3, r2, r4, lsr #32
    1ce0:	00047c00 	andeq	r7, r4, r0, lsl #24
    1ce4:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    1ce8:	00000030 	andeq	r0, r0, r0, lsr r0
    1cec:	00000000 	andeq	r0, r0, r0
    1cf0:	00022000 	andeq	r2, r2, r0
    1cf4:	00022c00 	andeq	r2, r2, r0, lsl #24
    1cf8:	50000100 	andpl	r0, r0, r0, lsl #2
    1cfc:	0000022c 	andeq	r0, r0, ip, lsr #4
    1d00:	00000338 	andeq	r0, r0, r8, lsr r3
    1d04:	5c540001 	mrrcpl	0, 0, r0, r4, cr1
    1d08:	c8000003 	stmdagt	r0, {r0, r1}
    1d0c:	01000003 	tsteq	r0, r3
    1d10:	03d45400 	bicseq	r5, r4, #0
    1d14:	047c0000 	ldrbteq	r0, [ip]
    1d18:	00010000 	andeq	r0, r1, r0
    1d1c:	00000054 	andeq	r0, r0, r4, asr r0
    1d20:	00000000 	andeq	r0, r0, r0
    1d24:	00022000 	andeq	r2, r2, r0
    1d28:	00024c00 	andeq	r4, r2, r0, lsl #24
    1d2c:	51000100 	tstpl	r0, r0, lsl #2
    1d30:	0000024c 	andeq	r0, r0, ip, asr #4
    1d34:	000002d4 	ldrdeq	r0, [r0], -r4
    1d38:	5c5a0001 	mrrcpl	0, 0, r0, sl, cr1
    1d3c:	98000003 	stmdals	r0, {r0, r1}
    1d40:	01000003 	tsteq	r0, r3
    1d44:	03d45a00 	bicseq	r5, r4, #0
    1d48:	047c0000 	ldrbteq	r0, [ip]
    1d4c:	00010000 	andeq	r0, r1, r0
    1d50:	0000005a 	andeq	r0, r0, sl, asr r0
    1d54:	00000000 	andeq	r0, r0, r0
    1d58:	00022000 	andeq	r2, r2, r0
    1d5c:	00024c00 	andeq	r4, r2, r0, lsl #24
    1d60:	52000100 	andpl	r0, r0, #0
    1d64:	0000024c 	andeq	r0, r0, ip, asr #4
    1d68:	00000264 	andeq	r0, r0, r4, ror #4
    1d6c:	64560001 	ldrbvs	r0, [r6], #-1
    1d70:	6c000002 	stcvs	0, cr0, [r0], {2}
    1d74:	01000002 	tsteq	r0, r2
    1d78:	026c5200 	rsbeq	r5, ip, #0
    1d7c:	047c0000 	ldrbteq	r0, [ip]
    1d80:	00010000 	andeq	r0, r1, r0
    1d84:	00000056 	andeq	r0, r0, r6, asr r0
    1d88:	00000000 	andeq	r0, r0, r0
    1d8c:	00022000 	andeq	r2, r2, r0
    1d90:	00024c00 	andeq	r4, r2, r0, lsl #24
    1d94:	53000100 	movwpl	r0, #256	; 0x100
    1d98:	0000024c 	andeq	r0, r0, ip, asr #4
    1d9c:	0000047c 	andeq	r0, r0, ip, ror r4
    1da0:	00580001 	subseq	r0, r8, r1
    1da4:	00000000 	andeq	r0, r0, r0
    1da8:	48000000 	stmdami	r0, {}
    1dac:	6c000002 	stcvs	0, cr0, [r0], {2}
    1db0:	01000002 	tsteq	r0, r2
    1db4:	02ac5000 	adceq	r5, ip, #0
    1db8:	02ac0000 	adceq	r0, ip, #0
    1dbc:	00010000 	andeq	r0, r1, r0
    1dc0:	00035850 	andeq	r5, r3, r0, asr r8
    1dc4:	00035c00 	andeq	r5, r3, r0, lsl #24
    1dc8:	50000100 	andpl	r0, r0, r0, lsl #2
    1dcc:	00000364 	andeq	r0, r0, r4, ror #6
    1dd0:	00000368 	andeq	r0, r0, r8, ror #6
    1dd4:	94500001 	ldrbls	r0, [r0], #-1
    1dd8:	98000003 	stmdals	r0, {r0, r1}
    1ddc:	01000003 	tsteq	r0, r3
    1de0:	03d05000 	bicseq	r5, r0, #0
    1de4:	03d40000 	bicseq	r0, r4, #0
    1de8:	00010000 	andeq	r0, r1, r0
    1dec:	0003f850 	andeq	pc, r3, r0, asr r8
    1df0:	0003fc00 	andeq	pc, r3, r0, lsl #24
    1df4:	50000100 	andpl	r0, r0, r0, lsl #2
    1df8:	00000404 	andeq	r0, r0, r4, lsl #8
    1dfc:	00000408 	andeq	r0, r0, r8, lsl #8
    1e00:	54500001 	ldrbpl	r0, [r0], #-1
    1e04:	68000004 	stmdavs	r0, {r2}
    1e08:	01000004 	tsteq	r0, r4
    1e0c:	00005000 	andeq	r5, r0, r0
    1e10:	00000000 	andeq	r0, r0, r0
    1e14:	02ac0000 	adceq	r0, ip, #0
    1e18:	02b80000 	adcseq	r0, r8, #0
    1e1c:	00010000 	andeq	r0, r1, r0
    1e20:	0002cc5a 	andeq	ip, r2, sl, asr ip
    1e24:	0002d400 	andeq	sp, r2, r0, lsl #8
    1e28:	53000100 	movwpl	r0, #256	; 0x100
    1e2c:	000002d4 	ldrdeq	r0, [r0], -r4
    1e30:	0000035c 	andeq	r0, r0, ip, asr r3
    1e34:	985a0001 	ldmdals	sl, {r0}^
    1e38:	d4000003 	strle	r0, [r0], #-3
    1e3c:	01000003 	tsteq	r0, r3
    1e40:	00005a00 	andeq	r5, r0, r0, lsl #20
    1e44:	00000000 	andeq	r0, r0, r0
    1e48:	02ac0000 	adceq	r0, ip, #0
    1e4c:	02b80000 	adcseq	r0, r8, #0
    1e50:	00010000 	andeq	r0, r1, r0
    1e54:	0002d05b 	andeq	sp, r2, fp, asr r0
    1e58:	00035c00 	andeq	r5, r3, r0, lsl #24
    1e5c:	5b000100 	blpl	2264 <DISABLE_IRQ+0x21e4>
    1e60:	00000398 	muleq	r0, r8, r3
    1e64:	000003d4 	ldrdeq	r0, [r0], -r4
    1e68:	005b0001 	subseq	r0, fp, r1
    1e6c:	00000000 	andeq	r0, r0, r0
    1e70:	ac000000 	stcge	0, cr0, [r0], {0}
    1e74:	b8000002 	stmdalt	r0, {r1}
    1e78:	01000002 	tsteq	r0, r2
    1e7c:	02d85900 	sbcseq	r5, r8, #0
    1e80:	03040000 	movweq	r0, #16384	; 0x4000
    1e84:	00010000 	andeq	r0, r1, r0
    1e88:	00030459 	andeq	r0, r3, r9, asr r4
    1e8c:	00031400 	andeq	r1, r3, r0, lsl #8
    1e90:	52000100 	andpl	r0, r0, #0
    1e94:	00000314 	andeq	r0, r0, r4, lsl r3
    1e98:	0000035c 	andeq	r0, r0, ip, asr r3
    1e9c:	98590001 	ldmdals	r9, {r0}^
    1ea0:	9c000003 	stcls	0, cr0, [r0], {3}
    1ea4:	01000003 	tsteq	r0, r3
    1ea8:	039c5200 	orrseq	r5, ip, #0
    1eac:	03b80000 	undefined instruction 0x03b80000
    1eb0:	00010000 	andeq	r0, r1, r0
    1eb4:	0003b859 	andeq	fp, r3, r9, asr r8
    1eb8:	0003c800 	andeq	ip, r3, r0, lsl #16
    1ebc:	52000100 	andpl	r0, r0, #0
    1ec0:	000003c8 	andeq	r0, r0, r8, asr #7
    1ec4:	000003d4 	ldrdeq	r0, [r0], -r4
    1ec8:	00590001 	subseq	r0, r9, r1
    1ecc:	00000000 	andeq	r0, r0, r0
    1ed0:	f0000000 	undefined instruction 0xf0000000
    1ed4:	14000002 	strne	r0, [r0], #-2
    1ed8:	01000003 	tsteq	r0, r3
    1edc:	03985c00 	orrseq	r5, r8, #0
    1ee0:	03a80000 	undefined instruction 0x03a80000
    1ee4:	00010000 	andeq	r0, r1, r0
    1ee8:	0003b85c 	andeq	fp, r3, ip, asr r8
    1eec:	0003c800 	andeq	ip, r3, r0, lsl #16
    1ef0:	5c000100 	stfpls	f0, [r0], {0}
	...
    1efc:	0000047c 	andeq	r0, r0, ip, ror r4
    1f00:	00000480 	andeq	r0, r0, r0, lsl #9
    1f04:	805d0001 	subshi	r0, sp, r1
    1f08:	88000004 	stmdahi	r0, {r2}
    1f0c:	02000004 	andeq	r0, r0, #4
    1f10:	88247d00 	stmdahi	r4!, {r8, sl, fp, ip, sp, lr}
    1f14:	c4000004 	strgt	r0, [r0], #-4
    1f18:	02000006 	andeq	r0, r0, #6
    1f1c:	00387d00 	eorseq	r7, r8, r0, lsl #26
    1f20:	00000000 	andeq	r0, r0, r0
    1f24:	7c000000 	stcvc	0, cr0, [r0], {0}
    1f28:	9c000004 	stcls	0, cr0, [r0], {4}
    1f2c:	01000004 	tsteq	r0, r4
    1f30:	049c5000 	ldreq	r5, [ip]
    1f34:	06c40000 	strbeq	r0, [r4], r0
    1f38:	00010000 	andeq	r0, r1, r0
    1f3c:	00000055 	andeq	r0, r0, r5, asr r0
    1f40:	00000000 	andeq	r0, r0, r0
    1f44:	00047c00 	andeq	r7, r4, r0, lsl #24
    1f48:	00049c00 	andeq	r9, r4, r0, lsl #24
    1f4c:	51000100 	tstpl	r0, r0, lsl #2
    1f50:	0000049c 	muleq	r0, ip, r4
    1f54:	00000664 	andeq	r0, r0, r4, ror #12
    1f58:	64570001 	ldrbvs	r0, [r7], #-1
    1f5c:	6c000006 	stcvs	0, cr0, [r0], {6}
    1f60:	01000006 	tsteq	r0, r6
    1f64:	066c5100 	strbteq	r5, [ip], -r0, lsl #2
    1f68:	06900000 	ldreq	r0, [r0], r0
    1f6c:	00010000 	andeq	r0, r1, r0
    1f70:	00069057 	andeq	r9, r6, r7, asr r0
    1f74:	00069c00 	andeq	r9, r6, r0, lsl #24
    1f78:	51000100 	tstpl	r0, r0, lsl #2
    1f7c:	0000069c 	muleq	r0, ip, r6
    1f80:	000006b4 	undefined instruction 0x000006b4
    1f84:	b4570001 	ldrblt	r0, [r7], #-1
    1f88:	c4000006 	strgt	r0, [r0], #-6
    1f8c:	01000006 	tsteq	r0, r6
    1f90:	00005100 	andeq	r5, r0, r0, lsl #2
    1f94:	00000000 	andeq	r0, r0, r0
    1f98:	047c0000 	ldrbteq	r0, [ip]
    1f9c:	049c0000 	ldreq	r0, [ip]
    1fa0:	00010000 	andeq	r0, r1, r0
    1fa4:	00049c52 	andeq	r9, r4, r2, asr ip
    1fa8:	00066400 	andeq	r6, r6, r0, lsl #8
    1fac:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1fb0:	00000664 	andeq	r0, r0, r4, ror #12
    1fb4:	0000066c 	andeq	r0, r0, ip, ror #12
    1fb8:	6c520001 	mrrcvs	0, 0, r0, r2, cr1
    1fbc:	90000006 	andls	r0, r0, r6
    1fc0:	01000006 	tsteq	r0, r6
    1fc4:	06905600 	ldreq	r5, [r0], r0, lsl #12
    1fc8:	06940000 	ldreq	r0, [r4], r0
    1fcc:	00010000 	andeq	r0, r1, r0
    1fd0:	00069452 	andeq	r9, r6, r2, asr r4
    1fd4:	0006b000 	andeq	fp, r6, r0
    1fd8:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1fdc:	000006b0 	undefined instruction 0x000006b0
    1fe0:	000006c4 	andeq	r0, r0, r4, asr #13
    1fe4:	00520001 	subseq	r0, r2, r1
    1fe8:	00000000 	andeq	r0, r0, r0
    1fec:	7c000000 	stcvc	0, cr0, [r0], {0}
    1ff0:	9c000004 	stcls	0, cr0, [r0], {4}
    1ff4:	01000004 	tsteq	r0, r4
    1ff8:	049c5300 	ldreq	r5, [ip], #768	; 0x300
    1ffc:	06c40000 	strbeq	r0, [r4], r0
    2000:	00010000 	andeq	r0, r1, r0
    2004:	00000058 	andeq	r0, r0, r8, asr r0
    2008:	00000000 	andeq	r0, r0, r0
    200c:	0004dc00 	andeq	sp, r4, r0, lsl #24
    2010:	0004e800 	andeq	lr, r4, r0, lsl #16
    2014:	5a000100 	bpl	241c <DISABLE_IRQ+0x239c>
    2018:	00000558 	andeq	r0, r0, r8, asr r5
    201c:	000005c0 	andeq	r0, r0, r0, asr #11
    2020:	c85a0001 	ldmdagt	sl, {r0}^
    2024:	d0000005 	andle	r0, r0, r5
    2028:	01000005 	tsteq	r0, r5
    202c:	00005a00 	andeq	r5, r0, r0, lsl #20
    2030:	00000000 	andeq	r0, r0, r0
    2034:	04dc0000 	ldrbeq	r0, [ip]
    2038:	04e80000 	strbteq	r0, [r8]
    203c:	00010000 	andeq	r0, r1, r0
    2040:	0005d85a 	andeq	sp, r5, sl, asr r8
    2044:	00062000 	andeq	r2, r6, r0
    2048:	5a000100 	bpl	2450 <DISABLE_IRQ+0x23d0>
    204c:	00000630 	andeq	r0, r0, r0, lsr r6
    2050:	000006c4 	andeq	r0, r0, r4, asr #13
    2054:	005a0001 	subseq	r0, sl, r1
    2058:	00000000 	andeq	r0, r0, r0
    205c:	dc000000 	stcle	0, cr0, [r0], {0}
    2060:	e8000004 	stmda	r0, {r2}
    2064:	01000004 	tsteq	r0, r4
    2068:	05d85900 	ldrbeq	r5, [r8, #2304]	; 0x900
    206c:	06200000 	strteq	r0, [r0], -r0
    2070:	00010000 	andeq	r0, r1, r0
    2074:	00063459 	andeq	r3, r6, r9, asr r4
    2078:	0006c400 	andeq	ip, r6, r0, lsl #8
    207c:	59000100 	stmdbpl	r0, {r8}
	...
    2088:	00000654 	andeq	r0, r0, r4, asr r6
    208c:	0000066c 	andeq	r0, r0, ip, ror #12
    2090:	90530001 	subsls	r0, r3, r1
    2094:	a0000006 	andge	r0, r0, r6
    2098:	01000006 	tsteq	r0, r6
    209c:	06b05300 	ldrteq	r5, [r0], r0, lsl #6
    20a0:	06c40000 	strbeq	r0, [r4], r0
    20a4:	00010000 	andeq	r0, r1, r0
    20a8:	00000053 	andeq	r0, r0, r3, asr r0
    20ac:	00000000 	andeq	r0, r0, r0
    20b0:	0006c400 	andeq	ip, r6, r0, lsl #8
    20b4:	0006c800 	andeq	ip, r6, r0, lsl #16
    20b8:	5d000100 	stfpls	f0, [r0]
    20bc:	000006c8 	andeq	r0, r0, r8, asr #13
    20c0:	000006d0 	ldrdeq	r0, [r0], -r0
    20c4:	047d0002 	ldrbteq	r0, [sp], #-2
    20c8:	000006d0 	ldrdeq	r0, [r0], -r0
    20cc:	00000764 	andeq	r0, r0, r4, ror #14
    20d0:	107d0002 	rsbsne	r0, sp, r2
	...
    20dc:	000006c4 	andeq	r0, r0, r4, asr #13
    20e0:	000006dc 	ldrdeq	r0, [r0], -ip
    20e4:	f0500001 	undefined instruction 0xf0500001
    20e8:	f8000006 	undefined instruction 0xf8000006
    20ec:	01000006 	tsteq	r0, r6
    20f0:	07385000 	ldreq	r5, [r8, -r0]!
    20f4:	07400000 	strbeq	r0, [r0, -r0]
    20f8:	00010000 	andeq	r0, r1, r0
    20fc:	00000050 	andeq	r0, r0, r0, asr r0
    2100:	00000000 	andeq	r0, r0, r0
    2104:	0006c400 	andeq	ip, r6, r0, lsl #8
    2108:	0006e000 	andeq	lr, r6, r0
    210c:	51000100 	tstpl	r0, r0, lsl #2
    2110:	000006e0 	andeq	r0, r0, r0, ror #13
    2114:	000006ec 	andeq	r0, r0, ip, ror #13
    2118:	ec5c0001 	mrrc	0, 0, r0, ip, cr1
    211c:	24000006 	strcs	r0, [r0], #-6
    2120:	01000007 	tsteq	r0, r7
    2124:	07245100 	streq	r5, [r4, -r0, lsl #2]!
    2128:	07340000 	ldreq	r0, [r4, -r0]!
    212c:	00010000 	andeq	r0, r1, r0
    2130:	0007345c 	andeq	r3, r7, ip, asr r4
    2134:	00073800 	andeq	r3, r7, r0, lsl #16
    2138:	51000100 	tstpl	r0, r0, lsl #2
    213c:	00000738 	andeq	r0, r0, r8, lsr r7
    2140:	00000744 	andeq	r0, r0, r4, asr #14
    2144:	505c0001 	subspl	r0, ip, r1
    2148:	64000007 	strvs	r0, [r0], #-7
    214c:	01000007 	tsteq	r0, r7
    2150:	00005100 	andeq	r5, r0, r0, lsl #2
    2154:	00000000 	andeq	r0, r0, r0
    2158:	06c40000 	strbeq	r0, [r4], r0
    215c:	06e00000 	strbteq	r0, [r0], r0
    2160:	00010000 	andeq	r0, r1, r0
    2164:	0006e052 	andeq	lr, r6, r2, asr r0
    2168:	00072800 	andeq	r2, r7, r0, lsl #16
    216c:	53000100 	movwpl	r0, #256	; 0x100
    2170:	00000734 	andeq	r0, r0, r4, lsr r7
    2174:	00000750 	andeq	r0, r0, r0, asr r7
    2178:	50530001 	subspl	r0, r3, r1
    217c:	64000007 	strvs	r0, [r0], #-7
    2180:	01000007 	tsteq	r0, r7
    2184:	00005300 	andeq	r5, r0, r0, lsl #6
    2188:	00000000 	andeq	r0, r0, r0
    218c:	07640000 	strbeq	r0, [r4, -r0]!
    2190:	076c0000 	strbeq	r0, [ip, -r0]!
    2194:	00010000 	andeq	r0, r1, r0
    2198:	00076c5d 	andeq	r6, r7, sp, asr ip
    219c:	0007f800 	andeq	pc, r7, r0, lsl #16
    21a0:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    21a4:	00000008 	andeq	r0, r0, r8
    21a8:	00000000 	andeq	r0, r0, r0
    21ac:	00076400 	andeq	r6, r7, r0, lsl #8
    21b0:	00077000 	andeq	r7, r7, r0
    21b4:	50000100 	andpl	r0, r0, r0, lsl #2
    21b8:	00000770 	andeq	r0, r0, r0, ror r7
    21bc:	000007ec 	andeq	r0, r0, ip, ror #15
    21c0:	005c0001 	subseq	r0, ip, r1
    21c4:	00000000 	andeq	r0, r0, r0
    21c8:	64000000 	strvs	r0, [r0]
    21cc:	e8000007 	stmda	r0, {r0, r1, r2}
    21d0:	01000007 	tsteq	r0, r7
    21d4:	00005100 	andeq	r5, r0, r0, lsl #2
    21d8:	00000000 	andeq	r0, r0, r0
    21dc:	07640000 	strbeq	r0, [r4, -r0]!
    21e0:	07ec0000 	strbeq	r0, [ip, r0]!
    21e4:	00010000 	andeq	r0, r1, r0
    21e8:	00000052 	andeq	r0, r0, r2, asr r0
    21ec:	00000000 	andeq	r0, r0, r0
    21f0:	00076400 	andeq	r6, r7, r0, lsl #8
    21f4:	0007ac00 	andeq	sl, r7, r0, lsl #24
    21f8:	53000100 	movwpl	r0, #256	; 0x100
	...
    2204:	00000788 	andeq	r0, r0, r8, lsl #15
    2208:	0000078c 	andeq	r0, r0, ip, lsl #15
    220c:	94500001 	ldrbls	r0, [r0], #-1
    2210:	98000007 	stmdals	r0, {r0, r1, r2}
    2214:	01000007 	tsteq	r0, r7
    2218:	07b85000 	ldreq	r5, [r8, r0]!
    221c:	07d40000 	ldrbeq	r0, [r4, r0]
    2220:	00010000 	andeq	r0, r1, r0
    2224:	00000050 	andeq	r0, r0, r0, asr r0
	...
    2230:	00000400 	andeq	r0, r0, r0, lsl #8
    2234:	5d000100 	stfpls	f0, [r0]
    2238:	00000004 	andeq	r0, r0, r4
    223c:	0000008c 	andeq	r0, r0, ip, lsl #1
    2240:	187d0002 	ldmdane	sp!, {r1}^
	...
    2250:	00000010 	andeq	r0, r0, r0, lsl r0
    2254:	10500001 	subsne	r0, r0, r1
    2258:	8c000000 	stchi	0, cr0, [r0], {0}
    225c:	01000000 	tsteq	r0, r0
    2260:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    226c:	00140000 	andseq	r0, r4, r0
    2270:	00010000 	andeq	r0, r1, r0
    2274:	00001451 	andeq	r1, r0, r1, asr r4
    2278:	00002000 	andeq	r2, r0, r0
    227c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    2280:	00000020 	andeq	r0, r0, r0, lsr #32
    2284:	00000024 	andeq	r0, r0, r4, lsr #32
    2288:	24510001 	ldrbcs	r0, [r1], #-1
    228c:	8c000000 	stchi	0, cr0, [r0], {0}
    2290:	01000000 	tsteq	r0, r0
    2294:	00005500 	andeq	r5, r0, r0, lsl #10
    2298:	00000000 	andeq	r0, r0, r0
    229c:	008c0000 	addeq	r0, ip, r0
    22a0:	00900000 	addseq	r0, r0, r0
    22a4:	00010000 	andeq	r0, r1, r0
    22a8:	0000905d 	andeq	r9, r0, sp, asr r0
    22ac:	00015400 	andeq	r5, r1, r0, lsl #8
    22b0:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    22b4:	00000018 	andeq	r0, r0, r8, lsl r0
    22b8:	00000000 	andeq	r0, r0, r0
    22bc:	00008c00 	andeq	r8, r0, r0, lsl #24
    22c0:	00009c00 	andeq	r9, r0, r0, lsl #24
    22c4:	50000100 	andpl	r0, r0, r0, lsl #2
    22c8:	0000009c 	muleq	r0, ip, r0
    22cc:	00000154 	andeq	r0, r0, r4, asr r1
    22d0:	00540001 	subseq	r0, r4, r1
    22d4:	00000000 	andeq	r0, r0, r0
    22d8:	8c000000 	stchi	0, cr0, [r0], {0}
    22dc:	a0000000 	andge	r0, r0, r0
    22e0:	01000000 	tsteq	r0, r0
    22e4:	00a05100 	adceq	r5, r0, r0, lsl #2
    22e8:	01540000 	cmpeq	r4, r0
    22ec:	00010000 	andeq	r0, r1, r0
    22f0:	00000057 	andeq	r0, r0, r7, asr r0
    22f4:	00000000 	andeq	r0, r0, r0
    22f8:	00015400 	andeq	r5, r1, r0, lsl #8
    22fc:	00015800 	andeq	r5, r1, r0, lsl #16
    2300:	5d000100 	stfpls	f0, [r0]
    2304:	00000158 	andeq	r0, r0, r8, asr r1
    2308:	00000250 	andeq	r0, r0, r0, asr r2
    230c:	107d0002 	rsbsne	r0, sp, r2
	...
    2318:	00000154 	andeq	r0, r0, r4, asr r1
    231c:	00000160 	andeq	r0, r0, r0, ror #2
    2320:	60500001 	subsvs	r0, r0, r1
    2324:	50000001 	andpl	r0, r0, r1
    2328:	01000002 	tsteq	r0, r2
    232c:	00005400 	andeq	r5, r0, r0, lsl #8
    2330:	00000000 	andeq	r0, r0, r0
    2334:	02500000 	subseq	r0, r0, #0
    2338:	02540000 	subseq	r0, r4, #0
    233c:	00010000 	andeq	r0, r1, r0
    2340:	0002545d 	andeq	r5, r2, sp, asr r4
    2344:	00033000 	andeq	r3, r3, r0
    2348:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    234c:	00000010 	andeq	r0, r0, r0, lsl r0
    2350:	00000000 	andeq	r0, r0, r0
    2354:	00025000 	andeq	r5, r2, r0
    2358:	00025c00 	andeq	r5, r2, r0, lsl #24
    235c:	50000100 	andpl	r0, r0, r0, lsl #2
    2360:	0000025c 	andeq	r0, r0, ip, asr r2
    2364:	00000330 	andeq	r0, r0, r0, lsr r3
    2368:	00560001 	subseq	r0, r6, r1
    236c:	00000000 	andeq	r0, r0, r0
    2370:	30000000 	andcc	r0, r0, r0
    2374:	34000003 	strcc	r0, [r0], #-3
    2378:	01000003 	tsteq	r0, r3
    237c:	03345d00 	teqeq	r4, #0
    2380:	05400000 	strbeq	r0, [r0]
    2384:	00020000 	andeq	r0, r2, r0
    2388:	0000187d 	andeq	r1, r0, sp, ror r8
    238c:	00000000 	andeq	r0, r0, r0
    2390:	03300000 	teqeq	r0, #0
    2394:	03500000 	cmpeq	r0, #0
    2398:	00010000 	andeq	r0, r1, r0
    239c:	00035050 	andeq	r5, r3, r0, asr r0
    23a0:	00054000 	andeq	r4, r5, r0
    23a4:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    23b0:	00000330 	andeq	r0, r0, r0, lsr r3
    23b4:	00000354 	andeq	r0, r0, r4, asr r3
    23b8:	54510001 	ldrbpl	r0, [r1], #-1
    23bc:	40000003 	andmi	r0, r0, r3
    23c0:	01000005 	tsteq	r0, r5
    23c4:	00005700 	andeq	r5, r0, r0, lsl #14
    23c8:	00000000 	andeq	r0, r0, r0
    23cc:	03300000 	teqeq	r0, #0
    23d0:	03540000 	cmpeq	r4, #0
    23d4:	00010000 	andeq	r0, r1, r0
    23d8:	00035452 	andeq	r5, r3, r2, asr r4
    23dc:	00036c00 	andeq	r6, r3, r0, lsl #24
    23e0:	56000100 	strpl	r0, [r0], -r0, lsl #2
    23e4:	0000036c 	andeq	r0, r0, ip, ror #6
    23e8:	00000374 	andeq	r0, r0, r4, ror r3
    23ec:	74520001 	ldrbvc	r0, [r2], #-1
    23f0:	40000003 	andmi	r0, r0, r3
    23f4:	01000005 	tsteq	r0, r5
    23f8:	00005600 	andeq	r5, r0, r0, lsl #12
    23fc:	00000000 	andeq	r0, r0, r0
    2400:	03d40000 	bicseq	r0, r4, #0
    2404:	04040000 	streq	r0, [r4]
    2408:	00010000 	andeq	r0, r1, r0
    240c:	0004ac51 	andeq	sl, r4, r1, asr ip
    2410:	0004b000 	andeq	fp, r4, r0
    2414:	51000100 	tstpl	r0, r0, lsl #2
	...
    2420:	00000350 	andeq	r0, r0, r0, asr r3
    2424:	00000374 	andeq	r0, r0, r4, ror r3
    2428:	b4500001 	ldrblt	r0, [r0], #-1
    242c:	b4000003 	strlt	r0, [r0], #-3
    2430:	01000003 	tsteq	r0, r3
    2434:	04305000 	ldrteq	r5, [r0]
    2438:	04340000 	ldrteq	r0, [r4]
    243c:	00010000 	andeq	r0, r1, r0
    2440:	00043c50 	andeq	r3, r4, r0, asr ip
    2444:	00044000 	andeq	r4, r4, r0
    2448:	50000100 	andpl	r0, r0, r0, lsl #2
    244c:	0000047c 	andeq	r0, r0, ip, ror r4
    2450:	00000480 	andeq	r0, r0, r0, lsl #9
    2454:	a8500001 	ldmdage	r0, {r0}^
    2458:	ac000004 	stcge	0, cr0, [r0], {4}
    245c:	01000004 	tsteq	r0, r4
    2460:	04bc5000 	ldrteq	r5, [ip]
    2464:	04c00000 	strbeq	r0, [r0]
    2468:	00010000 	andeq	r0, r1, r0
    246c:	0004c850 	andeq	ip, r4, r0, asr r8
    2470:	0004cc00 	andeq	ip, r4, r0, lsl #24
    2474:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2480:	00000540 	andeq	r0, r0, r0, asr #10
    2484:	00000544 	andeq	r0, r0, r4, asr #10
    2488:	445d0001 	ldrbmi	r0, [sp], #-1
    248c:	78000005 	stmdavc	r0, {r0, r2}
    2490:	02000007 	andeq	r0, r0, #7
    2494:	00187d00 	andseq	r7, r8, r0, lsl #26
    2498:	00000000 	andeq	r0, r0, r0
    249c:	40000000 	andmi	r0, r0, r0
    24a0:	5c000005 	stcpl	0, cr0, [r0], {5}
    24a4:	01000005 	tsteq	r0, r5
    24a8:	055c5000 	ldrbeq	r5, [ip]
    24ac:	07780000 	ldrbeq	r0, [r8, -r0]!
    24b0:	00010000 	andeq	r0, r1, r0
    24b4:	00000055 	andeq	r0, r0, r5, asr r0
    24b8:	00000000 	andeq	r0, r0, r0
    24bc:	00054000 	andeq	r4, r5, r0
    24c0:	00055c00 	andeq	r5, r5, r0, lsl #24
    24c4:	51000100 	tstpl	r0, r0, lsl #2
    24c8:	0000055c 	andeq	r0, r0, ip, asr r5
    24cc:	00000778 	andeq	r0, r0, r8, ror r7
    24d0:	00560001 	subseq	r0, r6, r1
    24d4:	00000000 	andeq	r0, r0, r0
    24d8:	40000000 	andmi	r0, r0, r0
    24dc:	5c000005 	stcpl	0, cr0, [r0], {5}
    24e0:	01000005 	tsteq	r0, r5
    24e4:	055c5200 	ldrbeq	r5, [ip, #-512]	; 0x200
    24e8:	06180000 	ldreq	r0, [r8], -r0
    24ec:	00010000 	andeq	r0, r1, r0
    24f0:	00064858 	andeq	r4, r6, r8, asr r8
    24f4:	00077800 	andeq	r7, r7, r0, lsl #16
    24f8:	58000100 	stmdapl	r0, {r8}
	...
    2504:	00000540 	andeq	r0, r0, r0, asr #10
    2508:	0000055c 	andeq	r0, r0, ip, asr r5
    250c:	5c530001 	mrrcpl	0, 0, r0, r3, cr1
    2510:	78000005 	stmdavc	r0, {r0, r2}
    2514:	01000007 	tsteq	r0, r7
    2518:	00005700 	andeq	r5, r0, r0, lsl #14
    251c:	00000000 	andeq	r0, r0, r0
    2520:	07780000 	ldrbeq	r0, [r8, -r0]!
    2524:	077c0000 	ldrbeq	r0, [ip, -r0]!
    2528:	00010000 	andeq	r0, r1, r0
    252c:	00077c5d 	andeq	r7, r7, sp, asr ip
    2530:	00078400 	andeq	r8, r7, r0, lsl #8
    2534:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    2538:	0007840c 	andeq	r8, r7, ip, lsl #8
    253c:	0007f000 	andeq	pc, r7, r0
    2540:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    2544:	00000018 	andeq	r0, r0, r8, lsl r0
    2548:	00000000 	andeq	r0, r0, r0
    254c:	00077800 	andeq	r7, r7, r0, lsl #16
    2550:	00079000 	andeq	r9, r7, r0
    2554:	50000100 	andpl	r0, r0, r0, lsl #2
    2558:	00000790 	muleq	r0, r0, r7
    255c:	000007f0 	strdeq	r0, [r0], -r0
    2560:	00550001 	subseq	r0, r5, r1
    2564:	00000000 	andeq	r0, r0, r0
    2568:	78000000 	stmdavc	r0, {}
    256c:	94000007 	strls	r0, [r0], #-7
    2570:	01000007 	tsteq	r0, r7
    2574:	07945100 	ldreq	r5, [r4, r0, lsl #2]
    2578:	07a00000 	streq	r0, [r0, r0]!
    257c:	00010000 	andeq	r0, r1, r0
    2580:	0007a054 	andeq	sl, r7, r4, asr r0
    2584:	0007c000 	andeq	ip, r7, r0
    2588:	51000100 	tstpl	r0, r0, lsl #2
    258c:	000007c0 	andeq	r0, r0, r0, asr #15
    2590:	000007c8 	andeq	r0, r0, r8, asr #15
    2594:	c8510001 	ldmdagt	r1, {r0}^
    2598:	f0000007 	undefined instruction 0xf0000007
    259c:	01000007 	tsteq	r0, r7
    25a0:	00005400 	andeq	r5, r0, r0, lsl #8
    25a4:	00000000 	andeq	r0, r0, r0
    25a8:	07780000 	ldrbeq	r0, [r8, -r0]!
    25ac:	07940000 	ldreq	r0, [r4, r0]
    25b0:	00010000 	andeq	r0, r1, r0
    25b4:	00079452 	andeq	r9, r7, r2, asr r4
    25b8:	0007c000 	andeq	ip, r7, r0
    25bc:	5c000100 	stfpls	f0, [r0], {0}
    25c0:	000007c0 	andeq	r0, r0, r0, asr #15
    25c4:	000007e0 	andeq	r0, r0, r0, ror #15
    25c8:	e05c0001 	subs	r0, ip, r1
    25cc:	f0000007 	undefined instruction 0xf0000007
    25d0:	01000007 	tsteq	r0, r7
    25d4:	00005c00 	andeq	r5, r0, r0, lsl #24
    25d8:	00000000 	andeq	r0, r0, r0
    25dc:	07f00000 	ldrbeq	r0, [r0, r0]!
    25e0:	07f40000 	ldrbeq	r0, [r4, r0]!
    25e4:	00010000 	andeq	r0, r1, r0
    25e8:	0007f45d 	andeq	pc, r7, sp, asr r4
    25ec:	0007fc00 	andeq	pc, r7, r0, lsl #24
    25f0:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    25f4:	0007fc04 	andeq	pc, r7, r4, lsl #24
    25f8:	00087c00 	andeq	r7, r8, r0, lsl #24
    25fc:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    2600:	00000010 	andeq	r0, r0, r0, lsl r0
    2604:	00000000 	andeq	r0, r0, r0
    2608:	0007f000 	andeq	pc, r7, r0
    260c:	00080400 	andeq	r0, r8, r0, lsl #8
    2610:	50000100 	andpl	r0, r0, r0, lsl #2
    2614:	00000854 	andeq	r0, r0, r4, asr r8
    2618:	0000085c 	andeq	r0, r0, ip, asr r8
    261c:	00500001 	subseq	r0, r0, r1
    2620:	00000000 	andeq	r0, r0, r0
    2624:	f0000000 	undefined instruction 0xf0000000
    2628:	08000007 	stmdaeq	r0, {r0, r1, r2}
    262c:	01000008 	tsteq	r0, r8
    2630:	08085100 	stmdaeq	r8, {r8, ip, lr}
    2634:	08140000 	ldmdaeq	r4, {}
    2638:	00010000 	andeq	r0, r1, r0
    263c:	00081452 	andeq	r1, r8, r2, asr r4
    2640:	00083800 	andeq	r3, r8, r0, lsl #16
    2644:	51000100 	tstpl	r0, r0, lsl #2
    2648:	00000838 	andeq	r0, r0, r8, lsr r8
    264c:	00000840 	andeq	r0, r0, r0, asr #16
    2650:	4c520001 	mrrcmi	0, 0, r0, r2, cr1
    2654:	54000008 	strpl	r0, [r0], #-8
    2658:	01000008 	tsteq	r0, r8
    265c:	08545100 	ldmdaeq	r4, {r8, ip, lr}^
    2660:	08680000 	stmdaeq	r8!, {}^
    2664:	00010000 	andeq	r0, r1, r0
    2668:	00086852 	andeq	r6, r8, r2, asr r8
    266c:	00087c00 	andeq	r7, r8, r0, lsl #24
    2670:	51000100 	tstpl	r0, r0, lsl #2
	...
    267c:	0000087c 	andeq	r0, r0, ip, ror r8
    2680:	00000880 	andeq	r0, r0, r0, lsl #17
    2684:	805d0001 	subshi	r0, sp, r1
    2688:	88000008 	stmdahi	r0, {r3}
    268c:	02000008 	andeq	r0, r0, #8
    2690:	88047d00 	stmdahi	r4, {r8, sl, fp, ip, sp, lr}
    2694:	0c000008 	stceq	0, cr0, [r0], {8}
    2698:	02000009 	andeq	r0, r0, #9
    269c:	00107d00 	andseq	r7, r0, r0, lsl #26
    26a0:	00000000 	andeq	r0, r0, r0
    26a4:	7c000000 	stcvc	0, cr0, [r0], {0}
    26a8:	90000008 	andls	r0, r0, r8
    26ac:	01000008 	tsteq	r0, r8
    26b0:	08905000 	ldmeq	r0, {ip, lr}
    26b4:	08cc0000 	stmiaeq	ip, {}^
    26b8:	00010000 	andeq	r0, r1, r0
    26bc:	0008dc53 	andeq	sp, r8, r3, asr ip
    26c0:	0008ec00 	andeq	lr, r8, r0, lsl #24
    26c4:	53000100 	movwpl	r0, #256	; 0x100
    26c8:	000008f8 	strdeq	r0, [r0], -r8
    26cc:	0000090c 	andeq	r0, r0, ip, lsl #18
    26d0:	00530001 	subseq	r0, r3, r1
    26d4:	00000000 	andeq	r0, r0, r0
    26d8:	7c000000 	stcvc	0, cr0, [r0], {0}
    26dc:	94000008 	strls	r0, [r0], #-8
    26e0:	01000008 	tsteq	r0, r8
    26e4:	08945100 	ldmeq	r4, {r8, ip, lr}
    26e8:	08a00000 	stmiaeq	r0!, {}
    26ec:	00010000 	andeq	r0, r1, r0
    26f0:	0008a052 	andeq	sl, r8, r2, asr r0
    26f4:	0008a400 	andeq	sl, r8, r0, lsl #8
    26f8:	51000100 	tstpl	r0, r0, lsl #2
    26fc:	000008a4 	andeq	r0, r0, r4, lsr #17
    2700:	000008d0 	ldrdeq	r0, [r0], -r0
    2704:	dc520001 	mrrcle	0, 0, r0, r2, cr1
    2708:	f8000008 	undefined instruction 0xf8000008
    270c:	01000008 	tsteq	r0, r8
    2710:	08f85200 	ldmeq	r8!, {r9, ip, lr}^
    2714:	090c0000 	stmdbeq	ip, {}
    2718:	00010000 	andeq	r0, r1, r0
    271c:	00000051 	andeq	r0, r0, r1, asr r0
    2720:	00000000 	andeq	r0, r0, r0
    2724:	00090c00 	andeq	r0, r9, r0, lsl #24
    2728:	00091400 	andeq	r1, r9, r0, lsl #8
    272c:	5d000100 	stfpls	f0, [r0]
    2730:	00000914 	andeq	r0, r0, r4, lsl r9
    2734:	00000994 	muleq	r0, r4, r9
    2738:	087d0002 	ldmdaeq	sp!, {r1}^
	...
    2744:	0000090c 	andeq	r0, r0, ip, lsl #18
    2748:	00000918 	andeq	r0, r0, r8, lsl r9
    274c:	18500001 	ldmdane	r0, {r0}^
    2750:	84000009 	strhi	r0, [r0], #-9
    2754:	01000009 	tsteq	r0, r9
    2758:	09885c00 	stmibeq	r8, {sl, fp, ip, lr}
    275c:	09940000 	ldmibeq	r4, {}
    2760:	00010000 	andeq	r0, r1, r0
    2764:	0000005c 	andeq	r0, r0, ip, asr r0
    2768:	00000000 	andeq	r0, r0, r0
    276c:	00090c00 	andeq	r0, r9, r0, lsl #24
    2770:	00098000 	andeq	r8, r9, r0
    2774:	51000100 	tstpl	r0, r0, lsl #2
    2778:	00000988 	andeq	r0, r0, r8, lsl #19
    277c:	00000994 	muleq	r0, r4, r9
    2780:	00510001 	subseq	r0, r1, r1
    2784:	00000000 	andeq	r0, r0, r0
    2788:	0c000000 	stceq	0, cr0, [r0], {0}
    278c:	84000009 	strhi	r0, [r0], #-9
    2790:	01000009 	tsteq	r0, r9
    2794:	09885200 	stmibeq	r8, {r9, ip, lr}
    2798:	09940000 	ldmibeq	r4, {}
    279c:	00010000 	andeq	r0, r1, r0
    27a0:	00000052 	andeq	r0, r0, r2, asr r0
    27a4:	00000000 	andeq	r0, r0, r0
    27a8:	00090c00 	andeq	r0, r9, r0, lsl #24
    27ac:	00094c00 	andeq	r4, r9, r0, lsl #24
    27b0:	53000100 	movwpl	r0, #256	; 0x100
    27b4:	00000988 	andeq	r0, r0, r8, lsl #19
    27b8:	00000994 	muleq	r0, r4, r9
    27bc:	00530001 	subseq	r0, r3, r1
	...
    27c8:	04000000 	streq	r0, [r0]
    27cc:	01000000 	tsteq	r0, r0
    27d0:	00045d00 	andeq	r5, r4, r0, lsl #26
    27d4:	00800000 	addeq	r0, r0, r0
    27d8:	00020000 	andeq	r0, r2, r0
    27dc:	0000187d 	andeq	r1, r0, sp, ror r8
	...
    27e8:	00180000 	andseq	r0, r8, r0
    27ec:	00010000 	andeq	r0, r1, r0
    27f0:	00001850 	andeq	r1, r0, r0, asr r8
    27f4:	00008000 	andeq	r8, r0, r0
    27f8:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    2808:	0000001c 	andeq	r0, r0, ip, lsl r0
    280c:	1c510001 	mrrcne	0, 0, r0, r1, cr1
    2810:	24000000 	strcs	r0, [r0]
    2814:	01000000 	tsteq	r0, r0
    2818:	00245500 	eoreq	r5, r4, r0, lsl #10
    281c:	00300000 	eorseq	r0, r0, r0
    2820:	00010000 	andeq	r0, r1, r0
    2824:	00003051 	andeq	r3, r0, r1, asr r0
    2828:	00004c00 	andeq	r4, r0, r0, lsl #24
    282c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    2830:	0000004c 	andeq	r0, r0, ip, asr #32
    2834:	00000054 	andeq	r0, r0, r4, asr r0
    2838:	54510001 	ldrbpl	r0, [r1], #-1
    283c:	80000000 	andhi	r0, r0, r0
    2840:	01000000 	tsteq	r0, r0
    2844:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    2850:	001c0000 	andseq	r0, ip, r0
    2854:	00010000 	andeq	r0, r1, r0
    2858:	00001c52 	andeq	r1, r0, r2, asr ip
    285c:	00008000 	andeq	r8, r0, r0
    2860:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    2870:	0000001c 	andeq	r0, r0, ip, lsl r0
    2874:	1c530001 	mrrcne	0, 0, r0, r3, cr1
    2878:	2c000000 	stccs	0, cr0, [r0], {0}
    287c:	01000000 	tsteq	r0, r0
    2880:	002c5700 	eoreq	r5, ip, r0, lsl #14
    2884:	00300000 	eorseq	r0, r0, r0
    2888:	00010000 	andeq	r0, r1, r0
    288c:	00003053 	andeq	r3, r0, r3, asr r0
    2890:	00004c00 	andeq	r4, r0, r0, lsl #24
    2894:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    2898:	0000004c 	andeq	r0, r0, ip, asr #32
    289c:	00000054 	andeq	r0, r0, r4, asr r0
    28a0:	54530001 	ldrbpl	r0, [r3], #-1
    28a4:	80000000 	andhi	r0, r0, r0
    28a8:	01000000 	tsteq	r0, r0
    28ac:	00005700 	andeq	r5, r0, r0, lsl #14
    28b0:	00000000 	andeq	r0, r0, r0
    28b4:	00800000 	addeq	r0, r0, r0
    28b8:	00840000 	addeq	r0, r4, r0
    28bc:	00010000 	andeq	r0, r1, r0
    28c0:	0000845d 	andeq	r8, r0, sp, asr r4
    28c4:	00017c00 	andeq	r7, r1, r0, lsl #24
    28c8:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    28cc:	00000010 	andeq	r0, r0, r0, lsl r0
    28d0:	00000000 	andeq	r0, r0, r0
    28d4:	00008000 	andeq	r8, r0, r0
    28d8:	00008c00 	andeq	r8, r0, r0, lsl #24
    28dc:	50000100 	andpl	r0, r0, r0, lsl #2
    28e0:	0000008c 	andeq	r0, r0, ip, lsl #1
    28e4:	0000017c 	andeq	r0, r0, ip, ror r1
    28e8:	00540001 	subseq	r0, r4, r1
    28ec:	00000000 	andeq	r0, r0, r0
    28f0:	7c000000 	stcvc	0, cr0, [r0], {0}
    28f4:	80000001 	andhi	r0, r0, r1
    28f8:	01000001 	tsteq	r0, r1
    28fc:	01805d00 	orreq	r5, r0, r0, lsl #26
    2900:	027c0000 	rsbseq	r0, ip, #0
    2904:	00020000 	andeq	r0, r2, r0
    2908:	0000107d 	andeq	r1, r0, sp, ror r0
    290c:	00000000 	andeq	r0, r0, r0
    2910:	017c0000 	cmneq	ip, r0
    2914:	01880000 	orreq	r0, r8, r0
    2918:	00010000 	andeq	r0, r1, r0
    291c:	00018850 	andeq	r8, r1, r0, asr r8
    2920:	00027c00 	andeq	r7, r2, r0, lsl #24
    2924:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    2930:	0000027c 	andeq	r0, r0, ip, ror r2
    2934:	00000280 	andeq	r0, r0, r0, lsl #5
    2938:	805d0001 	subshi	r0, sp, r1
    293c:	8c000002 	stchi	0, cr0, [r0], {2}
    2940:	02000002 	andeq	r0, r0, #2
    2944:	8c1c7d00 	ldchi	13, cr7, [ip], {0}
    2948:	ec000002 	stc	0, cr0, [r0], {2}
    294c:	02000004 	andeq	r0, r0, #4
    2950:	00287d00 	eoreq	r7, r8, r0, lsl #26
    2954:	00000000 	andeq	r0, r0, r0
    2958:	7c000000 	stcvc	0, cr0, [r0], {0}
    295c:	88000002 	stmdahi	r0, {r1}
    2960:	01000002 	tsteq	r0, r2
    2964:	02885000 	addeq	r5, r8, #0
    2968:	04ec0000 	strbteq	r0, [ip]
    296c:	00010000 	andeq	r0, r1, r0
    2970:	00000054 	andeq	r0, r0, r4, asr r0
    2974:	00000000 	andeq	r0, r0, r0
    2978:	00027c00 	andeq	r7, r2, r0, lsl #24
    297c:	0002a800 	andeq	sl, r2, r0, lsl #16
    2980:	51000100 	tstpl	r0, r0, lsl #2
    2984:	000002a8 	andeq	r0, r0, r8, lsr #5
    2988:	000004ec 	andeq	r0, r0, ip, ror #9
    298c:	00560001 	subseq	r0, r6, r1
    2990:	00000000 	andeq	r0, r0, r0
    2994:	7c000000 	stcvc	0, cr0, [r0], {0}
    2998:	a8000002 	stmdage	r0, {r1}
    299c:	01000002 	tsteq	r0, r2
    29a0:	02a85200 	adceq	r5, r8, #0
    29a4:	02bc0000 	adcseq	r0, ip, #0
    29a8:	00010000 	andeq	r0, r1, r0
    29ac:	0002bc55 	andeq	fp, r2, r5, asr ip
    29b0:	0002cc00 	andeq	ip, r2, r0, lsl #24
    29b4:	52000100 	andpl	r0, r0, #0
    29b8:	000002cc 	andeq	r0, r0, ip, asr #5
    29bc:	00000318 	andeq	r0, r0, r8, lsl r3
    29c0:	18550001 	ldmdane	r5, {r0}^
    29c4:	20000003 	andcs	r0, r0, r3
    29c8:	01000003 	tsteq	r0, r3
    29cc:	03205200 	teqeq	r0, #0
    29d0:	04ec0000 	strbteq	r0, [ip]
    29d4:	00010000 	andeq	r0, r1, r0
    29d8:	00000055 	andeq	r0, r0, r5, asr r0
    29dc:	00000000 	andeq	r0, r0, r0
    29e0:	00027c00 	andeq	r7, r2, r0, lsl #24
    29e4:	0002a800 	andeq	sl, r2, r0, lsl #16
    29e8:	53000100 	movwpl	r0, #256	; 0x100
    29ec:	000002a8 	andeq	r0, r0, r8, lsr #5
    29f0:	000002c4 	andeq	r0, r0, r4, asr #5
    29f4:	c4580001 	ldrbgt	r0, [r8], #-1
    29f8:	cc000002 	stcgt	0, cr0, [r0], {2}
    29fc:	01000002 	tsteq	r0, r2
    2a00:	02cc5300 	sbceq	r5, ip, #0
    2a04:	03180000 	tsteq	r8, #0
    2a08:	00010000 	andeq	r0, r1, r0
    2a0c:	00031858 	andeq	r1, r3, r8, asr r8
    2a10:	00032000 	andeq	r2, r3, r0
    2a14:	53000100 	movwpl	r0, #256	; 0x100
    2a18:	00000320 	andeq	r0, r0, r0, lsr #6
    2a1c:	000004ec 	andeq	r0, r0, ip, ror #9
    2a20:	00580001 	subseq	r0, r8, r1
    2a24:	00000000 	andeq	r0, r0, r0
    2a28:	a4000000 	strge	r0, [r0]
    2a2c:	cc000002 	stcgt	0, cr0, [r0], {2}
    2a30:	01000002 	tsteq	r0, r2
    2a34:	030c5000 	movweq	r5, #49152	; 0xc000
    2a38:	030c0000 	movweq	r0, #49152	; 0xc000
    2a3c:	00010000 	andeq	r0, r1, r0
    2a40:	00031850 	andeq	r1, r3, r0, asr r8
    2a44:	00032000 	andeq	r2, r3, r0
    2a48:	50000100 	andpl	r0, r0, r0, lsl #2
    2a4c:	000003b4 	undefined instruction 0x000003b4
    2a50:	000003b8 	undefined instruction 0x000003b8
    2a54:	c0500001 	subsgt	r0, r0, r1
    2a58:	c4000003 	strgt	r0, [r0], #-3
    2a5c:	01000003 	tsteq	r0, r3
    2a60:	04045000 	streq	r5, [r4]
    2a64:	04080000 	streq	r0, [r8]
    2a68:	00010000 	andeq	r0, r1, r0
    2a6c:	00043450 	andeq	r3, r4, r0, asr r4
    2a70:	00043800 	andeq	r3, r4, r0, lsl #16
    2a74:	50000100 	andpl	r0, r0, r0, lsl #2
    2a78:	00000448 	andeq	r0, r0, r8, asr #8
    2a7c:	0000044c 	andeq	r0, r0, ip, asr #8
    2a80:	54500001 	ldrbpl	r0, [r0], #-1
    2a84:	58000004 	stmdapl	r0, {r2}
    2a88:	01000004 	tsteq	r0, r4
    2a8c:	04b05000 	ldrteq	r5, [r0]
    2a90:	04d80000 	ldrbeq	r0, [r8]
    2a94:	00010000 	andeq	r0, r1, r0
    2a98:	00000050 	andeq	r0, r0, r0, asr r0
    2a9c:	00000000 	andeq	r0, r0, r0
    2aa0:	00033000 	andeq	r3, r3, r0
    2aa4:	00038000 	andeq	r8, r3, r0
    2aa8:	53000100 	movwpl	r0, #256	; 0x100
    2aac:	00000438 	andeq	r0, r0, r8, lsr r4
    2ab0:	0000043c 	andeq	r0, r0, ip, lsr r4
    2ab4:	00530001 	subseq	r0, r3, r1
    2ab8:	00000000 	andeq	r0, r0, r0
    2abc:	ec000000 	stc	0, cr0, [r0], {0}
    2ac0:	f0000004 	undefined instruction 0xf0000004
    2ac4:	01000004 	tsteq	r0, r4
    2ac8:	04f05d00 	ldrbteq	r5, [r0], #3328	; 0xd00
    2acc:	04f80000 	ldrbteq	r0, [r8]
    2ad0:	00020000 	andeq	r0, r2, r0
    2ad4:	04f81c7d 	ldrbteq	r1, [r8], #3197	; 0xc7d
    2ad8:	07340000 	ldreq	r0, [r4, -r0]!
    2adc:	00020000 	andeq	r0, r2, r0
    2ae0:	0000287d 	andeq	r2, r0, sp, ror r8
    2ae4:	00000000 	andeq	r0, r0, r0
    2ae8:	04ec0000 	strbteq	r0, [ip]
    2aec:	05100000 	ldreq	r0, [r0]
    2af0:	00010000 	andeq	r0, r1, r0
    2af4:	00051050 	andeq	r1, r5, r0, asr r0
    2af8:	00073400 	andeq	r3, r7, r0, lsl #8
    2afc:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    2b08:	000004ec 	andeq	r0, r0, ip, ror #9
    2b0c:	00000510 	andeq	r0, r0, r0, lsl r5
    2b10:	10510001 	subsne	r0, r1, r1
    2b14:	34000005 	strcc	r0, [r0], #-5
    2b18:	01000007 	tsteq	r0, r7
    2b1c:	00005700 	andeq	r5, r0, r0, lsl #14
    2b20:	00000000 	andeq	r0, r0, r0
    2b24:	04ec0000 	strbteq	r0, [ip]
    2b28:	05100000 	ldreq	r0, [r0]
    2b2c:	00010000 	andeq	r0, r1, r0
    2b30:	00051052 	andeq	r1, r5, r2, asr r0
    2b34:	00073400 	andeq	r3, r7, r0, lsl #8
    2b38:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    2b44:	000004ec 	andeq	r0, r0, ip, ror #9
    2b48:	00000510 	andeq	r0, r0, r0, lsl r5
    2b4c:	10530001 	subsne	r0, r3, r1
    2b50:	d4000005 	strle	r0, [r0], #-5
    2b54:	01000005 	tsteq	r0, r5
    2b58:	060c5a00 	streq	r5, [ip], -r0, lsl #20
    2b5c:	07340000 	ldreq	r0, [r4, -r0]!
    2b60:	00010000 	andeq	r0, r1, r0
    2b64:	0000005a 	andeq	r0, r0, sl, asr r0
    2b68:	00000000 	andeq	r0, r0, r0
    2b6c:	0004ec00 	andeq	lr, r4, r0, lsl #24
    2b70:	00050c00 	andeq	r0, r5, r0, lsl #24
    2b74:	91000200 	tstls	r0, r0, lsl #4
    2b78:	00050c00 	andeq	r0, r5, r0, lsl #24
    2b7c:	00073400 	andeq	r3, r7, r0, lsl #8
    2b80:	58000100 	stmdapl	r0, {r8}
	...
    2b8c:	00000684 	andeq	r0, r0, r4, lsl #13
    2b90:	000006f0 	strdeq	r0, [r0], -r0
    2b94:	24520001 	ldrbcs	r0, [r2], #-1
    2b98:	28000007 	stmdacs	r0, {r0, r1, r2}
    2b9c:	01000007 	tsteq	r0, r7
    2ba0:	00005200 	andeq	r5, r0, r0, lsl #4
    2ba4:	00000000 	andeq	r0, r0, r0
    2ba8:	07340000 	ldreq	r0, [r4, -r0]!
    2bac:	07380000 	ldreq	r0, [r8, -r0]!
    2bb0:	00010000 	andeq	r0, r1, r0
    2bb4:	0007385d 	andeq	r3, r7, sp, asr r8
    2bb8:	00074000 	andeq	r4, r7, r0
    2bbc:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    2bc0:	00074010 	andeq	r4, r7, r0, lsl r0
    2bc4:	0007b000 	andeq	fp, r7, r0
    2bc8:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    2bcc:	00000018 	andeq	r0, r0, r8, lsl r0
    2bd0:	00000000 	andeq	r0, r0, r0
    2bd4:	00073400 	andeq	r3, r7, r0, lsl #8
    2bd8:	00075000 	andeq	r5, r7, r0
    2bdc:	50000100 	andpl	r0, r0, r0, lsl #2
    2be0:	00000750 	andeq	r0, r0, r0, asr r7
    2be4:	000007b0 	undefined instruction 0x000007b0
    2be8:	00560001 	subseq	r0, r6, r1
    2bec:	00000000 	andeq	r0, r0, r0
    2bf0:	34000000 	strcc	r0, [r0]
    2bf4:	54000007 	strpl	r0, [r0], #-7
    2bf8:	01000007 	tsteq	r0, r7
    2bfc:	07545100 	ldrbeq	r5, [r4, -r0, lsl #2]
    2c00:	07600000 	strbeq	r0, [r0, -r0]!
    2c04:	00010000 	andeq	r0, r1, r0
    2c08:	0007605c 	andeq	r6, r7, ip, asr r0
    2c0c:	00077c00 	andeq	r7, r7, r0, lsl #24
    2c10:	51000100 	tstpl	r0, r0, lsl #2
    2c14:	0000077c 	andeq	r0, r0, ip, ror r7
    2c18:	00000788 	andeq	r0, r0, r8, lsl #15
    2c1c:	885c0001 	ldmdahi	ip, {r0}^
    2c20:	90000007 	andls	r0, r0, r7
    2c24:	01000007 	tsteq	r0, r7
    2c28:	07905100 	ldreq	r5, [r0, r0, lsl #2]
    2c2c:	07940000 	ldreq	r0, [r4, r0]
    2c30:	00010000 	andeq	r0, r1, r0
    2c34:	0000005c 	andeq	r0, r0, ip, asr r0
    2c38:	00000000 	andeq	r0, r0, r0
    2c3c:	00073400 	andeq	r3, r7, r0, lsl #8
    2c40:	00075400 	andeq	r5, r7, r0, lsl #8
    2c44:	52000100 	andpl	r0, r0, #0
    2c48:	00000754 	andeq	r0, r0, r4, asr r7
    2c4c:	000007b0 	undefined instruction 0x000007b0
    2c50:	00550001 	subseq	r0, r5, r1
    2c54:	00000000 	andeq	r0, r0, r0
    2c58:	34000000 	strcc	r0, [r0]
    2c5c:	54000007 	strpl	r0, [r0], #-7
    2c60:	01000007 	tsteq	r0, r7
    2c64:	07545300 	ldrbeq	r5, [r4, -r0, lsl #6]
    2c68:	07b00000 	ldreq	r0, [r0, r0]!
    2c6c:	00010000 	andeq	r0, r1, r0
    2c70:	00000054 	andeq	r0, r0, r4, asr r0
    2c74:	00000000 	andeq	r0, r0, r0
    2c78:	0007b000 	andeq	fp, r7, r0
    2c7c:	0007b400 	andeq	fp, r7, r0, lsl #8
    2c80:	5d000100 	stfpls	f0, [r0]
    2c84:	000007b4 	undefined instruction 0x000007b4
    2c88:	000007bc 	undefined instruction 0x000007bc
    2c8c:	047d0002 	ldrbteq	r0, [sp], #-2
    2c90:	000007bc 	undefined instruction 0x000007bc
    2c94:	00000844 	andeq	r0, r0, r4, asr #16
    2c98:	107d0002 	rsbsne	r0, sp, r2
	...
    2ca4:	000007b0 	undefined instruction 0x000007b0
    2ca8:	000007c8 	andeq	r0, r0, r8, asr #15
    2cac:	20500001 	subscs	r0, r0, r1
    2cb0:	28000008 	stmdacs	r0, {r3}
    2cb4:	01000008 	tsteq	r0, r8
    2cb8:	00005000 	andeq	r5, r0, r0
    2cbc:	00000000 	andeq	r0, r0, r0
    2cc0:	07b00000 	ldreq	r0, [r0, r0]!
    2cc4:	07cc0000 	strbeq	r0, [ip, r0]
    2cc8:	00010000 	andeq	r0, r1, r0
    2ccc:	0007cc51 	andeq	ip, r7, r1, asr ip
    2cd0:	0007d800 	andeq	sp, r7, r0, lsl #16
    2cd4:	5c000100 	stfpls	f0, [r0], {0}
    2cd8:	000007d8 	ldrdeq	r0, [r0], -r8
    2cdc:	000007fc 	strdeq	r0, [r0], -ip
    2ce0:	fc510001 	mrrc2	0, 0, r0, r1, cr1
    2ce4:	04000007 	streq	r0, [r0], #-7
    2ce8:	01000008 	tsteq	r0, r8
    2cec:	08105c00 	ldmdaeq	r0, {sl, fp, ip, lr}
    2cf0:	081c0000 	ldmdaeq	ip, {}
    2cf4:	00010000 	andeq	r0, r1, r0
    2cf8:	00081c5c 	andeq	r1, r8, ip, asr ip
    2cfc:	00082000 	andeq	r2, r8, r0
    2d00:	51000100 	tstpl	r0, r0, lsl #2
    2d04:	00000820 	andeq	r0, r0, r0, lsr #16
    2d08:	0000082c 	andeq	r0, r0, ip, lsr #16
    2d0c:	005c0001 	subseq	r0, ip, r1
    2d10:	00000000 	andeq	r0, r0, r0
    2d14:	b0000000 	andlt	r0, r0, r0
    2d18:	cc000007 	stcgt	0, cr0, [r0], {7}
    2d1c:	01000007 	tsteq	r0, r7
    2d20:	07cc5200 	strbeq	r5, [ip, r0, lsl #4]
    2d24:	08080000 	stmdaeq	r8, {}
    2d28:	00010000 	andeq	r0, r1, r0
    2d2c:	00081053 	andeq	r1, r8, r3, asr r0
    2d30:	00083800 	andeq	r3, r8, r0, lsl #16
    2d34:	53000100 	movwpl	r0, #256	; 0x100
	...
    2d40:	00000844 	andeq	r0, r0, r4, asr #16
    2d44:	00000848 	andeq	r0, r0, r8, asr #16
    2d48:	485d0001 	ldmdami	sp, {r0}^
    2d4c:	50000008 	andpl	r0, r0, r8
    2d50:	02000008 	andeq	r0, r0, #8
    2d54:	50047d00 	andpl	r7, r4, r0, lsl #26
    2d58:	d8000008 	stmdale	r0, {r3}
    2d5c:	02000008 	andeq	r0, r0, #8
    2d60:	00107d00 	andseq	r7, r0, r0, lsl #26
    2d64:	00000000 	andeq	r0, r0, r0
    2d68:	44000000 	strmi	r0, [r0]
    2d6c:	5c000008 	stcpl	0, cr0, [r0], {8}
    2d70:	01000008 	tsteq	r0, r8
    2d74:	08b45000 	ldmeq	r4!, {ip, lr}
    2d78:	08bc0000 	ldmeq	ip!, {}
    2d7c:	00010000 	andeq	r0, r1, r0
    2d80:	00000050 	andeq	r0, r0, r0, asr r0
    2d84:	00000000 	andeq	r0, r0, r0
    2d88:	00084400 	andeq	r4, r8, r0, lsl #8
    2d8c:	00086000 	andeq	r6, r8, r0
    2d90:	51000100 	tstpl	r0, r0, lsl #2
    2d94:	00000860 	andeq	r0, r0, r0, ror #16
    2d98:	0000086c 	andeq	r0, r0, ip, ror #16
    2d9c:	6c5c0001 	mrrcvs	0, 0, r0, ip, cr1
    2da0:	90000008 	andls	r0, r0, r8
    2da4:	01000008 	tsteq	r0, r8
    2da8:	08905100 	ldmeq	r0, {r8, ip, lr}
    2dac:	08980000 	ldmeq	r8, {}
    2db0:	00010000 	andeq	r0, r1, r0
    2db4:	0008a45c 	andeq	sl, r8, ip, asr r4
    2db8:	0008b000 	andeq	fp, r8, r0
    2dbc:	5c000100 	stfpls	f0, [r0], {0}
    2dc0:	000008b0 	undefined instruction 0x000008b0
    2dc4:	000008b4 	undefined instruction 0x000008b4
    2dc8:	b4510001 	ldrblt	r0, [r1], #-1
    2dcc:	c0000008 	andgt	r0, r0, r8
    2dd0:	01000008 	tsteq	r0, r8
    2dd4:	00005c00 	andeq	r5, r0, r0, lsl #24
    2dd8:	00000000 	andeq	r0, r0, r0
    2ddc:	08440000 	stmdaeq	r4, {}^
    2de0:	08600000 	stmdaeq	r0!, {}^
    2de4:	00010000 	andeq	r0, r1, r0
    2de8:	00086052 	andeq	r6, r8, r2, asr r0
    2dec:	00089c00 	andeq	r9, r8, r0, lsl #24
    2df0:	53000100 	movwpl	r0, #256	; 0x100
    2df4:	000008a4 	andeq	r0, r0, r4, lsr #17
    2df8:	000008cc 	andeq	r0, r0, ip, asr #17
    2dfc:	00530001 	subseq	r0, r3, r1
    2e00:	00000000 	andeq	r0, r0, r0
    2e04:	d8000000 	stmdale	r0, {}
    2e08:	e0000008 	and	r0, r0, r8
    2e0c:	01000008 	tsteq	r0, r8
    2e10:	08e05d00 	stmiaeq	r0!, {r8, sl, fp, ip, lr}^
    2e14:	09900000 	ldmibeq	r0, {}
    2e18:	00020000 	andeq	r0, r2, r0
    2e1c:	0000087d 	andeq	r0, r0, sp, ror r8
    2e20:	00000000 	andeq	r0, r0, r0
    2e24:	08d80000 	ldmeq	r8, {}^
    2e28:	08e40000 	stmiaeq	r4!, {}^
    2e2c:	00010000 	andeq	r0, r1, r0
    2e30:	0008e450 	andeq	lr, r8, r0, asr r4
    2e34:	00098000 	andeq	r8, r9, r0
    2e38:	5c000100 	stfpls	f0, [r0], {0}
    2e3c:	00000984 	andeq	r0, r0, r4, lsl #19
    2e40:	00000990 	muleq	r0, r0, r9
    2e44:	005c0001 	subseq	r0, ip, r1
    2e48:	00000000 	andeq	r0, r0, r0
    2e4c:	d8000000 	stmdale	r0, {}
    2e50:	30000008 	andcc	r0, r0, r8
    2e54:	01000009 	tsteq	r0, r9
    2e58:	09845100 	stmibeq	r4, {r8, ip, lr}
    2e5c:	09900000 	ldmibeq	r0, {}
    2e60:	00010000 	andeq	r0, r1, r0
    2e64:	00000051 	andeq	r0, r0, r1, asr r0
    2e68:	00000000 	andeq	r0, r0, r0
    2e6c:	0008d800 	andeq	sp, r8, r0, lsl #16
    2e70:	00095800 	andeq	r5, r9, r0, lsl #16
    2e74:	52000100 	andpl	r0, r0, #0
    2e78:	00000958 	andeq	r0, r0, r8, asr r9
    2e7c:	00000980 	andeq	r0, r0, r0, lsl #19
    2e80:	84520001 	ldrbhi	r0, [r2], #-1
    2e84:	90000009 	andls	r0, r0, r9
    2e88:	01000009 	tsteq	r0, r9
    2e8c:	00005200 	andeq	r5, r0, r0, lsl #4
    2e90:	00000000 	andeq	r0, r0, r0
    2e94:	08d80000 	ldmeq	r8, {}^
    2e98:	09300000 	ldmdbeq	r0!, {}
    2e9c:	00010000 	andeq	r0, r1, r0
    2ea0:	00093053 	andeq	r3, r9, r3, asr r0
    2ea4:	00097800 	andeq	r7, r9, r0, lsl #16
    2ea8:	51000100 	tstpl	r0, r0, lsl #2
    2eac:	00000984 	andeq	r0, r0, r4, lsl #19
    2eb0:	00000990 	muleq	r0, r0, r9
    2eb4:	00530001 	subseq	r0, r3, r1
    2eb8:	00000000 	andeq	r0, r0, r0
    2ebc:	58000000 	stmdapl	r0, {}
    2ec0:	80000009 	andhi	r0, r0, r9
    2ec4:	01000009 	tsteq	r0, r9
    2ec8:	00005200 	andeq	r5, r0, r0, lsl #4
    2ecc:	00000000 	andeq	r0, r0, r0
    2ed0:	09380000 	ldmdbeq	r8!, {}
    2ed4:	09600000 	stmdbeq	r0!, {}^
    2ed8:	00010000 	andeq	r0, r1, r0
    2edc:	00000053 	andeq	r0, r0, r3, asr r0
	...
    2ee8:	00000400 	andeq	r0, r0, r0, lsl #8
    2eec:	5d000100 	stfpls	f0, [r0]
    2ef0:	00000004 	andeq	r0, r0, r4
    2ef4:	000000cc 	andeq	r0, r0, ip, asr #1
    2ef8:	107d0002 	rsbsne	r0, sp, r2
	...
    2f08:	00000010 	andeq	r0, r0, r0, lsl r0
    2f0c:	10500001 	subsne	r0, r0, r1
    2f10:	2c000000 	stccs	0, cr0, [r0], {0}
    2f14:	01000000 	tsteq	r0, r0
    2f18:	00005600 	andeq	r5, r0, r0, lsl #12
    2f1c:	00000000 	andeq	r0, r0, r0
    2f20:	00cc0000 	sbceq	r0, ip, r0
    2f24:	00d00000 	sbcseq	r0, r0, r0
    2f28:	00010000 	andeq	r0, r1, r0
    2f2c:	0000d05d 	andeq	sp, r0, sp, asr r0
    2f30:	00012800 	andeq	r2, r1, r0, lsl #16
    2f34:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    2f38:	00000008 	andeq	r0, r0, r8
    2f3c:	00000000 	andeq	r0, r0, r0
    2f40:	00012800 	andeq	r2, r1, r0, lsl #16
    2f44:	00012c00 	andeq	r2, r1, r0, lsl #24
    2f48:	5d000100 	stfpls	f0, [r0]
    2f4c:	0000012c 	andeq	r0, r0, ip, lsr #2
    2f50:	00000130 	andeq	r0, r0, r0, lsr r1
    2f54:	087d0002 	ldmdaeq	sp!, {r1}^
    2f58:	00000130 	andeq	r0, r0, r0, lsr r1
    2f5c:	000001d0 	ldrdeq	r0, [r0], -r0
    2f60:	207d0002 	rsbscs	r0, sp, r2
	...
    2f6c:	000001d0 	ldrdeq	r0, [r0], -r0
    2f70:	000001d4 	ldrdeq	r0, [r0], -r4
    2f74:	d45d0001 	ldrble	r0, [sp], #-1
    2f78:	4c000001 	stcmi	0, cr0, [r0], {1}
    2f7c:	02000002 	andeq	r0, r0, #2
    2f80:	00087d00 	andeq	r7, r8, r0, lsl #26
	...
    2f8c:	04000000 	streq	r0, [r0]
    2f90:	01000000 	tsteq	r0, r0
    2f94:	00045d00 	andeq	r5, r4, r0, lsl #26
    2f98:	01180000 	tsteq	r8, r0
    2f9c:	00020000 	andeq	r0, r2, r0
    2fa0:	0000107d 	andeq	r1, r0, sp, ror r0
	...
    2fac:	00100000 	andseq	r0, r0, r0
    2fb0:	00010000 	andeq	r0, r1, r0
    2fb4:	00001050 	andeq	r1, r0, r0, asr r0
    2fb8:	0000d400 	andeq	sp, r0, r0, lsl #8
    2fbc:	54000100 	strpl	r0, [r0], #-256	; 0x100
    2fc0:	00000104 	andeq	r0, r0, r4, lsl #2
    2fc4:	00000118 	andeq	r0, r0, r8, lsl r1
    2fc8:	00540001 	subseq	r0, r4, r1
	...
    2fd4:	14000000 	strne	r0, [r0]
    2fd8:	01000000 	tsteq	r0, r0
    2fdc:	00145100 	andseq	r5, r4, r0, lsl #2
    2fe0:	01180000 	tsteq	r8, r0
    2fe4:	00010000 	andeq	r0, r1, r0
    2fe8:	00000056 	andeq	r0, r0, r6, asr r0
    2fec:	00000000 	andeq	r0, r0, r0
    2ff0:	00011800 	andeq	r1, r1, r0, lsl #16
    2ff4:	00011c00 	andeq	r1, r1, r0, lsl #24
    2ff8:	5d000100 	stfpls	f0, [r0]
    2ffc:	0000011c 	andeq	r0, r0, ip, lsl r1
    3000:	000001e0 	andeq	r0, r0, r0, ror #3
    3004:	187d0002 	ldmdane	sp!, {r1}^
	...
    3010:	00000118 	andeq	r0, r0, r8, lsl r1
    3014:	00000128 	andeq	r0, r0, r8, lsr #2
    3018:	28500001 	ldmdacs	r0, {r0}^
    301c:	e0000001 	and	r0, r0, r1
    3020:	01000001 	tsteq	r0, r1
    3024:	00005400 	andeq	r5, r0, r0, lsl #8
    3028:	00000000 	andeq	r0, r0, r0
    302c:	01180000 	tsteq	r8, r0
    3030:	012c0000 	teqeq	ip, r0
    3034:	00010000 	andeq	r0, r1, r0
    3038:	00012c51 	andeq	r2, r1, r1, asr ip
    303c:	0001e000 	andeq	lr, r1, r0
    3040:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    304c:	000001e0 	andeq	r0, r0, r0, ror #3
    3050:	000001e4 	andeq	r0, r0, r4, ror #3
    3054:	e45d0001 	ldrb	r0, [sp], #-1
    3058:	dc000001 	stcle	0, cr0, [r0], {1}
    305c:	02000002 	andeq	r0, r0, #2
    3060:	00107d00 	andseq	r7, r0, r0, lsl #26
    3064:	00000000 	andeq	r0, r0, r0
    3068:	e0000000 	and	r0, r0, r0
    306c:	ec000001 	stc	0, cr0, [r0], {1}
    3070:	01000001 	tsteq	r0, r1
    3074:	01ec5000 	mvneq	r5, r0
    3078:	02dc0000 	sbcseq	r0, ip, #0
    307c:	00010000 	andeq	r0, r1, r0
    3080:	00000054 	andeq	r0, r0, r4, asr r0
    3084:	00000000 	andeq	r0, r0, r0
    3088:	0002dc00 	andeq	sp, r2, r0, lsl #24
    308c:	0002e000 	andeq	lr, r2, r0
    3090:	5d000100 	stfpls	f0, [r0]
    3094:	000002e0 	andeq	r0, r0, r0, ror #5
    3098:	00000488 	andeq	r0, r0, r8, lsl #9
    309c:	187d0002 	ldmdane	sp!, {r1}^
	...
    30a8:	000002dc 	ldrdeq	r0, [r0], -ip
    30ac:	000002ec 	andeq	r0, r0, ip, ror #5
    30b0:	ec500001 	mrrc	0, 0, r0, r0, cr1
    30b4:	88000002 	stmdahi	r0, {r1}
    30b8:	01000004 	tsteq	r0, r4
    30bc:	00005500 	andeq	r5, r0, r0, lsl #10
    30c0:	00000000 	andeq	r0, r0, r0
    30c4:	02dc0000 	sbcseq	r0, ip, #0
    30c8:	02f00000 	rscseq	r0, r0, #0
    30cc:	00010000 	andeq	r0, r1, r0
    30d0:	0002f051 	andeq	pc, r2, r1, asr r0
    30d4:	00048800 	andeq	r8, r4, r0, lsl #16
    30d8:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    30e4:	000002ec 	andeq	r0, r0, ip, ror #5
    30e8:	00000304 	andeq	r0, r0, r4, lsl #6
    30ec:	0c500001 	mrrceq	0, 0, r0, r0, cr1
    30f0:	14000003 	strne	r0, [r0], #-3
    30f4:	01000003 	tsteq	r0, r3
    30f8:	03545000 	cmpeq	r4, #0
    30fc:	03580000 	cmpeq	r8, #0
    3100:	00010000 	andeq	r0, r1, r0
    3104:	00036050 	andeq	r6, r3, r0, asr r0
    3108:	00036400 	andeq	r6, r3, r0, lsl #8
    310c:	50000100 	andpl	r0, r0, r0, lsl #2
    3110:	000003ac 	andeq	r0, r0, ip, lsr #7
    3114:	000003b0 	undefined instruction 0x000003b0
    3118:	dc500001 	mrrcle	0, 0, r0, r0, cr1
    311c:	e0000003 	and	r0, r0, r3
    3120:	01000003 	tsteq	r0, r3
    3124:	04045000 	streq	r5, [r4]
    3128:	04080000 	streq	r0, [r8]
    312c:	00010000 	andeq	r0, r1, r0
    3130:	00041850 	andeq	r1, r4, r0, asr r8
    3134:	00041c00 	andeq	r1, r4, r0, lsl #24
    3138:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3144:	00000488 	andeq	r0, r0, r8, lsl #9
    3148:	0000048c 	andeq	r0, r0, ip, lsl #9
    314c:	8c5d0001 	mrrchi	0, 0, r0, sp, cr1
    3150:	3c000004 	stccc	0, cr0, [r0], {4}
    3154:	02000006 	andeq	r0, r0, #6
    3158:	00187d00 	andseq	r7, r8, r0, lsl #26
    315c:	00000000 	andeq	r0, r0, r0
    3160:	88000000 	stmdahi	r0, {}
    3164:	9c000004 	stcls	0, cr0, [r0], {4}
    3168:	01000004 	tsteq	r0, r4
    316c:	049c5000 	ldreq	r5, [ip]
    3170:	052c0000 	streq	r0, [ip]!
    3174:	00010000 	andeq	r0, r1, r0
    3178:	00055454 	andeq	r5, r5, r4, asr r4
    317c:	00058400 	andeq	r8, r5, r0, lsl #8
    3180:	54000100 	strpl	r0, [r0], #-256	; 0x100
    3184:	0000058c 	andeq	r0, r0, ip, lsl #11
    3188:	0000063c 	andeq	r0, r0, ip, lsr r6
    318c:	00540001 	subseq	r0, r4, r1
    3190:	00000000 	andeq	r0, r0, r0
    3194:	88000000 	stmdahi	r0, {}
    3198:	9c000004 	stcls	0, cr0, [r0], {4}
    319c:	01000004 	tsteq	r0, r4
    31a0:	049c5100 	ldreq	r5, [ip], #256	; 0x100
    31a4:	063c0000 	ldrteq	r0, [ip], -r0
    31a8:	00010000 	andeq	r0, r1, r0
    31ac:	00000056 	andeq	r0, r0, r6, asr r0
    31b0:	00000000 	andeq	r0, r0, r0
    31b4:	00063c00 	andeq	r3, r6, r0, lsl #24
    31b8:	00064000 	andeq	r4, r6, r0
    31bc:	5d000100 	stfpls	f0, [r0]
    31c0:	00000640 	andeq	r0, r0, r0, asr #12
    31c4:	00000648 	andeq	r0, r0, r8, asr #12
    31c8:	047d0002 	ldrbteq	r0, [sp], #-2
    31cc:	00000648 	andeq	r0, r0, r8, asr #12
    31d0:	0000069c 	muleq	r0, ip, r6
    31d4:	107d0002 	rsbsne	r0, sp, r2
	...
    31e0:	0000063c 	andeq	r0, r0, ip, lsr r6
    31e4:	0000064c 	andeq	r0, r0, ip, asr #12
    31e8:	4c500001 	mrrcmi	0, 0, r0, r0, cr1
    31ec:	64000006 	strvs	r0, [r0], #-6
    31f0:	01000006 	tsteq	r0, r6
    31f4:	06705100 	ldrbteq	r5, [r0], -r0, lsl #2
    31f8:	068c0000 	streq	r0, [ip], r0
    31fc:	00010000 	andeq	r0, r1, r0
    3200:	00068c51 	andeq	r8, r6, r1, asr ip
    3204:	00069c00 	andeq	r9, r6, r0, lsl #24
    3208:	51000100 	tstpl	r0, r0, lsl #2
	...
    3214:	0000069c 	muleq	r0, ip, r6
    3218:	000006a0 	andeq	r0, r0, r0, lsr #13
    321c:	a05d0001 	subsge	r0, sp, r1
    3220:	a8000006 	stmdage	r0, {r1, r2}
    3224:	02000006 	andeq	r0, r0, #6
    3228:	a8047d00 	stmdage	r4, {r8, sl, fp, ip, sp, lr}
    322c:	14000006 	strne	r0, [r0], #-6
    3230:	02000007 	andeq	r0, r0, #7
    3234:	00107d00 	andseq	r7, r0, r0, lsl #26
    3238:	00000000 	andeq	r0, r0, r0
    323c:	9c000000 	stcls	0, cr0, [r0], {0}
    3240:	ac000006 	stcge	0, cr0, [r0], {6}
    3244:	01000006 	tsteq	r0, r6
    3248:	06e85000 	strbteq	r5, [r8], r0
    324c:	06f00000 	ldrbteq	r0, [r0], r0
    3250:	00010000 	andeq	r0, r1, r0
    3254:	00000050 	andeq	r0, r0, r0, asr r0
    3258:	00000000 	andeq	r0, r0, r0
    325c:	00071400 	andeq	r1, r7, r0, lsl #8
    3260:	00071c00 	andeq	r1, r7, r0, lsl #24
    3264:	5d000100 	stfpls	f0, [r0]
    3268:	0000071c 	andeq	r0, r0, ip, lsl r7
    326c:	00000774 	andeq	r0, r0, r4, ror r7
    3270:	087d0002 	ldmdaeq	sp!, {r1}^
	...
    327c:	00000714 	andeq	r0, r0, r4, lsl r7
    3280:	00000720 	andeq	r0, r0, r0, lsr #14
    3284:	20500001 	subscs	r0, r0, r1
    3288:	64000007 	strvs	r0, [r0], #-7
    328c:	01000007 	tsteq	r0, r7
    3290:	07685300 	strbeq	r5, [r8, -r0, lsl #6]!
    3294:	07740000 	ldrbeq	r0, [r4, -r0]!
    3298:	00010000 	andeq	r0, r1, r0
    329c:	00000053 	andeq	r0, r0, r3, asr r0
    32a0:	00000000 	andeq	r0, r0, r0
    32a4:	00071400 	andeq	r1, r7, r0, lsl #8
    32a8:	00076000 	andeq	r6, r7, r0
    32ac:	51000100 	tstpl	r0, r0, lsl #2
    32b0:	00000768 	andeq	r0, r0, r8, ror #14
    32b4:	00000774 	andeq	r0, r0, r4, ror r7
    32b8:	00510001 	subseq	r0, r1, r1
    32bc:	00000000 	andeq	r0, r0, r0
    32c0:	14000000 	strne	r0, [r0]
    32c4:	40000007 	andmi	r0, r0, r7
    32c8:	01000007 	tsteq	r0, r7
    32cc:	07685200 	strbeq	r5, [r8, -r0, lsl #4]!
    32d0:	07740000 	ldrbeq	r0, [r4, -r0]!
    32d4:	00010000 	andeq	r0, r1, r0
    32d8:	00000052 	andeq	r0, r0, r2, asr r0
    32dc:	00000000 	andeq	r0, r0, r0
    32e0:	00001000 	andeq	r1, r0, r0
    32e4:	00003c00 	andeq	r3, r0, r0, lsl #24
    32e8:	50000100 	andpl	r0, r0, r0, lsl #2
    32ec:	00000040 	andeq	r0, r0, r0, asr #32
    32f0:	00000044 	andeq	r0, r0, r4, asr #32
    32f4:	48500001 	ldmdami	r0, {r0}^
    32f8:	4c000000 	stcmi	0, cr0, [r0], {0}
    32fc:	01000000 	tsteq	r0, r0
    3300:	00505000 	subseq	r5, r0, r0
    3304:	00540000 	subseq	r0, r4, r0
    3308:	00010000 	andeq	r0, r1, r0
    330c:	00005850 	andeq	r5, r0, r0, asr r8
    3310:	00006000 	andeq	r6, r0, r0
    3314:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3320:	0000003c 	andeq	r0, r0, ip, lsr r0
    3324:	0000003c 	andeq	r0, r0, ip, lsr r0
    3328:	44500001 	ldrbmi	r0, [r0], #-1
    332c:	48000000 	stmdami	r0, {}
    3330:	01000000 	tsteq	r0, r0
    3334:	004c5000 	subeq	r5, ip, r0
    3338:	00500000 	subseq	r0, r0, r0
    333c:	00010000 	andeq	r0, r1, r0
    3340:	00005450 	andeq	r5, r0, r0, asr r4
    3344:	00005800 	andeq	r5, r0, r0, lsl #16
    3348:	50000100 	andpl	r0, r0, r0, lsl #2
    334c:	00000060 	andeq	r0, r0, r0, rrx
    3350:	00000068 	andeq	r0, r0, r8, rrx
    3354:	00500001 	subseq	r0, r0, r1
    3358:	00000000 	andeq	r0, r0, r0
    335c:	68000000 	stmdavs	r0, {}
    3360:	84000000 	strhi	r0, [r0]
    3364:	01000000 	tsteq	r0, r0
    3368:	00005000 	andeq	r5, r0, r0
    336c:	00000000 	andeq	r0, r0, r0
    3370:	00880000 	addeq	r0, r8, r0
    3374:	00a80000 	adceq	r0, r8, r0
    3378:	00010000 	andeq	r0, r1, r0
    337c:	00000050 	andeq	r0, r0, r0, asr r0
    3380:	00000000 	andeq	r0, r0, r0
    3384:	0000ac00 	andeq	sl, r0, r0, lsl #24
    3388:	0000b800 	andeq	fp, r0, r0, lsl #16
    338c:	5d000100 	stfpls	f0, [r0]
    3390:	000000b8 	strheq	r0, [r0], -r8
    3394:	0000016c 	andeq	r0, r0, ip, ror #2
    3398:	047d0002 	ldrbteq	r0, [sp], #-2
	...
    33a4:	000000ac 	andeq	r0, r0, ip, lsr #1
    33a8:	000000e0 	andeq	r0, r0, r0, ror #1
    33ac:	10500001 	subsne	r0, r0, r1
    33b0:	14000001 	strne	r0, [r0], #-1
    33b4:	01000001 	tsteq	r0, r1
    33b8:	00005000 	andeq	r5, r0, r0
    33bc:	00000000 	andeq	r0, r0, r0
    33c0:	00ac0000 	adceq	r0, ip, r0
    33c4:	00b40000 	adcseq	r0, r4, r0
    33c8:	00010000 	andeq	r0, r1, r0
    33cc:	00000051 	andeq	r0, r0, r1, asr r0
    33d0:	00000000 	andeq	r0, r0, r0
    33d4:	0000e000 	andeq	lr, r0, r0
    33d8:	0000e400 	andeq	lr, r0, r0, lsl #8
    33dc:	50000100 	andpl	r0, r0, r0, lsl #2
    33e0:	000000e4 	andeq	r0, r0, r4, ror #1
    33e4:	000000ec 	andeq	r0, r0, ip, ror #1
    33e8:	ec530001 	mrrc	0, 0, r0, r3, cr1
    33ec:	f8000000 	undefined instruction 0xf8000000
    33f0:	01000000 	tsteq	r0, r0
    33f4:	00f85000 	rscseq	r5, r8, r0
    33f8:	01000000 	tsteq	r0, r0
    33fc:	00010000 	andeq	r0, r1, r0
    3400:	00010053 	andeq	r0, r1, r3, asr r0
    3404:	00011400 	andeq	r1, r1, r0, lsl #8
    3408:	50000100 	andpl	r0, r0, r0, lsl #2
    340c:	0000011c 	andeq	r0, r0, ip, lsl r1
    3410:	00000120 	andeq	r0, r0, r0, lsr #2
    3414:	20530001 	subscs	r0, r3, r1
    3418:	6c000001 	stcvs	0, cr0, [r0], {1}
    341c:	01000001 	tsteq	r0, r1
    3420:	00005000 	andeq	r5, r0, r0
    3424:	00000000 	andeq	r0, r0, r0
    3428:	016c0000 	cmneq	ip, r0
    342c:	01700000 	cmneq	r0, r0
    3430:	00010000 	andeq	r0, r1, r0
    3434:	0001705d 	andeq	r7, r1, sp, asr r0
    3438:	0001a800 	andeq	sl, r1, r0, lsl #16
    343c:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    3440:	00000008 	andeq	r0, r0, r8
    3444:	00000000 	andeq	r0, r0, r0
    3448:	0001a800 	andeq	sl, r1, r0, lsl #16
    344c:	0001ac00 	andeq	sl, r1, r0, lsl #24
    3450:	5d000100 	stfpls	f0, [r0]
    3454:	000001ac 	andeq	r0, r0, ip, lsr #3
    3458:	0000022c 	andeq	r0, r0, ip, lsr #4
    345c:	107d0002 	rsbsne	r0, sp, r2
	...
    3468:	000001a8 	andeq	r0, r0, r8, lsr #3
    346c:	000001c0 	andeq	r0, r0, r0, asr #3
    3470:	c0500001 	subsgt	r0, r0, r1
    3474:	2c000001 	stccs	0, cr0, [r0], {1}
    3478:	01000002 	tsteq	r0, r2
    347c:	00005600 	andeq	r5, r0, r0, lsl #12
    3480:	00000000 	andeq	r0, r0, r0
    3484:	022c0000 	eoreq	r0, ip, #0
    3488:	02300000 	eorseq	r0, r0, #0
    348c:	00010000 	andeq	r0, r1, r0
    3490:	0002305d 	andeq	r3, r2, sp, asr r0
    3494:	00026000 	andeq	r6, r2, r0
    3498:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    349c:	00000008 	andeq	r0, r0, r8
    34a0:	00000000 	andeq	r0, r0, r0
    34a4:	00026000 	andeq	r6, r2, r0
    34a8:	00026400 	andeq	r6, r2, r0, lsl #8
    34ac:	5d000100 	stfpls	f0, [r0]
    34b0:	00000264 	andeq	r0, r0, r4, ror #4
    34b4:	000002f8 	strdeq	r0, [r0], -r8
    34b8:	087d0002 	ldmdaeq	sp!, {r1}^
	...
    34c8:	00000008 	andeq	r0, r0, r8
    34cc:	1c500001 	mrrcne	0, 0, r0, r0, cr1
    34d0:	48000000 	stmdami	r0, {}
    34d4:	01000000 	tsteq	r0, r0
    34d8:	00005000 	andeq	r5, r0, r0
    34dc:	00000000 	andeq	r0, r0, r0
    34e0:	001c0000 	andseq	r0, ip, r0
    34e4:	00440000 	subeq	r0, r4, r0
    34e8:	00010000 	andeq	r0, r1, r0
    34ec:	00000050 	andeq	r0, r0, r0, asr r0
    34f0:	00000000 	andeq	r0, r0, r0
    34f4:	00004800 	andeq	r4, r0, r0, lsl #16
    34f8:	00005000 	andeq	r5, r0, r0
    34fc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3508:	00000048 	andeq	r0, r0, r8, asr #32
    350c:	0000004c 	andeq	r0, r0, ip, asr #32
    3510:	00510001 	subseq	r0, r1, r1
    3514:	00000000 	andeq	r0, r0, r0
    3518:	70000000 	andvc	r0, r0, r0
    351c:	74000000 	strvc	r0, [r0]
    3520:	01000000 	tsteq	r0, r0
    3524:	00745d00 	rsbseq	r5, r4, r0, lsl #26
    3528:	00980000 	addseq	r0, r8, r0
    352c:	00020000 	andeq	r0, r2, r0
    3530:	0000107d 	andeq	r1, r0, sp, ror r0
    3534:	00000000 	andeq	r0, r0, r0
    3538:	00700000 	rsbseq	r0, r0, r0
    353c:	00880000 	addeq	r0, r8, r0
    3540:	00010000 	andeq	r0, r1, r0
    3544:	00000050 	andeq	r0, r0, r0, asr r0
    3548:	00000000 	andeq	r0, r0, r0
    354c:	00007000 	andeq	r7, r0, r0
    3550:	00008800 	andeq	r8, r0, r0, lsl #16
    3554:	51000100 	tstpl	r0, r0, lsl #2
    3558:	00000088 	andeq	r0, r0, r8, lsl #1
    355c:	00000098 	muleq	r0, r8, r0
    3560:	00560001 	subseq	r0, r6, r1
    3564:	00000000 	andeq	r0, r0, r0
    3568:	70000000 	andvc	r0, r0, r0
    356c:	88000000 	stmdahi	r0, {}
    3570:	01000000 	tsteq	r0, r0
    3574:	00885200 	addeq	r5, r8, r0, lsl #4
    3578:	00980000 	addseq	r0, r8, r0
    357c:	00010000 	andeq	r0, r1, r0
    3580:	00000055 	andeq	r0, r0, r5, asr r0
    3584:	00000000 	andeq	r0, r0, r0
    3588:	00009800 	andeq	r9, r0, r0, lsl #16
    358c:	00009c00 	andeq	r9, r0, r0, lsl #24
    3590:	5d000100 	stfpls	f0, [r0]
    3594:	0000009c 	muleq	r0, ip, r0
    3598:	000000f0 	strdeq	r0, [r0], -r0
    359c:	107d0002 	rsbsne	r0, sp, r2
	...
    35a8:	000000f0 	strdeq	r0, [r0], -r0
    35ac:	000000f4 	strdeq	r0, [r0], -r4
    35b0:	f45d0001 	undefined instruction 0xf45d0001
    35b4:	88000000 	stmdahi	r0, {}
    35b8:	02000001 	andeq	r0, r0, #1
    35bc:	00187d00 	andseq	r7, r8, r0, lsl #26
    35c0:	00000000 	andeq	r0, r0, r0
    35c4:	f0000000 	undefined instruction 0xf0000000
    35c8:	00000000 	andeq	r0, r0, r0
    35cc:	01000001 	tsteq	r0, r1
    35d0:	01005000 	tsteq	r0, r0
    35d4:	01880000 	orreq	r0, r8, r0
    35d8:	00010000 	andeq	r0, r1, r0
    35dc:	00000054 	andeq	r0, r0, r4, asr r0
    35e0:	00000000 	andeq	r0, r0, r0
    35e4:	0000f000 	andeq	pc, r0, r0
    35e8:	00010000 	andeq	r0, r1, r0
    35ec:	51000100 	tstpl	r0, r0, lsl #2
    35f0:	00000100 	andeq	r0, r0, r0, lsl #2
    35f4:	00000108 	andeq	r0, r0, r8, lsl #2
    35f8:	08550001 	ldmdaeq	r5, {r0}^
    35fc:	1c000001 	stcne	0, cr0, [r0], {1}
    3600:	01000001 	tsteq	r0, r1
    3604:	011c5100 	tsteq	ip, r0, lsl #2
    3608:	01240000 	teqeq	r4, r0
    360c:	00010000 	andeq	r0, r1, r0
    3610:	00012455 	andeq	r2, r1, r5, asr r4
    3614:	00012c00 	andeq	r2, r1, r0, lsl #24
    3618:	51000100 	tstpl	r0, r0, lsl #2
    361c:	0000012c 	andeq	r0, r0, ip, lsr #2
    3620:	00000188 	andeq	r0, r0, r8, lsl #3
    3624:	00550001 	subseq	r0, r5, r1
    3628:	00000000 	andeq	r0, r0, r0
    362c:	88000000 	stmdahi	r0, {}
    3630:	8c000001 	stchi	0, cr0, [r0], {1}
    3634:	01000001 	tsteq	r0, r1
    3638:	018c5d00 	orreq	r5, ip, r0, lsl #26
    363c:	01940000 	orrseq	r0, r4, r0
    3640:	00020000 	andeq	r0, r2, r0
    3644:	0194107d 	orrseq	r1, r4, sp, ror r0
    3648:	022c0000 	eoreq	r0, ip, #0
    364c:	00020000 	andeq	r0, r2, r0
    3650:	0000187d 	andeq	r1, r0, sp, ror r8
    3654:	00000000 	andeq	r0, r0, r0
    3658:	01880000 	orreq	r0, r8, r0
    365c:	01980000 	orrseq	r0, r8, r0
    3660:	00010000 	andeq	r0, r1, r0
    3664:	00019850 	andeq	r9, r1, r0, asr r8
    3668:	00022c00 	andeq	r2, r2, r0, lsl #24
    366c:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    3678:	00000188 	andeq	r0, r0, r8, lsl #3
    367c:	000001d4 	ldrdeq	r0, [r0], -r4
    3680:	f0510001 	undefined instruction 0xf0510001
    3684:	00000001 	andeq	r0, r0, r1
    3688:	01000002 	tsteq	r0, r2
    368c:	02185100 	andseq	r5, r8, #0
    3690:	021c0000 	andseq	r0, ip, #0
    3694:	00010000 	andeq	r0, r1, r0
    3698:	00000051 	andeq	r0, r0, r1, asr r0
    369c:	00000000 	andeq	r0, r0, r0
    36a0:	00022c00 	andeq	r2, r2, r0, lsl #24
    36a4:	00023000 	andeq	r3, r2, r0
    36a8:	5d000100 	stfpls	f0, [r0]
    36ac:	00000230 	andeq	r0, r0, r0, lsr r2
    36b0:	000002c4 	andeq	r0, r0, r4, asr #5
    36b4:	107d0002 	rsbsne	r0, sp, r2
	...
    36c0:	0000022c 	andeq	r0, r0, ip, lsr #4
    36c4:	0000023c 	andeq	r0, r0, ip, lsr r2
    36c8:	3c500001 	mrrccc	0, 0, r0, r0, cr1
    36cc:	90000002 	andls	r0, r0, r2
    36d0:	01000002 	tsteq	r0, r2
    36d4:	00005400 	andeq	r5, r0, r0, lsl #8
    36d8:	00000000 	andeq	r0, r0, r0
    36dc:	022c0000 	eoreq	r0, ip, #0
    36e0:	02400000 	subeq	r0, r0, #0
    36e4:	00010000 	andeq	r0, r1, r0
    36e8:	00024051 	andeq	r4, r2, r1, asr r0
    36ec:	00027c00 	andeq	r7, r2, r0, lsl #24
    36f0:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    36f4:	00000288 	andeq	r0, r0, r8, lsl #5
    36f8:	000002c4 	andeq	r0, r0, r4, asr #5
    36fc:	00550001 	subseq	r0, r5, r1
    3700:	00000000 	andeq	r0, r0, r0
    3704:	c4000000 	strgt	r0, [r0]
    3708:	c8000002 	stmdagt	r0, {r1}
    370c:	01000002 	tsteq	r0, r2
    3710:	02c85d00 	sbceq	r5, r8, #0
    3714:	03840000 	orreq	r0, r4, #0
    3718:	00020000 	andeq	r0, r2, r0
    371c:	0000187d 	andeq	r1, r0, sp, ror r8
    3720:	00000000 	andeq	r0, r0, r0
    3724:	02c40000 	sbceq	r0, r4, #0
    3728:	02e40000 	rsceq	r0, r4, #0
    372c:	00010000 	andeq	r0, r1, r0
    3730:	0002e450 	andeq	lr, r2, r0, asr r4
    3734:	00034c00 	andeq	r4, r3, r0, lsl #24
    3738:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    3744:	000002c4 	andeq	r0, r0, r4, asr #5
    3748:	000002e8 	andeq	r0, r0, r8, ror #5
    374c:	e8510001 	ldmda	r1, {r0}^
    3750:	84000002 	strhi	r0, [r0], #-2
    3754:	01000003 	tsteq	r0, r3
    3758:	00005500 	andeq	r5, r0, r0, lsl #10
    375c:	00000000 	andeq	r0, r0, r0
    3760:	02c40000 	sbceq	r0, r4, #0
    3764:	02e80000 	rsceq	r0, r8, #0
    3768:	00010000 	andeq	r0, r1, r0
    376c:	0002e852 	andeq	lr, r2, r2, asr r8
    3770:	00038400 	andeq	r8, r3, r0, lsl #8
    3774:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    3780:	000002e8 	andeq	r0, r0, r8, ror #5
    3784:	000002f0 	strdeq	r0, [r0], -r0
    3788:	0c560001 	mrrceq	0, 0, r0, r6, cr1
    378c:	20000003 	andcs	r0, r0, r3
    3790:	01000003 	tsteq	r0, r3
    3794:	03405600 	movteq	r5, #1536	; 0x600
    3798:	03840000 	orreq	r0, r4, #0
    379c:	00010000 	andeq	r0, r1, r0
    37a0:	00000056 	andeq	r0, r0, r6, asr r0
    37a4:	00000000 	andeq	r0, r0, r0
    37a8:	0002e800 	andeq	lr, r2, r0, lsl #16
    37ac:	0002f000 	andeq	pc, r2, r0
    37b0:	56000100 	strpl	r0, [r0], -r0, lsl #2
    37b4:	0000030c 	andeq	r0, r0, ip, lsl #6
    37b8:	00000384 	andeq	r0, r0, r4, lsl #7
    37bc:	00560001 	subseq	r0, r6, r1
    37c0:	00000000 	andeq	r0, r0, r0
    37c4:	84000000 	strhi	r0, [r0]
    37c8:	88000003 	stmdahi	r0, {r0, r1}
    37cc:	01000003 	tsteq	r0, r3
    37d0:	03885d00 	orreq	r5, r8, #0
    37d4:	03f00000 	mvnseq	r0, #0
    37d8:	00020000 	andeq	r0, r2, r0
    37dc:	0000107d 	andeq	r1, r0, sp, ror r0
    37e0:	00000000 	andeq	r0, r0, r0
    37e4:	03f00000 	mvnseq	r0, #0
    37e8:	03f40000 	mvnseq	r0, #0
    37ec:	00010000 	andeq	r0, r1, r0
    37f0:	0003f45d 	andeq	pc, r3, sp, asr r4
    37f4:	00057000 	andeq	r7, r5, r0
    37f8:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    37fc:	00000010 	andeq	r0, r0, r0, lsl r0
    3800:	00000000 	andeq	r0, r0, r0
    3804:	0003f000 	andeq	pc, r3, r0
    3808:	0003fc00 	andeq	pc, r3, r0, lsl #24
    380c:	50000100 	andpl	r0, r0, r0, lsl #2
    3810:	000003fc 	strdeq	r0, [r0], -ip
    3814:	0000052c 	andeq	r0, r0, ip, lsr #10
    3818:	50540001 	subspl	r0, r4, r1
    381c:	58000005 	stmdapl	r0, {r0, r2}
    3820:	01000005 	tsteq	r0, r5
    3824:	00005400 	andeq	r5, r0, r0, lsl #8
    3828:	00000000 	andeq	r0, r0, r0
    382c:	05700000 	ldrbeq	r0, [r0]!
    3830:	05740000 	ldrbeq	r0, [r4]!
    3834:	00010000 	andeq	r0, r1, r0
    3838:	0005745d 	andeq	r7, r5, sp, asr r4
    383c:	00073c00 	andeq	r3, r7, r0, lsl #24
    3840:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    3844:	00000010 	andeq	r0, r0, r0, lsl r0
    3848:	00000000 	andeq	r0, r0, r0
    384c:	00057000 	andeq	r7, r5, r0
    3850:	00057c00 	andeq	r7, r5, r0, lsl #24
    3854:	50000100 	andpl	r0, r0, r0, lsl #2
    3858:	0000057c 	andeq	r0, r0, ip, ror r5
    385c:	000006f0 	strdeq	r0, [r0], -r0
    3860:	14540001 	ldrbne	r0, [r4], #-1
    3864:	1c000007 	stcne	0, cr0, [r0], {7}
    3868:	01000007 	tsteq	r0, r7
    386c:	00005400 	andeq	r5, r0, r0, lsl #8
    3870:	00000000 	andeq	r0, r0, r0
    3874:	073c0000 	ldreq	r0, [ip, -r0]!
    3878:	07400000 	strbeq	r0, [r0, -r0]
    387c:	00010000 	andeq	r0, r1, r0
    3880:	0007405d 	andeq	r4, r7, sp, asr r0
    3884:	0007fc00 	andeq	pc, r7, r0, lsl #24
    3888:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    388c:	00000018 	andeq	r0, r0, r8, lsl r0
    3890:	00000000 	andeq	r0, r0, r0
    3894:	00073c00 	andeq	r3, r7, r0, lsl #24
    3898:	00075400 	andeq	r5, r7, r0, lsl #8
    389c:	50000100 	andpl	r0, r0, r0, lsl #2
    38a0:	00000754 	andeq	r0, r0, r4, asr r7
    38a4:	000007fc 	strdeq	r0, [r0], -ip
    38a8:	00540001 	subseq	r0, r4, r1
    38ac:	00000000 	andeq	r0, r0, r0
    38b0:	3c000000 	stccc	0, cr0, [r0], {0}
    38b4:	58000007 	stmdapl	r0, {r0, r1, r2}
    38b8:	01000007 	tsteq	r0, r7
    38bc:	07585100 	ldrbeq	r5, [r8, -r0, lsl #2]
    38c0:	077c0000 	ldrbeq	r0, [ip, -r0]!
    38c4:	00010000 	andeq	r0, r1, r0
    38c8:	00077c55 	andeq	r7, r7, r5, asr ip
    38cc:	00079400 	andeq	r9, r7, r0, lsl #8
    38d0:	51000100 	tstpl	r0, r0, lsl #2
    38d4:	00000794 	muleq	r0, r4, r7
    38d8:	000007c0 	andeq	r0, r0, r0, asr #15
    38dc:	c0550001 	subsgt	r0, r5, r1
    38e0:	cc000007 	stcgt	0, cr0, [r0], {7}
    38e4:	01000007 	tsteq	r0, r7
    38e8:	07cc5100 	strbeq	r5, [ip, r0, lsl #2]
    38ec:	07fc0000 	ldrbeq	r0, [ip, r0]!
    38f0:	00010000 	andeq	r0, r1, r0
    38f4:	00000055 	andeq	r0, r0, r5, asr r0
    38f8:	00000000 	andeq	r0, r0, r0
    38fc:	00075800 	andeq	r5, r7, r0, lsl #16
    3900:	00076000 	andeq	r6, r7, r0
    3904:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    3908:	000007c4 	andeq	r0, r0, r4, asr #15
    390c:	000007e0 	andeq	r0, r0, r0, ror #15
    3910:	00570001 	subseq	r0, r7, r1
    3914:	00000000 	andeq	r0, r0, r0
    3918:	fc000000 	stc2	0, cr0, [r0], {0}
    391c:	00000007 	andeq	r0, r0, r7
    3920:	01000008 	tsteq	r0, r8
    3924:	08005d00 	stmdaeq	r0, {r8, sl, fp, ip, lr}
    3928:	08100000 	ldmdaeq	r0, {}
    392c:	00020000 	andeq	r0, r2, r0
    3930:	0810187d 	ldmdaeq	r0, {r0, r2, r3, r4, r5, r6, fp, ip}
    3934:	094c0000 	stmdbeq	ip, {}^
    3938:	00020000 	andeq	r0, r2, r0
    393c:	0000207d 	andeq	r2, r0, sp, ror r0
    3940:	00000000 	andeq	r0, r0, r0
    3944:	07fc0000 	ldrbeq	r0, [ip, r0]!
    3948:	08200000 	stmdaeq	r0!, {}
    394c:	00010000 	andeq	r0, r1, r0
    3950:	00082050 	andeq	r2, r8, r0, asr r0
    3954:	00089800 	andeq	r9, r8, r0, lsl #16
    3958:	54000100 	strpl	r0, [r0], #-256	; 0x100
    395c:	000008b8 	undefined instruction 0x000008b8
    3960:	00000930 	andeq	r0, r0, r0, lsr r9
    3964:	3c540001 	mrrccc	0, 0, r0, r4, cr1
    3968:	4c000009 	stcmi	0, cr0, [r0], {9}
    396c:	01000009 	tsteq	r0, r9
    3970:	00005400 	andeq	r5, r0, r0, lsl #8
    3974:	00000000 	andeq	r0, r0, r0
    3978:	07fc0000 	ldrbeq	r0, [ip, r0]!
    397c:	08240000 	stmdaeq	r4!, {}
    3980:	00010000 	andeq	r0, r1, r0
    3984:	00082451 	andeq	r2, r8, r1, asr r4
    3988:	00085000 	andeq	r5, r8, r0
    398c:	56000100 	strpl	r0, [r0], -r0, lsl #2
    3990:	00000850 	andeq	r0, r0, r0, asr r8
    3994:	00000860 	andeq	r0, r0, r0, ror #16
    3998:	60510001 	subsvs	r0, r1, r1
    399c:	4c000008 	stcmi	0, cr0, [r0], {8}
    39a0:	01000009 	tsteq	r0, r9
    39a4:	00005600 	andeq	r5, r0, r0, lsl #12
    39a8:	00000000 	andeq	r0, r0, r0
    39ac:	07fc0000 	ldrbeq	r0, [ip, r0]!
    39b0:	08240000 	stmdaeq	r4!, {}
    39b4:	00010000 	andeq	r0, r1, r0
    39b8:	00082452 	andeq	r2, r8, r2, asr r4
    39bc:	00083400 	andeq	r3, r8, r0, lsl #8
    39c0:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    39c4:	00000834 	andeq	r0, r0, r4, lsr r8
    39c8:	00000860 	andeq	r0, r0, r0, ror #16
    39cc:	60520001 	subsvs	r0, r2, r1
    39d0:	c4000008 	strgt	r0, [r0], #-8
    39d4:	01000008 	tsteq	r0, r8
    39d8:	08c45500 	stmiaeq	r4, {r8, sl, ip, lr}^
    39dc:	08d40000 	ldmeq	r4, {}^
    39e0:	00010000 	andeq	r0, r1, r0
    39e4:	0008d452 	andeq	sp, r8, r2, asr r4
    39e8:	00094c00 	andeq	r4, r9, r0, lsl #24
    39ec:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    39f8:	00000888 	andeq	r0, r0, r8, lsl #17
    39fc:	000008c4 	andeq	r0, r0, r4, asr #17
    3a00:	d4580001 	ldrble	r0, [r8], #-1
    3a04:	4c000008 	stcmi	0, cr0, [r0], {8}
    3a08:	01000009 	tsteq	r0, r9
    3a0c:	00005800 	andeq	r5, r0, r0, lsl #16
    3a10:	00000000 	andeq	r0, r0, r0
    3a14:	08840000 	stmeq	r4, {}
    3a18:	08900000 	ldmeq	r0, {}
    3a1c:	00020000 	andeq	r0, r2, r0
    3a20:	08905e91 	ldmeq	r0, {r0, r4, r7, r9, sl, fp, ip, lr}
    3a24:	08940000 	ldmeq	r4, {}
    3a28:	00010000 	andeq	r0, r1, r0
    3a2c:	00089453 	andeq	r9, r8, r3, asr r4
    3a30:	0008c400 	andeq	ip, r8, r0, lsl #8
    3a34:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    3a38:	0008d406 	andeq	sp, r8, r6, lsl #8
    3a3c:	0008d800 	andeq	sp, r8, r0, lsl #16
    3a40:	53000100 	movwpl	r0, #256	; 0x100
    3a44:	000008f4 	strdeq	r0, [r0], -r4
    3a48:	0000094c 	andeq	r0, r0, ip, asr #18
    3a4c:	067d0002 	ldrbteq	r0, [sp], -r2
	...
    3a58:	0000094c 	andeq	r0, r0, ip, asr #18
    3a5c:	00000950 	andeq	r0, r0, r0, asr r9
    3a60:	505d0001 	subspl	r0, sp, r1
    3a64:	f8000009 	undefined instruction 0xf8000009
    3a68:	0200000a 	andeq	r0, r0, #10
    3a6c:	00107d00 	andseq	r7, r0, r0, lsl #26
    3a70:	00000000 	andeq	r0, r0, r0
    3a74:	4c000000 	stcmi	0, cr0, [r0], {0}
    3a78:	5c000009 	stcpl	0, cr0, [r0], {9}
    3a7c:	01000009 	tsteq	r0, r9
    3a80:	095c5000 	ldmdbeq	ip, {ip, lr}^
    3a84:	0a040000 	beq	103a8c <DISABLE_IRQ+0x103a0c>
    3a88:	00010000 	andeq	r0, r1, r0
    3a8c:	000a2854 	andeq	r2, sl, r4, asr r8
    3a90:	000a3000 	andeq	r3, sl, r0
    3a94:	54000100 	strpl	r0, [r0], #-256	; 0x100
    3a98:	00000a54 	andeq	r0, r0, r4, asr sl
    3a9c:	00000ad4 	ldrdeq	r0, [r0], -r4
    3aa0:	00540001 	subseq	r0, r4, r1
    3aa4:	00000000 	andeq	r0, r0, r0
    3aa8:	f8000000 	undefined instruction 0xf8000000
    3aac:	fc00000a 	stc2	0, cr0, [r0], {10}
    3ab0:	0100000a 	tsteq	r0, sl
    3ab4:	0afc5d00 	beq	fff1aebc <rEINTPEND+0xa9f1ae14>
    3ab8:	0b040000 	bleq	103ac0 <DISABLE_IRQ+0x103a40>
    3abc:	00020000 	andeq	r0, r2, r0
    3ac0:	0b04047d 	bleq	104cbc <DISABLE_IRQ+0x104c3c>
    3ac4:	0b6c0000 	bleq	1b03acc <MEM_SIZE+0x1303acc>
    3ac8:	00020000 	andeq	r0, r2, r0
    3acc:	0000107d 	andeq	r1, r0, sp, ror r0
    3ad0:	00000000 	andeq	r0, r0, r0
    3ad4:	0af80000 	beq	ffe03adc <rEINTPEND+0xa9e03a34>
    3ad8:	0b080000 	bleq	203ae0 <DISABLE_IRQ+0x203a60>
    3adc:	00010000 	andeq	r0, r1, r0
    3ae0:	000b4050 	andeq	r4, fp, r0, asr r0
    3ae4:	000b4800 	andeq	r4, fp, r0, lsl #16
    3ae8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3af4:	00000b6c 	andeq	r0, r0, ip, ror #22
    3af8:	00000b70 	andeq	r0, r0, r0, ror fp
    3afc:	705d0001 	subsvc	r0, sp, r1
    3b00:	3400000b 	strcc	r0, [r0], #-11
    3b04:	0200000d 	andeq	r0, r0, #13
    3b08:	00107d00 	andseq	r7, r0, r0, lsl #26
    3b0c:	00000000 	andeq	r0, r0, r0
    3b10:	6c000000 	stcvs	0, cr0, [r0], {0}
    3b14:	7c00000b 	stcvc	0, cr0, [r0], {11}
    3b18:	0100000b 	tsteq	r0, fp
    3b1c:	0b7c5000 	bleq	1f17b24 <MEM_SIZE+0x1717b24>
    3b20:	0c240000 	stceq	0, cr0, [r4]
    3b24:	00010000 	andeq	r0, r1, r0
    3b28:	000c4854 	andeq	r4, ip, r4, asr r8
    3b2c:	000cc400 	andeq	ip, ip, r0, lsl #8
    3b30:	54000100 	strpl	r0, [r0], #-256	; 0x100
    3b34:	00000ce8 	andeq	r0, r0, r8, ror #25
    3b38:	00000d10 	andeq	r0, r0, r0, lsl sp
    3b3c:	00540001 	subseq	r0, r4, r1
    3b40:	00000000 	andeq	r0, r0, r0
    3b44:	34000000 	strcc	r0, [r0]
    3b48:	4800000d 	stmdami	r0, {r0, r2, r3}
    3b4c:	0100000d 	tsteq	r0, sp
    3b50:	0d485000 	stcleq	0, cr5, [r8]
    3b54:	0d5c0000 	ldcleq	0, cr0, [ip]
    3b58:	00010000 	andeq	r0, r1, r0
    3b5c:	00000053 	andeq	r0, r0, r3, asr r0
    3b60:	00000000 	andeq	r0, r0, r0
    3b64:	000d7c00 	andeq	r7, sp, r0, lsl #24
    3b68:	000d8000 	andeq	r8, sp, r0
    3b6c:	5d000100 	stfpls	f0, [r0]
    3b70:	00000d80 	andeq	r0, r0, r0, lsl #27
    3b74:	00000e7c 	andeq	r0, r0, ip, ror lr
    3b78:	107d0002 	rsbsne	r0, sp, r2
	...
    3b84:	00000d7c 	andeq	r0, r0, ip, ror sp
    3b88:	00000d94 	muleq	r0, r4, sp
    3b8c:	94500001 	ldrbls	r0, [r0], #-1
    3b90:	7c00000d 	stcvc	0, cr0, [r0], {13}
    3b94:	0100000e 	tsteq	r0, lr
    3b98:	00005500 	andeq	r5, r0, r0, lsl #10
    3b9c:	00000000 	andeq	r0, r0, r0
    3ba0:	0d940000 	ldceq	0, cr0, [r4]
    3ba4:	0d980000 	ldceq	0, cr0, [r8]
    3ba8:	00010000 	andeq	r0, r1, r0
    3bac:	000da050 	andeq	sl, sp, r0, asr r0
    3bb0:	000da800 	andeq	sl, sp, r0, lsl #16
    3bb4:	50000100 	andpl	r0, r0, r0, lsl #2
    3bb8:	00000de4 	andeq	r0, r0, r4, ror #27
    3bbc:	00000de8 	andeq	r0, r0, r8, ror #27
    3bc0:	28500001 	ldmdacs	r0, {r0}^
    3bc4:	3000000e 	andcc	r0, r0, lr
    3bc8:	0100000e 	tsteq	r0, lr
    3bcc:	00005000 	andeq	r5, r0, r0
    3bd0:	00000000 	andeq	r0, r0, r0
    3bd4:	0e7c0000 	cdpeq	0, 7, cr0, cr12, cr0, {0}
    3bd8:	0e800000 	cdpeq	0, 8, cr0, cr0, cr0, {0}
    3bdc:	00010000 	andeq	r0, r1, r0
    3be0:	000e805d 	andeq	r8, lr, sp, asr r0
    3be4:	000f1400 	andeq	r1, pc, r0, lsl #8
    3be8:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    3bec:	00000004 	andeq	r0, r0, r4
    3bf0:	00000000 	andeq	r0, r0, r0
    3bf4:	000e7c00 	andeq	r7, lr, r0, lsl #24
    3bf8:	000e9000 	andeq	r9, lr, r0
    3bfc:	50000100 	andpl	r0, r0, r0, lsl #2
    3c00:	00000ea8 	andeq	r0, r0, r8, lsr #29
    3c04:	00000eac 	andeq	r0, r0, ip, lsr #29
    3c08:	c4500001 	ldrbgt	r0, [r0], #-1
    3c0c:	d400000e 	strle	r0, [r0], #-14
    3c10:	0100000e 	tsteq	r0, lr
    3c14:	00005000 	andeq	r5, r0, r0
    3c18:	00000000 	andeq	r0, r0, r0
    3c1c:	0e7c0000 	cdpeq	0, 7, cr0, cr12, cr0, {0}
    3c20:	0ebc0000 	cdpeq	0, 11, cr0, cr12, cr0, {0}
    3c24:	00010000 	andeq	r0, r1, r0
    3c28:	000ef851 	andeq	pc, lr, r1, asr r8
    3c2c:	000f0000 	andeq	r0, pc, r0
    3c30:	51000100 	tstpl	r0, r0, lsl #2
	...
    3c3c:	00000e7c 	andeq	r0, r0, ip, ror lr
    3c40:	00000ec8 	andeq	r0, r0, r8, asr #29
    3c44:	f8520001 	undefined instruction 0xf8520001
    3c48:	0000000e 	andeq	r0, r0, lr
    3c4c:	0100000f 	tsteq	r0, pc
    3c50:	00005200 	andeq	r5, r0, r0, lsl #4
    3c54:	00000000 	andeq	r0, r0, r0
    3c58:	0e7c0000 	cdpeq	0, 7, cr0, cr12, cr0, {0}
    3c5c:	0eb80000 	cdpeq	0, 11, cr0, cr8, cr0, {0}
    3c60:	00010000 	andeq	r0, r1, r0
    3c64:	000ef853 	andeq	pc, lr, r3, asr r8
    3c68:	000f0000 	andeq	r0, pc, r0
    3c6c:	53000100 	movwpl	r0, #256	; 0x100
	...
    3c78:	00000ef0 	strdeq	r0, [r0], -r0
    3c7c:	00000ef4 	strdeq	r0, [r0], -r4
    3c80:	00500001 	subseq	r0, r0, r1
    3c84:	00000000 	andeq	r0, r0, r0
    3c88:	14000000 	strne	r0, [r0]
    3c8c:	1800000f 	stmdane	r0, {r0, r1, r2, r3}
    3c90:	0100000f 	tsteq	r0, pc
    3c94:	0f185d00 	svceq	0x00185d00
    3c98:	0f200000 	svceq	0x00200000
    3c9c:	00020000 	andeq	r0, r2, r0
    3ca0:	0f20247d 	svceq	0x0020247d
    3ca4:	12140000 	andsne	r0, r4, #0
    3ca8:	00020000 	andeq	r0, r2, r0
    3cac:	0000307d 	andeq	r3, r0, sp, ror r0
    3cb0:	00000000 	andeq	r0, r0, r0
    3cb4:	0f140000 	svceq	0x00140000
    3cb8:	0f3c0000 	svceq	0x003c0000
    3cbc:	00010000 	andeq	r0, r1, r0
    3cc0:	000f3c50 	andeq	r3, pc, r0, asr ip
    3cc4:	0010ec00 	andseq	lr, r0, r0, lsl #24
    3cc8:	54000100 	strpl	r0, [r0], #-256	; 0x100
    3ccc:	00001110 	andeq	r1, r0, r0, lsl r1
    3cd0:	00001198 	muleq	r0, r8, r1
    3cd4:	d8540001 	ldmdale	r4, {r0}^
    3cd8:	e4000011 	str	r0, [r0], #-17
    3cdc:	01000011 	tsteq	r0, r1, lsl r0
    3ce0:	11ec5400 	mvnne	r5, r0, lsl #8
    3ce4:	12140000 	andsne	r0, r4, #0
    3ce8:	00010000 	andeq	r0, r1, r0
    3cec:	00000054 	andeq	r0, r0, r4, asr r0
    3cf0:	00000000 	andeq	r0, r0, r0
    3cf4:	000f1400 	andeq	r1, pc, r0, lsl #8
    3cf8:	000f4000 	andeq	r4, pc, r0
    3cfc:	51000100 	tstpl	r0, r0, lsl #2
    3d00:	00000f40 	andeq	r0, r0, r0, asr #30
    3d04:	00001214 	andeq	r1, r0, r4, lsl r2
    3d08:	005b0001 	subseq	r0, fp, r1
    3d0c:	00000000 	andeq	r0, r0, r0
    3d10:	14000000 	strne	r0, [r0]
    3d14:	4000000f 	andmi	r0, r0, pc
    3d18:	0100000f 	tsteq	r0, pc
    3d1c:	0f405200 	svceq	0x00405200
    3d20:	12140000 	andsne	r0, r4, #0
    3d24:	00010000 	andeq	r0, r1, r0
    3d28:	00000059 	andeq	r0, r0, r9, asr r0
    3d2c:	00000000 	andeq	r0, r0, r0
    3d30:	000f1400 	andeq	r1, pc, r0, lsl #8
    3d34:	000f4000 	andeq	r4, pc, r0
    3d38:	53000100 	movwpl	r0, #256	; 0x100
    3d3c:	00000f40 	andeq	r0, r0, r0, asr #30
    3d40:	00000f4c 	andeq	r0, r0, ip, asr #30
    3d44:	4c560001 	mrrcmi	0, 0, r0, r6, cr1
    3d48:	5800000f 	stmdapl	r0, {r0, r1, r2, r3}
    3d4c:	0100000f 	tsteq	r0, pc
    3d50:	0f585300 	svceq	0x00585300
    3d54:	12140000 	andsne	r0, r4, #0
    3d58:	00010000 	andeq	r0, r1, r0
    3d5c:	00000056 	andeq	r0, r0, r6, asr r0
    3d60:	00000000 	andeq	r0, r0, r0
    3d64:	000f1400 	andeq	r1, pc, r0, lsl #8
    3d68:	00101800 	andseq	r1, r0, r0, lsl #16
    3d6c:	91000200 	tstls	r0, r0, lsl #4
    3d70:	00101800 	andseq	r1, r0, r0, lsl #16
    3d74:	00104c00 	andseq	r4, r0, r0, lsl #24
    3d78:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    3d7c:	00104c30 	andseq	r4, r0, r0, lsr ip
    3d80:	00111000 	andseq	r1, r1, r0
    3d84:	91000200 	tstls	r0, r0, lsl #4
    3d88:	00111078 	andseq	r1, r1, r8, ror r0
    3d8c:	00117800 	andseq	r7, r1, r0, lsl #16
    3d90:	91000200 	tstls	r0, r0, lsl #4
    3d94:	00117800 	andseq	r7, r1, r0, lsl #16
    3d98:	00118800 	andseq	r8, r1, r0, lsl #16
    3d9c:	91000200 	tstls	r0, r0, lsl #4
    3da0:	00118878 	andseq	r8, r1, r8, ror r8
    3da4:	00119000 	andseq	r9, r1, r0
    3da8:	91000200 	tstls	r0, r0, lsl #4
    3dac:	00119000 	andseq	r9, r1, r0
    3db0:	0011d800 	andseq	sp, r1, r0, lsl #16
    3db4:	91000200 	tstls	r0, r0, lsl #4
    3db8:	0011d878 	andseq	sp, r1, r8, ror r8
    3dbc:	0011e400 	andseq	lr, r1, r0, lsl #8
    3dc0:	91000200 	tstls	r0, r0, lsl #4
    3dc4:	0011e400 	andseq	lr, r1, r0, lsl #8
    3dc8:	0011ec00 	andseq	lr, r1, r0, lsl #24
    3dcc:	91000200 	tstls	r0, r0, lsl #4
    3dd0:	0011ec78 	andseq	lr, r1, r8, ror ip
    3dd4:	00121400 	andseq	r1, r2, r0, lsl #8
    3dd8:	91000200 	tstls	r0, r0, lsl #4
	...
    3de4:	000f1400 	andeq	r1, pc, r0, lsl #8
    3de8:	000f4000 	andeq	r4, pc, r0
    3dec:	91000200 	tstls	r0, r0, lsl #4
    3df0:	000f4004 	andeq	r4, pc, r4
    3df4:	00121400 	andseq	r1, r2, r0, lsl #8
    3df8:	5a000100 	bpl	4200 <DISABLE_IRQ+0x4180>
	...
    3e04:	00000f14 	andeq	r0, r0, r4, lsl pc
    3e08:	00000f40 	andeq	r0, r0, r0, asr #30
    3e0c:	08910002 	ldmeq	r1, {r1}
    3e10:	00000f40 	andeq	r0, r0, r0, asr #30
    3e14:	00001214 	andeq	r1, r0, r4, lsl r2
    3e18:	00550001 	subseq	r0, r5, r1
    3e1c:	00000000 	andeq	r0, r0, r0
    3e20:	14000000 	strne	r0, [r0]
    3e24:	6000000f 	andvs	r0, r0, pc
    3e28:	0200000f 	andeq	r0, r0, #15
    3e2c:	600c9100 	andvs	r9, ip, r0, lsl #2
    3e30:	7400000f 	strvc	r0, [r0], #-15
    3e34:	0200000f 	andeq	r0, r0, #15
    3e38:	74049100 	strvc	r9, [r4], #-256	; 0x100
    3e3c:	8000000f 	andhi	r0, r0, pc
    3e40:	0200000f 	andeq	r0, r0, #15
    3e44:	800c9100 	andhi	r9, ip, r0, lsl #2
    3e48:	4800000f 	stmdami	r0, {r0, r1, r2, r3}
    3e4c:	02000011 	andeq	r0, r0, #17
    3e50:	48049100 	stmdami	r4, {r8, ip, pc}
    3e54:	50000011 	andpl	r0, r0, r1, lsl r0
    3e58:	02000011 	andeq	r0, r0, #17
    3e5c:	500c9100 	andpl	r9, ip, r0, lsl #2
    3e60:	14000011 	strne	r0, [r0], #-17
    3e64:	02000012 	andeq	r0, r0, #18
    3e68:	00049100 	andeq	r9, r4, r0, lsl #2
    3e6c:	00000000 	andeq	r0, r0, r0
    3e70:	14000000 	strne	r0, [r0]
    3e74:	3800000f 	stmdacc	r0, {r0, r1, r2, r3}
    3e78:	0200000f 	andeq	r0, r0, #15
    3e7c:	38109100 	ldmdacc	r0, {r8, ip, pc}
    3e80:	2400000f 	strcs	r0, [r0], #-15
    3e84:	01000011 	tsteq	r0, r1, lsl r0
    3e88:	11485700 	cmpne	r8, r0, lsl #14
    3e8c:	11ec0000 	mvnne	r0, r0
    3e90:	00010000 	andeq	r0, r1, r0
    3e94:	00000057 	andeq	r0, r0, r7, asr r0
    3e98:	00000000 	andeq	r0, r0, r0
    3e9c:	00105000 	andseq	r5, r0, r0
    3ea0:	00106c00 	andseq	r6, r0, r0, lsl #24
    3ea4:	53000100 	movwpl	r0, #256	; 0x100
	...
    3eb4:	00000004 	andeq	r0, r0, r4
    3eb8:	045d0001 	ldrbeq	r0, [sp], #-1
    3ebc:	0c000000 	stceq	0, cr0, [r0], {0}
    3ec0:	02000000 	andeq	r0, r0, #0
    3ec4:	0c0c7d00 	stceq	13, cr7, [ip], {0}
    3ec8:	cc000000 	stcgt	0, cr0, [r0], {0}
    3ecc:	02000000 	andeq	r0, r0, #0
    3ed0:	00287d00 	eoreq	r7, r8, r0, lsl #26
    3ed4:	00000000 	andeq	r0, r0, r0
    3ed8:	80000000 	andhi	r0, r0, r0
    3edc:	94000000 	strls	r0, [r0]
    3ee0:	01000000 	tsteq	r0, r0
    3ee4:	00005300 	andeq	r5, r0, r0, lsl #6
    3ee8:	00000000 	andeq	r0, r0, r0
    3eec:	00cc0000 	sbceq	r0, ip, r0
    3ef0:	00d00000 	sbcseq	r0, r0, r0
    3ef4:	00010000 	andeq	r0, r1, r0
    3ef8:	0000d05d 	andeq	sp, r0, sp, asr r0
    3efc:	0000d800 	andeq	sp, r0, r0, lsl #16
    3f00:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    3f04:	0000d808 	andeq	sp, r0, r8, lsl #16
    3f08:	00023800 	andeq	r3, r2, r0, lsl #16
    3f0c:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    3f10:	00000010 	andeq	r0, r0, r0, lsl r0
    3f14:	00000000 	andeq	r0, r0, r0
    3f18:	0000cc00 	andeq	ip, r0, r0, lsl #24
    3f1c:	00011800 	andeq	r1, r1, r0, lsl #16
    3f20:	50000100 	andpl	r0, r0, r0, lsl #2
    3f24:	00000124 	andeq	r0, r0, r4, lsr #2
    3f28:	00000128 	andeq	r0, r0, r8, lsr #2
    3f2c:	48500001 	ldmdami	r0, {r0}^
    3f30:	4c000001 	stcmi	0, cr0, [r0], {1}
    3f34:	01000001 	tsteq	r0, r1
    3f38:	01605000 	cmneq	r0, r0
    3f3c:	01640000 	cmneq	r4, r0
    3f40:	00010000 	andeq	r0, r1, r0
    3f44:	00017850 	andeq	r7, r1, r0, asr r8
    3f48:	00017c00 	andeq	r7, r1, r0, lsl #24
    3f4c:	50000100 	andpl	r0, r0, r0, lsl #2
    3f50:	00000190 	muleq	r0, r0, r1
    3f54:	00000194 	muleq	r0, r4, r1
    3f58:	a8500001 	ldmdage	r0, {r0}^
    3f5c:	ac000001 	stcge	0, cr0, [r0], {1}
    3f60:	01000001 	tsteq	r0, r1
    3f64:	01b85000 	undefined instruction 0x01b85000
    3f68:	01bc0000 	undefined instruction 0x01bc0000
    3f6c:	00010000 	andeq	r0, r1, r0
    3f70:	0001c850 	andeq	ip, r1, r0, asr r8
    3f74:	0001cc00 	andeq	ip, r1, r0, lsl #24
    3f78:	50000100 	andpl	r0, r0, r0, lsl #2
    3f7c:	000001d4 	ldrdeq	r0, [r0], -r4
    3f80:	000001d8 	ldrdeq	r0, [r0], -r8
    3f84:	f4500001 	undefined instruction 0xf4500001
    3f88:	f8000001 	undefined instruction 0xf8000001
    3f8c:	01000001 	tsteq	r0, r1
    3f90:	02145000 	andseq	r5, r4, #0
    3f94:	02180000 	andseq	r0, r8, #0
    3f98:	00010000 	andeq	r0, r1, r0
    3f9c:	00000050 	andeq	r0, r0, r0, asr r0
    3fa0:	00000000 	andeq	r0, r0, r0
    3fa4:	0000cc00 	andeq	ip, r0, r0, lsl #24
    3fa8:	00012000 	andeq	r2, r1, r0
    3fac:	51000100 	tstpl	r0, r0, lsl #2
    3fb0:	00000124 	andeq	r0, r0, r4, lsr #2
    3fb4:	00000128 	andeq	r0, r0, r8, lsr #2
    3fb8:	48510001 	ldmdami	r1, {r0}^
    3fbc:	54000001 	strpl	r0, [r0], #-1
    3fc0:	01000001 	tsteq	r0, r1
    3fc4:	01605100 	cmneq	r0, r0, lsl #2
    3fc8:	016c0000 	cmneq	ip, r0
    3fcc:	00010000 	andeq	r0, r1, r0
    3fd0:	00017851 	andeq	r7, r1, r1, asr r8
    3fd4:	00018400 	andeq	r8, r1, r0, lsl #8
    3fd8:	51000100 	tstpl	r0, r0, lsl #2
    3fdc:	00000190 	muleq	r0, r0, r1
    3fe0:	0000019c 	muleq	r0, ip, r1
    3fe4:	a8510001 	ldmdage	r1, {r0}^
    3fe8:	b0000001 	andlt	r0, r0, r1
    3fec:	01000001 	tsteq	r0, r1
    3ff0:	01b85100 	undefined instruction 0x01b85100
    3ff4:	01c00000 	biceq	r0, r0, r0
    3ff8:	00010000 	andeq	r0, r1, r0
    3ffc:	0001c851 	andeq	ip, r1, r1, asr r8
    4000:	0001d000 	andeq	sp, r1, r0
    4004:	51000100 	tstpl	r0, r0, lsl #2
    4008:	000001d4 	ldrdeq	r0, [r0], -r4
    400c:	000001e0 	andeq	r0, r0, r0, ror #3
    4010:	f4510001 	undefined instruction 0xf4510001
    4014:	00000001 	andeq	r0, r0, r1
    4018:	01000002 	tsteq	r0, r2
    401c:	02145100 	andseq	r5, r4, #0
    4020:	02200000 	eoreq	r0, r0, #0
    4024:	00010000 	andeq	r0, r1, r0
    4028:	00000051 	andeq	r0, r0, r1, asr r0
    402c:	00000000 	andeq	r0, r0, r0
    4030:	00023800 	andeq	r3, r2, r0, lsl #16
    4034:	00023c00 	andeq	r3, r2, r0, lsl #24
    4038:	5d000100 	stfpls	f0, [r0]
    403c:	0000023c 	andeq	r0, r0, ip, lsr r2
    4040:	00000264 	andeq	r0, r0, r4, ror #4
    4044:	087d0002 	ldmdaeq	sp!, {r1}^
	...
    4050:	00000238 	andeq	r0, r0, r8, lsr r2
    4054:	00000244 	andeq	r0, r0, r4, asr #4
    4058:	44500001 	ldrbmi	r0, [r0], #-1
    405c:	64000002 	strvs	r0, [r0], #-2
    4060:	01000002 	tsteq	r0, r2
    4064:	00005400 	andeq	r5, r0, r0, lsl #8
    4068:	00000000 	andeq	r0, r0, r0
    406c:	02380000 	eorseq	r0, r8, #0
    4070:	02440000 	subeq	r0, r4, #0
    4074:	00010000 	andeq	r0, r1, r0
    4078:	00000051 	andeq	r0, r0, r1, asr r0
    407c:	00000000 	andeq	r0, r0, r0
    4080:	00026400 	andeq	r6, r2, r0, lsl #8
    4084:	00026800 	andeq	r6, r2, r0, lsl #16
    4088:	5d000100 	stfpls	f0, [r0]
    408c:	00000268 	andeq	r0, r0, r8, ror #4
    4090:	0000026c 	andeq	r0, r0, ip, ror #4
    4094:	247d0002 	ldrbtcs	r0, [sp], #-2
    4098:	0000026c 	andeq	r0, r0, ip, ror #4
    409c:	0000035c 	andeq	r0, r0, ip, asr r3
    40a0:	307d0002 	rsbscc	r0, sp, r2
	...
    40ac:	00000264 	andeq	r0, r0, r4, ror #4
    40b0:	00000270 	andeq	r0, r0, r0, ror r2
    40b4:	00500001 	subseq	r0, r0, r1
    40b8:	00000000 	andeq	r0, r0, r0
    40bc:	e8000000 	stmda	r0, {}
    40c0:	f4000002 	vst4.8	{d0-d3}, [r0], r2
    40c4:	01000002 	tsteq	r0, r2
    40c8:	03045300 	movweq	r5, #17152	; 0x4300
    40cc:	03100000 	tsteq	r0, #0
    40d0:	00010000 	andeq	r0, r1, r0
    40d4:	00000053 	andeq	r0, r0, r3, asr r0
    40d8:	00000000 	andeq	r0, r0, r0
    40dc:	0002e000 	andeq	lr, r2, r0
    40e0:	00031c00 	andeq	r1, r3, r0, lsl #24
    40e4:	58000100 	stmdapl	r0, {r8}
	...
    40f0:	000002a4 	andeq	r0, r0, r4, lsr #5
    40f4:	000002e0 	andeq	r0, r0, r0, ror #5
    40f8:	1c580001 	mrrcne	0, 0, r0, r8, cr1
    40fc:	5c000003 	stcpl	0, cr0, [r0], {3}
    4100:	01000003 	tsteq	r0, r3
    4104:	00005800 	andeq	r5, r0, r0, lsl #16
    4108:	00000000 	andeq	r0, r0, r0
    410c:	035c0000 	cmpeq	ip, #0
    4110:	03600000 	cmneq	r0, #0
    4114:	00010000 	andeq	r0, r1, r0
    4118:	0003605d 	andeq	r6, r3, sp, asr r0
    411c:	00036800 	andeq	r6, r3, r0, lsl #16
    4120:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    4124:	00036824 	andeq	r6, r3, r4, lsr #16
    4128:	00048000 	andeq	r8, r4, r0
    412c:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    4130:	00000030 	andeq	r0, r0, r0, lsr r0
    4134:	00000000 	andeq	r0, r0, r0
    4138:	0003b000 	andeq	fp, r3, r0
    413c:	0003c400 	andeq	ip, r3, r0, lsl #8
    4140:	53000100 	movwpl	r0, #256	; 0x100
    4144:	000003d4 	ldrdeq	r0, [r0], -r4
    4148:	000003e0 	andeq	r0, r0, r0, ror #7
    414c:	00530001 	subseq	r0, r3, r1
    4150:	00000000 	andeq	r0, r0, r0
    4154:	80000000 	andhi	r0, r0, r0
    4158:	84000004 	strhi	r0, [r0], #-4
    415c:	01000004 	tsteq	r0, r4
    4160:	04845d00 	streq	r5, [r4], #3328	; 0xd00
    4164:	059c0000 	ldreq	r0, [ip]
    4168:	00020000 	andeq	r0, r2, r0
    416c:	0000187d 	andeq	r1, r0, sp, ror r8
    4170:	00000000 	andeq	r0, r0, r0
    4174:	04800000 	streq	r0, [r0]
    4178:	048c0000 	streq	r0, [ip]
    417c:	00010000 	andeq	r0, r1, r0
    4180:	00048c50 	andeq	r8, r4, r0, asr ip
    4184:	00059c00 	andeq	r9, r5, r0, lsl #24
    4188:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    4194:	00000480 	andeq	r0, r0, r0, lsl #9
    4198:	000004a8 	andeq	r0, r0, r8, lsr #9
    419c:	a8510001 	ldmdage	r1, {r0}^
    41a0:	9c000004 	stcls	0, cr0, [r0], {4}
    41a4:	01000005 	tsteq	r0, r5
    41a8:	00005600 	andeq	r5, r0, r0, lsl #12
    41ac:	00000000 	andeq	r0, r0, r0
    41b0:	04800000 	streq	r0, [r0]
    41b4:	04a80000 	strteq	r0, [r8]
    41b8:	00010000 	andeq	r0, r1, r0
    41bc:	0004a852 	andeq	sl, r4, r2, asr r8
    41c0:	00059c00 	andeq	r9, r5, r0, lsl #24
    41c4:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    41d0:	00000480 	andeq	r0, r0, r0, lsl #9
    41d4:	000004a8 	andeq	r0, r0, r8, lsr #9
    41d8:	a8530001 	ldmdage	r3, {r0}^
    41dc:	9c000004 	stcls	0, cr0, [r0], {4}
    41e0:	01000005 	tsteq	r0, r5
    41e4:	00005700 	andeq	r5, r0, r0, lsl #14
    41e8:	00000000 	andeq	r0, r0, r0
    41ec:	05180000 	ldreq	r0, [r8]
    41f0:	05200000 	streq	r0, [r0]!
    41f4:	00010000 	andeq	r0, r1, r0
    41f8:	00056451 	andeq	r6, r5, r1, asr r4
    41fc:	00059c00 	andeq	r9, r5, r0, lsl #24
    4200:	51000100 	tstpl	r0, r0, lsl #2
	...
    420c:	000004bc 	undefined instruction 0x000004bc
    4210:	00000538 	andeq	r0, r0, r8, lsr r5
    4214:	405c0001 	subsmi	r0, ip, r1
    4218:	44000005 	strmi	r0, [r0], #-5
    421c:	01000005 	tsteq	r0, r5
    4220:	055c5c00 	ldrbeq	r5, [ip, #-3072]	; 0xc00
    4224:	059c0000 	ldreq	r0, [ip]
    4228:	00010000 	andeq	r0, r1, r0
    422c:	0000005c 	andeq	r0, r0, ip, asr r0
    4230:	00000000 	andeq	r0, r0, r0
    4234:	00059c00 	andeq	r9, r5, r0, lsl #24
    4238:	0005a400 	andeq	sl, r5, r0, lsl #8
    423c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4248:	0000059c 	muleq	r0, ip, r5
    424c:	000005a4 	andeq	r0, r0, r4, lsr #11
    4250:	00510001 	subseq	r0, r1, r1
    4254:	00000000 	andeq	r0, r0, r0
    4258:	9c000000 	stcls	0, cr0, [r0], {0}
    425c:	a4000005 	strge	r0, [r0], #-5
    4260:	01000005 	tsteq	r0, r5
    4264:	00005200 	andeq	r5, r0, r0, lsl #4
    4268:	00000000 	andeq	r0, r0, r0
    426c:	05a40000 	streq	r0, [r4]!
    4270:	05ac0000 	streq	r0, [ip]!
    4274:	00010000 	andeq	r0, r1, r0
    4278:	00000050 	andeq	r0, r0, r0, asr r0
    427c:	00000000 	andeq	r0, r0, r0
    4280:	0005a400 	andeq	sl, r5, r0, lsl #8
    4284:	0005ac00 	andeq	sl, r5, r0, lsl #24
    4288:	51000100 	tstpl	r0, r0, lsl #2
	...
    4294:	000005a4 	andeq	r0, r0, r4, lsr #11
    4298:	000005ac 	andeq	r0, r0, ip, lsr #11
    429c:	00520001 	subseq	r0, r2, r1
    42a0:	00000000 	andeq	r0, r0, r0
    42a4:	ac000000 	stcge	0, cr0, [r0], {0}
    42a8:	b0000005 	andlt	r0, r0, r5
    42ac:	01000005 	tsteq	r0, r5
    42b0:	05b05d00 	ldreq	r5, [r0, #3328]!	; 0xd00
    42b4:	05b40000 	ldreq	r0, [r4]!
    42b8:	00020000 	andeq	r0, r2, r0
    42bc:	05b4207d 	ldreq	r2, [r4, #125]!	; 0x7d
    42c0:	06680000 	strbteq	r0, [r8], -r0
    42c4:	00020000 	andeq	r0, r2, r0
    42c8:	0000287d 	andeq	r2, r0, sp, ror r8
    42cc:	00000000 	andeq	r0, r0, r0
    42d0:	05ac0000 	streq	r0, [ip]!
    42d4:	05d00000 	ldrbeq	r0, [r0]
    42d8:	00010000 	andeq	r0, r1, r0
    42dc:	0005d050 	andeq	sp, r5, r0, asr r0
    42e0:	00066800 	andeq	r6, r6, r0, lsl #16
    42e4:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    42f0:	000005ac 	andeq	r0, r0, ip, lsr #11
    42f4:	000005d0 	ldrdeq	r0, [r0], -r0
    42f8:	d0510001 	subsle	r0, r1, r1
    42fc:	68000005 	stmdavs	r0, {r0, r2}
    4300:	01000006 	tsteq	r0, r6
    4304:	00005a00 	andeq	r5, r0, r0, lsl #20
    4308:	00000000 	andeq	r0, r0, r0
    430c:	05ac0000 	streq	r0, [ip]!
    4310:	05d00000 	ldrbeq	r0, [r0]
    4314:	00010000 	andeq	r0, r1, r0
    4318:	0005d052 	andeq	sp, r5, r2, asr r0
    431c:	00066800 	andeq	r6, r6, r0, lsl #16
    4320:	58000100 	stmdapl	r0, {r8}
	...
    432c:	000005ac 	andeq	r0, r0, ip, lsr #11
    4330:	000005d0 	ldrdeq	r0, [r0], -r0
    4334:	d0530001 	subsle	r0, r3, r1
    4338:	68000005 	stmdavs	r0, {r0, r2}
    433c:	01000006 	tsteq	r0, r6
    4340:	00005700 	andeq	r5, r0, r0, lsl #14
    4344:	00000000 	andeq	r0, r0, r0
    4348:	05ac0000 	streq	r0, [ip]!
    434c:	05e00000 	strbeq	r0, [r0]!
    4350:	00020000 	andeq	r0, r2, r0
    4354:	05e00091 	strbeq	r0, [r0, #145]!	; 0x91
    4358:	06680000 	strbteq	r0, [r8], -r0
    435c:	00010000 	andeq	r0, r1, r0
    4360:	00000056 	andeq	r0, r0, r6, asr r0
    4364:	00000000 	andeq	r0, r0, r0
    4368:	0005ac00 	andeq	sl, r5, r0, lsl #24
    436c:	0005cc00 	andeq	ip, r5, r0, lsl #24
    4370:	91000200 	tstls	r0, r0, lsl #4
    4374:	0005cc04 	andeq	ip, r5, r4, lsl #24
    4378:	00066800 	andeq	r6, r6, r0, lsl #16
    437c:	59000100 	stmdbpl	r0, {r8}
	...
    4388:	00000668 	andeq	r0, r0, r8, ror #12
    438c:	0000066c 	andeq	r0, r0, ip, ror #12
    4390:	6c5d0001 	mrrcvs	0, 0, r0, sp, cr1
    4394:	c4000006 	strgt	r0, [r0], #-6
    4398:	02000006 	andeq	r0, r0, #6
    439c:	00087d00 	andeq	r7, r8, r0, lsl #26
	...
    43a8:	04000000 	streq	r0, [r0]
    43ac:	01000000 	tsteq	r0, r0
    43b0:	00045d00 	andeq	r5, r4, r0, lsl #26
    43b4:	00140000 	andseq	r0, r4, r0
    43b8:	00020000 	andeq	r0, r2, r0
    43bc:	0000087d 	andeq	r0, r0, sp, ror r8
	...
    43c8:	00080000 	andeq	r0, r8, r0
    43cc:	00010000 	andeq	r0, r1, r0
    43d0:	00000050 	andeq	r0, r0, r0, asr r0
	...
    43dc:	00000c00 	andeq	r0, r0, r0, lsl #24
    43e0:	51000100 	tstpl	r0, r0, lsl #2
	...
    43f0:	0000000c 	andeq	r0, r0, ip
    43f4:	00520001 	subseq	r0, r2, r1
	...
    4400:	0c000000 	stceq	0, cr0, [r0], {0}
    4404:	01000000 	tsteq	r0, r0
    4408:	00005300 	andeq	r5, r0, r0, lsl #6
    440c:	00000000 	andeq	r0, r0, r0
    4410:	00140000 	andseq	r0, r4, r0
    4414:	00180000 	andseq	r0, r8, r0
    4418:	00010000 	andeq	r0, r1, r0
    441c:	0000185d 	andeq	r1, r0, sp, asr r8
    4420:	00002800 	andeq	r2, r0, r0, lsl #16
    4424:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    4428:	00000008 	andeq	r0, r0, r8
    442c:	00000000 	andeq	r0, r0, r0
    4430:	00001400 	andeq	r1, r0, r0, lsl #8
    4434:	00001c00 	andeq	r1, r0, r0, lsl #24
    4438:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4444:	00000028 	andeq	r0, r0, r8, lsr #32
    4448:	0000002c 	andeq	r0, r0, ip, lsr #32
    444c:	2c5d0001 	mrrccs	0, 0, r0, sp, cr1
    4450:	3c000000 	stccc	0, cr0, [r0], {0}
    4454:	02000000 	andeq	r0, r0, #0
    4458:	00087d00 	andeq	r7, r8, r0, lsl #26
    445c:	00000000 	andeq	r0, r0, r0
    4460:	28000000 	stmdacs	r0, {}
    4464:	30000000 	andcc	r0, r0, r0
    4468:	01000000 	tsteq	r0, r0
    446c:	00005000 	andeq	r5, r0, r0
    4470:	00000000 	andeq	r0, r0, r0
    4474:	003c0000 	eorseq	r0, ip, r0
    4478:	00400000 	subeq	r0, r0, r0
    447c:	00010000 	andeq	r0, r1, r0
    4480:	0000405d 	andeq	r4, r0, sp, asr r0
    4484:	00005000 	andeq	r5, r0, r0
    4488:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    448c:	00000008 	andeq	r0, r0, r8
    4490:	00000000 	andeq	r0, r0, r0
    4494:	00003c00 	andeq	r3, r0, r0, lsl #24
    4498:	00004400 	andeq	r4, r0, r0, lsl #8
    449c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    44a8:	0000003c 	andeq	r0, r0, ip, lsr r0
    44ac:	00000048 	andeq	r0, r0, r8, asr #32
    44b0:	00510001 	subseq	r0, r1, r1
    44b4:	00000000 	andeq	r0, r0, r0
    44b8:	3c000000 	stccc	0, cr0, [r0], {0}
    44bc:	48000000 	stmdami	r0, {}
    44c0:	01000000 	tsteq	r0, r0
    44c4:	00005200 	andeq	r5, r0, r0, lsl #4
    44c8:	00000000 	andeq	r0, r0, r0
    44cc:	00500000 	subseq	r0, r0, r0
    44d0:	00540000 	subseq	r0, r4, r0
    44d4:	00010000 	andeq	r0, r1, r0
    44d8:	0000545d 	andeq	r5, r0, sp, asr r4
    44dc:	00006400 	andeq	r6, r0, r0, lsl #8
    44e0:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    44e4:	00000008 	andeq	r0, r0, r8
    44e8:	00000000 	andeq	r0, r0, r0
    44ec:	00005000 	andeq	r5, r0, r0
    44f0:	00005800 	andeq	r5, r0, r0, lsl #16
    44f4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4500:	00000050 	andeq	r0, r0, r0, asr r0
    4504:	0000005c 	andeq	r0, r0, ip, asr r0
    4508:	00510001 	subseq	r0, r1, r1
    450c:	00000000 	andeq	r0, r0, r0
    4510:	50000000 	andpl	r0, r0, r0
    4514:	5c000000 	stcpl	0, cr0, [r0], {0}
    4518:	01000000 	tsteq	r0, r0
    451c:	00005200 	andeq	r5, r0, r0, lsl #4
    4520:	00000000 	andeq	r0, r0, r0
    4524:	00640000 	rsbeq	r0, r4, r0
    4528:	006c0000 	rsbeq	r0, ip, r0
    452c:	00010000 	andeq	r0, r1, r0
    4530:	00006c5d 	andeq	r6, r0, sp, asr ip
    4534:	00009800 	andeq	r9, r0, r0, lsl #16
    4538:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    453c:	00000008 	andeq	r0, r0, r8
    4540:	00000000 	andeq	r0, r0, r0
    4544:	00006400 	andeq	r6, r0, r0, lsl #8
    4548:	00007400 	andeq	r7, r0, r0, lsl #8
    454c:	50000100 	andpl	r0, r0, r0, lsl #2
    4550:	00000074 	andeq	r0, r0, r4, ror r0
    4554:	0000008c 	andeq	r0, r0, ip, lsl #1
    4558:	005e0001 	subseq	r0, lr, r1
    455c:	00000000 	andeq	r0, r0, r0
    4560:	64000000 	strvs	r0, [r0]
    4564:	80000000 	andhi	r0, r0, r0
    4568:	01000000 	tsteq	r0, r0
    456c:	00805100 	addeq	r5, r0, r0, lsl #2
    4570:	008c0000 	addeq	r0, ip, r0
    4574:	00010000 	andeq	r0, r1, r0
    4578:	0000005c 	andeq	r0, r0, ip, asr r0
    457c:	00000000 	andeq	r0, r0, r0
    4580:	00006400 	andeq	r6, r0, r0, lsl #8
    4584:	00008400 	andeq	r8, r0, r0, lsl #8
    4588:	52000100 	andpl	r0, r0, #0
    458c:	00000084 	andeq	r0, r0, r4, lsl #1
    4590:	0000008c 	andeq	r0, r0, ip, lsl #1
    4594:	00530001 	subseq	r0, r3, r1
    4598:	00000000 	andeq	r0, r0, r0
    459c:	98000000 	stmdals	r0, {}
    45a0:	a0000000 	andge	r0, r0, r0
    45a4:	01000000 	tsteq	r0, r0
    45a8:	00a05d00 	adceq	r5, r0, r0, lsl #26
    45ac:	00c00000 	sbceq	r0, r0, r0
    45b0:	00020000 	andeq	r0, r2, r0
    45b4:	0000087d 	andeq	r0, r0, sp, ror r8
    45b8:	00000000 	andeq	r0, r0, r0
    45bc:	00980000 	addseq	r0, r8, r0
    45c0:	00ac0000 	adceq	r0, ip, r0
    45c4:	00010000 	andeq	r0, r1, r0
    45c8:	00000050 	andeq	r0, r0, r0, asr r0
    45cc:	00000000 	andeq	r0, r0, r0
    45d0:	00009800 	andeq	r9, r0, r0, lsl #16
    45d4:	0000a800 	andeq	sl, r0, r0, lsl #16
    45d8:	51000100 	tstpl	r0, r0, lsl #2
    45dc:	000000a8 	andeq	r0, r0, r8, lsr #1
    45e0:	000000b8 	strheq	r0, [r0], -r8
    45e4:	005c0001 	subseq	r0, ip, r1
    45e8:	00000000 	andeq	r0, r0, r0
    45ec:	98000000 	stmdals	r0, {}
    45f0:	b0000000 	andlt	r0, r0, r0
    45f4:	01000000 	tsteq	r0, r0
    45f8:	00005200 	andeq	r5, r0, r0, lsl #4
    45fc:	00000000 	andeq	r0, r0, r0
    4600:	00980000 	addseq	r0, r8, r0
    4604:	00b40000 	adcseq	r0, r4, r0
    4608:	00010000 	andeq	r0, r1, r0
    460c:	00000053 	andeq	r0, r0, r3, asr r0
	...
    4618:	00000400 	andeq	r0, r0, r0, lsl #8
    461c:	5d000100 	stfpls	f0, [r0]
    4620:	00000004 	andeq	r0, r0, r4
    4624:	00000014 	andeq	r0, r0, r4, lsl r0
    4628:	087d0002 	ldmdaeq	sp!, {r1}^
	...
    4638:	00000008 	andeq	r0, r0, r8
    463c:	00500001 	subseq	r0, r0, r1
    4640:	00000000 	andeq	r0, r0, r0
    4644:	14000000 	strne	r0, [r0]
    4648:	18000000 	stmdane	r0, {}
    464c:	01000000 	tsteq	r0, r0
    4650:	00185d00 	andseq	r5, r8, r0, lsl #26
    4654:	00280000 	eoreq	r0, r8, r0
    4658:	00020000 	andeq	r0, r2, r0
    465c:	0000087d 	andeq	r0, r0, sp, ror r8
    4660:	00000000 	andeq	r0, r0, r0
    4664:	00140000 	andseq	r0, r4, r0
    4668:	001c0000 	andseq	r0, ip, r0
    466c:	00010000 	andeq	r0, r1, r0
    4670:	00000050 	andeq	r0, r0, r0, asr r0
    4674:	00000000 	andeq	r0, r0, r0
    4678:	00001400 	andeq	r1, r0, r0, lsl #8
    467c:	00002000 	andeq	r2, r0, r0
    4680:	51000100 	tstpl	r0, r0, lsl #2
	...
    468c:	00000028 	andeq	r0, r0, r8, lsr #32
    4690:	00000038 	andeq	r0, r0, r8, lsr r0
    4694:	385d0001 	ldmdacc	sp, {r0}^
    4698:	4c000000 	stcmi	0, cr0, [r0], {0}
    469c:	02000000 	andeq	r0, r0, #0
    46a0:	00087d00 	andeq	r7, r8, r0, lsl #26
    46a4:	00000000 	andeq	r0, r0, r0
    46a8:	28000000 	stmdacs	r0, {}
    46ac:	3c000000 	stccc	0, cr0, [r0], {0}
    46b0:	01000000 	tsteq	r0, r0
    46b4:	003c5000 	eorseq	r5, ip, r0
    46b8:	00400000 	subeq	r0, r0, r0
    46bc:	00010000 	andeq	r0, r1, r0
    46c0:	00000051 	andeq	r0, r0, r1, asr r0
    46c4:	00000000 	andeq	r0, r0, r0
    46c8:	00004c00 	andeq	r4, r0, r0, lsl #24
    46cc:	00005000 	andeq	r5, r0, r0
    46d0:	5d000100 	stfpls	f0, [r0]
    46d4:	00000050 	andeq	r0, r0, r0, asr r0
    46d8:	00000060 	andeq	r0, r0, r0, rrx
    46dc:	087d0002 	ldmdaeq	sp!, {r1}^
	...
    46e8:	0000004c 	andeq	r0, r0, ip, asr #32
    46ec:	00000054 	andeq	r0, r0, r4, asr r0
    46f0:	00500001 	subseq	r0, r0, r1
    46f4:	00000000 	andeq	r0, r0, r0
    46f8:	60000000 	andvs	r0, r0, r0
    46fc:	6c000000 	stcvs	0, cr0, [r0], {0}
    4700:	01000000 	tsteq	r0, r0
    4704:	006c5d00 	rsbeq	r5, ip, r0, lsl #26
    4708:	00840000 	addeq	r0, r4, r0
    470c:	00020000 	andeq	r0, r2, r0
    4710:	0000087d 	andeq	r0, r0, sp, ror r8
    4714:	00000000 	andeq	r0, r0, r0
    4718:	00600000 	rsbeq	r0, r0, r0
    471c:	00740000 	rsbseq	r0, r4, r0
    4720:	00010000 	andeq	r0, r1, r0
    4724:	00000050 	andeq	r0, r0, r0, asr r0
    4728:	00000000 	andeq	r0, r0, r0
    472c:	00006000 	andeq	r6, r0, r0
    4730:	00007000 	andeq	r7, r0, r0
    4734:	51000100 	tstpl	r0, r0, lsl #2
    4738:	00000070 	andeq	r0, r0, r0, ror r0
    473c:	0000007c 	andeq	r0, r0, ip, ror r0
    4740:	005c0001 	subseq	r0, ip, r1
    4744:	00000000 	andeq	r0, r0, r0
    4748:	60000000 	andvs	r0, r0, r0
    474c:	78000000 	stmdavc	r0, {}
    4750:	01000000 	tsteq	r0, r0
    4754:	00005200 	andeq	r5, r0, r0, lsl #4
    4758:	00000000 	andeq	r0, r0, r0
    475c:	00600000 	rsbeq	r0, r0, r0
    4760:	007c0000 	rsbseq	r0, ip, r0
    4764:	00010000 	andeq	r0, r1, r0
    4768:	00000053 	andeq	r0, r0, r3, asr r0
    476c:	00000000 	andeq	r0, r0, r0
    4770:	00002400 	andeq	r2, r0, r0, lsl #8
    4774:	00002c00 	andeq	r2, r0, r0, lsl #24
    4778:	5d000100 	stfpls	f0, [r0]
    477c:	0000002c 	andeq	r0, r0, ip, lsr #32
    4780:	000000b4 	strheq	r0, [r0], -r4
    4784:	087d0002 	ldmdaeq	sp!, {r1}^
	...
    4790:	00000024 	andeq	r0, r0, r4, lsr #32
    4794:	00000080 	andeq	r0, r0, r0, lsl #1
    4798:	9c510001 	mrrcls	0, 0, r0, r1, cr1
    479c:	b4000000 	strlt	r0, [r0]
    47a0:	01000000 	tsteq	r0, r0
    47a4:	00005100 	andeq	r5, r0, r0, lsl #2
    47a8:	00000000 	andeq	r0, r0, r0
    47ac:	004c0000 	subeq	r0, ip, r0
    47b0:	00500000 	subseq	r0, r0, r0
    47b4:	00010000 	andeq	r0, r1, r0
    47b8:	00005053 	andeq	r5, r0, r3, asr r0
    47bc:	00005c00 	andeq	r5, r0, r0, lsl #24
    47c0:	5c000100 	stfpls	f0, [r0], {0}
    47c4:	0000005c 	andeq	r0, r0, ip, asr r0
    47c8:	0000009c 	muleq	r0, ip, r0
    47cc:	9c530001 	mrrcls	0, 0, r0, r3, cr1
    47d0:	a4000000 	strge	r0, [r0]
    47d4:	01000000 	tsteq	r0, r0
    47d8:	00a45c00 	adceq	r5, r4, r0, lsl #24
    47dc:	00b40000 	adcseq	r0, r4, r0
    47e0:	00010000 	andeq	r0, r1, r0
    47e4:	00000053 	andeq	r0, r0, r3, asr r0
    47e8:	00000000 	andeq	r0, r0, r0
    47ec:	0000e000 	andeq	lr, r0, r0
    47f0:	0000e400 	andeq	lr, r0, r0, lsl #8
    47f4:	5d000100 	stfpls	f0, [r0]
    47f8:	000000e4 	andeq	r0, r0, r4, ror #1
    47fc:	000000ec 	andeq	r0, r0, ip, ror #1
    4800:	0c7d0002 	ldcleq	0, cr0, [sp], #-8
    4804:	000000ec 	andeq	r0, r0, ip, ror #1
    4808:	00000160 	andeq	r0, r0, r0, ror #2
    480c:	287d0002 	ldmdacs	sp!, {r1}^
	...
    4818:	00000160 	andeq	r0, r0, r0, ror #2
    481c:	00000164 	andeq	r0, r0, r4, ror #2
    4820:	645d0001 	ldrbvs	r0, [sp], #-1
    4824:	5c000001 	stcpl	0, cr0, [r0], {1}
    4828:	02000003 	andeq	r0, r0, #3
    482c:	00287d00 	eoreq	r7, r8, r0, lsl #26
    4830:	00000000 	andeq	r0, r0, r0
    4834:	a8000000 	stmdage	r0, {}
    4838:	5c000001 	stcpl	0, cr0, [r0], {1}
    483c:	01000002 	tsteq	r0, r2
    4840:	02805400 	addeq	r5, r0, #0
    4844:	03440000 	movteq	r0, #16384	; 0x4000
    4848:	00010000 	andeq	r0, r1, r0
    484c:	00000054 	andeq	r0, r0, r4, asr r0
    4850:	00000000 	andeq	r0, r0, r0
    4854:	00019400 	andeq	r9, r1, r0, lsl #8
    4858:	00024000 	andeq	r4, r2, r0
    485c:	54000100 	strpl	r0, [r0], #-256	; 0x100
    4860:	00000254 	andeq	r0, r0, r4, asr r2
    4864:	0000025c 	andeq	r0, r0, ip, asr r2
    4868:	80540001 	subshi	r0, r4, r1
    486c:	44000002 	strmi	r0, [r0], #-2
    4870:	01000003 	tsteq	r0, r3
    4874:	00005400 	andeq	r5, r0, r0, lsl #8
    4878:	00000000 	andeq	r0, r0, r0
    487c:	035c0000 	cmpeq	ip, #0
    4880:	03600000 	cmneq	r0, #0
    4884:	00010000 	andeq	r0, r1, r0
    4888:	0003605d 	andeq	r6, r3, sp, asr r0
    488c:	00038c00 	andeq	r8, r3, r0, lsl #24
    4890:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    4894:	00000008 	andeq	r0, r0, r8
    4898:	00000000 	andeq	r0, r0, r0
    489c:	00035c00 	andeq	r5, r3, r0, lsl #24
    48a0:	00036800 	andeq	r6, r3, r0, lsl #16
    48a4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    48b4:	00000004 	andeq	r0, r0, r4
    48b8:	045d0001 	ldrbeq	r0, [sp], #-1
    48bc:	18000000 	stmdane	r0, {}
    48c0:	02000000 	andeq	r0, r0, #0
    48c4:	18087d00 	stmdane	r8, {r8, sl, fp, ip, sp, lr}
    48c8:	a8000000 	stmdage	r0, {}
    48cc:	02000000 	andeq	r0, r0, #0
    48d0:	00207d00 	eoreq	r7, r0, r0, lsl #26
    48d4:	00000000 	andeq	r0, r0, r0
    48d8:	a8000000 	stmdage	r0, {}
    48dc:	b0000000 	andlt	r0, r0, r0
    48e0:	01000000 	tsteq	r0, r0
    48e4:	00b05d00 	adcseq	r5, r0, r0, lsl #26
    48e8:	00e00000 	rsceq	r0, r0, r0
    48ec:	00020000 	andeq	r0, r2, r0
    48f0:	0000087d 	andeq	r0, r0, sp, ror r8
    48f4:	00000000 	andeq	r0, r0, r0
    48f8:	00e00000 	rsceq	r0, r0, r0
    48fc:	00e40000 	rsceq	r0, r4, r0
    4900:	00010000 	andeq	r0, r1, r0
    4904:	0000e45d 	andeq	lr, r0, sp, asr r4
    4908:	00022000 	andeq	r2, r2, r0
    490c:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    4910:	00000020 	andeq	r0, r0, r0, lsr #32
    4914:	00000000 	andeq	r0, r0, r0
    4918:	0000e000 	andeq	lr, r0, r0
    491c:	0000e800 	andeq	lr, r0, r0, lsl #16
    4920:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    492c:	00000100 	andeq	r0, r0, r0, lsl #2
    4930:	0000011c 	andeq	r0, r0, ip, lsl r1
    4934:	245a0001 	ldrbcs	r0, [sl], #-1
    4938:	20000001 	andcs	r0, r0, r1
    493c:	01000002 	tsteq	r0, r2
    4940:	00005a00 	andeq	r5, r0, r0, lsl #20
    4944:	00000000 	andeq	r0, r0, r0
    4948:	01200000 	teqeq	r0, r0
    494c:	01540000 	cmpeq	r4, r0
    4950:	00010000 	andeq	r0, r1, r0
    4954:	00016451 	andeq	r6, r1, r1, asr r4
    4958:	00017800 	andeq	r7, r1, r0, lsl #16
    495c:	51000100 	tstpl	r0, r0, lsl #2
    4960:	000001d0 	ldrdeq	r0, [r0], -r0
    4964:	000001e4 	andeq	r0, r0, r4, ror #3
    4968:	e4510001 	ldrb	r0, [r1], #-1
    496c:	08000001 	stmdaeq	r0, {r0}
    4970:	01000002 	tsteq	r0, r2
    4974:	00005100 	andeq	r5, r0, r0, lsl #2
    4978:	00000000 	andeq	r0, r0, r0
    497c:	01340000 	teqeq	r4, r0
    4980:	01380000 	teqeq	r8, r0
    4984:	00010000 	andeq	r0, r1, r0
    4988:	00013851 	andeq	r3, r1, r1, asr r8
    498c:	0001e400 	andeq	lr, r1, r0, lsl #8
    4990:	52000100 	andpl	r0, r0, #0
    4994:	000001e4 	andeq	r0, r0, r4, ror #3
    4998:	00000208 	andeq	r0, r0, r8, lsl #4
    499c:	0c520001 	mrrceq	0, 0, r0, r2, cr1
    49a0:	20000002 	andcs	r0, r0, r2
    49a4:	01000002 	tsteq	r0, r2
    49a8:	00005200 	andeq	r5, r0, r0, lsl #4
    49ac:	00000000 	andeq	r0, r0, r0
    49b0:	01440000 	cmpeq	r4, r0
    49b4:	01880000 	orreq	r0, r8, r0
    49b8:	00010000 	andeq	r0, r1, r0
    49bc:	0001885e 	andeq	r8, r1, lr, asr r8
    49c0:	0001d000 	andeq	sp, r1, r0
    49c4:	53000100 	movwpl	r0, #256	; 0x100
    49c8:	000001d0 	ldrdeq	r0, [r0], -r0
    49cc:	000001e4 	andeq	r0, r0, r4, ror #3
    49d0:	e45e0001 	ldrb	r0, [lr], #-1
    49d4:	08000001 	stmdaeq	r0, {r0}
    49d8:	01000002 	tsteq	r0, r2
    49dc:	020c5e00 	andeq	r5, ip, #0
    49e0:	02200000 	eoreq	r0, r0, #0
    49e4:	00010000 	andeq	r0, r1, r0
    49e8:	00000053 	andeq	r0, r0, r3, asr r0
    49ec:	00000000 	andeq	r0, r0, r0
    49f0:	00022000 	andeq	r2, r2, r0
    49f4:	00022400 	andeq	r2, r2, r0, lsl #8
    49f8:	5d000100 	stfpls	f0, [r0]
    49fc:	00000224 	andeq	r0, r0, r4, lsr #4
    4a00:	000002ac 	andeq	r0, r0, ip, lsr #5
    4a04:	107d0002 	rsbsne	r0, sp, r2
	...
    4a10:	00000220 	andeq	r0, r0, r0, lsr #4
    4a14:	0000022c 	andeq	r0, r0, ip, lsr #4
    4a18:	2c500001 	mrrccs	0, 0, r0, r0, cr1
    4a1c:	ac000002 	stcge	0, cr0, [r0], {2}
    4a20:	01000002 	tsteq	r0, r2
    4a24:	00005400 	andeq	r5, r0, r0, lsl #8
    4a28:	00000000 	andeq	r0, r0, r0
    4a2c:	02ac0000 	adceq	r0, ip, #0
    4a30:	02b00000 	adcseq	r0, r0, #0
    4a34:	00010000 	andeq	r0, r1, r0
    4a38:	0002b05d 	andeq	fp, r2, sp, asr r0
    4a3c:	00034000 	andeq	r4, r3, r0
    4a40:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    4a44:	00000010 	andeq	r0, r0, r0, lsl r0
    4a48:	00000000 	andeq	r0, r0, r0
    4a4c:	0002ac00 	andeq	sl, r2, r0, lsl #24
    4a50:	0002b800 	andeq	fp, r2, r0, lsl #16
    4a54:	50000100 	andpl	r0, r0, r0, lsl #2
    4a58:	000002b8 	undefined instruction 0x000002b8
    4a5c:	00000340 	andeq	r0, r0, r0, asr #6
    4a60:	00540001 	subseq	r0, r4, r1
    4a64:	00000000 	andeq	r0, r0, r0
    4a68:	40000000 	andmi	r0, r0, r0
    4a6c:	44000003 	strmi	r0, [r0], #-3
    4a70:	01000003 	tsteq	r0, r3
    4a74:	03445d00 	movteq	r5, #19712	; 0x4d00
    4a78:	034c0000 	movteq	r0, #49152	; 0xc000
    4a7c:	00020000 	andeq	r0, r2, r0
    4a80:	034c0c7d 	movteq	r0, #52349	; 0xcc7d
    4a84:	03c00000 	biceq	r0, r0, #0
    4a88:	00020000 	andeq	r0, r2, r0
    4a8c:	0000187d 	andeq	r1, r0, sp, ror r8
    4a90:	00000000 	andeq	r0, r0, r0
    4a94:	03400000 	movteq	r0, #0
    4a98:	03500000 	cmpeq	r0, #0
    4a9c:	00010000 	andeq	r0, r1, r0
    4aa0:	00035050 	andeq	r5, r3, r0, asr r0
    4aa4:	0003c000 	andeq	ip, r3, r0
    4aa8:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    4ab4:	00000340 	andeq	r0, r0, r0, asr #6
    4ab8:	00000398 	muleq	r0, r8, r3
    4abc:	b0510001 	subslt	r0, r1, r1
    4ac0:	b4000003 	strlt	r0, [r0], #-3
    4ac4:	01000003 	tsteq	r0, r3
    4ac8:	00005100 	andeq	r5, r0, r0, lsl #2
    4acc:	00000000 	andeq	r0, r0, r0
    4ad0:	03400000 	movteq	r0, #0
    4ad4:	039c0000 	orrseq	r0, ip, #0
    4ad8:	00010000 	andeq	r0, r1, r0
    4adc:	0003ac52 	andeq	sl, r3, r2, asr ip
    4ae0:	0003b400 	andeq	fp, r3, r0, lsl #8
    4ae4:	52000100 	andpl	r0, r0, #0
	...
    4af0:	000003c0 	andeq	r0, r0, r0, asr #7
    4af4:	000003c4 	andeq	r0, r0, r4, asr #7
    4af8:	c45d0001 	ldrbgt	r0, [sp], #-1
    4afc:	b4000003 	strlt	r0, [r0], #-3
    4b00:	02000004 	andeq	r0, r0, #4
    4b04:	00087d00 	andeq	r7, r8, r0, lsl #26
    4b08:	00000000 	andeq	r0, r0, r0
    4b0c:	c0000000 	andgt	r0, r0, r0
    4b10:	cc000003 	stcgt	0, cr0, [r0], {3}
    4b14:	01000003 	tsteq	r0, r3
    4b18:	03cc5000 	biceq	r5, ip, #0
    4b1c:	04b40000 	ldrteq	r0, [r4]
    4b20:	00010000 	andeq	r0, r1, r0
    4b24:	00000054 	andeq	r0, r0, r4, asr r0
    4b28:	00000000 	andeq	r0, r0, r0
    4b2c:	0003c000 	andeq	ip, r3, r0
    4b30:	00041800 	andeq	r1, r4, r0, lsl #16
    4b34:	51000100 	tstpl	r0, r0, lsl #2
    4b38:	00000498 	muleq	r0, r8, r4
    4b3c:	000004a0 	andeq	r0, r0, r0, lsr #9
    4b40:	00510001 	subseq	r0, r1, r1
    4b44:	00000000 	andeq	r0, r0, r0
    4b48:	34000000 	strcc	r0, [r0]
    4b4c:	3c000004 	stccc	0, cr0, [r0], {4}
    4b50:	01000004 	tsteq	r0, r4
    4b54:	043c5100 	ldrteq	r5, [ip], #-256	; 0x100
    4b58:	04840000 	streq	r0, [r4]
    4b5c:	00010000 	andeq	r0, r1, r0
    4b60:	00048453 	andeq	r8, r4, r3, asr r4
    4b64:	00049000 	andeq	r9, r4, r0
    4b68:	51000100 	tstpl	r0, r0, lsl #2
    4b6c:	000004a0 	andeq	r0, r0, r0, lsr #9
    4b70:	000004b4 	undefined instruction 0x000004b4
    4b74:	00530001 	subseq	r0, r3, r1
    4b78:	00000000 	andeq	r0, r0, r0
    4b7c:	b4000000 	strlt	r0, [r0]
    4b80:	b8000004 	stmdalt	r0, {r2}
    4b84:	01000004 	tsteq	r0, r4
    4b88:	04b85d00 	ldrteq	r5, [r8], #3328	; 0xd00
    4b8c:	055c0000 	ldrbeq	r0, [ip]
    4b90:	00020000 	andeq	r0, r2, r0
    4b94:	0000187d 	andeq	r1, r0, sp, ror r8
    4b98:	00000000 	andeq	r0, r0, r0
    4b9c:	04b40000 	ldrteq	r0, [r4]
    4ba0:	04c80000 	strbeq	r0, [r8]
    4ba4:	00010000 	andeq	r0, r1, r0
    4ba8:	0004c850 	andeq	ip, r4, r0, asr r8
    4bac:	00055000 	andeq	r5, r5, r0
    4bb0:	5c000100 	stfpls	f0, [r0], {0}
	...
    4bbc:	000004b4 	undefined instruction 0x000004b4
    4bc0:	0000054c 	andeq	r0, r0, ip, asr #10
    4bc4:	00510001 	subseq	r0, r1, r1
    4bc8:	00000000 	andeq	r0, r0, r0
    4bcc:	b4000000 	strlt	r0, [r0]
    4bd0:	0c000004 	stceq	0, cr0, [r0], {4}
    4bd4:	01000005 	tsteq	r0, r5
    4bd8:	05405200 	strbeq	r5, [r0, #-512]	; 0x200
    4bdc:	05480000 	strbeq	r0, [r8]
    4be0:	00010000 	andeq	r0, r1, r0
    4be4:	00000052 	andeq	r0, r0, r2, asr r0
    4be8:	00000000 	andeq	r0, r0, r0
    4bec:	0004b400 	andeq	fp, r4, r0, lsl #8
    4bf0:	00055000 	andeq	r5, r5, r0
    4bf4:	53000100 	movwpl	r0, #256	; 0x100
	...
    4c00:	000004b4 	undefined instruction 0x000004b4
    4c04:	000004cc 	andeq	r0, r0, ip, asr #9
    4c08:	00910002 	addseq	r0, r1, r2
    4c0c:	000004cc 	andeq	r0, r0, ip, asr #9
    4c10:	0000055c 	andeq	r0, r0, ip, asr r5
    4c14:	00550001 	subseq	r0, r5, r1
    4c18:	00000000 	andeq	r0, r0, r0
    4c1c:	b4000000 	strlt	r0, [r0]
    4c20:	48000004 	stmdami	r0, {r2}
    4c24:	02000005 	andeq	r0, r0, #5
    4c28:	48049100 	stmdami	r4, {r8, ip, pc}
    4c2c:	5c000005 	stcpl	0, cr0, [r0], {5}
    4c30:	02000005 	andeq	r0, r0, #5
    4c34:	007c9100 	rsbseq	r9, ip, r0, lsl #2
    4c38:	00000000 	andeq	r0, r0, r0
    4c3c:	b4000000 	strlt	r0, [r0]
    4c40:	c4000004 	strgt	r0, [r0], #-4
    4c44:	02000004 	andeq	r0, r0, #4
    4c48:	c4089100 	strgt	r9, [r8], #-256	; 0x100
    4c4c:	5c000004 	stcpl	0, cr0, [r0], {4}
    4c50:	01000005 	tsteq	r0, r5
    4c54:	00005600 	andeq	r5, r0, r0, lsl #12
	...
    4c60:	00040000 	andeq	r0, r4, r0
    4c64:	00010000 	andeq	r0, r1, r0
    4c68:	0000045d 	andeq	r0, r0, sp, asr r4
    4c6c:	00000c00 	andeq	r0, r0, r0, lsl #24
    4c70:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    4c74:	00000c18 	andeq	r0, r0, r8, lsl ip
    4c78:	0000dc00 	andeq	sp, r0, r0, lsl #24
    4c7c:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    4c80:	00000030 	andeq	r0, r0, r0, lsr r0
    4c84:	00000000 	andeq	r0, r0, r0
    4c88:	0000dc00 	andeq	sp, r0, r0, lsl #24
    4c8c:	0000e000 	andeq	lr, r0, r0
    4c90:	5d000100 	stfpls	f0, [r0]
    4c94:	000000e0 	andeq	r0, r0, r0, ror #1
    4c98:	000000fc 	strdeq	r0, [r0], -ip
    4c9c:	087d0002 	ldmdaeq	sp!, {r1}^
	...
    4ca8:	000000dc 	ldrdeq	r0, [r0], -ip
    4cac:	000000e8 	andeq	r0, r0, r8, ror #1
    4cb0:	00500001 	subseq	r0, r0, r1
    4cb4:	00000000 	andeq	r0, r0, r0
    4cb8:	fc000000 	stc2	0, cr0, [r0], {0}
    4cbc:	00000000 	andeq	r0, r0, r0
    4cc0:	01000001 	tsteq	r0, r1
    4cc4:	01005d00 	tsteq	r0, r0, lsl #26
    4cc8:	011c0000 	tsteq	ip, r0
    4ccc:	00020000 	andeq	r0, r2, r0
    4cd0:	0000087d 	andeq	r0, r0, sp, ror r8
    4cd4:	00000000 	andeq	r0, r0, r0
    4cd8:	00fc0000 	rscseq	r0, ip, r0
    4cdc:	01080000 	tsteq	r8, r0
    4ce0:	00010000 	andeq	r0, r1, r0
    4ce4:	00000050 	andeq	r0, r0, r0, asr r0
    4ce8:	00000000 	andeq	r0, r0, r0
    4cec:	00011c00 	andeq	r1, r1, r0, lsl #24
    4cf0:	00012000 	andeq	r2, r1, r0
    4cf4:	5d000100 	stfpls	f0, [r0]
    4cf8:	00000120 	andeq	r0, r0, r0, lsr #2
    4cfc:	0000013c 	andeq	r0, r0, ip, lsr r1
    4d00:	087d0002 	ldmdaeq	sp!, {r1}^
	...
    4d0c:	0000011c 	andeq	r0, r0, ip, lsl r1
    4d10:	00000128 	andeq	r0, r0, r8, lsr #2
    4d14:	00500001 	subseq	r0, r0, r1
	...
    4d20:	04000000 	streq	r0, [r0]
    4d24:	01000000 	tsteq	r0, r0
    4d28:	00045d00 	andeq	r5, r4, r0, lsl #26
    4d2c:	000c0000 	andeq	r0, ip, r0
    4d30:	00020000 	andeq	r0, r2, r0
    4d34:	000c147d 	andeq	r1, ip, sp, ror r4
    4d38:	00c40000 	sbceq	r0, r4, r0
    4d3c:	00020000 	andeq	r0, r2, r0
    4d40:	0000307d 	andeq	r3, r0, sp, ror r0
    4d44:	00000000 	andeq	r0, r0, r0
    4d48:	00c40000 	sbceq	r0, r4, r0
    4d4c:	00c80000 	sbceq	r0, r8, r0
    4d50:	00010000 	andeq	r0, r1, r0
    4d54:	0000c85d 	andeq	ip, r0, sp, asr r8
    4d58:	0000f000 	andeq	pc, r0, r0
    4d5c:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    4d60:	00000008 	andeq	r0, r0, r8
    4d64:	00000000 	andeq	r0, r0, r0
    4d68:	0000c400 	andeq	ip, r0, r0, lsl #8
    4d6c:	0000cc00 	andeq	ip, r0, r0, lsl #24
    4d70:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4d7c:	000000f0 	strdeq	r0, [r0], -r0
    4d80:	000000f4 	strdeq	r0, [r0], -r4
    4d84:	f45d0001 	undefined instruction 0xf45d0001
    4d88:	20000000 	andcs	r0, r0, r0
    4d8c:	02000001 	andeq	r0, r0, #1
    4d90:	00087d00 	andeq	r7, r8, r0, lsl #26
    4d94:	00000000 	andeq	r0, r0, r0
    4d98:	f0000000 	undefined instruction 0xf0000000
    4d9c:	fc000000 	stc2	0, cr0, [r0], {0}
    4da0:	01000000 	tsteq	r0, r0
    4da4:	00005000 	andeq	r5, r0, r0
	...
    4db0:	00040000 	andeq	r0, r4, r0
    4db4:	00010000 	andeq	r0, r1, r0
    4db8:	0000045d 	andeq	r0, r0, sp, asr r4
    4dbc:	00000c00 	andeq	r0, r0, r0, lsl #24
    4dc0:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    4dc4:	00000c14 	andeq	r0, r0, r4, lsl ip
    4dc8:	0000c800 	andeq	ip, r0, r0, lsl #16
    4dcc:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    4dd0:	00000030 	andeq	r0, r0, r0, lsr r0
    4dd4:	00000000 	andeq	r0, r0, r0
    4dd8:	0000c800 	andeq	ip, r0, r0, lsl #16
    4ddc:	0000cc00 	andeq	ip, r0, r0, lsl #24
    4de0:	5d000100 	stfpls	f0, [r0]
    4de4:	000000cc 	andeq	r0, r0, ip, asr #1
    4de8:	0000011c 	andeq	r0, r0, ip, lsl r1
    4dec:	107d0002 	rsbsne	r0, sp, r2
	...
    4df8:	000000c8 	andeq	r0, r0, r8, asr #1
    4dfc:	000000dc 	ldrdeq	r0, [r0], -ip
    4e00:	e4500001 	ldrb	r0, [r0], #-1
    4e04:	ec000000 	stc	0, cr0, [r0], {0}
    4e08:	01000000 	tsteq	r0, r0
    4e0c:	00005000 	andeq	r5, r0, r0
    4e10:	00000000 	andeq	r0, r0, r0
    4e14:	011c0000 	tsteq	ip, r0
    4e18:	01200000 	teqeq	r0, r0
    4e1c:	00010000 	andeq	r0, r1, r0
    4e20:	0001205d 	andeq	r2, r1, sp, asr r0
    4e24:	00017800 	andeq	r7, r1, r0, lsl #16
    4e28:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    4e2c:	00000010 	andeq	r0, r0, r0, lsl r0
    4e30:	00000000 	andeq	r0, r0, r0
    4e34:	00011c00 	andeq	r1, r1, r0, lsl #24
    4e38:	00013000 	andeq	r3, r1, r0
    4e3c:	50000100 	andpl	r0, r0, r0, lsl #2
    4e40:	00000140 	andeq	r0, r0, r0, asr #2
    4e44:	00000148 	andeq	r0, r0, r8, asr #2
    4e48:	00500001 	subseq	r0, r0, r1
	...
    4e54:	04000000 	streq	r0, [r0]
    4e58:	01000000 	tsteq	r0, r0
    4e5c:	00045d00 	andeq	r5, r4, r0, lsl #26
    4e60:	000c0000 	andeq	r0, ip, r0
    4e64:	00020000 	andeq	r0, r2, r0
    4e68:	000c107d 	andeq	r1, ip, sp, ror r0
    4e6c:	00a00000 	adceq	r0, r0, r0
    4e70:	00020000 	andeq	r0, r2, r0
    4e74:	0000287d 	andeq	r2, r0, sp, ror r8
    4e78:	00000000 	andeq	r0, r0, r0
    4e7c:	00a00000 	adceq	r0, r0, r0
    4e80:	00a40000 	adceq	r0, r4, r0
    4e84:	00010000 	andeq	r0, r1, r0
    4e88:	0000a45d 	andeq	sl, r0, sp, asr r4
    4e8c:	0000b800 	andeq	fp, r0, r0, lsl #16
    4e90:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    4e94:	00000008 	andeq	r0, r0, r8
    4e98:	00000000 	andeq	r0, r0, r0
    4e9c:	0000a000 	andeq	sl, r0, r0
    4ea0:	0000a800 	andeq	sl, r0, r0, lsl #16
    4ea4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4eb0:	000000b8 	strheq	r0, [r0], -r8
    4eb4:	000000c8 	andeq	r0, r0, r8, asr #1
    4eb8:	c85d0001 	ldmdagt	sp, {r0}^
    4ebc:	44000000 	strmi	r0, [r0]
    4ec0:	02000001 	andeq	r0, r0, #1
    4ec4:	00087d00 	andeq	r7, r8, r0, lsl #26
    4ec8:	00000000 	andeq	r0, r0, r0
    4ecc:	b8000000 	stmdalt	r0, {}
    4ed0:	c0000000 	andgt	r0, r0, r0
    4ed4:	01000000 	tsteq	r0, r0
    4ed8:	00005000 	andeq	r5, r0, r0
	...
    4ee4:	00040000 	andeq	r0, r4, r0
    4ee8:	00010000 	andeq	r0, r1, r0
    4eec:	0000045d 	andeq	r0, r0, sp, asr r4
    4ef0:	00000c00 	andeq	r0, r0, r0, lsl #24
    4ef4:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    4ef8:	00000c0c 	andeq	r0, r0, ip, lsl #24
    4efc:	0000ac00 	andeq	sl, r0, r0, lsl #24
    4f00:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    4f04:	00000028 	andeq	r0, r0, r8, lsr #32
    4f08:	00000000 	andeq	r0, r0, r0
    4f0c:	0000ac00 	andeq	sl, r0, r0, lsl #24
    4f10:	0000b000 	andeq	fp, r0, r0
    4f14:	5d000100 	stfpls	f0, [r0]
    4f18:	000000b0 	strheq	r0, [r0], -r0
    4f1c:	000000b4 	strheq	r0, [r0], -r4
    4f20:	0c7d0002 	ldcleq	0, cr0, [sp], #-8
    4f24:	000000b4 	strheq	r0, [r0], -r4
    4f28:	00000114 	andeq	r0, r0, r4, lsl r1
    4f2c:	187d0002 	ldmdane	sp!, {r1}^
	...
    4f38:	000000ac 	andeq	r0, r0, ip, lsr #1
    4f3c:	000000c0 	andeq	r0, r0, r0, asr #1
    4f40:	e0500001 	subs	r0, r0, r1
    4f44:	e8000000 	stmda	r0, {}
    4f48:	01000000 	tsteq	r0, r0
    4f4c:	00005000 	andeq	r5, r0, r0
	...
    4f58:	00040000 	andeq	r0, r4, r0
    4f5c:	00010000 	andeq	r0, r1, r0
    4f60:	0000045d 	andeq	r0, r0, sp, asr r4
    4f64:	00000c00 	andeq	r0, r0, r0, lsl #24
    4f68:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    4f6c:	00000c08 	andeq	r0, r0, r8, lsl #24
    4f70:	0000a800 	andeq	sl, r0, r0, lsl #16
    4f74:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    4f78:	00000020 	andeq	r0, r0, r0, lsr #32
    4f7c:	00000000 	andeq	r0, r0, r0
    4f80:	0000a800 	andeq	sl, r0, r0, lsl #16
    4f84:	0000ac00 	andeq	sl, r0, r0, lsl #24
    4f88:	5d000100 	stfpls	f0, [r0]
    4f8c:	000000ac 	andeq	r0, r0, ip, lsr #1
    4f90:	000000b0 	strheq	r0, [r0], -r0
    4f94:	0c7d0002 	ldcleq	0, cr0, [sp], #-8
    4f98:	000000b0 	strheq	r0, [r0], -r0
    4f9c:	00000164 	andeq	r0, r0, r4, ror #2
    4fa0:	187d0002 	ldmdane	sp!, {r1}^
	...
    4fac:	000000a8 	andeq	r0, r0, r8, lsr #1
    4fb0:	000000bc 	strheq	r0, [r0], -ip
    4fb4:	1c500001 	mrrcne	0, 0, r0, r0, cr1
    4fb8:	28000001 	stmdacs	r0, {r0}
    4fbc:	01000001 	tsteq	r0, r1
    4fc0:	00005000 	andeq	r5, r0, r0
	...
    4fcc:	00080000 	andeq	r0, r8, r0
    4fd0:	00010000 	andeq	r0, r1, r0
    4fd4:	0000085d 	andeq	r0, r0, sp, asr r8
    4fd8:	00002800 	andeq	r2, r0, r0, lsl #16
    4fdc:	7d000200 	sfmvc	f0, 4, [r0]	; (stcvc 2, cr0, [r0])
    4fe0:	00002820 	andeq	r2, r0, r0, lsr #16
    4fe4:	0000e400 	andeq	lr, r0, r0, lsl #8
    4fe8:	7d000300 	stcvc	3, cr0, [r0]
    4fec:	000000c8 	andeq	r0, r0, r8, asr #1
	...
    4ff8:	00d40000 	sbcseq	r0, r4, r0
    4ffc:	00010000 	andeq	r0, r1, r0
    5000:	00000050 	andeq	r0, r0, r0, asr r0
	...
    500c:	00000400 	andeq	r0, r0, r0, lsl #8
    5010:	51000100 	tstpl	r0, r0, lsl #2
	...
    5020:	00000070 	andeq	r0, r0, r0, ror r0
    5024:	00530001 	subseq	r0, r3, r1
    5028:	00000000 	andeq	r0, r0, r0
    502c:	10000000 	andne	r0, r0, r0
    5030:	14000000 	strne	r0, [r0]
    5034:	01000000 	tsteq	r0, r0
    5038:	00145700 	andseq	r5, r4, r0, lsl #14
    503c:	001c0000 	andseq	r0, ip, r0
    5040:	00010000 	andeq	r0, r1, r0
    5044:	00001c56 	andeq	r1, r0, r6, asr ip
    5048:	00002000 	andeq	r2, r0, r0
    504c:	5a000100 	bpl	5454 <DISABLE_IRQ+0x53d4>
    5050:	00000020 	andeq	r0, r0, r0, lsr #32
    5054:	00000024 	andeq	r0, r0, r4, lsr #32
    5058:	24590001 	ldrbcs	r0, [r9], #-1
    505c:	78000000 	stmdavc	r0, {}
    5060:	01000000 	tsteq	r0, r0
    5064:	00785b00 	rsbseq	r5, r8, r0, lsl #22
    5068:	00e40000 	rsceq	r0, r4, r0
    506c:	00010000 	andeq	r0, r1, r0
    5070:	00000054 	andeq	r0, r0, r4, asr r0
    5074:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_pubnames:

00000000 <.debug_pubnames>:
       0:	00000057 	andeq	r0, r0, r7, asr r0
       4:	00ab0002 	adceq	r0, fp, r2
       8:	01670000 	cmneq	r7, r0
       c:	009d0000 	addseq	r0, sp, r0
      10:	65680000 	strbvs	r0, [r8]!
      14:	776f6c6c 	strbvc	r6, [pc, -ip, ror #24]!
      18:	646c726f 	strbtvs	r7, [ip], #-623	; 0x26f
      1c:	0000be00 	andeq	fp, r0, r0, lsl #28
      20:	73657400 	cmnvc	r5, #0
      24:	6d6d5f74 	stclvs	15, cr5, [sp, #-464]!	; 0xfffffe30
      28:	00d70075 	sbcseq	r0, r7, r5, ror r0
      2c:	69740000 	ldmdbvs	r4!, {}^
      30:	5f72656d 	svcpl	0x0072656d
      34:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
      38:	0000ec00 	andeq	lr, r0, r0, lsl #24
      3c:	616c7000 	cmnvs	ip, r0
      40:	6f625f74 	svcvs	0x00625f74
      44:	5400746f 	strpl	r7, [r0], #-1135	; 0x46f
      48:	74000001 	strvc	r0, [r0], #-1
      4c:	5f747365 	svcpl	0x00747365
      50:	74697773 	strbtvc	r7, [r9], #-1907	; 0x773
      54:	00006863 	andeq	r6, r0, r3, ror #16
      58:	50000000 	andpl	r0, r0, r0
      5c:	02000000 	andeq	r0, r0, #0
      60:	00026b00 	andeq	r6, r2, r0, lsl #22
      64:	00013300 	andeq	r3, r1, r0, lsl #6
      68:	00007300 	andeq	r7, r0, r0, lsl #6
      6c:	61747300 	cmnvs	r4, r0, lsl #6
      70:	6d5f7472 	cfldrdvs	mvd7, [pc, #-456]	; 0xfffffe38
      74:	9600756d 	strls	r7, [r0], -sp, ror #10
      78:	67000000 	strvs	r0, [r0, -r0]
      7c:	6c5f6e65 	mrrcvs	14, 6, r6, pc, cr5
      80:	74705f31 	ldrbtvc	r5, [r0], #-3889	; 0xf31
      84:	00b30065 	adcseq	r0, r3, r5, rrx
      88:	65670000 	strbvs	r0, [r7]!
      8c:	316c5f6e 	cmncc	ip, lr, ror #30
      90:	6574705f 	ldrbvs	r7, [r4, #-95]!	; 0x5f
      94:	6464615f 	strbtvs	r6, [r4], #-351	; 0x15f
      98:	00d90072 	sbcseq	r0, r9, r2, ror r0
      9c:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
      a0:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
      a4:	6d5f7379 	ldclvs	3, cr7, [pc, #-484]	; 0xfffffe1c
      a8:	0000756d 	andeq	r7, r0, sp, ror #10
      ac:	85000000 	strhi	r0, [r0]
      b0:	02000000 	andeq	r0, r0, #0
      b4:	00039e00 	andeq	r9, r3, r0, lsl #28
      b8:	0003ea00 	andeq	lr, r3, r0, lsl #20
      bc:	0000fa00 	andeq	pc, r0, r0, lsl #20
      c0:	6d656d00 	stclvs	13, cr6, [r5]
      c4:	00797063 	rsbseq	r7, r9, r3, rrx
      c8:	0000012f 	andeq	r0, r0, pc, lsr #2
      cc:	626d756e 	rsbvs	r7, sp, #461373440	; 0x1b800000
      d0:	9f007265 	svcls	0x00007265
      d4:	66000001 	strvs	r0, [r0], -r1
      d8:	616d726f 	cmnvs	sp, pc, ror #4
      dc:	65645f74 	strbvs	r5, [r4, #-3956]!	; 0xf74
      e0:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xf63
      e4:	0001e800 	andeq	lr, r1, r0, lsl #16
      e8:	6e737600 	cdpvs	6, 7, cr7, cr3, cr0, {0}
      ec:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
      f0:	f8006674 	undefined instruction 0xf8006674
      f4:	70000002 	andvc	r0, r0, r2
      f8:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
      fc:	0317006b 	tsteq	r7, #107	; 0x6b
     100:	65740000 	ldrbvs	r0, [r4]!
     104:	705f7473 	subsvc	r7, pc, r3, ror r4
     108:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
     10c:	0358006b 	cmpeq	r8, #107	; 0x6b
     110:	5f5f0000 	svcpl	0x005f0000
     114:	5f747570 	svcpl	0x00747570
     118:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     11c:	0003b500 	andeq	fp, r3, r0, lsl #10
     120:	67696400 	strbvs	r6, [r9, -r0, lsl #8]!
     124:	00737469 	rsbseq	r7, r3, r9, ror #8
     128:	000003d7 	ldrdeq	r0, [r0], -r7
     12c:	626d756e 	rsbvs	r7, sp, #461373440	; 0x1b800000
     130:	00737265 	rsbseq	r7, r3, r5, ror #4
     134:	00000000 	andeq	r0, r0, r0
     138:	00000052 	andeq	r0, r0, r2, asr r0
     13c:	07880002 	streq	r0, [r8, r2]
     140:	00a10000 	adceq	r0, r1, r0
     144:	00250000 	eoreq	r0, r5, r0
     148:	6e650000 	cdpvs	0, 6, cr0, cr5, cr0, {0}
     14c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
     150:	7172695f 	cmnvc	r2, pc, asr r9
     154:	00003a00 	andeq	r3, r0, r0, lsl #20
     158:	73696400 	cmnvc	r9, #0
     15c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
     160:	7172695f 	cmnvc	r2, pc, asr r9
     164:	00004f00 	andeq	r4, r0, r0, lsl #30
     168:	616d7500 	cmnvs	sp, r0, lsl #10
     16c:	695f6b73 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
     170:	7b00746e 	blvc	1d330 <DISABLE_IRQ+0x1d2b0>
     174:	63000000 	movwvs	r0, #0
     178:	6f6d6d6f 	svcvs	0x006d6d6f
     17c:	72695f6e 	rsbvc	r5, r9, #440	; 0x1b8
     180:	61685f71 	smcvs	34289	; 0x85f1
     184:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     188:	00000072 	andeq	r0, r0, r2, ror r0
     18c:	00550000 	subseq	r0, r5, r0
     190:	00020000 	andeq	r0, r2, r0
     194:	00000829 	andeq	r0, r0, r9, lsr #16
     198:	00000861 	andeq	r0, r0, r1, ror #16
     19c:	000006e7 	andeq	r0, r0, r7, ror #13
     1a0:	5f776172 	svcpl	0x00776172
     1a4:	636f6c62 	cmnvs	pc, #25088	; 0x6200
     1a8:	65725f6b 	ldrbvs	r5, [r2, #-3947]!	; 0xf6b
     1ac:	7361656c 	cmnvc	r1, #452984832	; 0x1b000000
     1b0:	07400065 	strbeq	r0, [r0, -r5, rrx]
     1b4:	61720000 	cmnvs	r2, r0
     1b8:	6c625f77 	stclvs	15, cr5, [r2], #-476	; 0xfffffe24
     1bc:	5f6b636f 	svcpl	0x006b636f
     1c0:	6f6c6c61 	svcvs	0x006c6c61
     1c4:	65746163 	ldrbvs	r6, [r4, #-355]!	; 0x163
     1c8:	0007a300 	andeq	sl, r7, r0, lsl #6
     1cc:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     1d0:	6f6c625f 	svcvs	0x006c625f
     1d4:	705f6b63 	subsvc	r6, pc, r3, ror #22
     1d8:	5f6c6f6f 	svcpl	0x006c6f6f
     1dc:	61657263 	cmnvs	r5, r3, ror #4
     1e0:	00006574 	andeq	r6, r0, r4, ror r5
     1e4:	52000000 	andpl	r0, r0, #0
     1e8:	02000000 	andeq	r0, r0, #0
     1ec:	00108a00 	andseq	r8, r0, r0, lsl #20
     1f0:	00090c00 	andeq	r0, r9, r0, lsl #24
     1f4:	0006f500 	andeq	pc, r6, r0, lsl #10
     1f8:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     1fc:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0x25f
     200:	6f705f65 	svcvs	0x00705f65
     204:	635f6c6f 	cmpvs	pc, #28416	; 0x6f00
     208:	74616572 	strbtvc	r6, [r1], #-1394	; 0x572
     20c:	076b0065 	strbeq	r0, [fp, -r5, rrx]!
     210:	61720000 	cmnvs	r2, r0
     214:	79625f77 	stmdbvc	r2!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     218:	725f6574 	subsvc	r6, pc, #486539264	; 0x1d000000
     21c:	61656c65 	cmnvs	r5, r5, ror #24
     220:	25006573 	strcs	r6, [r0, #-1395]	; 0x573
     224:	72000008 	andvc	r0, r0, #8
     228:	625f7761 	subsvs	r7, pc, #25427968	; 0x1840000
     22c:	5f657479 	svcpl	0x00657479
     230:	6f6c6c61 	svcvs	0x006c6c61
     234:	65746163 	ldrbvs	r6, [r4, #-355]!	; 0x163
     238:	00000000 	andeq	r0, r0, r0
     23c:	00006a00 	andeq	r6, r0, r0, lsl #20
     240:	96000200 	strls	r0, [r0], -r0, lsl #4
     244:	de000019 	mcrle	0, 0, r0, cr0, cr9, {0}
     248:	63000009 	movwvs	r0, #9
     24c:	72000007 	andvc	r0, r0, #7
     250:	655f7761 	ldrbvs	r7, [pc, #-1889]	; fffffaf7 <rEINTPEND+0xa9fffa4f>
     254:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
     258:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
     25c:	00657465 	rsbeq	r7, r5, r5, ror #8
     260:	000007c6 	andeq	r0, r0, r6, asr #15
     264:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
     268:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xf74
     26c:	08750074 	ldmdaeq	r5!, {r2, r4, r5, r6}^
     270:	61720000 	cmnvs	r2, r0
     274:	76655f77 	uqsub16vc	r5, r5, r7
     278:	5f746e65 	svcpl	0x00746e65
     27c:	00746573 	rsbseq	r6, r4, r3, ror r5
     280:	000008c4 	andeq	r0, r0, r4, asr #17
     284:	5f776172 	svcpl	0x00776172
     288:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
     28c:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xf74
     290:	09560074 	ldmdbeq	r6, {r2, r4, r5, r6}^
     294:	61720000 	cmnvs	r2, r0
     298:	76655f77 	uqsub16vc	r5, r5, r7
     29c:	5f746e65 	svcpl	0x00746e65
     2a0:	61657263 	cmnvs	r5, r3, ror #4
     2a4:	00006574 	andeq	r6, r0, r4, ror r5
     2a8:	20000000 	andcs	r0, r0, r0
     2ac:	02000000 	andeq	r0, r0, #0
     2b0:	00237400 	eoreq	r7, r3, r0, lsl #8
     2b4:	00058700 	andeq	r8, r5, r0, lsl #14
     2b8:	00050d00 	andeq	r0, r5, r0, lsl #26
     2bc:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     2c0:	6c64695f 	stclvs	9, cr6, [r4], #-380	; 0xfffffe84
     2c4:	61745f65 	cmnvs	r4, r5, ror #30
     2c8:	00006b73 	andeq	r6, r0, r3, ror fp
     2cc:	8b000000 	blhi	2d4 <DISABLE_IRQ+0x254>
     2d0:	02000000 	andeq	r0, r0, #0
     2d4:	00295c00 	eoreq	r5, r9, r0, lsl #24
     2d8:	000b9200 	andeq	r9, fp, r0, lsl #4
     2dc:	00081600 	andeq	r1, r8, r0, lsl #12
     2e0:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     2e4:	5f716d5f 	svcpl	0x00716d5f
     2e8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
     2ec:	00089d00 	andeq	r9, r8, r0, lsl #26
     2f0:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     2f4:	75716d5f 	ldrbvc	r6, [r1, #-3423]!	; 0xd5f
     2f8:	5f657565 	svcpl	0x00657565
     2fc:	5f746567 	svcpl	0x00746567
     300:	6f666e69 	svcvs	0x00666e69
     304:	74616d72 	strbtvc	r6, [r1], #-3442	; 0xd72
     308:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     30c:	0000090e 	andeq	r0, r0, lr, lsl #18
     310:	5f776172 	svcpl	0x00776172
     314:	6575716d 	ldrbvs	r7, [r5, #-365]!	; 0x16d
     318:	665f6575 	undefined instruction 0x665f6575
     31c:	6873756c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     320:	00094900 	andeq	r4, r9, r0, lsl #18
     324:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     328:	75716d5f 	ldrbvc	r6, [r1, #-3423]!	; 0xd5f
     32c:	5f657565 	svcpl	0x00657565
     330:	656c6564 	strbvs	r6, [ip, #-1380]!	; 0x564
     334:	a6006574 	undefined instruction 0xa6006574
     338:	72000009 	andvc	r0, r0, #9
     33c:	6d5f7761 	ldclvs	7, cr7, [pc, #-388]	; 0xfffffe7c
     340:	65725f71 	ldrbvs	r5, [r2, #-3953]!	; 0xf71
     344:	76696563 	strbtvc	r6, [r9], -r3, ror #10
     348:	0a970065 	beq	fe5c04e4 <rEINTPEND+0xa85c043c>
     34c:	61720000 	cmnvs	r2, r0
     350:	716d5f77 	smcvc	54775	; 0xd5f7
     354:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
     358:	00000064 	andeq	r0, r0, r4, rrx
     35c:	00ad0000 	adceq	r0, sp, r0
     360:	00020000 	andeq	r0, r2, r0
     364:	000034ee 	andeq	r3, r0, lr, ror #9
     368:	00000b13 	andeq	r0, r0, r3, lsl fp
     36c:	000006dd 	ldrdeq	r0, [r0], -sp
     370:	5f676863 	svcpl	0x00676863
     374:	5f697270 	svcpl	0x00697270
     378:	6574756d 	ldrbvs	r7, [r4, #-1389]!	; 0x56d
     37c:	08350078 	ldmdaeq	r5!, {r3, r4, r5, r6}
     380:	61720000 	cmnvs	r2, r0
     384:	756d5f77 	strbvc	r5, [sp, #-3959]!	; 0xf77
     388:	5f786574 	svcpl	0x00786574
     38c:	656c6564 	strbvs	r6, [ip, #-1380]!	; 0x564
     390:	92006574 	andls	r6, r0, #486539264	; 0x1d000000
     394:	6d000008 	stcvs	0, cr0, [r0, #-32]	; 0xffffffe0
     398:	78657475 	stmdavc	r5!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
     39c:	6174735f 	cmnvs	r4, pc, asr r3
     3a0:	635f6574 	cmpvs	pc, #486539264	; 0x1d000000
     3a4:	676e6168 	strbvs	r6, [lr, -r8, ror #2]!
     3a8:	08db0065 	ldmeq	fp, {r0, r2, r5, r6}^
     3ac:	746d0000 	strbtvc	r0, [sp]
     3b0:	68635f78 	stmdavs	r3!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     3b4:	72705f67 	rsbsvc	r5, r0, #412	; 0x19c
     3b8:	09310069 	ldmdbeq	r1!, {r0, r3, r5, r6}
     3bc:	61720000 	cmnvs	r2, r0
     3c0:	61745f77 	cmnvs	r4, r7, ror pc
     3c4:	665f6b73 	undefined instruction 0x665f6b73
     3c8:	5f656572 	svcpl	0x00656572
     3cc:	6574756d 	ldrbvs	r7, [r4, #-1389]!	; 0x56d
     3d0:	09a80078 	stmibeq	r8!, {r3, r4, r5, r6}
     3d4:	61720000 	cmnvs	r2, r0
     3d8:	756d5f77 	strbvc	r5, [sp, #-3959]!	; 0xf77
     3dc:	5f786574 	svcpl	0x00786574
     3e0:	00747570 	rsbseq	r7, r4, r0, ror r5
     3e4:	00000a15 	andeq	r0, r0, r5, lsl sl
     3e8:	5f776172 	svcpl	0x00776172
     3ec:	6574756d 	ldrbvs	r7, [r4, #-1389]!	; 0x56d
     3f0:	65675f78 	strbvs	r5, [r7, #-3960]!	; 0xf78
     3f4:	0a7c0074 	beq	1f005cc <MEM_SIZE+0x17005cc>
     3f8:	61720000 	cmnvs	r2, r0
     3fc:	756d5f77 	strbvc	r5, [sp, #-3959]!	; 0xf77
     400:	5f786574 	svcpl	0x00786574
     404:	61657263 	cmnvs	r5, r3, ror #4
     408:	00006574 	andeq	r6, r0, r4, ror r5
     40c:	93000000 	movwls	r0, #0
     410:	02000002 	andeq	r0, r0, #2
     414:	00400100 	subeq	r0, r0, r0, lsl #2
     418:	0008fb00 	andeq	pc, r8, r0, lsl #22
     41c:	00064000 	andeq	r4, r6, r0
     420:	67696800 	strbvs	r6, [r9, -r0, lsl #16]!
     424:	65725f68 	ldrbvs	r5, [r2, #-3944]!	; 0xf68
     428:	5f796461 	svcpl	0x00796461
     42c:	006a626f 	rsbeq	r6, sl, pc, ror #4
     430:	00000652 	andeq	r0, r0, r2, asr r6
     434:	5f776172 	svcpl	0x00776172
     438:	6b736174 	blvs	1cd8a10 <MEM_SIZE+0x14d8a10>
     43c:	7463615f 	strbtvc	r6, [r3], #-351	; 0x15f
     440:	00657669 	rsbeq	r7, r5, r9, ror #12
     444:	00000664 	andeq	r0, r0, r4, ror #12
     448:	5f776172 	svcpl	0x00776172
     44c:	615f736f 	cmpvs	pc, pc, ror #6
     450:	76697463 	strbtvc	r7, [r9], -r3, ror #8
     454:	06760065 	ldrbteq	r0, [r6], -r5, rrx
     458:	64690000 	strbtvs	r0, [r9]
     45c:	745f656c 	ldrbvc	r6, [pc], #1388	; 464 <DISABLE_IRQ+0x3e4>
     460:	5f6b7361 	svcpl	0x006b7361
     464:	74697865 	strbtvc	r7, [r9], #-2149	; 0x865
     468:	00068800 	andeq	r8, r6, r0, lsl #16
     46c:	73617400 	cmnvc	r1, #0
     470:	5f305f6b 	svcpl	0x00305f6b
     474:	74697865 	strbtvc	r7, [r9], #-2149	; 0x865
     478:	00069a00 	andeq	r9, r6, r0, lsl #20
     47c:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     480:	6165725f 	cmnvs	r5, pc, asr r2
     484:	715f7964 	cmpvc	pc, r4, ror #18
     488:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     48c:	0006ac00 	andeq	sl, r6, r0, lsl #24
     490:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     494:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
     498:	73656e5f 	cmnvc	r5, #1520	; 0x5f0
     49c:	676e6974 	undefined instruction 0x676e6974
     4a0:	0006be00 	andeq	fp, r6, r0, lsl #28
     4a4:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     4a8:	6863735f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
     4ac:	6c5f6465 	cfldrdvs	mvd6, [pc], {101}	; 0x65
     4b0:	006b636f 	rsbeq	r6, fp, pc, ror #6
     4b4:	000006d0 	ldrdeq	r0, [r0], -r0
     4b8:	5f776172 	svcpl	0x00776172
     4bc:	6b636974 	blvs	18daa94 <MEM_SIZE+0x10daa94>
     4c0:	756f635f 	strbvc	r6, [pc, #-863]!	; 169 <DISABLE_IRQ+0xe9>
     4c4:	e200746e 	and	r7, r0, #1845493760	; 0x6e000000
     4c8:	72000006 	andvc	r0, r0, #6
     4cc:	695f7761 	ldmdbvs	pc, {r0, r5, r6, r8, r9, sl, ip, sp, lr}^
     4d0:	5f656c64 	svcpl	0x00656c64
     4d4:	006a626f 	rsbeq	r6, sl, pc, ror #4
     4d8:	00000704 	andeq	r0, r0, r4, lsl #14
     4dc:	656c6469 	strbvs	r6, [ip, #-1129]!	; 0x469
     4e0:	6174735f 	cmnvs	r4, pc, asr r3
     4e4:	26006b63 	strcs	r6, [r0], -r3, ror #22
     4e8:	74000007 	strvc	r0, [r0], #-7
     4ec:	5f6b6369 	svcpl	0x006b6369
     4f0:	64616568 	strbtvs	r6, [r1], #-1384	; 0x568
     4f4:	00074800 	andeq	r4, r7, r0, lsl #16
     4f8:	6d697400 	cfstrdvs	mvd7, [r9]
     4fc:	685f7265 	ldmdavs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^
     500:	00646165 	rsbeq	r6, r4, r5, ror #2
     504:	0000075a 	andeq	r0, r0, sl, asr r7
     508:	5f776172 	svcpl	0x00776172
     50c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
     510:	6f635f72 	svcvs	0x00635f72
     514:	00746e75 	rsbseq	r6, r4, r5, ror lr
     518:	0000076c 	andeq	r0, r0, ip, ror #14
     51c:	5f776172 	svcpl	0x00776172
     520:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
     524:	74635f72 	strbtvc	r5, [r3], #-3954	; 0xf72
     528:	7e006c72 	mcrvc	12, 0, r6, cr0, cr2, {3}
     52c:	72000007 	andvc	r0, r0, #7
     530:	745f7761 	ldrbvc	r7, [pc], #1889	; 538 <DISABLE_IRQ+0x4b8>
     534:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     538:	6a626f5f 	bvs	189c2bc <MEM_SIZE+0x109c2bc>
     53c:	00079000 	andeq	r9, r7, r0
     540:	6d697400 	cfstrdvs	mvd7, [r9]
     544:	745f7265 	ldrbvc	r7, [pc], #613	; 54c <DISABLE_IRQ+0x4cc>
     548:	5f6b7361 	svcpl	0x006b7361
     54c:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
     550:	07a2006b 	streq	r0, [r2, fp, rrx]!
     554:	69740000 	ldmdbvs	r4!, {}^
     558:	5f72656d 	svcpl	0x0072656d
     55c:	006d6573 	rsbeq	r6, sp, r3, ror r5
     560:	000007b4 	undefined instruction 0x000007b4
     564:	6b736174 	blvs	1cd8b3c <MEM_SIZE+0x14d8b3c>
     568:	655f305f 	ldrbvs	r3, [pc, #-95]	; 511 <DISABLE_IRQ+0x491>
     56c:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
     570:	6165685f 	cmnvs	r5, pc, asr r8
     574:	07c60064 	strbeq	r0, [r6, r4, rrx]
     578:	61740000 	cmnvs	r4, r0
     57c:	305f6b73 	subscc	r6, pc, r3, ror fp
     580:	6576655f 	ldrbvs	r6, [r6, #-1375]!	; 0x55f
     584:	655f746e 	ldrbvs	r7, [pc, #-1134]	; 11e <DISABLE_IRQ+0x9e>
     588:	d800646e 	stmdale	r0, {r1, r2, r3, r5, r6, sl, sp, lr}
     58c:	74000007 	strvc	r0, [r0], #-7
     590:	5f6b7361 	svcpl	0x006b7361
     594:	76655f30 	uqaddsubxvc	r5, r5, r0
     598:	73746e65 	cmnvc	r4, #1616	; 0x650
     59c:	0007ea00 	andeq	lr, r7, r0, lsl #20
     5a0:	61657000 	cmnvs	r5, r0
     5a4:	76655f6b 	strbtvc	r5, [r5], -fp, ror #30
     5a8:	73746e65 	cmnvc	r4, #1616	; 0x650
     5ac:	00080c00 	andeq	r0, r8, r0, lsl #24
     5b0:	73617400 	cmnvc	r1, #0
     5b4:	5f305f6b 	svcpl	0x00305f6b
     5b8:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
     5bc:	715f7374 	cmpvc	pc, r4, ror r3
     5c0:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     5c4:	00081e00 	andeq	r1, r8, r0, lsl #28
     5c8:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     5cc:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
     5d0:	5f305f6b 	svcpl	0x00305f6b
     5d4:	006a626f 	rsbeq	r6, sl, pc, ror #4
     5d8:	00000830 	andeq	r0, r0, r0, lsr r8
     5dc:	6b736174 	blvs	1cd8bb4 <MEM_SIZE+0x14d8bb4>
     5e0:	735f305f 	cmpvc	pc, #95	; 0x5f
     5e4:	6b636174 	blvs	18d8bbc <MEM_SIZE+0x10d8bbc>
     5e8:	00084200 	andeq	r4, r8, r0, lsl #4
     5ec:	73617400 	cmnvc	r1, #0
     5f0:	5f305f6b 	svcpl	0x00305f6b
     5f4:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
     5f8:	61685f74 	smcvs	34292	; 0x85f4
     5fc:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     600:	08640072 	stmdaeq	r4!, {r1, r4, r5, r6}^
     604:	626f0000 	rsbvs	r0, pc, #0
     608:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
     60c:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
     610:	67736d5f 	undefined instruction 0x67736d5f
     614:	00087600 	andeq	r7, r8, r0, lsl #12
     618:	65726600 	ldrbvs	r6, [r2, #-1536]!	; 0x600
     61c:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
     620:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
     624:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
     628:	67736d5f 	undefined instruction 0x67736d5f
     62c:	00088e00 	andeq	r8, r8, r0, lsl #28
     630:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
     634:	67736d5f 	undefined instruction 0x67736d5f
     638:	6c75665f 	ldclvs	6, cr6, [r5], #-380	; 0xfffffe84
     63c:	08a0006c 	stmiaeq	r0!, {r2, r3, r5, r6}
     640:	736d0000 	cmnvc	sp, #0
     644:	76655f67 	strbtvc	r5, [r5], -r7, ror #30
     648:	5f746e65 	svcpl	0x00746e65
     64c:	646e6168 	strbtvs	r6, [lr], #-360	; 0x168
     650:	0072656c 	rsbseq	r6, r2, ip, ror #10
     654:	000008b2 	undefined instruction 0x000008b2
     658:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0x973
     65c:	645f6d65 	ldrbvs	r6, [pc], #3429	; 664 <DISABLE_IRQ+0x5e4>
     660:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
     664:	0008c400 	andeq	ip, r8, r0, lsl #8
     668:	63697400 	cmnvs	r9, #0
     66c:	61745f6b 	cmnvs	r4, fp, ror #30
     670:	6f5f6b73 	svcvs	0x005f6b73
     674:	d6006a62 	strle	r6, [r0], -r2, ror #20
     678:	74000008 	strvc	r0, [r0], #-8
     67c:	5f6b6369 	svcpl	0x006b6369
     680:	6b736174 	blvs	1cd8c58 <MEM_SIZE+0x14d8c58>
     684:	6174735f 	cmnvs	r4, pc, asr r3
     688:	e8006b63 	stmda	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     68c:	74000008 	strvc	r0, [r0], #-8
     690:	5f6b6369 	svcpl	0x006b6369
     694:	616d6573 	smcvs	54867	; 0xd653
     698:	726f6870 	rsbvc	r6, pc, #7340032	; 0x700000
     69c:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
     6a0:	0000006a 	andeq	r0, r0, sl, rrx
     6a4:	012a0000 	teqeq	sl, r0
     6a8:	00020000 	andeq	r0, r2, r0
     6ac:	000048fc 	strdeq	r4, [r0], -ip
     6b0:	00000f74 	andeq	r0, r0, r4, ror pc
     6b4:	000008b0 	undefined instruction 0x000008b0
     6b8:	5f6e7572 	svcpl	0x006e7572
     6bc:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
     6c0:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
     6c4:	f2007469 	vshl.s8	<illegal reg q3.5>, <illegal reg q12.5>, q0
     6c8:	61000008 	tstvs	r0, r8
     6cc:	725f6464 	subsvc	r6, pc, #1677721600	; 0x64000000
     6d0:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     6d4:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
     6d8:	65685f74 	strbvs	r5, [r8, #-3956]!	; 0xf74
     6dc:	69006461 	stmdbvs	r0, {r0, r5, r6, sl, sp, lr}
     6e0:	61000009 	tstvs	r0, r9
     6e4:	725f6464 	subsvc	r6, pc, #1677721600	; 0x64000000
     6e8:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     6ec:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
     6f0:	6e655f74 	mcrvs	15, 3, r5, cr5, cr4, {3}
     6f4:	09e40064 	stmibeq	r4!, {r2, r5, r6}^
     6f8:	64610000 	strbtvs	r0, [r1]
     6fc:	65725f64 	ldrbvs	r5, [r2, #-3940]!	; 0xf64
     700:	5f796461 	svcpl	0x00796461
     704:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
     708:	000b0f00 	andeq	r0, fp, r0, lsl #30
     70c:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
     710:	6f745f65 	svcvs	0x00745f65
     714:	6165725f 	cmnvs	r5, pc, asr r2
     718:	6c5f7964 	mrrcvs	9, 6, r7, pc, cr4
     71c:	5f747369 	svcpl	0x00747369
     720:	00646e65 	rsbeq	r6, r4, r5, ror #28
     724:	00000b82 	andeq	r0, r0, r2, lsl #23
     728:	5f746567 	svcpl	0x00746567
     72c:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
     730:	61745f79 	cmnvs	r4, r9, ror pc
     734:	be006b73 	vmovlt.16	d0[1], r6
     738:	6300000b 	movwvs	r0, #11
     73c:	676e6168 	strbvs	r6, [lr, -r8, ror #2]!
     740:	65705f65 	ldrbvs	r5, [r0, #-3941]!	; 0xf65
     744:	6c5f646e 	cfldrdvs	mvd6, [pc], {110}	; 0x6e
     748:	5f747369 	svcpl	0x00747369
     74c:	6f697270 	svcvs	0x00697270
     750:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     754:	000c5e00 	andeq	r5, ip, r0, lsl #28
     758:	6c656400 	cfstrdvs	mvd6, [r5]
     75c:	5f657465 	svcpl	0x00657465
     760:	646e6570 	strbtvs	r6, [lr], #-1392	; 0x570
     764:	6a626f5f 	bvs	189c4e8 <MEM_SIZE+0x109c4e8>
     768:	000d1800 	andeq	r1, sp, r0, lsl #16
     76c:	6b617700 	blvs	185e374 <MEM_SIZE+0x105e374>
     770:	65735f65 	ldrbvs	r5, [r3, #-3941]!	; 0xf65
     774:	6d5f646e 	cfldrdvs	mvd6, [pc, #-440]	; 0xfffffe48
     778:	735f6773 	cmpvc	pc, #30146560	; 0x1cc0000
     77c:	00657a69 	rsbeq	r7, r5, r9, ror #20
     780:	00000d65 	andeq	r0, r0, r5, ror #26
     784:	656b6177 	strbvs	r6, [fp, #-375]!	; 0x177
     788:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
     78c:	736d5f64 	cmnvc	sp, #400	; 0x190
     790:	0da20067 	stceq	0, cr0, [r2, #412]!	; 0x19c
     794:	61720000 	cmnvs	r2, r0
     798:	61775f77 	cmnvs	r7, r7, ror pc
     79c:	6f5f656b 	svcvs	0x005f656b
     7a0:	63656a62 	cmnvs	r5, #401408	; 0x62000
     7a4:	0dcf0074 	stcleq	0, cr0, [pc, #464]	; 0x1d0
     7a8:	65720000 	ldrbvs	r0, [r2]!
     7ac:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xf6d
     7b0:	6165725f 	cmnvs	r5, pc, asr r2
     7b4:	6c5f7964 	mrrcvs	9, 6, r7, pc, cr4
     7b8:	00747369 	rsbseq	r7, r4, r9, ror #6
     7bc:	00000e6d 	andeq	r0, r0, sp, ror #28
     7c0:	5f776172 	svcpl	0x00776172
     7c4:	646e6570 	strbtvs	r6, [lr], #-1392	; 0x570
     7c8:	6a626f5f 	bvs	189c54c <MEM_SIZE+0x109c54c>
     7cc:	00746365 	rsbseq	r6, r4, r5, ror #6
     7d0:	00000000 	andeq	r0, r0, r0
     7d4:	000000d7 	ldrdeq	r0, [r0], -r7
     7d8:	58700002 	ldmdapl	r0!, {r1}^
     7dc:	0c7a0000 	ldcleq	0, cr0, [sl]
     7e0:	08a30000 	stmiaeq	r3!, {}
     7e4:	61720000 	cmnvs	r2, r0
     7e8:	75715f77 	ldrbvc	r5, [r1, #-3959]!	; 0xf77
     7ec:	5f657565 	svcpl	0x00657565
     7f0:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     7f4:	675f7265 	ldrbvs	r7, [pc, -r5, ror #4]
     7f8:	695f7465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^
     7fc:	726f666e 	rsbvc	r6, pc, #115343360	; 0x6e00000
     800:	6974616d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     804:	04006e6f 	streq	r6, [r0], #-3695	; 0xe6f
     808:	72000009 	andvc	r0, r0, #9
     80c:	715f7761 	cmpvc	pc, r1, ror #14
     810:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     814:	6675625f 	undefined instruction 0x6675625f
     818:	5f726566 	svcpl	0x00726566
     81c:	73756c66 	cmnvc	r5, #26112	; 0x6600
     820:	093f0068 	ldmdbeq	pc!, {r3, r5, r6}
     824:	61720000 	cmnvs	r2, r0
     828:	75715f77 	ldrbvc	r5, [r1, #-3959]!	; 0xf77
     82c:	5f657565 	svcpl	0x00657565
     830:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     834:	645f7265 	ldrbvs	r7, [pc], #613	; 83c <DISABLE_IRQ+0x7bc>
     838:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xc65
     83c:	099c0065 	ldmibeq	ip, {r0, r2, r5, r6}
     840:	61720000 	cmnvs	r2, r0
     844:	75715f77 	ldrbvc	r5, [r1, #-3959]!	; 0xf77
     848:	5f657565 	svcpl	0x00657565
     84c:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     850:	725f7265 	subsvc	r7, pc, #1342177286	; 0x50000006
     854:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     858:	81006576 	tsthi	r0, r6, ror r5
     85c:	7100000a 	tstvc	r0, sl
     860:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     864:	6675625f 	undefined instruction 0x6675625f
     868:	5f726566 	svcpl	0x00726566
     86c:	74736f70 	ldrbtvc	r6, [r3], #-3952	; 0xf70
     870:	000b7700 	andeq	r7, fp, r0, lsl #14
     874:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     878:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
     87c:	625f6575 	subsvs	r6, pc, #490733568	; 0x1d400000
     880:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
     884:	6e655f72 	mcrvs	15, 3, r5, cr5, cr2, {3}
     888:	6f705f64 	svcvs	0x00705f64
     88c:	c6007473 	undefined instruction 0xc6007473
     890:	7200000b 	andvc	r0, r0, #11
     894:	715f7761 	cmpvc	pc, r1, ror #14
     898:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     89c:	6675625f 	undefined instruction 0x6675625f
     8a0:	5f726566 	svcpl	0x00726566
     8a4:	61657263 	cmnvs	r5, r3, ror #4
     8a8:	00006574 	andeq	r6, r0, r4, ror r5
     8ac:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
     8b0:	02000000 	andeq	r0, r0, #0
     8b4:	0064ea00 	rsbeq	lr, r4, r0, lsl #20
     8b8:	000c1a00 	andeq	r1, ip, r0, lsl #20
     8bc:	00086000 	andeq	r6, r8, r0
     8c0:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     8c4:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
     8c8:	675f6575 	undefined instruction 0x675f6575
     8cc:	695f7465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^
     8d0:	726f666e 	rsbvc	r6, pc, #115343360	; 0x6e00000
     8d4:	6974616d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     8d8:	bd006e6f 	stclt	14, cr6, [r0, #-444]	; 0xfffffe44
     8dc:	72000008 	andvc	r0, r0, #8
     8e0:	715f7761 	cmpvc	pc, r1, ror #14
     8e4:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     8e8:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
     8ec:	6f6e5f64 	svcvs	0x006e5f64
     8f0:	79666974 	stmdbvc	r6!, {r2, r4, r5, r6, r8, fp, sp, lr}^
     8f4:	00090800 	andeq	r0, r9, r0, lsl #16
     8f8:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     8fc:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
     900:	645f6575 	ldrbvs	r6, [pc], #1397	; 908 <DISABLE_IRQ+0x888>
     904:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xc65
     908:	09650065 	stmdbeq	r5!, {r0, r2, r5, r6}^
     90c:	61720000 	cmnvs	r2, r0
     910:	75715f77 	ldrbvc	r5, [r1, #-3959]!	; 0xf77
     914:	5f657565 	svcpl	0x00657565
     918:	73756c66 	cmnvc	r5, #26112	; 0x6600
     91c:	09a00068 	stmibeq	r0!, {r3, r5, r6}
     920:	61720000 	cmnvs	r2, r0
     924:	75715f77 	ldrbvc	r5, [r1, #-3959]!	; 0xf77
     928:	5f657565 	svcpl	0x00657565
     92c:	65636572 	strbvs	r6, [r3, #-1394]!	; 0x572
     930:	00657669 	rsbeq	r7, r5, r9, ror #12
     934:	00000a1b 	andeq	r0, r0, fp, lsl sl
     938:	5f67736d 	svcpl	0x0067736d
     93c:	74736f70 	ldrbtvc	r6, [r3], #-3952	; 0xf70
     940:	000ab900 	andeq	fp, sl, r0, lsl #18
     944:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     948:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
     94c:	615f6575 	cmpvs	pc, r5, ror r5
     950:	705f6c6c 	subsvc	r6, pc, ip, ror #24
     954:	0074736f 	rsbseq	r7, r4, pc, ror #6
     958:	00000b08 	andeq	r0, r0, r8, lsl #22
     95c:	5f776172 	svcpl	0x00776172
     960:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
     964:	6e655f65 	cdpvs	15, 6, cr5, cr5, cr5, {3}
     968:	6f705f64 	svcvs	0x00705f64
     96c:	47007473 	smlsdxmi	r0, r3, r4, r7
     970:	7200000b 	andvc	r0, r0, #11
     974:	715f7761 	cmpvc	pc, r1, ror #14
     978:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     97c:	6f72665f 	svcvs	0x0072665f
     980:	705f746e 	subsvc	r7, pc, lr, ror #8
     984:	0074736f 	rsbseq	r7, r4, pc, ror #6
     988:	00000b83 	andeq	r0, r0, r3, lsl #23
     98c:	5f776172 	svcpl	0x00776172
     990:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
     994:	72635f65 	rsbvc	r5, r3, #404	; 0x194
     998:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0x165
     99c:	00000000 	andeq	r0, r0, r0
     9a0:	00010100 	andeq	r0, r1, r0, lsl #2
     9a4:	04000200 	streq	r0, [r0], #-512	; 0x200
     9a8:	5f000071 	svcpl	0x00000071
     9ac:	4000000b 	andmi	r0, r0, fp
     9b0:	72000007 	andvc	r0, r0, #7
     9b4:	715f7761 	cmpvc	pc, r1, ror #14
     9b8:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     9bc:	7a69735f 	bvc	1a5d740 <MEM_SIZE+0x125d740>
     9c0:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xf65
     9c4:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
     9c8:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
     9cc:	6f697461 	svcvs	0x00697461
     9d0:	07b7006e 	ldreq	r0, [r7, lr, rrx]!
     9d4:	61720000 	cmnvs	r2, r0
     9d8:	75715f77 	ldrbvc	r5, [r1, #-3959]!	; 0xf77
     9dc:	5f657565 	svcpl	0x00657565
     9e0:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
     9e4:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
     9e8:	00657465 	rsbeq	r7, r5, r5, ror #8
     9ec:	00000814 	andeq	r0, r0, r4, lsl r8
     9f0:	5f776172 	svcpl	0x00776172
     9f4:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
     9f8:	69735f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     9fc:	665f657a 	undefined instruction 0x665f657a
     a00:	6873756c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     a04:	00085b00 	andeq	r5, r8, r0, lsl #22
     a08:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     a0c:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
     a10:	735f6575 	cmpvc	pc, #490733568	; 0x1d400000
     a14:	5f657a69 	svcpl	0x00657a69
     a18:	65636572 	strbvs	r6, [r3, #-1394]!	; 0x572
     a1c:	00657669 	rsbeq	r7, r5, r9, ror #12
     a20:	000008e6 	andeq	r0, r0, r6, ror #17
     a24:	5f67736d 	svcpl	0x0067736d
     a28:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
     a2c:	736f705f 	cmnvc	pc, #95	; 0x5f
     a30:	09ad0074 	stmibeq	sp!, {r2, r4, r5, r6}
     a34:	61720000 	cmnvs	r2, r0
     a38:	75715f77 	ldrbvc	r5, [r1, #-3959]!	; 0xf77
     a3c:	5f657565 	svcpl	0x00657565
     a40:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
     a44:	6c6c615f 	stfvse	f6, [ip], #-380	; 0xfffffe84
     a48:	736f705f 	cmnvc	pc, #95	; 0x5f
     a4c:	0a0c0074 	beq	300c24 <DISABLE_IRQ+0x300ba4>
     a50:	61720000 	cmnvs	r2, r0
     a54:	75715f77 	ldrbvc	r5, [r1, #-3959]!	; 0xf77
     a58:	5f657565 	svcpl	0x00657565
     a5c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
     a60:	646e655f 	strbtvs	r6, [lr], #-1375	; 0x55f
     a64:	736f705f 	cmnvc	pc, #95	; 0x5f
     a68:	0a5b0074 	beq	16c0c40 <MEM_SIZE+0xec0c40>
     a6c:	61720000 	cmnvs	r2, r0
     a70:	75715f77 	ldrbvc	r5, [r1, #-3959]!	; 0xf77
     a74:	5f657565 	svcpl	0x00657565
     a78:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
     a7c:	6f72665f 	svcvs	0x0072665f
     a80:	705f746e 	subsvc	r7, pc, lr, ror #8
     a84:	0074736f 	rsbseq	r7, r4, pc, ror #6
     a88:	00000aaa 	andeq	r0, r0, sl, lsr #21
     a8c:	5f776172 	svcpl	0x00776172
     a90:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
     a94:	69735f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     a98:	635f657a 	cmpvs	pc, #511705088	; 0x1e800000
     a9c:	74616572 	strbtvc	r6, [r1], #-1394	; 0x572
     aa0:	00000065 	andeq	r0, r0, r5, rrx
     aa4:	00560000 	subseq	r0, r6, r0
     aa8:	00020000 	andeq	r0, r2, r0
     aac:	00007c63 	andeq	r7, r0, r3, ror #24
     ab0:	00000873 	andeq	r0, r0, r3, ror r8
     ab4:	00000719 	andeq	r0, r0, r9, lsl r7
     ab8:	636c6163 	cmnvs	ip, #-1073741800	; 0xc0000018
     abc:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xc75
     ac0:	69745f65 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     ac4:	735f656d 	cmpvc	pc, #457179136	; 0x1b400000
     ac8:	6563696c 	strbvs	r6, [r3, #-2412]!	; 0x96c
     acc:	00077c00 	andeq	r7, r7, r0, lsl #24
     ad0:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     ad4:	5f736f5f 	svcpl	0x00736f5f
     ad8:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     adc:	07950074 	undefined instruction 0x07950074
     ae0:	61720000 	cmnvs	r2, r0
     ae4:	736f5f77 	cmnvc	pc, #476	; 0x1dc
     ae8:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
     aec:	07c80074 	undefined instruction 0x07c80074
     af0:	61720000 	cmnvs	r2, r0
     af4:	63735f77 	cmnvs	r3, #476	; 0x1dc
     af8:	00646568 	rsbeq	r6, r4, r8, ror #10
     afc:	00000000 	andeq	r0, r0, r0
     b00:	000000cb 	andeq	r0, r0, fp, asr #1
     b04:	84d60002 	ldrbhi	r0, [r6], #2
     b08:	0a190000 	beq	640b10 <DISABLE_IRQ+0x640a90>
     b0c:	075d0000 	ldrbeq	r0, [sp, -r0]
     b10:	61720000 	cmnvs	r2, r0
     b14:	65735f77 	ldrbvs	r5, [r3, #-3959]!	; 0xf77
     b18:	6870616d 	ldmdavs	r0!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     b1c:	5f65726f 	svcpl	0x0065726f
     b20:	00746573 	rsbseq	r6, r4, r3, ror r5
     b24:	000007b4 	undefined instruction 0x000007b4
     b28:	5f776172 	svcpl	0x00776172
     b2c:	706d6573 	rsbvc	r6, sp, r3, ror r5
     b30:	65726f68 	ldrbvs	r6, [r2, #-3944]!	; 0xf68
     b34:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
     b38:	6f6e5f64 	svcvs	0x006e5f64
     b3c:	79666974 	stmdbvc	r6!, {r2, r4, r5, r6, r8, fp, sp, lr}^
     b40:	0007ff00 	andeq	pc, r7, r0, lsl #30
     b44:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     b48:	6d65735f 	stclvs	3, cr7, [r5, #-380]!	; 0xfffffe84
     b4c:	6f687061 	svcvs	0x00687061
     b50:	645f6572 	ldrbvs	r6, [pc], #1394	; b58 <DISABLE_IRQ+0xad8>
     b54:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xc65
     b58:	085c0065 	ldmdaeq	ip, {r0, r2, r5, r6}^
     b5c:	61720000 	cmnvs	r2, r0
     b60:	65735f77 	ldrbvs	r5, [r3, #-3959]!	; 0xf77
     b64:	6870616d 	ldmdavs	r0!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     b68:	5f65726f 	svcpl	0x0065726f
     b6c:	00746567 	rsbseq	r6, r4, r7, ror #10
     b70:	000008b7 	undefined instruction 0x000008b7
     b74:	616d6573 	smcvs	54867	; 0xd653
     b78:	726f6870 	rsbvc	r6, pc, #7340032	; 0x700000
     b7c:	75705f65 	ldrbvc	r5, [r0, #-3941]!	; 0xf65
     b80:	09370074 	ldmdbeq	r7!, {r2, r4, r5, r6}
     b84:	61720000 	cmnvs	r2, r0
     b88:	65735f77 	ldrbvs	r5, [r3, #-3959]!	; 0xf77
     b8c:	6870616d 	ldmdavs	r0!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     b90:	5f65726f 	svcpl	0x0065726f
     b94:	5f747570 	svcpl	0x00747570
     b98:	006c6c61 	rsbeq	r6, ip, r1, ror #24
     b9c:	00000964 	andeq	r0, r0, r4, ror #18
     ba0:	5f776172 	svcpl	0x00776172
     ba4:	616d6573 	smcvs	54867	; 0xd653
     ba8:	726f6870 	rsbvc	r6, pc, #7340032	; 0x700000
     bac:	75705f65 	ldrbvc	r5, [r0, #-3941]!	; 0xf65
     bb0:	09910074 	ldmibeq	r1, {r2, r4, r5, r6}
     bb4:	61720000 	cmnvs	r2, r0
     bb8:	65735f77 	ldrbvs	r5, [r3, #-3959]!	; 0xf77
     bbc:	6870616d 	ldmdavs	r0!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     bc0:	5f65726f 	svcpl	0x0065726f
     bc4:	61657263 	cmnvs	r5, r3, ror #4
     bc8:	00006574 	andeq	r6, r0, r4, ror r5
     bcc:	cf000000 	svcgt	0x00000000
     bd0:	02000000 	andeq	r0, r0, #0
     bd4:	008f5000 	addeq	r5, pc, r0
     bd8:	00098300 	andeq	r8, r9, r0, lsl #6
     bdc:	0006d600 	andeq	sp, r6, r0, lsl #12
     be0:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     be4:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
     be8:	5f6d6574 	svcpl	0x006d6574
     bec:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
     bf0:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
     bf4:	0006ed00 	andeq	lr, r6, r0, lsl #26
     bf8:	6f6c6200 	svcvs	0x006c6200
     bfc:	735f6b63 	cmpvc	pc, #101376	; 0x18c00
     c00:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     c04:	736f705f 	cmnvc	pc, #95	; 0x5f
     c08:	72705f74 	rsbsvc	r5, r0, #464	; 0x1d0
     c0c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
     c10:	07440073 	smlsldxeq	r0, r4, r3, r0
     c14:	61720000 	cmnvs	r2, r0
     c18:	656d5f77 	strbvs	r5, [sp, #-3959]!	; 0xf77
     c1c:	7465736d 	strbtvc	r7, [r5], #-877	; 0x36d
     c20:	00079800 	andeq	r9, r7, r0, lsl #16
     c24:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     c28:	6d656d5f 	stclvs	13, cr6, [r5, #-380]!	; 0xfffffe84
     c2c:	00797063 	rsbseq	r7, r9, r3, rrx
     c30:	0000080d 	andeq	r0, r0, sp, lsl #16
     c34:	5f746962 	svcpl	0x00746962
     c38:	72616573 	rsbvc	r6, r1, #482344960	; 0x1cc00000
     c3c:	665f6863 	ldrbvs	r6, [pc], -r3, ror #16
     c40:	74737269 	ldrbtvc	r7, [r3], #-617	; 0x269
     c44:	656e6f5f 	strbvs	r6, [lr, #-3935]!	; 0xf5f
     c48:	00088900 	andeq	r8, r8, r0, lsl #18
     c4c:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     c50:	746e655f 	strbtvc	r6, [lr], #-1375	; 0x55f
     c54:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^
     c58:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     c5c:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
     c60:	0008b200 	andeq	fp, r8, r0, lsl #4
     c64:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     c68:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
     c6c:	5f6d6574 	svcpl	0x006d6574
     c70:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
     c74:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
     c78:	0008ed00 	andeq	lr, r8, r0, lsl #26
     c7c:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     c80:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
     c84:	69745f65 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     c88:	02006b63 	andeq	r6, r0, #101376	; 0x18c00
     c8c:	72000009 	andvc	r0, r0, #9
     c90:	665f7761 	ldrbvs	r7, [pc], -r1, ror #14
     c94:	73696e69 	cmnvc	r9, #1680	; 0x690
     c98:	6e695f68 	cdpvs	15, 6, cr5, cr9, cr8, {3}
     c9c:	00000074 	andeq	r0, r0, r4, ror r0
     ca0:	020b0000 	andeq	r0, fp, #0
     ca4:	00020000 	andeq	r0, r2, r0
     ca8:	000098d3 	ldrdeq	r9, [r0], -r3
     cac:	000011ea 	andeq	r1, r0, sl, ror #3
     cb0:	00000911 	andeq	r0, r0, r1, lsl r9
     cb4:	5f776172 	svcpl	0x00776172
     cb8:	6b736174 	blvs	1cd9290 <MEM_SIZE+0x14d9290>
     cbc:	6174735f 	cmnvs	r4, pc, asr r3
     cc0:	635f6b63 	cmpvs	pc, #101376	; 0x18c00
     cc4:	6b636568 	blvs	18da26c <MEM_SIZE+0x10da26c>
     cc8:	00096b00 	andeq	r6, r9, r0, lsl #22
     ccc:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     cd0:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
     cd4:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
     cd8:	73755f6b 	cmnvc	r5, #428	; 0x1ac
     cdc:	705f7265 	subsvc	r7, pc, r5, ror #4
     ce0:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
     ce4:	0009a800 	andeq	sl, r9, r0, lsl #16
     ce8:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     cec:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
     cf0:	64695f6b 	strbtvs	r5, [r9], #-3947	; 0xf6b
     cf4:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     cf8:	c0007966 	andgt	r7, r0, r6, ror #18
     cfc:	72000009 	andvc	r0, r0, #9
     d00:	675f7761 	ldrbvs	r7, [pc, -r1, ror #14]
     d04:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
     d08:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
     d0c:	6c675f6d 	stclvs	15, cr5, [r7], #-436	; 0xfffffe4c
     d10:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; (stclvs 2, cr6, [r1], #-444)	; 0xfffffe44
     d14:	6170735f 	cmnvs	r0, pc, asr r3
     d18:	e9006563 	stmdb	r0, {r0, r1, r5, r6, r8, sl, sp, lr}
     d1c:	72000009 	andvc	r0, r0, #9
     d20:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
     d24:	745f7465 	ldrbvc	r7, [pc], #1125	; d2c <DISABLE_IRQ+0xcac>
     d28:	5f6b7361 	svcpl	0x006b7361
     d2c:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
     d30:	696f705f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
     d34:	4000746e 	andmi	r7, r0, lr, ror #8
     d38:	7200000a 	andvc	r0, r0, #10
     d3c:	645f7761 	ldrbvs	r7, [pc], #1889	; d44 <DISABLE_IRQ+0xcc4>
     d40:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
     d44:	735f656c 	cmpvc	pc, #452984832	; 0x1b000000
     d48:	00656863 	rsbeq	r6, r5, r3, ror #16
     d4c:	00000a6b 	andeq	r0, r0, fp, ror #20
     d50:	5f776172 	svcpl	0x00776172
     d54:	5f746567 	svcpl	0x00746567
     d58:	65686373 	strbvs	r6, [r8, #-883]!	; 0x373
     d5c:	61775f64 	cmnvs	r7, r4, ror #30
     d60:	0ab60079 	beq	fed80f4c <rEINTPEND+0xa8d80ea4>
     d64:	61720000 	cmnvs	r2, r0
     d68:	65735f77 	ldrbvs	r5, [r3, #-3959]!	; 0xf77
     d6c:	63735f74 	cmnvs	r3, #464	; 0x1d0
     d70:	5f646568 	svcpl	0x00646568
     d74:	00796177 	rsbseq	r6, r9, r7, ror r1
     d78:	00000b01 	andeq	r0, r0, r1, lsl #22
     d7c:	5f776172 	svcpl	0x00776172
     d80:	6b736174 	blvs	1cd9358 <MEM_SIZE+0x14d9358>
     d84:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
     d88:	6c735f65 	ldclvs	15, cr5, [r3], #-404	; 0xfffffe6c
     d8c:	5f656369 	svcpl	0x00656369
     d90:	6e616863 	cdpvs	8, 6, cr6, cr1, cr3, {3}
     d94:	4c006567 	cfstr32mi	mvfx6, [r0], {103}	; 0x67
     d98:	7200000b 	andvc	r0, r0, #11
     d9c:	695f7761 	ldmdbvs	pc, {r0, r5, r6, r8, r9, sl, ip, sp, lr}^
     da0:	5f726574 	svcpl	0x00726574
     da4:	636f6c62 	cmnvs	pc, #25088	; 0x6200
     da8:	61745f6b 	cmnvs	r4, fp, ror #30
     dac:	d9006b73 	stmdble	r0, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
     db0:	7200000b 	andvc	r0, r0, #11
     db4:	655f7761 	ldrbvs	r7, [pc, #-1889]	; 65b <DISABLE_IRQ+0x5db>
     db8:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     dbc:	63735f65 	cmnvs	r3, #404	; 0x194
     dc0:	04006568 	streq	r6, [r0], #-1384	; 0x568
     dc4:	7200000c 	andvc	r0, r0, #12
     dc8:	745f7761 	ldrbvc	r7, [pc], #1889	; dd0 <DISABLE_IRQ+0xd50>
     dcc:	5f6b7361 	svcpl	0x006b7361
     dd0:	74696177 	strbtvc	r6, [r9], #-375	; 0x177
     dd4:	6f62615f 	svcvs	0x0062615f
     dd8:	55007472 	strpl	r7, [r0, #-1138]	; 0x472
     ddc:	7200000c 	andvc	r0, r0, #12
     de0:	745f7761 	ldrbvc	r7, [pc], #1889	; de8 <DISABLE_IRQ+0xd68>
     de4:	5f6b7361 	svcpl	0x006b7361
     de8:	656c6564 	strbvs	r6, [ip, #-1380]!	; 0x564
     dec:	c0006574 	andgt	r6, r0, r4, ror r5
     df0:	6300000c 	movwvs	r0, #12
     df4:	676e6168 	strbvs	r6, [lr, -r8, ror #2]!
     df8:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
     dfc:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
     e00:	745f6c61 	ldrbvc	r6, [pc], #3169	; e08 <DISABLE_IRQ+0xd88>
     e04:	5f6b7361 	svcpl	0x006b7361
     e08:	6f697270 	svcvs	0x00697270
     e0c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     e10:	000d0f00 	andeq	r0, sp, r0, lsl #30
     e14:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     e18:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
     e1c:	72705f6b 	rsbsvc	r5, r0, #428	; 0x1ac
     e20:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     e24:	635f7974 	cmpvs	pc, #1900544	; 0x1d0000
     e28:	676e6168 	strbvs	r6, [lr, -r8, ror #2]!
     e2c:	0d960065 	ldceq	0, cr0, [r6, #404]	; 0x194
     e30:	61740000 	cmnvs	r4, r0
     e34:	725f6b73 	subsvc	r6, pc, #117760	; 0x1cc00
     e38:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
     e3c:	0dd10065 	ldcleq	0, cr0, [r1, #404]	; 0x194
     e40:	61720000 	cmnvs	r2, r0
     e44:	61745f77 	cmnvs	r4, r7, ror pc
     e48:	725f6b73 	subsvc	r6, pc, #117760	; 0x1cc00
     e4c:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
     e50:	0e000065 	cdpeq	0, 0, cr0, cr0, cr5, {3}
     e54:	61740000 	cmnvs	r4, r0
     e58:	735f6b73 	cmpvc	pc, #117760	; 0x1cc00
     e5c:	65707375 	ldrbvs	r7, [r0, #-885]!	; 0x375
     e60:	3b00646e 	blcc	1a020 <DISABLE_IRQ+0x19fa0>
     e64:	7200000e 	andvc	r0, r0, #14
     e68:	745f7761 	ldrbvc	r7, [pc], #1889	; e70 <DISABLE_IRQ+0xdf0>
     e6c:	5f6b7361 	svcpl	0x006b7361
     e70:	70737573 	rsbsvc	r7, r3, r3, ror r5
     e74:	00646e65 	rsbeq	r6, r4, r5, ror #28
     e78:	00000e68 	andeq	r0, r0, r8, ror #28
     e7c:	5f776172 	svcpl	0x00776172
     e80:	65656c73 	strbvs	r6, [r5, #-3187]!	; 0xc73
     e84:	0eb30070 	mrceq	0, 5, r0, cr3, cr0, {3}
     e88:	61720000 	cmnvs	r2, r0
     e8c:	69745f77 	ldmdbvs	r4!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     e90:	735f656d 	cmpvc	pc, #457179136	; 0x1b400000
     e94:	7065656c 	rsbvc	r6, r5, ip, ror #10
     e98:	000f2e00 	andeq	r2, pc, r0, lsl #28
     e9c:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     ea0:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
     ea4:	72635f6b 	rsbvc	r5, r3, #428	; 0x1ac
     ea8:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0x165
     eac:	00000000 	andeq	r0, r0, r0
     eb0:	00008d00 	andeq	r8, r0, r0, lsl #26
     eb4:	bd000200 	sfmlt	f0, 4, [r0]	; (stclt 2, cr0, [r0])
     eb8:	2e0000aa 	cdpcs	0, 0, cr0, cr0, cr10, {5}
     ebc:	ae00000e 	cdpge	0, 0, cr0, cr0, cr14, {0}
     ec0:	72000009 	andvc	r0, r0, #9
     ec4:	745f7761 	ldrbvc	r7, [pc], #1889	; ecc <DISABLE_IRQ+0xe4c>
     ec8:	5f6b7361 	svcpl	0x006b7361
     ecc:	6e695f30 	mcrvs	15, 3, r5, cr9, cr0, {1}
     ed0:	da007469 	ble	1e07c <DISABLE_IRQ+0x1dffc>
     ed4:	6800000a 	stmdavs	r0, {r1, r3}
     ed8:	69726279 	ldmdbvs	r2!, {r0, r3, r4, r5, r6, r9, sp, lr}^
     edc:	6e695f64 	cdpvs	15, 6, cr5, cr9, cr4, {3}
     ee0:	72705f74 	rsbsvc	r5, r0, #464	; 0x1d0
     ee4:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
     ee8:	0bc70073 	bleq	ff1c10bc <rEINTPEND+0xa91c1014>
     eec:	61720000 	cmnvs	r2, r0
     ef0:	61745f77 	cmnvs	r4, r7, ror pc
     ef4:	305f6b73 	subscc	r6, pc, r3, ror fp
     ef8:	6f72665f 	svcvs	0x0072665f
     efc:	705f746e 	subsvc	r7, pc, lr, ror #8
     f00:	0074736f 	rsbseq	r7, r4, pc, ror #6
     f04:	00000c0d 	andeq	r0, r0, sp, lsl #24
     f08:	5f776172 	svcpl	0x00776172
     f0c:	6b736174 	blvs	1cd94e4 <MEM_SIZE+0x14d94e4>
     f10:	705f305f 	subsvc	r3, pc, pc, asr r0
     f14:	0074736f 	rsbseq	r7, r4, pc, ror #6
     f18:	00000c53 	andeq	r0, r0, r3, asr ip
     f1c:	5f746e69 	svcpl	0x00746e69
     f20:	5f67736d 	svcpl	0x0067736d
     f24:	74736f70 	ldrbtvc	r6, [r3], #-3952	; 0xf70
     f28:	000cea00 	andeq	lr, ip, r0, lsl #20
     f2c:	73617400 	cmnvc	r1, #0
     f30:	5f305f6b 	svcpl	0x00305f6b
     f34:	6b636974 	blvs	18db50c <MEM_SIZE+0x10db50c>
     f38:	736f705f 	cmnvc	pc, #95	; 0x5f
     f3c:	00000074 	andeq	r0, r0, r4, ror r0
     f40:	00d30000 	sbcseq	r0, r3, r0
     f44:	00020000 	andeq	r0, r2, r0
     f48:	0000b8eb 	andeq	fp, r0, fp, ror #17
     f4c:	000006b8 	undefined instruction 0x000006b8
     f50:	000004a1 	andeq	r0, r0, r1, lsr #9
     f54:	5f776172 	svcpl	0x00776172
     f58:	6b736174 	blvs	1cd9530 <MEM_SIZE+0x14d9530>
     f5c:	6973715f 	ldmdbvs	r3!, {r0, r1, r2, r3, r4, r6, r8, ip, sp, lr}^
     f60:	675f657a 	undefined instruction 0x675f657a
     f64:	695f7465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^
     f68:	726f666e 	rsbvc	r6, pc, #115343360	; 0x6e00000
     f6c:	6974616d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     f70:	01006e6f 	tsteq	r0, pc, ror #28
     f74:	72000005 	andvc	r0, r0, #5
     f78:	745f7761 	ldrbvc	r7, [pc], #1889	; f80 <DISABLE_IRQ+0xf00>
     f7c:	5f6b7361 	svcpl	0x006b7361
     f80:	7a697371 	bvc	1a5dd4c <MEM_SIZE+0x125dd4c>
     f84:	65645f65 	strbvs	r5, [r4, #-3941]!	; 0xf65
     f88:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0x56c
     f8c:	00052e00 	andeq	r2, r5, r0, lsl #28
     f90:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     f94:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
     f98:	73715f6b 	cmnvc	r1, #428	; 0x1ac
     f9c:	5f657a69 	svcpl	0x00657a69
     fa0:	73756c66 	cmnvc	r5, #26112	; 0x6600
     fa4:	055b0068 	ldrbeq	r0, [fp, #-104]	; 0x68
     fa8:	61720000 	cmnvs	r2, r0
     fac:	61745f77 	cmnvs	r4, r7, ror pc
     fb0:	715f6b73 	cmpvc	pc, r3, ror fp
     fb4:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
     fb8:	646e655f 	strbtvs	r6, [lr], #-1375	; 0x55f
     fbc:	736f705f 	cmnvc	pc, #95	; 0x5f
     fc0:	05a60074 	streq	r0, [r6, #116]!	; 0x74
     fc4:	61720000 	cmnvs	r2, r0
     fc8:	61745f77 	cmnvs	r4, r7, ror pc
     fcc:	715f6b73 	cmpvc	pc, r3, ror fp
     fd0:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
     fd4:	6f72665f 	svcvs	0x0072665f
     fd8:	705f746e 	subsvc	r7, pc, lr, ror #8
     fdc:	0074736f 	rsbseq	r7, r4, pc, ror #6
     fe0:	000005f1 	strdeq	r0, [r0], -r1
     fe4:	5f776172 	svcpl	0x00776172
     fe8:	6b736174 	blvs	1cd95c0 <MEM_SIZE+0x14d95c0>
     fec:	6973715f 	ldmdbvs	r3!, {r0, r1, r2, r3, r4, r6, r8, ip, sp, lr}^
     ff0:	725f657a 	subsvc	r6, pc, #511705088	; 0x1e800000
     ff4:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     ff8:	3c006576 	cfstr32cc	mvfx6, [r0], {118}	; 0x76
     ffc:	72000006 	andvc	r0, r0, #6
    1000:	745f7761 	ldrbvc	r7, [pc], #1889	; 1008 <DISABLE_IRQ+0xf88>
    1004:	5f6b7361 	svcpl	0x006b7361
    1008:	7a697371 	bvc	1a5ddd4 <MEM_SIZE+0x125ddd4>
    100c:	72635f65 	rsbvc	r5, r3, #404	; 0x194
    1010:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0x165
    1014:	00000000 	andeq	r0, r0, r0
    1018:	00009b00 	andeq	r9, r0, r0, lsl #22
    101c:	a3000200 	movwge	r0, #512	; 0x200
    1020:	cc0000bf 	stcgt	0, cr0, [r0], {191}	; 0xbf
    1024:	a1000005 	tstge	r0, r5
    1028:	72000004 	andvc	r0, r0, #4
    102c:	745f7761 	ldrbvc	r7, [pc], #1889	; 1034 <DISABLE_IRQ+0xfb4>
    1030:	5f6b7361 	svcpl	0x006b7361
    1034:	616d6573 	smcvs	54867	; 0xd653
    1038:	726f6870 	rsbvc	r6, pc, #7340032	; 0x700000
    103c:	65645f65 	strbvs	r5, [r4, #-3941]!	; 0xf65
    1040:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0x56c
    1044:	0004ce00 	andeq	ip, r4, r0, lsl #28
    1048:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    104c:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
    1050:	65735f6b 	ldrbvs	r5, [r3, #-3947]!	; 0xf6b
    1054:	6870616d 	ldmdavs	r0!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    1058:	5f65726f 	svcpl	0x0065726f
    105c:	00746573 	rsbseq	r6, r4, r3, ror r5
    1060:	0000050a 	andeq	r0, r0, sl, lsl #10
    1064:	5f776172 	svcpl	0x00776172
    1068:	6b736174 	blvs	1cd9640 <MEM_SIZE+0x14d9640>
    106c:	6d65735f 	stclvs	3, cr7, [r5, #-380]!	; 0xfffffe84
    1070:	6f687061 	svcvs	0x00687061
    1074:	675f6572 	undefined instruction 0x675f6572
    1078:	37007465 	strcc	r7, [r0, -r5, ror #8]
    107c:	72000005 	andvc	r0, r0, #5
    1080:	745f7761 	ldrbvc	r7, [pc], #1889	; 1088 <DISABLE_IRQ+0x1008>
    1084:	5f6b7361 	svcpl	0x006b7361
    1088:	616d6573 	smcvs	54867	; 0xd653
    108c:	726f6870 	rsbvc	r6, pc, #7340032	; 0x700000
    1090:	75705f65 	ldrbvc	r5, [r0, #-3941]!	; 0xf65
    1094:	05640074 	strbeq	r0, [r4, #-116]!	; 0x74
    1098:	61720000 	cmnvs	r2, r0
    109c:	61745f77 	cmnvs	r4, r7, ror pc
    10a0:	735f6b73 	cmpvc	pc, #117760	; 0x1cc00
    10a4:	70616d65 	rsbvc	r6, r1, r5, ror #26
    10a8:	65726f68 	ldrbvs	r6, [r2, #-3944]!	; 0xf68
    10ac:	6572635f 	ldrbvs	r6, [r2, #-863]!	; 0x35f
    10b0:	00657461 	rsbeq	r7, r5, r1, ror #8
    10b4:	00000000 	andeq	r0, r0, r0
    10b8:	00000074 	andeq	r0, r0, r4, ror r0
    10bc:	c56f0002 	strbgt	r0, [pc, #-2]!	; 10c2 <DISABLE_IRQ+0x1042>
    10c0:	0b4f0000 	bleq	13c10c8 <MEM_SIZE+0xbc10c8>
    10c4:	07ed0000 	strbeq	r0, [sp, r0]!
    10c8:	69740000 	ldmdbvs	r4!, {}^
    10cc:	6c5f6b63 	mrrcvs	11, 6, r6, pc, cr3
    10d0:	5f747369 	svcpl	0x00747369
    10d4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    10d8:	00082300 	andeq	r2, r8, r0, lsl #6
    10dc:	63697400 	cmnvs	r9, #0
    10e0:	696c5f6b 	stmdbvs	ip!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    10e4:	695f7473 	ldmdbvs	pc, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    10e8:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
    10ec:	08c60074 	stmiaeq	r6, {r2, r4, r5, r6}^
    10f0:	69740000 	ldmdbvs	r4!, {}^
    10f4:	6c5f6b63 	mrrcvs	11, 6, r6, pc, cr3
    10f8:	5f747369 	svcpl	0x00747369
    10fc:	6f6d6572 	svcvs	0x006d6572
    1100:	fb006576 	blx	1a6e2 <DISABLE_IRQ+0x1a662>
    1104:	74000008 	strvc	r0, [r0], #-8
    1108:	5f6b6369 	svcpl	0x006b6369
    110c:	6b736174 	blvs	1cd96e4 <MEM_SIZE+0x14d96e4>
    1110:	6174735f 	cmnvs	r4, pc, asr r3
    1114:	11007472 	tstne	r0, r2, ror r4
    1118:	74000009 	strvc	r0, [r0], #-9
    111c:	5f6b6369 	svcpl	0x006b6369
    1120:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
    1124:	6470755f 	ldrbtvs	r7, [r0], #-1375	; 0x55f
    1128:	00657461 	rsbeq	r7, r5, r1, ror #8
    112c:	00000000 	andeq	r0, r0, r0
    1130:	000000b3 	strheq	r0, [r0], -r3
    1134:	d0be0002 	adcsle	r0, lr, r2
    1138:	0c840000 	stceq	0, cr0, [r4], {0}
    113c:	08450000 	stmdaeq	r5, {}^
    1140:	61720000 	cmnvs	r2, r0
    1144:	69745f77 	ldmdbvs	r4!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1148:	5f72656d 	svcpl	0x0072656d
    114c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    1150:	00089500 	andeq	r9, r8, r0, lsl #10
    1154:	6c616300 	stclvs	3, cr6, [r1]
    1158:	69745f6c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    115c:	5f72656d 	svcpl	0x0072656d
    1160:	6b736174 	blvs	1cd9738 <MEM_SIZE+0x14d9738>
    1164:	0008ab00 	andeq	sl, r8, r0, lsl #22
    1168:	6d697400 	cfstrdvs	mvd7, [r9]
    116c:	745f7265 	ldrbvc	r7, [pc], #613	; 1174 <DISABLE_IRQ+0x10f4>
    1170:	006b7361 	rsbeq	r7, fp, r1, ror #6
    1174:	000009b1 	undefined instruction 0x000009b1
    1178:	5f776172 	svcpl	0x00776172
    117c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    1180:	65645f72 	strbvs	r5, [r4, #-3954]!	; 0xf72
    1184:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0x56c
    1188:	000a1600 	andeq	r1, sl, r0, lsl #12
    118c:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1190:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    1194:	645f7265 	ldrbvs	r7, [pc], #613	; 119c <DISABLE_IRQ+0x111c>
    1198:	74636165 	strbtvc	r6, [r3], #-357	; 0x165
    119c:	74617669 	strbtvc	r7, [r1], #-1641	; 0x669
    11a0:	0a7f0065 	beq	1fc133c <MEM_SIZE+0x17c133c>
    11a4:	61720000 	cmnvs	r2, r0
    11a8:	69745f77 	ldmdbvs	r4!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    11ac:	5f72656d 	svcpl	0x0072656d
    11b0:	6e616863 	cdpvs	8, 6, cr6, cr1, cr3, {3}
    11b4:	ce006567 	cfsh32gt	mvfx6, mvfx0, #55
    11b8:	7200000a 	andvc	r0, r0, #10
    11bc:	745f7761 	ldrbvc	r7, [pc], #1889	; 11c4 <DISABLE_IRQ+0x1144>
    11c0:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    11c4:	7463615f 	strbtvc	r6, [r3], #-351	; 0x15f
    11c8:	74617669 	strbtvc	r7, [r1], #-1641	; 0x669
    11cc:	0b6c0065 	bleq	1b01368 <MEM_SIZE+0x1301368>
    11d0:	61720000 	cmnvs	r2, r0
    11d4:	69745f77 	ldmdbvs	r4!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    11d8:	5f72656d 	svcpl	0x0072656d
    11dc:	61657263 	cmnvs	r5, r3, ror #4
    11e0:	00006574 	andeq	r6, r0, r4, ror r5
    11e4:	1c000000 	stcne	0, cr0, [r0], {0}
    11e8:	02000000 	andeq	r0, r0, #0
    11ec:	00dd4200 	sbcseq	r4, sp, r0, lsl #4
    11f0:	00058400 	andeq	r8, r5, r0, lsl #8
    11f4:	00048500 	andeq	r8, r4, r0, lsl #10
    11f8:	73657400 	cmnvc	r5, #0
    11fc:	61745f74 	cmnvs	r4, r4, ror pc
    1200:	00006b73 	andeq	r6, r0, r3, ror fp
    1204:	1b000000 	blne	120c <DISABLE_IRQ+0x118c>
    1208:	02000000 	andeq	r0, r0, #0
    120c:	00e2c600 	rsceq	ip, r2, r0, lsl #12
    1210:	00056600 	andeq	r6, r5, r0, lsl #12
    1214:	00049000 	andeq	r9, r4, r0
    1218:	73657400 	cmnvc	r5, #0
    121c:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xf74
    1220:	0000006d 	andeq	r0, r0, sp, rrx
    1224:	001d0000 	andseq	r0, sp, r0
    1228:	00020000 	andeq	r0, r2, r0
    122c:	0000e82c 	andeq	lr, r0, ip, lsr #16
    1230:	00000577 	andeq	r0, r0, r7, ror r5
    1234:	00000490 	muleq	r0, r0, r4
    1238:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
    123c:	74756d5f 	ldrbtvc	r6, [r5], #-3423	; 0xd5f
    1240:	00007865 	andeq	r7, r0, r5, ror #16
    1244:	1d000000 	stcne	0, cr0, [r0]
    1248:	02000000 	andeq	r0, r0, #0
    124c:	00eda300 	rsceq	sl, sp, r0, lsl #6
    1250:	00061000 	andeq	r1, r6, r0
    1254:	00054900 	andeq	r4, r5, r0, lsl #18
    1258:	73657400 	cmnvc	r5, #0
    125c:	69745f74 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1260:	0072656d 	rsbseq	r6, r2, sp, ror #10
    1264:	00000000 	andeq	r0, r0, r0
    1268:	0000001d 	andeq	r0, r0, sp, lsl r0
    126c:	f3b30002 	vaddl.u<illegal width 64>	q0, d3, d2
    1270:	07540000 	ldrbeq	r0, [r4, -r0]
    1274:	067a0000 	ldrbteq	r0, [sl], -r0
    1278:	65740000 	ldrbvs	r0, [r4]!
    127c:	625f7473 	subsvs	r7, pc, #1929379840	; 0x73000000
    1280:	6b636f6c 	blvs	18dd038 <MEM_SIZE+0x10dd038>
    1284:	00000000 	andeq	r0, r0, r0
    1288:	00001c00 	andeq	r1, r0, r0, lsl #24
    128c:	07000200 	streq	r0, [r0, -r0, lsl #4]
    1290:	570000fb 	undefined instruction 0x570000fb
    1294:	88000007 	stmdahi	r0, {r0, r1, r2}
    1298:	74000006 	strvc	r0, [r0], #-6
    129c:	5f747365 	svcpl	0x00747365
    12a0:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
    12a4:	00000000 	andeq	r0, r0, r0
    12a8:	0000c000 	andeq	ip, r0, r0
    12ac:	5e000200 	cdppl	2, 0, cr0, cr0, cr0, {0}
    12b0:	9d000102 	stflss	f0, [r0, #-8]
    12b4:	a6000001 	strge	r0, [r0], -r1
    12b8:	70000000 	andvc	r0, r0, r0
    12bc:	5f74726f 	svcpl	0x0074726f
    12c0:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    12c4:	6e695f6b 	cdpvs	15, 6, cr5, cr9, cr11, {3}
    12c8:	1e007469 	cdpne	4, 0, cr7, cr0, cr9, {3}
    12cc:	72000001 	andvc	r0, r0, #1
    12d0:	745f7761 	ldrbvc	r7, [pc], #1889	; 12d8 <DISABLE_IRQ+0x1258>
    12d4:	5f6b6369 	svcpl	0x006b6369
    12d8:	6b6f6f68 	blvs	1bdd080 <MEM_SIZE+0x13dd080>
    12dc:	00013000 	andeq	r3, r1, r0
    12e0:	73617400 	cmnvc	r1, #0
    12e4:	72635f6b 	rsbvc	r5, r3, #428	; 0x1ac
    12e8:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0x165
    12ec:	6f6f685f 	svcvs	0x006f685f
    12f0:	0142006b 	cmpeq	r2, fp, rrx
    12f4:	61720000 	cmnvs	r2, r0
    12f8:	736f5f77 	cmnvc	pc, #476	; 0x1dc
    12fc:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1300:	6f685f74 	svcvs	0x00685f74
    1304:	54006b6f 	strpl	r6, [r0], #-2927	; 0xb6f
    1308:	72000001 	andvc	r0, r0, #1
    130c:	745f7761 	ldrbvc	r7, [pc], #1889	; 1314 <DISABLE_IRQ+0x1294>
    1310:	5f6b7361 	svcpl	0x006b7361
    1314:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    1318:	6f685f74 	svcvs	0x00685f74
    131c:	66006b6f 	strvs	r6, [r0], -pc, ror #22
    1320:	72000001 	andvc	r0, r0, #1
    1324:	745f7761 	ldrbvc	r7, [pc], #1889	; 132c <DISABLE_IRQ+0x12ac>
    1328:	5f6b7361 	svcpl	0x006b7361
    132c:	656c6564 	strbvs	r6, [ip, #-1380]!	; 0x564
    1330:	685f6574 	ldmdavs	pc, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1334:	006b6f6f 	rsbeq	r6, fp, pc, ror #30
    1338:	00000178 	andeq	r0, r0, r8, ror r1
    133c:	5f776172 	svcpl	0x00776172
    1340:	656c6469 	strbvs	r6, [ip, #-1129]!	; 0x469
    1344:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    1348:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
    134c:	685f656e 	ldmdavs	pc, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
    1350:	006b6f6f 	rsbeq	r6, fp, pc, ror #30
    1354:	0000018a 	andeq	r0, r0, sl, lsl #3
    1358:	6b736174 	blvs	1cd9930 <MEM_SIZE+0x14d9930>
    135c:	6977735f 	ldmdbvs	r7!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    1360:	5f686374 	svcpl	0x00686374
    1364:	6b6f6f68 	blvs	1bdd10c <MEM_SIZE+0x13dd10c>
    1368:	00000000 	andeq	r0, r0, r0
    136c:	00061c00 	andeq	r1, r6, r0, lsl #24
    1370:	fb000200 	blx	1b7a <DISABLE_IRQ+0x1afa>
    1374:	0b000103 	bleq	1788 <DISABLE_IRQ+0x1708>
    1378:	36000015 	undefined instruction 0x36000015
    137c:	5f000007 	svcpl	0x00000007
    1380:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    1384:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
    1388:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    138c:	5f000007 	svcpl	0x00000007
    1390:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    1394:	61745f65 	cmnvs	r4, r5, ror #30
    1398:	735f6b73 	cmpvc	pc, #117760	; 0x1cc00
    139c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
    13a0:	077a0068 	ldrbeq	r0, [sl, -r8, rrx]!
    13a4:	745f0000 	ldrbvc	r0, [pc], #0	; 13ac <DISABLE_IRQ+0x132c>
    13a8:	65636172 	strbvs	r6, [r3, #-370]!	; 0x172
    13ac:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
    13b0:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
    13b4:	77735f6b 	ldrbvc	r5, [r3, -fp, ror #30]!
    13b8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    13bc:	0007ab00 	andeq	sl, r7, r0, lsl #22
    13c0:	72745f00 	rsbsvc	r5, r4, #0
    13c4:	5f656361 	svcpl	0x00656361
    13c8:	6b736174 	blvs	1cd99a0 <MEM_SIZE+0x14d99a0>
    13cc:	6572635f 	ldrbvs	r6, [r2, #-863]!	; 0x35f
    13d0:	00657461 	rsbeq	r7, r5, r1, ror #8
    13d4:	000007d0 	ldrdeq	r0, [r0], -r0
    13d8:	6172745f 	cmnvs	r2, pc, asr r4
    13dc:	745f6563 	ldrbvc	r6, [pc], #1379	; 13e4 <DISABLE_IRQ+0x1364>
    13e0:	5f6b7361 	svcpl	0x006b7361
    13e4:	6f697270 	svcvs	0x00697270
    13e8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    13ec:	6168635f 	cmnvs	r8, pc, asr r3
    13f0:	0065676e 	rsbeq	r6, r5, lr, ror #14
    13f4:	00000802 	andeq	r0, r0, r2, lsl #16
    13f8:	6172745f 	cmnvs	r2, pc, asr r4
    13fc:	745f6563 	ldrbvc	r6, [pc], #1379	; 1404 <DISABLE_IRQ+0x1384>
    1400:	5f6b7361 	svcpl	0x006b7361
    1404:	70737573 	rsbsvc	r7, r3, r3, ror r5
    1408:	00646e65 	rsbeq	r6, r4, r5, ror #28
    140c:	00000834 	andeq	r0, r0, r4, lsr r8
    1410:	6172745f 	cmnvs	r2, pc, asr r4
    1414:	745f6563 	ldrbvc	r6, [pc], #1379	; 141c <DISABLE_IRQ+0x139c>
    1418:	5f6b7361 	svcpl	0x006b7361
    141c:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0x572
    1420:	6600656d 	strvs	r6, [r0], -sp, ror #10
    1424:	5f000008 	svcpl	0x00000008
    1428:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    142c:	61745f65 	cmnvs	r4, r5, ror #30
    1430:	645f6b73 	ldrbvs	r6, [pc], #2931	; 1438 <DISABLE_IRQ+0x13b8>
    1434:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xc65
    1438:	088b0065 	stmeq	fp, {r0, r2, r5, r6}
    143c:	745f0000 	ldrbvc	r0, [pc], #0	; 1444 <DISABLE_IRQ+0x13c4>
    1440:	65636172 	strbvs	r6, [r3, #-370]!	; 0x172
    1444:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
    1448:	62615f6b 	rsbvs	r5, r1, #428	; 0x1ac
    144c:	0074726f 	rsbseq	r7, r4, pc, ror #4
    1450:	000008b0 	undefined instruction 0x000008b0
    1454:	6172745f 	cmnvs	r2, pc, asr r4
    1458:	745f6563 	ldrbvc	r6, [pc], #1379	; 1460 <DISABLE_IRQ+0x13e0>
    145c:	5f6b7361 	svcpl	0x006b7361
    1460:	766f5f30 	uqaddsubxvc	r5, pc, r0
    1464:	6c667265 	sfmvs	f7, 2, [r6], #-404	; (stclvs 2, cr7, [r6], #-404)	; 0xfffffe6c
    1468:	ec00776f 	stc	7, cr7, [r0], {111}	; 0x6f
    146c:	5f000008 	svcpl	0x00000008
    1470:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    1474:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
    1478:	736d5f74 	cmnvc	sp, #464	; 0x1d0
    147c:	78655f67 	stmdavc	r5!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    1480:	73756168 	cmnvc	r5, #26
    1484:	00646574 	rsbeq	r6, r4, r4, ror r5
    1488:	000008ff 	strdeq	r0, [r0], -pc
    148c:	6172745f 	cmnvs	r2, pc, asr r4
    1490:	695f6563 	ldmdbvs	pc, {r0, r1, r5, r6, r8, sl, sp, lr}^
    1494:	6d5f746e 	cfldrdvs	mvd7, [pc, #-440]	; 0xfffffe48
    1498:	705f6773 	subsvc	r6, pc, r3, ror r7
    149c:	0074736f 	rsbseq	r7, r4, pc, ror #6
    14a0:	00000967 	andeq	r0, r0, r7, ror #18
    14a4:	6172745f 	cmnvs	r2, pc, asr r4
    14a8:	735f6563 	cmpvc	pc, #415236096	; 0x18c00000
    14ac:	70616d65 	rsbvc	r6, r1, r5, ror #26
    14b0:	65726f68 	ldrbvs	r6, [r2, #-3944]!	; 0xf68
    14b4:	6572635f 	ldrbvs	r6, [r2, #-863]!	; 0x35f
    14b8:	00657461 	rsbeq	r7, r5, r1, ror #8
    14bc:	00000999 	muleq	r0, r9, r9
    14c0:	6172745f 	cmnvs	r2, pc, asr r4
    14c4:	735f6563 	cmpvc	pc, #415236096	; 0x18c00000
    14c8:	70616d65 	rsbvc	r6, r1, r5, ror #26
    14cc:	65726f68 	ldrbvs	r6, [r2, #-3944]!	; 0xf68
    14d0:	65766f5f 	ldrbvs	r6, [r6, #-3935]!	; 0xf5f
    14d4:	6f6c6672 	svcvs	0x006c6672
    14d8:	09cb0077 	stmibeq	fp, {r0, r1, r2, r4, r5, r6}^
    14dc:	745f0000 	ldrbvc	r0, [pc], #0	; 14e4 <DISABLE_IRQ+0x1464>
    14e0:	65636172 	strbvs	r6, [r3, #-370]!	; 0x172
    14e4:	6d65735f 	stclvs	3, cr7, [r5, #-380]!	; 0xfffffe84
    14e8:	6f687061 	svcvs	0x00687061
    14ec:	645f6572 	ldrbvs	r6, [pc], #1394	; 14f4 <DISABLE_IRQ+0x1474>
    14f0:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xc65
    14f4:	09fd0065 	ldmibeq	sp!, {r0, r2, r5, r6}^
    14f8:	745f0000 	ldrbvc	r0, [pc], #0	; 1500 <DISABLE_IRQ+0x1480>
    14fc:	65636172 	strbvs	r6, [r3, #-370]!	; 0x172
    1500:	6d65735f 	stclvs	3, cr7, [r5, #-380]!	; 0xfffffe84
    1504:	6f687061 	svcvs	0x00687061
    1508:	675f6572 	undefined instruction 0x675f6572
    150c:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
    1510:	65636375 	strbvs	r6, [r3, #-885]!	; 0x375
    1514:	2f007373 	svccs	0x00007373
    1518:	5f00000a 	svcpl	0x0000000a
    151c:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    1520:	65735f65 	ldrbvs	r5, [r3, #-3941]!	; 0xf65
    1524:	6870616d 	ldmdavs	r0!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    1528:	5f65726f 	svcpl	0x0065726f
    152c:	5f746567 	svcpl	0x00746567
    1530:	636f6c62 	cmnvs	pc, #25088	; 0x6200
    1534:	0a6e006b 	beq	1b816e8 <MEM_SIZE+0x13816e8>
    1538:	745f0000 	ldrbvc	r0, [pc], #0	; 1540 <DISABLE_IRQ+0x14c0>
    153c:	65636172 	strbvs	r6, [r3, #-370]!	; 0x172
    1540:	6d65735f 	stclvs	3, cr7, [r5, #-380]!	; 0xfffffe84
    1544:	6b61775f 	blvs	185f2c8 <MEM_SIZE+0x105f2c8>
    1548:	61745f65 	cmnvs	r4, r5, ror #30
    154c:	ad006b73 	vstrge	d6, [r0, #-460]	; 0xfffffe34
    1550:	5f00000a 	svcpl	0x0000000a
    1554:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    1558:	65735f65 	ldrbvs	r5, [r3, #-3941]!	; 0xf65
    155c:	6870616d 	ldmdavs	r0!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    1560:	5f65726f 	svcpl	0x0065726f
    1564:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    1568:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    156c:	61657263 	cmnvs	r5, r3, ror #4
    1570:	df006573 	svcle	0x00006573
    1574:	5f00000a 	svcpl	0x0000000a
    1578:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    157c:	75715f65 	ldrbvc	r5, [r1, #-3941]!	; 0xf65
    1580:	5f657565 	svcpl	0x00657565
    1584:	61657263 	cmnvs	r5, r3, ror #4
    1588:	11006574 	tstne	r0, r4, ror r5
    158c:	5f00000b 	svcpl	0x0000000b
    1590:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    1594:	75715f65 	ldrbvc	r5, [r1, #-3941]!	; 0xf65
    1598:	5f657565 	svcpl	0x00657565
    159c:	5f67736d 	svcpl	0x0067736d
    15a0:	74736f70 	ldrbtvc	r6, [r3], #-3952	; 0xf70
    15a4:	000b5d00 	andeq	r5, fp, r0, lsl #26
    15a8:	72745f00 	rsbsvc	r5, r4, #0
    15ac:	5f656361 	svcpl	0x00656361
    15b0:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    15b4:	61775f65 	cmnvs	r7, r5, ror #30
    15b8:	745f656b 	ldrbvc	r6, [pc], #1387	; 15c0 <DISABLE_IRQ+0x1540>
    15bc:	006b7361 	rsbeq	r7, fp, r1, ror #6
    15c0:	00000ba9 	andeq	r0, r0, r9, lsr #23
    15c4:	6172745f 	cmnvs	r2, pc, asr r4
    15c8:	715f6563 	cmpvc	pc, r3, ror #10
    15cc:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    15d0:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
    15d4:	67736d5f 	undefined instruction 0x67736d5f
    15d8:	000bf500 	andeq	pc, fp, r0, lsl #10
    15dc:	72745f00 	rsbsvc	r5, r4, #0
    15e0:	5f656361 	svcpl	0x00656361
    15e4:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    15e8:	736d5f65 	cmnvc	sp, #404	; 0x194
    15ec:	616d5f67 	cmnvs	sp, r7, ror #30
    15f0:	0c410078 	mcrreq	0, 7, r0, r1, cr8
    15f4:	745f0000 	ldrbvc	r0, [pc], #0	; 15fc <DISABLE_IRQ+0x157c>
    15f8:	65636172 	strbvs	r6, [r3, #-370]!	; 0x172
    15fc:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
    1600:	675f6575 	undefined instruction 0x675f6575
    1604:	625f7465 	subsvs	r7, pc, #1694498816	; 0x65000000
    1608:	6b636f6c 	blvs	18dd3c0 <MEM_SIZE+0x10dd3c0>
    160c:	000c8000 	andeq	r8, ip, r0
    1610:	72745f00 	rsbsvc	r5, r4, #0
    1614:	5f656361 	svcpl	0x00656361
    1618:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    161c:	6c665f65 	stclvs	15, cr5, [r6], #-404	; 0xfffffe6c
    1620:	00687375 	rsbeq	r7, r8, r5, ror r3
    1624:	00000cb2 	undefined instruction 0x00000cb2
    1628:	6172745f 	cmnvs	r2, pc, asr r4
    162c:	715f6563 	cmpvc	pc, r3, ror #10
    1630:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1634:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
    1638:	00657465 	rsbeq	r7, r5, r5, ror #8
    163c:	00000ce4 	andeq	r0, r0, r4, ror #25
    1640:	6172745f 	cmnvs	r2, pc, asr r4
    1644:	6d5f6563 	cfldr64vs	mvdx6, [pc, #-396]	; 0xfffffe74
    1648:	78657475 	stmdavc	r5!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
    164c:	6572635f 	ldrbvs	r6, [r2, #-863]!	; 0x35f
    1650:	00657461 	rsbeq	r7, r5, r1, ror #8
    1654:	00000d44 	andeq	r0, r0, r4, asr #26
    1658:	6172745f 	cmnvs	r2, pc, asr r4
    165c:	6d5f6563 	cfldr64vs	mvdx6, [pc, #-396]	; 0xfffffe74
    1660:	78657475 	stmdavc	r5!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
    1664:	6c65725f 	sfmvs	f7, 2, [r5], #-380	; (stclvs 2, cr7, [r5], #-380)	; 0xfffffe84
    1668:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
    166c:	000d8300 	andeq	r8, sp, r0, lsl #6
    1670:	72745f00 	rsbsvc	r5, r4, #0
    1674:	5f656361 	svcpl	0x00656361
    1678:	6574756d 	ldrbvs	r7, [r4, #-1389]!	; 0x56d
    167c:	78655f78 	stmdavc	r5!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1680:	5f65635f 	svcpl	0x0065635f
    1684:	00697270 	rsbeq	r7, r9, r0, ror r2
    1688:	00000dc2 	andeq	r0, r0, r2, asr #27
    168c:	6172745f 	cmnvs	r2, pc, asr r4
    1690:	6d5f6563 	cfldr64vs	mvdx6, [pc, #-396]	; 0xfffffe74
    1694:	78657475 	stmdavc	r5!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
    1698:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
    169c:	000e0100 	andeq	r0, lr, r0, lsl #2
    16a0:	72745f00 	rsbsvc	r5, r4, #0
    16a4:	5f656361 	svcpl	0x00656361
    16a8:	6b736174 	blvs	1cd9c80 <MEM_SIZE+0x14d9c80>
    16ac:	6972705f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    16b0:	766e695f 	undefined instruction 0x766e695f
    16b4:	000e3300 	andeq	r3, lr, r0, lsl #6
    16b8:	72745f00 	rsbsvc	r5, r4, #0
    16bc:	5f656361 	svcpl	0x00656361
    16c0:	6574756d 	ldrbvs	r7, [r4, #-1389]!	; 0x56d
    16c4:	65675f78 	strbvs	r5, [r7, #-3960]!	; 0xf78
    16c8:	6c625f74 	stclvs	15, cr5, [r2], #-464	; 0xfffffe30
    16cc:	006b636f 	rsbeq	r6, fp, pc, ror #6
    16d0:	00000e72 	andeq	r0, r0, r2, ror lr
    16d4:	6172745f 	cmnvs	r2, pc, asr r4
    16d8:	6d5f6563 	cfldr64vs	mvdx6, [pc, #-396]	; 0xfffffe74
    16dc:	78657475 	stmdavc	r5!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
    16e0:	6c65725f 	sfmvs	f7, 2, [r5], #-380	; (stclvs 2, cr7, [r5], #-380)	; 0xfffffe84
    16e4:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
    16e8:	6375735f 	cmnvs	r5, #2080374785	; 0x7c000001
    16ec:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    16f0:	000ea400 	andeq	sl, lr, r0, lsl #8
    16f4:	72745f00 	rsbsvc	r5, r4, #0
    16f8:	5f656361 	svcpl	0x00656361
    16fc:	6574756d 	ldrbvs	r7, [r4, #-1389]!	; 0x56d
    1700:	61775f78 	cmnvs	r7, r8, ror pc
    1704:	745f656b 	ldrbvc	r6, [pc], #1387	; 170c <DISABLE_IRQ+0x168c>
    1708:	006b7361 	rsbeq	r7, fp, r1, ror #6
    170c:	00000ed6 	ldrdeq	r0, [r0], -r6
    1710:	6172745f 	cmnvs	r2, pc, asr r4
    1714:	6d5f6563 	cfldr64vs	mvdx6, [pc, #-396]	; 0xfffffe74
    1718:	78657475 	stmdavc	r5!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
    171c:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
    1720:	00657465 	rsbeq	r7, r5, r5, ror #8
    1724:	00000f08 	andeq	r0, r0, r8, lsl #30
    1728:	6172745f 	cmnvs	r2, pc, asr r4
    172c:	745f6563 	ldrbvc	r6, [pc], #1379	; 1734 <DISABLE_IRQ+0x16b4>
    1730:	5f6b7361 	svcpl	0x006b7361
    1734:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    1738:	70735f6b 	rsbsvc	r5, r3, fp, ror #30
    173c:	00656361 	rsbeq	r6, r5, r1, ror #6
    1740:	00000f2d 	andeq	r0, r0, sp, lsr #30
    1744:	6172745f 	cmnvs	r2, pc, asr r4
    1748:	625f6563 	subsvs	r6, pc, #415236096	; 0x18c00000
    174c:	6b636f6c 	blvs	18dd504 <MEM_SIZE+0x10dd504>
    1750:	5f6f6e5f 	svcpl	0x006f6e5f
    1754:	6f6d656d 	svcvs	0x006d656d
    1758:	65007972 	strvs	r7, [r0, #-2418]	; 0x972
    175c:	5f00000f 	svcpl	0x0000000f
    1760:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    1764:	6c625f65 	stclvs	15, cr5, [r2], #-404	; 0xfffffe6c
    1768:	5f6b636f 	svcpl	0x006b636f
    176c:	6c6f6f70 	stclvs	15, cr6, [pc], #-448	; 0xfffffe40
    1770:	6572635f 	ldrbvs	r6, [r2, #-863]!	; 0x35f
    1774:	00657461 	rsbeq	r7, r5, r1, ror #8
    1778:	00000f97 	muleq	r0, r7, pc
    177c:	6172745f 	cmnvs	r2, pc, asr r4
    1780:	625f6563 	subsvs	r6, pc, #415236096	; 0x18c00000
    1784:	5f657479 	svcpl	0x00657479
    1788:	6d5f6f6e 	ldclvs	15, cr6, [pc, #-440]	; 0xfffffe48
    178c:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    1790:	0fcf0079 	svceq	0x00cf0079
    1794:	745f0000 	ldrbvc	r0, [pc], #0	; 179c <DISABLE_IRQ+0x171c>
    1798:	65636172 	strbvs	r6, [r3, #-370]!	; 0x172
    179c:	6576655f 	ldrbvs	r6, [r6, #-1375]!	; 0x55f
    17a0:	635f746e 	cmpvs	pc, #1845493760	; 0x6e000000
    17a4:	74616572 	strbtvc	r6, [r1], #-1394	; 0x572
    17a8:	10260065 	eorne	r0, r6, r5, rrx
    17ac:	745f0000 	ldrbvc	r0, [pc], #0	; 17b4 <DISABLE_IRQ+0x1734>
    17b0:	65636172 	strbvs	r6, [r3, #-370]!	; 0x172
    17b4:	6576655f 	ldrbvs	r6, [r6, #-1375]!	; 0x55f
    17b8:	675f746e 	ldrbvs	r7, [pc, -lr, ror #8]
    17bc:	5b007465 	blpl	1e958 <DISABLE_IRQ+0x1e8d8>
    17c0:	5f000010 	svcpl	0x00000010
    17c4:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    17c8:	76655f65 	strbtvc	r5, [r5], -r5, ror #30
    17cc:	5f746e65 	svcpl	0x00746e65
    17d0:	5f746567 	svcpl	0x00746567
    17d4:	636f6c62 	cmnvs	pc, #25088	; 0x6200
    17d8:	109e006b 	addsne	r0, lr, fp, rrx
    17dc:	745f0000 	ldrbvc	r0, [pc], #0	; 17e4 <DISABLE_IRQ+0x1764>
    17e0:	65636172 	strbvs	r6, [r3, #-370]!	; 0x172
    17e4:	6576655f 	ldrbvs	r6, [r6, #-1375]!	; 0x55f
    17e8:	775f746e 	ldrbvc	r7, [pc, -lr, ror #8]
    17ec:	00656b61 	rsbeq	r6, r5, r1, ror #22
    17f0:	000010d3 	ldrdeq	r1, [r0], -r3
    17f4:	6172745f 	cmnvs	r2, pc, asr r4
    17f8:	655f6563 	ldrbvs	r6, [pc, #-1379]	; 129d <DISABLE_IRQ+0x121d>
    17fc:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
    1800:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
    1804:	00657465 	rsbeq	r7, r5, r5, ror #8
    1808:	00001108 	andeq	r1, r0, r8, lsl #2
    180c:	6172745f 	cmnvs	r2, pc, asr r4
    1810:	715f6563 	cmpvc	pc, r3, ror #10
    1814:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1818:	7a69735f 	bvc	1a5e59c <MEM_SIZE+0x125e59c>
    181c:	72635f65 	rsbvc	r5, r3, #404	; 0x194
    1820:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0x165
    1824:	00114300 	andseq	r4, r1, r0, lsl #6
    1828:	72745f00 	rsbsvc	r5, r4, #0
    182c:	5f656361 	svcpl	0x00656361
    1830:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    1834:	69735f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    1838:	6d5f657a 	cfldr64vs	mvdx6, [pc, #-488]	; 0xfffffe18
    183c:	6d5f6773 	ldclvs	7, cr6, [pc, #-460]	; 0xfffffe34
    1840:	a3007861 	movwge	r7, #2145	; 0x861
    1844:	5f000011 	svcpl	0x00000011
    1848:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    184c:	75715f65 	ldrbvc	r5, [r1, #-3941]!	; 0xf65
    1850:	5f657565 	svcpl	0x00657565
    1854:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    1858:	67736d5f 	undefined instruction 0x67736d5f
    185c:	736f705f 	cmnvc	pc, #95	; 0x5f
    1860:	12030074 	andne	r0, r3, #116	; 0x74
    1864:	745f0000 	ldrbvc	r0, [pc], #0	; 186c <DISABLE_IRQ+0x17ec>
    1868:	65636172 	strbvs	r6, [r3, #-370]!	; 0x172
    186c:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
    1870:	735f6575 	cmpvc	pc, #490733568	; 0x1d400000
    1874:	5f657a69 	svcpl	0x00657a69
    1878:	656b6177 	strbvs	r6, [fp, #-375]!	; 0x177
    187c:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
    1880:	1263006b 	rsbne	r0, r3, #107	; 0x6b
    1884:	745f0000 	ldrbvc	r0, [pc], #0	; 188c <DISABLE_IRQ+0x180c>
    1888:	65636172 	strbvs	r6, [r3, #-370]!	; 0x172
    188c:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
    1890:	735f6575 	cmpvc	pc, #490733568	; 0x1d400000
    1894:	5f657a69 	svcpl	0x00657a69
    1898:	5f746567 	svcpl	0x00746567
    189c:	0067736d 	rsbeq	r7, r7, sp, ror #6
    18a0:	000012c3 	andeq	r1, r0, r3, asr #5
    18a4:	6172745f 	cmnvs	r2, pc, asr r4
    18a8:	715f6563 	cmpvc	pc, r3, ror #10
    18ac:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    18b0:	7a69735f 	bvc	1a5e634 <MEM_SIZE+0x125e634>
    18b4:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xf65
    18b8:	6c625f74 	stclvs	15, cr5, [r2], #-464	; 0xfffffe30
    18bc:	006b636f 	rsbeq	r6, fp, pc, ror #6
    18c0:	00001306 	andeq	r1, r0, r6, lsl #6
    18c4:	6172745f 	cmnvs	r2, pc, asr r4
    18c8:	715f6563 	cmpvc	pc, r3, ror #10
    18cc:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    18d0:	7a69735f 	bvc	1a5e654 <MEM_SIZE+0x125e654>
    18d4:	6c665f65 	stclvs	15, cr5, [r6], #-404	; 0xfffffe6c
    18d8:	00687375 	rsbeq	r7, r8, r5, ror r3
    18dc:	0000133b 	andeq	r1, r0, fp, lsr r3
    18e0:	6172745f 	cmnvs	r2, pc, asr r4
    18e4:	715f6563 	cmpvc	pc, r3, ror #10
    18e8:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    18ec:	7a69735f 	bvc	1a5e670 <MEM_SIZE+0x125e670>
    18f0:	65645f65 	strbvs	r5, [r4, #-3941]!	; 0xf65
    18f4:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0x56c
    18f8:	00137000 	andseq	r7, r3, r0
    18fc:	72745f00 	rsbsvc	r5, r4, #0
    1900:	5f656361 	svcpl	0x00656361
    1904:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    1908:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xf65
    190c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1910:	6572635f 	ldrbvs	r6, [r2, #-863]!	; 0x35f
    1914:	00657461 	rsbeq	r7, r5, r1, ror #8
    1918:	000013ab 	andeq	r1, r0, fp, lsr #7
    191c:	6172745f 	cmnvs	r2, pc, asr r4
    1920:	625f6563 	subsvs	r6, pc, #415236096	; 0x18c00000
    1924:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    1928:	616d5f72 	smcvs	54770	; 0xd5f2
    192c:	140b0078 	strne	r0, [fp], #-120	; 0x78
    1930:	745f0000 	ldrbvc	r0, [pc], #0	; 1938 <DISABLE_IRQ+0x18b8>
    1934:	65636172 	strbvs	r6, [r3, #-370]!	; 0x172
    1938:	6675625f 	undefined instruction 0x6675625f
    193c:	5f726566 	svcpl	0x00726566
    1940:	74736f70 	ldrbtvc	r6, [r3], #-3952	; 0xf70
    1944:	00146b00 	andseq	r6, r4, r0, lsl #22
    1948:	72745f00 	rsbsvc	r5, r4, #0
    194c:	5f656361 	svcpl	0x00656361
    1950:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    1954:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xf65
    1958:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    195c:	6b61775f 	blvs	185f6e0 <MEM_SIZE+0x105f6e0>
    1960:	61745f65 	cmnvs	r4, r5, ror #30
    1964:	cb006b73 	blgt	1c738 <DISABLE_IRQ+0x1c6b8>
    1968:	5f000014 	svcpl	0x00000014
    196c:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    1970:	75715f65 	ldrbvc	r5, [r1, #-3941]!	; 0xf65
    1974:	5f657565 	svcpl	0x00657565
    1978:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    197c:	675f7265 	ldrbvs	r7, [pc, -r5, ror #4]
    1980:	625f7465 	subsvs	r7, pc, #1694498816	; 0x65000000
    1984:	6b636f6c 	blvs	18dd73c <MEM_SIZE+0x10dd73c>
    1988:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
       4:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
       8:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
       c:	65680074 	strbvs	r0, [r8, #-116]!	; 0x74
      10:	776f6c6c 	strbvc	r6, [pc, -ip, ror #24]!
      14:	646c726f 	strbtvs	r7, [ip], #-623	; 0x26f
      18:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
      1c:	75665f74 	strbvc	r5, [r6, #-3956]!	; 0xf74
      20:	7000636e 	andvc	r6, r0, lr, ror #6
      24:	5f74616c 	svcpl	0x0074616c
      28:	746f6f62 	strbtvc	r6, [pc], #3938	; 30 <MOD_MASK+0x11>
      2c:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
      30:	6f6c2067 	svcvs	0x006c2067
      34:	7520676e 	strvc	r6, [r0, #-1902]!	; 0x76e
      38:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
      3c:	2064656e 	rsbcs	r6, r4, lr, ror #10
      40:	00746e69 	rsbseq	r6, r4, r9, ror #28
      44:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
      48:	756d6d5f 	strbvc	r6, [sp, #-3423]!	; 0xd5f
      4c:	554e4700 	strbpl	r4, [lr, #-1792]	; 0x700
      50:	34204320 	strtcc	r4, [r0], #-800	; 0x320
      54:	332e342e 	teqcc	lr, #771751936	; 0x2e000000
      58:	6f687300 	svcvs	0x00687300
      5c:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
      60:	2f00746e 	svccs	0x0000746e
      64:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
      68:	6165722f 	cmnvs	r5, pc, lsr #4
      6c:	6c69736c 	stclvs	3, cr7, [r9], #-432	; 0xfffffe50
      70:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
      74:	706f746b 	rsbvc	r7, pc, fp, ror #8
      78:	646f632f 	strbtvs	r6, [pc], #815	; 80 <DISABLE_IRQ>
      7c:	69672f65 	stmdbvs	r7!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
      80:	62756874 	rsbsvs	r6, r5, #7602176	; 0x740000
      84:	7761722f 	strbvc	r7, [r1, -pc, lsr #4]!
      88:	7300736f 	movwvc	r7, #879	; 0x36f
      8c:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xf68
      90:	736e7520 	cmnvc	lr, #134217728	; 0x8000000
      94:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
      98:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
      9c:	6e750074 	mrcvs	0, 3, r0, cr5, cr4, {3}
      a0:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
      a4:	63206465 	teqvs	r0, #1694498816	; 0x65000000
      a8:	00726168 	rsbseq	r6, r2, r8, ror #2
      ac:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
      b0:	6977735f 	ldmdbvs	r7!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
      b4:	00686374 	rsbeq	r6, r8, r4, ror r3
      b8:	746f6f62 	strbtvc	r6, [pc], #3938	; c0 <DISABLE_IRQ+0x40>
      bc:	6200632e 	andvs	r6, r0, #-1207959552	; 0xb8000000
      c0:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
      c4:	61747300 	cmnvs	r4, r0, lsl #6
      c8:	6d5f7472 	cfldrdvs	mvd7, [pc, #-456]	; 0xfffffe38
      cc:	6900756d 	stmdbvs	r0, {r0, r2, r3, r5, r6, r8, sl, ip, sp, lr}
      d0:	5f74696e 	svcpl	0x0074696e
      d4:	5f737973 	svcpl	0x00737973
      d8:	00756d6d 	rsbseq	r6, r5, sp, ror #26
      dc:	2e756d6d 	cdpcs	13, 7, cr6, cr5, cr13, {3}
      e0:	65670063 	strbvs	r0, [r7, #-99]!	; 0x63
      e4:	316c5f6e 	cmncc	ip, lr, ror #30
      e8:	6574705f 	ldrbvs	r7, [r4, #-95]!	; 0x5f
      ec:	6464615f 	strbtvs	r6, [r4], #-351	; 0x15f
      f0:	65670072 	strbvs	r0, [r7, #-114]!	; 0x72
      f4:	316c5f6e 	cmncc	ip, lr, ror #30
      f8:	6574705f 	ldrbvs	r7, [r4, #-95]!	; 0x5f
      fc:	64617600 	strbtvs	r7, [r1], #-1536	; 0x600
     100:	70007264 	andvc	r7, r0, r4, ror #4
     104:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
     108:	6e737600 	cdpvs	6, 7, cr7, cr3, cr0, {0}
     10c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
     110:	61006674 	tstvs	r0, r4, ror r6
     114:	00736772 	rsbseq	r6, r3, r2, ror r7
     118:	5f757063 	svcpl	0x00757063
     11c:	5f007273 	svcpl	0x00007273
     120:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
     124:	6168635f 	cmnvs	r8, pc, asr r3
     128:	72700072 	rsbsvc	r0, r0, #114	; 0x72
     12c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     130:	50430063 	subpl	r0, r3, r3, rrx
     134:	52535f55 	subspl	r5, r3, #340	; 0x154
     138:	646c6f00 	strbtvs	r6, [ip], #-3840	; 0xf00
     13c:	746d665f 	strbtvc	r6, [sp], #-1631	; 0x65f
     140:	5f617600 	svcpl	0x00617600
     144:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
     148:	73656400 	cmnvc	r5, #0
     14c:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0x74
     150:	63006461 	movwvs	r6, #1121	; 0x461
     154:	0079706f 	rsbseq	r7, r9, pc, rrx
     158:	63657073 	cmnvs	r5, #115	; 0x73
     15c:	6d756e00 	ldclvs	14, cr6, [r5]
     160:	00726562 	rsbseq	r6, r2, r2, ror #10
     164:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
     168:	6972705f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
     16c:	006b746e 	rsbeq	r7, fp, lr, ror #8
     170:	69676964 	stmdbvs	r7!, {r2, r5, r6, r8, fp, sp, lr}^
     174:	73007374 	movwvc	r7, #884	; 0x374
     178:	006e6769 	rsbeq	r6, lr, r9, ror #14
     17c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
     180:	75625f74 	strbvc	r5, [r2, #-3956]!	; 0xf74
     184:	6f660066 	svcvs	0x00660066
     188:	74616d72 	strbtvc	r6, [r1], #-3442	; 0xd72
     18c:	6365645f 	cmnvs	r5, #1593835520	; 0x5f000000
     190:	0065646f 	rsbeq	r6, r5, pc, ror #8
     194:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
     198:	69007465 	stmdbvs	r0, {r0, r2, r5, r6, sl, ip, sp, lr}
     19c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     1a0:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
     1a4:	7500632e 	strvc	r6, [r0, #-814]	; 0x32e
     1a8:	6b73616d 	blvs	1cd8764 <MEM_SIZE+0x14d8764>
     1ac:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
     1b0:	616e6500 	cmnvs	lr, r0, lsl #10
     1b4:	5f656c62 	svcpl	0x00656c62
     1b8:	00717269 	rsbseq	r7, r1, r9, ror #4
     1bc:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
     1c0:	695f6e6f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     1c4:	685f7172 	ldmdavs	pc, {r1, r4, r5, r6, r8, ip, sp, lr}^
     1c8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     1cc:	64007265 	strvs	r7, [r0], #-613	; 0x265
     1d0:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
     1d4:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^
     1d8:	52007172 	andpl	r7, r0, #-2147483620	; 0x8000001c
     1dc:	515f5741 	cmppl	pc, r1, asr #14
     1e0:	45554555 	ldrbmi	r4, [r5, #-1365]	; 0x555
     1e4:	4a424f5f 	bmi	1093f68 <MEM_SIZE+0x893f68>
     1e8:	5059545f 	subspl	r5, r9, pc, asr r4
     1ec:	41520045 	cmpmi	r2, r5, asr #32
     1f0:	4c425f57 	mcrrmi	15, 5, r5, r2, cr7
     1f4:	5f4b434f 	svcpl	0x004b434f
     1f8:	454d4954 	strbmi	r4, [sp, #-2388]	; 0x954
     1fc:	0054554f 	subseq	r5, r4, pc, asr #10
     200:	5f776172 	svcpl	0x00776172
     204:	636f6c62 	cmnvs	pc, #25088	; 0x6200
     208:	00632e6b 	rsbeq	r2, r3, fp, ror #28
     20c:	5f4d454d 	svcpl	0x004d454d
     210:	4c4f4f50 	mcrrmi	15, 5, r4, pc, cr0
     214:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     218:	54554d5f 	ldrbpl	r4, [r5], #-3423	; 0xd5f
     21c:	425f5845 	subsmi	r5, pc, #4521984	; 0x450000
     220:	54534f4f 	ldrbpl	r4, [r3], #-3919	; 0xf4f
     224:	4d5f4445 	cfldrdmi	mvd4, [pc, #-276]	; 0xfffffeec
     228:	74005841 	strvc	r5, [r0], #-2113	; 0x841
     22c:	5f6b7361 	svcpl	0x006b7361
     230:	616d6573 	smcvs	54867	; 0xd653
     234:	726f6870 	rsbvc	r6, pc, #7340032	; 0x700000
     238:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
     23c:	4152006a 	cmpmi	r2, sl, rrx
     240:	4f4e5f57 	svcmi	0x004e5f57
     244:	41435f54 	cmpmi	r3, r4, asr pc
     248:	44454c4c 	strbmi	r4, [r5], #-3148	; 0xc4c
     24c:	5f59425f 	svcpl	0x0059425f
     250:	4b534154 	blmi	14d07a8 <MEM_SIZE+0xcd07a8>
     254:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     258:	7375735f 	cmnvc	r5, #2080374785	; 0x7c000001
     25c:	646e6570 	strbtvs	r6, [lr], #-1392	; 0x570
     260:	616c665f 	cmnvs	ip, pc, asr r6
     264:	52007367 	andpl	r7, r0, #-1677721599	; 0x9c000001
     268:	545f5741 	ldrbpl	r5, [pc], #1857	; 270 <DISABLE_IRQ+0x1f0>
     26c:	52454d49 	subpl	r4, r5, #4672	; 0x1240
     270:	5341485f 	movtpl	r4, #6239	; 0x185f
     274:	544f4e5f 	strbpl	r4, [pc], #3679	; 27c <DISABLE_IRQ+0x1fc>
     278:	5443415f 	strbpl	r4, [r3], #-351	; 0x15f
     27c:	44455649 	strbmi	r5, [r5], #-1609	; 0x649
     280:	65727000 	ldrbvs	r7, [r2]!
     284:	756f6976 	strbvc	r6, [pc, #-2422]!	; fffff916 <rEINTPEND+0xa9fff86e>
     288:	6f770073 	svcvs	0x00770073
     28c:	705f6b72 	subsvc	r6, pc, r2, ror fp
     290:	72007274 	andvc	r7, r0, #1073741831	; 0x40000007
     294:	625f7761 	subsvs	r7, pc, #25427968	; 0x1840000
     298:	6b636f6c 	blvs	18dc050 <MEM_SIZE+0x10dc050>
     29c:	6f6f705f 	svcvs	0x006f705f
     2a0:	76615f6c 	strbtvc	r5, [r1], -ip, ror #30
     2a4:	616c6961 	cmnvs	ip, r1, ror #18
     2a8:	00656c62 	rsbeq	r6, r5, r2, ror #24
     2ac:	5f574152 	svcpl	0x00574152
     2b0:	45484353 	strbmi	r4, [r8, #-851]	; 0x353
     2b4:	49445f44 	stmdbmi	r4, {r2, r6, r8, r9, sl, fp, ip, lr}^
     2b8:	4c424153 	stfmie	f4, [r2], {83}	; 0x53
     2bc:	41520045 	cmpmi	r2, r5, asr #32
     2c0:	41535f57 	cmpmi	r3, r7, asr pc
     2c4:	505f454d 	subspl	r4, pc, sp, asr #10
     2c8:	524f4952 	subpl	r4, pc, #1343488	; 0x148000
     2cc:	00595449 	subseq	r5, r9, r9, asr #8
     2d0:	5f574152 	svcpl	0x00574152
     2d4:	4554554d 	ldrbmi	r5, [r4, #-1357]	; 0x54d
     2d8:	4f4e5f58 	svcmi	0x004e5f58
     2dc:	45525f54 	ldrbmi	r5, [r2, #-3924]	; 0xf54
     2e0:	5341454c 	movtpl	r4, #5452	; 0x154c
     2e4:	59425f45 	stmdbpl	r2, {r0, r2, r6, r8, r9, sl, fp, ip, lr}^
     2e8:	43434f5f 	movtmi	r4, #16223	; 0x3f5f
     2ec:	00595059 	subseq	r5, r9, r9, asr r0
     2f0:	5f574152 	svcpl	0x00574152
     2f4:	4c494543 	cfstr64mi	mvdx4, [r9], {67}	; 0x43
     2f8:	5f474e49 	svcpl	0x00474e49
     2fc:	4f495250 	svcmi	0x00495250
     300:	59544952 	ldmdbpl	r4, {r1, r4, r6, r8, fp, lr}^
     304:	544f4e5f 	strbpl	r4, [pc], #3679	; 30c <DISABLE_IRQ+0x28c>
     308:	4c4c415f 	stfmie	f4, [ip], {95}	; 0x5f
     30c:	4445574f 	strbmi	r5, [r5], #-1871	; 0x74f
     310:	78656e00 	stmdavc	r5!, {r9, sl, fp, sp, lr}^
     314:	41520074 	cmpmi	r2, r4, ror r0
     318:	44495f57 	strbmi	r5, [r9], #-3927	; 0xf57
     31c:	455f454c 	ldrbmi	r4, [pc, #-1356]	; fffffdd8 <rEINTPEND+0xa9fffd30>
     320:	544e4556 	strbpl	r4, [lr], #-1366	; 0x556
     324:	4858455f 	ldmdami	r8, {r0, r1, r2, r3, r4, r6, r8, sl, lr}^
     328:	54535541 	ldrbpl	r5, [r3], #-1345	; 0x541
     32c:	70004445 	andvc	r4, r0, r5, asr #8
     330:	5f6c6f6f 	svcpl	0x006c6f6f
     334:	00727470 	rsbseq	r7, r2, r0, ror r4
     338:	5f574152 	svcpl	0x00574152
     33c:	00323355 	eorseq	r3, r2, r5, asr r3
     340:	5f574152 	svcpl	0x00574152
     344:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
     348:	4e555f45 	cdpmi	15, 5, cr5, cr5, cr5, {2}
     34c:	574f4e4b 	strbpl	r4, [pc, -fp, asr #28]
     350:	4152004e 	cmpmi	r2, lr, asr #32
     354:	4e495f57 	mcrmi	15, 2, r5, cr9, cr7, {2}
     358:	494c4156 	stmdbmi	ip, {r1, r2, r4, r6, r8, lr}^
     35c:	4c415f44 	mcrrmi	15, 4, r5, r1, cr4
     360:	004e4749 	subeq	r4, lr, r9, asr #14
     364:	69727062 	ldmdbvs	r2!, {r1, r5, r6, ip, sp, lr}^
     368:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
     36c:	41520079 	cmpmi	r2, r9, ror r0
     370:	58455f57 	stmdapl	r5, {r0, r1, r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     374:	44454543 	strbmi	r4, [r5], #-1347	; 0x543
     378:	4555515f 	ldrbmi	r5, [r5, #-351]	; 0x15f
     37c:	425f4555 	subsmi	r4, pc, #356515840	; 0x15400000
     380:	45464655 	strbmi	r4, [r6, #-1621]	; 0x655
     384:	534d5f52 	movtpl	r5, #57170	; 0xdf52
     388:	49535f47 	ldmdbmi	r3, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
     38c:	7200455a 	andvc	r4, r0, #377487360	; 0x16800000
     390:	745f7761 	ldrbvc	r7, [pc], #1889	; 398 <DISABLE_IRQ+0x318>
     394:	5f6b7361 	svcpl	0x006b7361
     398:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
     39c:	50006576 	andpl	r6, r0, r6, ror r5
     3a0:	5f54524f 	svcpl	0x0054524f
     3a4:	43415453 	movtmi	r5, #5203	; 0x1453
     3a8:	4152004b 	cmpmi	r2, fp, asr #32
     3ac:	41545f57 	cmpmi	r4, r7, asr pc
     3b0:	305f4b53 	subscc	r4, pc, r3, asr fp
     3b4:	4958455f 	ldmdbmi	r8, {r0, r1, r2, r3, r4, r6, r8, sl, lr}^
     3b8:	41520054 	cmpmi	r2, r4, asr r0
     3bc:	59425f57 	stmdbpl	r2, {r0, r1, r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     3c0:	415f4554 	cmpmi	pc, r4, asr r5
     3c4:	4e47494c 	cdpmi	9, 4, cr4, cr7, cr12, {2}
     3c8:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
     3cc:	5200524f 	andpl	r5, r0, #-268435452	; 0xf0000004
     3d0:	4e5f5741 	cdpmi	7, 5, cr5, cr15, cr1, {2}
     3d4:	48545f4f 	ldmdami	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     3d8:	4f5f5349 	svcmi	0x005f5349
     3dc:	4f495450 	svcmi	0x00495450
     3e0:	4152004e 	cmpmi	r2, lr, asr #32
     3e4:	4e495f57 	mcrmi	15, 2, r5, cr9, cr7, {2}
     3e8:	494c4156 	stmdbmi	ip, {r1, r2, r4, r6, r8, lr}^
     3ec:	494d5f44 	stmdbmi	sp, {r2, r6, r8, r9, sl, fp, ip, lr}^
     3f0:	4554554e 	ldrbmi	r5, [r4, #-1358]	; 0x54e
     3f4:	656e0053 	strbvs	r0, [lr, #-83]!	; 0x53
     3f8:	625f7478 	subsvs	r7, pc, #2013265920	; 0x78000000
     3fc:	6b636f6c 	blvs	18dc1b4 <MEM_SIZE+0x10dc1b4>
     400:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
     404:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     408:	5f4f4e5f 	svcpl	0x004f4e5f
     40c:	4f4d454d 	svcmi	0x004d454d
     410:	52005952 	andpl	r5, r0, #1343488	; 0x148000
     414:	425f5741 	subsmi	r5, pc, #17039360	; 0x1040000
     418:	5f455459 	svcpl	0x00455459
     41c:	455a4953 	ldrbmi	r4, [sl, #-2387]	; 0x953
     420:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
     424:	6f00524f 	svcvs	0x0000524f
     428:	63656a62 	cmnvs	r5, #401408	; 0x62000
     42c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     430:	65006570 	strvs	r6, [r0, #-1392]	; 0x570
     434:	6f5f646e 	svcvs	0x005f646e
     438:	6f705f66 	svcvs	0x00705f66
     43c:	73006c6f 	movwvc	r6, #3183	; 0xc6f
     440:	65707375 	ldrbvs	r7, [r0, #-885]!	; 0x375
     444:	635f646e 	cmpvs	pc, #1845493760	; 0x6e000000
     448:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
     44c:	73617400 	cmnvc	r1, #0
     450:	696c5f6b 	stmdbvs	ip!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     454:	52007473 	andpl	r7, r0, #1929379840	; 0x73000000
     458:	4d5f5741 	ldclmi	7, cr5, [pc, #-260]	; 0xfffffefc
     45c:	58455455 	stmdapl	r5, {r0, r2, r4, r6, sl, ip, lr}^
     460:	4a424f5f 	bmi	10941e4 <MEM_SIZE+0x8941e4>
     464:	5059545f 	subspl	r5, r9, pc, asr r4
     468:	616e0045 	cmnvs	lr, r5, asr #32
     46c:	705f656d 	subsvc	r6, pc, sp, ror #10
     470:	63007274 	movwvs	r7, #628	; 0x274
     474:	696c6965 	stmdbvs	ip!, {r0, r2, r5, r6, r8, fp, sp, lr}^
     478:	705f676e 	subsvc	r6, pc, lr, ror #14
     47c:	006f6972 	rsbeq	r6, pc, r2, ror r9
     480:	5f574152 	svcpl	0x00574152
     484:	5f47534d 	svcpl	0x0047534d
     488:	54504d45 	ldrbpl	r4, [r0], #-3397	; 0xd45
     48c:	776f0059 	undefined instruction 0x776f0059
     490:	5f72656e 	svcpl	0x0072656e
     494:	7473656e 	ldrbtvc	r6, [r3], #-1390	; 0x56e
     498:	71006465 	tstvc	r0, r5, ror #8
     49c:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     4a0:	7275635f 	rsbsvc	r6, r5, #2080374785	; 0x7c000001
     4a4:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
     4a8:	67736d5f 	undefined instruction 0x67736d5f
     4ac:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     4b0:	7375735f 	cmnvc	r5, #2080374785	; 0x7c000001
     4b4:	646e6570 	strbtvs	r6, [lr], #-1392	; 0x570
     4b8:	74706f5f 	ldrbtvc	r6, [r0], #-3935	; 0xf5f
     4bc:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     4c0:	636f6c62 	cmnvs	pc, #25088	; 0x6200
     4c4:	69735f6b 	ldmdbvs	r3!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     4c8:	5200657a 	andpl	r6, r0, #511705088	; 0x1e800000
     4cc:	515f5741 	cmppl	pc, r1, asr #14
     4d0:	45554555 	ldrbmi	r4, [r5, #-1365]	; 0x555
     4d4:	4655425f 	undefined instruction 0x4655425f
     4d8:	5f524546 	svcpl	0x00524546
     4dc:	4c4c5546 	cfstr64mi	mvdx5, [ip], {70}	; 0x46
     4e0:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     4e4:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
     4e8:	4f5f524f 	svcmi	0x005f524f
     4ec:	43454a42 	movtmi	r4, #23106	; 0x5a42
     4f0:	59545f54 	ldmdbpl	r4, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     4f4:	52004550 	andpl	r4, r0, #335544320	; 0x14000000
     4f8:	555f5741 	ldrbpl	r5, [pc, #-1857]	; fffffdbf <rEINTPEND+0xa9fffd17>
     4fc:	6c620038 	stclvs	0, cr0, [r2], #-224	; 0xffffff20
     500:	5f6b636f 	svcpl	0x006b636f
     504:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
     508:	616d5f6e 	cmnvs	sp, lr, ror #30
     50c:	52006b73 	andpl	r6, r0, #117760	; 0x1cc00
     510:	515f5741 	cmppl	pc, r1, asr #14
     514:	45554555 	ldrbmi	r4, [r5, #-1365]	; 0x555
     518:	4655425f 	undefined instruction 0x4655425f
     51c:	5f524546 	svcpl	0x00524546
     520:	455a4953 	ldrbmi	r4, [sl, #-2387]	; 0x953
     524:	7100305f 	qaddvc	r3, pc, r0
     528:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     52c:	67736d5f 	undefined instruction 0x67736d5f
     530:	7a69735f 	bvc	1a5d2b4 <MEM_SIZE+0x125d2b4>
     534:	6f630065 	svcvs	0x00630065
     538:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
     53c:	6f6c625f 	svcvs	0x006c625f
     540:	6f5f6b63 	svcvs	0x005f6b63
     544:	70006a62 	andvc	r6, r0, r2, ror #20
     548:	5f6c6f6f 	svcpl	0x006c6f6f
     54c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     550:	73750074 	cmnvc	r5, #116	; 0x74
     554:	645f7265 	ldrbvs	r7, [pc], #613	; 55c <DISABLE_IRQ+0x4dc>
     558:	5f617461 	svcpl	0x00617461
     55c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     560:	00726574 	rsbseq	r6, r2, r4, ror r5
     564:	5f574152 	svcpl	0x00574152
     568:	44494f56 	strbmi	r4, [r9], #-3926	; 0xf56
     56c:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     570:	4555515f 	ldrbmi	r5, [r5, #-351]	; 0x15f
     574:	425f4555 	subsmi	r4, pc, #356515840	; 0x15400000
     578:	45464655 	strbmi	r4, [r6, #-1621]	; 0x655
     57c:	4e495f52 	mcrmi	15, 2, r5, cr9, cr2, {2}
     580:	494c4156 	stmdbmi	ip, {r1, r2, r4, r6, r8, lr}^
     584:	49535f44 	ldmdbmi	r3, {r2, r6, r8, r9, sl, fp, ip, lr}^
     588:	5200455a 	andpl	r4, r0, #377487360	; 0x16800000
     58c:	455f5741 	ldrbmi	r5, [pc, #-1857]	; fffffe53 <rEINTPEND+0xa9fffdab>
     590:	45454358 	strbmi	r4, [r5, #-856]	; 0x358
     594:	4e495f44 	cdpmi	15, 4, cr5, cr9, cr4, {2}
     598:	454e5f54 	strbmi	r5, [lr, #-3924]	; 0xf54
     59c:	44455453 	strbmi	r5, [r5], #-1107	; 0x453
     5a0:	56454c5f 	undefined instruction 0x56454c5f
     5a4:	74004c45 	strvc	r4, [r0], #-3141	; 0xc45
     5a8:	5f6b6369 	svcpl	0x006b6369
     5ac:	64616568 	strbtvs	r6, [r1], #-1384	; 0x568
     5b0:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     5b4:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     5b8:	535f5245 	cmppl	pc, #1342177284	; 0x50000004
     5bc:	45544154 	ldrbmi	r4, [r4, #-340]	; 0x154
     5c0:	564e495f 	undefined instruction 0x564e495f
     5c4:	44494c41 	strbmi	r4, [r9], #-3137	; 0xc41
     5c8:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     5cc:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     5d0:	4f5f5245 	svcmi	0x005f5245
     5d4:	545f4a42 	ldrbpl	r4, [pc], #2626	; 5dc <DISABLE_IRQ+0x55c>
     5d8:	00455059 	subeq	r5, r5, r9, asr r0
     5dc:	5f67736d 	svcpl	0x0067736d
     5e0:	00727470 	rsbseq	r7, r2, r0, ror r4
     5e4:	626d756e 	rsbvs	r7, sp, #461373440	; 0x1b800000
     5e8:	665f7265 	ldrbvs	r7, [pc], -r5, ror #4
     5ec:	00656572 	rsbeq	r6, r5, r2, ror r5
     5f0:	74697277 	strbtvc	r7, [r9], #-631	; 0x277
     5f4:	6f700065 	svcvs	0x00700065
     5f8:	7963696c 	stmdbvc	r3!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     5fc:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     600:	564e495f 	undefined instruction 0x564e495f
     604:	44494c41 	strbmi	r4, [r9], #-3137	; 0xc41
     608:	494f505f 	stmdbmi	pc, {r0, r1, r2, r3, r4, r6, ip, lr}^
     60c:	4152004e 	cmpmi	r2, lr, asr #32
     610:	59425f57 	stmdbpl	r2, {r0, r1, r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     614:	5f444e4f 	svcpl	0x00444e4f
     618:	5f58414d 	svcpl	0x0058414d
     61c:	4f495250 	svcmi	0x00495250
     620:	59544952 	ldmdbpl	r4, {r1, r4, r6, r8, fp, lr}^
     624:	73617400 	cmnvc	r1, #0
     628:	74735f6b 	ldrbtvc	r5, [r3], #-3947	; 0xf6b
     62c:	5f6b6361 	svcpl	0x006b6361
     630:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0x162
     634:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     638:	5f534f5f 	svcpl	0x00534f5f
     63c:	4e4e5552 	mcrmi	5, 2, r5, cr14, cr2, {2}
     640:	00474e49 	subeq	r4, r7, r9, asr #28
     644:	5f574152 	svcpl	0x00574152
     648:	454d4954 	strbmi	r4, [sp, #-2388]	; 0x954
     64c:	4e495f52 	mcrmi	15, 2, r5, cr9, cr2, {2}
     650:	494c4156 	stmdbmi	ip, {r1, r2, r4, r6, r8, lr}^
     654:	49545f44 	ldmdbmi	r4, {r2, r6, r8, r9, sl, fp, ip, lr}^
     658:	00534b43 	subseq	r4, r3, r3, asr #22
     65c:	5f574152 	svcpl	0x00574152
     660:	4d4d4f43 	stclmi	15, cr4, [sp, #-268]	; 0xfffffef4
     664:	425f4e4f 	subsmi	r4, pc, #1264	; 0x4f0
     668:	4b434f4c 	blmi	10d43a0 <MEM_SIZE+0x8d43a0>
     66c:	4a424f5f 	bmi	10943f0 <MEM_SIZE+0x8943f0>
     670:	00544345 	subseq	r4, r4, r5, asr #6
     674:	5f574152 	svcpl	0x00574152
     678:	454c4449 	strbmi	r4, [ip, #-1097]	; 0x449
     67c:	4349545f 	movtmi	r5, #37983	; 0x945f
     680:	45445f4b 	strbmi	r5, [r4, #-3915]	; 0xf4b
     684:	4554454c 	ldrbmi	r4, [r4, #-1356]	; 0x54c
     688:	4941465f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r9, sl, lr}^
     68c:	0044454c 	subeq	r4, r4, ip, asr #10
     690:	5f574152 	svcpl	0x00574152
     694:	414d4553 	cmpmi	sp, r3, asr r5
     698:	524f4850 	subpl	r4, pc, #5242880	; 0x500000
     69c:	564f5f45 	strbpl	r5, [pc], -r5, asr #30
     6a0:	4c465245 	sfmmi	f5, 2, [r6], {69}	; (stclmi 2, cr5, [r6], {69})	; 0x45
     6a4:	5200574f 	andpl	r5, r0, #20709376	; 0x13c0000
     6a8:	425f5741 	subsmi	r5, pc, #17039360	; 0x1040000
     6ac:	4b434f4c 	blmi	10d43e4 <MEM_SIZE+0x8d43e4>
     6b0:	5a49535f 	bpl	1255434 <MEM_SIZE+0xa55434>
     6b4:	52455f45 	subpl	r5, r5, #276	; 0x114
     6b8:	00524f52 	subseq	r4, r2, r2, asr pc
     6bc:	5f574152 	svcpl	0x00574152
     6c0:	454d4954 	strbmi	r4, [sp, #-2388]	; 0x954
     6c4:	52455a5f 	subpl	r5, r5, #389120	; 0x5f000
     6c8:	4c535f4f 	mrrcmi	15, 4, r5, r3, cr15
     6cc:	00504545 	subseq	r4, r0, r5, asr #10
     6d0:	5f574152 	svcpl	0x00574152
     6d4:	45484353 	strbmi	r4, [r8, #-851]	; 0x353
     6d8:	564f5f44 	strbpl	r5, [pc], -r4, asr #30
     6dc:	4c465245 	sfmmi	f5, 2, [r6], {69}	; (stclmi 2, cr5, [r6], {69})	; 0x45
     6e0:	5200574f 	andpl	r5, r0, #20709376	; 0x13c0000
     6e4:	425f5741 	subsmi	r5, pc, #17039360	; 0x1040000
     6e8:	4b434f4c 	blmi	10d4420 <MEM_SIZE+0x8d4420>
     6ec:	4f42415f 	svcmi	0x0042415f
     6f0:	52005452 	andpl	r5, r0, #1375731712	; 0x52000000
     6f4:	495f5741 	ldmdbmi	pc, {r0, r6, r8, r9, sl, ip, lr}^
     6f8:	4c41564e 	mcrrmi	6, 4, r5, r1, cr14
     6fc:	485f4449 	ldmdami	pc, {r0, r3, r6, sl, lr}^
     700:	5352554f 	cmppl	r2, #331350016	; 0x13c00000
     704:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     708:	4843535f 	stmdami	r3, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     70c:	495f4445 	ldmdbmi	pc, {r0, r2, r6, sl, lr}^
     710:	4c41564e 	mcrrmi	6, 4, r5, r1, cr14
     714:	52004449 	andpl	r4, r0, #1224736768	; 0x49000000
     718:	435f5741 	cmpmi	pc, #17039360	; 0x1040000
     71c:	49444e4f 	stmdbmi	r4, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
     720:	4e4f4954 	mcrmi	9, 2, r4, cr15, cr4, {2}
     724:	5a49535f 	bpl	12554a8 <MEM_SIZE+0xa554a8>
     728:	424f5f45 	submi	r5, pc, #276	; 0x114
     72c:	59545f4a 	ldmdbpl	r4, {r1, r3, r6, r8, r9, sl, fp, ip, lr}^
     730:	52004550 	andpl	r4, r0, #335544320	; 0x14000000
     734:	515f5741 	cmppl	pc, r1, asr #14
     738:	45554555 	ldrbmi	r4, [r5, #-1365]	; 0x555
     73c:	5a49535f 	bpl	12554c0 <MEM_SIZE+0xa554c0>
     740:	424f5f45 	submi	r5, pc, #276	; 0x114
     744:	59545f4a 	ldmdbpl	r4, {r1, r3, r6, r8, r9, sl, fp, ip, lr}^
     748:	52004550 	andpl	r4, r0, #335544320	; 0x14000000
     74c:	515f5741 	cmppl	pc, r1, asr #14
     750:	45554555 	ldrbmi	r4, [r5, #-1365]	; 0x555
     754:	5a49535f 	bpl	12554d8 <MEM_SIZE+0xa554d8>
     758:	61720045 	cmnvs	r2, r5, asr #32
     75c:	64615f77 	strbtvs	r5, [r1], #-3959	; 0xf77
     760:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
     764:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
     768:	7375735f 	cmnvc	r5, #2080374785	; 0x7c000001
     76c:	646e6570 	strbtvs	r6, [lr], #-1392	; 0x570
     770:	666e695f 	undefined instruction 0x666e695f
     774:	4152006f 	cmpmi	r2, pc, rrx
     778:	58455f57 	stmdapl	r5, {r0, r1, r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     77c:	44454543 	strbmi	r4, [r5], #-1347	; 0x543
     780:	4945435f 	stmdbmi	r5, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
     784:	474e494c 	strbmi	r4, [lr, -ip, asr #18]
     788:	4952505f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, ip, lr}^
     78c:	5449524f 	strbpl	r5, [r9], #-591	; 0x24f
     790:	41520059 	cmpmi	r2, r9, asr r0
     794:	4e495f57 	mcrmi	15, 2, r5, cr9, cr7, {2}
     798:	534d5f54 	movtpl	r5, #57172	; 0xdf54
     79c:	58455f47 	stmdapl	r5, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
     7a0:	53554148 	cmppl	r5, #18
     7a4:	00444554 	subeq	r4, r4, r4, asr r5
     7a8:	5f574152 	svcpl	0x00574152
     7ac:	4b534154 	blmi	14d0d04 <MEM_SIZE+0xcd0d04>
     7b0:	455f305f 	ldrbmi	r3, [pc, #-95]	; 759 <DISABLE_IRQ+0x6d9>
     7b4:	544e4556 	strbpl	r4, [lr], #-1366	; 0x556
     7b8:	4858455f 	ldmdami	r8, {r0, r1, r2, r3, r4, r6, r8, sl, lr}^
     7bc:	54535541 	ldrbpl	r5, [r3], #-1345	; 0x541
     7c0:	52004445 	andpl	r4, r0, #1157627904	; 0x45000000
     7c4:	515f5741 	cmppl	pc, r1, asr #14
     7c8:	45554555 	ldrbmi	r4, [r5, #-1365]	; 0x555
     7cc:	4655425f 	undefined instruction 0x4655425f
     7d0:	5f524546 	svcpl	0x00524546
     7d4:	5f4a424f 	svcpl	0x004a424f
     7d8:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0x954
     7dc:	65726600 	ldrbvs	r6, [r2, #-1536]!	; 0x600
     7e0:	736d5f65 	cmnvc	sp, #404	; 0x194
     7e4:	6c620067 	stclvs	0, cr0, [r2], #-412	; 0xfffffe64
     7e8:	5f6b636f 	svcpl	0x006b636f
     7ec:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
     7f0:	74007375 	strvc	r7, [r0], #-885	; 0x375
     7f4:	5f6b6369 	svcpl	0x006b6369
     7f8:	616d6572 	smcvs	54866	; 0xd652
     7fc:	52006e69 	andpl	r6, r0, #1680	; 0x690
     800:	4e5f5741 	cdpmi	7, 5, cr5, cr15, cr1, {2}
     804:	5f4c4c55 	svcpl	0x004c4c55
     808:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
     80c:	00524554 	subseq	r4, r2, r4, asr r5
     810:	5f574152 	svcpl	0x00574152
     814:	5f4a424f 	svcpl	0x004a424f
     818:	41564e49 	cmpmi	r6, r9, asr #28
     81c:	4144494c 	cmpmi	r4, ip, asr #18
     820:	535f4554 	cmppl	pc, #352321536	; 0x15000000
     824:	45544154 	ldrbmi	r4, [r4, #-340]	; 0x154
     828:	47534d00 	ldrbmi	r4, [r3, -r0, lsl #26]
     82c:	5a49535f 	bpl	12555b0 <MEM_SIZE+0xa555b0>
     830:	59545f45 	ldmdbpl	r4, {r0, r2, r6, r8, r9, sl, fp, ip, lr}^
     834:	52004550 	andpl	r4, r0, #335544320	; 0x14000000
     838:	495f5741 	ldmdbmi	pc, {r0, r6, r8, r9, sl, ip, lr}^
     83c:	5f454c44 	svcpl	0x00454c44
     840:	4b434954 	blmi	10d2d98 <MEM_SIZE+0x8d2d98>
     844:	4444415f 	strbmi	r4, [r4], #-351	; 0x15f
     848:	4941465f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r9, sl, lr}^
     84c:	0044454c 	subeq	r4, r4, ip, asr #10
     850:	5f574152 	svcpl	0x00574152
     854:	444e4f43 	strbmi	r4, [lr], #-3907	; 0xf43
     858:	4f495449 	svcmi	0x00495449
     85c:	424f5f4e 	submi	r5, pc, #312	; 0x138
     860:	59545f4a 	ldmdbpl	r4, {r1, r3, r6, r8, r9, sl, fp, ip, lr}^
     864:	6d004550 	cfstr32vs	mvfx4, [r0, #-320]	; 0xfffffec0
     868:	73747874 	cmnvc	r4, #7602176	; 0x740000
     86c:	6974006b 	ldmdbvs	r4!, {r0, r1, r3, r5, r6}^
     870:	6c5f6b63 	mrrcvs	11, 6, r6, pc, cr3
     874:	00747369 	rsbseq	r7, r4, r9, ror #6
     878:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
     87c:	746f745f 	strbtvc	r7, [pc], #1119	; 884 <DISABLE_IRQ+0x804>
     880:	52006c61 	andpl	r6, r0, #24832	; 0x6100
     884:	4e5f5741 	cdpmi	7, 5, cr5, cr15, cr1, {2}
     888:	435f544f 	cmpmi	pc, #1325400064	; 0x4f000000
     88c:	454c4c41 	strbmi	r4, [ip, #-3137]	; 0xc41
     890:	59425f44 	stmdbpl	r2, {r2, r6, r8, r9, sl, fp, ip, lr}^
     894:	5253495f 	subspl	r4, r3, #1556480	; 0x17c000
     898:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     89c:	4c554e5f 	mrrcmi	14, 5, r4, r5, cr15
     8a0:	424f5f4c 	submi	r5, pc, #304	; 0x130
     8a4:	5443454a 	strbpl	r4, [r3], #-1354	; 0x54a
     8a8:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     8ac:	4556455f 	ldrbmi	r4, [r6, #-1375]	; 0x55f
     8b0:	4f5f544e 	svcmi	0x005f544e
     8b4:	545f4a42 	ldrbpl	r4, [pc], #2626	; 8bc <DISABLE_IRQ+0x83c>
     8b8:	00455059 	subeq	r5, r5, r9, asr r0
     8bc:	5f574152 	svcpl	0x00574152
     8c0:	45484353 	strbmi	r4, [r8, #-851]	; 0x353
     8c4:	4f4c5f44 	svcmi	0x004c5f44
     8c8:	44454b43 	strbmi	r4, [r5], #-2883	; 0xb43
     8cc:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     8d0:	4f4c425f 	svcmi	0x004c425f
     8d4:	445f4b43 	ldrbmi	r4, [pc], #2883	; 8dc <DISABLE_IRQ+0x85c>
     8d8:	74004c45 	strvc	r4, [r0], #-3141	; 0xc45
     8dc:	5f6b7361 	svcpl	0x006b7361
     8e0:	656d616e 	strbvs	r6, [sp, #-366]!	; 0x16e
     8e4:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     8e8:	4d45535f 	stclmi	3, cr5, [r5, #-380]	; 0xfffffe84
     8ec:	4f485041 	svcmi	0x00485041
     8f0:	545f4552 	ldrbpl	r4, [pc], #1362	; 8f8 <DISABLE_IRQ+0x878>
     8f4:	5f4b5341 	svcpl	0x004b5341
     8f8:	54494157 	strbpl	r4, [r9], #-343	; 0x157
     8fc:	00474e49 	subeq	r4, r7, r9, asr #28
     900:	636f6c62 	cmnvs	pc, #25088	; 0x6200
     904:	61775f6b 	cmnvs	r7, fp, ror #30
     908:	41520079 	cmpmi	r2, r9, ror r0
     90c:	554d5f57 	strbpl	r5, [sp, #-3927]	; 0xf57
     910:	5f584554 	svcpl	0x00584554
     914:	454e574f 	strbmi	r5, [lr, #-1871]	; 0x74f
     918:	454e5f52 	strbmi	r5, [lr, #-3922]	; 0xf52
     91c:	44455453 	strbmi	r5, [r5], #-1107	; 0x453
     920:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     924:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
     928:	5f4d4554 	svcpl	0x004d4554
     92c:	4f525245 	svcmi	0x00525245
     930:	41520052 	cmpmi	r2, r2, asr r0
     934:	49545f57 	ldmdbmi	r4, {r0, r1, r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     938:	5f52454d 	svcpl	0x0052454d
     93c:	5f534148 	svcpl	0x00534148
     940:	49544341 	ldmdbmi	r4, {r0, r6, r8, r9, lr}^
     944:	00444556 	subeq	r4, r4, r6, asr r5
     948:	5f574152 	svcpl	0x00574152
     94c:	4554554d 	ldrbmi	r5, [r4, #-1357]	; 0x54d
     950:	4f485f58 	svcmi	0x00485f58
     954:	5245444c 	subpl	r4, r5, #1275068416	; 0x4c000000
     958:	4952505f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, ip, lr}^
     95c:	5449524f 	strbpl	r5, [r9], #-591	; 0x24f
     960:	48435f59 	stmdami	r3, {r0, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     964:	45474e41 	strbmi	r4, [r7, #-3649]	; 0xe41
     968:	41520044 	cmpmi	r2, r4, asr #32
     96c:	55535f57 	ldrbpl	r5, [r3, #-3927]	; 0xf57
     970:	4e455053 	mcrmi	0, 2, r5, cr5, cr3, {2}
     974:	5f444544 	svcpl	0x00444544
     978:	4e554f43 	cdpmi	15, 5, cr4, cr5, cr3, {2}
     97c:	564f5f54 	undefined instruction 0x564f5f54
     980:	4c465245 	sfmmi	f5, 2, [r6], {69}	; (stclmi 2, cr5, [r6], {69})	; 0x45
     984:	4445574f 	strbmi	r5, [r5], #-1871	; 0x74f
     988:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     98c:	4f4f505f 	svcmi	0x004f505f
     990:	49535f4c 	ldmdbmi	r3, {r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     994:	495f455a 	ldmdbmi	pc, {r1, r3, r4, r6, r8, sl, lr}^
     998:	4c41564e 	mcrrmi	6, 4, r5, r1, cr14
     99c:	52004449 	andpl	r4, r0, #1224736768	; 0x49000000
     9a0:	545f5741 	ldrbpl	r5, [pc], #1857	; 9a8 <DISABLE_IRQ+0x928>
     9a4:	5f4b5341 	svcpl	0x004b5341
     9a8:	004a424f 	subeq	r4, sl, pc, asr #4
     9ac:	6b736174 	blvs	1cd8f84 <MEM_SIZE+0x14d8f84>
     9b0:	6174735f 	cmnvs	r4, pc, asr r3
     9b4:	52006574 	andpl	r6, r0, #486539264	; 0x1d000000
     9b8:	5a5f5741 	bpl	17d66c4 <MEM_SIZE+0xfd66c4>
     9bc:	5f4f5245 	svcpl	0x004f5245
     9c0:	424d554e 	submi	r5, sp, #327155712	; 0x13800000
     9c4:	52005245 	andpl	r5, r0, #1342177284	; 0x50000004
     9c8:	535f5741 	cmppl	pc, #17039360	; 0x1040000
     9cc:	45505355 	ldrbmi	r5, [r0, #-853]	; 0x355
     9d0:	545f444e 	ldrbpl	r4, [pc], #1102	; 9d8 <DISABLE_IRQ+0x958>
     9d4:	5f4b5341 	svcpl	0x004b5341
     9d8:	5f544f4e 	svcpl	0x00544f4e
     9dc:	4f4c4c41 	svcmi	0x004c4c41
     9e0:	00444557 	subeq	r4, r4, r7, asr r5
     9e4:	5f574152 	svcpl	0x00574152
     9e8:	5f4d4553 	svcpl	0x004d4553
     9ec:	5f4a424f 	svcpl	0x004a424f
     9f0:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0x954
     9f4:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     9f8:	4c45445f 	cfstrdmi	mvd4, [r5], {95}	; 0x5f
     9fc:	5f455445 	svcpl	0x00455445
     a00:	4b534154 	blmi	14d0f58 <MEM_SIZE+0xcd0f58>
     a04:	544f4e5f 	strbpl	r4, [pc], #3679	; a0c <DISABLE_IRQ+0x98c>
     a08:	4c4c415f 	stfmie	f4, [ip], {95}	; 0x5f
     a0c:	4445574f 	strbmi	r5, [r5], #-1871	; 0x74f
     a10:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     a14:	6f6c625f 	svcvs	0x006c625f
     a18:	705f6b63 	subsvc	r6, pc, r3, ror #22
     a1c:	5f6c6f6f 	svcpl	0x006c6f6f
     a20:	61657263 	cmnvs	r5, r3, ror #4
     a24:	52006574 	andpl	r6, r0, #486539264	; 0x1d000000
     a28:	545f5741 	ldrbpl	r5, [pc], #1857	; a30 <DISABLE_IRQ+0x9b0>
     a2c:	5f4b4349 	svcpl	0x004b4349
     a30:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0x954
     a34:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     a38:	5f534f5f 	svcpl	0x00534f5f
     a3c:	504f5453 	subpl	r5, pc, r3, asr r4
     a40:	00444550 	subeq	r4, r4, r0, asr r5
     a44:	5f574152 	svcpl	0x00574152
     a48:	45545942 	ldrbmi	r5, [r4, #-2370]	; 0x942
     a4c:	4a424f5f 	bmi	10947d0 <MEM_SIZE+0x8947d0>
     a50:	5059545f 	subspl	r5, r9, pc, asr r4
     a54:	61720045 	cmnvs	r2, r5, asr #32
     a58:	6c625f77 	stclvs	15, cr5, [r2], #-476	; 0xfffffe24
     a5c:	5f6b636f 	svcpl	0x006b636f
     a60:	6f6c6c61 	svcvs	0x006c6c61
     a64:	65746163 	ldrbvs	r6, [r4, #-355]!	; 0x163
     a68:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     a6c:	6f6c625f 	svcvs	0x006c625f
     a70:	705f6b63 	subsvc	r6, pc, r3, ror #22
     a74:	5f6c6f6f 	svcpl	0x006c6f6f
     a78:	69617661 	stmdbvs	r1!, {r0, r5, r6, r9, sl, ip, sp, lr}^
     a7c:	6c62616c 	stfvse	f6, [r2], #-432	; 0xfffffe50
     a80:	696c5f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     a84:	52007473 	andpl	r7, r0, #1929379840	; 0x73000000
     a88:	435f5741 	cmpmi	pc, #17039360	; 0x1040000
     a8c:	474e4148 	strbmi	r4, [lr, -r8, asr #2]
     a90:	52505f45 	subspl	r5, r0, #276	; 0x114
     a94:	49524f49 	ldmdbmi	r2, {r0, r3, r6, r8, r9, sl, fp, lr}^
     a98:	4e5f5954 	mrcmi	9, 2, r5, cr15, cr4, {2}
     a9c:	415f544f 	cmpmi	pc, pc, asr #8
     aa0:	574f4c4c 	strbpl	r4, [pc, -ip, asr #24]
     aa4:	52004445 	andpl	r4, r0, #1157627904	; 0x45000000
     aa8:	535f5741 	cmppl	pc, #17039360	; 0x1040000
     aac:	50414d45 	subpl	r4, r1, r5, asr #26
     ab0:	45524f48 	ldrbmi	r4, [r2, #-3912]	; 0xf48
     ab4:	73617400 	cmnvc	r1, #0
     ab8:	75715f6b 	ldrbvc	r5, [r1, #-3947]!	; 0xf6b
     abc:	5f657565 	svcpl	0x00657565
     ac0:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
     ac4:	6a626f5f 	bvs	189c848 <MEM_SIZE+0x109c848>
     ac8:	6f6c6200 	svcvs	0x006c6200
     acc:	6c5f6b63 	mrrcvs	11, 6, r6, pc, cr3
     ad0:	00747369 	rsbseq	r7, r4, r9, ror #6
     ad4:	5f574152 	svcpl	0x00574152
     ad8:	505f4f4e 	subspl	r4, pc, lr, asr #30
     adc:	5f444e45 	svcpl	0x00444e45
     ae0:	54494157 	strbpl	r4, [r9], #-343	; 0x157
     ae4:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     ae8:	4749485f 	smlsldmi	r4, r9, pc, r8
     aec:	54534548 	ldrbpl	r4, [r3], #-1352	; 0x548
     af0:	5341545f 	movtpl	r5, #5215	; 0x145f
     af4:	58455f4b 	stmdapl	r5, {r0, r1, r3, r6, r8, r9, sl, fp, ip, lr}^
     af8:	52005449 	andpl	r5, r0, #1224736768	; 0x49000000
     afc:	555f5741 	ldrbpl	r5, [pc, #-1857]	; 3c3 <DISABLE_IRQ+0x343>
     b00:	73003631 	movwvc	r3, #1585	; 0x631
     b04:	6b636174 	blvs	18d90dc <MEM_SIZE+0x10d90dc>
     b08:	7a69735f 	bvc	1a5d88c <MEM_SIZE+0x125d88c>
     b0c:	65700065 	ldrbvs	r0, [r0, #-101]!	; 0x65
     b10:	6e5f6b61 	vnmlavs.f64	d22, d15, d17
     b14:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
     b18:	52007372 	andpl	r7, r0, #-939524095	; 0xc8000001
     b1c:	4d5f5741 	ldclmi	7, cr5, [pc, #-260]	; 0xfffffefc
     b20:	55455551 	strbpl	r5, [r5, #-1361]	; 0x551
     b24:	424f5f45 	submi	r5, pc, #276	; 0x114
     b28:	59545f4a 	ldmdbpl	r4, {r1, r3, r6, r8, r9, sl, fp, ip, lr}^
     b2c:	52004550 	andpl	r4, r0, #335544320	; 0x14000000
     b30:	4d5f5741 	ldclmi	7, cr5, [pc, #-260]	; 0xfffffefc
     b34:	58455455 	stmdapl	r5, {r0, r2, r4, r6, sl, ip, lr}^
     b38:	53414800 	movtpl	r4, #6144	; 0x1800
     b3c:	544f4e5f 	strbpl	r4, [pc], #3679	; b44 <DISABLE_IRQ+0xac4>
     b40:	5355535f 	cmppl	r5, #2080374785	; 0x7c000001
     b44:	444e4550 	strbmi	r4, [lr], #-1360	; 0x550
     b48:	52004445 	andpl	r4, r0, #1157627904	; 0x45000000
     b4c:	495f5741 	ldmdbmi	pc, {r0, r6, r8, r9, sl, ip, lr}^
     b50:	4c41564e 	mcrrmi	6, 4, r5, r1, cr14
     b54:	535f4449 	cmppl	pc, #1224736768	; 0x49000000
     b58:	44454843 	strbmi	r4, [r5], #-2115	; 0x843
     b5c:	5941575f 	stmdbpl	r1, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
     b60:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     b64:	47534d5f 	undefined instruction 0x47534d5f
     b68:	5a49535f 	bpl	12558ec <MEM_SIZE+0xa558ec>
     b6c:	41520045 	cmpmi	r2, r5, asr #32
     b70:	44495f57 	strbmi	r5, [r9], #-3927	; 0xf57
     b74:	455f454c 	ldrbmi	r4, [pc, #-1356]	; 630 <DISABLE_IRQ+0x5b0>
     b78:	00544958 	subseq	r4, r4, r8, asr r9
     b7c:	5f776172 	svcpl	0x00776172
     b80:	636f6c62 	cmnvs	pc, #25088	; 0x6200
     b84:	65725f6b 	ldrbvs	r5, [r2, #-3947]!	; 0xf6b
     b88:	7361656c 	cmnvc	r1, #452984832	; 0x1b000000
     b8c:	41520065 	cmpmi	r2, r5, rrx
     b90:	4c425f57 	mcrrmi	15, 5, r5, r2, cr7
     b94:	5f4b434f 	svcpl	0x004b434f
     b98:	5f4a424f 	svcpl	0x004a424f
     b9c:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0x954
     ba0:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     ba4:	47534d5f 	undefined instruction 0x47534d5f
     ba8:	58414d5f 	stmdapl	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
     bac:	78746d00 	ldmdavc	r4!, {r8, sl, fp, sp, lr}^
     bb0:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
     bb4:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     bb8:	4355535f 	cmpmi	r5, #2080374785	; 0x7c000001
     bbc:	53534543 	cmppl	r3, #281018368	; 0x10c00000
     bc0:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     bc4:	54554d5f 	ldrbpl	r4, [r5], #-3423	; 0xd5f
     bc8:	4e5f5845 	cdpmi	8, 5, cr5, cr15, cr5, {2}
     bcc:	4f505f4f 	svcmi	0x00505f4f
     bd0:	5943494c 	stmdbpl	r3, {r2, r3, r6, r8, fp, lr}^
     bd4:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     bd8:	4555515f 	ldrbmi	r5, [r5, #-351]	; 0x15f
     bdc:	465f4555 	undefined instruction 0x465f4555
     be0:	5f4c4c55 	svcpl	0x004c4c55
     be4:	5f54504f 	svcpl	0x0054504f
     be8:	4f525245 	svcmi	0x00525245
     bec:	6f700052 	svcvs	0x00700052
     bf0:	735f6c6f 	cmpvc	pc, #28416	; 0x6f00
     bf4:	00657a69 	rsbeq	r7, r5, r9, ror #20
     bf8:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
     bfc:	68635f6b 	stmdavs	r3!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     c00:	5f6b6365 	svcpl	0x006b6365
     c04:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
     c08:	53494c00 	movtpl	r4, #39936	; 0x9c00
     c0c:	69740054 	ldmdbvs	r4!, {r2, r4, r6}^
     c10:	6d5f6b63 	vldrvs	d22, [pc, #-396]	; a8c <DISABLE_IRQ+0xa0c>
     c14:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
     c18:	72756300 	rsbsvc	r6, r5, #0
     c1c:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
     c20:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
     c24:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     c28:	5459425f 	ldrbpl	r4, [r9], #-607	; 0x25f
     c2c:	4f505f45 	svcmi	0x00505f45
     c30:	535f4c4f 	cmppl	pc, #20224	; 0x4f00
     c34:	43555254 	cmpmi	r5, #1073741829	; 0x40000005
     c38:	656d0054 	strbvs	r0, [sp, #-84]!	; 0x54
     c3c:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     c40:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
     c44:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     c48:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0x25f
     c4c:	6f705f65 	svcvs	0x00705f65
     c50:	735f6c6f 	cmpvc	pc, #28416	; 0x6f00
     c54:	63726165 	cmnvs	r2, #1073741849	; 0x40000019
     c58:	78650068 	stmdavc	r5!, {r3, r5, r6}^
     c5c:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
     c60:	6c625f65 	stclvs	15, cr5, [r2], #-404	; 0xfffffe6c
     c64:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
     c68:	74796200 	ldrbtvc	r6, [r9], #-512	; 0x200
     c6c:	6c615f65 	stclvs	15, cr5, [r1], #-404	; 0xfffffe6c
     c70:	5f6e6769 	svcpl	0x006e6769
     c74:	6b73616d 	blvs	1cd9230 <MEM_SIZE+0x14d9230>
     c78:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     c7c:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0x25f
     c80:	6f705f65 	svcvs	0x00705f65
     c84:	615f6c6f 	cmpvs	pc, pc, ror #24
     c88:	6c696176 	stfvse	f6, [r9], #-472	; 0xfffffe28
     c8c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
     c90:	78656e00 	stmdavc	r5!, {r9, sl, fp, sp, lr}^
     c94:	74705f74 	ldrbtvc	r5, [r0], #-3956	; 0xf74
     c98:	61720072 	cmnvs	r2, r2, ror r0
     c9c:	79625f77 	stmdbvc	r2!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     ca0:	705f6574 	subsvc	r6, pc, r4, ror r5
     ca4:	5f6c6f6f 	svcpl	0x006c6f6f
     ca8:	656e776f 	strbvs	r7, [lr, #-1903]!	; 0x76f
     cac:	61720072 	cmnvs	r2, r2, ror r0
     cb0:	79625f77 	stmdbvc	r2!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     cb4:	705f6574 	subsvc	r6, pc, r4, ror r5
     cb8:	5f6c6f6f 	svcpl	0x006c6f6f
     cbc:	61657263 	cmnvs	r5, r3, ror #4
     cc0:	72006574 	andvc	r6, r0, #486539264	; 0x1d000000
     cc4:	625f7761 	subsvs	r7, pc, #25427968	; 0x1840000
     cc8:	5f657479 	svcpl	0x00657479
     ccc:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0x572
     cd0:	00657361 	rsbeq	r7, r5, r1, ror #6
     cd4:	5f776172 	svcpl	0x00776172
     cd8:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
     cdc:	6f6f705f 	svcvs	0x006f705f
     ce0:	72665f6c 	rsbvc	r5, r6, #432	; 0x1b0
     ce4:	656d6761 	strbvs	r6, [sp, #-1889]!	; 0x761
     ce8:	0073746e 	rsbseq	r7, r3, lr, ror #8
     cec:	69617661 	stmdbvs	r1!, {r0, r5, r6, r9, sl, ip, sp, lr}^
     cf0:	6c62616c 	stfvse	f6, [r2], #-432	; 0xfffffe50
     cf4:	79625f65 	stmdbvc	r2!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     cf8:	00736574 	rsbseq	r6, r3, r4, ror r5
     cfc:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
     d00:	5f746e65 	svcpl	0x00746e65
     d04:	6b726f77 	blvs	1c9cae8 <MEM_SIZE+0x149cae8>
     d08:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
     d0c:	6172006b 	cmnvs	r2, fp, rrx
     d10:	79625f77 	stmdbvc	r2!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     d14:	615f6574 	cmpvs	pc, r4, ror r5
     d18:	636f6c6c 	cmnvs	pc, #27648	; 0x6c00
     d1c:	00657461 	rsbeq	r7, r5, r1, ror #8
     d20:	5f776172 	svcpl	0x00776172
     d24:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
     d28:	6d00632e 	stcvs	3, cr6, [r0, #-184]	; 0xffffff48
     d2c:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
     d30:	69735f79 	ldmdbvs	r3!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     d34:	5200657a 	andpl	r6, r0, #511705088	; 0x1e800000
     d38:	545f5741 	ldrbpl	r5, [pc], #1857	; d40 <DISABLE_IRQ+0xcc0>
     d3c:	5f455059 	svcpl	0x00455059
     d40:	004d4553 	subeq	r4, sp, r3, asr r5
     d44:	5f574152 	svcpl	0x00574152
     d48:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0x954
     d4c:	535f515f 	cmppl	pc, #-1073741801	; 0xc0000017
     d50:	5f455a49 	svcpl	0x00455a49
     d54:	00444e45 	subeq	r4, r4, r5, asr #28
     d58:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
     d5c:	65685f74 	strbvs	r5, [r8, #-3956]!	; 0xf74
     d60:	705f6461 	subsvc	r6, pc, r1, ror #8
     d64:	72007274 	andvc	r7, r0, #1073741831	; 0x40000007
     d68:	655f7761 	ldrbvs	r7, [pc, #-1889]	; 60f <DISABLE_IRQ+0x58f>
     d6c:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
     d70:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
     d74:	00657465 	rsbeq	r7, r5, r5, ror #8
     d78:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
     d7c:	6f745f73 	svcvs	0x00745f73
     d80:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
     d84:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     d88:	6863735f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
     d8c:	6c5f6465 	cfldrdvs	mvd6, [pc], {101}	; 0x65
     d90:	006b636f 	rsbeq	r6, fp, pc, ror #6
     d94:	6b736174 	blvs	1cd936c <MEM_SIZE+0x14d936c>
     d98:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
     d9c:	6f6c6200 	svcvs	0x006c6200
     da0:	6c5f6b63 	mrrcvs	11, 6, r6, pc, cr3
     da4:	5f747369 	svcpl	0x00747369
     da8:	64616568 	strbtvs	r6, [r1], #-1384	; 0x568
     dac:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     db0:	5059545f 	subspl	r5, r9, pc, asr r4
     db4:	5f515f45 	svcpl	0x00515f45
     db8:	455a4953 	ldrbmi	r4, [sl, #-2387]	; 0x953
     dbc:	4c4c415f 	stfmie	f4, [ip], {95}	; 0x5f
     dc0:	69617700 	stmdbvs	r1!, {r8, r9, sl, ip, sp, lr}^
     dc4:	706f5f74 	rsbvc	r5, pc, r4, ror pc
     dc8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     dcc:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
     dd0:	6576655f 	ldrbvs	r6, [r6, #-1375]!	; 0x55f
     dd4:	735f746e 	cmpvc	pc, #1845493760	; 0x6e000000
     dd8:	73007465 	movwvc	r7, #1125	; 0x465
     ddc:	6f5f7465 	svcvs	0x005f7465
     de0:	6f697470 	svcvs	0x00697470
     de4:	4152006e 	cmpmi	r2, lr, rrx
     de8:	59545f57 	ldmdbpl	r4, {r0, r1, r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     dec:	515f4550 	cmppl	pc, r0, asr r5
     df0:	444e455f 	strbmi	r4, [lr], #-1375	; 0x55f
     df4:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     df8:	5059545f 	subspl	r5, r9, pc, asr r4
     dfc:	5f515f45 	svcpl	0x00515f45
     e00:	4e4f5246 	cdpmi	2, 4, cr5, cr15, cr6, {2}
     e04:	65720054 	ldrbvs	r0, [r2, #-84]!	; 0x54
     e08:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     e0c:	5f646574 	svcpl	0x00646574
     e10:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
     e14:	41520073 	cmpmi	r2, r3, ror r0
     e18:	59545f57 	ldmdbpl	r4, {r0, r1, r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     e1c:	455f4550 	ldrbmi	r4, [pc, #-1360]	; 8d4 <DISABLE_IRQ+0x854>
     e20:	544e4556 	strbpl	r4, [lr], #-1366	; 0x556
     e24:	65766500 	ldrbvs	r6, [r6, #-1280]!	; 0x500
     e28:	705f746e 	subsvc	r7, pc, lr, ror #8
     e2c:	52007274 	andpl	r7, r0, #1073741831	; 0x40000007
     e30:	545f5741 	ldrbpl	r5, [pc], #1857	; e38 <DISABLE_IRQ+0xdb8>
     e34:	5f455059 	svcpl	0x00455059
     e38:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     e3c:	5200454d 	andpl	r4, r0, #322961408	; 0x13400000
     e40:	545f5741 	ldrbpl	r5, [pc], #1857	; e48 <DISABLE_IRQ+0xdc8>
     e44:	5f455059 	svcpl	0x00455059
     e48:	50535553 	subspl	r5, r3, r3, asr r5
     e4c:	00444e45 	subeq	r4, r4, r5, asr #28
     e50:	5f776172 	svcpl	0x00776172
     e54:	5f746e69 	svcpl	0x00746e69
     e58:	7473656e 	ldrbtvc	r6, [r3], #-1390	; 0x56e
     e5c:	00676e69 	rsbeq	r6, r7, r9, ror #28
     e60:	6c5f7369 	mrrcvs	3, 6, r7, pc, cr9
     e64:	5f747369 	svcpl	0x00747369
     e68:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xd65
     e6c:	61720079 	cmnvs	r2, r9, ror r0
     e70:	76655f77 	uqsub16vc	r5, r5, r7
     e74:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
     e78:	74690063 	strbtvc	r0, [r9], #-99	; 0x63
     e7c:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
     e80:	545f5741 	ldrbpl	r5, [pc], #1857	; e88 <DISABLE_IRQ+0xe08>
     e84:	5f455059 	svcpl	0x00455059
     e88:	454c4449 	strbmi	r4, [ip, #-1097]	; 0x449
     e8c:	444e455f 	strbmi	r4, [lr], #-1375	; 0x55f
     e90:	4556455f 	ldrbmi	r4, [r6, #-1375]	; 0x55f
     e94:	505f544e 	subspl	r5, pc, lr, asr #8
     e98:	0054534f 	subseq	r5, r4, pc, asr #6
     e9c:	5f776172 	svcpl	0x00776172
     ea0:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
     ea4:	72635f74 	rsbvc	r5, r3, #464	; 0x1d0
     ea8:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0x165
     eac:	65656e00 	strbvs	r6, [r5, #-3584]!	; 0xe00
     eb0:	63735f64 	cmnvs	r3, #400	; 0x190
     eb4:	67006568 	strvs	r6, [r0, -r8, ror #10]
     eb8:	6f5f7465 	svcvs	0x005f7465
     ebc:	6f697470 	svcvs	0x00697470
     ec0:	4152006e 	cmpmi	r2, lr, rrx
     ec4:	56455f57 	undefined instruction 0x56455f57
     ec8:	00544e45 	subseq	r4, r4, r5, asr #28
     ecc:	6f727265 	svcvs	0x00727265
     ed0:	74735f72 	ldrbtvc	r5, [r3], #-3954	; 0xf72
     ed4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     ed8:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     edc:	5059545f 	subspl	r5, r9, pc, asr r4
     ee0:	5f515f45 	svcpl	0x00515f45
     ee4:	004c4c41 	subeq	r4, ip, r1, asr #24
     ee8:	5f574152 	svcpl	0x00574152
     eec:	4c4f4f42 	mcrrmi	15, 4, r4, pc, cr2
     ef0:	004e4145 	subeq	r4, lr, r5, asr #2
     ef4:	5f776172 	svcpl	0x00776172
     ef8:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
     efc:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xf74
     f00:	41520074 	cmpmi	r2, r4, ror r0
     f04:	59545f57 	ldmdbpl	r4, {r0, r1, r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     f08:	495f4550 	ldmdbmi	pc, {r4, r6, r8, sl, lr}^
     f0c:	5f454c44 	svcpl	0x00454c44
     f10:	4e4f5246 	cdpmi	2, 4, cr5, cr15, cr6, {2}
     f14:	56455f54 	undefined instruction 0x56455f54
     f18:	5f544e45 	svcpl	0x00544e45
     f1c:	54534f50 	ldrbpl	r4, [r3], #-3920	; 0xf50
     f20:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     f24:	5059545f 	subspl	r5, r9, pc, asr r4
     f28:	5f515f45 	svcpl	0x00515f45
     f2c:	46465542 	strbmi	r5, [r6], -r2, asr #10
     f30:	455f5245 	ldrbmi	r5, [pc, #-581]	; cf3 <DISABLE_IRQ+0xc73>
     f34:	5200444e 	andpl	r4, r0, #1308622848	; 0x4e000000
     f38:	545f5741 	ldrbpl	r5, [pc], #1857	; f40 <DISABLE_IRQ+0xec0>
     f3c:	5f455059 	svcpl	0x00455059
     f40:	49535f51 	ldmdbmi	r3, {r0, r4, r6, r8, r9, sl, fp, ip, lr}^
     f44:	465f455a 	undefined instruction 0x465f455a
     f48:	544e4f52 	strbpl	r4, [lr], #-3922	; 0xf52
     f4c:	74636100 	strbtvc	r6, [r3], #-256	; 0x100
     f50:	5f6c6175 	svcpl	0x006c6175
     f54:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
     f58:	74705f73 	ldrbtvc	r5, [r0], #-3955	; 0xf73
     f5c:	6c660072 	stclvs	0, cr0, [r6], #-456	; 0xfffffe38
     f60:	5f736761 	svcpl	0x00736761
     f64:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
     f68:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     f6c:	5059545f 	subspl	r5, r9, pc, asr r4
     f70:	45535f45 	ldrbmi	r5, [r3, #-3909]	; 0xf45
     f74:	4c415f4d 	mcrrmi	15, 4, r5, r1, cr13
     f78:	4152004c 	cmpmi	r2, ip, asr #32
     f7c:	44525f57 	ldrbmi	r5, [r2], #-3927	; 0xf57
     f80:	61720059 	cmnvs	r2, r9, asr r0
     f84:	64695f77 	strbtvs	r5, [r9], #-3959	; 0xf77
     f88:	632e656c 	teqvs	lr, #452984832	; 0x1b000000
     f8c:	615f7000 	cmpvs	pc, r0
     f90:	52006772 	andpl	r6, r0, #29884416	; 0x1c80000
     f94:	445f5741 	ldrbmi	r5, [pc], #1857	; f9c <DISABLE_IRQ+0xf1c>
     f98:	535f594c 	cmppl	pc, #1245184	; 0x130000
     f9c:	45505355 	ldrbmi	r5, [r0, #-853]	; 0x355
     fa0:	4445444e 	strbmi	r4, [r5], #-1102	; 0x44e
     fa4:	73617400 	cmnvc	r1, #0
     fa8:	65685f6b 	strbvs	r5, [r8, #-3947]!	; 0xf6b
     fac:	52006461 	andpl	r6, r0, #1627389952	; 0x61000000
     fb0:	505f5741 	subspl	r5, pc, r1, asr #14
     fb4:	5f444e45 	svcpl	0x00444e45
     fb8:	454d4954 	strbmi	r4, [sp, #-2388]	; 0x954
     fbc:	5f54554f 	svcpl	0x0054554f
     fc0:	50535553 	subspl	r5, r3, r3, asr r5
     fc4:	45444e45 	strbmi	r4, [r4, #-3653]	; 0xe45
     fc8:	72660044 	rsbvc	r0, r6, #68	; 0x44
     fcc:	735f6565 	cmpvc	pc, #423624704	; 0x19400000
     fd0:	6b636174 	blvs	18d95a8 <MEM_SIZE+0x10d95a8>
     fd4:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
     fd8:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
     fdc:	5f4d4554 	svcpl	0x004d4554
     fe0:	55424544 	strbpl	r4, [r2, #-1348]	; 0x544
     fe4:	66610047 	strbtvs	r0, [r1], -r7, asr #32
     fe8:	5f726574 	svcpl	0x00726574
     fec:	656c6564 	strbvs	r6, [ip, #-1380]!	; 0x564
     ff0:	6c5f6574 	cfldr64vs	mvdx6, [pc], {116}	; 0x74
     ff4:	00747369 	rsbseq	r7, r4, r9, ror #6
     ff8:	5f574152 	svcpl	0x00574152
     ffc:	454c4544 	strbmi	r4, [ip, #-1348]	; 0x544
    1000:	00444554 	subeq	r4, r4, r4, asr r5
    1004:	5f776172 	svcpl	0x00776172
    1008:	656c6469 	strbvs	r6, [ip, #-1129]!	; 0x469
    100c:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
    1010:	4152006b 	cmpmi	r2, fp, rrx
    1014:	45505f57 	ldrbmi	r5, [r0, #-3927]	; 0xf57
    1018:	5200444e 	andpl	r4, r0, #1308622848	; 0x4e000000
    101c:	445f5741 	ldrbmi	r5, [pc], #1857	; 1024 <DISABLE_IRQ+0xfa4>
    1020:	5200594c 	andpl	r5, r0, #1245184	; 0x130000
    1024:	545f5741 	ldrbpl	r5, [pc], #1857	; 102c <DISABLE_IRQ+0xfac>
    1028:	5f4b5341 	svcpl	0x004b5341
    102c:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
    1030:	73005355 	movwvc	r5, #853	; 0x355
    1034:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    1038:	65645f6d 	strbvs	r5, [r4, #-3949]!	; 0xf6d
    103c:	00677562 	rsbeq	r7, r7, r2, ror #10
    1040:	5f574152 	svcpl	0x00574152
    1044:	444e4550 	strbmi	r4, [lr], #-1360	; 0x550
    1048:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
    104c:	54554f45 	ldrbpl	r4, [r5], #-3909	; 0xf45
    1050:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
    1054:	564e495f 	undefined instruction 0x564e495f
    1058:	44494c41 	strbmi	r4, [r9], #-3137	; 0xc41
    105c:	4154535f 	cmpmi	r4, pc, asr r3
    1060:	52004554 	andpl	r4, r0, #352321536	; 0x15000000
    1064:	535f5741 	cmppl	pc, #17039360	; 0x1040000
    1068:	45505355 	ldrbmi	r5, [r0, #-853]	; 0x355
    106c:	4445444e 	strbmi	r4, [r5], #-1102	; 0x44e
    1070:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
    1074:	4e45505f 	mcrmi	0, 2, r5, cr5, cr15, {2}
    1078:	55535f44 	ldrbpl	r5, [r3, #-3908]	; 0xf44
    107c:	4e455053 	mcrmi	0, 2, r5, cr5, cr3, {2}
    1080:	00444544 	subeq	r4, r4, r4, asr #10
    1084:	5f776172 	svcpl	0x00776172
    1088:	656c6469 	strbvs	r6, [ip, #-1129]!	; 0x469
    108c:	6576655f 	ldrbvs	r6, [r6, #-1375]!	; 0x55f
    1090:	632e746e 	teqvs	lr, #1845493760	; 0x6e000000
    1094:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1098:	75716d5f 	ldrbvc	r6, [r1, #-3423]!	; 0xd5f
    109c:	2e657565 	cdpcs	5, 6, cr7, cr5, cr5, {3}
    10a0:	736d0063 	cmnvc	sp, #99	; 0x63
    10a4:	6e695f67 	cdpvs	15, 6, cr5, cr9, cr7, {3}
    10a8:	74726573 	ldrbtvc	r6, [r2], #-1395	; 0x573
    10ac:	765f7000 	ldrbvc	r7, [pc], -r0
    10b0:	0064696f 	rsbeq	r6, r4, pc, ror #18
    10b4:	5f574152 	svcpl	0x00574152
    10b8:	4555514d 	ldrbmi	r5, [r5, #-333]	; 0x14d
    10bc:	6d004555 	cfstr32vs	mvfx4, [r0, #-340]	; 0xfffffeac
    10c0:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    10c4:	41520065 	cmpmi	r2, r5, rrx
    10c8:	514d5f57 	cmppl	sp, r7, asr pc
    10cc:	45554555 	ldrbmi	r4, [r5, #-1365]	; 0x555
    10d0:	47534d5f 	undefined instruction 0x47534d5f
    10d4:	67736d00 	ldrbvs	r6, [r3, -r0, lsl #26]!
    10d8:	6e656c5f 	mcrvs	12, 3, r6, cr5, cr15, {2}
    10dc:	5f716d00 	svcpl	0x00716d00
    10e0:	6d727563 	cfldr64vs	mvdx7, [r2, #-396]!	; 0xfffffe74
    10e4:	00736773 	rsbseq	r6, r3, r3, ror r7
    10e8:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
    10ec:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    10f0:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
    10f4:	616e7265 	cmnvs	lr, r5, ror #4
    10f8:	61725f6c 	cmnvs	r2, ip, ror #30
    10fc:	716d5f77 	smcvc	54775	; 0xd5f7
    1100:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
    1104:	736d0064 	cmnvc	sp, #100	; 0x64
    1108:	74735f67 	ldrbtvc	r5, [r3], #-3943	; 0xf67
    110c:	00747261 	rsbseq	r7, r4, r1, ror #4
    1110:	5f776172 	svcpl	0x00776172
    1114:	725f716d 	subsvc	r7, pc, #1073741851	; 0x4000001b
    1118:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    111c:	72006576 	andvc	r6, r0, #494927872	; 0x1d800000
    1120:	6d5f7761 	ldclvs	7, cr7, [pc, #-388]	; 0xfffffe7c
    1124:	6e695f71 	mcrvs	15, 3, r5, cr9, cr1, {3}
    1128:	6d007469 	cfstrsvs	mvf7, [r0, #-420]	; 0xfffffe5c
    112c:	705f6773 	subsvc	r6, pc, r3, ror r7
    1130:	006f6972 	rsbeq	r6, pc, r2, ror r9
    1134:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    1138:	665f636f 	ldrbvs	r6, [pc], -pc, ror #6
    113c:	73006e75 	movwvc	r6, #3701	; 0xe75
    1140:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xe65
    1144:	6c625f64 	stclvs	15, cr5, [r2], #-400	; 0xfffffe70
    1148:	5f6b636f 	svcpl	0x006b636f
    114c:	0067736d 	rsbeq	r7, r7, sp, ror #6
    1150:	52455355 	subpl	r5, r5, #1409286145	; 0x54000001
    1154:	4552465f 	ldrbmi	r4, [r2, #-1631]	; 0x65f
    1158:	41520045 	cmpmi	r2, r5, asr #32
    115c:	33535f57 	cmpcc	r3, #348	; 0x15c
    1160:	75710032 	ldrbvc	r0, [r1, #-50]!	; 0x32
    1164:	5f657565 	svcpl	0x00657565
    1168:	6b616570 	blvs	185a730 <MEM_SIZE+0x105a730>
    116c:	67736d5f 	undefined instruction 0x67736d5f
    1170:	7a69735f 	bvc	1a5def4 <MEM_SIZE+0x125def4>
    1174:	5f6d0065 	svcpl	0x006d0065
    1178:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    117c:	65726600 	ldrbvs	r6, [r2, #-1536]!	; 0x600
    1180:	75665f65 	strbvc	r5, [r6, #-3941]!	; 0xf65
    1184:	5355006e 	cmppl	r5, #110	; 0x6e
    1188:	4d5f5245 	lfmmi	f5, 2, [pc, #-276]	; (ldclmi 2, cr5, [pc, #-276])	; 0xfffffeec
    118c:	4f4c4c41 	svcmi	0x004c4c41
    1190:	61720043 	cmnvs	r2, r3, asr #32
    1194:	716d5f77 	smcvc	54775	; 0xd5f7
    1198:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    119c:	756c665f 	strbvc	r6, [ip, #-1631]!	; 0x65f
    11a0:	6d006873 	stcvs	8, cr6, [r0, #-460]	; 0xfffffe34
    11a4:	0073745f 	rsbseq	r7, r3, pc, asr r4
    11a8:	5f776172 	svcpl	0x00776172
    11ac:	6575716d 	ldrbvs	r7, [r5, #-365]!	; 0x16d
    11b0:	675f6575 	undefined instruction 0x675f6575
    11b4:	695f7465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^
    11b8:	726f666e 	rsbvc	r6, pc, #115343360	; 0x6e00000
    11bc:	6974616d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    11c0:	72006e6f 	andvc	r6, r0, #1776	; 0x6f0
    11c4:	6d5f7761 	ldclvs	7, cr7, [pc, #-388]	; 0xfffffe7c
    11c8:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    11cc:	65645f65 	strbvs	r5, [r4, #-3941]!	; 0xf65
    11d0:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0x56c
    11d4:	5f716d00 	svcpl	0x00716d00
    11d8:	6d78616d 	ldfvse	f6, [r8, #-436]!	; 0xfffffe4c
    11dc:	72006773 	andvc	r6, r0, #30146560	; 0x1cc0000
    11e0:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
    11e4:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0x74
    11e8:	78746d6c 	ldmdavc	r4!, {r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    11ec:	6f006263 	svcvs	0x00006263
    11f0:	7270646c 	rsbsvc	r6, r0, #1811939328	; 0x6c000000
    11f4:	72700069 	rsbsvc	r0, r0, #105	; 0x69
    11f8:	72007665 	andvc	r7, r0, #105906176	; 0x6500000
    11fc:	6d5f7761 	ldclvs	7, cr7, [pc, #-388]	; 0xfffffe7c
    1200:	78657475 	stmdavc	r5!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
    1204:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
    1208:	00657465 	rsbeq	r7, r5, r5, ror #8
    120c:	5f776172 	svcpl	0x00776172
    1210:	6b736174 	blvs	1cd97e8 <MEM_SIZE+0x14d97e8>
    1214:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0x65f
    1218:	756d5f65 	strbvc	r5, [sp, #-3941]!	; 0xf65
    121c:	00786574 	rsbseq	r6, r8, r4, ror r5
    1220:	705f6968 	subsvc	r6, pc, r8, ror #18
    1224:	72006972 	andvc	r6, r0, #1867776	; 0x1c8000
    1228:	6d5f7761 	ldclvs	7, cr7, [pc, #-388]	; 0xfffffe7c
    122c:	78657475 	stmdavc	r5!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
    1230:	6300632e 	movwvs	r6, #814	; 0x32e
    1234:	705f6768 	subsvc	r6, pc, r8, ror #14
    1238:	6d5f6972 	ldclvs	9, cr6, [pc, #-456]	; 0xfffffe38
    123c:	78657475 	stmdavc	r5!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
    1240:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
    1244:	00697270 	rsbeq	r7, r9, r0, ror r2
    1248:	6574756d 	ldrbvs	r7, [r4, #-1389]!	; 0x56d
    124c:	74705f78 	ldrbtvc	r5, [r0], #-3960	; 0xf78
    1250:	756d0072 	strbvc	r0, [sp, #-114]!	; 0x72
    1254:	5f786574 	svcpl	0x00786574
    1258:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
    125c:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    1260:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xe61
    1264:	72726500 	rsbsvc	r6, r2, #0
    1268:	7200726f 	andvc	r7, r0, #-268435450	; 0xf0000006
    126c:	6d5f7761 	ldclvs	7, cr7, [pc, #-388]	; 0xfffffe7c
    1270:	78657475 	stmdavc	r5!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
    1274:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
    1278:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    127c:	74756d5f 	ldrbtvc	r6, [r5], #-3423	; 0xd5f
    1280:	635f7865 	cmpvs	pc, #6619136	; 0x650000
    1284:	74616572 	strbtvc	r6, [r1], #-1394	; 0x572
    1288:	746d0065 	strbtvc	r0, [sp], #-101	; 0x65
    128c:	68635f78 	stmdavs	r3!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1290:	72705f67 	rsbsvc	r5, r0, #412	; 0x19c
    1294:	69660069 	stmdbvs	r6!, {r0, r3, r5, r6}^
    1298:	5f747372 	svcpl	0x00747372
    129c:	636f6c62 	cmnvs	pc, #25088	; 0x6200
    12a0:	61745f6b 	cmnvs	r4, fp, ror #30
    12a4:	6e006b73 	vmovvs.16	d0[1], r6
    12a8:	5f747865 	svcpl	0x00747865
    12ac:	00626374 	rsbeq	r6, r2, r4, ror r3
    12b0:	5f776172 	svcpl	0x00776172
    12b4:	6574756d 	ldrbvs	r7, [r4, #-1389]!	; 0x56d
    12b8:	65675f78 	strbvs	r5, [r7, #-3960]!	; 0xf78
    12bc:	6f6c0074 	svcvs	0x006c0074
    12c0:	72705f77 	rsbsvc	r5, r0, #476	; 0x1dc
    12c4:	656e0069 	strbvs	r0, [lr, #-105]!	; 0x69
    12c8:	6d5f7478 	cfldrdvs	mvd7, [pc, #-480]	; 0xfffffe20
    12cc:	62637874 	rsbvs	r7, r3, #7602176	; 0x740000
    12d0:	6c657200 	sfmvs	f7, 2, [r5]	; (stclvs 2, cr7, [r5])
    12d4:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
    12d8:	74756d5f 	ldrbtvc	r6, [r5], #-3423	; 0xd5f
    12dc:	69007865 	stmdbvs	r0, {r0, r2, r5, r6, fp, ip, sp, lr}
    12e0:	5f656c64 	svcpl	0x00656c64
    12e4:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    12e8:	6974006b 	ldmdbvs	r4!, {r0, r1, r3, r5, r6}^
    12ec:	5f72656d 	svcpl	0x0072656d
    12f0:	64616568 	strbtvs	r6, [r1], #-1384	; 0x568
    12f4:	61657000 	cmnvs	r5, r0
    12f8:	76655f6b 	strbtvc	r5, [r5], -fp, ror #30
    12fc:	73746e65 	cmnvc	r4, #1616	; 0x650
    1300:	73617400 	cmnvc	r1, #0
    1304:	5f305f6b 	svcpl	0x00305f6b
    1308:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
    130c:	72007374 	andvc	r7, r0, #-805306367	; 0xd0000001
    1310:	6f5f7761 	svcvs	0x005f7761
    1314:	63615f73 	cmnvs	r1, #460	; 0x1cc
    1318:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0x974
    131c:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1320:	6165725f 	cmnvs	r5, pc, asr r2
    1324:	715f7964 	cmpvc	pc, r4, ror #18
    1328:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    132c:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1330:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
    1334:	5f305f6b 	svcpl	0x00305f6b
    1338:	006a626f 	rsbeq	r6, sl, pc, ror #4
    133c:	5f776172 	svcpl	0x00776172
    1340:	2e6a626f 	cdpcs	2, 6, cr6, cr10, cr15, {3}
    1344:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
    1348:	736d5f74 	cmnvc	sp, #464	; 0x1d0
    134c:	75665f67 	strbvc	r5, [r6, #-3943]!	; 0xf67
    1350:	74006c6c 	strvc	r6, [r0], #-3180	; 0xc6c
    1354:	5f6b7361 	svcpl	0x006b7361
    1358:	74735f30 	ldrbtvc	r5, [r3], #-3888	; 0xf30
    135c:	006b6361 	rsbeq	r6, fp, r1, ror #6
    1360:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    1364:	65735f72 	ldrbvs	r5, [r3, #-3954]!	; 0xf72
    1368:	5645006d 	strbpl	r0, [r5], -sp, rrx
    136c:	5f544e45 	svcpl	0x00544e45
    1370:	55525453 	ldrbpl	r5, [r2, #-1107]	; 0x453
    1374:	68005443 	stmdavs	r0, {r0, r1, r6, sl, ip, lr}
    1378:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    137c:	76655f65 	strbtvc	r5, [r5], -r5, ror #30
    1380:	00746e65 	rsbseq	r6, r4, r5, ror #28
    1384:	5f776172 	svcpl	0x00776172
    1388:	656c6469 	strbvs	r6, [ip, #-1129]!	; 0x469
    138c:	6a626f5f 	bvs	189d110 <MEM_SIZE+0x109d110>
    1390:	73617400 	cmnvc	r1, #0
    1394:	65725f6b 	ldrbvs	r5, [r2, #-3947]!	; 0xf6b
    1398:	5f796461 	svcpl	0x00796461
    139c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
    13a0:	4a424f00 	bmi	1094fa8 <MEM_SIZE+0x894fa8>
    13a4:	5f544345 	svcpl	0x00544345
    13a8:	5f544e49 	svcpl	0x00544e49
    13ac:	0047534d 	subeq	r5, r7, sp, asr #6
    13b0:	6b736174 	blvs	1cd9988 <MEM_SIZE+0x14d9988>
    13b4:	655f305f 	ldrbvs	r3, [pc, #-95]	; 135d <DISABLE_IRQ+0x12dd>
    13b8:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
    13bc:	75715f73 	ldrbvc	r5, [r1, #-3955]!	; 0xf73
    13c0:	00657565 	rsbeq	r7, r5, r5, ror #10
    13c4:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
    13c8:	61645f74 	smcvs	17908	; 0x45f4
    13cc:	68006174 	stmdavs	r0, {r2, r4, r5, r6, r8, sp, lr}
    13d0:	65686769 	strbvs	r6, [r8, #-1897]!	; 0x769
    13d4:	705f7473 	subsvc	r7, pc, r3, ror r4
    13d8:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    13dc:	00797469 	rsbseq	r7, r9, r9, ror #8
    13e0:	6b736174 	blvs	1cd99b8 <MEM_SIZE+0x14d99b8>
    13e4:	655f305f 	ldrbvs	r3, [pc, #-95]	; 138d <DISABLE_IRQ+0x130d>
    13e8:	00746978 	rsbseq	r6, r4, r8, ror r9
    13ec:	5f776172 	svcpl	0x00776172
    13f0:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    13f4:	74635f72 	strbtvc	r5, [r3], #-3954	; 0xf72
    13f8:	74006c72 	strvc	r6, [r0], #-3186	; 0xc72
    13fc:	5f6b7361 	svcpl	0x006b7361
    1400:	76655f30 	uqaddsubxvc	r5, r5, r0
    1404:	5f746e65 	svcpl	0x00746e65
    1408:	00646e65 	rsbeq	r6, r4, r5, ror #28
    140c:	656c6469 	strbvs	r6, [ip, #-1129]!	; 0x469
    1410:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
    1414:	78655f6b 	stmdavc	r5!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1418:	74007469 	strvc	r7, [r0], #-1129	; 0x469
    141c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    1420:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
    1424:	74735f6b 	ldrbtvc	r5, [r3], #-3947	; 0xf6b
    1428:	006b6361 	rsbeq	r6, fp, r1, ror #6
    142c:	6b736174 	blvs	1cd9a04 <MEM_SIZE+0x14d9a04>
    1430:	7469625f 	strbtvc	r6, [r9], #-607	; 0x25f
    1434:	70616d5f 	rsbvc	r6, r1, pc, asr sp
    1438:	73617400 	cmnvc	r1, #0
    143c:	5f305f6b 	svcpl	0x00305f6b
    1440:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
    1444:	65685f74 	strbvs	r5, [r8, #-3956]!	; 0xf74
    1448:	54006461 	strpl	r6, [r0], #-1121	; 0x461
    144c:	5f4b5341 	svcpl	0x004b5341
    1450:	56455f30 	undefined instruction 0x56455f30
    1454:	5f544e45 	svcpl	0x00544e45
    1458:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0x954
    145c:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1460:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    1464:	635f7265 	cmpvs	pc, #1342177286	; 0x50000006
    1468:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    146c:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1470:	6369745f 	cmnvs	r9, #1593835520	; 0x5f000000
    1474:	6f635f6b 	svcvs	0x00635f6b
    1478:	00746e75 	rsbseq	r6, r4, r5, ror lr
    147c:	6b636974 	blvs	18dba54 <MEM_SIZE+0x10dba54>
    1480:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
    1484:	74735f6b 	ldrbtvc	r5, [r3], #-3947	; 0xf6b
    1488:	006b6361 	rsbeq	r6, fp, r1, ror #6
    148c:	4e455645 	cdpmi	6, 4, cr5, cr5, cr5, {2}
    1490:	41485f54 	cmpmi	r8, r4, asr pc
    1494:	45444c4e 	strbmi	r4, [r4, #-3150]	; 0xc4e
    1498:	61740052 	cmnvs	r4, r2, asr r0
    149c:	305f6b73 	subscc	r6, pc, r3, ror fp
    14a0:	6576655f 	ldrbvs	r6, [r6, #-1375]!	; 0x55f
    14a4:	685f746e 	ldmdavs	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    14a8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    14ac:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
    14b0:	525f5741 	subspl	r5, pc, #17039360	; 0x1040000
    14b4:	515f4e55 	cmppl	pc, r5, asr lr
    14b8:	45554555 	ldrbmi	r4, [r5, #-1365]	; 0x555
    14bc:	65726600 	ldrbvs	r6, [r2, #-1536]!	; 0x600
    14c0:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
    14c4:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
    14c8:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
    14cc:	67736d5f 	undefined instruction 0x67736d5f
    14d0:	67696800 	strbvs	r6, [r9, -r0, lsl #16]!
    14d4:	65725f68 	ldrbvs	r5, [r2, #-3944]!	; 0xf68
    14d8:	5f796461 	svcpl	0x00796461
    14dc:	006a626f 	rsbeq	r6, sl, pc, ror #4
    14e0:	6b636974 	blvs	18dbab8 <MEM_SIZE+0x10dbab8>
    14e4:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
    14e8:	626f5f6b 	rsbvs	r5, pc, #428	; 0x1ac
    14ec:	6974006a 	ldmdbvs	r4!, {r1, r3, r5, r6}^
    14f0:	735f6b63 	cmpvc	pc, #101376	; 0x18c00
    14f4:	70616d65 	rsbvc	r6, r1, r5, ror #26
    14f8:	65726f68 	ldrbvs	r6, [r2, #-3944]!	; 0xf68
    14fc:	6a626f5f 	bvs	189d280 <MEM_SIZE+0x109d280>
    1500:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1504:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    1508:	6f5f7265 	svcvs	0x005f7265
    150c:	6d006a62 	vstrvs	s12, [r0, #-392]	; 0xfffffe78
    1510:	655f6773 	ldrbvs	r6, [pc, #-1907]	; da5 <DISABLE_IRQ+0xd25>
    1514:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
    1518:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
    151c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    1520:	65766500 	ldrbvs	r6, [r6, #-1280]!	; 0x500
    1524:	665f746e 	ldrbvs	r7, [pc], -lr, ror #8
    1528:	7367616c 	cmnvc	r7, #27
    152c:	73696c00 	cmnvc	r9, #0
    1530:	65645f74 	strbvs	r5, [r4, #-3956]!	; 0xf74
    1534:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0x56c
    1538:	74696200 	strbtvc	r6, [r9], #-512	; 0x200
    153c:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
    1540:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1544:	6b61775f 	blvs	185f2c8 <MEM_SIZE+0x105f2c8>
    1548:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
    154c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
    1550:	6d657200 	sfmvs	f7, 2, [r5]	; (stclvs 2, cr7, [r5])
    1554:	5f65766f 	svcpl	0x0065766f
    1558:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
    155c:	696c5f79 	stmdbvs	ip!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1560:	77007473 	smlsdxvc	r0, r3, r4, r7
    1564:	5f656b61 	svcpl	0x00656b61
    1568:	646e6573 	strbtvs	r6, [lr], #-1395	; 0x573
    156c:	67736d5f 	undefined instruction 0x67736d5f
    1570:	64646100 	strbtvs	r6, [r4], #-256	; 0x100
    1574:	6165725f 	cmnvs	r5, pc, asr r2
    1578:	6c5f7964 	mrrcvs	9, 6, r7, pc, cr4
    157c:	00747369 	rsbseq	r7, r4, r9, ror #6
    1580:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
    1584:	6174735f 	cmnvs	r4, pc, asr r3
    1588:	62007472 	andvs	r7, r0, #1912602624	; 0x72000000
    158c:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
    1590:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    1594:	6f6c6200 	svcvs	0x006c6200
    1598:	635f6b63 	cmpvs	pc, #101376	; 0x18c00
    159c:	6f6d6d6f 	svcvs	0x006d6d6f
    15a0:	626f5f6e 	rsbvs	r5, pc, #440	; 0x1b8
    15a4:	6461006a 	strbtvs	r0, [r1], #-106	; 0x6a
    15a8:	65725f64 	ldrbvs	r5, [r2, #-3940]!	; 0xf64
    15ac:	5f796461 	svcpl	0x00796461
    15b0:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
    15b4:	646e655f 	strbtvs	r6, [lr], #-1375	; 0x55f
    15b8:	6d697400 	cfstrdvs	mvd7, [r9]
    15bc:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
    15c0:	61686300 	cmnvs	r8, r0, lsl #6
    15c4:	5f65676e 	svcpl	0x0065676e
    15c8:	646e6570 	strbtvs	r6, [lr], #-1392	; 0x570
    15cc:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
    15d0:	72705f74 	rsbsvc	r5, r0, #464	; 0x1d0
    15d4:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    15d8:	64007974 	strvs	r7, [r0], #-2420	; 0x974
    15dc:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xc65
    15e0:	65705f65 	ldrbvs	r5, [r0, #-3941]!	; 0xf65
    15e4:	6f5f646e 	svcvs	0x005f646e
    15e8:	72006a62 	andvc	r6, r0, #401408	; 0x62000
    15ec:	705f7761 	subsvc	r7, pc, r1, ror #14
    15f0:	2e646e65 	cdpcs	14, 6, cr6, cr4, cr5, {3}
    15f4:	65700063 	ldrbvs	r0, [r0, #-99]!	; 0x63
    15f8:	745f646e 	ldrbvc	r6, [pc], #1134	; 1600 <DISABLE_IRQ+0x1580>
    15fc:	5f6b7361 	svcpl	0x006b7361
    1600:	656b6177 	strbvs	r6, [fp, #-375]!	; 0x177
    1604:	0070755f 	rsbseq	r7, r0, pc, asr r5
    1608:	5f646461 	svcpl	0x00646461
    160c:	705f6f74 	subsvc	r6, pc, r4, ror pc
    1610:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1614:	5f797469 	svcpl	0x00797469
    1618:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
    161c:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
    1620:	4f5f425f 	svcmi	0x005f425f
    1624:	6177004b 	cmnvs	r7, fp, asr #32
    1628:	735f656b 	cmpvc	pc, #448790528	; 0x1ac00000
    162c:	5f646e65 	svcpl	0x00646e65
    1630:	5f67736d 	svcpl	0x0067736d
    1634:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    1638:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
    163c:	545f425f 	ldrbpl	r4, [pc], #607	; 1644 <DISABLE_IRQ+0x15c4>
    1640:	4f454d49 	svcmi	0x00454d49
    1644:	52005455 	andpl	r5, r0, #1426063360	; 0x55000000
    1648:	425f5741 	subsmi	r5, pc, #17039360	; 0x1040000
    164c:	4c45445f 	cfstrdmi	mvd4, [r5], {95}	; 0x5f
    1650:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
    1654:	6f745f65 	svcvs	0x00745f65
    1658:	6165725f 	cmnvs	r5, pc, asr r2
    165c:	6c5f7964 	mrrcvs	9, 6, r7, pc, cr4
    1660:	5f747369 	svcpl	0x00747369
    1664:	00646e65 	rsbeq	r6, r4, r5, ror #28
    1668:	5f776172 	svcpl	0x00776172
    166c:	646e6570 	strbtvs	r6, [lr], #-1392	; 0x570
    1670:	6a626f5f 	bvs	189d3f4 <MEM_SIZE+0x109d3f4>
    1674:	00746365 	rsbseq	r6, r4, r5, ror #6
    1678:	5f746567 	svcpl	0x00746567
    167c:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
    1680:	61745f79 	cmnvs	r4, r9, ror pc
    1684:	72006b73 	andvc	r6, r0, #117760	; 0x1cc00
    1688:	715f6e75 	cmpvc	pc, r5, ror lr
    168c:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1690:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1694:	64610074 	strbtvs	r0, [r1], #-116	; 0x74
    1698:	65725f64 	ldrbvs	r5, [r2, #-3940]!	; 0xf64
    169c:	5f796461 	svcpl	0x00796461
    16a0:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
    16a4:	6165685f 	cmnvs	r5, pc, asr r8
    16a8:	41520064 	cmpmi	r2, r4, rrx
    16ac:	5f425f57 	svcpl	0x00425f57
    16b0:	524f4241 	subpl	r4, pc, #268435460	; 0x10000004
    16b4:	6c650054 	stclvs	0, cr0, [r5], #-336	; 0xfffffeb0
    16b8:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
    16bc:	616d0074 	smcvs	53252	; 0xd004
    16c0:	736d5f78 	cmnvc	sp, #480	; 0x1e0
    16c4:	69735f67 	ldmdbvs	r3!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    16c8:	6d00657a 	cfstr32vs	mvfx6, [r0, #-488]	; 0xfffffe18
    16cc:	736d7861 	cmnvc	sp, #6356992	; 0x610000
    16d0:	7369007a 	cmnvc	r9, #122	; 0x7a
    16d4:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
    16d8:	625f6575 	subsvs	r6, pc, #490733568	; 0x1d400000
    16dc:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    16e0:	72665f72 	rsbvc	r5, r6, #456	; 0x1c8
    16e4:	52006565 	andpl	r6, r0, #423624704	; 0x19400000
    16e8:	515f5741 	cmppl	pc, r1, asr #14
    16ec:	45554555 	ldrbmi	r4, [r5, #-1365]	; 0x555
    16f0:	4655425f 	undefined instruction 0x4655425f
    16f4:	00524546 	subseq	r4, r2, r6, asr #10
    16f8:	5f776172 	svcpl	0x00776172
    16fc:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    1700:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xf65
    1704:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1708:	6572635f 	ldrbvs	r6, [r2, #-863]!	; 0x35f
    170c:	00657461 	rsbeq	r7, r5, r1, ror #8
    1710:	5f67736d 	svcpl	0x0067736d
    1714:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1718:	72007265 	andvc	r7, r0, #1342177286	; 0x50000006
    171c:	715f7761 	cmpvc	pc, r1, ror #14
    1720:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1724:	6675625f 	undefined instruction 0x6675625f
    1728:	5f726566 	svcpl	0x00726566
    172c:	5f646e65 	svcpl	0x00646e65
    1730:	74736f70 	ldrbtvc	r6, [r3], #-3952	; 0xf70
    1734:	67736d00 	ldrbvs	r6, [r3, -r0, lsl #26]!
    1738:	5f6f745f 	svcpl	0x006f745f
    173c:	5f646e65 	svcpl	0x00646e65
    1740:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1744:	66007265 	strvs	r7, [r0], -r5, ror #4
    1748:	66756272 	undefined instruction 0x66756272
    174c:	72007a73 	andvc	r7, r0, #471040	; 0x73000
    1750:	715f7761 	cmpvc	pc, r1, ror #14
    1754:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1758:	6675625f 	undefined instruction 0x6675625f
    175c:	5f726566 	svcpl	0x00726566
    1760:	73756c66 	cmnvc	r5, #26112	; 0x6600
    1764:	61740068 	cmnvs	r4, r8, rrx
    1768:	72006c69 	andvc	r6, r0, #26880	; 0x6900
    176c:	715f7761 	cmpvc	pc, r1, ror #14
    1770:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1774:	6675625f 	undefined instruction 0x6675625f
    1778:	5f726566 	svcpl	0x00726566
    177c:	65636572 	strbvs	r6, [r3, #-1394]!	; 0x572
    1780:	00657669 	rsbeq	r7, r5, r9, ror #12
    1784:	7367736d 	cmnvc	r7, #-1275068415	; 0xb4000001
    1788:	706f007a 	rsbvc	r0, pc, sl, ror r0
    178c:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xf74
    1790:	6d5f646e 	cfldrdvs	mvd6, [pc, #-440]	; 0xfffffe48
    1794:	6f687465 	svcvs	0x00687465
    1798:	73690064 	cmnvc	r9, #100	; 0x64
    179c:	6675625f 	undefined instruction 0x6675625f
    17a0:	5f726566 	svcpl	0x00726566
    17a4:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xd65
    17a8:	61720079 	cmnvs	r2, r9, ror r0
    17ac:	75715f77 	ldrbvc	r5, [r1, #-3959]!	; 0xf77
    17b0:	5f657565 	svcpl	0x00657565
    17b4:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    17b8:	632e7265 	teqvs	lr, #1342177286	; 0x50000006
    17bc:	74636100 	strbtvc	r6, [r3], #-256	; 0x100
    17c0:	62007a73 	andvs	r7, r0, #471040	; 0x73000
    17c4:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    17c8:	6f745f72 	svcvs	0x00745f72
    17cc:	67736d5f 	undefined instruction 0x67736d5f
    17d0:	65757100 	ldrbvs	r7, [r5, #-256]!	; 0x100
    17d4:	625f6575 	subsvs	r6, pc, #490733568	; 0x1d400000
    17d8:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    17dc:	6f705f72 	svcvs	0x00705f72
    17e0:	72007473 	andvc	r7, r0, #1929379840	; 0x73000000
    17e4:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    17e8:	735f6576 	cmpvc	pc, #494927872	; 0x1d800000
    17ec:	00657a69 	rsbeq	r7, r5, r9, ror #20
    17f0:	616e5f70 	smcvs	58864	; 0xe5f0
    17f4:	7100656d 	tstvc	r0, sp, ror #10
    17f8:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    17fc:	6675625f 	undefined instruction 0x6675625f
    1800:	5f726566 	svcpl	0x00726566
    1804:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    1808:	65757100 	ldrbvs	r7, [r5, #-256]!	; 0x100
    180c:	625f6575 	subsvs	r6, pc, #490733568	; 0x1d400000
    1810:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    1814:	72665f72 	rsbvc	r5, r6, #456	; 0x1c8
    1818:	735f6565 	cmpvc	pc, #423624704	; 0x19400000
    181c:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1820:	5f776172 	svcpl	0x00776172
    1824:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    1828:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xf65
    182c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1830:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
    1834:	666e695f 	undefined instruction 0x666e695f
    1838:	616d726f 	cmnvs	sp, pc, ror #4
    183c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1840:	6d657200 	sfmvs	f7, 2, [r5]	; (stclvs 2, cr7, [r5])
    1844:	72007a73 	andvc	r7, r0, #471040	; 0x73000
    1848:	715f7761 	cmpvc	pc, r1, ror #14
    184c:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1850:	6675625f 	undefined instruction 0x6675625f
    1854:	5f726566 	svcpl	0x00726566
    1858:	656c6564 	strbvs	r6, [ip, #-1380]!	; 0x564
    185c:	6d006574 	cfstr32vs	mvfx6, [r0, #-464]	; 0xfffffe30
    1860:	695f6773 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r8, r9, sl, sp, lr}^
    1864:	726f666e 	rsbvc	r6, pc, #115343360	; 0x6e00000
    1868:	6974616d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    186c:	72006e6f 	andvc	r6, r0, #1776	; 0x6f0
    1870:	715f7761 	cmpvc	pc, r1, ror #14
    1874:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1878:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
    187c:	00657465 	rsbeq	r7, r5, r5, ror #8
    1880:	5f776172 	svcpl	0x00776172
    1884:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    1888:	72665f65 	rsbvc	r5, r6, #404	; 0x194
    188c:	5f746e6f 	svcpl	0x00746e6f
    1890:	74736f70 	ldrbtvc	r6, [r3], #-3952	; 0xf70
    1894:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1898:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
    189c:	735f6575 	cmpvc	pc, #490733568	; 0x1d400000
    18a0:	5f646e65 	svcpl	0x00646e65
    18a4:	69746f6e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    18a8:	52007966 	andpl	r7, r0, #1671168	; 0x198000
    18ac:	515f5741 	cmppl	pc, r1, asr #14
    18b0:	45554555 	ldrbmi	r4, [r5, #-1365]	; 0x555
    18b4:	736d7000 	cmnvc	sp, #0
    18b8:	75710067 	ldrbvc	r0, [r1, #-103]!	; 0x67
    18bc:	5f657565 	svcpl	0x00657565
    18c0:	00646e65 	rsbeq	r6, r4, r5, ror #28
    18c4:	5f776172 	svcpl	0x00776172
    18c8:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    18cc:	72635f65 	rsbvc	r5, r3, #404	; 0x194
    18d0:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0x165
    18d4:	73757300 	cmnvc	r5, #0
    18d8:	646e6570 	strbtvs	r6, [lr], #-1392	; 0x570
    18dc:	746e655f 	strbtvc	r6, [lr], #-1375	; 0x55f
    18e0:	72007972 	andvc	r7, r0, #1867776	; 0x1c8000
    18e4:	715f7761 	cmpvc	pc, r1, ror #14
    18e8:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    18ec:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
    18f0:	666e695f 	undefined instruction 0x666e695f
    18f4:	616d726f 	cmnvs	sp, pc, ror #4
    18f8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    18fc:	67736d00 	ldrbvs	r6, [r3, -r0, lsl #26]!
    1900:	7200715f 	andvc	r7, r0, #-1073741801	; 0xc0000017
    1904:	715f7761 	cmpvc	pc, r1, ror #14
    1908:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    190c:	646e655f 	strbtvs	r6, [lr], #-1375	; 0x55f
    1910:	736f705f 	cmnvc	pc, #95	; 0x5f
    1914:	55510074 	ldrbpl	r0, [r1, #-116]	; 0x74
    1918:	5f455545 	svcpl	0x00455545
    191c:	444e4553 	strbmi	r4, [lr], #-1363	; 0x553
    1920:	544f4e5f 	strbpl	r4, [pc], #3679	; 1928 <DISABLE_IRQ+0x18a8>
    1924:	00594649 	subseq	r4, r9, r9, asr #12
    1928:	5f776172 	svcpl	0x00776172
    192c:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    1930:	6c615f65 	stclvs	15, cr5, [r1], #-404	; 0xfffffe6c
    1934:	6f705f6c 	svcvs	0x00705f6c
    1938:	71007473 	tstvc	r0, r3, ror r4
    193c:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1940:	6174735f 	cmnvs	r4, pc, asr r3
    1944:	52007472 	andpl	r7, r0, #1912602624	; 0x72000000
    1948:	4d5f5741 	ldclmi	7, cr5, [pc, #-260]	; 0xfffffefc
    194c:	495f4753 	ldmdbmi	pc, {r0, r1, r4, r6, r8, r9, sl, lr}^
    1950:	004f464e 	subeq	r4, pc, lr, asr #12
    1954:	5f776172 	svcpl	0x00776172
    1958:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    195c:	00632e65 	rsbeq	r2, r3, r5, ror #28
    1960:	5f776172 	svcpl	0x00776172
    1964:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    1968:	6c665f65 	stclvs	15, cr5, [r6], #-404	; 0xfffffe6c
    196c:	00687375 	rsbeq	r7, r8, r5, ror r3
    1970:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    1974:	5f746e65 	svcpl	0x00746e65
    1978:	626d756e 	rsbvs	r7, sp, #461373440	; 0x1b800000
    197c:	00737265 	rsbseq	r7, r3, r5, ror #4
    1980:	5f776172 	svcpl	0x00776172
    1984:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    1988:	65725f65 	ldrbvs	r5, [r2, #-3941]!	; 0xf65
    198c:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    1990:	706f0065 	rsbvc	r0, pc, r5, rrx
    1994:	61775f74 	cmnvs	r7, r4, ror pc
    1998:	615f656b 	cmpvs	pc, fp, ror #10
    199c:	6e006c6c 	cdpvs	12, 0, cr6, cr0, cr12, {3}
    19a0:	6669746f 	strbtvs	r7, [r9], -pc, ror #8
    19a4:	75665f79 	strbvc	r5, [r6, #-3961]!	; 0xf79
    19a8:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    19ac:	52006e6f 	andpl	r6, r0, #1776	; 0x6f0
    19b0:	4d5f5741 	ldclmi	7, cr5, [pc, #-260]	; 0xfffffefc
    19b4:	515f4753 	cmppl	pc, r3, asr r7
    19b8:	6d5f7000 	ldclvs	0, cr7, [pc]
    19bc:	71006773 	tstvc	r0, r3, ror r7
    19c0:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    19c4:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0x65f
    19c8:	736d5f65 	cmnvc	sp, #404	; 0x194
    19cc:	69735f67 	ldmdbvs	r3!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    19d0:	7000657a 	andvc	r6, r0, sl, ror r5
    19d4:	67736d5f 	undefined instruction 0x67736d5f
    19d8:	5f700031 	svcpl	0x00700031
    19dc:	3267736d 	rsbcc	r7, r7, #-1275068415	; 0xb4000001
    19e0:	67736d00 	ldrbvs	r6, [r3, -r0, lsl #26]!
    19e4:	706d745f 	rsbvc	r7, sp, pc, asr r4
    19e8:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    19ec:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
    19f0:	735f6575 	cmpvc	pc, #490733568	; 0x1d400000
    19f4:	2e657a69 	vnmulcs.f32	s15, s10, s19
    19f8:	61720063 	cmnvs	r2, r3, rrx
    19fc:	75715f77 	ldrbvc	r5, [r1, #-3959]!	; 0xf77
    1a00:	5f657565 	svcpl	0x00657565
    1a04:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    1a08:	6572635f 	ldrbvs	r6, [r2, #-863]!	; 0x35f
    1a0c:	00657461 	rsbeq	r7, r5, r1, ror #8
    1a10:	5f776172 	svcpl	0x00776172
    1a14:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    1a18:	69735f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    1a1c:	665f657a 	undefined instruction 0x665f657a
    1a20:	746e6f72 	strbtvc	r6, [lr], #-3954	; 0xf72
    1a24:	736f705f 	cmnvc	pc, #95	; 0x5f
    1a28:	61720074 	cmnvs	r2, r4, ror r0
    1a2c:	75715f77 	ldrbvc	r5, [r1, #-3959]!	; 0xf77
    1a30:	5f657565 	svcpl	0x00657565
    1a34:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    1a38:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
    1a3c:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0x965
    1a40:	6d5f7000 	ldclvs	0, cr7, [pc]
    1a44:	695f6773 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r8, r9, sl, sp, lr}^
    1a48:	6172006e 	cmnvs	r2, lr, rrx
    1a4c:	75715f77 	ldrbvc	r5, [r1, #-3959]!	; 0xf77
    1a50:	5f657565 	svcpl	0x00657565
    1a54:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    1a58:	6c6c615f 	stfvse	f6, [ip], #-380	; 0xfffffe84
    1a5c:	736f705f 	cmnvc	pc, #95	; 0x5f
    1a60:	61720074 	cmnvs	r2, r4, ror r0
    1a64:	75715f77 	ldrbvc	r5, [r1, #-3959]!	; 0xf77
    1a68:	5f657565 	svcpl	0x00657565
    1a6c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    1a70:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
    1a74:	666e695f 	undefined instruction 0x666e695f
    1a78:	616d726f 	cmnvs	sp, pc, ror #4
    1a7c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1a80:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1a84:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
    1a88:	735f6575 	cmpvc	pc, #490733568	; 0x1d400000
    1a8c:	5f657a69 	svcpl	0x00657a69
    1a90:	73756c66 	cmnvc	r5, #26112	; 0x6600
    1a94:	61720068 	cmnvs	r2, r8, rrx
    1a98:	75715f77 	ldrbvc	r5, [r1, #-3959]!	; 0xf77
    1a9c:	5f657565 	svcpl	0x00657565
    1aa0:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    1aa4:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
    1aa8:	00657465 	rsbeq	r7, r5, r5, ror #8
    1aac:	5f776172 	svcpl	0x00776172
    1ab0:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    1ab4:	69735f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    1ab8:	655f657a 	ldrbvs	r6, [pc, #-1402]	; 1546 <DISABLE_IRQ+0x14c6>
    1abc:	705f646e 	subsvc	r6, pc, lr, ror #8
    1ac0:	0074736f 	rsbseq	r7, r4, pc, ror #6
    1ac4:	5f67736d 	svcpl	0x0067736d
    1ac8:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1acc:	67736d00 	ldrbvs	r6, [r3, -r0, lsl #26]!
    1ad0:	7a69735f 	bvc	1a5e854 <MEM_SIZE+0x125e854>
    1ad4:	6f705f65 	svcvs	0x00705f65
    1ad8:	74007473 	strvc	r7, [r0], #-1139	; 0x473
    1adc:	5f6b7361 	svcpl	0x006b7361
    1ae0:	6f697270 	svcvs	0x00697270
    1ae4:	6c616300 	stclvs	3, cr6, [r1]
    1ae8:	616c7563 	cmnvs	ip, r3, ror #10
    1aec:	745f6574 	ldrbvc	r6, [pc], #1396	; 1af4 <DISABLE_IRQ+0x1a74>
    1af0:	5f656d69 	svcpl	0x00656d69
    1af4:	63696c73 	cmnvs	r9, #29440	; 0x7300
    1af8:	61720065 	cmnvs	r2, r5, rrx
    1afc:	63735f77 	cmnvs	r3, #476	; 0x1dc
    1b00:	00646568 	rsbeq	r6, r4, r8, ror #10
    1b04:	5f776172 	svcpl	0x00776172
    1b08:	735f736f 	cmpvc	pc, #-1140850687	; 0xbc000001
    1b0c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
    1b10:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1b14:	5f736f5f 	svcpl	0x00736f5f
    1b18:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    1b1c:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1b20:	6863735f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    1b24:	632e6465 	teqvs	lr, #1694498816	; 0x65000000
    1b28:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1b2c:	6d65735f 	stclvs	3, cr7, [r5, #-380]!	; 0xfffffe84
    1b30:	6f687061 	svcvs	0x00687061
    1b34:	675f6572 	undefined instruction 0x675f6572
    1b38:	72007465 	andvc	r7, r0, #1694498816	; 0x65000000
    1b3c:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
    1b40:	68706d65 	ldmdavs	r0!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    1b44:	5f65726f 	svcpl	0x0065726f
    1b48:	646e6573 	strbtvs	r6, [lr], #-1395	; 0x573
    1b4c:	746f6e5f 	strbtvc	r6, [pc], #3679	; 1b54 <DISABLE_IRQ+0x1ad4>
    1b50:	00796669 	rsbseq	r6, r9, r9, ror #12
    1b54:	5f776172 	svcpl	0x00776172
    1b58:	616d6573 	smcvs	54867	; 0xd653
    1b5c:	726f6870 	rsbvc	r6, pc, #7340032	; 0x700000
    1b60:	75705f65 	ldrbvc	r5, [r0, #-3941]!	; 0xf65
    1b64:	61720074 	cmnvs	r2, r4, ror r0
    1b68:	65735f77 	ldrbvs	r5, [r3, #-3959]!	; 0xf77
    1b6c:	6870616d 	ldmdavs	r0!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    1b70:	5f65726f 	svcpl	0x0065726f
    1b74:	656c6564 	strbvs	r6, [ip, #-1380]!	; 0x564
    1b78:	72006574 	andvc	r6, r0, #486539264	; 0x1d000000
    1b7c:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
    1b80:	70616d65 	rsbvc	r6, r1, r5, ror #26
    1b84:	65726f68 	ldrbvs	r6, [r2, #-3944]!	; 0xf68
    1b88:	6572635f 	ldrbvs	r6, [r2, #-863]!	; 0x35f
    1b8c:	00657461 	rsbeq	r7, r5, r1, ror #8
    1b90:	616d6573 	smcvs	54867	; 0xd653
    1b94:	726f6870 	rsbvc	r6, pc, #7340032	; 0x700000
    1b98:	74705f65 	ldrbtvc	r5, [r0], #-3941	; 0xf65
    1b9c:	65730072 	ldrbvs	r0, [r3, #-114]!	; 0x72
    1ba0:	6f635f6d 	svcvs	0x00635f6d
    1ba4:	00746e75 	rsbseq	r6, r4, r5, ror lr
    1ba8:	5f776172 	svcpl	0x00776172
    1bac:	616d6573 	smcvs	54867	; 0xd653
    1bb0:	726f6870 	rsbvc	r6, pc, #7340032	; 0x700000
    1bb4:	65735f65 	ldrbvs	r5, [r3, #-3941]!	; 0xf65
    1bb8:	6e690074 	mcrvs	0, 3, r0, cr9, cr4, {3}
    1bbc:	61697469 	cmnvs	r9, r9, ror #8
    1bc0:	6f635f6c 	svcvs	0x00635f6c
    1bc4:	00746e75 	rsbseq	r6, r4, r5, ror lr
    1bc8:	504d4553 	subpl	r4, sp, r3, asr r5
    1bcc:	45524f48 	ldrbmi	r4, [r2, #-3912]	; 0xf48
    1bd0:	4e45535f 	mcrmi	3, 2, r5, cr5, cr15, {2}
    1bd4:	4f4e5f44 	svcmi	0x004e5f44
    1bd8:	59464954 	stmdbpl	r6, {r2, r4, r6, r8, fp, lr}^
    1bdc:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1be0:	6d65735f 	stclvs	3, cr7, [r5, #-380]!	; 0xfffffe84
    1be4:	6f687061 	svcvs	0x00687061
    1be8:	705f6572 	subsvc	r6, pc, r2, ror r5
    1bec:	615f7475 	cmpvs	pc, r5, ror r4
    1bf0:	72006c6c 	andvc	r6, r0, #27648	; 0x6c00
    1bf4:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
    1bf8:	632e6d65 	teqvs	lr, #6464	; 0x1940
    1bfc:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1c00:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
    1c04:	7200632e 	andvc	r6, r0, #-1207959552	; 0xb8000000
    1c08:	655f7761 	ldrbvs	r7, [pc, #-1889]	; 14af <DISABLE_IRQ+0x142f>
    1c0c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1c10:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
    1c14:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    1c18:	72007470 	andvc	r7, r0, #1879048192	; 0x70000000
    1c1c:	665f7761 	ldrbvs	r7, [pc], -r1, ror #14
    1c20:	73696e69 	cmnvc	r9, #1680	; 0x690
    1c24:	6e695f68 	cdpvs	15, 6, cr5, cr9, cr8, {3}
    1c28:	61720074 	cmnvs	r2, r4, ror r0
    1c2c:	656d5f77 	strbvs	r5, [sp, #-3959]!	; 0xf77
    1c30:	7465736d 	strbtvc	r7, [r5], #-877	; 0x36d
    1c34:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1c38:	6d656d5f 	stclvs	13, cr6, [r5, #-380]!	; 0xfffffe84
    1c3c:	00797063 	rsbseq	r7, r9, r3, rrx
    1c40:	5f746962 	svcpl	0x00746962
    1c44:	72616573 	rsbvc	r6, r1, #482344960	; 0x1cc00000
    1c48:	665f6863 	ldrbvs	r6, [pc], -r3, ror #16
    1c4c:	74737269 	ldrbtvc	r7, [r3], #-617	; 0x269
    1c50:	656e6f5f 	strbvs	r6, [lr, #-3935]!	; 0xf5f
    1c54:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1c58:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    1c5c:	69745f65 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    1c60:	74006b63 	strvc	r6, [r0], #-2915	; 0xb63
    1c64:	00656d69 	rsbeq	r6, r5, r9, ror #26
    1c68:	74646977 	strbtvc	r6, [r4], #-2423	; 0x977
    1c6c:	6c620068 	stclvs	0, cr0, [r2], #-416	; 0xfffffe60
    1c70:	5f6b636f 	svcpl	0x006b636f
    1c74:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
    1c78:	6f705f65 	svcvs	0x00705f65
    1c7c:	705f7473 	subsvc	r7, pc, r3, ror r4
    1c80:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
    1c84:	72007373 	andvc	r7, r0, #-872415231	; 0xcc000001
    1c88:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
    1c8c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    1c90:	69745f6d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1c94:	735f656d 	cmpvc	pc, #457179136	; 0x1b400000
    1c98:	72007465 	andvc	r7, r0, #1694498816	; 0x65000000
    1c9c:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
    1ca0:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    1ca4:	00632e6d 	rsbeq	r2, r3, sp, ror #28
    1ca8:	5f776172 	svcpl	0x00776172
    1cac:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0x973
    1cb0:	745f6d65 	ldrbvc	r6, [pc], #3429	; 1cb8 <DISABLE_IRQ+0x1c38>
    1cb4:	5f656d69 	svcpl	0x00656d69
    1cb8:	00746567 	rsbseq	r6, r4, r7, ror #10
    1cbc:	5f776172 	svcpl	0x00776172
    1cc0:	6b736174 	blvs	1cda298 <MEM_SIZE+0x14da298>
    1cc4:	6572635f 	ldrbvs	r6, [r2, #-863]!	; 0x35f
    1cc8:	00657461 	rsbeq	r7, r5, r1, ror #8
    1ccc:	5f77656e 	svcpl	0x0077656e
    1cd0:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    1cd4:	696c735f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    1cd8:	70006563 	andvc	r6, r0, r3, ror #10
    1cdc:	63696c6f 	cmnvs	r9, #28416	; 0x6f00
    1ce0:	74705f79 	ldrbtvc	r5, [r0], #-3961	; 0xf79
    1ce4:	61720072 	cmnvs	r2, r2, ror r0
    1ce8:	65735f77 	ldrbvs	r5, [r3, #-3959]!	; 0xf77
    1cec:	63735f74 	cmnvs	r3, #464	; 0x1d0
    1cf0:	5f646568 	svcpl	0x00646568
    1cf4:	00796177 	rsbseq	r6, r9, r7, ror r1
    1cf8:	5f776172 	svcpl	0x00776172
    1cfc:	5f746567 	svcpl	0x00746567
    1d00:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0x973
    1d04:	675f6d65 	ldrbvs	r6, [pc, -r5, ror #26]
    1d08:	61626f6c 	cmnvs	r2, ip, ror #30
    1d0c:	70735f6c 	rsbsvc	r5, r3, ip, ror #30
    1d10:	00656361 	rsbeq	r6, r5, r1, ror #6
    1d14:	5f776172 	svcpl	0x00776172
    1d18:	6b736174 	blvs	1cda2f0 <MEM_SIZE+0x14da2f0>
    1d1c:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
    1d20:	00656d75 	rsbeq	r6, r5, r5, ror sp
    1d24:	65657266 	strbvs	r7, [r5, #-614]!	; 0x266
    1d28:	6b74735f 	blvs	1d1eaac <MEM_SIZE+0x151eaac>
    1d2c:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1d30:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
    1d34:	6863735f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    1d38:	775f6465 	ldrbvc	r6, [pc, -r5, ror #8]
    1d3c:	64007961 	strvs	r7, [r0], #-2401	; 0x961
    1d40:	5f617461 	svcpl	0x00617461
    1d44:	63617073 	cmnvs	r1, #115	; 0x73
    1d48:	69740065 	ldmdbvs	r4!, {r0, r2, r5, r6}^
    1d4c:	725f6b63 	subsvc	r6, pc, #101376	; 0x18c00
    1d50:	00657461 	rsbeq	r7, r5, r1, ror #8
    1d54:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    1d58:	6f705f74 	svcvs	0x00705f74
    1d5c:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    1d60:	61006e6f 	tstvs	r0, pc, ror #28
    1d64:	5f6f7475 	svcpl	0x006f7475
    1d68:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    1d6c:	65640074 	strbvs	r0, [r4, #-116]!	; 0x74
    1d70:	5f677562 	svcpl	0x00677562
    1d74:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
    1d78:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1d7c:	735f7000 	cmpvc	pc, #0
    1d80:	6b636174 	blvs	18da358 <MEM_SIZE+0x10da358>
    1d84:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1d88:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
    1d8c:	72705f6b 	rsbsvc	r5, r0, #428	; 0x1ac
    1d90:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1d94:	635f7974 	cmpvs	pc, #1900544	; 0x1d0000
    1d98:	676e6168 	strbvs	r6, [lr, -r8, ror #2]!
    1d9c:	61740065 	cmnvs	r4, r5, rrx
    1da0:	655f6b73 	ldrbvs	r6, [pc, #-2931]	; 1235 <DISABLE_IRQ+0x11b5>
    1da4:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    1da8:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1dac:	616e655f 	cmnvs	lr, pc, asr r5
    1db0:	5f656c62 	svcpl	0x00656c62
    1db4:	65686373 	strbvs	r6, [r8, #-883]!	; 0x373
    1db8:	61686300 	cmnvs	r8, r0, lsl #6
    1dbc:	5f65676e 	svcpl	0x0065676e
    1dc0:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    1dc4:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    1dc8:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
    1dcc:	72705f6b 	rsbsvc	r5, r0, #428	; 0x1ac
    1dd0:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1dd4:	72007974 	andvc	r7, r0, #1900544	; 0x1d0000
    1dd8:	675f7761 	ldrbvs	r7, [pc, -r1, ror #14]
    1ddc:	745f7465 	ldrbvc	r7, [pc], #1125	; 1de4 <DISABLE_IRQ+0x1d64>
    1de0:	5f6b7361 	svcpl	0x006b7361
    1de4:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
    1de8:	696f705f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    1dec:	7200746e 	andvc	r7, r0, #1845493760	; 0x6e000000
    1df0:	705f7465 	subsvc	r7, pc, r5, ror #8
    1df4:	65006972 	strvs	r6, [r0, #-2418]	; 0x972
    1df8:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    1dfc:	6978655f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
    1e00:	696d0074 	stmdbvs	sp!, {r2, r4, r5, r6}^
    1e04:	00696c6c 	rsbeq	r6, r9, ip, ror #24
    1e08:	6f636573 	svcvs	0x00636573
    1e0c:	0073646e 	rsbseq	r6, r3, lr, ror #8
    1e10:	5f776172 	svcpl	0x00776172
    1e14:	6b736174 	blvs	1cda3ec <MEM_SIZE+0x14da3ec>
    1e18:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    1e1c:	6c735f65 	ldclvs	15, cr5, [r3], #-404	; 0xfffffe6c
    1e20:	5f656369 	svcpl	0x00656369
    1e24:	6e616863 	cdpvs	8, 6, cr6, cr1, cr3, {3}
    1e28:	72006567 	andvc	r6, r0, #432013312	; 0x19c00000
    1e2c:	745f7761 	ldrbvc	r7, [pc], #1889	; 1e34 <DISABLE_IRQ+0x1db4>
    1e30:	2e6b7361 	cdpcs	3, 6, cr7, cr11, cr1, {3}
    1e34:	61720063 	cmnvs	r2, r3, rrx
    1e38:	69745f77 	ldmdbvs	r4!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1e3c:	735f656d 	cmpvc	pc, #457179136	; 0x1b400000
    1e40:	7065656c 	rsbvc	r6, r5, ip, ror #10
    1e44:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1e48:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
    1e4c:	75735f6b 	ldrbvc	r5, [r3, #-3947]!	; 0xf6b
    1e50:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
    1e54:	6c6f0064 	stclvs	0, cr0, [pc], #-400	; 0xfffffe70
    1e58:	72705f64 	rsbsvc	r5, r0, #400	; 0x190
    1e5c:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1e60:	72007974 	andvc	r7, r0, #1900544	; 0x1d0000
    1e64:	745f7761 	ldrbvc	r7, [pc], #1889	; 1e6c <DISABLE_IRQ+0x1dec>
    1e68:	5f6b7361 	svcpl	0x006b7361
    1e6c:	74696177 	strbtvc	r6, [r9], #-375	; 0x177
    1e70:	6f62615f 	svcvs	0x0062615f
    1e74:	6f007472 	svcvs	0x00007472
    1e78:	705f646c 	subsvc	r6, pc, ip, ror #8
    1e7c:	72006972 	andvc	r6, r0, #1867776	; 0x1c8000
    1e80:	645f7761 	ldrbvs	r7, [pc], #1889	; 1e88 <DISABLE_IRQ+0x1e08>
    1e84:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    1e88:	735f656c 	cmpvc	pc, #452984832	; 0x1b000000
    1e8c:	00656863 	rsbeq	r6, r5, r3, ror #16
    1e90:	656a626f 	strbvs	r6, [sl, #-623]!	; 0x26f
    1e94:	685f7463 	ldmdavs	pc, {r0, r1, r5, r6, sl, ip, sp, lr}^
    1e98:	00646165 	rsbeq	r6, r4, r5, ror #2
    1e9c:	5f776172 	svcpl	0x00776172
    1ea0:	6b736174 	blvs	1cda478 <MEM_SIZE+0x14da478>
    1ea4:	6564695f 	strbvs	r6, [r4, #-2399]!	; 0x95f
    1ea8:	6669746e 	strbtvs	r7, [r9], -lr, ror #8
    1eac:	656e0079 	strbvs	r0, [lr, #-121]!	; 0x79
    1eb0:	72705f77 	rsbsvc	r5, r0, #476	; 0x1dc
    1eb4:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1eb8:	72007974 	andvc	r7, r0, #1900544	; 0x1d0000
    1ebc:	695f7761 	ldmdbvs	pc, {r0, r5, r6, r8, r9, sl, ip, sp, lr}^
    1ec0:	5f726574 	svcpl	0x00726574
    1ec4:	636f6c62 	cmnvs	pc, #25088	; 0x6200
    1ec8:	61745f6b 	cmnvs	r4, fp, ror #30
    1ecc:	72006b73 	andvc	r6, r0, #117760	; 0x1cc00
    1ed0:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
    1ed4:	745f7465 	ldrbvc	r7, [pc], #1125	; 1edc <DISABLE_IRQ+0x1e5c>
    1ed8:	5f6b7361 	svcpl	0x006b7361
    1edc:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
    1ee0:	696f705f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    1ee4:	7200746e 	andvc	r7, r0, #1845493760	; 0x6e000000
    1ee8:	745f7761 	ldrbvc	r7, [pc], #1889	; 1ef0 <DISABLE_IRQ+0x1e70>
    1eec:	5f6b7361 	svcpl	0x006b7361
    1ef0:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    1ef4:	68635f6b 	stmdavs	r3!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1ef8:	006b6365 	rsbeq	r6, fp, r5, ror #6
    1efc:	5f776172 	svcpl	0x00776172
    1f00:	6b736174 	blvs	1cda4d8 <MEM_SIZE+0x14da4d8>
    1f04:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
    1f08:	00657465 	rsbeq	r7, r5, r5, ror #8
    1f0c:	72756f68 	rsbsvc	r6, r5, #416	; 0x1a0
    1f10:	61720073 	cmnvs	r2, r3, ror r0
    1f14:	6c735f77 	ldclvs	15, cr5, [r3], #-476	; 0xfffffe24
    1f18:	00706565 	rsbseq	r6, r0, r5, ror #10
    1f1c:	6b736174 	blvs	1cda4f4 <MEM_SIZE+0x14da4f4>
    1f20:	6772615f 	undefined instruction 0x6772615f
    1f24:	57415200 	strbpl	r5, [r1, -r0, lsl #4]
    1f28:	5341545f 	movtpl	r5, #5215	; 0x145f
    1f2c:	4e455f4b 	cdpmi	15, 4, cr5, cr5, cr11, {2}
    1f30:	00595254 	subseq	r5, r9, r4, asr r2
    1f34:	756e696d 	strbvc	r6, [lr, #-2413]!	; 0x96d
    1f38:	00736574 	rsbseq	r6, r3, r4, ror r5
    1f3c:	6b736174 	blvs	1cda514 <MEM_SIZE+0x14da514>
    1f40:	745f305f 	ldrbvc	r3, [pc], #95	; 1f48 <DISABLE_IRQ+0x1ec8>
    1f44:	5f6b6369 	svcpl	0x006b6369
    1f48:	646e6168 	strbtvs	r6, [lr], #-360	; 0x168
    1f4c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1f50:	6b736174 	blvs	1cda528 <MEM_SIZE+0x14da528>
    1f54:	745f305f 	ldrbvc	r3, [pc], #95	; 1f5c <DISABLE_IRQ+0x1edc>
    1f58:	5f6b6369 	svcpl	0x006b6369
    1f5c:	74736f70 	ldrbtvc	r6, [r3], #-3952	; 0xf70
    1f60:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1f64:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
    1f68:	5f305f6b 	svcpl	0x00305f6b
    1f6c:	6e6f7266 	cdpvs	2, 6, cr7, cr15, cr6, {3}
    1f70:	6f705f74 	svcvs	0x00705f74
    1f74:	68007473 	stmdavs	r0, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
    1f78:	69726279 	ldmdbvs	r2!, {r0, r3, r4, r5, r6, r9, sp, lr}^
    1f7c:	61645f64 	cmnvs	r4, r4, ror #30
    1f80:	745f6174 	ldrbvc	r6, [pc], #372	; 1f88 <DISABLE_IRQ+0x1f08>
    1f84:	00706d65 	rsbseq	r6, r0, r5, ror #26
    1f88:	72627968 	rsbvc	r7, r2, #1703936	; 0x1a0000
    1f8c:	6e5f6469 	cdpvs	4, 5, cr6, cr15, cr9, {3}
    1f90:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1f94:	5f746e69 	svcpl	0x00746e69
    1f98:	5f67736d 	svcpl	0x0067736d
    1f9c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    1fa0:	67736d00 	ldrbvs	r6, [r3, -r0, lsl #26]!
    1fa4:	7461645f 	strbtvc	r6, [r1], #-1119	; 0x45f
    1fa8:	79680061 	stmdbvc	r8!, {r0, r5, r6}^
    1fac:	64697262 	strbtvs	r7, [r9], #-610	; 0x262
    1fb0:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
    1fb4:	616d5f6b 	cmnvs	sp, fp, ror #30
    1fb8:	77735f79 	undefined instruction 0x77735f79
    1fbc:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1fc0:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
    1fc4:	67736d5f 	undefined instruction 0x67736d5f
    1fc8:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
    1fcc:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    1fd0:	62796800 	rsbsvs	r6, r9, #0
    1fd4:	5f646972 	svcpl	0x00646972
    1fd8:	5f746e69 	svcpl	0x00746e69
    1fdc:	636f7270 	cmnvs	pc, #7
    1fe0:	00737365 	rsbseq	r7, r3, r5, ror #6
    1fe4:	72627968 	rsbvc	r7, r2, #1703936	; 0x1a0000
    1fe8:	725f6469 	subsvc	r6, pc, #1761607680	; 0x69000000
    1fec:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1ff0:	00726576 	rsbseq	r6, r2, r6, ror r5
    1ff4:	6b736174 	blvs	1cda5cc <MEM_SIZE+0x14da5cc>
    1ff8:	655f305f 	ldrbvs	r3, [pc, #-95]	; 1fa1 <DISABLE_IRQ+0x1f21>
    1ffc:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
    2000:	736f705f 	cmnvc	pc, #95	; 0x5f
    2004:	6f697469 	svcvs	0x00697469
    2008:	6172006e 	cmnvs	r2, lr, rrx
    200c:	61745f77 	cmnvs	r4, r7, ror pc
    2010:	305f6b73 	subscc	r6, pc, r3, ror fp
    2014:	736f705f 	cmnvc	pc, #95	; 0x5f
    2018:	79680074 	stmdbvc	r8!, {r2, r4, r5, r6}^
    201c:	64697262 	strbtvs	r7, [r9], #-610	; 0x262
    2020:	0076655f 	rsbseq	r6, r6, pc, asr r5
    2024:	5f776172 	svcpl	0x00776172
    2028:	6b736174 	blvs	1cda600 <MEM_SIZE+0x14da600>
    202c:	695f305f 	ldmdbvs	pc, {r0, r1, r2, r3, r4, r6, ip, sp}^
    2030:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2034:	626f5f70 	rsbvs	r5, pc, #448	; 0x1c0
    2038:	7968006a 	stmdbvc	r8!, {r1, r3, r5, r6}^
    203c:	64697262 	strbtvs	r7, [r9], #-610	; 0x262
    2040:	6769685f 	undefined instruction 0x6769685f
    2044:	74736568 	ldrbtvc	r6, [r3], #-1384	; 0x568
    2048:	6972705f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    204c:	73617400 	cmnvc	r1, #0
    2050:	5f305f6b 	svcpl	0x00305f6b
    2054:	636f7270 	cmnvs	pc, #7
    2058:	00737365 	rsbseq	r7, r3, r5, ror #6
    205c:	5f776172 	svcpl	0x00776172
    2060:	6b736174 	blvs	1cda638 <MEM_SIZE+0x14da638>
    2064:	632e305f 	teqvs	lr, #95	; 0x5f
    2068:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    206c:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
    2070:	73715f6b 	cmnvc	r1, #428	; 0x1ac
    2074:	5f657a69 	svcpl	0x00657a69
    2078:	73756c66 	cmnvc	r5, #26112	; 0x6600
    207c:	61720068 	cmnvs	r2, r8, rrx
    2080:	61745f77 	cmnvs	r4, r7, ror pc
    2084:	715f6b73 	cmpvc	pc, r3, ror fp
    2088:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    208c:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
    2090:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0x965
    2094:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    2098:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
    209c:	73715f6b 	cmnvc	r1, #428	; 0x1ac
    20a0:	5f657a69 	svcpl	0x00657a69
    20a4:	5f646e65 	svcpl	0x00646e65
    20a8:	74736f70 	ldrbtvc	r6, [r3], #-3952	; 0xf70
    20ac:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    20b0:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
    20b4:	73715f6b 	cmnvc	r1, #428	; 0x1ac
    20b8:	5f657a69 	svcpl	0x00657a69
    20bc:	6e6f7266 	cdpvs	2, 6, cr7, cr15, cr6, {3}
    20c0:	6f705f74 	svcvs	0x00705f74
    20c4:	72007473 	andvc	r7, r0, #1929379840	; 0x73000000
    20c8:	745f7761 	ldrbvc	r7, [pc], #1889	; 20d0 <DISABLE_IRQ+0x2050>
    20cc:	5f6b7361 	svcpl	0x006b7361
    20d0:	7a697371 	bvc	1a5ee9c <MEM_SIZE+0x125ee9c>
    20d4:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xf65
    20d8:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    20dc:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
    20e0:	6f697461 	svcvs	0x00697461
    20e4:	6172006e 	cmnvs	r2, lr, rrx
    20e8:	61745f77 	cmnvs	r4, r7, ror pc
    20ec:	715f6b73 	cmpvc	pc, r3, ror fp
    20f0:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    20f4:	7a69735f 	bvc	1a5ee78 <MEM_SIZE+0x125ee78>
    20f8:	00632e65 	rsbeq	r2, r3, r5, ror #28
    20fc:	5f776172 	svcpl	0x00776172
    2100:	6b736174 	blvs	1cda6d8 <MEM_SIZE+0x14da6d8>
    2104:	6973715f 	ldmdbvs	r3!, {r0, r1, r2, r3, r4, r6, r8, ip, sp, lr}^
    2108:	635f657a 	cmpvs	pc, #511705088	; 0x1e800000
    210c:	74616572 	strbtvc	r6, [r1], #-1394	; 0x572
    2110:	61720065 	cmnvs	r2, r5, rrx
    2114:	61745f77 	cmnvs	r4, r7, ror pc
    2118:	715f6b73 	cmpvc	pc, r3, ror fp
    211c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    2120:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
    2124:	00657465 	rsbeq	r7, r5, r5, ror #8
    2128:	5f776172 	svcpl	0x00776172
    212c:	6b736174 	blvs	1cda704 <MEM_SIZE+0x14da704>
    2130:	6d65735f 	stclvs	3, cr7, [r5, #-380]!	; 0xfffffe84
    2134:	6f687061 	svcvs	0x00687061
    2138:	705f6572 	subsvc	r6, pc, r2, ror r5
    213c:	72007475 	andvc	r7, r0, #1962934272	; 0x75000000
    2140:	745f7761 	ldrbvc	r7, [pc], #1889	; 2148 <DISABLE_IRQ+0x20c8>
    2144:	5f6b7361 	svcpl	0x006b7361
    2148:	616d6573 	smcvs	54867	; 0xd653
    214c:	726f6870 	rsbvc	r6, pc, #7340032	; 0x700000
    2150:	65645f65 	strbvs	r5, [r4, #-3941]!	; 0xf65
    2154:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0x56c
    2158:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    215c:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
    2160:	65735f6b 	ldrbvs	r5, [r3, #-3947]!	; 0xf6b
    2164:	00632e6d 	rsbeq	r2, r3, sp, ror #28
    2168:	5f776172 	svcpl	0x00776172
    216c:	6b736174 	blvs	1cda744 <MEM_SIZE+0x14da744>
    2170:	6d65735f 	stclvs	3, cr7, [r5, #-380]!	; 0xfffffe84
    2174:	6f687061 	svcvs	0x00687061
    2178:	735f6572 	cmpvc	pc, #478150656	; 0x1c800000
    217c:	72007465 	andvc	r7, r0, #1694498816	; 0x65000000
    2180:	745f7761 	ldrbvc	r7, [pc], #1889	; 2188 <DISABLE_IRQ+0x2108>
    2184:	5f6b7361 	svcpl	0x006b7361
    2188:	616d6573 	smcvs	54867	; 0xd653
    218c:	726f6870 	rsbvc	r6, pc, #7340032	; 0x700000
    2190:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xf65
    2194:	61720074 	cmnvs	r2, r4, ror r0
    2198:	61745f77 	cmnvs	r4, r7, ror pc
    219c:	735f6b73 	cmpvc	pc, #117760	; 0x1cc00
    21a0:	70616d65 	rsbvc	r6, r1, r5, ror #26
    21a4:	65726f68 	ldrbvs	r6, [r2, #-3944]!	; 0xf68
    21a8:	6572635f 	ldrbvs	r6, [r2, #-863]!	; 0x35f
    21ac:	00657461 	rsbeq	r7, r5, r1, ror #8
    21b0:	6b636974 	blvs	18dc788 <MEM_SIZE+0x10dc788>
    21b4:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
    21b8:	72705f74 	rsbsvc	r5, r0, #464	; 0x1d0
    21bc:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    21c0:	695f7974 	ldmdbvs	pc, {r2, r4, r5, r6, r8, fp, ip, sp, lr}^
    21c4:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
    21c8:	69740074 	ldmdbvs	r4!, {r2, r4, r5, r6}^
    21cc:	6c5f6b63 	mrrcvs	11, 6, r6, pc, cr3
    21d0:	5f747369 	svcpl	0x00747369
    21d4:	6f6d6572 	svcvs	0x006d6572
    21d8:	74006576 	strvc	r6, [r0], #-1398	; 0x576
    21dc:	5f6b6369 	svcpl	0x006b6369
    21e0:	64616568 	strbtvs	r6, [r1], #-1384	; 0x568
    21e4:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
    21e8:	63697400 	cmnvs	r9, #0
    21ec:	61745f6b 	cmnvs	r4, fp, ror #30
    21f0:	705f6b73 	subsvc	r6, pc, r3, ror fp
    21f4:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
    21f8:	74007373 	strvc	r7, [r0], #-883	; 0x373
    21fc:	5f6b6369 	svcpl	0x006b6369
    2200:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
    2204:	6470755f 	ldrbtvs	r7, [r0], #-1375	; 0x55f
    2208:	00657461 	rsbeq	r7, r5, r1, ror #8
    220c:	6b736174 	blvs	1cda7e4 <MEM_SIZE+0x14da7e4>
    2210:	6574695f 	ldrbvs	r6, [r4, #-2399]!	; 0x95f
    2214:	65745f72 	ldrbvs	r5, [r4, #-3954]!	; 0xf72
    2218:	7400706d 	strvc	r7, [r0], #-109	; 0x6d
    221c:	5f6b6369 	svcpl	0x006b6369
    2220:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
    2224:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
    2228:	00747265 	rsbseq	r7, r4, r5, ror #4
    222c:	63745f70 	cmnvs	r4, #448	; 0x1c0
    2230:	61720062 	cmnvs	r2, r2, rrx
    2234:	69745f77 	ldmdbvs	r4!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2238:	632e6b63 	teqvs	lr, #101376	; 0x18c00
    223c:	72617000 	rsbvc	r7, r1, #0
    2240:	69740061 	ldmdbvs	r4!, {r0, r5, r6}^
    2244:	6c5f6b63 	mrrcvs	11, 6, r6, pc, cr3
    2248:	5f747369 	svcpl	0x00747369
    224c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    2250:	63697400 	cmnvs	r9, #0
    2254:	61745f6b 	cmnvs	r4, fp, ror #30
    2258:	735f6b73 	cmpvc	pc, #117760	; 0x1cc00
    225c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
    2260:	6f707300 	svcvs	0x00707300
    2264:	7400656b 	strvc	r6, [r0], #-1387	; 0x56b
    2268:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    226c:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
    2270:	6d697400 	cfstrdvs	mvd7, [r9]
    2274:	735f7265 	cmpvc	pc, #1342177286	; 0x50000006
    2278:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    227c:	70786500 	rsbsvc	r6, r8, r0, lsl #10
    2280:	74617269 	strbtvc	r7, [r1], #-617	; 0x269
    2284:	5f6e6f69 	svcpl	0x006e6f69
    2288:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
    228c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    2290:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    2294:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    2298:	615f7265 	cmpvs	pc, r5, ror #4
    229c:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    22a0:	00657461 	rsbeq	r7, r5, r1, ror #8
    22a4:	5f776172 	svcpl	0x00776172
    22a8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    22ac:	00632e72 	rsbeq	r2, r3, r2, ror lr
    22b0:	5f776172 	svcpl	0x00776172
    22b4:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    22b8:	68635f72 	stmdavs	r3!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    22bc:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xe61
    22c0:	6d697400 	cfstrdvs	mvd7, [r9]
    22c4:	685f7265 	ldmdavs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^
    22c8:	5f646165 	svcpl	0x00646165
    22cc:	00727470 	rsbseq	r7, r2, r0, ror r4
    22d0:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    22d4:	696c5f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    22d8:	69007473 	stmdbvs	r0, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
    22dc:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
    22e0:	745f6c61 	ldrbvc	r6, [pc], #3169	; 22e8 <DISABLE_IRQ+0x2268>
    22e4:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
    22e8:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    22ec:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    22f0:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
    22f4:	7261705f 	rsbvc	r7, r1, #95	; 0x5f
    22f8:	63006d61 	movwvs	r6, #3425	; 0xd61
    22fc:	5f6c6c61 	svcpl	0x006c6c61
    2300:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    2304:	61745f72 	cmnvs	r4, r2, ror pc
    2308:	72006b73 	andvc	r6, r0, #117760	; 0x1cc00
    230c:	745f7761 	ldrbvc	r7, [pc], #1889	; 2314 <DISABLE_IRQ+0x2294>
    2310:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    2314:	6165645f 	cmnvs	r5, pc, asr r4
    2318:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    231c:	00657461 	rsbeq	r7, r5, r1, ror #8
    2320:	6f747561 	svcvs	0x00747561
    2324:	7463615f 	strbtvc	r6, [r3], #-351	; 0x15f
    2328:	74617669 	strbtvc	r7, [r1], #-1641	; 0x669
    232c:	61720065 	cmnvs	r2, r5, rrx
    2330:	69745f77 	ldmdbvs	r4!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2334:	5f72656d 	svcpl	0x0072656d
    2338:	61657263 	cmnvs	r5, r3, ror #4
    233c:	72006574 	andvc	r6, r0, #486539264	; 0x1d000000
    2340:	745f7761 	ldrbvc	r7, [pc], #1889	; 2348 <DISABLE_IRQ+0x22c8>
    2344:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    2348:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
    234c:	00657465 	rsbeq	r7, r5, r5, ror #8
    2350:	685f6f74 	ldmdavs	pc, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    2354:	00646165 	rsbeq	r6, r4, r5, ror #2
    2358:	5f574152 	svcpl	0x00574152
    235c:	454d4954 	strbmi	r4, [sp, #-2388]	; 0x954
    2360:	78650052 	stmdavc	r5!, {r1, r4, r6}^
    2364:	61726970 	cmnvs	r2, r0, ror r9
    2368:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    236c:	706e695f 	rsbvc	r6, lr, pc, asr r9
    2370:	69007475 	stmdbvs	r0, {r0, r2, r4, r5, r6, sl, ip, sp, lr}
    2374:	5f74696e 	svcpl	0x0074696e
    2378:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    237c:	69740074 	ldmdbvs	r4!, {r2, r4, r5, r6}^
    2380:	5f72656d 	svcpl	0x0072656d
    2384:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
    2388:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    238c:	61720074 	cmnvs	r2, r4, ror r0
    2390:	69745f77 	ldmdbvs	r4!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2394:	5f72656d 	svcpl	0x0072656d
    2398:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    239c:	73657200 	cmnvc	r5, #0
    23a0:	64656863 	strbtvs	r6, [r5], #-2147	; 0x863
    23a4:	5f656c75 	svcpl	0x00656c75
    23a8:	6b636974 	blvs	18dc980 <MEM_SIZE+0x10dc980>
    23ac:	61720073 	cmnvs	r2, r3, ror r0
    23b0:	69745f77 	ldmdbvs	r4!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    23b4:	756f656d 	strbvc	r6, [pc, #-1389]!	; 1e4f <DISABLE_IRQ+0x1dcf>
    23b8:	75665f74 	strbvc	r5, [r6, #-3956]!	; 0xf74
    23bc:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    23c0:	74006e6f 	strvc	r6, [r0], #-3695	; 0xe6f
    23c4:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    23c8:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
    23cc:	72705f74 	rsbsvc	r5, r0, #464	; 0x1d0
    23d0:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    23d4:	695f7974 	ldmdbvs	pc, {r2, r4, r5, r6, r8, fp, ip, sp, lr}^
    23d8:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
    23dc:	69740074 	ldmdbvs	r4!, {r2, r4, r5, r6}^
    23e0:	5f72656d 	svcpl	0x0072656d
    23e4:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
    23e8:	6d65725f 	sfmvs	f7, 2, [r5, #-380]!	; (stclvs 2, cr7, [r5, #-380]!)	; 0xfffffe84
    23ec:	0065766f 	rsbeq	r7, r5, pc, ror #12
    23f0:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
    23f4:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
    23f8:	626f5f6b 	rsbvs	r5, pc, #428	; 0x1ac
    23fc:	6574006a 	ldrbvs	r0, [r4, #-106]!	; 0x6a
    2400:	745f7473 	ldrbvc	r7, [pc], #1139	; 2408 <DISABLE_IRQ+0x2388>
    2404:	5f6b7361 	svcpl	0x006b7361
    2408:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    240c:	7400316b 	strvc	r3, [r0], #-363	; 0x16b
    2410:	5f747365 	svcpl	0x00747365
    2414:	6b736174 	blvs	1cda9ec <MEM_SIZE+0x14da9ec>
    2418:	6174735f 	cmnvs	r4, pc, asr r3
    241c:	00326b63 	eorseq	r6, r2, r3, ror #22
    2420:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
    2424:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
    2428:	74735f6b 	ldrbtvc	r5, [r3], #-3947	; 0xf6b
    242c:	336b6361 	cmncc	fp, #-2080374783	; 0x84000001
    2430:	61507000 	cmpvs	r0, r0
    2434:	006d6172 	rsbeq	r6, sp, r2, ror r1
    2438:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
    243c:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
    2440:	00632e6b 	rsbeq	r2, r3, fp, ror #28
    2444:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
    2448:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
    244c:	7400316b 	strvc	r3, [r0], #-363	; 0x16b
    2450:	5f747365 	svcpl	0x00747365
    2454:	6b736174 	blvs	1cdaa2c <MEM_SIZE+0x14daa2c>
    2458:	65740032 	ldrbvs	r0, [r4, #-50]!	; 0x32
    245c:	745f7473 	ldrbvc	r7, [pc], #1139	; 2464 <DISABLE_IRQ+0x23e4>
    2460:	336b7361 	cmncc	fp, #-2080374783	; 0x84000001
    2464:	73657400 	cmnvc	r5, #0
    2468:	61745f74 	cmnvs	r4, r4, ror pc
    246c:	74006b73 	strvc	r6, [r0], #-2931	; 0xb73
    2470:	5f747365 	svcpl	0x00747365
    2474:	006d6573 	rsbeq	r6, sp, r3, ror r5
    2478:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
    247c:	6d65735f 	stclvs	3, cr7, [r5, #-380]!	; 0xfffffe84
    2480:	7400632e 	strvc	r6, [r0], #-814	; 0x32e
    2484:	5f747365 	svcpl	0x00747365
    2488:	6574756d 	ldrbvs	r7, [r4, #-1389]!	; 0x56d
    248c:	65740078 	ldrbvs	r0, [r4, #-120]!	; 0x78
    2490:	6d5f7473 	cfldrdvs	mvd7, [pc, #-460]	; 0xfffffe34
    2494:	78657475 	stmdavc	r5!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
    2498:	6600632e 	strvs	r6, [r0], -lr, lsr #6
    249c:	0067616c 	rsbeq	r6, r7, ip, ror #2
    24a0:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
    24a4:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    24a8:	74007265 	strvc	r7, [r0], #-613	; 0x265
    24ac:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    24b0:	6e75665f 	mrcvs	6, 3, r6, cr5, cr15, {2}
    24b4:	65740063 	ldrbvs	r0, [r4, #-99]!	; 0x63
    24b8:	745f7473 	ldrbvc	r7, [pc], #1139	; 24c0 <DISABLE_IRQ+0x2440>
    24bc:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    24c0:	6d00632e 	stcvs	3, cr6, [r0, #-184]	; 0xffffff48
    24c4:	705f6d65 	subsvc	r6, pc, r5, ror #26
    24c8:	006c6f6f 	rsbeq	r6, ip, pc, ror #30
    24cc:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
    24d0:	6f6c625f 	svcvs	0x006c625f
    24d4:	74006b63 	strvc	r6, [r0], #-2915	; 0xb63
    24d8:	5f747365 	svcpl	0x00747365
    24dc:	636f6c62 	cmnvs	pc, #25088	; 0x6200
    24e0:	00632e6b 	rsbeq	r2, r3, fp, ror #28
    24e4:	6c625f70 	stclvs	15, cr5, [r2], #-448	; 0xfffffe40
    24e8:	006b636f 	rsbeq	r6, fp, pc, ror #6
    24ec:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
    24f0:	6f6f705f 	svcvs	0x006f705f
    24f4:	6574006c 	ldrbvs	r0, [r4, #-108]!	; 0x6c
    24f8:	625f7473 	subsvs	r7, pc, #1929379840	; 0x73000000
    24fc:	2e657479 	mcrcs	4, 3, r7, cr5, cr9, {3}
    2500:	65740063 	ldrbvs	r0, [r4, #-99]!	; 0x63
    2504:	625f7473 	subsvs	r7, pc, #1929379840	; 0x73000000
    2508:	00657479 	rsbeq	r7, r5, r9, ror r4
    250c:	5f776172 	svcpl	0x00776172
    2510:	6b736174 	blvs	1cdaae8 <MEM_SIZE+0x14daae8>
    2514:	6f62615f 	svcvs	0x0062615f
    2518:	685f7472 	ldmdavs	pc, {r1, r4, r5, r6, sl, ip, sp, lr}^
    251c:	006b6f6f 	rsbeq	r6, fp, pc, ror #30
    2520:	5f776172 	svcpl	0x00776172
    2524:	6b736174 	blvs	1cdaafc <MEM_SIZE+0x14daafc>
    2528:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
    252c:	5f657465 	svcpl	0x00657465
    2530:	6b6f6f68 	blvs	1bde2d8 <MEM_SIZE+0x13de2d8>
    2534:	745f7000 	ldrbvc	r7, [pc], #0	; 253c <DISABLE_IRQ+0x24bc>
    2538:	006b7361 	rsbeq	r7, fp, r1, ror #6
    253c:	74735f70 	ldrbtvc	r5, [r3], #-3952	; 0xf70
    2540:	61625f6b 	cmnvs	r2, fp, ror #30
    2544:	74006573 	strvc	r6, [r0], #-1395	; 0x573
    2548:	5f6b7361 	svcpl	0x006b7361
    254c:	74697773 	strbtvc	r7, [r9], #-1907	; 0x773
    2550:	685f6863 	ldmdavs	pc, {r0, r1, r5, r6, fp, sp, lr}^
    2554:	006b6f6f 	rsbeq	r6, fp, pc, ror #30
    2558:	6b736174 	blvs	1cdab30 <MEM_SIZE+0x14dab30>
    255c:	6572635f 	ldrbvs	r6, [r2, #-863]!	; 0x35f
    2560:	5f657461 	svcpl	0x00657461
    2564:	6b6f6f68 	blvs	1bde30c <MEM_SIZE+0x13de30c>
    2568:	6b747300 	blvs	1d1f170 <MEM_SIZE+0x151f170>
    256c:	7a69735f 	bvc	1a5f2f0 <MEM_SIZE+0x125f2f0>
    2570:	61720065 	cmnvs	r2, r5, rrx
    2574:	736f5f77 	cmnvc	pc, #476	; 0x1dc
    2578:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    257c:	6f685f74 	svcvs	0x00685f74
    2580:	72006b6f 	andvc	r6, r0, #113664	; 0x1bc00
    2584:	745f7761 	ldrbvc	r7, [pc], #1889	; 258c <DISABLE_IRQ+0x250c>
    2588:	5f6b6369 	svcpl	0x006b6369
    258c:	6b6f6f68 	blvs	1bde334 <MEM_SIZE+0x13de334>
    2590:	726f7000 	rsbvc	r7, pc, #0
    2594:	74735f74 	ldrbtvc	r5, [r3], #-3956	; 0xf74
    2598:	5f6b6361 	svcpl	0x006b6361
    259c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    25a0:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    25a4:	6c64695f 	stclvs	9, cr6, [r4], #-380	; 0xfffffe84
    25a8:	6f635f65 	svcvs	0x00635f65
    25ac:	74756f72 	ldrbtvc	r6, [r5], #-3954	; 0xf72
    25b0:	5f656e69 	svcpl	0x00656e69
    25b4:	6b6f6f68 	blvs	1bde35c <MEM_SIZE+0x13de35c>
    25b8:	726f7000 	rsbvc	r7, pc, #0
    25bc:	00632e74 	rsbeq	r2, r3, r4, ror lr
    25c0:	6172745f 	cmnvs	r2, pc, asr r4
    25c4:	625f6563 	subsvs	r6, pc, #415236096	; 0x18c00000
    25c8:	6b636f6c 	blvs	18de380 <MEM_SIZE+0x10de380>
    25cc:	6f6f705f 	svcvs	0x006f705f
    25d0:	72635f6c 	rsbvc	r5, r3, #432	; 0x1b0
    25d4:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0x165
    25d8:	72745f00 	rsbsvc	r5, r4, #0
    25dc:	5f656361 	svcpl	0x00656361
    25e0:	6b736174 	blvs	1cdabb8 <MEM_SIZE+0x14dabb8>
    25e4:	6572635f 	ldrbvs	r6, [r2, #-863]!	; 0x35f
    25e8:	00657461 	rsbeq	r7, r5, r1, ror #8
    25ec:	6172745f 	cmnvs	r2, pc, asr r4
    25f0:	735f6563 	cmpvc	pc, #415236096	; 0x18c00000
    25f4:	70616d65 	rsbvc	r6, r1, r5, ror #26
    25f8:	65726f68 	ldrbvs	r6, [r2, #-3944]!	; 0xf68
    25fc:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
    2600:	00657465 	rsbeq	r7, r5, r5, ror #8
    2604:	6172745f 	cmnvs	r2, pc, asr r4
    2608:	715f6563 	cmpvc	pc, r3, ror #10
    260c:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    2610:	6b61775f 	blvs	1860394 <MEM_SIZE+0x1060394>
    2614:	61745f65 	cmnvs	r4, r5, ror #30
    2618:	5f006b73 	svcpl	0x00006b73
    261c:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    2620:	61745f65 	cmnvs	r4, r5, ror #30
    2624:	705f6b73 	subsvc	r6, pc, r3, ror fp
    2628:	695f6972 	ldmdbvs	pc, {r1, r4, r5, r6, r8, fp, sp, lr}^
    262c:	5f00766e 	svcpl	0x0000766e
    2630:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    2634:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
    2638:	61745f74 	cmnvs	r4, r4, ror pc
    263c:	735f6b73 	cmpvc	pc, #117760	; 0x1cc00
    2640:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
    2644:	745f0068 	ldrbvc	r0, [pc], #104	; 264c <DISABLE_IRQ+0x25cc>
    2648:	65636172 	strbvs	r6, [r3, #-370]!	; 0x172
    264c:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
    2650:	67736d5f 	undefined instruction 0x67736d5f
    2654:	6878655f 	ldmdavs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
    2658:	74737561 	ldrbtvc	r7, [r3], #-1377	; 0x561
    265c:	5f006465 	svcpl	0x00006465
    2660:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    2664:	75715f65 	ldrbvc	r5, [r1, #-3941]!	; 0xf65
    2668:	5f657565 	svcpl	0x00657565
    266c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    2670:	756c665f 	strbvc	r6, [ip, #-1631]!	; 0x65f
    2674:	5f006873 	svcpl	0x00006873
    2678:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    267c:	61745f65 	cmnvs	r4, r5, ror #30
    2680:	725f6b73 	subsvc	r6, pc, #117760	; 0x1cc00
    2684:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
    2688:	745f0065 	ldrbvc	r0, [pc], #101	; 2690 <DISABLE_IRQ+0x2610>
    268c:	65636172 	strbvs	r6, [r3, #-370]!	; 0x172
    2690:	74756d5f 	ldrbtvc	r6, [r5], #-3423	; 0xd5f
    2694:	655f7865 	ldrbvs	r7, [pc, #-2149]	; 1e37 <DISABLE_IRQ+0x1db7>
    2698:	65635f78 	strbvs	r5, [r3, #-3960]!	; 0xf78
    269c:	6972705f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    26a0:	65757100 	ldrbvs	r7, [r5, #-256]!	; 0x100
    26a4:	625f6575 	subsvs	r6, pc, #490733568	; 0x1d400000
    26a8:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    26ac:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
    26b0:	745f006a 	ldrbvc	r0, [pc], #106	; 26b8 <DISABLE_IRQ+0x2638>
    26b4:	65636172 	strbvs	r6, [r3, #-370]!	; 0x172
    26b8:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
    26bc:	6d5f6575 	cfldr64vs	mvdx6, [pc, #-468]	; 0xfffffe2c
    26c0:	6d5f6773 	ldclvs	7, cr6, [pc, #-460]	; 0xfffffe34
    26c4:	5f007861 	svcpl	0x00007861
    26c8:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    26cc:	61745f65 	cmnvs	r4, r5, ror #30
    26d0:	705f6b73 	subsvc	r6, pc, r3, ror fp
    26d4:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    26d8:	5f797469 	svcpl	0x00797469
    26dc:	6e616863 	cdpvs	8, 6, cr6, cr1, cr3, {3}
    26e0:	5f006567 	svcpl	0x00006567
    26e4:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    26e8:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xf65
    26ec:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    26f0:	736f705f 	cmnvc	pc, #95	; 0x5f
    26f4:	745f0074 	ldrbvc	r0, [pc], #116	; 26fc <DISABLE_IRQ+0x267c>
    26f8:	65636172 	strbvs	r6, [r3, #-370]!	; 0x172
    26fc:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
    2700:	735f6575 	cmpvc	pc, #490733568	; 0x1d400000
    2704:	5f657a69 	svcpl	0x00657a69
    2708:	5f67736d 	svcpl	0x0067736d
    270c:	74736f70 	ldrbtvc	r6, [r3], #-3952	; 0xf70
    2710:	72745f00 	rsbsvc	r5, r4, #0
    2714:	5f656361 	svcpl	0x00656361
    2718:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    271c:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xf65
    2720:	736d5f74 	cmnvc	sp, #464	; 0x1d0
    2724:	745f0067 	ldrbvc	r0, [pc], #103	; 272c <DISABLE_IRQ+0x26ac>
    2728:	65636172 	strbvs	r6, [r3, #-370]!	; 0x172
    272c:	6576655f 	ldrbvs	r6, [r6, #-1375]!	; 0x55f
    2730:	675f746e 	ldrbvs	r7, [pc, -lr, ror #8]
    2734:	625f7465 	subsvs	r7, pc, #1694498816	; 0x65000000
    2738:	6b636f6c 	blvs	18de4f0 <MEM_SIZE+0x10de4f0>
    273c:	72745f00 	rsbsvc	r5, r4, #0
    2740:	5f656361 	svcpl	0x00656361
    2744:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
    2748:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xf74
    274c:	745f0074 	ldrbvc	r0, [pc], #116	; 2754 <DISABLE_IRQ+0x26d4>
    2750:	65636172 	strbvs	r6, [r3, #-370]!	; 0x172
    2754:	74756d5f 	ldrbtvc	r6, [r5], #-3423	; 0xd5f
    2758:	725f7865 	subsvc	r7, pc, #6619136	; 0x650000
    275c:	61656c65 	cmnvs	r5, r5, ror #24
    2760:	735f6573 	cmpvc	pc, #482344960	; 0x1cc00000
    2764:	65636375 	strbvs	r6, [r3, #-885]!	; 0x375
    2768:	5f007373 	svcpl	0x00007373
    276c:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    2770:	756d5f65 	strbvc	r5, [sp, #-3941]!	; 0xf65
    2774:	5f786574 	svcpl	0x00786574
    2778:	00746567 	rsbseq	r6, r4, r7, ror #10
    277c:	6172745f 	cmnvs	r2, pc, asr r4
    2780:	695f6563 	ldmdbvs	pc, {r0, r1, r5, r6, r8, sl, sp, lr}^
    2784:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2788:	6172745f 	cmnvs	r2, pc, asr r4
    278c:	625f6563 	subsvs	r6, pc, #415236096	; 0x18c00000
    2790:	6b636f6c 	blvs	18de548 <MEM_SIZE+0x10de548>
    2794:	5f6f6e5f 	svcpl	0x006f6e5f
    2798:	6f6d656d 	svcvs	0x006d656d
    279c:	5f007972 	svcpl	0x00007972
    27a0:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    27a4:	756d5f65 	strbvc	r5, [sp, #-3941]!	; 0xf65
    27a8:	5f786574 	svcpl	0x00786574
    27ac:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0x572
    27b0:	00657361 	rsbeq	r7, r5, r1, ror #6
    27b4:	6172745f 	cmnvs	r2, pc, asr r4
    27b8:	745f6563 	ldrbvc	r6, [pc], #1379	; 27c0 <DISABLE_IRQ+0x2740>
    27bc:	5f6b7361 	svcpl	0x006b7361
    27c0:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    27c4:	70735f6b 	rsbsvc	r5, r3, fp, ror #30
    27c8:	00656361 	rsbeq	r6, r5, r1, ror #6
    27cc:	6172745f 	cmnvs	r2, pc, asr r4
    27d0:	715f6563 	cmpvc	pc, r3, ror #10
    27d4:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    27d8:	7a69735f 	bvc	1a5f55c <MEM_SIZE+0x125f55c>
    27dc:	736d5f65 	cmnvc	sp, #404	; 0x194
    27e0:	616d5f67 	cmnvs	sp, r7, ror #30
    27e4:	745f0078 	ldrbvc	r0, [pc], #120	; 27ec <DISABLE_IRQ+0x276c>
    27e8:	65636172 	strbvs	r6, [r3, #-370]!	; 0x172
    27ec:	6576655f 	ldrbvs	r6, [r6, #-1375]!	; 0x55f
    27f0:	775f746e 	ldrbvc	r7, [pc, -lr, ror #8]
    27f4:	00656b61 	rsbeq	r6, r5, r1, ror #22
    27f8:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    27fc:	00632e65 	rsbeq	r2, r3, r5, ror #28
    2800:	6172745f 	cmnvs	r2, pc, asr r4
    2804:	6d5f6563 	cfldr64vs	mvdx6, [pc, #-396]	; 0xfffffe74
    2808:	78657475 	stmdavc	r5!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
    280c:	6572635f 	ldrbvs	r6, [r2, #-863]!	; 0x35f
    2810:	00657461 	rsbeq	r7, r5, r1, ror #8
    2814:	6172745f 	cmnvs	r2, pc, asr r4
    2818:	735f6563 	cmpvc	pc, #415236096	; 0x18c00000
    281c:	70616d65 	rsbvc	r6, r1, r5, ror #26
    2820:	65726f68 	ldrbvs	r6, [r2, #-3944]!	; 0xf68
    2824:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
    2828:	6f6c625f 	svcvs	0x006c625f
    282c:	5f006b63 	svcpl	0x00006b63
    2830:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    2834:	756d5f65 	strbvc	r5, [sp, #-3941]!	; 0xf65
    2838:	5f786574 	svcpl	0x00786574
    283c:	656c6564 	strbvs	r6, [ip, #-1380]!	; 0x564
    2840:	5f006574 	svcpl	0x00006574
    2844:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    2848:	75715f65 	ldrbvc	r5, [r1, #-3941]!	; 0xf65
    284c:	5f657565 	svcpl	0x00657565
    2850:	5f746567 	svcpl	0x00746567
    2854:	636f6c62 	cmnvs	pc, #25088	; 0x6200
    2858:	745f006b 	ldrbvc	r0, [pc], #107	; 2860 <DISABLE_IRQ+0x27e0>
    285c:	65636172 	strbvs	r6, [r3, #-370]!	; 0x172
    2860:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
    2864:	65645f6b 	strbvs	r5, [r4, #-3947]!	; 0xf6b
    2868:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0x56c
    286c:	72745f00 	rsbsvc	r5, r4, #0
    2870:	5f656361 	svcpl	0x00656361
    2874:	616d6573 	smcvs	54867	; 0xd653
    2878:	726f6870 	rsbvc	r6, pc, #7340032	; 0x700000
    287c:	766f5f65 	strbtvc	r5, [pc], -r5, ror #30
    2880:	6c667265 	sfmvs	f7, 2, [r6], #-404	; (stclvs 2, cr7, [r6], #-404)	; 0xfffffe6c
    2884:	6600776f 	strvs	r7, [r0], -pc, ror #14
    2888:	006d6f72 	rsbeq	r6, sp, r2, ror pc
    288c:	6172745f 	cmnvs	r2, pc, asr r4
    2890:	745f6563 	ldrbvc	r6, [pc], #1379	; 2898 <DISABLE_IRQ+0x2818>
    2894:	5f6b7361 	svcpl	0x006b7361
    2898:	74697773 	strbtvc	r7, [r9], #-1907	; 0x773
    289c:	5f006863 	svcpl	0x00006863
    28a0:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    28a4:	61745f65 	cmnvs	r4, r5, ror #30
    28a8:	735f6b73 	cmpvc	pc, #117760	; 0x1cc00
    28ac:	65707375 	ldrbvs	r7, [r0, #-885]!	; 0x375
    28b0:	5f00646e 	svcpl	0x0000646e
    28b4:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    28b8:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
    28bc:	736d5f74 	cmnvc	sp, #464	; 0x1d0
    28c0:	6f705f67 	svcvs	0x00705f67
    28c4:	5f007473 	svcpl	0x00007473
    28c8:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    28cc:	65735f65 	ldrbvs	r5, [r3, #-3941]!	; 0xf65
    28d0:	6870616d 	ldmdavs	r0!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    28d4:	5f65726f 	svcpl	0x0065726f
    28d8:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    28dc:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    28e0:	61657263 	cmnvs	r5, r3, ror #4
    28e4:	5f006573 	svcpl	0x00006573
    28e8:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    28ec:	65735f65 	ldrbvs	r5, [r3, #-3941]!	; 0xf65
    28f0:	6870616d 	ldmdavs	r0!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    28f4:	5f65726f 	svcpl	0x0065726f
    28f8:	61657263 	cmnvs	r5, r3, ror #4
    28fc:	5f006574 	svcpl	0x00006574
    2900:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    2904:	75715f65 	ldrbvc	r5, [r1, #-3941]!	; 0xf65
    2908:	5f657565 	svcpl	0x00657565
    290c:	73756c66 	cmnvc	r5, #26112	; 0x6600
    2910:	745f0068 	ldrbvc	r0, [pc], #104	; 2918 <DISABLE_IRQ+0x2898>
    2914:	65636172 	strbvs	r6, [r3, #-370]!	; 0x172
    2918:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
    291c:	625f6575 	subsvs	r6, pc, #490733568	; 0x1d400000
    2920:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    2924:	61775f72 	cmnvs	r7, r2, ror pc
    2928:	745f656b 	ldrbvc	r6, [pc], #1387	; 2930 <DISABLE_IRQ+0x28b0>
    292c:	006b7361 	rsbeq	r7, fp, r1, ror #6
    2930:	6172745f 	cmnvs	r2, pc, asr r4
    2934:	715f6563 	cmpvc	pc, r3, ror #10
    2938:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    293c:	7a69735f 	bvc	1a5f6c0 <MEM_SIZE+0x125f6c0>
    2940:	72635f65 	rsbvc	r5, r3, #404	; 0x194
    2944:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0x165
    2948:	72745f00 	rsbsvc	r5, r4, #0
    294c:	5f656361 	svcpl	0x00656361
    2950:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    2954:	69735f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    2958:	675f657a 	undefined instruction 0x675f657a
    295c:	6d5f7465 	cfldrdvs	mvd7, [pc, #-404]	; 0xfffffe6c
    2960:	5f006773 	svcpl	0x00006773
    2964:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    2968:	65735f65 	ldrbvs	r5, [r3, #-3941]!	; 0xf65
    296c:	6870616d 	ldmdavs	r0!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    2970:	5f65726f 	svcpl	0x0065726f
    2974:	5f746567 	svcpl	0x00746567
    2978:	63637573 	cmnvs	r3, #482344960	; 0x1cc00000
    297c:	00737365 	rsbseq	r7, r3, r5, ror #6
    2980:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    2984:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
    2988:	745f006a 	ldrbvc	r0, [pc], #106	; 2990 <DISABLE_IRQ+0x2910>
    298c:	65636172 	strbvs	r6, [r3, #-370]!	; 0x172
    2990:	6675625f 	undefined instruction 0x6675625f
    2994:	5f726566 	svcpl	0x00726566
    2998:	0078616d 	rsbseq	r6, r8, sp, ror #2
    299c:	6172745f 	cmnvs	r2, pc, asr r4
    29a0:	715f6563 	cmpvc	pc, r3, ror #10
    29a4:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    29a8:	7a69735f 	bvc	1a5f72c <MEM_SIZE+0x125f72c>
    29ac:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xf65
    29b0:	6c625f74 	stclvs	15, cr5, [r2], #-464	; 0xfffffe30
    29b4:	006b636f 	rsbeq	r6, fp, pc, ror #6
    29b8:	6172745f 	cmnvs	r2, pc, asr r4
    29bc:	6d5f6563 	cfldr64vs	mvdx6, [pc, #-396]	; 0xfffffe74
    29c0:	78657475 	stmdavc	r5!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
    29c4:	6b61775f 	blvs	1860748 <MEM_SIZE+0x1060748>
    29c8:	61745f65 	cmnvs	r4, r5, ror #30
    29cc:	5f006b73 	svcpl	0x00006b73
    29d0:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    29d4:	75715f65 	ldrbvc	r5, [r1, #-3941]!	; 0xf65
    29d8:	5f657565 	svcpl	0x00657565
    29dc:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    29e0:	635f7265 	cmpvs	pc, #1342177286	; 0x50000006
    29e4:	74616572 	strbtvc	r6, [r1], #-1394	; 0x572
    29e8:	745f0065 	ldrbvc	r0, [pc], #101	; 29f0 <DISABLE_IRQ+0x2970>
    29ec:	65636172 	strbvs	r6, [r3, #-370]!	; 0x172
    29f0:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
    29f4:	645f6575 	ldrbvs	r6, [pc], #1397	; 29fc <DISABLE_IRQ+0x297c>
    29f8:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xc65
    29fc:	745f0065 	ldrbvc	r0, [pc], #101	; 2a04 <DISABLE_IRQ+0x2984>
    2a00:	65636172 	strbvs	r6, [r3, #-370]!	; 0x172
    2a04:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
    2a08:	625f6575 	subsvs	r6, pc, #490733568	; 0x1d400000
    2a0c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    2a10:	65675f72 	strbvs	r5, [r7, #-3954]!	; 0xf72
    2a14:	6c625f74 	stclvs	15, cr5, [r2], #-464	; 0xfffffe30
    2a18:	006b636f 	rsbeq	r6, fp, pc, ror #6
    2a1c:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
    2a20:	626f5f74 	rsbvs	r5, pc, #464	; 0x1d0
    2a24:	745f006a 	ldrbvc	r0, [pc], #106	; 2a2c <DISABLE_IRQ+0x29ac>
    2a28:	65636172 	strbvs	r6, [r3, #-370]!	; 0x172
    2a2c:	6576655f 	ldrbvs	r6, [r6, #-1375]!	; 0x55f
    2a30:	645f746e 	ldrbvs	r7, [pc], #1134	; 2a38 <DISABLE_IRQ+0x29b8>
    2a34:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xc65
    2a38:	745f0065 	ldrbvc	r0, [pc], #101	; 2a40 <DISABLE_IRQ+0x29c0>
    2a3c:	65636172 	strbvs	r6, [r3, #-370]!	; 0x172
    2a40:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
    2a44:	6d5f6575 	cfldr64vs	mvdx6, [pc, #-468]	; 0xfffffe2c
    2a48:	705f6773 	subsvc	r6, pc, r3, ror r7
    2a4c:	0074736f 	rsbseq	r7, r4, pc, ror #6
    2a50:	6574756d 	ldrbvs	r7, [r4, #-1389]!	; 0x56d
    2a54:	626f5f78 	rsbvs	r5, pc, #480	; 0x1e0
    2a58:	745f006a 	ldrbvc	r0, [pc], #106	; 2a60 <DISABLE_IRQ+0x29e0>
    2a5c:	65636172 	strbvs	r6, [r3, #-370]!	; 0x172
    2a60:	74756d5f 	ldrbtvc	r6, [r5], #-3423	; 0xd5f
    2a64:	675f7865 	ldrbvs	r7, [pc, -r5, ror #16]
    2a68:	625f7465 	subsvs	r7, pc, #1694498816	; 0x65000000
    2a6c:	6b636f6c 	blvs	18de824 <MEM_SIZE+0x10de824>
    2a70:	72745f00 	rsbsvc	r5, r4, #0
    2a74:	5f656361 	svcpl	0x00656361
    2a78:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
    2a7c:	5f6f6e5f 	svcpl	0x006f6e5f
    2a80:	6f6d656d 	svcvs	0x006d656d
    2a84:	5f007972 	svcpl	0x00007972
    2a88:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    2a8c:	61745f65 	cmnvs	r4, r5, ror #30
    2a90:	305f6b73 	subscc	r6, pc, r3, ror fp
    2a94:	65766f5f 	ldrbvs	r6, [r6, #-3935]!	; 0xf5f
    2a98:	6f6c6672 	svcvs	0x006c6672
    2a9c:	61740077 	cmnvs	r4, r7, ror r0
    2aa0:	725f6b73 	subsvc	r6, pc, #117760	; 0x1cc00
    2aa4:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
    2aa8:	74006465 	strvc	r6, [r0], #-1125	; 0x465
    2aac:	5f6b7361 	svcpl	0x006b7361
    2ab0:	656b6177 	strbvs	r6, [fp, #-375]!	; 0x177
    2ab4:	70755f64 	rsbsvc	r5, r5, r4, ror #30
    2ab8:	72745f00 	rsbsvc	r5, r4, #0
    2abc:	5f656361 	svcpl	0x00656361
    2ac0:	6b736174 	blvs	1cdb098 <MEM_SIZE+0x14db098>
    2ac4:	6f62615f 	svcvs	0x0062615f
    2ac8:	5f007472 	svcpl	0x00007472
    2acc:	63617274 	cmnvs	r1, #1073741831	; 0x40000007
    2ad0:	65735f65 	ldrbvs	r5, [r3, #-3941]!	; 0xf65
    2ad4:	61775f6d 	cmnvs	r7, sp, ror #30
    2ad8:	745f656b 	ldrbvc	r6, [pc], #1387	; 2ae0 <DISABLE_IRQ+0x2a60>
    2adc:	006b7361 	rsbeq	r7, fp, r1, ror #6
    2ae0:	6c6f6f70 	stclvs	15, cr6, [pc], #-448	; 0xfffffe40
    2ae4:	6a626f5f 	bvs	189e868 <MEM_SIZE+0x109e868>
    2ae8:	72745f00 	rsbsvc	r5, r4, #0
    2aec:	5f656361 	svcpl	0x00656361
    2af0:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
    2af4:	72635f74 	rsbvc	r5, r3, #464	; 0x1d0
    2af8:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0x165
    2afc:	72745f00 	rsbsvc	r5, r4, #0
    2b00:	5f656361 	svcpl	0x00656361
    2b04:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    2b08:	72635f65 	rsbvc	r5, r3, #404	; 0x194
    2b0c:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0x165
    2b10:	72745f00 	rsbsvc	r5, r4, #0
    2b14:	5f656361 	svcpl	0x00656361
    2b18:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    2b1c:	69735f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    2b20:	775f657a 	undefined instruction 0x775f657a
    2b24:	5f656b61 	svcpl	0x00656b61
    2b28:	6b736174 	blvs	1cdb100 <MEM_SIZE+0x14db100>
    2b2c:	72745f00 	rsbsvc	r5, r4, #0
    2b30:	5f656361 	svcpl	0x00656361
    2b34:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    2b38:	69735f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    2b3c:	645f657a 	ldrbvs	r6, [pc], #1402	; 2b44 <DISABLE_IRQ+0x2ac4>
    2b40:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xc65
    2b44:	Address 0x00002b44 is out of bounds.


Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	000002e8 	andeq	r0, r0, r8, ror #5
   4:	00000344 	andeq	r0, r0, r4, asr #6
   8:	00000374 	andeq	r0, r0, r4, ror r3
   c:	0000044c 	andeq	r0, r0, ip, asr #8
	...
  18:	0000016c 	andeq	r0, r0, ip, ror #2
  1c:	00000174 	andeq	r0, r0, r4, ror r1
  20:	000002a8 	andeq	r0, r0, r8, lsr #5
  24:	00000304 	andeq	r0, r0, r4, lsl #6
  28:	00000288 	andeq	r0, r0, r8, lsl #5
  2c:	000002a0 	andeq	r0, r0, r0, lsr #5
  30:	00000198 	muleq	r0, r8, r1
  34:	00000250 	andeq	r0, r0, r0, asr r2
  38:	00000180 	andeq	r0, r0, r0, lsl #3
  3c:	00000188 	andeq	r0, r0, r8, lsl #3
	...
  48:	0000016c 	andeq	r0, r0, ip, ror #2
  4c:	00000174 	andeq	r0, r0, r4, ror r1
  50:	000002a8 	andeq	r0, r0, r8, lsr #5
  54:	00000304 	andeq	r0, r0, r4, lsl #6
  58:	00000288 	andeq	r0, r0, r8, lsl #5
  5c:	000002a0 	andeq	r0, r0, r0, lsr #5
  60:	00000198 	muleq	r0, r8, r1
  64:	00000250 	andeq	r0, r0, r0, asr r2
  68:	00000180 	andeq	r0, r0, r0, lsl #3
  6c:	00000188 	andeq	r0, r0, r8, lsl #3
	...
  78:	00000084 	andeq	r0, r0, r4, lsl #1
  7c:	00000088 	andeq	r0, r0, r8, lsl #1
  80:	0000009c 	muleq	r0, ip, r0
  84:	000000a0 	andeq	r0, r0, r0, lsr #1
	...
  90:	000001a4 	andeq	r0, r0, r4, lsr #3
  94:	000001a8 	andeq	r0, r0, r8, lsr #3
  98:	000001bc 	undefined instruction 0x000001bc
  9c:	000001c0 	andeq	r0, r0, r0, asr #3
	...
  a8:	000003f0 	strdeq	r0, [r0], -r0
  ac:	000003f4 	strdeq	r0, [r0], -r4
  b0:	00000430 	andeq	r0, r0, r0, lsr r4
  b4:	000005a4 	andeq	r0, r0, r4, lsr #11
  b8:	000003f8 	strdeq	r0, [r0], -r8
  bc:	00000424 	andeq	r0, r0, r4, lsr #8
	...
  c8:	000003f0 	strdeq	r0, [r0], -r0
  cc:	000003f4 	strdeq	r0, [r0], -r4
  d0:	00000430 	andeq	r0, r0, r0, lsr r4
  d4:	000005a4 	andeq	r0, r0, r4, lsr #11
  d8:	000003f8 	strdeq	r0, [r0], -r8
  dc:	00000424 	andeq	r0, r0, r4, lsr #8
	...
  e8:	000001e8 	andeq	r0, r0, r8, ror #3
  ec:	000001ec 	andeq	r0, r0, ip, ror #3
  f0:	000001fc 	strdeq	r0, [r0], -ip
  f4:	00000200 	andeq	r0, r0, r0, lsl #4
	...
 100:	00000014 	andeq	r0, r0, r4, lsl r0
 104:	00000018 	andeq	r0, r0, r8, lsl r0
 108:	00000024 	andeq	r0, r0, r4, lsr #32
 10c:	00000030 	andeq	r0, r0, r0, lsr r0
	...
 118:	0000004c 	andeq	r0, r0, ip, asr #32
 11c:	00000050 	andeq	r0, r0, r0, asr r0
 120:	00000064 	andeq	r0, r0, r4, rrx
 124:	0000007c 	andeq	r0, r0, ip, ror r0
	...
 130:	0000004c 	andeq	r0, r0, ip, asr #32
 134:	00000050 	andeq	r0, r0, r0, asr r0
 138:	00000064 	andeq	r0, r0, r4, rrx
 13c:	0000007c 	andeq	r0, r0, ip, ror r0
	...
 148:	00000158 	andeq	r0, r0, r8, asr r1
 14c:	00000160 	andeq	r0, r0, r0, ror #2
 150:	00000164 	andeq	r0, r0, r4, ror #2
 154:	0000017c 	andeq	r0, r0, ip, ror r1
	...
 160:	000001ac 	andeq	r0, r0, ip, lsr #3
 164:	000001b4 	undefined instruction 0x000001b4
 168:	000001cc 	andeq	r0, r0, ip, asr #3
 16c:	000001d0 	ldrdeq	r0, [r0], -r0
 170:	000001bc 	undefined instruction 0x000001bc
 174:	000001c8 	andeq	r0, r0, r8, asr #3
	...
 180:	000001c8 	andeq	r0, r0, r8, asr #3
 184:	000001cc 	andeq	r0, r0, ip, asr #3
 188:	000001d0 	ldrdeq	r0, [r0], -r0
 18c:	000001e8 	andeq	r0, r0, r8, ror #3
	...
 198:	00000240 	andeq	r0, r0, r0, asr #4
 19c:	00000250 	andeq	r0, r0, r0, asr r2
 1a0:	00000254 	andeq	r0, r0, r4, asr r2
 1a4:	00000258 	andeq	r0, r0, r8, asr r2
	...
 1b0:	00000250 	andeq	r0, r0, r0, asr r2
 1b4:	00000254 	andeq	r0, r0, r4, asr r2
 1b8:	00000258 	andeq	r0, r0, r8, asr r2
 1bc:	000002a8 	andeq	r0, r0, r8, lsr #5
	...
 1c8:	00000250 	andeq	r0, r0, r0, asr r2
 1cc:	00000254 	andeq	r0, r0, r4, asr r2
 1d0:	00000258 	andeq	r0, r0, r8, asr r2
 1d4:	000002a8 	andeq	r0, r0, r8, lsr #5
	...
 1e0:	00000280 	andeq	r0, r0, r0, lsl #5
 1e4:	00000284 	andeq	r0, r0, r4, lsl #5
 1e8:	00000288 	andeq	r0, r0, r8, lsl #5
 1ec:	000002a0 	andeq	r0, r0, r0, lsr #5
	...
 1f8:	00000310 	andeq	r0, r0, r0, lsl r3
 1fc:	00000314 	andeq	r0, r0, r4, lsl r3
 200:	00000324 	andeq	r0, r0, r4, lsr #6
 204:	00000328 	andeq	r0, r0, r8, lsr #6
 208:	00000318 	andeq	r0, r0, r8, lsl r3
 20c:	00000320 	andeq	r0, r0, r0, lsr #6
	...
 218:	000003a0 	andeq	r0, r0, r0, lsr #7
 21c:	000003a4 	andeq	r0, r0, r4, lsr #7
 220:	000003b4 	undefined instruction 0x000003b4
 224:	000003b8 	undefined instruction 0x000003b8
 228:	000003a8 	andeq	r0, r0, r8, lsr #7
 22c:	000003b0 	undefined instruction 0x000003b0
	...
 238:	000003e8 	andeq	r0, r0, r8, ror #7
 23c:	000003ec 	andeq	r0, r0, ip, ror #7
 240:	00000410 	andeq	r0, r0, r0, lsl r4
 244:	00000414 	andeq	r0, r0, r4, lsl r4
 248:	00000404 	andeq	r0, r0, r4, lsl #8
 24c:	00000408 	andeq	r0, r0, r8, lsl #8
 250:	000003f8 	strdeq	r0, [r0], -r8
 254:	000003fc 	strdeq	r0, [r0], -ip
 258:	000003f0 	strdeq	r0, [r0], -r0
 25c:	000003f4 	strdeq	r0, [r0], -r4
	...
 268:	000004b0 	undefined instruction 0x000004b0
 26c:	000004f8 	strdeq	r0, [r0], -r8
 270:	00000504 	andeq	r0, r0, r4, lsl #10
 274:	0000050c 	andeq	r0, r0, ip, lsl #10
	...
 280:	000004b0 	undefined instruction 0x000004b0
 284:	000004f8 	strdeq	r0, [r0], -r8
 288:	00000504 	andeq	r0, r0, r4, lsl #10
 28c:	0000050c 	andeq	r0, r0, ip, lsl #10
	...
 298:	000004dc 	ldrdeq	r0, [r0], -ip
 29c:	000004e0 	andeq	r0, r0, r0, ror #9
 2a0:	000004e4 	andeq	r0, r0, r4, ror #9
 2a4:	000004f8 	strdeq	r0, [r0], -r8
	...
 2b0:	0000050c 	andeq	r0, r0, ip, lsl #10
 2b4:	00000510 	andeq	r0, r0, r0, lsl r5
 2b8:	00000514 	andeq	r0, r0, r4, lsl r5
 2bc:	0000052c 	andeq	r0, r0, ip, lsr #10
	...
 2c8:	000001bc 	undefined instruction 0x000001bc
 2cc:	000001c0 	andeq	r0, r0, r0, asr #3
 2d0:	000001d4 	ldrdeq	r0, [r0], -r4
 2d4:	000001d8 	ldrdeq	r0, [r0], -r8
	...
 2e0:	000002c8 	andeq	r0, r0, r8, asr #5
 2e4:	0000032c 	andeq	r0, r0, ip, lsr #6
 2e8:	00000398 	muleq	r0, r8, r3
 2ec:	000003c8 	andeq	r0, r0, r8, asr #7
	...
 2f8:	000002c8 	andeq	r0, r0, r8, asr #5
 2fc:	0000032c 	andeq	r0, r0, ip, lsr #6
 300:	00000398 	muleq	r0, r8, r3
 304:	000003c8 	andeq	r0, r0, r8, asr #7
	...
 310:	00000620 	andeq	r0, r0, r0, lsr #12
 314:	00000688 	andeq	r0, r0, r8, lsl #13
 318:	00000690 	muleq	r0, r0, r6
 31c:	000006c4 	andeq	r0, r0, r4, asr #13
	...
 328:	00000620 	andeq	r0, r0, r0, lsr #12
 32c:	00000688 	andeq	r0, r0, r8, lsl #13
 330:	00000690 	muleq	r0, r0, r6
 334:	000006c4 	andeq	r0, r0, r4, asr #13
	...
 340:	000001d8 	ldrdeq	r0, [r0], -r8
 344:	000001dc 	ldrdeq	r0, [r0], -ip
 348:	000001f0 	strdeq	r0, [r0], -r0
 34c:	000001f4 	strdeq	r0, [r0], -r4
	...
 358:	00000104 	andeq	r0, r0, r4, lsl #2
 35c:	00000108 	andeq	r0, r0, r8, lsl #2
 360:	0000011c 	andeq	r0, r0, ip, lsl r1
 364:	00000120 	andeq	r0, r0, r0, lsr #2
	...
 370:	0000014c 	andeq	r0, r0, ip, asr #2
 374:	00000150 	andeq	r0, r0, r0, asr r1
 378:	00000154 	andeq	r0, r0, r4, asr r1
 37c:	0000015c 	andeq	r0, r0, ip, asr r1
	...
 388:	00000264 	andeq	r0, r0, r4, ror #4
 38c:	00000268 	andeq	r0, r0, r8, ror #4
 390:	0000027c 	andeq	r0, r0, ip, ror r2
 394:	00000280 	andeq	r0, r0, r0, lsl #5
	...
 3a0:	000004e8 	andeq	r0, r0, r8, ror #9
 3a4:	000004ec 	andeq	r0, r0, ip, ror #9
 3a8:	000004fc 	strdeq	r0, [r0], -ip
 3ac:	00000500 	andeq	r0, r0, r0, lsl #10
 3b0:	000004f0 	strdeq	r0, [r0], -r0
 3b4:	000004f8 	strdeq	r0, [r0], -r8
	...
 3c0:	00000668 	andeq	r0, r0, r8, ror #12
 3c4:	0000066c 	andeq	r0, r0, ip, ror #12
 3c8:	0000067c 	andeq	r0, r0, ip, ror r6
 3cc:	00000680 	andeq	r0, r0, r0, lsl #13
 3d0:	00000670 	andeq	r0, r0, r0, ror r6
 3d4:	00000678 	andeq	r0, r0, r8, ror r6
	...
 3e0:	000006bc 	undefined instruction 0x000006bc
 3e4:	000006c0 	andeq	r0, r0, r0, asr #13
 3e8:	000006c4 	andeq	r0, r0, r4, asr #13
 3ec:	000006d0 	ldrdeq	r0, [r0], -r0
	...
 3f8:	000010b0 	strheq	r1, [r0], -r0
 3fc:	000010b4 	strheq	r1, [r0], -r4
 400:	000010c0 	andeq	r1, r0, r0, asr #1
 404:	000010d0 	ldrdeq	r1, [r0], -r0
 408:	000010b8 	strheq	r1, [r0], -r8
 40c:	000010bc 	strheq	r1, [r0], -ip
	...
 418:	0000004c 	andeq	r0, r0, ip, asr #32
 41c:	00000050 	andeq	r0, r0, r0, asr r0
 420:	00000054 	andeq	r0, r0, r4, asr r0
 424:	00000098 	muleq	r0, r8, r0
	...
 430:	0000004c 	andeq	r0, r0, ip, asr #32
 434:	00000050 	andeq	r0, r0, r0, asr r0
 438:	00000054 	andeq	r0, r0, r4, asr r0
 43c:	00000098 	muleq	r0, r8, r0
	...
 448:	00000048 	andeq	r0, r0, r8, asr #32
 44c:	0000004c 	andeq	r0, r0, ip, asr #32
 450:	000000a4 	andeq	r0, r0, r4, lsr #1
 454:	000000b4 	strheq	r0, [r0], -r4
 458:	00000058 	andeq	r0, r0, r8, asr r0
 45c:	00000098 	muleq	r0, r8, r0
 460:	00000050 	andeq	r0, r0, r0, asr r0
 464:	00000054 	andeq	r0, r0, r4, asr r0
	...
 470:	00000048 	andeq	r0, r0, r8, asr #32
 474:	0000004c 	andeq	r0, r0, ip, asr #32
 478:	000000a4 	andeq	r0, r0, r4, lsr #1
 47c:	000000b4 	strheq	r0, [r0], -r4
 480:	00000058 	andeq	r0, r0, r8, asr r0
 484:	00000098 	muleq	r0, r8, r0
 488:	00000050 	andeq	r0, r0, r0, asr r0
 48c:	00000054 	andeq	r0, r0, r4, asr r0
	...
 498:	0000007c 	andeq	r0, r0, ip, ror r0
 49c:	00000080 	andeq	r0, r0, r0, lsl #1
 4a0:	00000084 	andeq	r0, r0, r4, lsl #1
 4a4:	00000098 	muleq	r0, r8, r0
	...
 4b0:	00000210 	andeq	r0, r0, r0, lsl r2
 4b4:	00000214 	andeq	r0, r0, r4, lsl r2
 4b8:	00000218 	andeq	r0, r0, r8, lsl r2
 4bc:	00000224 	andeq	r0, r0, r4, lsr #4
	...
 4c8:	00000280 	andeq	r0, r0, r0, lsl #5
 4cc:	00000284 	andeq	r0, r0, r4, lsl #5
 4d0:	00000290 	muleq	r0, r0, r2
 4d4:	000002b0 	undefined instruction 0x000002b0
 4d8:	00000288 	andeq	r0, r0, r8, lsl #5
 4dc:	0000028c 	andeq	r0, r0, ip, lsl #5
	...
 4e8:	00000280 	andeq	r0, r0, r0, lsl #5
 4ec:	00000284 	andeq	r0, r0, r4, lsl #5
 4f0:	00000290 	muleq	r0, r0, r2
 4f4:	000002b0 	undefined instruction 0x000002b0
 4f8:	00000288 	andeq	r0, r0, r8, lsl #5
 4fc:	0000028c 	andeq	r0, r0, ip, lsl #5
	...
 508:	000002b0 	undefined instruction 0x000002b0
 50c:	000002b4 	undefined instruction 0x000002b4
 510:	000002c0 	andeq	r0, r0, r0, asr #5
 514:	000002dc 	ldrdeq	r0, [r0], -ip
 518:	000002b8 	undefined instruction 0x000002b8
 51c:	000002bc 	undefined instruction 0x000002bc
	...
 528:	000002b0 	undefined instruction 0x000002b0
 52c:	000002b4 	undefined instruction 0x000002b4
 530:	000002c0 	andeq	r0, r0, r0, asr #5
 534:	000002dc 	ldrdeq	r0, [r0], -ip
 538:	000002b8 	undefined instruction 0x000002b8
 53c:	000002bc 	undefined instruction 0x000002bc
	...
 548:	00000310 	andeq	r0, r0, r0, lsl r3
 54c:	00000314 	andeq	r0, r0, r4, lsl r3
 550:	00000324 	andeq	r0, r0, r4, lsr #6
 554:	00000328 	andeq	r0, r0, r8, lsr #6
 558:	00000318 	andeq	r0, r0, r8, lsl r3
 55c:	00000320 	andeq	r0, r0, r0, lsr #6
	...
 568:	000000f8 	strdeq	r0, [r0], -r8
 56c:	000000fc 	strdeq	r0, [r0], -ip
 570:	00000144 	andeq	r0, r0, r4, asr #2
 574:	00000164 	andeq	r0, r0, r4, ror #2
	...
 580:	000000f8 	strdeq	r0, [r0], -r8
 584:	000000fc 	strdeq	r0, [r0], -ip
 588:	00000144 	andeq	r0, r0, r4, asr #2
 58c:	00000164 	andeq	r0, r0, r4, ror #2
	...
 598:	00000184 	andeq	r0, r0, r4, lsl #3
 59c:	00000188 	andeq	r0, r0, r8, lsl #3
 5a0:	0000020c 	andeq	r0, r0, ip, lsl #4
 5a4:	00000220 	andeq	r0, r0, r0, lsr #4
 5a8:	00000194 	muleq	r0, r4, r1
 5ac:	000001d0 	ldrdeq	r0, [r0], -r0
 5b0:	0000018c 	andeq	r0, r0, ip, lsl #3
 5b4:	00000190 	muleq	r0, r0, r1
	...
 5c0:	00000184 	andeq	r0, r0, r4, lsl #3
 5c4:	00000188 	andeq	r0, r0, r8, lsl #3
 5c8:	0000020c 	andeq	r0, r0, ip, lsl #4
 5cc:	00000220 	andeq	r0, r0, r0, lsr #4
 5d0:	00000194 	muleq	r0, r4, r1
 5d4:	000001d0 	ldrdeq	r0, [r0], -r0
 5d8:	0000018c 	andeq	r0, r0, ip, lsl #3
 5dc:	00000190 	muleq	r0, r0, r1
	...
 5e8:	00000270 	andeq	r0, r0, r0, ror r2
 5ec:	00000274 	andeq	r0, r0, r4, ror r2
 5f0:	00000278 	andeq	r0, r0, r8, ror r2
 5f4:	00000294 	muleq	r0, r4, r2
	...
 600:	00000270 	andeq	r0, r0, r0, ror r2
 604:	00000274 	andeq	r0, r0, r4, ror r2
 608:	00000278 	andeq	r0, r0, r8, ror r2
 60c:	00000294 	muleq	r0, r4, r2
	...
 618:	00000438 	andeq	r0, r0, r8, lsr r4
 61c:	0000043c 	andeq	r0, r0, ip, lsr r4
 620:	000004a0 	andeq	r0, r0, r0, lsr #9
 624:	000004b4 	undefined instruction 0x000004b4
 628:	00000484 	andeq	r0, r0, r4, lsl #9
 62c:	00000488 	andeq	r0, r0, r8, lsl #9
 630:	00000448 	andeq	r0, r0, r8, asr #8
 634:	00000480 	andeq	r0, r0, r0, lsl #9
 638:	00000440 	andeq	r0, r0, r0, asr #8
 63c:	00000444 	andeq	r0, r0, r4, asr #8
	...
 648:	00000438 	andeq	r0, r0, r8, lsr r4
 64c:	0000043c 	andeq	r0, r0, ip, lsr r4
 650:	000004a0 	andeq	r0, r0, r0, lsr #9
 654:	000004b4 	undefined instruction 0x000004b4
 658:	00000484 	andeq	r0, r0, r4, lsl #9
 65c:	00000488 	andeq	r0, r0, r8, lsl #9
 660:	00000448 	andeq	r0, r0, r8, asr #8
 664:	00000480 	andeq	r0, r0, r0, lsl #9
 668:	00000440 	andeq	r0, r0, r0, asr #8
 66c:	00000444 	andeq	r0, r0, r4, asr #8
	...
 678:	0000046c 	andeq	r0, r0, ip, ror #8
 67c:	00000480 	andeq	r0, r0, r0, lsl #9
 680:	00000484 	andeq	r0, r0, r4, lsl #9
 684:	00000488 	andeq	r0, r0, r8, lsl #9
	...
